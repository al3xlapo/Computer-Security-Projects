
;; Function compress32 (compress32, funcdef_no=11, decl_uid=3211, cgraph_uid=11, symbol_order=19)

compress32 (struct hashState * state, const BitSequence * datablock)
{
  unsigned long ivtmp.77;
  vector(4) unsigned int * vectp.60;
  vector(4) unsigned int vect_cst_.58;
  vector(4) unsigned int vect_cst_.57;
  vector(4) unsigned int vect__497.56;
  vector(4) unsigned int vect_cst_.55;
  vector(4) unsigned int vect_cst_.54;
  vector(4) unsigned int vect_cst_.52;
  vector(4) unsigned int vect_cst_.51;
  vector(4) unsigned int vect_cst_.50;
  vector(4) unsigned int vect_cst_.49;
  unsigned int v$15;
  unsigned int v$14;
  unsigned int v$13;
  unsigned int v$12;
  unsigned int v$11;
  unsigned int v$10;
  unsigned int v$9;
  unsigned int v$8;
  unsigned int v$7;
  unsigned int v$6;
  unsigned int v$5;
  unsigned int v$4;
  unsigned int v$3;
  unsigned int v$2;
  unsigned int v$1;
  unsigned int v$0;
  u32 m[16];
  unsigned int ivtmp_6;
  unsigned int ivtmp_7;
  unsigned int _19;
  unsigned int _34;
  vector(4) unsigned int _41;
  vector(4) unsigned int _42;
  unsigned int _49;
  unsigned int _64;
  unsigned int _79;
  unsigned int _94;
  unsigned int _109;
  unsigned int _124;
  unsigned int _139;
  unsigned int _154;
  unsigned int _169;
  unsigned int _184;
  unsigned int _199;
  unsigned int _214;
  unsigned int _229;
  unsigned int _244;
  unsigned int _255;
  unsigned int _257;
  unsigned int _259;
  unsigned int _261;
  int _263;
  unsigned int _264;
  unsigned int _267;
  unsigned int _277;
  unsigned int _278;
  unsigned int _279;
  unsigned int _280;
  unsigned int _281;
  unsigned int _282;
  unsigned int _283;
  unsigned int _284;
  unsigned int _287;
  unsigned int _288;
  unsigned int _289;
  unsigned int _290;
  unsigned int _291;
  unsigned int _292;
  unsigned int _293;
  unsigned int _294;
  unsigned int _301;
  unsigned int _302;
  unsigned int _303;
  unsigned int _304;
  unsigned int _305;
  unsigned int _306;
  unsigned int _307;
  unsigned int _308;
  unsigned int _311;
  unsigned int _312;
  unsigned int _313;
  unsigned int _314;
  unsigned int _315;
  unsigned int _316;
  unsigned int _317;
  unsigned int _318;
  unsigned int _325;
  unsigned int _326;
  unsigned int _327;
  unsigned int _328;
  unsigned int _329;
  unsigned int _330;
  unsigned int _331;
  unsigned int _332;
  unsigned int _335;
  unsigned int _336;
  unsigned int _337;
  unsigned int _338;
  unsigned int _339;
  unsigned int _340;
  unsigned int _341;
  unsigned int _342;
  unsigned int _349;
  unsigned int _350;
  unsigned int _351;
  unsigned int _352;
  unsigned int _353;
  unsigned int _354;
  unsigned int _355;
  unsigned int _356;
  unsigned int _359;
  unsigned int _360;
  unsigned int _361;
  unsigned int _362;
  unsigned int _363;
  unsigned int _364;
  unsigned int _365;
  unsigned int _367;
  unsigned int _374;
  unsigned int _375;
  unsigned int _377;
  unsigned int _378;
  unsigned int _380;
  unsigned int _382;
  unsigned int _383;
  unsigned int _385;
  unsigned int _388;
  unsigned int _391;
  unsigned int _396;
  unsigned int _399;
  unsigned int _406;
  unsigned int _407;
  unsigned int _409;
  unsigned int _410;
  unsigned int _412;
  unsigned int _414;
  unsigned int _415;
  unsigned int _417;
  unsigned int _420;
  unsigned int _423;
  unsigned int load_dst_427;
  unsigned int _428;
  unsigned int _430;
  unsigned int _437;
  unsigned int _438;
  unsigned int _440;
  unsigned int _441;
  unsigned int _443;
  unsigned int load_dst_444;
  unsigned int _445;
  unsigned int _446;
  unsigned int _448;
  unsigned int _451;
  unsigned int _454;
  unsigned int load_dst_456;
  unsigned int _459;
  unsigned int load_dst_461;
  unsigned int _462;
  unsigned int _469;
  unsigned int _470;
  unsigned int _472;
  unsigned int _473;
  unsigned int load_dst_474;
  unsigned int _475;
  unsigned int _477;
  unsigned int _478;
  unsigned int load_dst_479;
  unsigned int _480;
  unsigned int _483;
  unsigned int load_dst_485;
  unsigned int _486;
  unsigned int _491;
  vector(4) unsigned int _494;
  unsigned int _495;
  unsigned int load_dst_496;
  void * _514;
  vector(4) unsigned int _535;
  unsigned int load_dst_536;
  unsigned int load_dst_539;
  unsigned int load_dst_543;
  unsigned int load_dst_545;
  unsigned int load_dst_549;
  unsigned int load_dst_553;
  unsigned int load_dst_557;
  unsigned int load_dst_561;
  const unsigned char pretmp_1097;
  int pretmp_1099;
  u32 pretmp_1100;
  u32 prephitmp_1101;
  const unsigned char pretmp_1102;
  int pretmp_1104;
  const u32 pretmp_1105;
  const u32 prephitmp_1106;
  u32 pretmp_1107;
  u32 prephitmp_1108;
  const u32 pretmp_1109;
  const u32 prephitmp_1110;
  const unsigned char pretmp_1111;
  int pretmp_1113;
  u32 pretmp_1114;
  u32 prephitmp_1115;
  const unsigned char pretmp_1116;
  int pretmp_1118;
  const u32 pretmp_1119;
  const u32 prephitmp_1120;
  u32 pretmp_1121;
  u32 prephitmp_1122;
  const u32 pretmp_1123;
  const u32 prephitmp_1124;
  const unsigned char pretmp_1125;
  int pretmp_1127;
  u32 pretmp_1128;
  u32 prephitmp_1129;
  const unsigned char pretmp_1130;
  int pretmp_1132;
  const u32 pretmp_1133;
  const u32 prephitmp_1134;
  u32 pretmp_1135;
  u32 prephitmp_1136;
  const u32 pretmp_1137;
  const u32 prephitmp_1138;
  const unsigned char pretmp_1139;
  int pretmp_1141;
  u32 pretmp_1142;
  u32 prephitmp_1143;
  const unsigned char pretmp_1144;
  int pretmp_1146;
  const u32 pretmp_1147;
  const u32 prephitmp_1148;
  u32 pretmp_1149;
  u32 prephitmp_1150;
  const u32 pretmp_1151;
  const u32 prephitmp_1152;
  const unsigned char pretmp_1153;
  int pretmp_1155;
  u32 pretmp_1156;
  u32 prephitmp_1157;
  const unsigned char pretmp_1158;
  int pretmp_1160;
  const u32 pretmp_1161;
  const u32 prephitmp_1162;
  u32 pretmp_1163;
  u32 prephitmp_1164;
  const u32 pretmp_1165;
  const u32 prephitmp_1166;
  const unsigned char pretmp_1167;
  int pretmp_1169;
  u32 pretmp_1170;
  u32 prephitmp_1171;
  const unsigned char pretmp_1172;
  int pretmp_1174;
  const u32 pretmp_1175;
  const u32 prephitmp_1176;
  u32 pretmp_1177;
  u32 prephitmp_1178;
  const u32 pretmp_1179;
  const u32 prephitmp_1180;
  const unsigned char pretmp_1181;
  int pretmp_1183;
  u32 pretmp_1184;
  u32 prephitmp_1185;
  const unsigned char pretmp_1186;
  int pretmp_1188;
  const u32 pretmp_1189;
  const u32 prephitmp_1190;
  u32 pretmp_1191;
  u32 prephitmp_1192;
  const u32 pretmp_1193;
  const u32 prephitmp_1194;
  const unsigned char pretmp_1195;
  int pretmp_1197;
  u32 pretmp_1198;
  u32 prephitmp_1199;
  const unsigned char pretmp_1200;
  int pretmp_1202;
  const u32 pretmp_1203;
  const u32 prephitmp_1204;
  u32 pretmp_1205;
  u32 prephitmp_1206;
  const u32 pretmp_1207;
  const u32 prephitmp_1208;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  load_dst_485 = MEM[(const BitSequence *)datablock_5(D)];
  _19 = __builtin_bswap32 (load_dst_485);
  m[0] = _19;
  load_dst_479 = MEM[(const BitSequence *)datablock_5(D) + 4B];
  _34 = __builtin_bswap32 (load_dst_479);
  m[1] = _34;
  load_dst_474 = MEM[(const BitSequence *)datablock_5(D) + 8B];
  _49 = __builtin_bswap32 (load_dst_474);
  m[2] = _49;
  load_dst_461 = MEM[(const BitSequence *)datablock_5(D) + 12B];
  _64 = __builtin_bswap32 (load_dst_461);
  m[3] = _64;
  load_dst_456 = MEM[(const BitSequence *)datablock_5(D) + 16B];
  _79 = __builtin_bswap32 (load_dst_456);
  m[4] = _79;
  load_dst_444 = MEM[(const BitSequence *)datablock_5(D) + 20B];
  _94 = __builtin_bswap32 (load_dst_444);
  m[5] = _94;
  load_dst_427 = MEM[(const BitSequence *)datablock_5(D) + 24B];
  _109 = __builtin_bswap32 (load_dst_427);
  m[6] = _109;
  load_dst_536 = MEM[(const BitSequence *)datablock_5(D) + 28B];
  _124 = __builtin_bswap32 (load_dst_536);
  m[7] = _124;
  load_dst_539 = MEM[(const BitSequence *)datablock_5(D) + 32B];
  _139 = __builtin_bswap32 (load_dst_539);
  m[8] = _139;
  load_dst_543 = MEM[(const BitSequence *)datablock_5(D) + 36B];
  _154 = __builtin_bswap32 (load_dst_543);
  m[9] = _154;
  load_dst_545 = MEM[(const BitSequence *)datablock_5(D) + 40B];
  _169 = __builtin_bswap32 (load_dst_545);
  m[10] = _169;
  load_dst_549 = MEM[(const BitSequence *)datablock_5(D) + 44B];
  _184 = __builtin_bswap32 (load_dst_549);
  m[11] = _184;
  load_dst_553 = MEM[(const BitSequence *)datablock_5(D) + 48B];
  _199 = __builtin_bswap32 (load_dst_553);
  m[12] = _199;
  load_dst_557 = MEM[(const BitSequence *)datablock_5(D) + 52B];
  _214 = __builtin_bswap32 (load_dst_557);
  m[13] = _214;
  load_dst_561 = MEM[(const BitSequence *)datablock_5(D) + 56B];
  _229 = __builtin_bswap32 (load_dst_561);
  m[14] = _229;
  load_dst_496 = MEM[(const BitSequence *)datablock_5(D) + 60B];
  _244 = __builtin_bswap32 (load_dst_496);
  m[15] = _244;
  v$0_247 = state_246(D)->h32[0];
  v$1_248 = state_246(D)->h32[1];
  v$2_249 = state_246(D)->h32[2];
  v$3_250 = state_246(D)->h32[3];
  v$4_251 = state_246(D)->h32[4];
  v$5_252 = state_246(D)->h32[5];
  v$6_253 = state_246(D)->h32[6];
  v$7_254 = state_246(D)->h32[7];
  _255 = state_246(D)->salt32[0];
  v$8_256 = _255 ^ 608135816;
  _257 = state_246(D)->salt32[1];
  v$9_258 = _257 ^ 2242054355;
  _259 = state_246(D)->salt32[2];
  v$10_260 = _259 ^ 320440878;
  _261 = state_246(D)->salt32[3];
  v$11_262 = _261 ^ 57701188;
  _263 = state_246(D)->nullt;
  if (_263 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4
;;                3

;;   basic block 3, loop depth 0
;;    pred:       2
  _264 = state_246(D)->t32[0];
  v$12_265 = _264 ^ 2752067618;
  v$13_266 = _264 ^ 698298832;
  _267 = state_246(D)->t32[1];
  v$14_268 = _267 ^ 137296536;
  v$15_269 = _267 ^ 3964562569;
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  # v$12_390 = PHI <2752067618(2), v$12_265(3)>
  # v$13_384 = PHI <698298832(2), v$13_266(3)>
  # v$14_425 = PHI <137296536(2), v$14_268(3)>
  # v$15_528 = PHI <3964562569(2), v$15_269(3)>
  ivtmp.77_518 = (unsigned long) &sigma;
;;    succ:       5

;;   basic block 5, loop depth 1
;;    pred:       6
;;                4
  # v$15_538 = PHI <v$15_392(6), v$15_528(4)>
  # v$14_540 = PHI <v$14_487(6), v$14_425(4)>
  # v$13_542 = PHI <v$13_455(6), v$13_384(4)>
  # v$12_544 = PHI <v$12_424(6), v$12_390(4)>
  # v$11_366 = PHI <v$11_426(6), v$11_262(4)>
  # v$10_548 = PHI <v$10_394(6), v$10_260(4)>
  # v$9_546 = PHI <v$9_489(6), v$9_258(4)>
  # v$8_550 = PHI <v$8_457(6), v$8_256(4)>
  # v$7_552 = PHI <v$7_460(6), v$7_254(4)>
  # v$6_554 = PHI <v$6_429(6), v$6_253(4)>
  # v$5_556 = PHI <v$5_397(6), v$5_252(4)>
  # v$4_558 = PHI <v$4_492(6), v$4_251(4)>
  # v$3_560 = PHI <v$3_484(6), v$3_250(4)>
  # v$2_562 = PHI <v$2_452(6), v$2_249(4)>
  # v$1_564 = PHI <v$1_421(6), v$1_248(4)>
  # v$0_566 = PHI <v$0_389(6), v$0_247(4)>
  # prephitmp_1101 = PHI <pretmp_1100(6), _19(4)>
  # prephitmp_1106 = PHI <pretmp_1105(6), 2242054355(4)>
  # prephitmp_1108 = PHI <pretmp_1107(6), _34(4)>
  # prephitmp_1110 = PHI <pretmp_1109(6), 608135816(4)>
  # prephitmp_1115 = PHI <pretmp_1114(6), _49(4)>
  # prephitmp_1120 = PHI <pretmp_1119(6), 57701188(4)>
  # prephitmp_1122 = PHI <pretmp_1121(6), _64(4)>
  # prephitmp_1124 = PHI <pretmp_1123(6), 320440878(4)>
  # prephitmp_1129 = PHI <pretmp_1128(6), _79(4)>
  # prephitmp_1134 = PHI <pretmp_1133(6), 698298832(4)>
  # prephitmp_1136 = PHI <pretmp_1135(6), _94(4)>
  # prephitmp_1138 = PHI <pretmp_1137(6), 2752067618(4)>
  # prephitmp_1143 = PHI <pretmp_1142(6), _109(4)>
  # prephitmp_1148 = PHI <pretmp_1147(6), 3964562569(4)>
  # prephitmp_1150 = PHI <pretmp_1149(6), _124(4)>
  # prephitmp_1152 = PHI <pretmp_1151(6), 137296536(4)>
  # prephitmp_1157 = PHI <pretmp_1156(6), _139(4)>
  # prephitmp_1162 = PHI <pretmp_1161(6), 953160567(4)>
  # prephitmp_1164 = PHI <pretmp_1163(6), _154(4)>
  # prephitmp_1166 = PHI <pretmp_1165(6), 1160258022(4)>
  # prephitmp_1171 = PHI <pretmp_1170(6), _169(4)>
  # prephitmp_1176 = PHI <pretmp_1175(6), 887688300(4)>
  # prephitmp_1178 = PHI <pretmp_1177(6), _184(4)>
  # prephitmp_1180 = PHI <pretmp_1179(6), 3193202383(4)>
  # prephitmp_1185 = PHI <pretmp_1184(6), _199(4)>
  # prephitmp_1190 = PHI <pretmp_1189(6), 3380367581(4)>
  # prephitmp_1192 = PHI <pretmp_1191(6), _214(4)>
  # prephitmp_1194 = PHI <pretmp_1193(6), 3232508343(4)>
  # prephitmp_1199 = PHI <pretmp_1198(6), _229(4)>
  # prephitmp_1204 = PHI <pretmp_1203(6), 3041331479(4)>
  # prephitmp_1206 = PHI <pretmp_1205(6), _244(4)>
  # prephitmp_1208 = PHI <pretmp_1207(6), 1065670069(4)>
  # ivtmp_6 = PHI <ivtmp_7(6), 14(4)>
  # ivtmp.77_526 = PHI <ivtmp.77_522(6), ivtmp.77_518(4)>
  _277 = prephitmp_1101 ^ prephitmp_1106;
  _284 = _277 + v$4_558;
  _278 = _284 + v$0_566;
  _279 = _278 ^ v$12_544;
  _280 = _279 r>> 16;
  _281 = _280 + v$8_550;
  _282 = _281 ^ v$4_558;
  _283 = _282 r>> 12;
  _287 = prephitmp_1108 ^ prephitmp_1110;
  _294 = _278 + _287;
  _288 = _283 + _294;
  _289 = _280 ^ _288;
  _290 = _289 r>> 8;
  _291 = _281 + _290;
  _292 = _283 ^ _291;
  _293 = _292 r>> 7;
  _301 = prephitmp_1115 ^ prephitmp_1120;
  _308 = _301 + v$5_556;
  _302 = _308 + v$1_564;
  _303 = _302 ^ v$13_542;
  _304 = _303 r>> 16;
  _305 = _304 + v$9_546;
  _306 = _305 ^ v$5_556;
  _307 = _306 r>> 12;
  _311 = prephitmp_1122 ^ prephitmp_1124;
  _318 = _302 + _311;
  _312 = _307 + _318;
  _313 = _304 ^ _312;
  _314 = _313 r>> 8;
  _315 = _305 + _314;
  _316 = _307 ^ _315;
  _317 = _316 r>> 7;
  _325 = prephitmp_1129 ^ prephitmp_1134;
  _332 = _325 + v$6_554;
  _326 = _332 + v$2_562;
  _327 = _326 ^ v$14_540;
  _328 = _327 r>> 16;
  _329 = _328 + v$10_548;
  _330 = _329 ^ v$6_554;
  _331 = _330 r>> 12;
  _335 = prephitmp_1136 ^ prephitmp_1138;
  _342 = _326 + _335;
  _336 = _331 + _342;
  _337 = _328 ^ _336;
  _338 = _337 r>> 8;
  _339 = _329 + _338;
  _340 = _331 ^ _339;
  _341 = _340 r>> 7;
  _349 = prephitmp_1143 ^ prephitmp_1148;
  _356 = _349 + v$7_552;
  _350 = _356 + v$3_560;
  _351 = _350 ^ v$15_538;
  _352 = _351 r>> 16;
  _353 = _352 + v$11_366;
  _354 = _353 ^ v$7_552;
  _355 = _354 r>> 12;
  _359 = prephitmp_1150 ^ prephitmp_1152;
  _367 = _350 + _359;
  _360 = _355 + _367;
  _361 = _352 ^ _360;
  _362 = _361 r>> 8;
  _363 = _353 + _362;
  _364 = _355 ^ _363;
  _365 = _364 r>> 7;
  _374 = prephitmp_1157 ^ prephitmp_1162;
  _385 = _288 + _374;
  _375 = _317 + _385;
  _377 = _362 ^ _375;
  _378 = _377 r>> 16;
  _380 = _339 + _378;
  _382 = _317 ^ _380;
  _383 = _382 r>> 12;
  _388 = prephitmp_1164 ^ prephitmp_1166;
  _399 = _375 + _388;
  v$0_389 = _383 + _399;
  _391 = _378 ^ v$0_389;
  v$15_392 = _391 r>> 8;
  v$10_394 = _380 + v$15_392;
  _396 = _383 ^ v$10_394;
  v$5_397 = _396 r>> 7;
  _406 = prephitmp_1171 ^ prephitmp_1176;
  _417 = _312 + _406;
  _407 = _341 + _417;
  _409 = _290 ^ _407;
  _410 = _409 r>> 16;
  _412 = _363 + _410;
  _414 = _341 ^ _412;
  _415 = _414 r>> 12;
  _420 = prephitmp_1178 ^ prephitmp_1180;
  _430 = _407 + _420;
  v$1_421 = _415 + _430;
  _423 = _410 ^ v$1_421;
  v$12_424 = _423 r>> 8;
  v$11_426 = _412 + v$12_424;
  _428 = _415 ^ v$11_426;
  v$6_429 = _428 r>> 7;
  _437 = prephitmp_1185 ^ prephitmp_1190;
  _448 = _336 + _437;
  _438 = _365 + _448;
  _440 = _314 ^ _438;
  _441 = _440 r>> 16;
  _443 = _291 + _441;
  _445 = _365 ^ _443;
  _446 = _445 r>> 12;
  _451 = prephitmp_1192 ^ prephitmp_1194;
  _462 = _438 + _451;
  v$2_452 = _446 + _462;
  _454 = _441 ^ v$2_452;
  v$13_455 = _454 r>> 8;
  v$8_457 = _443 + v$13_455;
  _459 = _446 ^ v$8_457;
  v$7_460 = _459 r>> 7;
  _469 = prephitmp_1199 ^ prephitmp_1204;
  _480 = _360 + _469;
  _470 = _293 + _480;
  _472 = _338 ^ _470;
  _473 = _472 r>> 16;
  _475 = _315 + _473;
  _477 = _293 ^ _475;
  _478 = _477 r>> 12;
  _483 = prephitmp_1206 ^ prephitmp_1208;
  _495 = _470 + _483;
  v$3_484 = _478 + _495;
  _486 = _473 ^ v$3_484;
  v$14_487 = _486 r>> 8;
  v$9_489 = _475 + v$14_487;
  _491 = _478 ^ v$9_489;
  v$4_492 = _491 r>> 7;
  ivtmp_7 = ivtmp_6 + 4294967295;
  ivtmp.77_522 = ivtmp.77_526 + 16;
  if (ivtmp_7 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6
;;                7

;;   basic block 6, loop depth 1
;;    pred:       5
  _514 = (void *) ivtmp.77_522;
  pretmp_1097 = MEM[base: _514, offset: 0B];
  pretmp_1099 = (int) pretmp_1097;
  pretmp_1100 = m[pretmp_1099];
  pretmp_1102 = MEM[base: _514, offset: 1B];
  pretmp_1104 = (int) pretmp_1102;
  pretmp_1105 = c32[pretmp_1104];
  pretmp_1107 = m[pretmp_1104];
  pretmp_1109 = c32[pretmp_1099];
  pretmp_1111 = MEM[base: _514, offset: 2B];
  pretmp_1113 = (int) pretmp_1111;
  pretmp_1114 = m[pretmp_1113];
  pretmp_1116 = MEM[base: _514, offset: 3B];
  pretmp_1118 = (int) pretmp_1116;
  pretmp_1119 = c32[pretmp_1118];
  pretmp_1121 = m[pretmp_1118];
  pretmp_1123 = c32[pretmp_1113];
  pretmp_1125 = MEM[base: _514, offset: 4B];
  pretmp_1127 = (int) pretmp_1125;
  pretmp_1128 = m[pretmp_1127];
  pretmp_1130 = MEM[base: _514, offset: 5B];
  pretmp_1132 = (int) pretmp_1130;
  pretmp_1133 = c32[pretmp_1132];
  pretmp_1135 = m[pretmp_1132];
  pretmp_1137 = c32[pretmp_1127];
  pretmp_1139 = MEM[base: _514, offset: 6B];
  pretmp_1141 = (int) pretmp_1139;
  pretmp_1142 = m[pretmp_1141];
  pretmp_1144 = MEM[base: _514, offset: 7B];
  pretmp_1146 = (int) pretmp_1144;
  pretmp_1147 = c32[pretmp_1146];
  pretmp_1149 = m[pretmp_1146];
  pretmp_1151 = c32[pretmp_1141];
  pretmp_1153 = MEM[base: _514, offset: 8B];
  pretmp_1155 = (int) pretmp_1153;
  pretmp_1156 = m[pretmp_1155];
  pretmp_1158 = MEM[base: _514, offset: 9B];
  pretmp_1160 = (int) pretmp_1158;
  pretmp_1161 = c32[pretmp_1160];
  pretmp_1163 = m[pretmp_1160];
  pretmp_1165 = c32[pretmp_1155];
  pretmp_1167 = MEM[base: _514, offset: 10B];
  pretmp_1169 = (int) pretmp_1167;
  pretmp_1170 = m[pretmp_1169];
  pretmp_1172 = MEM[base: _514, offset: 11B];
  pretmp_1174 = (int) pretmp_1172;
  pretmp_1175 = c32[pretmp_1174];
  pretmp_1177 = m[pretmp_1174];
  pretmp_1179 = c32[pretmp_1169];
  pretmp_1181 = MEM[base: _514, offset: 12B];
  pretmp_1183 = (int) pretmp_1181;
  pretmp_1184 = m[pretmp_1183];
  pretmp_1186 = MEM[base: _514, offset: 13B];
  pretmp_1188 = (int) pretmp_1186;
  pretmp_1189 = c32[pretmp_1188];
  pretmp_1191 = m[pretmp_1188];
  pretmp_1193 = c32[pretmp_1183];
  pretmp_1195 = MEM[base: _514, offset: 14B];
  pretmp_1197 = (int) pretmp_1195;
  pretmp_1198 = m[pretmp_1197];
  pretmp_1200 = MEM[base: _514, offset: 15B];
  pretmp_1202 = (int) pretmp_1200;
  pretmp_1203 = c32[pretmp_1202];
  pretmp_1205 = m[pretmp_1202];
  pretmp_1207 = c32[pretmp_1197];
  goto <bb 5>;
;;    succ:       5

;;   basic block 7, loop depth 0
;;    pred:       5
  vect_cst_.58_21 = {v$8_457, v$9_489, v$10_394, v$11_426};
  vect_cst_.57_31 = {v$4_492, v$5_397, v$6_429, v$7_460};
  vect_cst_.55_15 = {v$0_389, v$1_421, v$2_452, v$3_484};
  vect_cst_.54_14 = {v$12_424, v$13_455, v$14_487, v$15_392};
  vect_cst_.52_11 = {_255, _257, _259, _261};
  vect_cst_.51_10 = {_255, _257, _259, _261};
  vect_cst_.50_9 = {v$0_247, v$1_248, v$2_249, v$3_250};
  vect_cst_.49_8 = {v$4_251, v$5_252, v$6_253, v$7_254};
  _41 = vect_cst_.55_15 ^ vect_cst_.58_21;
  _535 = vect_cst_.54_14 ^ vect_cst_.57_31;
  _42 = vect_cst_.52_11 ^ _41;
  _494 = vect_cst_.51_10 ^ _535;
  vect__497.56_22 = vect_cst_.50_9 ^ _42;
  vect__497.56_23 = vect_cst_.49_8 ^ _494;
  vectp.60_24 = &state_246(D)->h32[0];
  MEM[(unsigned int *)state_246(D) + 16B] = vect__497.56_22;
  vectp.60_26 = &MEM[(void *)state_246(D) + 32B];
  MEM[(unsigned int *)state_246(D) + 32B] = vect__497.56_23;
  m ={v} {CLOBBER};
  return 0;
;;    succ:       EXIT

}



Partition map 

Partition 5 (datablock_5(D) - 5 )
Partition 6 (ivtmp_6 - 6 )
Partition 7 (ivtmp_7 - 7 )
Partition 8 (vect_cst_.49_8 - 8 )
Partition 9 (vect_cst_.50_9 - 9 )
Partition 10 (vect_cst_.51_10 - 10 )
Partition 11 (vect_cst_.52_11 - 11 )
Partition 14 (vect_cst_.54_14 - 14 )
Partition 15 (vect_cst_.55_15 - 15 )
Partition 19 (_19 - 19 )
Partition 21 (vect_cst_.58_21 - 21 )
Partition 22 (vect__497.56_22 - 22 )
Partition 23 (vect__497.56_23 - 23 )
Partition 24 (vectp.60_24 - 24 )
Partition 26 (vectp.60_26 - 26 )
Partition 31 (vect_cst_.57_31 - 31 )
Partition 34 (_34 - 34 )
Partition 41 (_41 - 41 )
Partition 42 (_42 - 42 )
Partition 49 (_49 - 49 )
Partition 64 (_64 - 64 )
Partition 79 (_79 - 79 )
Partition 94 (_94 - 94 )
Partition 109 (_109 - 109 )
Partition 124 (_124 - 124 )
Partition 139 (_139 - 139 )
Partition 154 (_154 - 154 )
Partition 169 (_169 - 169 )
Partition 184 (_184 - 184 )
Partition 199 (_199 - 199 )
Partition 214 (_214 - 214 )
Partition 229 (_229 - 229 )
Partition 244 (_244 - 244 )
Partition 246 (state_246(D) - 246 )
Partition 247 (v$0_247 - 247 )
Partition 248 (v$1_248 - 248 )
Partition 249 (v$2_249 - 249 )
Partition 250 (v$3_250 - 250 )
Partition 251 (v$4_251 - 251 )
Partition 252 (v$5_252 - 252 )
Partition 253 (v$6_253 - 253 )
Partition 254 (v$7_254 - 254 )
Partition 255 (_255 - 255 )
Partition 256 (v$8_256 - 256 )
Partition 257 (_257 - 257 )
Partition 258 (v$9_258 - 258 )
Partition 259 (_259 - 259 )
Partition 260 (v$10_260 - 260 )
Partition 261 (_261 - 261 )
Partition 262 (v$11_262 - 262 )
Partition 263 (_263 - 263 )
Partition 264 (_264 - 264 )
Partition 265 (v$12_265 - 265 )
Partition 266 (v$13_266 - 266 )
Partition 267 (_267 - 267 )
Partition 268 (v$14_268 - 268 )
Partition 269 (v$15_269 - 269 )
Partition 277 (_277 - 277 )
Partition 278 (_278 - 278 )
Partition 279 (_279 - 279 )
Partition 280 (_280 - 280 )
Partition 281 (_281 - 281 )
Partition 282 (_282 - 282 )
Partition 283 (_283 - 283 )
Partition 284 (_284 - 284 )
Partition 287 (_287 - 287 )
Partition 288 (_288 - 288 )
Partition 289 (_289 - 289 )
Partition 290 (_290 - 290 )
Partition 291 (_291 - 291 )
Partition 292 (_292 - 292 )
Partition 293 (_293 - 293 )
Partition 294 (_294 - 294 )
Partition 301 (_301 - 301 )
Partition 302 (_302 - 302 )
Partition 303 (_303 - 303 )
Partition 304 (_304 - 304 )
Partition 305 (_305 - 305 )
Partition 306 (_306 - 306 )
Partition 307 (_307 - 307 )
Partition 308 (_308 - 308 )
Partition 311 (_311 - 311 )
Partition 312 (_312 - 312 )
Partition 313 (_313 - 313 )
Partition 314 (_314 - 314 )
Partition 315 (_315 - 315 )
Partition 316 (_316 - 316 )
Partition 317 (_317 - 317 )
Partition 318 (_318 - 318 )
Partition 325 (_325 - 325 )
Partition 326 (_326 - 326 )
Partition 327 (_327 - 327 )
Partition 328 (_328 - 328 )
Partition 329 (_329 - 329 )
Partition 330 (_330 - 330 )
Partition 331 (_331 - 331 )
Partition 332 (_332 - 332 )
Partition 335 (_335 - 335 )
Partition 336 (_336 - 336 )
Partition 337 (_337 - 337 )
Partition 338 (_338 - 338 )
Partition 339 (_339 - 339 )
Partition 340 (_340 - 340 )
Partition 341 (_341 - 341 )
Partition 342 (_342 - 342 )
Partition 349 (_349 - 349 )
Partition 350 (_350 - 350 )
Partition 351 (_351 - 351 )
Partition 352 (_352 - 352 )
Partition 353 (_353 - 353 )
Partition 354 (_354 - 354 )
Partition 355 (_355 - 355 )
Partition 356 (_356 - 356 )
Partition 359 (_359 - 359 )
Partition 360 (_360 - 360 )
Partition 361 (_361 - 361 )
Partition 362 (_362 - 362 )
Partition 363 (_363 - 363 )
Partition 364 (_364 - 364 )
Partition 365 (_365 - 365 )
Partition 366 (v$11_366 - 366 )
Partition 367 (_367 - 367 )
Partition 374 (_374 - 374 )
Partition 375 (_375 - 375 )
Partition 377 (_377 - 377 )
Partition 378 (_378 - 378 )
Partition 380 (_380 - 380 )
Partition 382 (_382 - 382 )
Partition 383 (_383 - 383 )
Partition 384 (v$13_384 - 384 )
Partition 385 (_385 - 385 )
Partition 388 (_388 - 388 )
Partition 389 (v$0_389 - 389 )
Partition 390 (v$12_390 - 390 )
Partition 391 (_391 - 391 )
Partition 392 (v$15_392 - 392 )
Partition 394 (v$10_394 - 394 )
Partition 396 (_396 - 396 )
Partition 397 (v$5_397 - 397 )
Partition 399 (_399 - 399 )
Partition 406 (_406 - 406 )
Partition 407 (_407 - 407 )
Partition 409 (_409 - 409 )
Partition 410 (_410 - 410 )
Partition 412 (_412 - 412 )
Partition 414 (_414 - 414 )
Partition 415 (_415 - 415 )
Partition 417 (_417 - 417 )
Partition 420 (_420 - 420 )
Partition 421 (v$1_421 - 421 )
Partition 423 (_423 - 423 )
Partition 424 (v$12_424 - 424 )
Partition 425 (v$14_425 - 425 )
Partition 426 (v$11_426 - 426 )
Partition 427 (load_dst_427 - 427 )
Partition 428 (_428 - 428 )
Partition 429 (v$6_429 - 429 )
Partition 430 (_430 - 430 )
Partition 437 (_437 - 437 )
Partition 438 (_438 - 438 )
Partition 440 (_440 - 440 )
Partition 441 (_441 - 441 )
Partition 443 (_443 - 443 )
Partition 444 (load_dst_444 - 444 )
Partition 445 (_445 - 445 )
Partition 446 (_446 - 446 )
Partition 448 (_448 - 448 )
Partition 451 (_451 - 451 )
Partition 452 (v$2_452 - 452 )
Partition 454 (_454 - 454 )
Partition 455 (v$13_455 - 455 )
Partition 456 (load_dst_456 - 456 )
Partition 457 (v$8_457 - 457 )
Partition 459 (_459 - 459 )
Partition 460 (v$7_460 - 460 )
Partition 461 (load_dst_461 - 461 )
Partition 462 (_462 - 462 )
Partition 469 (_469 - 469 )
Partition 470 (_470 - 470 )
Partition 472 (_472 - 472 )
Partition 473 (_473 - 473 )
Partition 474 (load_dst_474 - 474 )
Partition 475 (_475 - 475 )
Partition 477 (_477 - 477 )
Partition 478 (_478 - 478 )
Partition 479 (load_dst_479 - 479 )
Partition 480 (_480 - 480 )
Partition 483 (_483 - 483 )
Partition 484 (v$3_484 - 484 )
Partition 485 (load_dst_485 - 485 )
Partition 486 (_486 - 486 )
Partition 487 (v$14_487 - 487 )
Partition 489 (v$9_489 - 489 )
Partition 491 (_491 - 491 )
Partition 492 (v$4_492 - 492 )
Partition 494 (_494 - 494 )
Partition 495 (_495 - 495 )
Partition 496 (load_dst_496 - 496 )
Partition 514 (_514 - 514 )
Partition 518 (ivtmp.77_518 - 518 )
Partition 522 (ivtmp.77_522 - 522 )
Partition 526 (ivtmp.77_526 - 526 )
Partition 528 (v$15_528 - 528 )
Partition 535 (_535 - 535 )
Partition 536 (load_dst_536 - 536 )
Partition 538 (v$15_538 - 538 )
Partition 539 (load_dst_539 - 539 )
Partition 540 (v$14_540 - 540 )
Partition 542 (v$13_542 - 542 )
Partition 543 (load_dst_543 - 543 )
Partition 544 (v$12_544 - 544 )
Partition 545 (load_dst_545 - 545 )
Partition 546 (v$9_546 - 546 )
Partition 548 (v$10_548 - 548 )
Partition 549 (load_dst_549 - 549 )
Partition 550 (v$8_550 - 550 )
Partition 552 (v$7_552 - 552 )
Partition 553 (load_dst_553 - 553 )
Partition 554 (v$6_554 - 554 )
Partition 556 (v$5_556 - 556 )
Partition 557 (load_dst_557 - 557 )
Partition 558 (v$4_558 - 558 )
Partition 560 (v$3_560 - 560 )
Partition 561 (load_dst_561 - 561 )
Partition 562 (v$2_562 - 562 )
Partition 564 (v$1_564 - 564 )
Partition 566 (v$0_566 - 566 )
Partition 1097 (pretmp_1097 - 1097 )
Partition 1099 (pretmp_1099 - 1099 )
Partition 1100 (pretmp_1100 - 1100 )
Partition 1101 (prephitmp_1101 - 1101 )
Partition 1102 (pretmp_1102 - 1102 )
Partition 1104 (pretmp_1104 - 1104 )
Partition 1105 (pretmp_1105 - 1105 )
Partition 1106 (prephitmp_1106 - 1106 )
Partition 1107 (pretmp_1107 - 1107 )
Partition 1108 (prephitmp_1108 - 1108 )
Partition 1109 (pretmp_1109 - 1109 )
Partition 1110 (prephitmp_1110 - 1110 )
Partition 1111 (pretmp_1111 - 1111 )
Partition 1113 (pretmp_1113 - 1113 )
Partition 1114 (pretmp_1114 - 1114 )
Partition 1115 (prephitmp_1115 - 1115 )
Partition 1116 (pretmp_1116 - 1116 )
Partition 1118 (pretmp_1118 - 1118 )
Partition 1119 (pretmp_1119 - 1119 )
Partition 1120 (prephitmp_1120 - 1120 )
Partition 1121 (pretmp_1121 - 1121 )
Partition 1122 (prephitmp_1122 - 1122 )
Partition 1123 (pretmp_1123 - 1123 )
Partition 1124 (prephitmp_1124 - 1124 )
Partition 1125 (pretmp_1125 - 1125 )
Partition 1127 (pretmp_1127 - 1127 )
Partition 1128 (pretmp_1128 - 1128 )
Partition 1129 (prephitmp_1129 - 1129 )
Partition 1130 (pretmp_1130 - 1130 )
Partition 1132 (pretmp_1132 - 1132 )
Partition 1133 (pretmp_1133 - 1133 )
Partition 1134 (prephitmp_1134 - 1134 )
Partition 1135 (pretmp_1135 - 1135 )
Partition 1136 (prephitmp_1136 - 1136 )
Partition 1137 (pretmp_1137 - 1137 )
Partition 1138 (prephitmp_1138 - 1138 )
Partition 1139 (pretmp_1139 - 1139 )
Partition 1141 (pretmp_1141 - 1141 )
Partition 1142 (pretmp_1142 - 1142 )
Partition 1143 (prephitmp_1143 - 1143 )
Partition 1144 (pretmp_1144 - 1144 )
Partition 1146 (pretmp_1146 - 1146 )
Partition 1147 (pretmp_1147 - 1147 )
Partition 1148 (prephitmp_1148 - 1148 )
Partition 1149 (pretmp_1149 - 1149 )
Partition 1150 (prephitmp_1150 - 1150 )
Partition 1151 (pretmp_1151 - 1151 )
Partition 1152 (prephitmp_1152 - 1152 )
Partition 1153 (pretmp_1153 - 1153 )
Partition 1155 (pretmp_1155 - 1155 )
Partition 1156 (pretmp_1156 - 1156 )
Partition 1157 (prephitmp_1157 - 1157 )
Partition 1158 (pretmp_1158 - 1158 )
Partition 1160 (pretmp_1160 - 1160 )
Partition 1161 (pretmp_1161 - 1161 )
Partition 1162 (prephitmp_1162 - 1162 )
Partition 1163 (pretmp_1163 - 1163 )
Partition 1164 (prephitmp_1164 - 1164 )
Partition 1165 (pretmp_1165 - 1165 )
Partition 1166 (prephitmp_1166 - 1166 )
Partition 1167 (pretmp_1167 - 1167 )
Partition 1169 (pretmp_1169 - 1169 )
Partition 1170 (pretmp_1170 - 1170 )
Partition 1171 (prephitmp_1171 - 1171 )
Partition 1172 (pretmp_1172 - 1172 )
Partition 1174 (pretmp_1174 - 1174 )
Partition 1175 (pretmp_1175 - 1175 )
Partition 1176 (prephitmp_1176 - 1176 )
Partition 1177 (pretmp_1177 - 1177 )
Partition 1178 (prephitmp_1178 - 1178 )
Partition 1179 (pretmp_1179 - 1179 )
Partition 1180 (prephitmp_1180 - 1180 )
Partition 1181 (pretmp_1181 - 1181 )
Partition 1183 (pretmp_1183 - 1183 )
Partition 1184 (pretmp_1184 - 1184 )
Partition 1185 (prephitmp_1185 - 1185 )
Partition 1186 (pretmp_1186 - 1186 )
Partition 1188 (pretmp_1188 - 1188 )
Partition 1189 (pretmp_1189 - 1189 )
Partition 1190 (prephitmp_1190 - 1190 )
Partition 1191 (pretmp_1191 - 1191 )
Partition 1192 (prephitmp_1192 - 1192 )
Partition 1193 (pretmp_1193 - 1193 )
Partition 1194 (prephitmp_1194 - 1194 )
Partition 1195 (pretmp_1195 - 1195 )
Partition 1197 (pretmp_1197 - 1197 )
Partition 1198 (pretmp_1198 - 1198 )
Partition 1199 (prephitmp_1199 - 1199 )
Partition 1200 (pretmp_1200 - 1200 )
Partition 1202 (pretmp_1202 - 1202 )
Partition 1203 (pretmp_1203 - 1203 )
Partition 1204 (prephitmp_1204 - 1204 )
Partition 1205 (pretmp_1205 - 1205 )
Partition 1206 (prephitmp_1206 - 1206 )
Partition 1207 (pretmp_1207 - 1207 )
Partition 1208 (prephitmp_1208 - 1208 )


Partition map 

Partition 0 (datablock_5(D) - 5 )
Partition 1 (ivtmp_6 - 6 )
Partition 2 (ivtmp_7 - 7 )
Partition 3 (_19 - 19 )
Partition 4 (_34 - 34 )
Partition 5 (_49 - 49 )
Partition 6 (_64 - 64 )
Partition 7 (_79 - 79 )
Partition 8 (_94 - 94 )
Partition 9 (_109 - 109 )
Partition 10 (_124 - 124 )
Partition 11 (_139 - 139 )
Partition 12 (_154 - 154 )
Partition 13 (_169 - 169 )
Partition 14 (_184 - 184 )
Partition 15 (_199 - 199 )
Partition 16 (_214 - 214 )
Partition 17 (_229 - 229 )
Partition 18 (_244 - 244 )
Partition 19 (state_246(D) - 246 )
Partition 20 (v$0_247 - 247 )
Partition 21 (v$1_248 - 248 )
Partition 22 (v$2_249 - 249 )
Partition 23 (v$3_250 - 250 )
Partition 24 (v$4_251 - 251 )
Partition 25 (v$5_252 - 252 )
Partition 26 (v$6_253 - 253 )
Partition 27 (v$7_254 - 254 )
Partition 28 (v$8_256 - 256 )
Partition 29 (v$9_258 - 258 )
Partition 30 (v$10_260 - 260 )
Partition 31 (v$11_262 - 262 )
Partition 32 (v$12_265 - 265 )
Partition 33 (v$13_266 - 266 )
Partition 34 (v$14_268 - 268 )
Partition 35 (v$15_269 - 269 )
Partition 36 (v$11_366 - 366 )
Partition 37 (v$13_384 - 384 )
Partition 38 (v$0_389 - 389 )
Partition 39 (v$12_390 - 390 )
Partition 40 (v$15_392 - 392 )
Partition 41 (v$10_394 - 394 )
Partition 42 (v$5_397 - 397 )
Partition 43 (v$1_421 - 421 )
Partition 44 (v$12_424 - 424 )
Partition 45 (v$14_425 - 425 )
Partition 46 (v$11_426 - 426 )
Partition 47 (v$6_429 - 429 )
Partition 48 (v$2_452 - 452 )
Partition 49 (v$13_455 - 455 )
Partition 50 (v$8_457 - 457 )
Partition 51 (v$7_460 - 460 )
Partition 52 (v$3_484 - 484 )
Partition 53 (v$14_487 - 487 )
Partition 54 (v$9_489 - 489 )
Partition 55 (v$4_492 - 492 )
Partition 56 (ivtmp.77_518 - 518 )
Partition 57 (ivtmp.77_522 - 522 )
Partition 58 (ivtmp.77_526 - 526 )
Partition 59 (v$15_528 - 528 )
Partition 60 (v$15_538 - 538 )
Partition 61 (v$14_540 - 540 )
Partition 62 (v$13_542 - 542 )
Partition 63 (v$12_544 - 544 )
Partition 64 (v$9_546 - 546 )
Partition 65 (v$10_548 - 548 )
Partition 66 (v$8_550 - 550 )
Partition 67 (v$7_552 - 552 )
Partition 68 (v$6_554 - 554 )
Partition 69 (v$5_556 - 556 )
Partition 70 (v$4_558 - 558 )
Partition 71 (v$3_560 - 560 )
Partition 72 (v$2_562 - 562 )
Partition 73 (v$1_564 - 564 )
Partition 74 (v$0_566 - 566 )
Partition 75 (pretmp_1100 - 1100 )
Partition 76 (prephitmp_1101 - 1101 )
Partition 77 (pretmp_1105 - 1105 )
Partition 78 (prephitmp_1106 - 1106 )
Partition 79 (pretmp_1107 - 1107 )
Partition 80 (prephitmp_1108 - 1108 )
Partition 81 (pretmp_1109 - 1109 )
Partition 82 (prephitmp_1110 - 1110 )
Partition 83 (pretmp_1114 - 1114 )
Partition 84 (prephitmp_1115 - 1115 )
Partition 85 (pretmp_1119 - 1119 )
Partition 86 (prephitmp_1120 - 1120 )
Partition 87 (pretmp_1121 - 1121 )
Partition 88 (prephitmp_1122 - 1122 )
Partition 89 (pretmp_1123 - 1123 )
Partition 90 (prephitmp_1124 - 1124 )
Partition 91 (pretmp_1128 - 1128 )
Partition 92 (prephitmp_1129 - 1129 )
Partition 93 (pretmp_1133 - 1133 )
Partition 94 (prephitmp_1134 - 1134 )
Partition 95 (pretmp_1135 - 1135 )
Partition 96 (prephitmp_1136 - 1136 )
Partition 97 (pretmp_1137 - 1137 )
Partition 98 (prephitmp_1138 - 1138 )
Partition 99 (pretmp_1142 - 1142 )
Partition 100 (prephitmp_1143 - 1143 )
Partition 101 (pretmp_1147 - 1147 )
Partition 102 (prephitmp_1148 - 1148 )
Partition 103 (pretmp_1149 - 1149 )
Partition 104 (prephitmp_1150 - 1150 )
Partition 105 (pretmp_1151 - 1151 )
Partition 106 (prephitmp_1152 - 1152 )
Partition 107 (pretmp_1156 - 1156 )
Partition 108 (prephitmp_1157 - 1157 )
Partition 109 (pretmp_1161 - 1161 )
Partition 110 (prephitmp_1162 - 1162 )
Partition 111 (pretmp_1163 - 1163 )
Partition 112 (prephitmp_1164 - 1164 )
Partition 113 (pretmp_1165 - 1165 )
Partition 114 (prephitmp_1166 - 1166 )
Partition 115 (pretmp_1170 - 1170 )
Partition 116 (prephitmp_1171 - 1171 )
Partition 117 (pretmp_1175 - 1175 )
Partition 118 (prephitmp_1176 - 1176 )
Partition 119 (pretmp_1177 - 1177 )
Partition 120 (prephitmp_1178 - 1178 )
Partition 121 (pretmp_1179 - 1179 )
Partition 122 (prephitmp_1180 - 1180 )
Partition 123 (pretmp_1184 - 1184 )
Partition 124 (prephitmp_1185 - 1185 )
Partition 125 (pretmp_1189 - 1189 )
Partition 126 (prephitmp_1190 - 1190 )
Partition 127 (pretmp_1191 - 1191 )
Partition 128 (prephitmp_1192 - 1192 )
Partition 129 (pretmp_1193 - 1193 )
Partition 130 (prephitmp_1194 - 1194 )
Partition 131 (pretmp_1198 - 1198 )
Partition 132 (prephitmp_1199 - 1199 )
Partition 133 (pretmp_1203 - 1203 )
Partition 134 (prephitmp_1204 - 1204 )
Partition 135 (pretmp_1205 - 1205 )
Partition 136 (prephitmp_1206 - 1206 )
Partition 137 (pretmp_1207 - 1207 )
Partition 138 (prephitmp_1208 - 1208 )


Conflict graph:
3: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
4: 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
5: 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
6: 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
7: 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
8: 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
9: 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18
10: 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18
11: 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18
12: 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18
13: 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18
14: 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18
15: 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18
16: 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18
17: 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18
18: 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
20: 38, 74
21: 43, 73
22: 48, 72
23: 52, 71
24: 55, 70
25: 42, 69
26: 47, 68
27: 51, 67
38: 20
42: 25
43: 21
47: 26
48: 22
51: 27
52: 23
55: 24
67: 27
68: 26
69: 25
70: 24
71: 23
72: 22
73: 21
74: 20
75: 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131, 135
76: 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136
77: 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137
78: 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138
79: 75, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131, 135
80: 76, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136
81: 77, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137
82: 78, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138
83: 75, 79, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131, 135
84: 76, 80, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136
85: 77, 81, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137
86: 78, 82, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138
87: 75, 79, 83, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131, 135
88: 76, 80, 84, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136
89: 77, 81, 85, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137
90: 78, 82, 86, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138
91: 75, 79, 83, 87, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131, 135
92: 76, 80, 84, 88, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136
93: 77, 81, 85, 89, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137
94: 78, 82, 86, 90, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138
95: 75, 79, 83, 87, 91, 99, 103, 107, 111, 115, 119, 123, 127, 131, 135
96: 76, 80, 84, 88, 92, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136
97: 77, 81, 85, 89, 93, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137
98: 78, 82, 86, 90, 94, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138
99: 75, 79, 83, 87, 91, 95, 103, 107, 111, 115, 119, 123, 127, 131, 135
100: 76, 80, 84, 88, 92, 96, 104, 108, 112, 116, 120, 124, 128, 132, 136
101: 77, 81, 85, 89, 93, 97, 105, 109, 113, 117, 121, 125, 129, 133, 137
102: 78, 82, 86, 90, 94, 98, 106, 110, 114, 118, 122, 126, 130, 134, 138
103: 75, 79, 83, 87, 91, 95, 99, 107, 111, 115, 119, 123, 127, 131, 135
104: 76, 80, 84, 88, 92, 96, 100, 108, 112, 116, 120, 124, 128, 132, 136
105: 77, 81, 85, 89, 93, 97, 101, 109, 113, 117, 121, 125, 129, 133, 137
106: 78, 82, 86, 90, 94, 98, 102, 110, 114, 118, 122, 126, 130, 134, 138
107: 75, 79, 83, 87, 91, 95, 99, 103, 111, 115, 119, 123, 127, 131, 135
108: 76, 80, 84, 88, 92, 96, 100, 104, 112, 116, 120, 124, 128, 132, 136
109: 77, 81, 85, 89, 93, 97, 101, 105, 113, 117, 121, 125, 129, 133, 137
110: 78, 82, 86, 90, 94, 98, 102, 106, 114, 118, 122, 126, 130, 134, 138
111: 75, 79, 83, 87, 91, 95, 99, 103, 107, 115, 119, 123, 127, 131, 135
112: 76, 80, 84, 88, 92, 96, 100, 104, 108, 116, 120, 124, 128, 132, 136
113: 77, 81, 85, 89, 93, 97, 101, 105, 109, 117, 121, 125, 129, 133, 137
114: 78, 82, 86, 90, 94, 98, 102, 106, 110, 118, 122, 126, 130, 134, 138
115: 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 119, 123, 127, 131, 135
116: 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 120, 124, 128, 132, 136
117: 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 121, 125, 129, 133, 137
118: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 122, 126, 130, 134, 138
119: 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 123, 127, 131, 135
120: 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 124, 128, 132, 136
121: 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 125, 129, 133, 137
122: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 126, 130, 134, 138
123: 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 127, 131, 135
124: 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 128, 132, 136
125: 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 129, 133, 137
126: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 130, 134, 138
127: 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 131, 135
128: 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 132, 136
129: 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 133, 137
130: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 134, 138
131: 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 135
132: 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 136
133: 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 137
134: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 138
135: 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131
136: 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132
137: 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133
138: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134

After sorting:
Sorted Coalesce list:
(8710) ivtmp_6 <-> ivtmp_7
(8710) v$11_366 <-> v$11_426
(8710) v$0_389 <-> v$0_566
(8710) v$15_392 <-> v$15_538
(8710) v$10_394 <-> v$10_548
(8710) v$5_397 <-> v$5_556
(8710) v$1_421 <-> v$1_564
(8710) v$12_424 <-> v$12_544
(8710) v$6_429 <-> v$6_554
(8710) v$2_452 <-> v$2_562
(8710) v$13_455 <-> v$13_542
(8710) v$8_457 <-> v$8_550
(8710) v$7_460 <-> v$7_552
(8710) v$3_484 <-> v$3_560
(8710) v$14_487 <-> v$14_540
(8710) v$9_489 <-> v$9_546
(8710) v$4_492 <-> v$4_558
(8710) ivtmp.77_522 <-> ivtmp.77_526
(8710) pretmp_1100 <-> prephitmp_1101
(8710) pretmp_1105 <-> prephitmp_1106
(8710) pretmp_1107 <-> prephitmp_1108
(8710) pretmp_1109 <-> prephitmp_1110
(8710) pretmp_1114 <-> prephitmp_1115
(8710) pretmp_1119 <-> prephitmp_1120
(8710) pretmp_1121 <-> prephitmp_1122
(8710) pretmp_1123 <-> prephitmp_1124
(8710) pretmp_1128 <-> prephitmp_1129
(8710) pretmp_1133 <-> prephitmp_1134
(8710) pretmp_1135 <-> prephitmp_1136
(8710) pretmp_1137 <-> prephitmp_1138
(8710) pretmp_1142 <-> prephitmp_1143
(8710) pretmp_1147 <-> prephitmp_1148
(8710) pretmp_1149 <-> prephitmp_1150
(8710) pretmp_1151 <-> prephitmp_1152
(8710) pretmp_1156 <-> prephitmp_1157
(8710) pretmp_1161 <-> prephitmp_1162
(8710) pretmp_1163 <-> prephitmp_1164
(8710) pretmp_1165 <-> prephitmp_1166
(8710) pretmp_1170 <-> prephitmp_1171
(8710) pretmp_1175 <-> prephitmp_1176
(8710) pretmp_1177 <-> prephitmp_1178
(8710) pretmp_1179 <-> prephitmp_1180
(8710) pretmp_1184 <-> prephitmp_1185
(8710) pretmp_1189 <-> prephitmp_1190
(8710) pretmp_1191 <-> prephitmp_1192
(8710) pretmp_1193 <-> prephitmp_1194
(8710) pretmp_1198 <-> prephitmp_1199
(8710) pretmp_1203 <-> prephitmp_1204
(8710) pretmp_1205 <-> prephitmp_1206
(8710) pretmp_1207 <-> prephitmp_1208
(670) _19 <-> prephitmp_1101
(670) _34 <-> prephitmp_1108
(670) _49 <-> prephitmp_1115
(670) _64 <-> prephitmp_1122
(670) _79 <-> prephitmp_1129
(670) _94 <-> prephitmp_1136
(670) _109 <-> prephitmp_1143
(670) _124 <-> prephitmp_1150
(670) _139 <-> prephitmp_1157
(670) _154 <-> prephitmp_1164
(670) _169 <-> prephitmp_1171
(670) _184 <-> prephitmp_1178
(670) _199 <-> prephitmp_1185
(670) _214 <-> prephitmp_1192
(670) _229 <-> prephitmp_1199
(670) _244 <-> prephitmp_1206
(670) v$0_247 <-> v$0_566
(670) v$1_248 <-> v$1_564
(670) v$2_249 <-> v$2_562
(670) v$3_250 <-> v$3_560
(670) v$4_251 <-> v$4_558
(670) v$5_252 <-> v$5_556
(670) v$6_253 <-> v$6_554
(670) v$7_254 <-> v$7_552
(670) v$8_256 <-> v$8_550
(670) v$9_258 <-> v$9_546
(670) v$10_260 <-> v$10_548
(670) v$11_262 <-> v$11_366
(670) v$13_384 <-> v$13_542
(670) v$12_390 <-> v$12_544
(670) v$14_425 <-> v$14_540
(670) ivtmp.77_518 <-> ivtmp.77_526
(670) v$15_528 <-> v$15_538
(334) v$12_265 <-> v$12_390
(334) v$13_266 <-> v$13_384
(334) v$14_268 <-> v$14_425
(334) v$15_269 <-> v$15_528

Partition map 

Partition 0 (datablock_5(D) - 5 )
Partition 1 (ivtmp_6 - 6 )
Partition 2 (ivtmp_7 - 7 )
Partition 3 (_19 - 19 )
Partition 4 (_34 - 34 )
Partition 5 (_49 - 49 )
Partition 6 (_64 - 64 )
Partition 7 (_79 - 79 )
Partition 8 (_94 - 94 )
Partition 9 (_109 - 109 )
Partition 10 (_124 - 124 )
Partition 11 (_139 - 139 )
Partition 12 (_154 - 154 )
Partition 13 (_169 - 169 )
Partition 14 (_184 - 184 )
Partition 15 (_199 - 199 )
Partition 16 (_214 - 214 )
Partition 17 (_229 - 229 )
Partition 18 (_244 - 244 )
Partition 19 (state_246(D) - 246 )
Partition 20 (v$0_247 - 247 )
Partition 21 (v$1_248 - 248 )
Partition 22 (v$2_249 - 249 )
Partition 23 (v$3_250 - 250 )
Partition 24 (v$4_251 - 251 )
Partition 25 (v$5_252 - 252 )
Partition 26 (v$6_253 - 253 )
Partition 27 (v$7_254 - 254 )
Partition 28 (v$8_256 - 256 )
Partition 29 (v$9_258 - 258 )
Partition 30 (v$10_260 - 260 )
Partition 31 (v$11_262 - 262 )
Partition 32 (v$12_265 - 265 )
Partition 33 (v$13_266 - 266 )
Partition 34 (v$14_268 - 268 )
Partition 35 (v$15_269 - 269 )
Partition 36 (v$11_366 - 366 )
Partition 37 (v$13_384 - 384 )
Partition 38 (v$0_389 - 389 )
Partition 39 (v$12_390 - 390 )
Partition 40 (v$15_392 - 392 )
Partition 41 (v$10_394 - 394 )
Partition 42 (v$5_397 - 397 )
Partition 43 (v$1_421 - 421 )
Partition 44 (v$12_424 - 424 )
Partition 45 (v$14_425 - 425 )
Partition 46 (v$11_426 - 426 )
Partition 47 (v$6_429 - 429 )
Partition 48 (v$2_452 - 452 )
Partition 49 (v$13_455 - 455 )
Partition 50 (v$8_457 - 457 )
Partition 51 (v$7_460 - 460 )
Partition 52 (v$3_484 - 484 )
Partition 53 (v$14_487 - 487 )
Partition 54 (v$9_489 - 489 )
Partition 55 (v$4_492 - 492 )
Partition 56 (ivtmp.77_518 - 518 )
Partition 57 (ivtmp.77_522 - 522 )
Partition 58 (ivtmp.77_526 - 526 )
Partition 59 (v$15_528 - 528 )
Partition 60 (v$15_538 - 538 )
Partition 61 (v$14_540 - 540 )
Partition 62 (v$13_542 - 542 )
Partition 63 (v$12_544 - 544 )
Partition 64 (v$9_546 - 546 )
Partition 65 (v$10_548 - 548 )
Partition 66 (v$8_550 - 550 )
Partition 67 (v$7_552 - 552 )
Partition 68 (v$6_554 - 554 )
Partition 69 (v$5_556 - 556 )
Partition 70 (v$4_558 - 558 )
Partition 71 (v$3_560 - 560 )
Partition 72 (v$2_562 - 562 )
Partition 73 (v$1_564 - 564 )
Partition 74 (v$0_566 - 566 )
Partition 75 (pretmp_1100 - 1100 )
Partition 76 (prephitmp_1101 - 1101 )
Partition 77 (pretmp_1105 - 1105 )
Partition 78 (prephitmp_1106 - 1106 )
Partition 79 (pretmp_1107 - 1107 )
Partition 80 (prephitmp_1108 - 1108 )
Partition 81 (pretmp_1109 - 1109 )
Partition 82 (prephitmp_1110 - 1110 )
Partition 83 (pretmp_1114 - 1114 )
Partition 84 (prephitmp_1115 - 1115 )
Partition 85 (pretmp_1119 - 1119 )
Partition 86 (prephitmp_1120 - 1120 )
Partition 87 (pretmp_1121 - 1121 )
Partition 88 (prephitmp_1122 - 1122 )
Partition 89 (pretmp_1123 - 1123 )
Partition 90 (prephitmp_1124 - 1124 )
Partition 91 (pretmp_1128 - 1128 )
Partition 92 (prephitmp_1129 - 1129 )
Partition 93 (pretmp_1133 - 1133 )
Partition 94 (prephitmp_1134 - 1134 )
Partition 95 (pretmp_1135 - 1135 )
Partition 96 (prephitmp_1136 - 1136 )
Partition 97 (pretmp_1137 - 1137 )
Partition 98 (prephitmp_1138 - 1138 )
Partition 99 (pretmp_1142 - 1142 )
Partition 100 (prephitmp_1143 - 1143 )
Partition 101 (pretmp_1147 - 1147 )
Partition 102 (prephitmp_1148 - 1148 )
Partition 103 (pretmp_1149 - 1149 )
Partition 104 (prephitmp_1150 - 1150 )
Partition 105 (pretmp_1151 - 1151 )
Partition 106 (prephitmp_1152 - 1152 )
Partition 107 (pretmp_1156 - 1156 )
Partition 108 (prephitmp_1157 - 1157 )
Partition 109 (pretmp_1161 - 1161 )
Partition 110 (prephitmp_1162 - 1162 )
Partition 111 (pretmp_1163 - 1163 )
Partition 112 (prephitmp_1164 - 1164 )
Partition 113 (pretmp_1165 - 1165 )
Partition 114 (prephitmp_1166 - 1166 )
Partition 115 (pretmp_1170 - 1170 )
Partition 116 (prephitmp_1171 - 1171 )
Partition 117 (pretmp_1175 - 1175 )
Partition 118 (prephitmp_1176 - 1176 )
Partition 119 (pretmp_1177 - 1177 )
Partition 120 (prephitmp_1178 - 1178 )
Partition 121 (pretmp_1179 - 1179 )
Partition 122 (prephitmp_1180 - 1180 )
Partition 123 (pretmp_1184 - 1184 )
Partition 124 (prephitmp_1185 - 1185 )
Partition 125 (pretmp_1189 - 1189 )
Partition 126 (prephitmp_1190 - 1190 )
Partition 127 (pretmp_1191 - 1191 )
Partition 128 (prephitmp_1192 - 1192 )
Partition 129 (pretmp_1193 - 1193 )
Partition 130 (prephitmp_1194 - 1194 )
Partition 131 (pretmp_1198 - 1198 )
Partition 132 (prephitmp_1199 - 1199 )
Partition 133 (pretmp_1203 - 1203 )
Partition 134 (prephitmp_1204 - 1204 )
Partition 135 (pretmp_1205 - 1205 )
Partition 136 (prephitmp_1206 - 1206 )
Partition 137 (pretmp_1207 - 1207 )
Partition 138 (prephitmp_1208 - 1208 )

Coalesce list: (6)ivtmp_6 & (7)ivtmp_7 [map: 1, 2] : Success -> 1
Coalesce list: (366)v$11_366 & (426)v$11_426 [map: 36, 46] : Success -> 36
Coalesce list: (389)v$0_389 & (566)v$0_566 [map: 38, 74] : Success -> 38
Coalesce list: (392)v$15_392 & (538)v$15_538 [map: 40, 60] : Success -> 40
Coalesce list: (394)v$10_394 & (548)v$10_548 [map: 41, 65] : Success -> 41
Coalesce list: (397)v$5_397 & (556)v$5_556 [map: 42, 69] : Success -> 42
Coalesce list: (421)v$1_421 & (564)v$1_564 [map: 43, 73] : Success -> 43
Coalesce list: (424)v$12_424 & (544)v$12_544 [map: 44, 63] : Success -> 44
Coalesce list: (429)v$6_429 & (554)v$6_554 [map: 47, 68] : Success -> 47
Coalesce list: (452)v$2_452 & (562)v$2_562 [map: 48, 72] : Success -> 48
Coalesce list: (455)v$13_455 & (542)v$13_542 [map: 49, 62] : Success -> 49
Coalesce list: (457)v$8_457 & (550)v$8_550 [map: 50, 66] : Success -> 50
Coalesce list: (460)v$7_460 & (552)v$7_552 [map: 51, 67] : Success -> 51
Coalesce list: (484)v$3_484 & (560)v$3_560 [map: 52, 71] : Success -> 52
Coalesce list: (487)v$14_487 & (540)v$14_540 [map: 53, 61] : Success -> 53
Coalesce list: (489)v$9_489 & (546)v$9_546 [map: 54, 64] : Success -> 54
Coalesce list: (492)v$4_492 & (558)v$4_558 [map: 55, 70] : Success -> 55
Coalesce list: (522)ivtmp.77_522 & (526)ivtmp.77_526 [map: 57, 58] : Success -> 57
Coalesce list: (1100)pretmp_1100 & (1101)prephitmp_1101 [map: 75, 76] : Success -> 75
Coalesce list: (1105)pretmp_1105 & (1106)prephitmp_1106 [map: 77, 78] : Success -> 77
Coalesce list: (1107)pretmp_1107 & (1108)prephitmp_1108 [map: 79, 80] : Success -> 79
Coalesce list: (1109)pretmp_1109 & (1110)prephitmp_1110 [map: 81, 82] : Success -> 81
Coalesce list: (1114)pretmp_1114 & (1115)prephitmp_1115 [map: 83, 84] : Success -> 83
Coalesce list: (1119)pretmp_1119 & (1120)prephitmp_1120 [map: 85, 86] : Success -> 85
Coalesce list: (1121)pretmp_1121 & (1122)prephitmp_1122 [map: 87, 88] : Success -> 87
Coalesce list: (1123)pretmp_1123 & (1124)prephitmp_1124 [map: 89, 90] : Success -> 89
Coalesce list: (1128)pretmp_1128 & (1129)prephitmp_1129 [map: 91, 92] : Success -> 91
Coalesce list: (1133)pretmp_1133 & (1134)prephitmp_1134 [map: 93, 94] : Success -> 93
Coalesce list: (1135)pretmp_1135 & (1136)prephitmp_1136 [map: 95, 96] : Success -> 95
Coalesce list: (1137)pretmp_1137 & (1138)prephitmp_1138 [map: 97, 98] : Success -> 97
Coalesce list: (1142)pretmp_1142 & (1143)prephitmp_1143 [map: 99, 100] : Success -> 99
Coalesce list: (1147)pretmp_1147 & (1148)prephitmp_1148 [map: 101, 102] : Success -> 101
Coalesce list: (1149)pretmp_1149 & (1150)prephitmp_1150 [map: 103, 104] : Success -> 103
Coalesce list: (1151)pretmp_1151 & (1152)prephitmp_1152 [map: 105, 106] : Success -> 105
Coalesce list: (1156)pretmp_1156 & (1157)prephitmp_1157 [map: 107, 108] : Success -> 107
Coalesce list: (1161)pretmp_1161 & (1162)prephitmp_1162 [map: 109, 110] : Success -> 109
Coalesce list: (1163)pretmp_1163 & (1164)prephitmp_1164 [map: 111, 112] : Success -> 111
Coalesce list: (1165)pretmp_1165 & (1166)prephitmp_1166 [map: 113, 114] : Success -> 113
Coalesce list: (1170)pretmp_1170 & (1171)prephitmp_1171 [map: 115, 116] : Success -> 115
Coalesce list: (1175)pretmp_1175 & (1176)prephitmp_1176 [map: 117, 118] : Success -> 117
Coalesce list: (1177)pretmp_1177 & (1178)prephitmp_1178 [map: 119, 120] : Success -> 119
Coalesce list: (1179)pretmp_1179 & (1180)prephitmp_1180 [map: 121, 122] : Success -> 121
Coalesce list: (1184)pretmp_1184 & (1185)prephitmp_1185 [map: 123, 124] : Success -> 123
Coalesce list: (1189)pretmp_1189 & (1190)prephitmp_1190 [map: 125, 126] : Success -> 125
Coalesce list: (1191)pretmp_1191 & (1192)prephitmp_1192 [map: 127, 128] : Success -> 127
Coalesce list: (1193)pretmp_1193 & (1194)prephitmp_1194 [map: 129, 130] : Success -> 129
Coalesce list: (1198)pretmp_1198 & (1199)prephitmp_1199 [map: 131, 132] : Success -> 131
Coalesce list: (1203)pretmp_1203 & (1204)prephitmp_1204 [map: 133, 134] : Success -> 133
Coalesce list: (1205)pretmp_1205 & (1206)prephitmp_1206 [map: 135, 136] : Success -> 135
Coalesce list: (1207)pretmp_1207 & (1208)prephitmp_1208 [map: 137, 138] : Success -> 137
Coalesce list: (19)_19 & (1101)pretmp_1100 [map: 3, 75] : Success -> 75
Coalesce list: (34)_34 & (1108)pretmp_1107 [map: 4, 79] : Success -> 79
Coalesce list: (49)_49 & (1115)pretmp_1114 [map: 5, 83] : Success -> 83
Coalesce list: (64)_64 & (1122)pretmp_1121 [map: 6, 87] : Success -> 87
Coalesce list: (79)_79 & (1129)pretmp_1128 [map: 7, 91] : Success -> 91
Coalesce list: (94)_94 & (1136)pretmp_1135 [map: 8, 95] : Success -> 95
Coalesce list: (109)_109 & (1143)pretmp_1142 [map: 9, 99] : Success -> 99
Coalesce list: (124)_124 & (1150)pretmp_1149 [map: 10, 103] : Success -> 103
Coalesce list: (139)_139 & (1157)pretmp_1156 [map: 11, 107] : Success -> 107
Coalesce list: (154)_154 & (1164)pretmp_1163 [map: 12, 111] : Success -> 111
Coalesce list: (169)_169 & (1171)pretmp_1170 [map: 13, 115] : Success -> 115
Coalesce list: (184)_184 & (1178)pretmp_1177 [map: 14, 119] : Success -> 119
Coalesce list: (199)_199 & (1185)pretmp_1184 [map: 15, 123] : Success -> 123
Coalesce list: (214)_214 & (1192)pretmp_1191 [map: 16, 127] : Success -> 127
Coalesce list: (229)_229 & (1199)pretmp_1198 [map: 17, 131] : Success -> 131
Coalesce list: (244)_244 & (1206)pretmp_1205 [map: 18, 135] : Success -> 135
Coalesce list: (247)v$0_247 & (566)v$0_389 [map: 20, 38] : Fail due to conflict
Coalesce list: (248)v$1_248 & (564)v$1_421 [map: 21, 43] : Fail due to conflict
Coalesce list: (249)v$2_249 & (562)v$2_452 [map: 22, 48] : Fail due to conflict
Coalesce list: (250)v$3_250 & (560)v$3_484 [map: 23, 52] : Fail due to conflict
Coalesce list: (251)v$4_251 & (558)v$4_492 [map: 24, 55] : Fail due to conflict
Coalesce list: (252)v$5_252 & (556)v$5_397 [map: 25, 42] : Fail due to conflict
Coalesce list: (253)v$6_253 & (554)v$6_429 [map: 26, 47] : Fail due to conflict
Coalesce list: (254)v$7_254 & (552)v$7_460 [map: 27, 51] : Fail due to conflict
Coalesce list: (256)v$8_256 & (550)v$8_457 [map: 28, 50] : Success -> 50
Coalesce list: (258)v$9_258 & (546)v$9_489 [map: 29, 54] : Success -> 54
Coalesce list: (260)v$10_260 & (548)v$10_394 [map: 30, 41] : Success -> 41
Coalesce list: (262)v$11_262 & (366)v$11_366 [map: 31, 36] : Success -> 36
Coalesce list: (384)v$13_384 & (542)v$13_455 [map: 37, 49] : Success -> 49
Coalesce list: (390)v$12_390 & (544)v$12_424 [map: 39, 44] : Success -> 44
Coalesce list: (425)v$14_425 & (540)v$14_487 [map: 45, 53] : Success -> 53
Coalesce list: (518)ivtmp.77_518 & (526)ivtmp.77_522 [map: 56, 57] : Success -> 57
Coalesce list: (528)v$15_528 & (538)v$15_392 [map: 59, 40] : Success -> 40
Coalesce list: (265)v$12_265 & (390)v$12_424 [map: 32, 44] : Success -> 44
Coalesce list: (266)v$13_266 & (384)v$13_455 [map: 33, 49] : Success -> 49
Coalesce list: (268)v$14_268 & (425)v$14_487 [map: 34, 53] : Success -> 53
Coalesce list: (269)v$15_269 & (528)v$15_392 [map: 35, 40] : Success -> 40
After Coalescing:

Partition map 

Partition 0 (datablock_5(D) - 5 )
Partition 1 (ivtmp_6 - 6 7 )
Partition 2 (vect_cst_.49_8 - 8 )
Partition 3 (vect_cst_.50_9 - 9 )
Partition 4 (vect_cst_.51_10 - 10 )
Partition 5 (vect_cst_.52_11 - 11 )
Partition 6 (vect_cst_.54_14 - 14 )
Partition 7 (vect_cst_.55_15 - 15 )
Partition 8 (vect_cst_.58_21 - 21 )
Partition 9 (vect__497.56_22 - 22 )
Partition 10 (vect__497.56_23 - 23 )
Partition 11 (vectp.60_24 - 24 )
Partition 12 (vectp.60_26 - 26 )
Partition 13 (vect_cst_.57_31 - 31 )
Partition 14 (_41 - 41 )
Partition 15 (_42 - 42 )
Partition 16 (state_246(D) - 246 )
Partition 17 (v$0_247 - 247 )
Partition 18 (v$1_248 - 248 )
Partition 19 (v$2_249 - 249 )
Partition 20 (v$3_250 - 250 )
Partition 21 (v$4_251 - 251 )
Partition 22 (v$5_252 - 252 )
Partition 23 (v$6_253 - 253 )
Partition 24 (v$7_254 - 254 )
Partition 25 (_255 - 255 )
Partition 26 (_257 - 257 )
Partition 27 (_259 - 259 )
Partition 28 (_261 - 261 )
Partition 29 (_263 - 263 )
Partition 30 (_264 - 264 )
Partition 31 (_267 - 267 )
Partition 32 (_277 - 277 )
Partition 33 (_278 - 278 )
Partition 34 (_279 - 279 )
Partition 35 (_280 - 280 )
Partition 36 (_281 - 281 )
Partition 37 (_282 - 282 )
Partition 38 (_283 - 283 )
Partition 39 (_284 - 284 )
Partition 40 (_287 - 287 )
Partition 41 (_288 - 288 )
Partition 42 (_289 - 289 )
Partition 43 (_290 - 290 )
Partition 44 (_291 - 291 )
Partition 45 (_292 - 292 )
Partition 46 (_293 - 293 )
Partition 47 (_294 - 294 )
Partition 48 (_301 - 301 )
Partition 49 (_302 - 302 )
Partition 50 (_303 - 303 )
Partition 51 (_304 - 304 )
Partition 52 (_305 - 305 )
Partition 53 (_306 - 306 )
Partition 54 (_307 - 307 )
Partition 55 (_308 - 308 )
Partition 56 (_311 - 311 )
Partition 57 (_312 - 312 )
Partition 58 (_313 - 313 )
Partition 59 (_314 - 314 )
Partition 60 (_315 - 315 )
Partition 61 (_316 - 316 )
Partition 62 (_317 - 317 )
Partition 63 (_318 - 318 )
Partition 64 (_325 - 325 )
Partition 65 (_326 - 326 )
Partition 66 (_327 - 327 )
Partition 67 (_328 - 328 )
Partition 68 (_329 - 329 )
Partition 69 (_330 - 330 )
Partition 70 (_331 - 331 )
Partition 71 (_332 - 332 )
Partition 72 (_335 - 335 )
Partition 73 (_336 - 336 )
Partition 74 (_337 - 337 )
Partition 75 (_338 - 338 )
Partition 76 (_339 - 339 )
Partition 77 (_340 - 340 )
Partition 78 (_341 - 341 )
Partition 79 (_342 - 342 )
Partition 80 (_349 - 349 )
Partition 81 (_350 - 350 )
Partition 82 (_351 - 351 )
Partition 83 (_352 - 352 )
Partition 84 (_353 - 353 )
Partition 85 (_354 - 354 )
Partition 86 (_355 - 355 )
Partition 87 (_356 - 356 )
Partition 88 (_359 - 359 )
Partition 89 (_360 - 360 )
Partition 90 (_361 - 361 )
Partition 91 (_362 - 362 )
Partition 92 (_363 - 363 )
Partition 93 (_364 - 364 )
Partition 94 (_365 - 365 )
Partition 95 (v$11_366 - 262 366 426 )
Partition 96 (_367 - 367 )
Partition 97 (_374 - 374 )
Partition 98 (_375 - 375 )
Partition 99 (_377 - 377 )
Partition 100 (_378 - 378 )
Partition 101 (_380 - 380 )
Partition 102 (_382 - 382 )
Partition 103 (_383 - 383 )
Partition 104 (_385 - 385 )
Partition 105 (_388 - 388 )
Partition 106 (v$0_389 - 389 566 )
Partition 107 (_391 - 391 )
Partition 108 (v$15_392 - 269 392 528 538 )
Partition 109 (v$10_394 - 260 394 548 )
Partition 110 (_396 - 396 )
Partition 111 (v$5_397 - 397 556 )
Partition 112 (_399 - 399 )
Partition 113 (_406 - 406 )
Partition 114 (_407 - 407 )
Partition 115 (_409 - 409 )
Partition 116 (_410 - 410 )
Partition 117 (_412 - 412 )
Partition 118 (_414 - 414 )
Partition 119 (_415 - 415 )
Partition 120 (_417 - 417 )
Partition 121 (_420 - 420 )
Partition 122 (v$1_421 - 421 564 )
Partition 123 (_423 - 423 )
Partition 124 (v$12_424 - 265 390 424 544 )
Partition 125 (load_dst_427 - 427 )
Partition 126 (_428 - 428 )
Partition 127 (v$6_429 - 429 554 )
Partition 128 (_430 - 430 )
Partition 129 (_437 - 437 )
Partition 130 (_438 - 438 )
Partition 131 (_440 - 440 )
Partition 132 (_441 - 441 )
Partition 133 (_443 - 443 )
Partition 134 (load_dst_444 - 444 )
Partition 135 (_445 - 445 )
Partition 136 (_446 - 446 )
Partition 137 (_448 - 448 )
Partition 138 (_451 - 451 )
Partition 139 (v$2_452 - 452 562 )
Partition 140 (_454 - 454 )
Partition 141 (v$13_455 - 266 384 455 542 )
Partition 142 (load_dst_456 - 456 )
Partition 143 (v$8_457 - 256 457 550 )
Partition 144 (_459 - 459 )
Partition 145 (v$7_460 - 460 552 )
Partition 146 (load_dst_461 - 461 )
Partition 147 (_462 - 462 )
Partition 148 (_469 - 469 )
Partition 149 (_470 - 470 )
Partition 150 (_472 - 472 )
Partition 151 (_473 - 473 )
Partition 152 (load_dst_474 - 474 )
Partition 153 (_475 - 475 )
Partition 154 (_477 - 477 )
Partition 155 (_478 - 478 )
Partition 156 (load_dst_479 - 479 )
Partition 157 (_480 - 480 )
Partition 158 (_483 - 483 )
Partition 159 (v$3_484 - 484 560 )
Partition 160 (load_dst_485 - 485 )
Partition 161 (_486 - 486 )
Partition 162 (v$14_487 - 268 425 487 540 )
Partition 163 (v$9_489 - 258 489 546 )
Partition 164 (_491 - 491 )
Partition 165 (v$4_492 - 492 558 )
Partition 166 (_494 - 494 )
Partition 167 (_495 - 495 )
Partition 168 (load_dst_496 - 496 )
Partition 169 (_514 - 514 )
Partition 170 (ivtmp.77_522 - 518 522 526 )
Partition 171 (_535 - 535 )
Partition 172 (load_dst_536 - 536 )
Partition 173 (load_dst_539 - 539 )
Partition 174 (load_dst_543 - 543 )
Partition 175 (load_dst_545 - 545 )
Partition 176 (load_dst_549 - 549 )
Partition 177 (load_dst_553 - 553 )
Partition 178 (load_dst_557 - 557 )
Partition 179 (load_dst_561 - 561 )
Partition 180 (pretmp_1097 - 1097 )
Partition 181 (pretmp_1099 - 1099 )
Partition 182 (pretmp_1100 - 19 1100 1101 )
Partition 183 (pretmp_1102 - 1102 )
Partition 184 (pretmp_1104 - 1104 )
Partition 185 (pretmp_1105 - 1105 1106 )
Partition 186 (pretmp_1107 - 34 1107 1108 )
Partition 187 (pretmp_1109 - 1109 1110 )
Partition 188 (pretmp_1111 - 1111 )
Partition 189 (pretmp_1113 - 1113 )
Partition 190 (pretmp_1114 - 49 1114 1115 )
Partition 191 (pretmp_1116 - 1116 )
Partition 192 (pretmp_1118 - 1118 )
Partition 193 (pretmp_1119 - 1119 1120 )
Partition 194 (pretmp_1121 - 64 1121 1122 )
Partition 195 (pretmp_1123 - 1123 1124 )
Partition 196 (pretmp_1125 - 1125 )
Partition 197 (pretmp_1127 - 1127 )
Partition 198 (pretmp_1128 - 79 1128 1129 )
Partition 199 (pretmp_1130 - 1130 )
Partition 200 (pretmp_1132 - 1132 )
Partition 201 (pretmp_1133 - 1133 1134 )
Partition 202 (pretmp_1135 - 94 1135 1136 )
Partition 203 (pretmp_1137 - 1137 1138 )
Partition 204 (pretmp_1139 - 1139 )
Partition 205 (pretmp_1141 - 1141 )
Partition 206 (pretmp_1142 - 109 1142 1143 )
Partition 207 (pretmp_1144 - 1144 )
Partition 208 (pretmp_1146 - 1146 )
Partition 209 (pretmp_1147 - 1147 1148 )
Partition 210 (pretmp_1149 - 124 1149 1150 )
Partition 211 (pretmp_1151 - 1151 1152 )
Partition 212 (pretmp_1153 - 1153 )
Partition 213 (pretmp_1155 - 1155 )
Partition 214 (pretmp_1156 - 139 1156 1157 )
Partition 215 (pretmp_1158 - 1158 )
Partition 216 (pretmp_1160 - 1160 )
Partition 217 (pretmp_1161 - 1161 1162 )
Partition 218 (pretmp_1163 - 154 1163 1164 )
Partition 219 (pretmp_1165 - 1165 1166 )
Partition 220 (pretmp_1167 - 1167 )
Partition 221 (pretmp_1169 - 1169 )
Partition 222 (pretmp_1170 - 169 1170 1171 )
Partition 223 (pretmp_1172 - 1172 )
Partition 224 (pretmp_1174 - 1174 )
Partition 225 (pretmp_1175 - 1175 1176 )
Partition 226 (pretmp_1177 - 184 1177 1178 )
Partition 227 (pretmp_1179 - 1179 1180 )
Partition 228 (pretmp_1181 - 1181 )
Partition 229 (pretmp_1183 - 1183 )
Partition 230 (pretmp_1184 - 199 1184 1185 )
Partition 231 (pretmp_1186 - 1186 )
Partition 232 (pretmp_1188 - 1188 )
Partition 233 (pretmp_1189 - 1189 1190 )
Partition 234 (pretmp_1191 - 214 1191 1192 )
Partition 235 (pretmp_1193 - 1193 1194 )
Partition 236 (pretmp_1195 - 1195 )
Partition 237 (pretmp_1197 - 1197 )
Partition 238 (pretmp_1198 - 229 1198 1199 )
Partition 239 (pretmp_1200 - 1200 )
Partition 240 (pretmp_1202 - 1202 )
Partition 241 (pretmp_1203 - 1203 1204 )
Partition 242 (pretmp_1205 - 244 1205 1206 )
Partition 243 (pretmp_1207 - 1207 1208 )


Replacing Expressions
vect_cst_.49_8 replace with --> vect_cst_.49_8 = {v$4_251, v$5_252, v$6_253, v$7_254};

vect_cst_.50_9 replace with --> vect_cst_.50_9 = {v$0_247, v$1_248, v$2_249, v$3_250};

vect_cst_.51_10 replace with --> vect_cst_.51_10 = {_255, _257, _259, _261};

vect_cst_.52_11 replace with --> vect_cst_.52_11 = {_255, _257, _259, _261};

vect_cst_.54_14 replace with --> vect_cst_.54_14 = {v$12_424, v$13_455, v$14_487, v$15_392};

vect_cst_.55_15 replace with --> vect_cst_.55_15 = {v$0_389, v$1_421, v$2_452, v$3_484};

vect_cst_.58_21 replace with --> vect_cst_.58_21 = {v$8_457, v$9_489, v$10_394, v$11_426};

vect__497.56_22 replace with --> vect__497.56_22 = vect_cst_.50_9 ^ _42;

vect__497.56_23 replace with --> vect__497.56_23 = vect_cst_.49_8 ^ _494;

vect_cst_.57_31 replace with --> vect_cst_.57_31 = {v$4_492, v$5_397, v$6_429, v$7_460};

_41 replace with --> _41 = vect_cst_.55_15 ^ vect_cst_.58_21;

_42 replace with --> _42 = vect_cst_.52_11 ^ _41;

_263 replace with --> _263 = state_246(D)->nullt;

_277 replace with --> _277 = prephitmp_1101 ^ prephitmp_1106;

_279 replace with --> _279 = _278 ^ v$12_544;

_282 replace with --> _282 = _281 ^ v$4_558;

_284 replace with --> _284 = _277 + v$4_558;

_287 replace with --> _287 = prephitmp_1108 ^ prephitmp_1110;

_289 replace with --> _289 = _280 ^ _288;

_292 replace with --> _292 = _283 ^ _291;

_294 replace with --> _294 = _278 + _287;

_301 replace with --> _301 = prephitmp_1115 ^ prephitmp_1120;

_303 replace with --> _303 = _302 ^ v$13_542;

_306 replace with --> _306 = _305 ^ v$5_556;

_308 replace with --> _308 = _301 + v$5_556;

_311 replace with --> _311 = prephitmp_1122 ^ prephitmp_1124;

_313 replace with --> _313 = _304 ^ _312;

_316 replace with --> _316 = _307 ^ _315;

_318 replace with --> _318 = _302 + _311;

_325 replace with --> _325 = prephitmp_1129 ^ prephitmp_1134;

_327 replace with --> _327 = _326 ^ v$14_540;

_330 replace with --> _330 = _329 ^ v$6_554;

_332 replace with --> _332 = _325 + v$6_554;

_335 replace with --> _335 = prephitmp_1136 ^ prephitmp_1138;

_337 replace with --> _337 = _328 ^ _336;

_340 replace with --> _340 = _331 ^ _339;

_342 replace with --> _342 = _326 + _335;

_349 replace with --> _349 = prephitmp_1143 ^ prephitmp_1148;

_351 replace with --> _351 = _350 ^ v$15_538;

_354 replace with --> _354 = _353 ^ v$7_552;

_356 replace with --> _356 = _349 + v$7_552;

_359 replace with --> _359 = prephitmp_1150 ^ prephitmp_1152;

_361 replace with --> _361 = _352 ^ _360;

_364 replace with --> _364 = _355 ^ _363;

_367 replace with --> _367 = _350 + _359;

_374 replace with --> _374 = prephitmp_1157 ^ prephitmp_1162;

_377 replace with --> _377 = _362 ^ _375;

_382 replace with --> _382 = _317 ^ _380;

_385 replace with --> _385 = _288 + _374;

_388 replace with --> _388 = prephitmp_1164 ^ prephitmp_1166;

_391 replace with --> _391 = _378 ^ v$0_389;

_396 replace with --> _396 = _383 ^ v$10_394;

_399 replace with --> _399 = _375 + _388;

_406 replace with --> _406 = prephitmp_1171 ^ prephitmp_1176;

_409 replace with --> _409 = _290 ^ _407;

_414 replace with --> _414 = _341 ^ _412;

_417 replace with --> _417 = _312 + _406;

_420 replace with --> _420 = prephitmp_1178 ^ prephitmp_1180;

_423 replace with --> _423 = _410 ^ v$1_421;

load_dst_427 replace with --> load_dst_427 = MEM[(const BitSequence *)datablock_5(D) + 24B];

_428 replace with --> _428 = _415 ^ v$11_426;

_430 replace with --> _430 = _407 + _420;

_437 replace with --> _437 = prephitmp_1185 ^ prephitmp_1190;

_440 replace with --> _440 = _314 ^ _438;

load_dst_444 replace with --> load_dst_444 = MEM[(const BitSequence *)datablock_5(D) + 20B];

_445 replace with --> _445 = _365 ^ _443;

_448 replace with --> _448 = _336 + _437;

_451 replace with --> _451 = prephitmp_1192 ^ prephitmp_1194;

_454 replace with --> _454 = _441 ^ v$2_452;

load_dst_456 replace with --> load_dst_456 = MEM[(const BitSequence *)datablock_5(D) + 16B];

_459 replace with --> _459 = _446 ^ v$8_457;

load_dst_461 replace with --> load_dst_461 = MEM[(const BitSequence *)datablock_5(D) + 12B];

_462 replace with --> _462 = _438 + _451;

_469 replace with --> _469 = prephitmp_1199 ^ prephitmp_1204;

_472 replace with --> _472 = _338 ^ _470;

load_dst_474 replace with --> load_dst_474 = MEM[(const BitSequence *)datablock_5(D) + 8B];

_477 replace with --> _477 = _293 ^ _475;

load_dst_479 replace with --> load_dst_479 = MEM[(const BitSequence *)datablock_5(D) + 4B];

_480 replace with --> _480 = _360 + _469;

_483 replace with --> _483 = prephitmp_1206 ^ prephitmp_1208;

load_dst_485 replace with --> load_dst_485 = MEM[(const BitSequence *)datablock_5(D)];

_486 replace with --> _486 = _473 ^ v$3_484;

_491 replace with --> _491 = _478 ^ v$9_489;

_494 replace with --> _494 = vect_cst_.51_10 ^ _535;

_495 replace with --> _495 = _470 + _483;

load_dst_496 replace with --> load_dst_496 = MEM[(const BitSequence *)datablock_5(D) + 60B];

_535 replace with --> _535 = vect_cst_.54_14 ^ vect_cst_.57_31;

load_dst_536 replace with --> load_dst_536 = MEM[(const BitSequence *)datablock_5(D) + 28B];

load_dst_539 replace with --> load_dst_539 = MEM[(const BitSequence *)datablock_5(D) + 32B];

load_dst_543 replace with --> load_dst_543 = MEM[(const BitSequence *)datablock_5(D) + 36B];

load_dst_545 replace with --> load_dst_545 = MEM[(const BitSequence *)datablock_5(D) + 40B];

load_dst_549 replace with --> load_dst_549 = MEM[(const BitSequence *)datablock_5(D) + 44B];

load_dst_553 replace with --> load_dst_553 = MEM[(const BitSequence *)datablock_5(D) + 48B];

load_dst_557 replace with --> load_dst_557 = MEM[(const BitSequence *)datablock_5(D) + 52B];

load_dst_561 replace with --> load_dst_561 = MEM[(const BitSequence *)datablock_5(D) + 56B];

pretmp_1097 replace with --> pretmp_1097 = MEM[base: _514, offset: 0B];

pretmp_1102 replace with --> pretmp_1102 = MEM[base: _514, offset: 1B];

pretmp_1111 replace with --> pretmp_1111 = MEM[base: _514, offset: 2B];

pretmp_1116 replace with --> pretmp_1116 = MEM[base: _514, offset: 3B];

pretmp_1125 replace with --> pretmp_1125 = MEM[base: _514, offset: 4B];

pretmp_1130 replace with --> pretmp_1130 = MEM[base: _514, offset: 5B];

pretmp_1139 replace with --> pretmp_1139 = MEM[base: _514, offset: 6B];

pretmp_1144 replace with --> pretmp_1144 = MEM[base: _514, offset: 7B];

pretmp_1153 replace with --> pretmp_1153 = MEM[base: _514, offset: 8B];

pretmp_1158 replace with --> pretmp_1158 = MEM[base: _514, offset: 9B];

pretmp_1167 replace with --> pretmp_1167 = MEM[base: _514, offset: 10B];

pretmp_1172 replace with --> pretmp_1172 = MEM[base: _514, offset: 11B];

pretmp_1181 replace with --> pretmp_1181 = MEM[base: _514, offset: 12B];

pretmp_1186 replace with --> pretmp_1186 = MEM[base: _514, offset: 13B];

pretmp_1195 replace with --> pretmp_1195 = MEM[base: _514, offset: 14B];

pretmp_1200 replace with --> pretmp_1200 = MEM[base: _514, offset: 15B];


compress32 (struct hashState * state, const BitSequence * datablock)
{
  unsigned long ivtmp.77;
  vector(4) unsigned int * vectp.60;
  vector(4) unsigned int vect_cst_.58;
  vector(4) unsigned int vect_cst_.57;
  vector(4) unsigned int vect__497.56;
  vector(4) unsigned int vect_cst_.55;
  vector(4) unsigned int vect_cst_.54;
  vector(4) unsigned int vect_cst_.52;
  vector(4) unsigned int vect_cst_.51;
  vector(4) unsigned int vect_cst_.50;
  vector(4) unsigned int vect_cst_.49;
  unsigned int v$15;
  unsigned int v$14;
  unsigned int v$13;
  unsigned int v$12;
  unsigned int v$11;
  unsigned int v$10;
  unsigned int v$9;
  unsigned int v$8;
  unsigned int v$7;
  unsigned int v$6;
  unsigned int v$5;
  unsigned int v$4;
  unsigned int v$3;
  unsigned int v$2;
  unsigned int v$1;
  unsigned int v$0;
  u32 m[16];
  unsigned int ivtmp_6;
  unsigned int ivtmp_7;
  unsigned int _19;
  unsigned int _34;
  vector(4) unsigned int _41;
  vector(4) unsigned int _42;
  unsigned int _49;
  unsigned int _64;
  unsigned int _79;
  unsigned int _94;
  unsigned int _109;
  unsigned int _124;
  unsigned int _139;
  unsigned int _154;
  unsigned int _169;
  unsigned int _184;
  unsigned int _199;
  unsigned int _214;
  unsigned int _229;
  unsigned int _244;
  unsigned int _255;
  unsigned int _257;
  unsigned int _259;
  unsigned int _261;
  int _263;
  unsigned int _264;
  unsigned int _267;
  unsigned int _277;
  unsigned int _278;
  unsigned int _279;
  unsigned int _280;
  unsigned int _281;
  unsigned int _282;
  unsigned int _283;
  unsigned int _284;
  unsigned int _287;
  unsigned int _288;
  unsigned int _289;
  unsigned int _290;
  unsigned int _291;
  unsigned int _292;
  unsigned int _293;
  unsigned int _294;
  unsigned int _301;
  unsigned int _302;
  unsigned int _303;
  unsigned int _304;
  unsigned int _305;
  unsigned int _306;
  unsigned int _307;
  unsigned int _308;
  unsigned int _311;
  unsigned int _312;
  unsigned int _313;
  unsigned int _314;
  unsigned int _315;
  unsigned int _316;
  unsigned int _317;
  unsigned int _318;
  unsigned int _325;
  unsigned int _326;
  unsigned int _327;
  unsigned int _328;
  unsigned int _329;
  unsigned int _330;
  unsigned int _331;
  unsigned int _332;
  unsigned int _335;
  unsigned int _336;
  unsigned int _337;
  unsigned int _338;
  unsigned int _339;
  unsigned int _340;
  unsigned int _341;
  unsigned int _342;
  unsigned int _349;
  unsigned int _350;
  unsigned int _351;
  unsigned int _352;
  unsigned int _353;
  unsigned int _354;
  unsigned int _355;
  unsigned int _356;
  unsigned int _359;
  unsigned int _360;
  unsigned int _361;
  unsigned int _362;
  unsigned int _363;
  unsigned int _364;
  unsigned int _365;
  unsigned int _367;
  unsigned int _374;
  unsigned int _375;
  unsigned int _377;
  unsigned int _378;
  unsigned int _380;
  unsigned int _382;
  unsigned int _383;
  unsigned int _385;
  unsigned int _388;
  unsigned int _391;
  unsigned int _396;
  unsigned int _399;
  unsigned int _406;
  unsigned int _407;
  unsigned int _409;
  unsigned int _410;
  unsigned int _412;
  unsigned int _414;
  unsigned int _415;
  unsigned int _417;
  unsigned int _420;
  unsigned int _423;
  unsigned int load_dst_427;
  unsigned int _428;
  unsigned int _430;
  unsigned int _437;
  unsigned int _438;
  unsigned int _440;
  unsigned int _441;
  unsigned int _443;
  unsigned int load_dst_444;
  unsigned int _445;
  unsigned int _446;
  unsigned int _448;
  unsigned int _451;
  unsigned int _454;
  unsigned int load_dst_456;
  unsigned int _459;
  unsigned int load_dst_461;
  unsigned int _462;
  unsigned int _469;
  unsigned int _470;
  unsigned int _472;
  unsigned int _473;
  unsigned int load_dst_474;
  unsigned int _475;
  unsigned int _477;
  unsigned int _478;
  unsigned int load_dst_479;
  unsigned int _480;
  unsigned int _483;
  unsigned int load_dst_485;
  unsigned int _486;
  unsigned int _491;
  vector(4) unsigned int _494;
  unsigned int _495;
  unsigned int load_dst_496;
  void * _514;
  vector(4) unsigned int _535;
  unsigned int load_dst_536;
  unsigned int load_dst_539;
  unsigned int load_dst_543;
  unsigned int load_dst_545;
  unsigned int load_dst_549;
  unsigned int load_dst_553;
  unsigned int load_dst_557;
  unsigned int load_dst_561;
  const unsigned char pretmp_1097;
  int pretmp_1099;
  u32 pretmp_1100;
  u32 prephitmp_1101;
  const unsigned char pretmp_1102;
  int pretmp_1104;
  const u32 pretmp_1105;
  const u32 prephitmp_1106;
  u32 pretmp_1107;
  u32 prephitmp_1108;
  const u32 pretmp_1109;
  const u32 prephitmp_1110;
  const unsigned char pretmp_1111;
  int pretmp_1113;
  u32 pretmp_1114;
  u32 prephitmp_1115;
  const unsigned char pretmp_1116;
  int pretmp_1118;
  const u32 pretmp_1119;
  const u32 prephitmp_1120;
  u32 pretmp_1121;
  u32 prephitmp_1122;
  const u32 pretmp_1123;
  const u32 prephitmp_1124;
  const unsigned char pretmp_1125;
  int pretmp_1127;
  u32 pretmp_1128;
  u32 prephitmp_1129;
  const unsigned char pretmp_1130;
  int pretmp_1132;
  const u32 pretmp_1133;
  const u32 prephitmp_1134;
  u32 pretmp_1135;
  u32 prephitmp_1136;
  const u32 pretmp_1137;
  const u32 prephitmp_1138;
  const unsigned char pretmp_1139;
  int pretmp_1141;
  u32 pretmp_1142;
  u32 prephitmp_1143;
  const unsigned char pretmp_1144;
  int pretmp_1146;
  const u32 pretmp_1147;
  const u32 prephitmp_1148;
  u32 pretmp_1149;
  u32 prephitmp_1150;
  const u32 pretmp_1151;
  const u32 prephitmp_1152;
  const unsigned char pretmp_1153;
  int pretmp_1155;
  u32 pretmp_1156;
  u32 prephitmp_1157;
  const unsigned char pretmp_1158;
  int pretmp_1160;
  const u32 pretmp_1161;
  const u32 prephitmp_1162;
  u32 pretmp_1163;
  u32 prephitmp_1164;
  const u32 pretmp_1165;
  const u32 prephitmp_1166;
  const unsigned char pretmp_1167;
  int pretmp_1169;
  u32 pretmp_1170;
  u32 prephitmp_1171;
  const unsigned char pretmp_1172;
  int pretmp_1174;
  const u32 pretmp_1175;
  const u32 prephitmp_1176;
  u32 pretmp_1177;
  u32 prephitmp_1178;
  const u32 pretmp_1179;
  const u32 prephitmp_1180;
  const unsigned char pretmp_1181;
  int pretmp_1183;
  u32 pretmp_1184;
  u32 prephitmp_1185;
  const unsigned char pretmp_1186;
  int pretmp_1188;
  const u32 pretmp_1189;
  const u32 prephitmp_1190;
  u32 pretmp_1191;
  u32 prephitmp_1192;
  const u32 pretmp_1193;
  const u32 prephitmp_1194;
  const unsigned char pretmp_1195;
  int pretmp_1197;
  u32 pretmp_1198;
  u32 prephitmp_1199;
  const unsigned char pretmp_1200;
  int pretmp_1202;
  const u32 pretmp_1203;
  const u32 prephitmp_1204;
  u32 pretmp_1205;
  u32 prephitmp_1206;
  const u32 pretmp_1207;
  const u32 prephitmp_1208;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  load_dst_485 = MEM[(const BitSequence *)datablock_5(D)];
  _19 = __builtin_bswap32 (load_dst_485);
  m[0] = _19;
  load_dst_479 = MEM[(const BitSequence *)datablock_5(D) + 4B];
  _34 = __builtin_bswap32 (load_dst_479);
  m[1] = _34;
  load_dst_474 = MEM[(const BitSequence *)datablock_5(D) + 8B];
  _49 = __builtin_bswap32 (load_dst_474);
  m[2] = _49;
  load_dst_461 = MEM[(const BitSequence *)datablock_5(D) + 12B];
  _64 = __builtin_bswap32 (load_dst_461);
  m[3] = _64;
  load_dst_456 = MEM[(const BitSequence *)datablock_5(D) + 16B];
  _79 = __builtin_bswap32 (load_dst_456);
  m[4] = _79;
  load_dst_444 = MEM[(const BitSequence *)datablock_5(D) + 20B];
  _94 = __builtin_bswap32 (load_dst_444);
  m[5] = _94;
  load_dst_427 = MEM[(const BitSequence *)datablock_5(D) + 24B];
  _109 = __builtin_bswap32 (load_dst_427);
  m[6] = _109;
  load_dst_536 = MEM[(const BitSequence *)datablock_5(D) + 28B];
  _124 = __builtin_bswap32 (load_dst_536);
  m[7] = _124;
  load_dst_539 = MEM[(const BitSequence *)datablock_5(D) + 32B];
  _139 = __builtin_bswap32 (load_dst_539);
  m[8] = _139;
  load_dst_543 = MEM[(const BitSequence *)datablock_5(D) + 36B];
  _154 = __builtin_bswap32 (load_dst_543);
  m[9] = _154;
  load_dst_545 = MEM[(const BitSequence *)datablock_5(D) + 40B];
  _169 = __builtin_bswap32 (load_dst_545);
  m[10] = _169;
  load_dst_549 = MEM[(const BitSequence *)datablock_5(D) + 44B];
  _184 = __builtin_bswap32 (load_dst_549);
  m[11] = _184;
  load_dst_553 = MEM[(const BitSequence *)datablock_5(D) + 48B];
  _199 = __builtin_bswap32 (load_dst_553);
  m[12] = _199;
  load_dst_557 = MEM[(const BitSequence *)datablock_5(D) + 52B];
  _214 = __builtin_bswap32 (load_dst_557);
  m[13] = _214;
  load_dst_561 = MEM[(const BitSequence *)datablock_5(D) + 56B];
  _229 = __builtin_bswap32 (load_dst_561);
  m[14] = _229;
  load_dst_496 = MEM[(const BitSequence *)datablock_5(D) + 60B];
  _244 = __builtin_bswap32 (load_dst_496);
  m[15] = _244;
  v$0_247 = state_246(D)->h32[0];
  v$1_248 = state_246(D)->h32[1];
  v$2_249 = state_246(D)->h32[2];
  v$3_250 = state_246(D)->h32[3];
  v$4_251 = state_246(D)->h32[4];
  v$5_252 = state_246(D)->h32[5];
  v$6_253 = state_246(D)->h32[6];
  v$7_254 = state_246(D)->h32[7];
  _255 = state_246(D)->salt32[0];
  v$8_256 = _255 ^ 608135816;
  _257 = state_246(D)->salt32[1];
  v$9_258 = _257 ^ 2242054355;
  _259 = state_246(D)->salt32[2];
  v$10_260 = _259 ^ 320440878;
  _261 = state_246(D)->salt32[3];
  v$11_262 = _261 ^ 57701188;
  _263 = state_246(D)->nullt;
  if (_263 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4
;;                3

;;   basic block 3, loop depth 0
;;    pred:       2
  _264 = state_246(D)->t32[0];
  v$12_265 = _264 ^ 2752067618;
  v$13_266 = _264 ^ 698298832;
  _267 = state_246(D)->t32[1];
  v$14_268 = _267 ^ 137296536;
  v$15_269 = _267 ^ 3964562569;
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  # v$12_390 = PHI <2752067618(2), v$12_265(3)>
  # v$13_384 = PHI <698298832(2), v$13_266(3)>
  # v$14_425 = PHI <137296536(2), v$14_268(3)>
  # v$15_528 = PHI <3964562569(2), v$15_269(3)>
  ivtmp.77_518 = (unsigned long) &sigma;
;;    succ:       5

;;   basic block 5, loop depth 1
;;    pred:       6
;;                4
  # v$15_538 = PHI <v$15_392(6), v$15_528(4)>
  # v$14_540 = PHI <v$14_487(6), v$14_425(4)>
  # v$13_542 = PHI <v$13_455(6), v$13_384(4)>
  # v$12_544 = PHI <v$12_424(6), v$12_390(4)>
  # v$11_366 = PHI <v$11_426(6), v$11_262(4)>
  # v$10_548 = PHI <v$10_394(6), v$10_260(4)>
  # v$9_546 = PHI <v$9_489(6), v$9_258(4)>
  # v$8_550 = PHI <v$8_457(6), v$8_256(4)>
  # v$7_552 = PHI <v$7_460(6), v$7_254(4)>
  # v$6_554 = PHI <v$6_429(6), v$6_253(4)>
  # v$5_556 = PHI <v$5_397(6), v$5_252(4)>
  # v$4_558 = PHI <v$4_492(6), v$4_251(4)>
  # v$3_560 = PHI <v$3_484(6), v$3_250(4)>
  # v$2_562 = PHI <v$2_452(6), v$2_249(4)>
  # v$1_564 = PHI <v$1_421(6), v$1_248(4)>
  # v$0_566 = PHI <v$0_389(6), v$0_247(4)>
  # prephitmp_1101 = PHI <pretmp_1100(6), _19(4)>
  # prephitmp_1106 = PHI <pretmp_1105(6), 2242054355(4)>
  # prephitmp_1108 = PHI <pretmp_1107(6), _34(4)>
  # prephitmp_1110 = PHI <pretmp_1109(6), 608135816(4)>
  # prephitmp_1115 = PHI <pretmp_1114(6), _49(4)>
  # prephitmp_1120 = PHI <pretmp_1119(6), 57701188(4)>
  # prephitmp_1122 = PHI <pretmp_1121(6), _64(4)>
  # prephitmp_1124 = PHI <pretmp_1123(6), 320440878(4)>
  # prephitmp_1129 = PHI <pretmp_1128(6), _79(4)>
  # prephitmp_1134 = PHI <pretmp_1133(6), 698298832(4)>
  # prephitmp_1136 = PHI <pretmp_1135(6), _94(4)>
  # prephitmp_1138 = PHI <pretmp_1137(6), 2752067618(4)>
  # prephitmp_1143 = PHI <pretmp_1142(6), _109(4)>
  # prephitmp_1148 = PHI <pretmp_1147(6), 3964562569(4)>
  # prephitmp_1150 = PHI <pretmp_1149(6), _124(4)>
  # prephitmp_1152 = PHI <pretmp_1151(6), 137296536(4)>
  # prephitmp_1157 = PHI <pretmp_1156(6), _139(4)>
  # prephitmp_1162 = PHI <pretmp_1161(6), 953160567(4)>
  # prephitmp_1164 = PHI <pretmp_1163(6), _154(4)>
  # prephitmp_1166 = PHI <pretmp_1165(6), 1160258022(4)>
  # prephitmp_1171 = PHI <pretmp_1170(6), _169(4)>
  # prephitmp_1176 = PHI <pretmp_1175(6), 887688300(4)>
  # prephitmp_1178 = PHI <pretmp_1177(6), _184(4)>
  # prephitmp_1180 = PHI <pretmp_1179(6), 3193202383(4)>
  # prephitmp_1185 = PHI <pretmp_1184(6), _199(4)>
  # prephitmp_1190 = PHI <pretmp_1189(6), 3380367581(4)>
  # prephitmp_1192 = PHI <pretmp_1191(6), _214(4)>
  # prephitmp_1194 = PHI <pretmp_1193(6), 3232508343(4)>
  # prephitmp_1199 = PHI <pretmp_1198(6), _229(4)>
  # prephitmp_1204 = PHI <pretmp_1203(6), 3041331479(4)>
  # prephitmp_1206 = PHI <pretmp_1205(6), _244(4)>
  # prephitmp_1208 = PHI <pretmp_1207(6), 1065670069(4)>
  # ivtmp_6 = PHI <ivtmp_7(6), 14(4)>
  # ivtmp.77_526 = PHI <ivtmp.77_522(6), ivtmp.77_518(4)>
  _277 = prephitmp_1101 ^ prephitmp_1106;
  _284 = _277 + v$4_558;
  _278 = _284 + v$0_566;
  _279 = _278 ^ v$12_544;
  _280 = _279 r>> 16;
  _281 = _280 + v$8_550;
  _282 = _281 ^ v$4_558;
  _283 = _282 r>> 12;
  _287 = prephitmp_1108 ^ prephitmp_1110;
  _294 = _278 + _287;
  _288 = _283 + _294;
  _289 = _280 ^ _288;
  _290 = _289 r>> 8;
  _291 = _281 + _290;
  _292 = _283 ^ _291;
  _293 = _292 r>> 7;
  _301 = prephitmp_1115 ^ prephitmp_1120;
  _308 = _301 + v$5_556;
  _302 = _308 + v$1_564;
  _303 = _302 ^ v$13_542;
  _304 = _303 r>> 16;
  _305 = _304 + v$9_546;
  _306 = _305 ^ v$5_556;
  _307 = _306 r>> 12;
  _311 = prephitmp_1122 ^ prephitmp_1124;
  _318 = _302 + _311;
  _312 = _307 + _318;
  _313 = _304 ^ _312;
  _314 = _313 r>> 8;
  _315 = _305 + _314;
  _316 = _307 ^ _315;
  _317 = _316 r>> 7;
  _325 = prephitmp_1129 ^ prephitmp_1134;
  _332 = _325 + v$6_554;
  _326 = _332 + v$2_562;
  _327 = _326 ^ v$14_540;
  _328 = _327 r>> 16;
  _329 = _328 + v$10_548;
  _330 = _329 ^ v$6_554;
  _331 = _330 r>> 12;
  _335 = prephitmp_1136 ^ prephitmp_1138;
  _342 = _326 + _335;
  _336 = _331 + _342;
  _337 = _328 ^ _336;
  _338 = _337 r>> 8;
  _339 = _329 + _338;
  _340 = _331 ^ _339;
  _341 = _340 r>> 7;
  _349 = prephitmp_1143 ^ prephitmp_1148;
  _356 = _349 + v$7_552;
  _350 = _356 + v$3_560;
  _351 = _350 ^ v$15_538;
  _352 = _351 r>> 16;
  _353 = _352 + v$11_366;
  _354 = _353 ^ v$7_552;
  _355 = _354 r>> 12;
  _359 = prephitmp_1150 ^ prephitmp_1152;
  _367 = _350 + _359;
  _360 = _355 + _367;
  _361 = _352 ^ _360;
  _362 = _361 r>> 8;
  _363 = _353 + _362;
  _364 = _355 ^ _363;
  _365 = _364 r>> 7;
  _374 = prephitmp_1157 ^ prephitmp_1162;
  _385 = _288 + _374;
  _375 = _317 + _385;
  _377 = _362 ^ _375;
  _378 = _377 r>> 16;
  _380 = _339 + _378;
  _382 = _317 ^ _380;
  _383 = _382 r>> 12;
  _388 = prephitmp_1164 ^ prephitmp_1166;
  _399 = _375 + _388;
  v$0_389 = _383 + _399;
  _391 = _378 ^ v$0_389;
  v$15_392 = _391 r>> 8;
  v$10_394 = _380 + v$15_392;
  _396 = _383 ^ v$10_394;
  v$5_397 = _396 r>> 7;
  _406 = prephitmp_1171 ^ prephitmp_1176;
  _417 = _312 + _406;
  _407 = _341 + _417;
  _409 = _290 ^ _407;
  _410 = _409 r>> 16;
  _412 = _363 + _410;
  _414 = _341 ^ _412;
  _415 = _414 r>> 12;
  _420 = prephitmp_1178 ^ prephitmp_1180;
  _430 = _407 + _420;
  v$1_421 = _415 + _430;
  _423 = _410 ^ v$1_421;
  v$12_424 = _423 r>> 8;
  v$11_426 = _412 + v$12_424;
  _428 = _415 ^ v$11_426;
  v$6_429 = _428 r>> 7;
  _437 = prephitmp_1185 ^ prephitmp_1190;
  _448 = _336 + _437;
  _438 = _365 + _448;
  _440 = _314 ^ _438;
  _441 = _440 r>> 16;
  _443 = _291 + _441;
  _445 = _365 ^ _443;
  _446 = _445 r>> 12;
  _451 = prephitmp_1192 ^ prephitmp_1194;
  _462 = _438 + _451;
  v$2_452 = _446 + _462;
  _454 = _441 ^ v$2_452;
  v$13_455 = _454 r>> 8;
  v$8_457 = _443 + v$13_455;
  _459 = _446 ^ v$8_457;
  v$7_460 = _459 r>> 7;
  _469 = prephitmp_1199 ^ prephitmp_1204;
  _480 = _360 + _469;
  _470 = _293 + _480;
  _472 = _338 ^ _470;
  _473 = _472 r>> 16;
  _475 = _315 + _473;
  _477 = _293 ^ _475;
  _478 = _477 r>> 12;
  _483 = prephitmp_1206 ^ prephitmp_1208;
  _495 = _470 + _483;
  v$3_484 = _478 + _495;
  _486 = _473 ^ v$3_484;
  v$14_487 = _486 r>> 8;
  v$9_489 = _475 + v$14_487;
  _491 = _478 ^ v$9_489;
  v$4_492 = _491 r>> 7;
  ivtmp_7 = ivtmp_6 + 4294967295;
  ivtmp.77_522 = ivtmp.77_526 + 16;
  if (ivtmp_7 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6
;;                7

;;   basic block 6, loop depth 1
;;    pred:       5
  _514 = (void *) ivtmp.77_522;
  pretmp_1097 = MEM[base: _514, offset: 0B];
  pretmp_1099 = (int) pretmp_1097;
  pretmp_1100 = m[pretmp_1099];
  pretmp_1102 = MEM[base: _514, offset: 1B];
  pretmp_1104 = (int) pretmp_1102;
  pretmp_1105 = c32[pretmp_1104];
  pretmp_1107 = m[pretmp_1104];
  pretmp_1109 = c32[pretmp_1099];
  pretmp_1111 = MEM[base: _514, offset: 2B];
  pretmp_1113 = (int) pretmp_1111;
  pretmp_1114 = m[pretmp_1113];
  pretmp_1116 = MEM[base: _514, offset: 3B];
  pretmp_1118 = (int) pretmp_1116;
  pretmp_1119 = c32[pretmp_1118];
  pretmp_1121 = m[pretmp_1118];
  pretmp_1123 = c32[pretmp_1113];
  pretmp_1125 = MEM[base: _514, offset: 4B];
  pretmp_1127 = (int) pretmp_1125;
  pretmp_1128 = m[pretmp_1127];
  pretmp_1130 = MEM[base: _514, offset: 5B];
  pretmp_1132 = (int) pretmp_1130;
  pretmp_1133 = c32[pretmp_1132];
  pretmp_1135 = m[pretmp_1132];
  pretmp_1137 = c32[pretmp_1127];
  pretmp_1139 = MEM[base: _514, offset: 6B];
  pretmp_1141 = (int) pretmp_1139;
  pretmp_1142 = m[pretmp_1141];
  pretmp_1144 = MEM[base: _514, offset: 7B];
  pretmp_1146 = (int) pretmp_1144;
  pretmp_1147 = c32[pretmp_1146];
  pretmp_1149 = m[pretmp_1146];
  pretmp_1151 = c32[pretmp_1141];
  pretmp_1153 = MEM[base: _514, offset: 8B];
  pretmp_1155 = (int) pretmp_1153;
  pretmp_1156 = m[pretmp_1155];
  pretmp_1158 = MEM[base: _514, offset: 9B];
  pretmp_1160 = (int) pretmp_1158;
  pretmp_1161 = c32[pretmp_1160];
  pretmp_1163 = m[pretmp_1160];
  pretmp_1165 = c32[pretmp_1155];
  pretmp_1167 = MEM[base: _514, offset: 10B];
  pretmp_1169 = (int) pretmp_1167;
  pretmp_1170 = m[pretmp_1169];
  pretmp_1172 = MEM[base: _514, offset: 11B];
  pretmp_1174 = (int) pretmp_1172;
  pretmp_1175 = c32[pretmp_1174];
  pretmp_1177 = m[pretmp_1174];
  pretmp_1179 = c32[pretmp_1169];
  pretmp_1181 = MEM[base: _514, offset: 12B];
  pretmp_1183 = (int) pretmp_1181;
  pretmp_1184 = m[pretmp_1183];
  pretmp_1186 = MEM[base: _514, offset: 13B];
  pretmp_1188 = (int) pretmp_1186;
  pretmp_1189 = c32[pretmp_1188];
  pretmp_1191 = m[pretmp_1188];
  pretmp_1193 = c32[pretmp_1183];
  pretmp_1195 = MEM[base: _514, offset: 14B];
  pretmp_1197 = (int) pretmp_1195;
  pretmp_1198 = m[pretmp_1197];
  pretmp_1200 = MEM[base: _514, offset: 15B];
  pretmp_1202 = (int) pretmp_1200;
  pretmp_1203 = c32[pretmp_1202];
  pretmp_1205 = m[pretmp_1202];
  pretmp_1207 = c32[pretmp_1197];
  goto <bb 5>;
;;    succ:       5

;;   basic block 7, loop depth 0
;;    pred:       5
  vect_cst_.58_21 = {v$8_457, v$9_489, v$10_394, v$11_426};
  vect_cst_.57_31 = {v$4_492, v$5_397, v$6_429, v$7_460};
  vect_cst_.55_15 = {v$0_389, v$1_421, v$2_452, v$3_484};
  vect_cst_.54_14 = {v$12_424, v$13_455, v$14_487, v$15_392};
  vect_cst_.52_11 = {_255, _257, _259, _261};
  vect_cst_.51_10 = {_255, _257, _259, _261};
  vect_cst_.50_9 = {v$0_247, v$1_248, v$2_249, v$3_250};
  vect_cst_.49_8 = {v$4_251, v$5_252, v$6_253, v$7_254};
  _41 = vect_cst_.55_15 ^ vect_cst_.58_21;
  _535 = vect_cst_.54_14 ^ vect_cst_.57_31;
  _42 = vect_cst_.52_11 ^ _41;
  _494 = vect_cst_.51_10 ^ _535;
  vect__497.56_22 = vect_cst_.50_9 ^ _42;
  vect__497.56_23 = vect_cst_.49_8 ^ _494;
  vectp.60_24 = &state_246(D)->h32[0];
  MEM[(unsigned int *)state_246(D) + 16B] = vect__497.56_22;
  vectp.60_26 = &MEM[(void *)state_246(D) + 32B];
  MEM[(unsigned int *)state_246(D) + 32B] = vect__497.56_23;
  m ={v} {CLOBBER};
  return 0;
;;    succ:       EXIT

}


Partition 0: size 64 align 16
	m
Inserting a value copy on edge BB2->BB4 : PART.108 = 3964562569
Inserting a value copy on edge BB2->BB4 : PART.162 = 137296536
Inserting a value copy on edge BB2->BB4 : PART.141 = 698298832
Inserting a value copy on edge BB2->BB4 : PART.124 = 2752067618
Inserting a partition copy on edge BB4->BB5 :PART.106 = PART.17
Inserting a partition copy on edge BB4->BB5 :PART.122 = PART.18
Inserting a partition copy on edge BB4->BB5 :PART.139 = PART.19
Inserting a partition copy on edge BB4->BB5 :PART.159 = PART.20
Inserting a partition copy on edge BB4->BB5 :PART.165 = PART.21
Inserting a partition copy on edge BB4->BB5 :PART.111 = PART.22
Inserting a partition copy on edge BB4->BB5 :PART.127 = PART.23
Inserting a partition copy on edge BB4->BB5 :PART.145 = PART.24
Inserting a value copy on edge BB4->BB5 : PART.1 = 14
Inserting a value copy on edge BB4->BB5 : PART.243 = 1065670069
Inserting a value copy on edge BB4->BB5 : PART.241 = 3041331479
Inserting a value copy on edge BB4->BB5 : PART.235 = 3232508343
Inserting a value copy on edge BB4->BB5 : PART.233 = 3380367581
Inserting a value copy on edge BB4->BB5 : PART.227 = 3193202383
Inserting a value copy on edge BB4->BB5 : PART.225 = 887688300
Inserting a value copy on edge BB4->BB5 : PART.219 = 1160258022
Inserting a value copy on edge BB4->BB5 : PART.217 = 953160567
Inserting a value copy on edge BB4->BB5 : PART.211 = 137296536
Inserting a value copy on edge BB4->BB5 : PART.209 = 3964562569
Inserting a value copy on edge BB4->BB5 : PART.203 = 2752067618
Inserting a value copy on edge BB4->BB5 : PART.201 = 698298832
Inserting a value copy on edge BB4->BB5 : PART.195 = 320440878
Inserting a value copy on edge BB4->BB5 : PART.193 = 57701188
Inserting a value copy on edge BB4->BB5 : PART.187 = 608135816
Inserting a value copy on edge BB4->BB5 : PART.185 = 2242054355

;; Generating RTL for gimple basic block 2

;; _19 = __builtin_bswap32 (_485);

(insn 62 61 63 (set (reg:SI 358)
        (mem:SI (reg/v/f:DI 357 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8])) -1
     (nil))

(insn 63 62 0 (set (reg:SI 293 [ D.5786 ])
        (bswap:SI (reg:SI 358))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/v/f:DI 357 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8]))
        (nil)))

;; m[0] = _19;

(insn 64 63 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [2 m+0 S4 A128])
        (reg:SI 293 [ D.5786 ])) blake_ref.c:32 -1
     (nil))

;; _34 = __builtin_bswap32 (_479);

(insn 65 64 66 (set (reg:SI 359)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8])) -1
     (nil))

(insn 66 65 0 (set (reg:SI 297 [ D.5786 ])
        (bswap:SI (reg:SI 359))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8]))
        (nil)))

;; m[1] = _34;

(insn 67 66 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -60 [0xffffffffffffffc4])) [2 m+4 S4 A32])
        (reg:SI 297 [ D.5786 ])) blake_ref.c:33 -1
     (nil))

;; _49 = __builtin_bswap32 (_474);

(insn 68 67 69 (set (reg:SI 360)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8])) -1
     (nil))

(insn 69 68 0 (set (reg:SI 301 [ D.5786 ])
        (bswap:SI (reg:SI 360))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8]))
        (nil)))

;; m[2] = _49;

(insn 70 69 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [2 m+8 S4 A64])
        (reg:SI 301 [ D.5786 ])) blake_ref.c:34 -1
     (nil))

;; _64 = __builtin_bswap32 (_461);

(insn 71 70 72 (set (reg:SI 361)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8])) -1
     (nil))

(insn 72 71 0 (set (reg:SI 305 [ D.5786 ])
        (bswap:SI (reg:SI 361))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8]))
        (nil)))

;; m[3] = _64;

(insn 73 72 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -52 [0xffffffffffffffcc])) [2 m+12 S4 A32])
        (reg:SI 305 [ D.5786 ])) blake_ref.c:35 -1
     (nil))

;; _79 = __builtin_bswap32 (_456);

(insn 74 73 75 (set (reg:SI 362)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8])) -1
     (nil))

(insn 75 74 0 (set (reg:SI 309 [ D.5786 ])
        (bswap:SI (reg:SI 362))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8]))
        (nil)))

;; m[4] = _79;

(insn 76 75 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [2 m+16 S4 A128])
        (reg:SI 309 [ D.5786 ])) blake_ref.c:36 -1
     (nil))

;; _94 = __builtin_bswap32 (_444);

(insn 77 76 78 (set (reg:SI 363)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8])) -1
     (nil))

(insn 78 77 0 (set (reg:SI 313 [ D.5786 ])
        (bswap:SI (reg:SI 363))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8]))
        (nil)))

;; m[5] = _94;

(insn 79 78 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -44 [0xffffffffffffffd4])) [2 m+20 S4 A32])
        (reg:SI 313 [ D.5786 ])) blake_ref.c:37 -1
     (nil))

;; _109 = __builtin_bswap32 (_427);

(insn 80 79 81 (set (reg:SI 364)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8])) -1
     (nil))

(insn 81 80 0 (set (reg:SI 317 [ D.5786 ])
        (bswap:SI (reg:SI 364))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8]))
        (nil)))

;; m[6] = _109;

(insn 82 81 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 m+24 S4 A64])
        (reg:SI 317 [ D.5786 ])) blake_ref.c:38 -1
     (nil))

;; _124 = __builtin_bswap32 (_536);

(insn 83 82 84 (set (reg:SI 365)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8])) -1
     (nil))

(insn 84 83 0 (set (reg:SI 321 [ D.5786 ])
        (bswap:SI (reg:SI 365))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8]))
        (nil)))

;; m[7] = _124;

(insn 85 84 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 m+28 S4 A32])
        (reg:SI 321 [ D.5786 ])) blake_ref.c:39 -1
     (nil))

;; _139 = __builtin_bswap32 (_539);

(insn 86 85 87 (set (reg:SI 366)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8])) -1
     (nil))

(insn 87 86 0 (set (reg:SI 325 [ D.5786 ])
        (bswap:SI (reg:SI 366))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8]))
        (nil)))

;; m[8] = _139;

(insn 88 87 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [2 m+32 S4 A128])
        (reg:SI 325 [ D.5786 ])) blake_ref.c:40 -1
     (nil))

;; _154 = __builtin_bswap32 (_543);

(insn 89 88 90 (set (reg:SI 367)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8])) -1
     (nil))

(insn 90 89 0 (set (reg:SI 329 [ D.5786 ])
        (bswap:SI (reg:SI 367))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8]))
        (nil)))

;; m[9] = _154;

(insn 91 90 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [2 m+36 S4 A32])
        (reg:SI 329 [ D.5786 ])) blake_ref.c:41 -1
     (nil))

;; _169 = __builtin_bswap32 (_545);

(insn 92 91 93 (set (reg:SI 368)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8])) -1
     (nil))

(insn 93 92 0 (set (reg:SI 333 [ D.5786 ])
        (bswap:SI (reg:SI 368))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8]))
        (nil)))

;; m[10] = _169;

(insn 94 93 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 m+40 S4 A64])
        (reg:SI 333 [ D.5786 ])) blake_ref.c:42 -1
     (nil))

;; _184 = __builtin_bswap32 (_549);

(insn 95 94 96 (set (reg:SI 369)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8])) -1
     (nil))

(insn 96 95 0 (set (reg:SI 337 [ D.5786 ])
        (bswap:SI (reg:SI 369))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8]))
        (nil)))

;; m[11] = _184;

(insn 97 96 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [2 m+44 S4 A32])
        (reg:SI 337 [ D.5786 ])) blake_ref.c:43 -1
     (nil))

;; _199 = __builtin_bswap32 (_553);

(insn 98 97 99 (set (reg:SI 370)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8])) -1
     (nil))

(insn 99 98 0 (set (reg:SI 341 [ D.5786 ])
        (bswap:SI (reg:SI 370))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8]))
        (nil)))

;; m[12] = _199;

(insn 100 99 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 m+48 S4 A128])
        (reg:SI 341 [ D.5786 ])) blake_ref.c:44 -1
     (nil))

;; _214 = __builtin_bswap32 (_557);

(insn 101 100 102 (set (reg:SI 371)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8])) -1
     (nil))

(insn 102 101 0 (set (reg:SI 345 [ D.5786 ])
        (bswap:SI (reg:SI 371))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8]))
        (nil)))

;; m[13] = _214;

(insn 103 102 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 m+52 S4 A32])
        (reg:SI 345 [ D.5786 ])) blake_ref.c:45 -1
     (nil))

;; _229 = __builtin_bswap32 (_561);

(insn 104 103 105 (set (reg:SI 372)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8])) -1
     (nil))

(insn 105 104 0 (set (reg:SI 349 [ D.5786 ])
        (bswap:SI (reg:SI 372))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8]))
        (nil)))

;; m[14] = _229;

(insn 106 105 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 m+56 S4 A64])
        (reg:SI 349 [ D.5786 ])) blake_ref.c:46 -1
     (nil))

;; _244 = __builtin_bswap32 (_496);

(insn 107 106 108 (set (reg:SI 373)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 60 [0x3c])) [0 MEM[(const BitSequence *)datablock_5(D) + 60B]+0 S4 A8])) -1
     (nil))

(insn 108 107 0 (set (reg:SI 353 [ D.5786 ])
        (bswap:SI (reg:SI 373))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 60 [0x3c])) [0 MEM[(const BitSequence *)datablock_5(D) + 60B]+0 S4 A8]))
        (nil)))

;; m[15] = _244;

(insn 109 108 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 m+60 S4 A32])
        (reg:SI 353 [ D.5786 ])) blake_ref.c:47 -1
     (nil))

;; v$0_247 = state_246(D)->h32[0];

(insn 110 109 0 (set (reg:SI 128 [ v$0 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 16 [0x10])) [2 state_246(D)->h32+0 S4 A64])) blake_ref.c:50 -1
     (nil))

;; v$1_248 = state_246(D)->h32[1];

(insn 111 110 0 (set (reg:SI 129 [ v$1 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 20 [0x14])) [2 state_246(D)->h32+4 S4 A32])) blake_ref.c:51 -1
     (nil))

;; v$2_249 = state_246(D)->h32[2];

(insn 112 111 0 (set (reg:SI 130 [ v$2 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 24 [0x18])) [2 state_246(D)->h32+8 S4 A64])) blake_ref.c:52 -1
     (nil))

;; v$3_250 = state_246(D)->h32[3];

(insn 113 112 0 (set (reg:SI 131 [ v$3 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 28 [0x1c])) [2 state_246(D)->h32+12 S4 A32])) blake_ref.c:53 -1
     (nil))

;; v$4_251 = state_246(D)->h32[4];

(insn 114 113 0 (set (reg:SI 132 [ v$4 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 32 [0x20])) [2 state_246(D)->h32+16 S4 A64])) blake_ref.c:54 -1
     (nil))

;; v$5_252 = state_246(D)->h32[5];

(insn 115 114 0 (set (reg:SI 133 [ v$5 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 36 [0x24])) [2 state_246(D)->h32+20 S4 A32])) blake_ref.c:55 -1
     (nil))

;; v$6_253 = state_246(D)->h32[6];

(insn 116 115 0 (set (reg:SI 134 [ v$6 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 40 [0x28])) [2 state_246(D)->h32+24 S4 A64])) blake_ref.c:56 -1
     (nil))

;; v$7_254 = state_246(D)->h32[7];

(insn 117 116 0 (set (reg:SI 135 [ v$7 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 44 [0x2c])) [2 state_246(D)->h32+28 S4 A32])) blake_ref.c:57 -1
     (nil))

;; _255 = state_246(D)->salt32[0];

(insn 118 117 0 (set (reg:SI 136 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 120 [0x78])) [2 state_246(D)->salt32+0 S4 A64])) blake_ref.c:58 -1
     (nil))

;; v$8_256 = _255 ^ 608135816;

(insn 119 118 0 (parallel [
            (set (reg:SI 254 [ v$8 ])
                (xor:SI (reg:SI 136 [ D.5781 ])
                    (const_int 608135816 [0x243f6a88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:58 -1
     (nil))

;; _257 = state_246(D)->salt32[1];

(insn 120 119 0 (set (reg:SI 137 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 124 [0x7c])) [2 state_246(D)->salt32+4 S4 A32])) blake_ref.c:59 -1
     (nil))

;; v$9_258 = _257 ^ 2242054355;

(insn 121 120 0 (parallel [
            (set (reg:SI 274 [ v$9 ])
                (xor:SI (reg:SI 137 [ D.5781 ])
                    (const_int -2052912941 [0xffffffff85a308d3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:59 -1
     (nil))

;; _259 = state_246(D)->salt32[2];

(insn 122 121 0 (set (reg:SI 138 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 128 [0x80])) [2 state_246(D)->salt32+8 S4 A64])) blake_ref.c:60 -1
     (nil))

;; v$10_260 = _259 ^ 320440878;

(insn 123 122 0 (parallel [
            (set (reg:SI 220 [ v$10 ])
                (xor:SI (reg:SI 138 [ D.5781 ])
                    (const_int 320440878 [0x13198a2e])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:60 -1
     (nil))

;; _261 = state_246(D)->salt32[3];

(insn 124 123 0 (set (reg:SI 139 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 132 [0x84])) [2 state_246(D)->salt32+12 S4 A32])) blake_ref.c:61 -1
     (nil))

;; v$11_262 = _261 ^ 57701188;

(insn 125 124 0 (parallel [
            (set (reg:SI 206 [ v$11 ])
                (xor:SI (reg:SI 139 [ D.5781 ])
                    (const_int 57701188 [0x3707344])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:61 -1
     (nil))

;; if (_263 != 0)

(insn 126 125 127 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                    (const_int 12 [0xc])) [2 state_246(D)->nullt+0 S4 A32])
            (const_int 0 [0]))) blake_ref.c:62 -1
     (nil))

(jump_insn 127 126 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:62 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 3

;; _264 = state_246(D)->t32[0];

(insn 129 128 0 (set (reg:SI 141 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 48 [0x30])) [2 state_246(D)->t32+0 S4 A64])) blake_ref.c:69 -1
     (nil))

;; v$12_265 = _264 ^ 2752067618;

(insn 130 129 0 (parallel [
            (set (reg:SI 235 [ v$12 ])
                (xor:SI (reg:SI 141 [ D.5781 ])
                    (const_int -1542899678 [0xffffffffa4093822])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:69 -1
     (nil))

;; v$13_266 = _264 ^ 698298832;

(insn 131 130 0 (parallel [
            (set (reg:SI 252 [ v$13 ])
                (xor:SI (reg:SI 141 [ D.5781 ])
                    (const_int 698298832 [0x299f31d0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:70 -1
     (nil))

;; _267 = state_246(D)->t32[1];

(insn 132 131 0 (set (reg:SI 142 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 52 [0x34])) [2 state_246(D)->t32+4 S4 A32])) blake_ref.c:71 -1
     (nil))

;; v$14_268 = _267 ^ 137296536;

(insn 133 132 0 (parallel [
            (set (reg:SI 273 [ v$14 ])
                (xor:SI (reg:SI 142 [ D.5781 ])
                    (const_int 137296536 [0x82efa98])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:71 -1
     (nil))

;; v$15_269 = _267 ^ 3964562569;

(insn 134 133 0 (parallel [
            (set (reg:SI 219 [ v$15 ])
                (xor:SI (reg:SI 142 [ D.5781 ])
                    (const_int -330404727 [0xffffffffec4e6c89])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:72 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 135 134 136 2 "" [0 uses])

(note 136 135 0 NOTE_INSN_BASIC_BLOCK)

;; ivtmp.77_518 = (unsigned long) &sigma;

(insn 137 136 0 (set (reg:DI 281 [ ivtmp.77 ])
        (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)) -1
     (nil))

;; Generating RTL for gimple basic block 5
Swap operands in stmt:
_294 = _278 + _287;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_288 = _283 + _294;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_318 = _302 + _311;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_312 = _307 + _318;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_342 = _326 + _335;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_336 = _331 + _342;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_367 = _350 + _359;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_360 = _355 + _367;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_385 = _288 + _374;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_375 = _317 + _385;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_399 = _375 + _388;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
v$0_389 = _383 + _399;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_417 = _312 + _406;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_407 = _341 + _417;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_430 = _407 + _420;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
v$1_421 = _415 + _430;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_448 = _336 + _437;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_438 = _365 + _448;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_462 = _438 + _451;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
v$2_452 = _446 + _462;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_480 = _360 + _469;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_470 = _293 + _480;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_495 = _470 + _483;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
v$3_484 = _478 + _495;
Cost left opnd=0, right opnd=2

;; _278 = _284 + v$0_566;

(insn 139 138 140 (parallel [
            (set (reg:SI 374 [ D.5781 ])
                (xor:SI (reg:SI 293 [ D.5786 ])
                    (reg:SI 296 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

(insn 140 139 141 (parallel [
            (set (reg:SI 375 [ D.5781 ])
                (plus:SI (reg:SI 374 [ D.5781 ])
                    (reg:SI 276 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

(insn 141 140 0 (parallel [
            (set (reg:SI 144 [ D.5781 ])
                (plus:SI (reg:SI 375 [ D.5781 ])
                    (reg:SI 217 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

;; _280 = _279 r>> 16;

(insn 142 141 143 (parallel [
            (set (reg:SI 376 [ D.5781 ])
                (xor:SI (reg:SI 144 [ D.5781 ])
                    (reg:SI 235 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

(insn 143 142 0 (parallel [
            (set (reg:SI 146 [ D.5781 ])
                (rotate:SI (reg:SI 376 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

;; _281 = _280 + v$8_550;

(insn 144 143 0 (parallel [
            (set (reg:SI 147 [ D.5781 ])
                (plus:SI (reg:SI 146 [ D.5781 ])
                    (reg:SI 254 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

;; _283 = _282 r>> 12;

(insn 145 144 146 (parallel [
            (set (reg:SI 377 [ D.5781 ])
                (xor:SI (reg:SI 147 [ D.5781 ])
                    (reg:SI 276 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

(insn 146 145 0 (parallel [
            (set (reg:SI 149 [ D.5781 ])
                (rotatert:SI (reg:SI 377 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

;; _288 = _294 + _283;

(insn 147 146 148 (parallel [
            (set (reg:SI 378 [ D.5781 ])
                (xor:SI (reg:SI 297 [ D.5786 ])
                    (reg:SI 298 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

(insn 148 147 149 (parallel [
            (set (reg:SI 379 [ D.5781 ])
                (plus:SI (reg:SI 378 [ D.5781 ])
                    (reg:SI 144 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

(insn 149 148 0 (parallel [
            (set (reg:SI 152 [ D.5781 ])
                (plus:SI (reg:SI 379 [ D.5781 ])
                    (reg:SI 149 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

;; _290 = _289 r>> 8;

(insn 150 149 151 (parallel [
            (set (reg:SI 380 [ D.5781 ])
                (xor:SI (reg:SI 146 [ D.5781 ])
                    (reg:SI 152 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

(insn 151 150 0 (parallel [
            (set (reg:SI 154 [ D.5781 ])
                (rotatert:SI (reg:SI 380 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

;; _291 = _281 + _290;

(insn 152 151 0 (parallel [
            (set (reg:SI 155 [ D.5781 ])
                (plus:SI (reg:SI 147 [ D.5781 ])
                    (reg:SI 154 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

;; _293 = _292 r>> 7;

(insn 153 152 154 (parallel [
            (set (reg:SI 381 [ D.5781 ])
                (xor:SI (reg:SI 149 [ D.5781 ])
                    (reg:SI 155 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

(insn 154 153 0 (parallel [
            (set (reg:SI 157 [ D.5781 ])
                (rotatert:SI (reg:SI 381 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))

;; _302 = _308 + v$1_564;

(insn 155 154 156 (parallel [
            (set (reg:SI 382 [ D.5781 ])
                (xor:SI (reg:SI 301 [ D.5786 ])
                    (reg:SI 304 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

(insn 156 155 157 (parallel [
            (set (reg:SI 383 [ D.5781 ])
                (plus:SI (reg:SI 382 [ D.5781 ])
                    (reg:SI 222 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

(insn 157 156 0 (parallel [
            (set (reg:SI 160 [ D.5781 ])
                (plus:SI (reg:SI 383 [ D.5781 ])
                    (reg:SI 233 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

;; _304 = _303 r>> 16;

(insn 158 157 159 (parallel [
            (set (reg:SI 384 [ D.5781 ])
                (xor:SI (reg:SI 160 [ D.5781 ])
                    (reg:SI 252 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

(insn 159 158 0 (parallel [
            (set (reg:SI 162 [ D.5781 ])
                (rotate:SI (reg:SI 384 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

;; _305 = _304 + v$9_546;

(insn 160 159 0 (parallel [
            (set (reg:SI 163 [ D.5781 ])
                (plus:SI (reg:SI 162 [ D.5781 ])
                    (reg:SI 274 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

;; _307 = _306 r>> 12;

(insn 161 160 162 (parallel [
            (set (reg:SI 385 [ D.5781 ])
                (xor:SI (reg:SI 163 [ D.5781 ])
                    (reg:SI 222 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

(insn 162 161 0 (parallel [
            (set (reg:SI 165 [ D.5781 ])
                (rotatert:SI (reg:SI 385 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

;; _312 = _318 + _307;

(insn 163 162 164 (parallel [
            (set (reg:SI 386 [ D.5781 ])
                (xor:SI (reg:SI 305 [ D.5786 ])
                    (reg:SI 306 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

(insn 164 163 165 (parallel [
            (set (reg:SI 387 [ D.5781 ])
                (plus:SI (reg:SI 386 [ D.5781 ])
                    (reg:SI 160 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

(insn 165 164 0 (parallel [
            (set (reg:SI 168 [ D.5781 ])
                (plus:SI (reg:SI 387 [ D.5781 ])
                    (reg:SI 165 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

;; _314 = _313 r>> 8;

(insn 166 165 167 (parallel [
            (set (reg:SI 388 [ D.5781 ])
                (xor:SI (reg:SI 162 [ D.5781 ])
                    (reg:SI 168 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

(insn 167 166 0 (parallel [
            (set (reg:SI 170 [ D.5781 ])
                (rotatert:SI (reg:SI 388 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

;; _315 = _305 + _314;

(insn 168 167 0 (parallel [
            (set (reg:SI 171 [ D.5781 ])
                (plus:SI (reg:SI 163 [ D.5781 ])
                    (reg:SI 170 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

;; _317 = _316 r>> 7;

(insn 169 168 170 (parallel [
            (set (reg:SI 389 [ D.5781 ])
                (xor:SI (reg:SI 165 [ D.5781 ])
                    (reg:SI 171 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

(insn 170 169 0 (parallel [
            (set (reg:SI 173 [ D.5781 ])
                (rotatert:SI (reg:SI 389 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))

;; _326 = _332 + v$2_562;

(insn 171 170 172 (parallel [
            (set (reg:SI 390 [ D.5781 ])
                (xor:SI (reg:SI 309 [ D.5786 ])
                    (reg:SI 312 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

(insn 172 171 173 (parallel [
            (set (reg:SI 391 [ D.5781 ])
                (plus:SI (reg:SI 390 [ D.5781 ])
                    (reg:SI 238 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

(insn 173 172 0 (parallel [
            (set (reg:SI 176 [ D.5781 ])
                (plus:SI (reg:SI 391 [ D.5781 ])
                    (reg:SI 250 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

;; _328 = _327 r>> 16;

(insn 174 173 175 (parallel [
            (set (reg:SI 392 [ D.5781 ])
                (xor:SI (reg:SI 176 [ D.5781 ])
                    (reg:SI 273 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

(insn 175 174 0 (parallel [
            (set (reg:SI 178 [ D.5781 ])
                (rotate:SI (reg:SI 392 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

;; _329 = _328 + v$10_548;

(insn 176 175 0 (parallel [
            (set (reg:SI 179 [ D.5781 ])
                (plus:SI (reg:SI 178 [ D.5781 ])
                    (reg:SI 220 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

;; _331 = _330 r>> 12;

(insn 177 176 178 (parallel [
            (set (reg:SI 393 [ D.5781 ])
                (xor:SI (reg:SI 179 [ D.5781 ])
                    (reg:SI 238 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

(insn 178 177 0 (parallel [
            (set (reg:SI 181 [ D.5781 ])
                (rotatert:SI (reg:SI 393 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

;; _336 = _342 + _331;

(insn 179 178 180 (parallel [
            (set (reg:SI 394 [ D.5781 ])
                (xor:SI (reg:SI 313 [ D.5786 ])
                    (reg:SI 314 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

(insn 180 179 181 (parallel [
            (set (reg:SI 395 [ D.5781 ])
                (plus:SI (reg:SI 394 [ D.5781 ])
                    (reg:SI 176 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

(insn 181 180 0 (parallel [
            (set (reg:SI 184 [ D.5781 ])
                (plus:SI (reg:SI 395 [ D.5781 ])
                    (reg:SI 181 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

;; _338 = _337 r>> 8;

(insn 182 181 183 (parallel [
            (set (reg:SI 396 [ D.5781 ])
                (xor:SI (reg:SI 178 [ D.5781 ])
                    (reg:SI 184 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

(insn 183 182 0 (parallel [
            (set (reg:SI 186 [ D.5781 ])
                (rotatert:SI (reg:SI 396 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

;; _339 = _329 + _338;

(insn 184 183 0 (parallel [
            (set (reg:SI 187 [ D.5781 ])
                (plus:SI (reg:SI 179 [ D.5781 ])
                    (reg:SI 186 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

;; _341 = _340 r>> 7;

(insn 185 184 186 (parallel [
            (set (reg:SI 397 [ D.5781 ])
                (xor:SI (reg:SI 181 [ D.5781 ])
                    (reg:SI 187 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

(insn 186 185 0 (parallel [
            (set (reg:SI 189 [ D.5781 ])
                (rotatert:SI (reg:SI 397 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))

;; _350 = _356 + v$3_560;

(insn 187 186 188 (parallel [
            (set (reg:SI 398 [ D.5781 ])
                (xor:SI (reg:SI 317 [ D.5786 ])
                    (reg:SI 320 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

(insn 188 187 189 (parallel [
            (set (reg:SI 399 [ D.5781 ])
                (plus:SI (reg:SI 398 [ D.5781 ])
                    (reg:SI 256 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

(insn 189 188 0 (parallel [
            (set (reg:SI 192 [ D.5781 ])
                (plus:SI (reg:SI 399 [ D.5781 ])
                    (reg:SI 270 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

;; _352 = _351 r>> 16;

(insn 190 189 191 (parallel [
            (set (reg:SI 400 [ D.5781 ])
                (xor:SI (reg:SI 192 [ D.5781 ])
                    (reg:SI 219 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

(insn 191 190 0 (parallel [
            (set (reg:SI 194 [ D.5781 ])
                (rotate:SI (reg:SI 400 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

;; _353 = _352 + v$11_366;

(insn 192 191 0 (parallel [
            (set (reg:SI 195 [ D.5781 ])
                (plus:SI (reg:SI 194 [ D.5781 ])
                    (reg:SI 206 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

;; _355 = _354 r>> 12;

(insn 193 192 194 (parallel [
            (set (reg:SI 401 [ D.5781 ])
                (xor:SI (reg:SI 195 [ D.5781 ])
                    (reg:SI 256 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

(insn 194 193 0 (parallel [
            (set (reg:SI 197 [ D.5781 ])
                (rotatert:SI (reg:SI 401 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

;; _360 = _367 + _355;

(insn 195 194 196 (parallel [
            (set (reg:SI 402 [ D.5781 ])
                (xor:SI (reg:SI 321 [ D.5786 ])
                    (reg:SI 322 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

(insn 196 195 197 (parallel [
            (set (reg:SI 403 [ D.5781 ])
                (plus:SI (reg:SI 402 [ D.5781 ])
                    (reg:SI 192 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

(insn 197 196 0 (parallel [
            (set (reg:SI 200 [ D.5781 ])
                (plus:SI (reg:SI 403 [ D.5781 ])
                    (reg:SI 197 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

;; _362 = _361 r>> 8;

(insn 198 197 199 (parallel [
            (set (reg:SI 404 [ D.5781 ])
                (xor:SI (reg:SI 194 [ D.5781 ])
                    (reg:SI 200 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

(insn 199 198 0 (parallel [
            (set (reg:SI 202 [ D.5781 ])
                (rotatert:SI (reg:SI 404 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

;; _363 = _353 + _362;

(insn 200 199 0 (parallel [
            (set (reg:SI 203 [ D.5781 ])
                (plus:SI (reg:SI 195 [ D.5781 ])
                    (reg:SI 202 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

;; _365 = _364 r>> 7;

(insn 201 200 202 (parallel [
            (set (reg:SI 405 [ D.5781 ])
                (xor:SI (reg:SI 197 [ D.5781 ])
                    (reg:SI 203 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

(insn 202 201 0 (parallel [
            (set (reg:SI 205 [ D.5781 ])
                (rotatert:SI (reg:SI 405 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))

;; _375 = _385 + _317;

(insn 203 202 204 (parallel [
            (set (reg:SI 406 [ D.5781 ])
                (xor:SI (reg:SI 325 [ D.5786 ])
                    (reg:SI 328 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

(insn 204 203 205 (parallel [
            (set (reg:SI 407 [ D.5781 ])
                (plus:SI (reg:SI 406 [ D.5781 ])
                    (reg:SI 152 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

(insn 205 204 0 (parallel [
            (set (reg:SI 209 [ D.5781 ])
                (plus:SI (reg:SI 407 [ D.5781 ])
                    (reg:SI 173 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

;; _378 = _377 r>> 16;

(insn 206 205 207 (parallel [
            (set (reg:SI 408 [ D.5781 ])
                (xor:SI (reg:SI 202 [ D.5781 ])
                    (reg:SI 209 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

(insn 207 206 0 (parallel [
            (set (reg:SI 211 [ D.5781 ])
                (rotate:SI (reg:SI 408 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

;; _380 = _339 + _378;

(insn 208 207 0 (parallel [
            (set (reg:SI 212 [ D.5781 ])
                (plus:SI (reg:SI 187 [ D.5781 ])
                    (reg:SI 211 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

;; _383 = _382 r>> 12;

(insn 209 208 210 (parallel [
            (set (reg:SI 409 [ D.5781 ])
                (xor:SI (reg:SI 173 [ D.5781 ])
                    (reg:SI 212 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

(insn 210 209 0 (parallel [
            (set (reg:SI 214 [ D.5781 ])
                (rotatert:SI (reg:SI 409 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

;; v$0_389 = _399 + _383;

(insn 211 210 212 (parallel [
            (set (reg:SI 410 [ D.5781 ])
                (xor:SI (reg:SI 329 [ D.5786 ])
                    (reg:SI 330 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

(insn 212 211 213 (parallel [
            (set (reg:SI 411 [ D.5781 ])
                (plus:SI (reg:SI 410 [ D.5781 ])
                    (reg:SI 209 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

(insn 213 212 0 (parallel [
            (set (reg:SI 217 [ v$0 ])
                (plus:SI (reg:SI 411 [ D.5781 ])
                    (reg:SI 214 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

;; v$15_392 = _391 r>> 8;

(insn 214 213 215 (parallel [
            (set (reg:SI 412 [ D.5781 ])
                (xor:SI (reg:SI 211 [ D.5781 ])
                    (reg:SI 217 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

(insn 215 214 0 (parallel [
            (set (reg:SI 219 [ v$15 ])
                (rotatert:SI (reg:SI 412 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

;; v$10_394 = _380 + v$15_392;

(insn 216 215 0 (parallel [
            (set (reg:SI 220 [ v$10 ])
                (plus:SI (reg:SI 212 [ D.5781 ])
                    (reg:SI 219 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

;; v$5_397 = _396 r>> 7;

(insn 217 216 218 (parallel [
            (set (reg:SI 413 [ D.5781 ])
                (xor:SI (reg:SI 214 [ D.5781 ])
                    (reg:SI 220 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

(insn 218 217 0 (parallel [
            (set (reg:SI 222 [ v$5 ])
                (rotatert:SI (reg:SI 413 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))

;; _407 = _417 + _341;

(insn 219 218 220 (parallel [
            (set (reg:SI 414 [ D.5781 ])
                (xor:SI (reg:SI 333 [ D.5786 ])
                    (reg:SI 336 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

(insn 220 219 221 (parallel [
            (set (reg:SI 415 [ D.5781 ])
                (plus:SI (reg:SI 414 [ D.5781 ])
                    (reg:SI 168 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

(insn 221 220 0 (parallel [
            (set (reg:SI 225 [ D.5781 ])
                (plus:SI (reg:SI 415 [ D.5781 ])
                    (reg:SI 189 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

;; _410 = _409 r>> 16;

(insn 222 221 223 (parallel [
            (set (reg:SI 416 [ D.5781 ])
                (xor:SI (reg:SI 154 [ D.5781 ])
                    (reg:SI 225 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

(insn 223 222 0 (parallel [
            (set (reg:SI 227 [ D.5781 ])
                (rotate:SI (reg:SI 416 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

;; _412 = _363 + _410;

(insn 224 223 0 (parallel [
            (set (reg:SI 228 [ D.5781 ])
                (plus:SI (reg:SI 203 [ D.5781 ])
                    (reg:SI 227 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

;; _415 = _414 r>> 12;

(insn 225 224 226 (parallel [
            (set (reg:SI 417 [ D.5781 ])
                (xor:SI (reg:SI 189 [ D.5781 ])
                    (reg:SI 228 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

(insn 226 225 0 (parallel [
            (set (reg:SI 230 [ D.5781 ])
                (rotatert:SI (reg:SI 417 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

;; v$1_421 = _430 + _415;

(insn 227 226 228 (parallel [
            (set (reg:SI 418 [ D.5781 ])
                (xor:SI (reg:SI 337 [ D.5786 ])
                    (reg:SI 338 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

(insn 228 227 229 (parallel [
            (set (reg:SI 419 [ D.5781 ])
                (plus:SI (reg:SI 418 [ D.5781 ])
                    (reg:SI 225 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

(insn 229 228 0 (parallel [
            (set (reg:SI 233 [ v$1 ])
                (plus:SI (reg:SI 419 [ D.5781 ])
                    (reg:SI 230 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

;; v$12_424 = _423 r>> 8;

(insn 230 229 231 (parallel [
            (set (reg:SI 420 [ D.5781 ])
                (xor:SI (reg:SI 227 [ D.5781 ])
                    (reg:SI 233 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

(insn 231 230 0 (parallel [
            (set (reg:SI 235 [ v$12 ])
                (rotatert:SI (reg:SI 420 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

;; v$11_426 = _412 + v$12_424;

(insn 232 231 0 (parallel [
            (set (reg:SI 206 [ v$11 ])
                (plus:SI (reg:SI 228 [ D.5781 ])
                    (reg:SI 235 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

;; v$6_429 = _428 r>> 7;

(insn 233 232 234 (parallel [
            (set (reg:SI 421 [ D.5781 ])
                (xor:SI (reg:SI 230 [ D.5781 ])
                    (reg:SI 206 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

(insn 234 233 0 (parallel [
            (set (reg:SI 238 [ v$6 ])
                (rotatert:SI (reg:SI 421 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))

;; _438 = _448 + _365;

(insn 235 234 236 (parallel [
            (set (reg:SI 422 [ D.5781 ])
                (xor:SI (reg:SI 341 [ D.5786 ])
                    (reg:SI 344 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

(insn 236 235 237 (parallel [
            (set (reg:SI 423 [ D.5781 ])
                (plus:SI (reg:SI 422 [ D.5781 ])
                    (reg:SI 184 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

(insn 237 236 0 (parallel [
            (set (reg:SI 241 [ D.5781 ])
                (plus:SI (reg:SI 423 [ D.5781 ])
                    (reg:SI 205 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

;; _441 = _440 r>> 16;

(insn 238 237 239 (parallel [
            (set (reg:SI 424 [ D.5781 ])
                (xor:SI (reg:SI 170 [ D.5781 ])
                    (reg:SI 241 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

(insn 239 238 0 (parallel [
            (set (reg:SI 243 [ D.5781 ])
                (rotate:SI (reg:SI 424 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

;; _443 = _291 + _441;

(insn 240 239 0 (parallel [
            (set (reg:SI 244 [ D.5781 ])
                (plus:SI (reg:SI 155 [ D.5781 ])
                    (reg:SI 243 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

;; _446 = _445 r>> 12;

(insn 241 240 242 (parallel [
            (set (reg:SI 425 [ D.5781 ])
                (xor:SI (reg:SI 205 [ D.5781 ])
                    (reg:SI 244 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

(insn 242 241 0 (parallel [
            (set (reg:SI 247 [ D.5781 ])
                (rotatert:SI (reg:SI 425 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

;; v$2_452 = _462 + _446;

(insn 243 242 244 (parallel [
            (set (reg:SI 426 [ D.5781 ])
                (xor:SI (reg:SI 345 [ D.5786 ])
                    (reg:SI 346 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

(insn 244 243 245 (parallel [
            (set (reg:SI 427 [ D.5781 ])
                (plus:SI (reg:SI 426 [ D.5781 ])
                    (reg:SI 241 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

(insn 245 244 0 (parallel [
            (set (reg:SI 250 [ v$2 ])
                (plus:SI (reg:SI 427 [ D.5781 ])
                    (reg:SI 247 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

;; v$13_455 = _454 r>> 8;

(insn 246 245 247 (parallel [
            (set (reg:SI 428 [ D.5781 ])
                (xor:SI (reg:SI 243 [ D.5781 ])
                    (reg:SI 250 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

(insn 247 246 0 (parallel [
            (set (reg:SI 252 [ v$13 ])
                (rotatert:SI (reg:SI 428 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

;; v$8_457 = _443 + v$13_455;

(insn 248 247 0 (parallel [
            (set (reg:SI 254 [ v$8 ])
                (plus:SI (reg:SI 244 [ D.5781 ])
                    (reg:SI 252 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

;; v$7_460 = _459 r>> 7;

(insn 249 248 250 (parallel [
            (set (reg:SI 429 [ D.5781 ])
                (xor:SI (reg:SI 247 [ D.5781 ])
                    (reg:SI 254 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

(insn 250 249 0 (parallel [
            (set (reg:SI 256 [ v$7 ])
                (rotatert:SI (reg:SI 429 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))

;; _470 = _480 + _293;

(insn 251 250 252 (parallel [
            (set (reg:SI 430 [ D.5781 ])
                (xor:SI (reg:SI 349 [ D.5786 ])
                    (reg:SI 352 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

(insn 252 251 253 (parallel [
            (set (reg:SI 431 [ D.5781 ])
                (plus:SI (reg:SI 430 [ D.5781 ])
                    (reg:SI 200 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

(insn 253 252 0 (parallel [
            (set (reg:SI 260 [ D.5781 ])
                (plus:SI (reg:SI 431 [ D.5781 ])
                    (reg:SI 157 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

;; _473 = _472 r>> 16;

(insn 254 253 255 (parallel [
            (set (reg:SI 432 [ D.5781 ])
                (xor:SI (reg:SI 186 [ D.5781 ])
                    (reg:SI 260 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

(insn 255 254 0 (parallel [
            (set (reg:SI 262 [ D.5781 ])
                (rotate:SI (reg:SI 432 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

;; _475 = _315 + _473;

(insn 256 255 0 (parallel [
            (set (reg:SI 264 [ D.5781 ])
                (plus:SI (reg:SI 171 [ D.5781 ])
                    (reg:SI 262 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

;; _478 = _477 r>> 12;

(insn 257 256 258 (parallel [
            (set (reg:SI 433 [ D.5781 ])
                (xor:SI (reg:SI 157 [ D.5781 ])
                    (reg:SI 264 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

(insn 258 257 0 (parallel [
            (set (reg:SI 266 [ D.5781 ])
                (rotatert:SI (reg:SI 433 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

;; v$3_484 = _495 + _478;

(insn 259 258 260 (parallel [
            (set (reg:SI 434 [ D.5781 ])
                (xor:SI (reg:SI 353 [ D.5786 ])
                    (reg:SI 354 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

(insn 260 259 261 (parallel [
            (set (reg:SI 435 [ D.5781 ])
                (plus:SI (reg:SI 434 [ D.5781 ])
                    (reg:SI 260 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

(insn 261 260 0 (parallel [
            (set (reg:SI 270 [ v$3 ])
                (plus:SI (reg:SI 435 [ D.5781 ])
                    (reg:SI 266 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

;; v$14_487 = _486 r>> 8;

(insn 262 261 263 (parallel [
            (set (reg:SI 436 [ D.5781 ])
                (xor:SI (reg:SI 262 [ D.5781 ])
                    (reg:SI 270 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

(insn 263 262 0 (parallel [
            (set (reg:SI 273 [ v$14 ])
                (rotatert:SI (reg:SI 436 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

;; v$9_489 = _475 + v$14_487;

(insn 264 263 0 (parallel [
            (set (reg:SI 274 [ v$9 ])
                (plus:SI (reg:SI 264 [ D.5781 ])
                    (reg:SI 273 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

;; v$4_492 = _491 r>> 7;

(insn 265 264 266 (parallel [
            (set (reg:SI 437 [ D.5781 ])
                (xor:SI (reg:SI 266 [ D.5781 ])
                    (reg:SI 274 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

(insn 266 265 0 (parallel [
            (set (reg:SI 276 [ v$4 ])
                (rotatert:SI (reg:SI 437 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))

;; _7 = _6 + 4294967295;

(insn 267 266 0 (parallel [
            (set (reg:SI 113 [ D.5779 ])
                (plus:SI (reg:SI 113 [ D.5779 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

;; ivtmp.77_522 = ivtmp.77_526 + 16;

(insn 268 267 0 (parallel [
            (set (reg:DI 281 [ ivtmp.77 ])
                (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

;; if (_7 != 0)

(insn 269 268 270 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 113 [ D.5779 ])
            (const_int 0 [0]))) blake_ref.c:76 -1
     (nil))

(jump_insn 270 269 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:76 -1
     (int_list:REG_BR_PROB 667 (nil)))

;; Generating RTL for gimple basic block 6

;; _514 = (void *) ivtmp.77_522;

(insn 272 271 0 (set (reg/f:DI 280 [ D.5784 ])
        (reg:DI 281 [ ivtmp.77 ])) -1
     (nil))

;; _1099 = (int) _1097;

(insn 273 272 0 (set (reg:SI 292 [ D.5782 ])
        (zero_extend:SI (mem:QI (reg/f:DI 280 [ D.5784 ]) [0 MEM[base: _514, offset: 0B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1100 = m[_1099];

(insn 274 273 275 (set (reg:DI 438)
        (sign_extend:DI (reg:SI 292 [ D.5782 ]))) -1
     (nil))

(insn 275 274 0 (set (reg:SI 293 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 438)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))

;; _1104 = (int) _1102;

(insn 276 275 0 (set (reg:SI 295 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 1 [0x1])) [0 MEM[base: _514, offset: 1B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1105 = c32[_1104];

(insn 277 276 278 (set (reg/f:DI 439)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 278 277 279 (set (reg:DI 440)
        (sign_extend:DI (reg:SI 295 [ D.5782 ]))) -1
     (nil))

(insn 279 278 0 (set (reg:SI 296 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 440)
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1107 = m[_1104];

(insn 280 279 281 (set (reg:DI 441)
        (sign_extend:DI (reg:SI 295 [ D.5782 ]))) -1
     (nil))

(insn 281 280 0 (set (reg:SI 297 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 441)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1109 = c32[_1099];

(insn 282 281 283 (set (reg/f:DI 442)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 283 282 284 (set (reg:DI 443)
        (sign_extend:DI (reg:SI 292 [ D.5782 ]))) -1
     (nil))

(insn 284 283 0 (set (reg:SI 298 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 443)
                    (const_int 4 [0x4]))
                (reg/f:DI 442)) [2 c32 S4 A32])) -1
     (nil))

;; _1113 = (int) _1111;

(insn 285 284 0 (set (reg:SI 300 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 2 [0x2])) [0 MEM[base: _514, offset: 2B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1114 = m[_1113];

(insn 286 285 287 (set (reg:DI 444)
        (sign_extend:DI (reg:SI 300 [ D.5782 ]))) -1
     (nil))

(insn 287 286 0 (set (reg:SI 301 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 444)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))

;; _1118 = (int) _1116;

(insn 288 287 0 (set (reg:SI 303 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 3 [0x3])) [0 MEM[base: _514, offset: 3B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1119 = c32[_1118];

(insn 289 288 290 (set (reg/f:DI 445)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 290 289 291 (set (reg:DI 446)
        (sign_extend:DI (reg:SI 303 [ D.5782 ]))) -1
     (nil))

(insn 291 290 0 (set (reg:SI 304 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 446)
                    (const_int 4 [0x4]))
                (reg/f:DI 445)) [2 c32 S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1121 = m[_1118];

(insn 292 291 293 (set (reg:DI 447)
        (sign_extend:DI (reg:SI 303 [ D.5782 ]))) -1
     (nil))

(insn 293 292 0 (set (reg:SI 305 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 447)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1123 = c32[_1113];

(insn 294 293 295 (set (reg/f:DI 448)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 295 294 296 (set (reg:DI 449)
        (sign_extend:DI (reg:SI 300 [ D.5782 ]))) -1
     (nil))

(insn 296 295 0 (set (reg:SI 306 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 449)
                    (const_int 4 [0x4]))
                (reg/f:DI 448)) [2 c32 S4 A32])) -1
     (nil))

;; _1127 = (int) _1125;

(insn 297 296 0 (set (reg:SI 308 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 4 [0x4])) [0 MEM[base: _514, offset: 4B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1128 = m[_1127];

(insn 298 297 299 (set (reg:DI 450)
        (sign_extend:DI (reg:SI 308 [ D.5782 ]))) -1
     (nil))

(insn 299 298 0 (set (reg:SI 309 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 450)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))

;; _1132 = (int) _1130;

(insn 300 299 0 (set (reg:SI 311 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 5 [0x5])) [0 MEM[base: _514, offset: 5B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1133 = c32[_1132];

(insn 301 300 302 (set (reg/f:DI 451)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 302 301 303 (set (reg:DI 452)
        (sign_extend:DI (reg:SI 311 [ D.5782 ]))) -1
     (nil))

(insn 303 302 0 (set (reg:SI 312 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 452)
                    (const_int 4 [0x4]))
                (reg/f:DI 451)) [2 c32 S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1135 = m[_1132];

(insn 304 303 305 (set (reg:DI 453)
        (sign_extend:DI (reg:SI 311 [ D.5782 ]))) -1
     (nil))

(insn 305 304 0 (set (reg:SI 313 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 453)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1137 = c32[_1127];

(insn 306 305 307 (set (reg/f:DI 454)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 307 306 308 (set (reg:DI 455)
        (sign_extend:DI (reg:SI 308 [ D.5782 ]))) -1
     (nil))

(insn 308 307 0 (set (reg:SI 314 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 455)
                    (const_int 4 [0x4]))
                (reg/f:DI 454)) [2 c32 S4 A32])) -1
     (nil))

;; _1141 = (int) _1139;

(insn 309 308 0 (set (reg:SI 316 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 6 [0x6])) [0 MEM[base: _514, offset: 6B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1142 = m[_1141];

(insn 310 309 311 (set (reg:DI 456)
        (sign_extend:DI (reg:SI 316 [ D.5782 ]))) -1
     (nil))

(insn 311 310 0 (set (reg:SI 317 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 456)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))

;; _1146 = (int) _1144;

(insn 312 311 0 (set (reg:SI 319 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 7 [0x7])) [0 MEM[base: _514, offset: 7B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1147 = c32[_1146];

(insn 313 312 314 (set (reg/f:DI 457)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 314 313 315 (set (reg:DI 458)
        (sign_extend:DI (reg:SI 319 [ D.5782 ]))) -1
     (nil))

(insn 315 314 0 (set (reg:SI 320 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 458)
                    (const_int 4 [0x4]))
                (reg/f:DI 457)) [2 c32 S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1149 = m[_1146];

(insn 316 315 317 (set (reg:DI 459)
        (sign_extend:DI (reg:SI 319 [ D.5782 ]))) -1
     (nil))

(insn 317 316 0 (set (reg:SI 321 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 459)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1151 = c32[_1141];

(insn 318 317 319 (set (reg/f:DI 460)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 319 318 320 (set (reg:DI 461)
        (sign_extend:DI (reg:SI 316 [ D.5782 ]))) -1
     (nil))

(insn 320 319 0 (set (reg:SI 322 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 461)
                    (const_int 4 [0x4]))
                (reg/f:DI 460)) [2 c32 S4 A32])) -1
     (nil))

;; _1155 = (int) _1153;

(insn 321 320 0 (set (reg:SI 324 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 8 [0x8])) [0 MEM[base: _514, offset: 8B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1156 = m[_1155];

(insn 322 321 323 (set (reg:DI 462)
        (sign_extend:DI (reg:SI 324 [ D.5782 ]))) -1
     (nil))

(insn 323 322 0 (set (reg:SI 325 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 462)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))

;; _1160 = (int) _1158;

(insn 324 323 0 (set (reg:SI 327 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 9 [0x9])) [0 MEM[base: _514, offset: 9B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1161 = c32[_1160];

(insn 325 324 326 (set (reg/f:DI 463)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 326 325 327 (set (reg:DI 464)
        (sign_extend:DI (reg:SI 327 [ D.5782 ]))) -1
     (nil))

(insn 327 326 0 (set (reg:SI 328 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 464)
                    (const_int 4 [0x4]))
                (reg/f:DI 463)) [2 c32 S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1163 = m[_1160];

(insn 328 327 329 (set (reg:DI 465)
        (sign_extend:DI (reg:SI 327 [ D.5782 ]))) -1
     (nil))

(insn 329 328 0 (set (reg:SI 329 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 465)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1165 = c32[_1155];

(insn 330 329 331 (set (reg/f:DI 466)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 331 330 332 (set (reg:DI 467)
        (sign_extend:DI (reg:SI 324 [ D.5782 ]))) -1
     (nil))

(insn 332 331 0 (set (reg:SI 330 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 467)
                    (const_int 4 [0x4]))
                (reg/f:DI 466)) [2 c32 S4 A32])) -1
     (nil))

;; _1169 = (int) _1167;

(insn 333 332 0 (set (reg:SI 332 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 10 [0xa])) [0 MEM[base: _514, offset: 10B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1170 = m[_1169];

(insn 334 333 335 (set (reg:DI 468)
        (sign_extend:DI (reg:SI 332 [ D.5782 ]))) -1
     (nil))

(insn 335 334 0 (set (reg:SI 333 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 468)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))

;; _1174 = (int) _1172;

(insn 336 335 0 (set (reg:SI 335 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 11 [0xb])) [0 MEM[base: _514, offset: 11B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1175 = c32[_1174];

(insn 337 336 338 (set (reg/f:DI 469)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 338 337 339 (set (reg:DI 470)
        (sign_extend:DI (reg:SI 335 [ D.5782 ]))) -1
     (nil))

(insn 339 338 0 (set (reg:SI 336 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 470)
                    (const_int 4 [0x4]))
                (reg/f:DI 469)) [2 c32 S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1177 = m[_1174];

(insn 340 339 341 (set (reg:DI 471)
        (sign_extend:DI (reg:SI 335 [ D.5782 ]))) -1
     (nil))

(insn 341 340 0 (set (reg:SI 337 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 471)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1179 = c32[_1169];

(insn 342 341 343 (set (reg/f:DI 472)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 343 342 344 (set (reg:DI 473)
        (sign_extend:DI (reg:SI 332 [ D.5782 ]))) -1
     (nil))

(insn 344 343 0 (set (reg:SI 338 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 473)
                    (const_int 4 [0x4]))
                (reg/f:DI 472)) [2 c32 S4 A32])) -1
     (nil))

;; _1183 = (int) _1181;

(insn 345 344 0 (set (reg:SI 340 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 12 [0xc])) [0 MEM[base: _514, offset: 12B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1184 = m[_1183];

(insn 346 345 347 (set (reg:DI 474)
        (sign_extend:DI (reg:SI 340 [ D.5782 ]))) -1
     (nil))

(insn 347 346 0 (set (reg:SI 341 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 474)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))

;; _1188 = (int) _1186;

(insn 348 347 0 (set (reg:SI 343 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 13 [0xd])) [0 MEM[base: _514, offset: 13B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1189 = c32[_1188];

(insn 349 348 350 (set (reg/f:DI 475)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 350 349 351 (set (reg:DI 476)
        (sign_extend:DI (reg:SI 343 [ D.5782 ]))) -1
     (nil))

(insn 351 350 0 (set (reg:SI 344 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 476)
                    (const_int 4 [0x4]))
                (reg/f:DI 475)) [2 c32 S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1191 = m[_1188];

(insn 352 351 353 (set (reg:DI 477)
        (sign_extend:DI (reg:SI 343 [ D.5782 ]))) -1
     (nil))

(insn 353 352 0 (set (reg:SI 345 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 477)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1193 = c32[_1183];

(insn 354 353 355 (set (reg/f:DI 478)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 355 354 356 (set (reg:DI 479)
        (sign_extend:DI (reg:SI 340 [ D.5782 ]))) -1
     (nil))

(insn 356 355 0 (set (reg:SI 346 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 479)
                    (const_int 4 [0x4]))
                (reg/f:DI 478)) [2 c32 S4 A32])) -1
     (nil))

;; _1197 = (int) _1195;

(insn 357 356 0 (set (reg:SI 348 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 14 [0xe])) [0 MEM[base: _514, offset: 14B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1198 = m[_1197];

(insn 358 357 359 (set (reg:DI 480)
        (sign_extend:DI (reg:SI 348 [ D.5782 ]))) -1
     (nil))

(insn 359 358 0 (set (reg:SI 349 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 480)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))

;; _1202 = (int) _1200;

(insn 360 359 0 (set (reg:SI 351 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 15 [0xf])) [0 MEM[base: _514, offset: 15B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1203 = c32[_1202];

(insn 361 360 362 (set (reg/f:DI 481)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 362 361 363 (set (reg:DI 482)
        (sign_extend:DI (reg:SI 351 [ D.5782 ]))) -1
     (nil))

(insn 363 362 0 (set (reg:SI 352 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 482)
                    (const_int 4 [0x4]))
                (reg/f:DI 481)) [2 c32 S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1205 = m[_1202];

(insn 364 363 365 (set (reg:DI 483)
        (sign_extend:DI (reg:SI 351 [ D.5782 ]))) -1
     (nil))

(insn 365 364 0 (set (reg:SI 353 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 483)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1207 = c32[_1197];

(insn 366 365 367 (set (reg/f:DI 484)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))

(insn 367 366 368 (set (reg:DI 485)
        (sign_extend:DI (reg:SI 348 [ D.5782 ]))) -1
     (nil))

(insn 368 367 0 (set (reg:SI 354 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 485)
                    (const_int 4 [0x4]))
                (reg/f:DI 484)) [2 c32 S4 A32])) -1
     (nil))

;; Generating RTL for gimple basic block 7
Swap operands in stmt:
_42 = vect_cst_.52_11 ^ _41;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_494 = vect_cst_.51_10 ^ _535;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
vect__497.56_22 = vect_cst_.50_9 ^ _42;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
vect__497.56_23 = vect_cst_.49_8 ^ _494;
Cost left opnd=0, right opnd=2

;; 

(code_label 372 371 373 3 "" [0 uses])

(note 373 372 0 NOTE_INSN_BASIC_BLOCK)

;; vectp.60_24 = &state_246(D)->h32[0];

(insn 374 373 0 (parallel [
            (set (reg/f:DI 123 [ vectp.60 ])
                (plus:DI (reg/v/f:DI 356 [ state ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

;; MEM[(unsigned int *)state_246(D) + 16B] = vect__497.56_22;

(insn 375 374 376 (set (reg:V2SI 487)
        (vec_concat:V2SI (reg:SI 250 [ v$2 ])
            (reg:SI 270 [ v$3 ]))) -1
     (nil))

(insn 376 375 377 (set (reg:V2SI 488)
        (vec_concat:V2SI (reg:SI 217 [ v$0 ])
            (reg:SI 233 [ v$1 ]))) -1
     (nil))

(insn 377 376 378 (set (reg:V4SI 486 [ vect_cst_.55 ])
        (vec_concat:V4SI (reg:V2SI 488)
            (reg:V2SI 487))) -1
     (nil))

(insn 378 377 379 (set (reg:V2SI 490)
        (vec_concat:V2SI (reg:SI 220 [ v$10 ])
            (reg:SI 206 [ v$11 ]))) -1
     (nil))

(insn 379 378 380 (set (reg:V2SI 491)
        (vec_concat:V2SI (reg:SI 254 [ v$8 ])
            (reg:SI 274 [ v$9 ]))) -1
     (nil))

(insn 380 379 381 (set (reg:V4SI 489 [ vect_cst_.58 ])
        (vec_concat:V4SI (reg:V2SI 491)
            (reg:V2SI 490))) -1
     (nil))

(insn 381 380 382 (set (reg:V4SI 492 [ D.5780 ])
        (xor:V4SI (reg:V4SI 486 [ vect_cst_.55 ])
            (reg:V4SI 489 [ vect_cst_.58 ]))) blake_ref.c:93 -1
     (nil))

(insn 382 381 383 (set (reg:V2SI 494)
        (vec_concat:V2SI (reg:SI 138 [ D.5781 ])
            (reg:SI 139 [ D.5781 ]))) -1
     (nil))

(insn 383 382 384 (set (reg:V2SI 495)
        (vec_concat:V2SI (reg:SI 136 [ D.5781 ])
            (reg:SI 137 [ D.5781 ]))) -1
     (nil))

(insn 384 383 385 (set (reg:V4SI 493 [ vect_cst_.52 ])
        (vec_concat:V4SI (reg:V2SI 495)
            (reg:V2SI 494))) -1
     (nil))

(insn 385 384 386 (set (reg:V4SI 496 [ D.5780 ])
        (xor:V4SI (reg:V4SI 492 [ D.5780 ])
            (reg:V4SI 493 [ vect_cst_.52 ]))) blake_ref.c:93 -1
     (nil))

(insn 386 385 387 (set (reg:V2SI 498)
        (vec_concat:V2SI (reg:SI 130 [ v$2 ])
            (reg:SI 131 [ v$3 ]))) -1
     (nil))

(insn 387 386 388 (set (reg:V2SI 499)
        (vec_concat:V2SI (reg:SI 128 [ v$0 ])
            (reg:SI 129 [ v$1 ]))) -1
     (nil))

(insn 388 387 389 (set (reg:V4SI 497 [ vect_cst_.50 ])
        (vec_concat:V4SI (reg:V2SI 499)
            (reg:V2SI 498))) -1
     (nil))

(insn 389 388 390 (set (reg:V4SI 500 [ vect__497.56 ])
        (xor:V4SI (reg:V4SI 496 [ D.5780 ])
            (reg:V4SI 497 [ vect_cst_.50 ]))) blake_ref.c:93 -1
     (nil))

(insn 390 389 0 (set (mem:V16QI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 16 [0x10])) [2 MEM[(unsigned int *)state_246(D) + 16B]+0 S16 A32])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 500 [ vect__497.56 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:93 -1
     (nil))

;; vectp.60_26 = &MEM[(void *)state_246(D) + 32B];

(insn 391 390 0 (parallel [
            (set (reg/f:DI 124 [ vectp.60 ])
                (plus:DI (reg/v/f:DI 356 [ state ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:93 -1
     (nil))

;; MEM[(unsigned int *)state_246(D) + 32B] = vect__497.56_23;

(insn 392 391 393 (set (reg:V2SI 502)
        (vec_concat:V2SI (reg:SI 273 [ v$14 ])
            (reg:SI 219 [ v$15 ]))) -1
     (nil))

(insn 393 392 394 (set (reg:V2SI 503)
        (vec_concat:V2SI (reg:SI 235 [ v$12 ])
            (reg:SI 252 [ v$13 ]))) -1
     (nil))

(insn 394 393 395 (set (reg:V4SI 501 [ vect_cst_.54 ])
        (vec_concat:V4SI (reg:V2SI 503)
            (reg:V2SI 502))) -1
     (nil))

(insn 395 394 396 (set (reg:V2SI 505)
        (vec_concat:V2SI (reg:SI 238 [ v$6 ])
            (reg:SI 256 [ v$7 ]))) -1
     (nil))

(insn 396 395 397 (set (reg:V2SI 506)
        (vec_concat:V2SI (reg:SI 276 [ v$4 ])
            (reg:SI 222 [ v$5 ]))) -1
     (nil))

(insn 397 396 398 (set (reg:V4SI 504 [ vect_cst_.57 ])
        (vec_concat:V4SI (reg:V2SI 506)
            (reg:V2SI 505))) -1
     (nil))

(insn 398 397 399 (set (reg:V4SI 507 [ D.5780 ])
        (xor:V4SI (reg:V4SI 501 [ vect_cst_.54 ])
            (reg:V4SI 504 [ vect_cst_.57 ]))) blake_ref.c:93 -1
     (nil))

(insn 399 398 400 (set (reg:V2SI 509)
        (vec_concat:V2SI (reg:SI 138 [ D.5781 ])
            (reg:SI 139 [ D.5781 ]))) -1
     (nil))

(insn 400 399 401 (set (reg:V2SI 510)
        (vec_concat:V2SI (reg:SI 136 [ D.5781 ])
            (reg:SI 137 [ D.5781 ]))) -1
     (nil))

(insn 401 400 402 (set (reg:V4SI 508 [ vect_cst_.51 ])
        (vec_concat:V4SI (reg:V2SI 510)
            (reg:V2SI 509))) -1
     (nil))

(insn 402 401 403 (set (reg:V4SI 511 [ D.5780 ])
        (xor:V4SI (reg:V4SI 507 [ D.5780 ])
            (reg:V4SI 508 [ vect_cst_.51 ]))) blake_ref.c:93 -1
     (nil))

(insn 403 402 404 (set (reg:V2SI 513)
        (vec_concat:V2SI (reg:SI 134 [ v$6 ])
            (reg:SI 135 [ v$7 ]))) -1
     (nil))

(insn 404 403 405 (set (reg:V2SI 514)
        (vec_concat:V2SI (reg:SI 132 [ v$4 ])
            (reg:SI 133 [ v$5 ]))) -1
     (nil))

(insn 405 404 406 (set (reg:V4SI 512 [ vect_cst_.49 ])
        (vec_concat:V4SI (reg:V2SI 514)
            (reg:V2SI 513))) -1
     (nil))

(insn 406 405 407 (set (reg:V4SI 515 [ vect__497.56 ])
        (xor:V4SI (reg:V4SI 511 [ D.5780 ])
            (reg:V4SI 512 [ vect_cst_.49 ]))) blake_ref.c:93 -1
     (nil))

(insn 407 406 0 (set (mem:V16QI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 32 [0x20])) [2 MEM[(unsigned int *)state_246(D) + 32B]+0 S16 A32])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 515 [ vect__497.56 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:93 -1
     (nil))

;; m ={v} {CLOBBER};

(nil)

;; return 0;

(insn 408 407 409 (set (reg:SI 355 [ <retval> ])
        (const_int 0 [0])) blake_ref.c:102 -1
     (nil))

(jump_insn 409 408 410 (set (pc)
        (label_ref 0)) blake_ref.c:102 -1
     (nil))

(barrier 410 409 0)
Edge 2->4 redirected to 10


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 409.
Merging block 10 into block 9...
Merged blocks 9 and 10.
Merged 9 and 10 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 27 0 60 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 667, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 60 27 28 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 28 60 29 2 (set (reg/v/f:DI 356 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:9 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 81 virtual-incoming-args) [4 state+0 S8 A64])
        (nil)))
(insn 29 28 30 2 (set (reg/v/f:DI 357 [ datablock ])
        (reg:DI 1 dx [ datablock ])) blake_ref.c:9 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 8 [0x8])) [4 datablock+0 S8 A64])
        (nil)))
(note 30 29 62 2 NOTE_INSN_FUNCTION_BEG)
(insn 62 30 63 2 (set (reg:SI 358)
        (mem:SI (reg/v/f:DI 357 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8])) -1
     (nil))
(insn 63 62 64 2 (set (reg:SI 293 [ D.5786 ])
        (bswap:SI (reg:SI 358))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/v/f:DI 357 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8]))
        (nil)))
(insn 64 63 65 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [2 m+0 S4 A128])
        (reg:SI 293 [ D.5786 ])) blake_ref.c:32 -1
     (nil))
(insn 65 64 66 2 (set (reg:SI 359)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8])) -1
     (nil))
(insn 66 65 67 2 (set (reg:SI 297 [ D.5786 ])
        (bswap:SI (reg:SI 359))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8]))
        (nil)))
(insn 67 66 68 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -60 [0xffffffffffffffc4])) [2 m+4 S4 A32])
        (reg:SI 297 [ D.5786 ])) blake_ref.c:33 -1
     (nil))
(insn 68 67 69 2 (set (reg:SI 360)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8])) -1
     (nil))
(insn 69 68 70 2 (set (reg:SI 301 [ D.5786 ])
        (bswap:SI (reg:SI 360))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8]))
        (nil)))
(insn 70 69 71 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [2 m+8 S4 A64])
        (reg:SI 301 [ D.5786 ])) blake_ref.c:34 -1
     (nil))
(insn 71 70 72 2 (set (reg:SI 361)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8])) -1
     (nil))
(insn 72 71 73 2 (set (reg:SI 305 [ D.5786 ])
        (bswap:SI (reg:SI 361))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8]))
        (nil)))
(insn 73 72 74 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -52 [0xffffffffffffffcc])) [2 m+12 S4 A32])
        (reg:SI 305 [ D.5786 ])) blake_ref.c:35 -1
     (nil))
(insn 74 73 75 2 (set (reg:SI 362)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8])) -1
     (nil))
(insn 75 74 76 2 (set (reg:SI 309 [ D.5786 ])
        (bswap:SI (reg:SI 362))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8]))
        (nil)))
(insn 76 75 77 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [2 m+16 S4 A128])
        (reg:SI 309 [ D.5786 ])) blake_ref.c:36 -1
     (nil))
(insn 77 76 78 2 (set (reg:SI 363)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8])) -1
     (nil))
(insn 78 77 79 2 (set (reg:SI 313 [ D.5786 ])
        (bswap:SI (reg:SI 363))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8]))
        (nil)))
(insn 79 78 80 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -44 [0xffffffffffffffd4])) [2 m+20 S4 A32])
        (reg:SI 313 [ D.5786 ])) blake_ref.c:37 -1
     (nil))
(insn 80 79 81 2 (set (reg:SI 364)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8])) -1
     (nil))
(insn 81 80 82 2 (set (reg:SI 317 [ D.5786 ])
        (bswap:SI (reg:SI 364))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8]))
        (nil)))
(insn 82 81 83 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 m+24 S4 A64])
        (reg:SI 317 [ D.5786 ])) blake_ref.c:38 -1
     (nil))
(insn 83 82 84 2 (set (reg:SI 365)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8])) -1
     (nil))
(insn 84 83 85 2 (set (reg:SI 321 [ D.5786 ])
        (bswap:SI (reg:SI 365))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8]))
        (nil)))
(insn 85 84 86 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 m+28 S4 A32])
        (reg:SI 321 [ D.5786 ])) blake_ref.c:39 -1
     (nil))
(insn 86 85 87 2 (set (reg:SI 366)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8])) -1
     (nil))
(insn 87 86 88 2 (set (reg:SI 325 [ D.5786 ])
        (bswap:SI (reg:SI 366))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8]))
        (nil)))
(insn 88 87 89 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [2 m+32 S4 A128])
        (reg:SI 325 [ D.5786 ])) blake_ref.c:40 -1
     (nil))
(insn 89 88 90 2 (set (reg:SI 367)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8])) -1
     (nil))
(insn 90 89 91 2 (set (reg:SI 329 [ D.5786 ])
        (bswap:SI (reg:SI 367))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8]))
        (nil)))
(insn 91 90 92 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [2 m+36 S4 A32])
        (reg:SI 329 [ D.5786 ])) blake_ref.c:41 -1
     (nil))
(insn 92 91 93 2 (set (reg:SI 368)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8])) -1
     (nil))
(insn 93 92 94 2 (set (reg:SI 333 [ D.5786 ])
        (bswap:SI (reg:SI 368))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8]))
        (nil)))
(insn 94 93 95 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 m+40 S4 A64])
        (reg:SI 333 [ D.5786 ])) blake_ref.c:42 -1
     (nil))
(insn 95 94 96 2 (set (reg:SI 369)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8])) -1
     (nil))
(insn 96 95 97 2 (set (reg:SI 337 [ D.5786 ])
        (bswap:SI (reg:SI 369))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8]))
        (nil)))
(insn 97 96 98 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [2 m+44 S4 A32])
        (reg:SI 337 [ D.5786 ])) blake_ref.c:43 -1
     (nil))
(insn 98 97 99 2 (set (reg:SI 370)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8])) -1
     (nil))
(insn 99 98 100 2 (set (reg:SI 341 [ D.5786 ])
        (bswap:SI (reg:SI 370))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8]))
        (nil)))
(insn 100 99 101 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 m+48 S4 A128])
        (reg:SI 341 [ D.5786 ])) blake_ref.c:44 -1
     (nil))
(insn 101 100 102 2 (set (reg:SI 371)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8])) -1
     (nil))
(insn 102 101 103 2 (set (reg:SI 345 [ D.5786 ])
        (bswap:SI (reg:SI 371))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8]))
        (nil)))
(insn 103 102 104 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 m+52 S4 A32])
        (reg:SI 345 [ D.5786 ])) blake_ref.c:45 -1
     (nil))
(insn 104 103 105 2 (set (reg:SI 372)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8])) -1
     (nil))
(insn 105 104 106 2 (set (reg:SI 349 [ D.5786 ])
        (bswap:SI (reg:SI 372))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8]))
        (nil)))
(insn 106 105 107 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 m+56 S4 A64])
        (reg:SI 349 [ D.5786 ])) blake_ref.c:46 -1
     (nil))
(insn 107 106 108 2 (set (reg:SI 373)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 60 [0x3c])) [0 MEM[(const BitSequence *)datablock_5(D) + 60B]+0 S4 A8])) -1
     (nil))
(insn 108 107 109 2 (set (reg:SI 353 [ D.5786 ])
        (bswap:SI (reg:SI 373))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 60 [0x3c])) [0 MEM[(const BitSequence *)datablock_5(D) + 60B]+0 S4 A8]))
        (nil)))
(insn 109 108 110 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 m+60 S4 A32])
        (reg:SI 353 [ D.5786 ])) blake_ref.c:47 -1
     (nil))
(insn 110 109 111 2 (set (reg:SI 128 [ v$0 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 16 [0x10])) [2 state_246(D)->h32+0 S4 A64])) blake_ref.c:50 -1
     (nil))
(insn 111 110 112 2 (set (reg:SI 129 [ v$1 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 20 [0x14])) [2 state_246(D)->h32+4 S4 A32])) blake_ref.c:51 -1
     (nil))
(insn 112 111 113 2 (set (reg:SI 130 [ v$2 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 24 [0x18])) [2 state_246(D)->h32+8 S4 A64])) blake_ref.c:52 -1
     (nil))
(insn 113 112 114 2 (set (reg:SI 131 [ v$3 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 28 [0x1c])) [2 state_246(D)->h32+12 S4 A32])) blake_ref.c:53 -1
     (nil))
(insn 114 113 115 2 (set (reg:SI 132 [ v$4 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 32 [0x20])) [2 state_246(D)->h32+16 S4 A64])) blake_ref.c:54 -1
     (nil))
(insn 115 114 116 2 (set (reg:SI 133 [ v$5 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 36 [0x24])) [2 state_246(D)->h32+20 S4 A32])) blake_ref.c:55 -1
     (nil))
(insn 116 115 117 2 (set (reg:SI 134 [ v$6 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 40 [0x28])) [2 state_246(D)->h32+24 S4 A64])) blake_ref.c:56 -1
     (nil))
(insn 117 116 118 2 (set (reg:SI 135 [ v$7 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 44 [0x2c])) [2 state_246(D)->h32+28 S4 A32])) blake_ref.c:57 -1
     (nil))
(insn 118 117 119 2 (set (reg:SI 136 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 120 [0x78])) [2 state_246(D)->salt32+0 S4 A64])) blake_ref.c:58 -1
     (nil))
(insn 119 118 120 2 (parallel [
            (set (reg:SI 254 [ v$8 ])
                (xor:SI (reg:SI 136 [ D.5781 ])
                    (const_int 608135816 [0x243f6a88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:58 -1
     (nil))
(insn 120 119 121 2 (set (reg:SI 137 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 124 [0x7c])) [2 state_246(D)->salt32+4 S4 A32])) blake_ref.c:59 -1
     (nil))
(insn 121 120 122 2 (parallel [
            (set (reg:SI 274 [ v$9 ])
                (xor:SI (reg:SI 137 [ D.5781 ])
                    (const_int -2052912941 [0xffffffff85a308d3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:59 -1
     (nil))
(insn 122 121 123 2 (set (reg:SI 138 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 128 [0x80])) [2 state_246(D)->salt32+8 S4 A64])) blake_ref.c:60 -1
     (nil))
(insn 123 122 124 2 (parallel [
            (set (reg:SI 220 [ v$10 ])
                (xor:SI (reg:SI 138 [ D.5781 ])
                    (const_int 320440878 [0x13198a2e])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:60 -1
     (nil))
(insn 124 123 125 2 (set (reg:SI 139 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 132 [0x84])) [2 state_246(D)->salt32+12 S4 A32])) blake_ref.c:61 -1
     (nil))
(insn 125 124 126 2 (parallel [
            (set (reg:SI 206 [ v$11 ])
                (xor:SI (reg:SI 139 [ D.5781 ])
                    (const_int 57701188 [0x3707344])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:61 -1
     (nil))
(insn 126 125 127 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                    (const_int 12 [0xc])) [2 state_246(D)->nullt+0 S4 A32])
            (const_int 0 [0]))) blake_ref.c:62 -1
     (nil))
(jump_insn 127 126 128 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 418)
            (pc))) blake_ref.c:62 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 418)
;;  succ:       5 [50.0%] 
;;              4 [50.0%]  (FALLTHRU)

;; basic block 4, loop depth 0, count 0, freq 334, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 128 127 129 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 4 (set (reg:SI 141 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 48 [0x30])) [2 state_246(D)->t32+0 S4 A64])) blake_ref.c:69 -1
     (nil))
(insn 130 129 131 4 (parallel [
            (set (reg:SI 235 [ v$12 ])
                (xor:SI (reg:SI 141 [ D.5781 ])
                    (const_int -1542899678 [0xffffffffa4093822])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:69 -1
     (nil))
(insn 131 130 132 4 (parallel [
            (set (reg:SI 252 [ v$13 ])
                (xor:SI (reg:SI 141 [ D.5781 ])
                    (const_int 698298832 [0x299f31d0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:70 -1
     (nil))
(insn 132 131 133 4 (set (reg:SI 142 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 52 [0x34])) [2 state_246(D)->t32+4 S4 A32])) blake_ref.c:71 -1
     (nil))
(insn 133 132 134 4 (parallel [
            (set (reg:SI 273 [ v$14 ])
                (xor:SI (reg:SI 142 [ D.5781 ])
                    (const_int 137296536 [0x82efa98])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:71 -1
     (nil))
(insn 134 133 415 4 (parallel [
            (set (reg:SI 219 [ v$15 ])
                (xor:SI (reg:SI 142 [ D.5781 ])
                    (const_int -330404727 [0xffffffffec4e6c89])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:72 -1
     (nil))
(jump_insn 415 134 416 4 (set (pc)
        (label_ref 135)) -1
     (nil)
 -> 135)
;;  succ:       6 [100.0%] 

(barrier 416 415 418)
;; basic block 5, loop depth 0, count 0, freq 334, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
(code_label 418 416 417 5 5 "" [1 uses])
(note 417 418 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 417 32 5 (set (reg:SI 219 [ v$15 ])
        (const_int -330404727 [0xffffffffec4e6c89])) blake_ref.c:66 -1
     (nil))
(insn 32 31 33 5 (set (reg:SI 273 [ v$14 ])
        (const_int 137296536 [0x82efa98])) blake_ref.c:65 -1
     (nil))
(insn 33 32 34 5 (set (reg:SI 252 [ v$13 ])
        (const_int 698298832 [0x299f31d0])) blake_ref.c:64 -1
     (nil))
(insn 34 33 135 5 (set (reg:SI 235 [ v$12 ])
        (const_int -1542899678 [0xffffffffa4093822])) blake_ref.c:63 -1
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 670, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
(code_label 135 34 136 6 2 "" [1 uses])
(note 136 135 137 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 137 136 35 6 (set (reg:DI 281 [ ivtmp.77 ])
        (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)) -1
     (nil))
(insn 35 137 36 6 (set (reg:SI 217 [ v$0 ])
        (reg:SI 128 [ v$0 ])) blake_ref.c:63 -1
     (nil))
(insn 36 35 37 6 (set (reg:SI 233 [ v$1 ])
        (reg:SI 129 [ v$1 ])) blake_ref.c:63 -1
     (nil))
(insn 37 36 38 6 (set (reg:SI 250 [ v$2 ])
        (reg:SI 130 [ v$2 ])) blake_ref.c:63 -1
     (nil))
(insn 38 37 39 6 (set (reg:SI 270 [ v$3 ])
        (reg:SI 131 [ v$3 ])) blake_ref.c:63 -1
     (nil))
(insn 39 38 40 6 (set (reg:SI 276 [ v$4 ])
        (reg:SI 132 [ v$4 ])) blake_ref.c:63 -1
     (nil))
(insn 40 39 41 6 (set (reg:SI 222 [ v$5 ])
        (reg:SI 133 [ v$5 ])) blake_ref.c:63 -1
     (nil))
(insn 41 40 42 6 (set (reg:SI 238 [ v$6 ])
        (reg:SI 134 [ v$6 ])) blake_ref.c:63 -1
     (nil))
(insn 42 41 43 6 (set (reg:SI 256 [ v$7 ])
        (reg:SI 135 [ v$7 ])) blake_ref.c:63 -1
     (nil))
(insn 43 42 44 6 (set (reg:SI 113 [ D.5779 ])
        (const_int 14 [0xe])) blake_ref.c:63 -1
     (nil))
(insn 44 43 45 6 (set (reg:SI 354 [ D.5787 ])
        (const_int 1065670069 [0x3f84d5b5])) blake_ref.c:63 -1
     (nil))
(insn 45 44 46 6 (set (reg:SI 352 [ D.5787 ])
        (const_int -1253635817 [0xffffffffb5470917])) blake_ref.c:63 -1
     (nil))
(insn 46 45 47 6 (set (reg:SI 346 [ D.5787 ])
        (const_int -1062458953 [0xffffffffc0ac29b7])) blake_ref.c:63 -1
     (nil))
(insn 47 46 48 6 (set (reg:SI 344 [ D.5787 ])
        (const_int -914599715 [0xffffffffc97c50dd])) blake_ref.c:63 -1
     (nil))
(insn 48 47 49 6 (set (reg:SI 338 [ D.5787 ])
        (const_int -1101764913 [0xffffffffbe5466cf])) blake_ref.c:63 -1
     (nil))
(insn 49 48 50 6 (set (reg:SI 336 [ D.5787 ])
        (const_int 887688300 [0x34e90c6c])) blake_ref.c:63 -1
     (nil))
(insn 50 49 51 6 (set (reg:SI 330 [ D.5787 ])
        (const_int 1160258022 [0x452821e6])) blake_ref.c:63 -1
     (nil))
(insn 51 50 52 6 (set (reg:SI 328 [ D.5787 ])
        (const_int 953160567 [0x38d01377])) blake_ref.c:63 -1
     (nil))
(insn 52 51 53 6 (set (reg:SI 322 [ D.5787 ])
        (const_int 137296536 [0x82efa98])) blake_ref.c:63 -1
     (nil))
(insn 53 52 54 6 (set (reg:SI 320 [ D.5787 ])
        (const_int -330404727 [0xffffffffec4e6c89])) blake_ref.c:63 -1
     (nil))
(insn 54 53 55 6 (set (reg:SI 314 [ D.5787 ])
        (const_int -1542899678 [0xffffffffa4093822])) blake_ref.c:63 -1
     (nil))
(insn 55 54 56 6 (set (reg:SI 312 [ D.5787 ])
        (const_int 698298832 [0x299f31d0])) blake_ref.c:63 -1
     (nil))
(insn 56 55 57 6 (set (reg:SI 306 [ D.5787 ])
        (const_int 320440878 [0x13198a2e])) blake_ref.c:63 -1
     (nil))
(insn 57 56 58 6 (set (reg:SI 304 [ D.5787 ])
        (const_int 57701188 [0x3707344])) blake_ref.c:63 -1
     (nil))
(insn 58 57 59 6 (set (reg:SI 298 [ D.5787 ])
        (const_int 608135816 [0x243f6a88])) blake_ref.c:63 -1
     (nil))
(insn 59 58 369 6 (set (reg:SI 296 [ D.5787 ])
        (const_int -2052912941 [0xffffffff85a308d3])) blake_ref.c:63 -1
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 1, count 0, freq 9333, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [100.0%]  (DFS_BACK)
;;              6 [100.0%]  (FALLTHRU)
(code_label 369 59 138 7 4 "" [1 uses])
(note 138 369 139 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 7 (parallel [
            (set (reg:SI 374 [ D.5781 ])
                (xor:SI (reg:SI 293 [ D.5786 ])
                    (reg:SI 296 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 140 139 141 7 (parallel [
            (set (reg:SI 375 [ D.5781 ])
                (plus:SI (reg:SI 374 [ D.5781 ])
                    (reg:SI 276 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 141 140 142 7 (parallel [
            (set (reg:SI 144 [ D.5781 ])
                (plus:SI (reg:SI 375 [ D.5781 ])
                    (reg:SI 217 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 142 141 143 7 (parallel [
            (set (reg:SI 376 [ D.5781 ])
                (xor:SI (reg:SI 144 [ D.5781 ])
                    (reg:SI 235 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 143 142 144 7 (parallel [
            (set (reg:SI 146 [ D.5781 ])
                (rotate:SI (reg:SI 376 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 144 143 145 7 (parallel [
            (set (reg:SI 147 [ D.5781 ])
                (plus:SI (reg:SI 146 [ D.5781 ])
                    (reg:SI 254 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 145 144 146 7 (parallel [
            (set (reg:SI 377 [ D.5781 ])
                (xor:SI (reg:SI 147 [ D.5781 ])
                    (reg:SI 276 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 146 145 147 7 (parallel [
            (set (reg:SI 149 [ D.5781 ])
                (rotatert:SI (reg:SI 377 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 147 146 148 7 (parallel [
            (set (reg:SI 378 [ D.5781 ])
                (xor:SI (reg:SI 297 [ D.5786 ])
                    (reg:SI 298 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 148 147 149 7 (parallel [
            (set (reg:SI 379 [ D.5781 ])
                (plus:SI (reg:SI 378 [ D.5781 ])
                    (reg:SI 144 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 149 148 150 7 (parallel [
            (set (reg:SI 152 [ D.5781 ])
                (plus:SI (reg:SI 379 [ D.5781 ])
                    (reg:SI 149 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 150 149 151 7 (parallel [
            (set (reg:SI 380 [ D.5781 ])
                (xor:SI (reg:SI 146 [ D.5781 ])
                    (reg:SI 152 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 151 150 152 7 (parallel [
            (set (reg:SI 154 [ D.5781 ])
                (rotatert:SI (reg:SI 380 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 152 151 153 7 (parallel [
            (set (reg:SI 155 [ D.5781 ])
                (plus:SI (reg:SI 147 [ D.5781 ])
                    (reg:SI 154 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 153 152 154 7 (parallel [
            (set (reg:SI 381 [ D.5781 ])
                (xor:SI (reg:SI 149 [ D.5781 ])
                    (reg:SI 155 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 154 153 155 7 (parallel [
            (set (reg:SI 157 [ D.5781 ])
                (rotatert:SI (reg:SI 381 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 -1
     (nil))
(insn 155 154 156 7 (parallel [
            (set (reg:SI 382 [ D.5781 ])
                (xor:SI (reg:SI 301 [ D.5786 ])
                    (reg:SI 304 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 156 155 157 7 (parallel [
            (set (reg:SI 383 [ D.5781 ])
                (plus:SI (reg:SI 382 [ D.5781 ])
                    (reg:SI 222 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 157 156 158 7 (parallel [
            (set (reg:SI 160 [ D.5781 ])
                (plus:SI (reg:SI 383 [ D.5781 ])
                    (reg:SI 233 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 158 157 159 7 (parallel [
            (set (reg:SI 384 [ D.5781 ])
                (xor:SI (reg:SI 160 [ D.5781 ])
                    (reg:SI 252 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 159 158 160 7 (parallel [
            (set (reg:SI 162 [ D.5781 ])
                (rotate:SI (reg:SI 384 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 160 159 161 7 (parallel [
            (set (reg:SI 163 [ D.5781 ])
                (plus:SI (reg:SI 162 [ D.5781 ])
                    (reg:SI 274 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 161 160 162 7 (parallel [
            (set (reg:SI 385 [ D.5781 ])
                (xor:SI (reg:SI 163 [ D.5781 ])
                    (reg:SI 222 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 162 161 163 7 (parallel [
            (set (reg:SI 165 [ D.5781 ])
                (rotatert:SI (reg:SI 385 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 163 162 164 7 (parallel [
            (set (reg:SI 386 [ D.5781 ])
                (xor:SI (reg:SI 305 [ D.5786 ])
                    (reg:SI 306 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 164 163 165 7 (parallel [
            (set (reg:SI 387 [ D.5781 ])
                (plus:SI (reg:SI 386 [ D.5781 ])
                    (reg:SI 160 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 165 164 166 7 (parallel [
            (set (reg:SI 168 [ D.5781 ])
                (plus:SI (reg:SI 387 [ D.5781 ])
                    (reg:SI 165 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 166 165 167 7 (parallel [
            (set (reg:SI 388 [ D.5781 ])
                (xor:SI (reg:SI 162 [ D.5781 ])
                    (reg:SI 168 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 167 166 168 7 (parallel [
            (set (reg:SI 170 [ D.5781 ])
                (rotatert:SI (reg:SI 388 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 168 167 169 7 (parallel [
            (set (reg:SI 171 [ D.5781 ])
                (plus:SI (reg:SI 163 [ D.5781 ])
                    (reg:SI 170 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 169 168 170 7 (parallel [
            (set (reg:SI 389 [ D.5781 ])
                (xor:SI (reg:SI 165 [ D.5781 ])
                    (reg:SI 171 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 170 169 171 7 (parallel [
            (set (reg:SI 173 [ D.5781 ])
                (rotatert:SI (reg:SI 389 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 -1
     (nil))
(insn 171 170 172 7 (parallel [
            (set (reg:SI 390 [ D.5781 ])
                (xor:SI (reg:SI 309 [ D.5786 ])
                    (reg:SI 312 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 172 171 173 7 (parallel [
            (set (reg:SI 391 [ D.5781 ])
                (plus:SI (reg:SI 390 [ D.5781 ])
                    (reg:SI 238 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 173 172 174 7 (parallel [
            (set (reg:SI 176 [ D.5781 ])
                (plus:SI (reg:SI 391 [ D.5781 ])
                    (reg:SI 250 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 174 173 175 7 (parallel [
            (set (reg:SI 392 [ D.5781 ])
                (xor:SI (reg:SI 176 [ D.5781 ])
                    (reg:SI 273 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 175 174 176 7 (parallel [
            (set (reg:SI 178 [ D.5781 ])
                (rotate:SI (reg:SI 392 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 176 175 177 7 (parallel [
            (set (reg:SI 179 [ D.5781 ])
                (plus:SI (reg:SI 178 [ D.5781 ])
                    (reg:SI 220 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 177 176 178 7 (parallel [
            (set (reg:SI 393 [ D.5781 ])
                (xor:SI (reg:SI 179 [ D.5781 ])
                    (reg:SI 238 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 178 177 179 7 (parallel [
            (set (reg:SI 181 [ D.5781 ])
                (rotatert:SI (reg:SI 393 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 179 178 180 7 (parallel [
            (set (reg:SI 394 [ D.5781 ])
                (xor:SI (reg:SI 313 [ D.5786 ])
                    (reg:SI 314 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 180 179 181 7 (parallel [
            (set (reg:SI 395 [ D.5781 ])
                (plus:SI (reg:SI 394 [ D.5781 ])
                    (reg:SI 176 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 181 180 182 7 (parallel [
            (set (reg:SI 184 [ D.5781 ])
                (plus:SI (reg:SI 395 [ D.5781 ])
                    (reg:SI 181 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 182 181 183 7 (parallel [
            (set (reg:SI 396 [ D.5781 ])
                (xor:SI (reg:SI 178 [ D.5781 ])
                    (reg:SI 184 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 183 182 184 7 (parallel [
            (set (reg:SI 186 [ D.5781 ])
                (rotatert:SI (reg:SI 396 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 184 183 185 7 (parallel [
            (set (reg:SI 187 [ D.5781 ])
                (plus:SI (reg:SI 179 [ D.5781 ])
                    (reg:SI 186 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 185 184 186 7 (parallel [
            (set (reg:SI 397 [ D.5781 ])
                (xor:SI (reg:SI 181 [ D.5781 ])
                    (reg:SI 187 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 186 185 187 7 (parallel [
            (set (reg:SI 189 [ D.5781 ])
                (rotatert:SI (reg:SI 397 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 -1
     (nil))
(insn 187 186 188 7 (parallel [
            (set (reg:SI 398 [ D.5781 ])
                (xor:SI (reg:SI 317 [ D.5786 ])
                    (reg:SI 320 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 188 187 189 7 (parallel [
            (set (reg:SI 399 [ D.5781 ])
                (plus:SI (reg:SI 398 [ D.5781 ])
                    (reg:SI 256 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 189 188 190 7 (parallel [
            (set (reg:SI 192 [ D.5781 ])
                (plus:SI (reg:SI 399 [ D.5781 ])
                    (reg:SI 270 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 190 189 191 7 (parallel [
            (set (reg:SI 400 [ D.5781 ])
                (xor:SI (reg:SI 192 [ D.5781 ])
                    (reg:SI 219 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 191 190 192 7 (parallel [
            (set (reg:SI 194 [ D.5781 ])
                (rotate:SI (reg:SI 400 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 192 191 193 7 (parallel [
            (set (reg:SI 195 [ D.5781 ])
                (plus:SI (reg:SI 194 [ D.5781 ])
                    (reg:SI 206 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 193 192 194 7 (parallel [
            (set (reg:SI 401 [ D.5781 ])
                (xor:SI (reg:SI 195 [ D.5781 ])
                    (reg:SI 256 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 194 193 195 7 (parallel [
            (set (reg:SI 197 [ D.5781 ])
                (rotatert:SI (reg:SI 401 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 195 194 196 7 (parallel [
            (set (reg:SI 402 [ D.5781 ])
                (xor:SI (reg:SI 321 [ D.5786 ])
                    (reg:SI 322 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 196 195 197 7 (parallel [
            (set (reg:SI 403 [ D.5781 ])
                (plus:SI (reg:SI 402 [ D.5781 ])
                    (reg:SI 192 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 197 196 198 7 (parallel [
            (set (reg:SI 200 [ D.5781 ])
                (plus:SI (reg:SI 403 [ D.5781 ])
                    (reg:SI 197 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 198 197 199 7 (parallel [
            (set (reg:SI 404 [ D.5781 ])
                (xor:SI (reg:SI 194 [ D.5781 ])
                    (reg:SI 200 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 199 198 200 7 (parallel [
            (set (reg:SI 202 [ D.5781 ])
                (rotatert:SI (reg:SI 404 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 200 199 201 7 (parallel [
            (set (reg:SI 203 [ D.5781 ])
                (plus:SI (reg:SI 195 [ D.5781 ])
                    (reg:SI 202 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 201 200 202 7 (parallel [
            (set (reg:SI 405 [ D.5781 ])
                (xor:SI (reg:SI 197 [ D.5781 ])
                    (reg:SI 203 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 202 201 203 7 (parallel [
            (set (reg:SI 205 [ D.5781 ])
                (rotatert:SI (reg:SI 405 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 -1
     (nil))
(insn 203 202 204 7 (parallel [
            (set (reg:SI 406 [ D.5781 ])
                (xor:SI (reg:SI 325 [ D.5786 ])
                    (reg:SI 328 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 204 203 205 7 (parallel [
            (set (reg:SI 407 [ D.5781 ])
                (plus:SI (reg:SI 406 [ D.5781 ])
                    (reg:SI 152 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 205 204 206 7 (parallel [
            (set (reg:SI 209 [ D.5781 ])
                (plus:SI (reg:SI 407 [ D.5781 ])
                    (reg:SI 173 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 206 205 207 7 (parallel [
            (set (reg:SI 408 [ D.5781 ])
                (xor:SI (reg:SI 202 [ D.5781 ])
                    (reg:SI 209 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 207 206 208 7 (parallel [
            (set (reg:SI 211 [ D.5781 ])
                (rotate:SI (reg:SI 408 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 208 207 209 7 (parallel [
            (set (reg:SI 212 [ D.5781 ])
                (plus:SI (reg:SI 187 [ D.5781 ])
                    (reg:SI 211 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 209 208 210 7 (parallel [
            (set (reg:SI 409 [ D.5781 ])
                (xor:SI (reg:SI 173 [ D.5781 ])
                    (reg:SI 212 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 210 209 211 7 (parallel [
            (set (reg:SI 214 [ D.5781 ])
                (rotatert:SI (reg:SI 409 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 211 210 212 7 (parallel [
            (set (reg:SI 410 [ D.5781 ])
                (xor:SI (reg:SI 329 [ D.5786 ])
                    (reg:SI 330 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 212 211 213 7 (parallel [
            (set (reg:SI 411 [ D.5781 ])
                (plus:SI (reg:SI 410 [ D.5781 ])
                    (reg:SI 209 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 213 212 214 7 (parallel [
            (set (reg:SI 217 [ v$0 ])
                (plus:SI (reg:SI 411 [ D.5781 ])
                    (reg:SI 214 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 214 213 215 7 (parallel [
            (set (reg:SI 412 [ D.5781 ])
                (xor:SI (reg:SI 211 [ D.5781 ])
                    (reg:SI 217 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 215 214 216 7 (parallel [
            (set (reg:SI 219 [ v$15 ])
                (rotatert:SI (reg:SI 412 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 216 215 217 7 (parallel [
            (set (reg:SI 220 [ v$10 ])
                (plus:SI (reg:SI 212 [ D.5781 ])
                    (reg:SI 219 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 217 216 218 7 (parallel [
            (set (reg:SI 413 [ D.5781 ])
                (xor:SI (reg:SI 214 [ D.5781 ])
                    (reg:SI 220 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 218 217 219 7 (parallel [
            (set (reg:SI 222 [ v$5 ])
                (rotatert:SI (reg:SI 413 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 -1
     (nil))
(insn 219 218 220 7 (parallel [
            (set (reg:SI 414 [ D.5781 ])
                (xor:SI (reg:SI 333 [ D.5786 ])
                    (reg:SI 336 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 220 219 221 7 (parallel [
            (set (reg:SI 415 [ D.5781 ])
                (plus:SI (reg:SI 414 [ D.5781 ])
                    (reg:SI 168 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 221 220 222 7 (parallel [
            (set (reg:SI 225 [ D.5781 ])
                (plus:SI (reg:SI 415 [ D.5781 ])
                    (reg:SI 189 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 222 221 223 7 (parallel [
            (set (reg:SI 416 [ D.5781 ])
                (xor:SI (reg:SI 154 [ D.5781 ])
                    (reg:SI 225 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 223 222 224 7 (parallel [
            (set (reg:SI 227 [ D.5781 ])
                (rotate:SI (reg:SI 416 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 224 223 225 7 (parallel [
            (set (reg:SI 228 [ D.5781 ])
                (plus:SI (reg:SI 203 [ D.5781 ])
                    (reg:SI 227 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 225 224 226 7 (parallel [
            (set (reg:SI 417 [ D.5781 ])
                (xor:SI (reg:SI 189 [ D.5781 ])
                    (reg:SI 228 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 226 225 227 7 (parallel [
            (set (reg:SI 230 [ D.5781 ])
                (rotatert:SI (reg:SI 417 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 227 226 228 7 (parallel [
            (set (reg:SI 418 [ D.5781 ])
                (xor:SI (reg:SI 337 [ D.5786 ])
                    (reg:SI 338 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 228 227 229 7 (parallel [
            (set (reg:SI 419 [ D.5781 ])
                (plus:SI (reg:SI 418 [ D.5781 ])
                    (reg:SI 225 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 229 228 230 7 (parallel [
            (set (reg:SI 233 [ v$1 ])
                (plus:SI (reg:SI 419 [ D.5781 ])
                    (reg:SI 230 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 230 229 231 7 (parallel [
            (set (reg:SI 420 [ D.5781 ])
                (xor:SI (reg:SI 227 [ D.5781 ])
                    (reg:SI 233 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 231 230 232 7 (parallel [
            (set (reg:SI 235 [ v$12 ])
                (rotatert:SI (reg:SI 420 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 232 231 233 7 (parallel [
            (set (reg:SI 206 [ v$11 ])
                (plus:SI (reg:SI 228 [ D.5781 ])
                    (reg:SI 235 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 233 232 234 7 (parallel [
            (set (reg:SI 421 [ D.5781 ])
                (xor:SI (reg:SI 230 [ D.5781 ])
                    (reg:SI 206 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 234 233 235 7 (parallel [
            (set (reg:SI 238 [ v$6 ])
                (rotatert:SI (reg:SI 421 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 -1
     (nil))
(insn 235 234 236 7 (parallel [
            (set (reg:SI 422 [ D.5781 ])
                (xor:SI (reg:SI 341 [ D.5786 ])
                    (reg:SI 344 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 236 235 237 7 (parallel [
            (set (reg:SI 423 [ D.5781 ])
                (plus:SI (reg:SI 422 [ D.5781 ])
                    (reg:SI 184 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 237 236 238 7 (parallel [
            (set (reg:SI 241 [ D.5781 ])
                (plus:SI (reg:SI 423 [ D.5781 ])
                    (reg:SI 205 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 238 237 239 7 (parallel [
            (set (reg:SI 424 [ D.5781 ])
                (xor:SI (reg:SI 170 [ D.5781 ])
                    (reg:SI 241 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 239 238 240 7 (parallel [
            (set (reg:SI 243 [ D.5781 ])
                (rotate:SI (reg:SI 424 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 240 239 241 7 (parallel [
            (set (reg:SI 244 [ D.5781 ])
                (plus:SI (reg:SI 155 [ D.5781 ])
                    (reg:SI 243 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 241 240 242 7 (parallel [
            (set (reg:SI 425 [ D.5781 ])
                (xor:SI (reg:SI 205 [ D.5781 ])
                    (reg:SI 244 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 242 241 243 7 (parallel [
            (set (reg:SI 247 [ D.5781 ])
                (rotatert:SI (reg:SI 425 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 243 242 244 7 (parallel [
            (set (reg:SI 426 [ D.5781 ])
                (xor:SI (reg:SI 345 [ D.5786 ])
                    (reg:SI 346 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 244 243 245 7 (parallel [
            (set (reg:SI 427 [ D.5781 ])
                (plus:SI (reg:SI 426 [ D.5781 ])
                    (reg:SI 241 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 245 244 246 7 (parallel [
            (set (reg:SI 250 [ v$2 ])
                (plus:SI (reg:SI 427 [ D.5781 ])
                    (reg:SI 247 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 246 245 247 7 (parallel [
            (set (reg:SI 428 [ D.5781 ])
                (xor:SI (reg:SI 243 [ D.5781 ])
                    (reg:SI 250 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 247 246 248 7 (parallel [
            (set (reg:SI 252 [ v$13 ])
                (rotatert:SI (reg:SI 428 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 248 247 249 7 (parallel [
            (set (reg:SI 254 [ v$8 ])
                (plus:SI (reg:SI 244 [ D.5781 ])
                    (reg:SI 252 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 249 248 250 7 (parallel [
            (set (reg:SI 429 [ D.5781 ])
                (xor:SI (reg:SI 247 [ D.5781 ])
                    (reg:SI 254 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 250 249 251 7 (parallel [
            (set (reg:SI 256 [ v$7 ])
                (rotatert:SI (reg:SI 429 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 -1
     (nil))
(insn 251 250 252 7 (parallel [
            (set (reg:SI 430 [ D.5781 ])
                (xor:SI (reg:SI 349 [ D.5786 ])
                    (reg:SI 352 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 252 251 253 7 (parallel [
            (set (reg:SI 431 [ D.5781 ])
                (plus:SI (reg:SI 430 [ D.5781 ])
                    (reg:SI 200 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 253 252 254 7 (parallel [
            (set (reg:SI 260 [ D.5781 ])
                (plus:SI (reg:SI 431 [ D.5781 ])
                    (reg:SI 157 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 254 253 255 7 (parallel [
            (set (reg:SI 432 [ D.5781 ])
                (xor:SI (reg:SI 186 [ D.5781 ])
                    (reg:SI 260 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 255 254 256 7 (parallel [
            (set (reg:SI 262 [ D.5781 ])
                (rotate:SI (reg:SI 432 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 256 255 257 7 (parallel [
            (set (reg:SI 264 [ D.5781 ])
                (plus:SI (reg:SI 171 [ D.5781 ])
                    (reg:SI 262 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 257 256 258 7 (parallel [
            (set (reg:SI 433 [ D.5781 ])
                (xor:SI (reg:SI 157 [ D.5781 ])
                    (reg:SI 264 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 258 257 259 7 (parallel [
            (set (reg:SI 266 [ D.5781 ])
                (rotatert:SI (reg:SI 433 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 259 258 260 7 (parallel [
            (set (reg:SI 434 [ D.5781 ])
                (xor:SI (reg:SI 353 [ D.5786 ])
                    (reg:SI 354 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 260 259 261 7 (parallel [
            (set (reg:SI 435 [ D.5781 ])
                (plus:SI (reg:SI 434 [ D.5781 ])
                    (reg:SI 260 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 261 260 262 7 (parallel [
            (set (reg:SI 270 [ v$3 ])
                (plus:SI (reg:SI 435 [ D.5781 ])
                    (reg:SI 266 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 262 261 263 7 (parallel [
            (set (reg:SI 436 [ D.5781 ])
                (xor:SI (reg:SI 262 [ D.5781 ])
                    (reg:SI 270 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 263 262 264 7 (parallel [
            (set (reg:SI 273 [ v$14 ])
                (rotatert:SI (reg:SI 436 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 264 263 265 7 (parallel [
            (set (reg:SI 274 [ v$9 ])
                (plus:SI (reg:SI 264 [ D.5781 ])
                    (reg:SI 273 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 265 264 266 7 (parallel [
            (set (reg:SI 437 [ D.5781 ])
                (xor:SI (reg:SI 266 [ D.5781 ])
                    (reg:SI 274 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 266 265 267 7 (parallel [
            (set (reg:SI 276 [ v$4 ])
                (rotatert:SI (reg:SI 437 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 -1
     (nil))
(insn 267 266 268 7 (parallel [
            (set (reg:SI 113 [ D.5779 ])
                (plus:SI (reg:SI 113 [ D.5779 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 268 267 269 7 (parallel [
            (set (reg:DI 281 [ ivtmp.77 ])
                (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 269 268 270 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 113 [ D.5779 ])
            (const_int 0 [0]))) blake_ref.c:76 -1
     (nil))
(jump_insn 270 269 271 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 372)
            (pc))) blake_ref.c:76 -1
     (int_list:REG_BR_PROB 667 (nil))
 -> 372)
;;  succ:       8 [93.3%]  (FALLTHRU)
;;              9 [6.7%] 

;; basic block 8, loop depth 1, count 0, freq 8710, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [93.3%]  (FALLTHRU)
(note 271 270 272 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 8 (set (reg/f:DI 280 [ D.5784 ])
        (reg:DI 281 [ ivtmp.77 ])) -1
     (nil))
(insn 273 272 274 8 (set (reg:SI 292 [ D.5782 ])
        (zero_extend:SI (mem:QI (reg/f:DI 280 [ D.5784 ]) [0 MEM[base: _514, offset: 0B]+0 S1 A8]))) -1
     (nil))
(insn 274 273 275 8 (set (reg:DI 438)
        (sign_extend:DI (reg:SI 292 [ D.5782 ]))) -1
     (nil))
(insn 275 274 276 8 (set (reg:SI 293 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 438)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 276 275 277 8 (set (reg:SI 295 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 1 [0x1])) [0 MEM[base: _514, offset: 1B]+0 S1 A8]))) -1
     (nil))
(insn 277 276 278 8 (set (reg/f:DI 439)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 278 277 279 8 (set (reg:DI 440)
        (sign_extend:DI (reg:SI 295 [ D.5782 ]))) -1
     (nil))
(insn 279 278 280 8 (set (reg:SI 296 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 440)
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) -1
     (nil))
(insn 280 279 281 8 (set (reg:DI 441)
        (sign_extend:DI (reg:SI 295 [ D.5782 ]))) -1
     (nil))
(insn 281 280 282 8 (set (reg:SI 297 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 441)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 282 281 283 8 (set (reg/f:DI 442)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 283 282 284 8 (set (reg:DI 443)
        (sign_extend:DI (reg:SI 292 [ D.5782 ]))) -1
     (nil))
(insn 284 283 285 8 (set (reg:SI 298 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 443)
                    (const_int 4 [0x4]))
                (reg/f:DI 442)) [2 c32 S4 A32])) -1
     (nil))
(insn 285 284 286 8 (set (reg:SI 300 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 2 [0x2])) [0 MEM[base: _514, offset: 2B]+0 S1 A8]))) -1
     (nil))
(insn 286 285 287 8 (set (reg:DI 444)
        (sign_extend:DI (reg:SI 300 [ D.5782 ]))) -1
     (nil))
(insn 287 286 288 8 (set (reg:SI 301 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 444)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 288 287 289 8 (set (reg:SI 303 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 3 [0x3])) [0 MEM[base: _514, offset: 3B]+0 S1 A8]))) -1
     (nil))
(insn 289 288 290 8 (set (reg/f:DI 445)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 290 289 291 8 (set (reg:DI 446)
        (sign_extend:DI (reg:SI 303 [ D.5782 ]))) -1
     (nil))
(insn 291 290 292 8 (set (reg:SI 304 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 446)
                    (const_int 4 [0x4]))
                (reg/f:DI 445)) [2 c32 S4 A32])) -1
     (nil))
(insn 292 291 293 8 (set (reg:DI 447)
        (sign_extend:DI (reg:SI 303 [ D.5782 ]))) -1
     (nil))
(insn 293 292 294 8 (set (reg:SI 305 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 447)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 294 293 295 8 (set (reg/f:DI 448)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 295 294 296 8 (set (reg:DI 449)
        (sign_extend:DI (reg:SI 300 [ D.5782 ]))) -1
     (nil))
(insn 296 295 297 8 (set (reg:SI 306 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 449)
                    (const_int 4 [0x4]))
                (reg/f:DI 448)) [2 c32 S4 A32])) -1
     (nil))
(insn 297 296 298 8 (set (reg:SI 308 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 4 [0x4])) [0 MEM[base: _514, offset: 4B]+0 S1 A8]))) -1
     (nil))
(insn 298 297 299 8 (set (reg:DI 450)
        (sign_extend:DI (reg:SI 308 [ D.5782 ]))) -1
     (nil))
(insn 299 298 300 8 (set (reg:SI 309 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 450)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 300 299 301 8 (set (reg:SI 311 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 5 [0x5])) [0 MEM[base: _514, offset: 5B]+0 S1 A8]))) -1
     (nil))
(insn 301 300 302 8 (set (reg/f:DI 451)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 302 301 303 8 (set (reg:DI 452)
        (sign_extend:DI (reg:SI 311 [ D.5782 ]))) -1
     (nil))
(insn 303 302 304 8 (set (reg:SI 312 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 452)
                    (const_int 4 [0x4]))
                (reg/f:DI 451)) [2 c32 S4 A32])) -1
     (nil))
(insn 304 303 305 8 (set (reg:DI 453)
        (sign_extend:DI (reg:SI 311 [ D.5782 ]))) -1
     (nil))
(insn 305 304 306 8 (set (reg:SI 313 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 453)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 306 305 307 8 (set (reg/f:DI 454)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 307 306 308 8 (set (reg:DI 455)
        (sign_extend:DI (reg:SI 308 [ D.5782 ]))) -1
     (nil))
(insn 308 307 309 8 (set (reg:SI 314 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 455)
                    (const_int 4 [0x4]))
                (reg/f:DI 454)) [2 c32 S4 A32])) -1
     (nil))
(insn 309 308 310 8 (set (reg:SI 316 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 6 [0x6])) [0 MEM[base: _514, offset: 6B]+0 S1 A8]))) -1
     (nil))
(insn 310 309 311 8 (set (reg:DI 456)
        (sign_extend:DI (reg:SI 316 [ D.5782 ]))) -1
     (nil))
(insn 311 310 312 8 (set (reg:SI 317 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 456)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 312 311 313 8 (set (reg:SI 319 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 7 [0x7])) [0 MEM[base: _514, offset: 7B]+0 S1 A8]))) -1
     (nil))
(insn 313 312 314 8 (set (reg/f:DI 457)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 314 313 315 8 (set (reg:DI 458)
        (sign_extend:DI (reg:SI 319 [ D.5782 ]))) -1
     (nil))
(insn 315 314 316 8 (set (reg:SI 320 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 458)
                    (const_int 4 [0x4]))
                (reg/f:DI 457)) [2 c32 S4 A32])) -1
     (nil))
(insn 316 315 317 8 (set (reg:DI 459)
        (sign_extend:DI (reg:SI 319 [ D.5782 ]))) -1
     (nil))
(insn 317 316 318 8 (set (reg:SI 321 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 459)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 318 317 319 8 (set (reg/f:DI 460)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 319 318 320 8 (set (reg:DI 461)
        (sign_extend:DI (reg:SI 316 [ D.5782 ]))) -1
     (nil))
(insn 320 319 321 8 (set (reg:SI 322 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 461)
                    (const_int 4 [0x4]))
                (reg/f:DI 460)) [2 c32 S4 A32])) -1
     (nil))
(insn 321 320 322 8 (set (reg:SI 324 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 8 [0x8])) [0 MEM[base: _514, offset: 8B]+0 S1 A8]))) -1
     (nil))
(insn 322 321 323 8 (set (reg:DI 462)
        (sign_extend:DI (reg:SI 324 [ D.5782 ]))) -1
     (nil))
(insn 323 322 324 8 (set (reg:SI 325 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 462)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 324 323 325 8 (set (reg:SI 327 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 9 [0x9])) [0 MEM[base: _514, offset: 9B]+0 S1 A8]))) -1
     (nil))
(insn 325 324 326 8 (set (reg/f:DI 463)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 326 325 327 8 (set (reg:DI 464)
        (sign_extend:DI (reg:SI 327 [ D.5782 ]))) -1
     (nil))
(insn 327 326 328 8 (set (reg:SI 328 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 464)
                    (const_int 4 [0x4]))
                (reg/f:DI 463)) [2 c32 S4 A32])) -1
     (nil))
(insn 328 327 329 8 (set (reg:DI 465)
        (sign_extend:DI (reg:SI 327 [ D.5782 ]))) -1
     (nil))
(insn 329 328 330 8 (set (reg:SI 329 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 465)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 330 329 331 8 (set (reg/f:DI 466)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 331 330 332 8 (set (reg:DI 467)
        (sign_extend:DI (reg:SI 324 [ D.5782 ]))) -1
     (nil))
(insn 332 331 333 8 (set (reg:SI 330 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 467)
                    (const_int 4 [0x4]))
                (reg/f:DI 466)) [2 c32 S4 A32])) -1
     (nil))
(insn 333 332 334 8 (set (reg:SI 332 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 10 [0xa])) [0 MEM[base: _514, offset: 10B]+0 S1 A8]))) -1
     (nil))
(insn 334 333 335 8 (set (reg:DI 468)
        (sign_extend:DI (reg:SI 332 [ D.5782 ]))) -1
     (nil))
(insn 335 334 336 8 (set (reg:SI 333 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 468)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 336 335 337 8 (set (reg:SI 335 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 11 [0xb])) [0 MEM[base: _514, offset: 11B]+0 S1 A8]))) -1
     (nil))
(insn 337 336 338 8 (set (reg/f:DI 469)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 338 337 339 8 (set (reg:DI 470)
        (sign_extend:DI (reg:SI 335 [ D.5782 ]))) -1
     (nil))
(insn 339 338 340 8 (set (reg:SI 336 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 470)
                    (const_int 4 [0x4]))
                (reg/f:DI 469)) [2 c32 S4 A32])) -1
     (nil))
(insn 340 339 341 8 (set (reg:DI 471)
        (sign_extend:DI (reg:SI 335 [ D.5782 ]))) -1
     (nil))
(insn 341 340 342 8 (set (reg:SI 337 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 471)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 342 341 343 8 (set (reg/f:DI 472)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 343 342 344 8 (set (reg:DI 473)
        (sign_extend:DI (reg:SI 332 [ D.5782 ]))) -1
     (nil))
(insn 344 343 345 8 (set (reg:SI 338 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 473)
                    (const_int 4 [0x4]))
                (reg/f:DI 472)) [2 c32 S4 A32])) -1
     (nil))
(insn 345 344 346 8 (set (reg:SI 340 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 12 [0xc])) [0 MEM[base: _514, offset: 12B]+0 S1 A8]))) -1
     (nil))
(insn 346 345 347 8 (set (reg:DI 474)
        (sign_extend:DI (reg:SI 340 [ D.5782 ]))) -1
     (nil))
(insn 347 346 348 8 (set (reg:SI 341 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 474)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 348 347 349 8 (set (reg:SI 343 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 13 [0xd])) [0 MEM[base: _514, offset: 13B]+0 S1 A8]))) -1
     (nil))
(insn 349 348 350 8 (set (reg/f:DI 475)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 350 349 351 8 (set (reg:DI 476)
        (sign_extend:DI (reg:SI 343 [ D.5782 ]))) -1
     (nil))
(insn 351 350 352 8 (set (reg:SI 344 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 476)
                    (const_int 4 [0x4]))
                (reg/f:DI 475)) [2 c32 S4 A32])) -1
     (nil))
(insn 352 351 353 8 (set (reg:DI 477)
        (sign_extend:DI (reg:SI 343 [ D.5782 ]))) -1
     (nil))
(insn 353 352 354 8 (set (reg:SI 345 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 477)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 354 353 355 8 (set (reg/f:DI 478)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 355 354 356 8 (set (reg:DI 479)
        (sign_extend:DI (reg:SI 340 [ D.5782 ]))) -1
     (nil))
(insn 356 355 357 8 (set (reg:SI 346 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 479)
                    (const_int 4 [0x4]))
                (reg/f:DI 478)) [2 c32 S4 A32])) -1
     (nil))
(insn 357 356 358 8 (set (reg:SI 348 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 14 [0xe])) [0 MEM[base: _514, offset: 14B]+0 S1 A8]))) -1
     (nil))
(insn 358 357 359 8 (set (reg:DI 480)
        (sign_extend:DI (reg:SI 348 [ D.5782 ]))) -1
     (nil))
(insn 359 358 360 8 (set (reg:SI 349 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 480)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 360 359 361 8 (set (reg:SI 351 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 15 [0xf])) [0 MEM[base: _514, offset: 15B]+0 S1 A8]))) -1
     (nil))
(insn 361 360 362 8 (set (reg/f:DI 481)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 362 361 363 8 (set (reg:DI 482)
        (sign_extend:DI (reg:SI 351 [ D.5782 ]))) -1
     (nil))
(insn 363 362 364 8 (set (reg:SI 352 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 482)
                    (const_int 4 [0x4]))
                (reg/f:DI 481)) [2 c32 S4 A32])) -1
     (nil))
(insn 364 363 365 8 (set (reg:DI 483)
        (sign_extend:DI (reg:SI 351 [ D.5782 ]))) -1
     (nil))
(insn 365 364 366 8 (set (reg:SI 353 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 483)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) -1
     (nil))
(insn 366 365 367 8 (set (reg/f:DI 484)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) -1
     (nil))
(insn 367 366 368 8 (set (reg:DI 485)
        (sign_extend:DI (reg:SI 348 [ D.5782 ]))) -1
     (nil))
(insn 368 367 370 8 (set (reg:SI 354 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 485)
                    (const_int 4 [0x4]))
                (reg/f:DI 484)) [2 c32 S4 A32])) -1
     (nil))
(jump_insn 370 368 371 8 (set (pc)
        (label_ref 369)) -1
     (nil)
 -> 369)
;;  succ:       7 [100.0%]  (DFS_BACK)

(barrier 371 370 372)
;; basic block 9, loop depth 0, count 0, freq 667, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [6.7%] 
(code_label 372 371 373 9 3 "" [1 uses])
(note 373 372 374 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 374 373 375 9 (parallel [
            (set (reg/f:DI 123 [ vectp.60 ])
                (plus:DI (reg/v/f:DI 356 [ state ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 375 374 376 9 (set (reg:V2SI 487)
        (vec_concat:V2SI (reg:SI 250 [ v$2 ])
            (reg:SI 270 [ v$3 ]))) -1
     (nil))
(insn 376 375 377 9 (set (reg:V2SI 488)
        (vec_concat:V2SI (reg:SI 217 [ v$0 ])
            (reg:SI 233 [ v$1 ]))) -1
     (nil))
(insn 377 376 378 9 (set (reg:V4SI 486 [ vect_cst_.55 ])
        (vec_concat:V4SI (reg:V2SI 488)
            (reg:V2SI 487))) -1
     (nil))
(insn 378 377 379 9 (set (reg:V2SI 490)
        (vec_concat:V2SI (reg:SI 220 [ v$10 ])
            (reg:SI 206 [ v$11 ]))) -1
     (nil))
(insn 379 378 380 9 (set (reg:V2SI 491)
        (vec_concat:V2SI (reg:SI 254 [ v$8 ])
            (reg:SI 274 [ v$9 ]))) -1
     (nil))
(insn 380 379 381 9 (set (reg:V4SI 489 [ vect_cst_.58 ])
        (vec_concat:V4SI (reg:V2SI 491)
            (reg:V2SI 490))) -1
     (nil))
(insn 381 380 382 9 (set (reg:V4SI 492 [ D.5780 ])
        (xor:V4SI (reg:V4SI 486 [ vect_cst_.55 ])
            (reg:V4SI 489 [ vect_cst_.58 ]))) blake_ref.c:93 -1
     (nil))
(insn 382 381 383 9 (set (reg:V2SI 494)
        (vec_concat:V2SI (reg:SI 138 [ D.5781 ])
            (reg:SI 139 [ D.5781 ]))) -1
     (nil))
(insn 383 382 384 9 (set (reg:V2SI 495)
        (vec_concat:V2SI (reg:SI 136 [ D.5781 ])
            (reg:SI 137 [ D.5781 ]))) -1
     (nil))
(insn 384 383 385 9 (set (reg:V4SI 493 [ vect_cst_.52 ])
        (vec_concat:V4SI (reg:V2SI 495)
            (reg:V2SI 494))) -1
     (nil))
(insn 385 384 386 9 (set (reg:V4SI 496 [ D.5780 ])
        (xor:V4SI (reg:V4SI 492 [ D.5780 ])
            (reg:V4SI 493 [ vect_cst_.52 ]))) blake_ref.c:93 -1
     (nil))
(insn 386 385 387 9 (set (reg:V2SI 498)
        (vec_concat:V2SI (reg:SI 130 [ v$2 ])
            (reg:SI 131 [ v$3 ]))) -1
     (nil))
(insn 387 386 388 9 (set (reg:V2SI 499)
        (vec_concat:V2SI (reg:SI 128 [ v$0 ])
            (reg:SI 129 [ v$1 ]))) -1
     (nil))
(insn 388 387 389 9 (set (reg:V4SI 497 [ vect_cst_.50 ])
        (vec_concat:V4SI (reg:V2SI 499)
            (reg:V2SI 498))) -1
     (nil))
(insn 389 388 390 9 (set (reg:V4SI 500 [ vect__497.56 ])
        (xor:V4SI (reg:V4SI 496 [ D.5780 ])
            (reg:V4SI 497 [ vect_cst_.50 ]))) blake_ref.c:93 -1
     (nil))
(insn 390 389 391 9 (set (mem:V16QI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 16 [0x10])) [2 MEM[(unsigned int *)state_246(D) + 16B]+0 S16 A32])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 500 [ vect__497.56 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:93 -1
     (nil))
(insn 391 390 392 9 (parallel [
            (set (reg/f:DI 124 [ vectp.60 ])
                (plus:DI (reg/v/f:DI 356 [ state ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:93 -1
     (nil))
(insn 392 391 393 9 (set (reg:V2SI 502)
        (vec_concat:V2SI (reg:SI 273 [ v$14 ])
            (reg:SI 219 [ v$15 ]))) -1
     (nil))
(insn 393 392 394 9 (set (reg:V2SI 503)
        (vec_concat:V2SI (reg:SI 235 [ v$12 ])
            (reg:SI 252 [ v$13 ]))) -1
     (nil))
(insn 394 393 395 9 (set (reg:V4SI 501 [ vect_cst_.54 ])
        (vec_concat:V4SI (reg:V2SI 503)
            (reg:V2SI 502))) -1
     (nil))
(insn 395 394 396 9 (set (reg:V2SI 505)
        (vec_concat:V2SI (reg:SI 238 [ v$6 ])
            (reg:SI 256 [ v$7 ]))) -1
     (nil))
(insn 396 395 397 9 (set (reg:V2SI 506)
        (vec_concat:V2SI (reg:SI 276 [ v$4 ])
            (reg:SI 222 [ v$5 ]))) -1
     (nil))
(insn 397 396 398 9 (set (reg:V4SI 504 [ vect_cst_.57 ])
        (vec_concat:V4SI (reg:V2SI 506)
            (reg:V2SI 505))) -1
     (nil))
(insn 398 397 399 9 (set (reg:V4SI 507 [ D.5780 ])
        (xor:V4SI (reg:V4SI 501 [ vect_cst_.54 ])
            (reg:V4SI 504 [ vect_cst_.57 ]))) blake_ref.c:93 -1
     (nil))
(insn 399 398 400 9 (set (reg:V2SI 509)
        (vec_concat:V2SI (reg:SI 138 [ D.5781 ])
            (reg:SI 139 [ D.5781 ]))) -1
     (nil))
(insn 400 399 401 9 (set (reg:V2SI 510)
        (vec_concat:V2SI (reg:SI 136 [ D.5781 ])
            (reg:SI 137 [ D.5781 ]))) -1
     (nil))
(insn 401 400 402 9 (set (reg:V4SI 508 [ vect_cst_.51 ])
        (vec_concat:V4SI (reg:V2SI 510)
            (reg:V2SI 509))) -1
     (nil))
(insn 402 401 403 9 (set (reg:V4SI 511 [ D.5780 ])
        (xor:V4SI (reg:V4SI 507 [ D.5780 ])
            (reg:V4SI 508 [ vect_cst_.51 ]))) blake_ref.c:93 -1
     (nil))
(insn 403 402 404 9 (set (reg:V2SI 513)
        (vec_concat:V2SI (reg:SI 134 [ v$6 ])
            (reg:SI 135 [ v$7 ]))) -1
     (nil))
(insn 404 403 405 9 (set (reg:V2SI 514)
        (vec_concat:V2SI (reg:SI 132 [ v$4 ])
            (reg:SI 133 [ v$5 ]))) -1
     (nil))
(insn 405 404 406 9 (set (reg:V4SI 512 [ vect_cst_.49 ])
        (vec_concat:V4SI (reg:V2SI 514)
            (reg:V2SI 513))) -1
     (nil))
(insn 406 405 407 9 (set (reg:V4SI 515 [ vect__497.56 ])
        (xor:V4SI (reg:V4SI 511 [ D.5780 ])
            (reg:V4SI 512 [ vect_cst_.49 ]))) blake_ref.c:93 -1
     (nil))
(insn 407 406 408 9 (set (mem:V16QI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 32 [0x20])) [2 MEM[(unsigned int *)state_246(D) + 32B]+0 S16 A32])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 515 [ vect__497.56 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:93 -1
     (nil))
(insn 408 407 412 9 (set (reg:SI 355 [ <retval> ])
        (const_int 0 [0])) blake_ref.c:102 -1
     (nil))
(insn 412 408 413 9 (set (reg/i:SI 0 ax)
        (reg:SI 355 [ <retval> ])) blake_ref.c:103 -1
     (nil))
(insn 413 412 0 9 (use (reg/i:SI 0 ax)) blake_ref.c:103 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function compress64 (compress64, funcdef_no=12, decl_uid=3221, cgraph_uid=12, symbol_order=20)

compress64 (struct hashState * state, const BitSequence * datablock)
{
  unsigned long ivtmp.149;
  vector(2) long long unsigned int * vectp.132;
  vector(2) long long unsigned int vect_cst_.130;
  vector(2) long long unsigned int vect_cst_.129;
  vector(2) long long unsigned int vect_cst_.128;
  vector(2) long long unsigned int vect_cst_.127;
  vector(2) long long unsigned int vect__785.126;
  vector(2) long long unsigned int vect_cst_.125;
  vector(2) long long unsigned int vect_cst_.124;
  vector(2) long long unsigned int vect_cst_.123;
  vector(2) long long unsigned int vect_cst_.122;
  vector(2) long long unsigned int vect_cst_.120;
  vector(2) long long unsigned int vect_cst_.119;
  vector(2) long long unsigned int vect_cst_.118;
  vector(2) long long unsigned int vect_cst_.117;
  vector(2) long long unsigned int vect_cst_.116;
  vector(2) long long unsigned int vect_cst_.115;
  vector(2) long long unsigned int vect_cst_.114;
  vector(2) long long unsigned int vect_cst_.113;
  long long unsigned int v$15;
  long long unsigned int v$14;
  long long unsigned int v$13;
  long long unsigned int v$12;
  long long unsigned int v$11;
  long long unsigned int v$10;
  long long unsigned int v$9;
  long long unsigned int v$8;
  long long unsigned int v$7;
  long long unsigned int v$6;
  long long unsigned int v$5;
  long long unsigned int v$4;
  long long unsigned int v$3;
  long long unsigned int v$2;
  long long unsigned int v$1;
  long long unsigned int v$0;
  u64 m[16];
  long unsigned int load_dst_2;
  unsigned int ivtmp_19;
  long long unsigned int _37;
  vector(2) long long unsigned int _53;
  vector(2) long long unsigned int _54;
  vector(2) long long unsigned int _55;
  vector(2) long long unsigned int _68;
  long long unsigned int _70;
  long long unsigned int _103;
  long long unsigned int _136;
  long long unsigned int _169;
  long long unsigned int _202;
  long long unsigned int _235;
  long long unsigned int _268;
  long long unsigned int _301;
  long long unsigned int _334;
  long long unsigned int _367;
  long long unsigned int _400;
  long long unsigned int _433;
  long long unsigned int _466;
  long long unsigned int _499;
  long long unsigned int _532;
  long long unsigned int _543;
  long long unsigned int _545;
  long long unsigned int _547;
  long long unsigned int _549;
  int _551;
  long long unsigned int _552;
  long long unsigned int _555;
  long long unsigned int _565;
  long long unsigned int _566;
  long long unsigned int _567;
  long long unsigned int _568;
  long long unsigned int _569;
  long long unsigned int _570;
  long long unsigned int _571;
  long long unsigned int _572;
  long long unsigned int _575;
  long long unsigned int _576;
  long long unsigned int _577;
  long long unsigned int _578;
  long long unsigned int _579;
  long long unsigned int _580;
  long long unsigned int _581;
  long long unsigned int _582;
  long long unsigned int _589;
  long long unsigned int _590;
  long long unsigned int _591;
  long long unsigned int _592;
  long long unsigned int _593;
  long long unsigned int _594;
  long long unsigned int _595;
  long long unsigned int _596;
  long long unsigned int _599;
  long long unsigned int _600;
  long long unsigned int _601;
  long long unsigned int _602;
  long long unsigned int _603;
  long long unsigned int _604;
  long long unsigned int _605;
  long long unsigned int _606;
  long long unsigned int _613;
  long long unsigned int _614;
  long long unsigned int _615;
  long long unsigned int _616;
  long long unsigned int _617;
  long long unsigned int _618;
  long long unsigned int _619;
  long long unsigned int _620;
  long long unsigned int _623;
  long long unsigned int _624;
  long long unsigned int _625;
  long long unsigned int _626;
  long long unsigned int _627;
  long long unsigned int _628;
  long long unsigned int _629;
  long long unsigned int _630;
  long long unsigned int _637;
  long long unsigned int _638;
  long long unsigned int _639;
  long long unsigned int _640;
  long long unsigned int _641;
  long long unsigned int _642;
  long long unsigned int _643;
  long long unsigned int _644;
  long long unsigned int _647;
  long long unsigned int _648;
  long long unsigned int _649;
  long long unsigned int _650;
  long long unsigned int _651;
  long long unsigned int _652;
  long long unsigned int _653;
  long long unsigned int _655;
  long long unsigned int _662;
  long long unsigned int _663;
  long long unsigned int _665;
  long long unsigned int _666;
  long long unsigned int _668;
  long long unsigned int _670;
  long long unsigned int _671;
  long long unsigned int _673;
  long long unsigned int _676;
  long long unsigned int _679;
  long unsigned int load_dst_683;
  long long unsigned int _684;
  long long unsigned int _687;
  long long unsigned int _694;
  long long unsigned int _695;
  long long unsigned int _697;
  long long unsigned int _698;
  long long unsigned int _700;
  long long unsigned int _702;
  long long unsigned int _703;
  long long unsigned int _705;
  long long unsigned int _708;
  long long unsigned int _711;
  long unsigned int load_dst_715;
  long long unsigned int _716;
  long long unsigned int _718;
  long long unsigned int _725;
  long long unsigned int _726;
  long long unsigned int _728;
  long long unsigned int _729;
  long long unsigned int _731;
  long long unsigned int _733;
  long long unsigned int _734;
  long long unsigned int _736;
  long long unsigned int _739;
  long long unsigned int _742;
  long long unsigned int _747;
  long unsigned int load_dst_749;
  long long unsigned int _750;
  long long unsigned int _757;
  long long unsigned int _758;
  long long unsigned int _760;
  long long unsigned int _761;
  long long unsigned int _763;
  long long unsigned int _765;
  long long unsigned int _766;
  long long unsigned int _768;
  long long unsigned int _771;
  long long unsigned int _774;
  long unsigned int load_dst_776;
  long long unsigned int _779;
  vector(2) long long unsigned int _782;
  long long unsigned int _783;
  long unsigned int load_dst_784;
  void * _802;
  long unsigned int load_dst_821;
  vector(2) long long unsigned int _823;
  long unsigned int load_dst_831;
  long unsigned int load_dst_841;
  long unsigned int load_dst_857;
  long unsigned int load_dst_863;
  long unsigned int load_dst_869;
  long unsigned int load_dst_875;
  long unsigned int load_dst_881;
  long unsigned int load_dst_887;
  vector(2) long long unsigned int _888;
  vector(2) long long unsigned int _889;
  long unsigned int load_dst_892;
  unsigned int ivtmp_895;
  const unsigned char pretmp_1448;
  int pretmp_1450;
  u64 pretmp_1451;
  u64 prephitmp_1452;
  const unsigned char pretmp_1453;
  int pretmp_1455;
  const u64 pretmp_1456;
  const u64 prephitmp_1457;
  u64 pretmp_1458;
  u64 prephitmp_1459;
  const u64 pretmp_1460;
  const u64 prephitmp_1461;
  const unsigned char pretmp_1462;
  int pretmp_1464;
  u64 pretmp_1465;
  u64 prephitmp_1466;
  const unsigned char pretmp_1467;
  int pretmp_1469;
  const u64 pretmp_1470;
  const u64 prephitmp_1471;
  u64 pretmp_1472;
  u64 prephitmp_1473;
  const u64 pretmp_1474;
  const u64 prephitmp_1475;
  const unsigned char pretmp_1476;
  int pretmp_1478;
  u64 pretmp_1479;
  u64 prephitmp_1480;
  const unsigned char pretmp_1481;
  int pretmp_1483;
  const u64 pretmp_1484;
  const u64 prephitmp_1485;
  u64 pretmp_1486;
  u64 prephitmp_1487;
  const u64 pretmp_1488;
  const u64 prephitmp_1489;
  const unsigned char pretmp_1490;
  int pretmp_1492;
  u64 pretmp_1493;
  u64 prephitmp_1494;
  const unsigned char pretmp_1495;
  int pretmp_1497;
  const u64 pretmp_1498;
  const u64 prephitmp_1499;
  u64 pretmp_1500;
  u64 prephitmp_1501;
  const u64 pretmp_1502;
  const u64 prephitmp_1503;
  const unsigned char pretmp_1504;
  int pretmp_1506;
  u64 pretmp_1507;
  u64 prephitmp_1508;
  const unsigned char pretmp_1509;
  int pretmp_1511;
  const u64 pretmp_1512;
  const u64 prephitmp_1513;
  u64 pretmp_1514;
  u64 prephitmp_1515;
  const u64 pretmp_1516;
  const u64 prephitmp_1517;
  const unsigned char pretmp_1518;
  int pretmp_1520;
  u64 pretmp_1521;
  u64 prephitmp_1522;
  const unsigned char pretmp_1523;
  int pretmp_1525;
  const u64 pretmp_1526;
  const u64 prephitmp_1527;
  u64 pretmp_1528;
  u64 prephitmp_1529;
  const u64 pretmp_1530;
  const u64 prephitmp_1531;
  const unsigned char pretmp_1532;
  int pretmp_1534;
  u64 pretmp_1535;
  u64 prephitmp_1536;
  const unsigned char pretmp_1537;
  int pretmp_1539;
  const u64 pretmp_1540;
  const u64 prephitmp_1541;
  u64 pretmp_1542;
  u64 prephitmp_1543;
  const u64 pretmp_1544;
  const u64 prephitmp_1545;
  const unsigned char pretmp_1546;
  int pretmp_1548;
  u64 pretmp_1549;
  u64 prephitmp_1550;
  const unsigned char pretmp_1551;
  int pretmp_1553;
  const u64 pretmp_1554;
  const u64 prephitmp_1555;
  u64 pretmp_1556;
  u64 prephitmp_1557;
  const u64 pretmp_1558;
  const u64 prephitmp_1559;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  load_dst_892 = MEM[(const BitSequence *)datablock_5(D)];
  _37 = __builtin_bswap64 (load_dst_892);
  m[0] = _37;
  load_dst_887 = MEM[(const BitSequence *)datablock_5(D) + 8B];
  _70 = __builtin_bswap64 (load_dst_887);
  m[1] = _70;
  load_dst_881 = MEM[(const BitSequence *)datablock_5(D) + 16B];
  _103 = __builtin_bswap64 (load_dst_881);
  m[2] = _103;
  load_dst_875 = MEM[(const BitSequence *)datablock_5(D) + 24B];
  _136 = __builtin_bswap64 (load_dst_875);
  m[3] = _136;
  load_dst_869 = MEM[(const BitSequence *)datablock_5(D) + 32B];
  _169 = __builtin_bswap64 (load_dst_869);
  m[4] = _169;
  load_dst_863 = MEM[(const BitSequence *)datablock_5(D) + 40B];
  _202 = __builtin_bswap64 (load_dst_863);
  m[5] = _202;
  load_dst_857 = MEM[(const BitSequence *)datablock_5(D) + 48B];
  _235 = __builtin_bswap64 (load_dst_857);
  m[6] = _235;
  load_dst_2 = MEM[(const BitSequence *)datablock_5(D) + 56B];
  _268 = __builtin_bswap64 (load_dst_2);
  m[7] = _268;
  load_dst_683 = MEM[(const BitSequence *)datablock_5(D) + 64B];
  _301 = __builtin_bswap64 (load_dst_683);
  m[8] = _301;
  load_dst_821 = MEM[(const BitSequence *)datablock_5(D) + 72B];
  _334 = __builtin_bswap64 (load_dst_821);
  m[9] = _334;
  load_dst_776 = MEM[(const BitSequence *)datablock_5(D) + 80B];
  _367 = __builtin_bswap64 (load_dst_776);
  m[10] = _367;
  load_dst_749 = MEM[(const BitSequence *)datablock_5(D) + 88B];
  _400 = __builtin_bswap64 (load_dst_749);
  m[11] = _400;
  load_dst_715 = MEM[(const BitSequence *)datablock_5(D) + 96B];
  _433 = __builtin_bswap64 (load_dst_715);
  m[12] = _433;
  load_dst_831 = MEM[(const BitSequence *)datablock_5(D) + 104B];
  _466 = __builtin_bswap64 (load_dst_831);
  m[13] = _466;
  load_dst_841 = MEM[(const BitSequence *)datablock_5(D) + 112B];
  _499 = __builtin_bswap64 (load_dst_841);
  m[14] = _499;
  load_dst_784 = MEM[(const BitSequence *)datablock_5(D) + 120B];
  _532 = __builtin_bswap64 (load_dst_784);
  m[15] = _532;
  v$0_535 = state_534(D)->h64[0];
  v$1_536 = state_534(D)->h64[1];
  v$2_537 = state_534(D)->h64[2];
  v$3_538 = state_534(D)->h64[3];
  v$4_539 = state_534(D)->h64[4];
  v$5_540 = state_534(D)->h64[5];
  v$6_541 = state_534(D)->h64[6];
  v$7_542 = state_534(D)->h64[7];
  _543 = state_534(D)->salt64[0];
  v$8_544 = _543 ^ 2611923443488327891;
  _545 = state_534(D)->salt64[1];
  v$9_546 = _545 ^ 1376283091369227076;
  _547 = state_534(D)->salt64[2];
  v$10_548 = _547 ^ 11820040416388919760;
  _549 = state_534(D)->salt64[3];
  v$11_550 = _549 ^ 589684135938649225;
  _551 = state_534(D)->nullt;
  if (_551 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4
;;                3

;;   basic block 3, loop depth 0
;;    pred:       2
  _552 = state_534(D)->t64[0];
  v$12_553 = _552 ^ 4983270260364809079;
  v$13_554 = _552 ^ 13714699805381954668;
  _555 = state_534(D)->t64[1];
  v$14_556 = _555 ^ 13883517620612518109;
  v$15_557 = _555 ^ 4577018097722394903;
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  # v$12_678 = PHI <4983270260364809079(2), v$12_553(3)>
  # v$13_672 = PHI <13714699805381954668(2), v$13_554(3)>
  # v$14_713 = PHI <13883517620612518109(2), v$14_556(3)>
  # v$15_816 = PHI <4577018097722394903(2), v$15_557(3)>
  ivtmp.149_806 = (unsigned long) &sigma;
;;    succ:       5

;;   basic block 5, loop depth 1
;;    pred:       6
;;                4
  # v$15_826 = PHI <v$15_680(6), v$15_816(4)>
  # v$14_828 = PHI <v$14_775(6), v$14_713(4)>
  # v$13_830 = PHI <v$13_743(6), v$13_672(4)>
  # v$12_832 = PHI <v$12_712(6), v$12_678(4)>
  # v$11_654 = PHI <v$11_714(6), v$11_550(4)>
  # v$10_836 = PHI <v$10_682(6), v$10_548(4)>
  # v$9_834 = PHI <v$9_777(6), v$9_546(4)>
  # v$8_838 = PHI <v$8_745(6), v$8_544(4)>
  # v$7_840 = PHI <v$7_748(6), v$7_542(4)>
  # v$6_842 = PHI <v$6_717(6), v$6_541(4)>
  # v$5_844 = PHI <v$5_685(6), v$5_540(4)>
  # v$4_846 = PHI <v$4_780(6), v$4_539(4)>
  # v$3_848 = PHI <v$3_772(6), v$3_538(4)>
  # v$2_850 = PHI <v$2_740(6), v$2_537(4)>
  # v$1_852 = PHI <v$1_709(6), v$1_536(4)>
  # v$0_854 = PHI <v$0_677(6), v$0_535(4)>
  # prephitmp_1452 = PHI <pretmp_1451(6), _37(4)>
  # prephitmp_1457 = PHI <pretmp_1456(6), 1376283091369227076(4)>
  # prephitmp_1459 = PHI <pretmp_1458(6), _70(4)>
  # prephitmp_1461 = PHI <pretmp_1460(6), 2611923443488327891(4)>
  # prephitmp_1466 = PHI <pretmp_1465(6), _103(4)>
  # prephitmp_1471 = PHI <pretmp_1470(6), 589684135938649225(4)>
  # prephitmp_1473 = PHI <pretmp_1472(6), _136(4)>
  # prephitmp_1475 = PHI <pretmp_1474(6), 11820040416388919760(4)>
  # prephitmp_1480 = PHI <pretmp_1479(6), _169(4)>
  # prephitmp_1485 = PHI <pretmp_1484(6), 13714699805381954668(4)>
  # prephitmp_1487 = PHI <pretmp_1486(6), _202(4)>
  # prephitmp_1489 = PHI <pretmp_1488(6), 4983270260364809079(4)>
  # prephitmp_1494 = PHI <pretmp_1493(6), _235(4)>
  # prephitmp_1499 = PHI <pretmp_1498(6), 4577018097722394903(4)>
  # prephitmp_1501 = PHI <pretmp_1500(6), _268(4)>
  # prephitmp_1503 = PHI <pretmp_1502(6), 13883517620612518109(4)>
  # prephitmp_1508 = PHI <pretmp_1507(6), _301(4)>
  # prephitmp_1513 = PHI <pretmp_1512(6), 15073842237943035308(4)>
  # prephitmp_1515 = PHI <pretmp_1514(6), _334(4)>
  # prephitmp_1517 = PHI <pretmp_1516(6), 10526836309316205339(4)>
  # prephitmp_1522 = PHI <pretmp_1521(6), _367(4)>
  # prephitmp_1527 = PHI <pretmp_1526(6), 13322122606961655446(4)>
  # prephitmp_1529 = PHI <pretmp_1528(6), _400(4)>
  # prephitmp_1531 = PHI <pretmp_1530(6), 3458046377305235383(4)>
  # prephitmp_1536 = PHI <pretmp_1535(6), _433(4)>
  # prephitmp_1541 = PHI <pretmp_1540(6), 2639559389850201335(4)>
  # prephitmp_1543 = PHI <pretmp_1542(6), _466(4)>
  # prephitmp_1545 = PHI <pretmp_1544(6), 13437774018240085913(4)>
  # prephitmp_1550 = PHI <pretmp_1549(6), _499(4)>
  # prephitmp_1555 = PHI <pretmp_1554(6), 7163292796296056425(4)>
  # prephitmp_1557 = PHI <pretmp_1556(6), _532(4)>
  # prephitmp_1559 = PHI <pretmp_1558(6), 577009281997405206(4)>
  # ivtmp_895 = PHI <ivtmp_19(6), 16(4)>
  # ivtmp.149_814 = PHI <ivtmp.149_810(6), ivtmp.149_806(4)>
  _565 = prephitmp_1452 ^ prephitmp_1457;
  _572 = _565 + v$4_846;
  _566 = _572 + v$0_854;
  _567 = _566 ^ v$12_832;
  _568 = _567 r>> 32;
  _569 = _568 + v$8_838;
  _570 = _569 ^ v$4_846;
  _571 = _570 r>> 25;
  _575 = prephitmp_1459 ^ prephitmp_1461;
  _582 = _566 + _575;
  _576 = _571 + _582;
  _577 = _568 ^ _576;
  _578 = _577 r>> 16;
  _579 = _569 + _578;
  _580 = _571 ^ _579;
  _581 = _580 r>> 11;
  _589 = prephitmp_1466 ^ prephitmp_1471;
  _596 = _589 + v$5_844;
  _590 = _596 + v$1_852;
  _591 = _590 ^ v$13_830;
  _592 = _591 r>> 32;
  _593 = _592 + v$9_834;
  _594 = _593 ^ v$5_844;
  _595 = _594 r>> 25;
  _599 = prephitmp_1473 ^ prephitmp_1475;
  _606 = _590 + _599;
  _600 = _595 + _606;
  _601 = _592 ^ _600;
  _602 = _601 r>> 16;
  _603 = _593 + _602;
  _604 = _595 ^ _603;
  _605 = _604 r>> 11;
  _613 = prephitmp_1480 ^ prephitmp_1485;
  _620 = _613 + v$6_842;
  _614 = _620 + v$2_850;
  _615 = _614 ^ v$14_828;
  _616 = _615 r>> 32;
  _617 = _616 + v$10_836;
  _618 = _617 ^ v$6_842;
  _619 = _618 r>> 25;
  _623 = prephitmp_1487 ^ prephitmp_1489;
  _630 = _614 + _623;
  _624 = _619 + _630;
  _625 = _616 ^ _624;
  _626 = _625 r>> 16;
  _627 = _617 + _626;
  _628 = _619 ^ _627;
  _629 = _628 r>> 11;
  _637 = prephitmp_1494 ^ prephitmp_1499;
  _644 = _637 + v$7_840;
  _638 = _644 + v$3_848;
  _639 = _638 ^ v$15_826;
  _640 = _639 r>> 32;
  _641 = _640 + v$11_654;
  _642 = _641 ^ v$7_840;
  _643 = _642 r>> 25;
  _647 = prephitmp_1501 ^ prephitmp_1503;
  _655 = _638 + _647;
  _648 = _643 + _655;
  _649 = _640 ^ _648;
  _650 = _649 r>> 16;
  _651 = _641 + _650;
  _652 = _643 ^ _651;
  _653 = _652 r>> 11;
  _662 = prephitmp_1508 ^ prephitmp_1513;
  _673 = _576 + _662;
  _663 = _605 + _673;
  _665 = _650 ^ _663;
  _666 = _665 r>> 32;
  _668 = _627 + _666;
  _670 = _605 ^ _668;
  _671 = _670 r>> 25;
  _676 = prephitmp_1515 ^ prephitmp_1517;
  _687 = _663 + _676;
  v$0_677 = _671 + _687;
  _679 = _666 ^ v$0_677;
  v$15_680 = _679 r>> 16;
  v$10_682 = _668 + v$15_680;
  _684 = _671 ^ v$10_682;
  v$5_685 = _684 r>> 11;
  _694 = prephitmp_1522 ^ prephitmp_1527;
  _705 = _600 + _694;
  _695 = _629 + _705;
  _697 = _578 ^ _695;
  _698 = _697 r>> 32;
  _700 = _651 + _698;
  _702 = _629 ^ _700;
  _703 = _702 r>> 25;
  _708 = prephitmp_1529 ^ prephitmp_1531;
  _718 = _695 + _708;
  v$1_709 = _703 + _718;
  _711 = _698 ^ v$1_709;
  v$12_712 = _711 r>> 16;
  v$11_714 = _700 + v$12_712;
  _716 = _703 ^ v$11_714;
  v$6_717 = _716 r>> 11;
  _725 = prephitmp_1536 ^ prephitmp_1541;
  _736 = _624 + _725;
  _726 = _653 + _736;
  _728 = _602 ^ _726;
  _729 = _728 r>> 32;
  _731 = _579 + _729;
  _733 = _653 ^ _731;
  _734 = _733 r>> 25;
  _739 = prephitmp_1543 ^ prephitmp_1545;
  _750 = _726 + _739;
  v$2_740 = _734 + _750;
  _742 = _729 ^ v$2_740;
  v$13_743 = _742 r>> 16;
  v$8_745 = _731 + v$13_743;
  _747 = _734 ^ v$8_745;
  v$7_748 = _747 r>> 11;
  _757 = prephitmp_1550 ^ prephitmp_1555;
  _768 = _648 + _757;
  _758 = _581 + _768;
  _760 = _626 ^ _758;
  _761 = _760 r>> 32;
  _763 = _603 + _761;
  _765 = _581 ^ _763;
  _766 = _765 r>> 25;
  _771 = prephitmp_1557 ^ prephitmp_1559;
  _783 = _758 + _771;
  v$3_772 = _766 + _783;
  _774 = _761 ^ v$3_772;
  v$14_775 = _774 r>> 16;
  v$9_777 = _763 + v$14_775;
  _779 = _766 ^ v$9_777;
  v$4_780 = _779 r>> 11;
  ivtmp_19 = ivtmp_895 + 4294967295;
  ivtmp.149_810 = ivtmp.149_814 + 16;
  if (ivtmp_19 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6
;;                7

;;   basic block 6, loop depth 1
;;    pred:       5
  _802 = (void *) ivtmp.149_810;
  pretmp_1448 = MEM[base: _802, offset: 0B];
  pretmp_1450 = (int) pretmp_1448;
  pretmp_1451 = m[pretmp_1450];
  pretmp_1453 = MEM[base: _802, offset: 1B];
  pretmp_1455 = (int) pretmp_1453;
  pretmp_1456 = c64[pretmp_1455];
  pretmp_1458 = m[pretmp_1455];
  pretmp_1460 = c64[pretmp_1450];
  pretmp_1462 = MEM[base: _802, offset: 2B];
  pretmp_1464 = (int) pretmp_1462;
  pretmp_1465 = m[pretmp_1464];
  pretmp_1467 = MEM[base: _802, offset: 3B];
  pretmp_1469 = (int) pretmp_1467;
  pretmp_1470 = c64[pretmp_1469];
  pretmp_1472 = m[pretmp_1469];
  pretmp_1474 = c64[pretmp_1464];
  pretmp_1476 = MEM[base: _802, offset: 4B];
  pretmp_1478 = (int) pretmp_1476;
  pretmp_1479 = m[pretmp_1478];
  pretmp_1481 = MEM[base: _802, offset: 5B];
  pretmp_1483 = (int) pretmp_1481;
  pretmp_1484 = c64[pretmp_1483];
  pretmp_1486 = m[pretmp_1483];
  pretmp_1488 = c64[pretmp_1478];
  pretmp_1490 = MEM[base: _802, offset: 6B];
  pretmp_1492 = (int) pretmp_1490;
  pretmp_1493 = m[pretmp_1492];
  pretmp_1495 = MEM[base: _802, offset: 7B];
  pretmp_1497 = (int) pretmp_1495;
  pretmp_1498 = c64[pretmp_1497];
  pretmp_1500 = m[pretmp_1497];
  pretmp_1502 = c64[pretmp_1492];
  pretmp_1504 = MEM[base: _802, offset: 8B];
  pretmp_1506 = (int) pretmp_1504;
  pretmp_1507 = m[pretmp_1506];
  pretmp_1509 = MEM[base: _802, offset: 9B];
  pretmp_1511 = (int) pretmp_1509;
  pretmp_1512 = c64[pretmp_1511];
  pretmp_1514 = m[pretmp_1511];
  pretmp_1516 = c64[pretmp_1506];
  pretmp_1518 = MEM[base: _802, offset: 10B];
  pretmp_1520 = (int) pretmp_1518;
  pretmp_1521 = m[pretmp_1520];
  pretmp_1523 = MEM[base: _802, offset: 11B];
  pretmp_1525 = (int) pretmp_1523;
  pretmp_1526 = c64[pretmp_1525];
  pretmp_1528 = m[pretmp_1525];
  pretmp_1530 = c64[pretmp_1520];
  pretmp_1532 = MEM[base: _802, offset: 12B];
  pretmp_1534 = (int) pretmp_1532;
  pretmp_1535 = m[pretmp_1534];
  pretmp_1537 = MEM[base: _802, offset: 13B];
  pretmp_1539 = (int) pretmp_1537;
  pretmp_1540 = c64[pretmp_1539];
  pretmp_1542 = m[pretmp_1539];
  pretmp_1544 = c64[pretmp_1534];
  pretmp_1546 = MEM[base: _802, offset: 14B];
  pretmp_1548 = (int) pretmp_1546;
  pretmp_1549 = m[pretmp_1548];
  pretmp_1551 = MEM[base: _802, offset: 15B];
  pretmp_1553 = (int) pretmp_1551;
  pretmp_1554 = c64[pretmp_1553];
  pretmp_1556 = m[pretmp_1553];
  pretmp_1558 = c64[pretmp_1548];
  goto <bb 5>;
;;    succ:       5

;;   basic block 7, loop depth 0
;;    pred:       5
  vect_cst_.130_27 = {v$8_745, v$9_777};
  vect_cst_.129_26 = {v$10_682, v$11_714};
  vect_cst_.128_25 = {v$4_780, v$5_685};
  vect_cst_.127_24 = {v$6_717, v$7_748};
  vect_cst_.125_893 = {v$0_677, v$1_709};
  vect_cst_.124_21 = {v$2_740, v$3_772};
  vect_cst_.123_20 = {v$12_712, v$13_743};
  vect_cst_.122_32 = {v$14_775, v$15_680};
  vect_cst_.120_13 = {_543, _545};
  vect_cst_.119_12 = {_547, _549};
  vect_cst_.118_11 = {_543, _545};
  vect_cst_.117_10 = {_547, _549};
  vect_cst_.116_9 = {v$0_535, v$1_536};
  vect_cst_.115_8 = {v$2_537, v$3_538};
  vect_cst_.114_7 = {v$4_539, v$5_540};
  vect_cst_.113_6 = {v$6_541, v$7_542};
  _68 = vect_cst_.130_27 ^ vect_cst_.125_893;
  _888 = vect_cst_.124_21 ^ vect_cst_.129_26;
  _53 = vect_cst_.123_20 ^ vect_cst_.128_25;
  _823 = vect_cst_.127_24 ^ vect_cst_.122_32;
  _55 = vect_cst_.120_13 ^ _68;
  _889 = vect_cst_.119_12 ^ _888;
  _54 = vect_cst_.118_11 ^ _53;
  _782 = vect_cst_.117_10 ^ _823;
  vect__785.126_28 = vect_cst_.116_9 ^ _55;
  vect__785.126_29 = vect_cst_.115_8 ^ _889;
  vect__785.126_30 = vect_cst_.114_7 ^ _54;
  vect__785.126_31 = vect_cst_.113_6 ^ _782;
  vectp.132_33 = &state_534(D)->h64[0];
  MEM[(long long unsigned int *)state_534(D) + 136B] = vect__785.126_28;
  vectp.132_49 = &MEM[(void *)state_534(D) + 152B];
  MEM[(long long unsigned int *)state_534(D) + 152B] = vect__785.126_29;
  vectp.132_891 = &MEM[(void *)state_534(D) + 168B];
  MEM[(long long unsigned int *)state_534(D) + 168B] = vect__785.126_30;
  vectp.132_39 = &MEM[(void *)state_534(D) + 184B];
  MEM[(long long unsigned int *)state_534(D) + 184B] = vect__785.126_31;
  m ={v} {CLOBBER};
  return 0;
;;    succ:       EXIT

}



Partition map 

Partition 2 (load_dst_2 - 2 )
Partition 5 (datablock_5(D) - 5 )
Partition 6 (vect_cst_.113_6 - 6 )
Partition 7 (vect_cst_.114_7 - 7 )
Partition 8 (vect_cst_.115_8 - 8 )
Partition 9 (vect_cst_.116_9 - 9 )
Partition 10 (vect_cst_.117_10 - 10 )
Partition 11 (vect_cst_.118_11 - 11 )
Partition 12 (vect_cst_.119_12 - 12 )
Partition 13 (vect_cst_.120_13 - 13 )
Partition 19 (ivtmp_19 - 19 )
Partition 20 (vect_cst_.123_20 - 20 )
Partition 21 (vect_cst_.124_21 - 21 )
Partition 24 (vect_cst_.127_24 - 24 )
Partition 25 (vect_cst_.128_25 - 25 )
Partition 26 (vect_cst_.129_26 - 26 )
Partition 27 (vect_cst_.130_27 - 27 )
Partition 28 (vect__785.126_28 - 28 )
Partition 29 (vect__785.126_29 - 29 )
Partition 30 (vect__785.126_30 - 30 )
Partition 31 (vect__785.126_31 - 31 )
Partition 32 (vect_cst_.122_32 - 32 )
Partition 33 (vectp.132_33 - 33 )
Partition 37 (_37 - 37 )
Partition 39 (vectp.132_39 - 39 )
Partition 49 (vectp.132_49 - 49 )
Partition 53 (_53 - 53 )
Partition 54 (_54 - 54 )
Partition 55 (_55 - 55 )
Partition 68 (_68 - 68 )
Partition 70 (_70 - 70 )
Partition 103 (_103 - 103 )
Partition 136 (_136 - 136 )
Partition 169 (_169 - 169 )
Partition 202 (_202 - 202 )
Partition 235 (_235 - 235 )
Partition 268 (_268 - 268 )
Partition 301 (_301 - 301 )
Partition 334 (_334 - 334 )
Partition 367 (_367 - 367 )
Partition 400 (_400 - 400 )
Partition 433 (_433 - 433 )
Partition 466 (_466 - 466 )
Partition 499 (_499 - 499 )
Partition 532 (_532 - 532 )
Partition 534 (state_534(D) - 534 )
Partition 535 (v$0_535 - 535 )
Partition 536 (v$1_536 - 536 )
Partition 537 (v$2_537 - 537 )
Partition 538 (v$3_538 - 538 )
Partition 539 (v$4_539 - 539 )
Partition 540 (v$5_540 - 540 )
Partition 541 (v$6_541 - 541 )
Partition 542 (v$7_542 - 542 )
Partition 543 (_543 - 543 )
Partition 544 (v$8_544 - 544 )
Partition 545 (_545 - 545 )
Partition 546 (v$9_546 - 546 )
Partition 547 (_547 - 547 )
Partition 548 (v$10_548 - 548 )
Partition 549 (_549 - 549 )
Partition 550 (v$11_550 - 550 )
Partition 551 (_551 - 551 )
Partition 552 (_552 - 552 )
Partition 553 (v$12_553 - 553 )
Partition 554 (v$13_554 - 554 )
Partition 555 (_555 - 555 )
Partition 556 (v$14_556 - 556 )
Partition 557 (v$15_557 - 557 )
Partition 565 (_565 - 565 )
Partition 566 (_566 - 566 )
Partition 567 (_567 - 567 )
Partition 568 (_568 - 568 )
Partition 569 (_569 - 569 )
Partition 570 (_570 - 570 )
Partition 571 (_571 - 571 )
Partition 572 (_572 - 572 )
Partition 575 (_575 - 575 )
Partition 576 (_576 - 576 )
Partition 577 (_577 - 577 )
Partition 578 (_578 - 578 )
Partition 579 (_579 - 579 )
Partition 580 (_580 - 580 )
Partition 581 (_581 - 581 )
Partition 582 (_582 - 582 )
Partition 589 (_589 - 589 )
Partition 590 (_590 - 590 )
Partition 591 (_591 - 591 )
Partition 592 (_592 - 592 )
Partition 593 (_593 - 593 )
Partition 594 (_594 - 594 )
Partition 595 (_595 - 595 )
Partition 596 (_596 - 596 )
Partition 599 (_599 - 599 )
Partition 600 (_600 - 600 )
Partition 601 (_601 - 601 )
Partition 602 (_602 - 602 )
Partition 603 (_603 - 603 )
Partition 604 (_604 - 604 )
Partition 605 (_605 - 605 )
Partition 606 (_606 - 606 )
Partition 613 (_613 - 613 )
Partition 614 (_614 - 614 )
Partition 615 (_615 - 615 )
Partition 616 (_616 - 616 )
Partition 617 (_617 - 617 )
Partition 618 (_618 - 618 )
Partition 619 (_619 - 619 )
Partition 620 (_620 - 620 )
Partition 623 (_623 - 623 )
Partition 624 (_624 - 624 )
Partition 625 (_625 - 625 )
Partition 626 (_626 - 626 )
Partition 627 (_627 - 627 )
Partition 628 (_628 - 628 )
Partition 629 (_629 - 629 )
Partition 630 (_630 - 630 )
Partition 637 (_637 - 637 )
Partition 638 (_638 - 638 )
Partition 639 (_639 - 639 )
Partition 640 (_640 - 640 )
Partition 641 (_641 - 641 )
Partition 642 (_642 - 642 )
Partition 643 (_643 - 643 )
Partition 644 (_644 - 644 )
Partition 647 (_647 - 647 )
Partition 648 (_648 - 648 )
Partition 649 (_649 - 649 )
Partition 650 (_650 - 650 )
Partition 651 (_651 - 651 )
Partition 652 (_652 - 652 )
Partition 653 (_653 - 653 )
Partition 654 (v$11_654 - 654 )
Partition 655 (_655 - 655 )
Partition 662 (_662 - 662 )
Partition 663 (_663 - 663 )
Partition 665 (_665 - 665 )
Partition 666 (_666 - 666 )
Partition 668 (_668 - 668 )
Partition 670 (_670 - 670 )
Partition 671 (_671 - 671 )
Partition 672 (v$13_672 - 672 )
Partition 673 (_673 - 673 )
Partition 676 (_676 - 676 )
Partition 677 (v$0_677 - 677 )
Partition 678 (v$12_678 - 678 )
Partition 679 (_679 - 679 )
Partition 680 (v$15_680 - 680 )
Partition 682 (v$10_682 - 682 )
Partition 683 (load_dst_683 - 683 )
Partition 684 (_684 - 684 )
Partition 685 (v$5_685 - 685 )
Partition 687 (_687 - 687 )
Partition 694 (_694 - 694 )
Partition 695 (_695 - 695 )
Partition 697 (_697 - 697 )
Partition 698 (_698 - 698 )
Partition 700 (_700 - 700 )
Partition 702 (_702 - 702 )
Partition 703 (_703 - 703 )
Partition 705 (_705 - 705 )
Partition 708 (_708 - 708 )
Partition 709 (v$1_709 - 709 )
Partition 711 (_711 - 711 )
Partition 712 (v$12_712 - 712 )
Partition 713 (v$14_713 - 713 )
Partition 714 (v$11_714 - 714 )
Partition 715 (load_dst_715 - 715 )
Partition 716 (_716 - 716 )
Partition 717 (v$6_717 - 717 )
Partition 718 (_718 - 718 )
Partition 725 (_725 - 725 )
Partition 726 (_726 - 726 )
Partition 728 (_728 - 728 )
Partition 729 (_729 - 729 )
Partition 731 (_731 - 731 )
Partition 733 (_733 - 733 )
Partition 734 (_734 - 734 )
Partition 736 (_736 - 736 )
Partition 739 (_739 - 739 )
Partition 740 (v$2_740 - 740 )
Partition 742 (_742 - 742 )
Partition 743 (v$13_743 - 743 )
Partition 745 (v$8_745 - 745 )
Partition 747 (_747 - 747 )
Partition 748 (v$7_748 - 748 )
Partition 749 (load_dst_749 - 749 )
Partition 750 (_750 - 750 )
Partition 757 (_757 - 757 )
Partition 758 (_758 - 758 )
Partition 760 (_760 - 760 )
Partition 761 (_761 - 761 )
Partition 763 (_763 - 763 )
Partition 765 (_765 - 765 )
Partition 766 (_766 - 766 )
Partition 768 (_768 - 768 )
Partition 771 (_771 - 771 )
Partition 772 (v$3_772 - 772 )
Partition 774 (_774 - 774 )
Partition 775 (v$14_775 - 775 )
Partition 776 (load_dst_776 - 776 )
Partition 777 (v$9_777 - 777 )
Partition 779 (_779 - 779 )
Partition 780 (v$4_780 - 780 )
Partition 782 (_782 - 782 )
Partition 783 (_783 - 783 )
Partition 784 (load_dst_784 - 784 )
Partition 802 (_802 - 802 )
Partition 806 (ivtmp.149_806 - 806 )
Partition 810 (ivtmp.149_810 - 810 )
Partition 814 (ivtmp.149_814 - 814 )
Partition 816 (v$15_816 - 816 )
Partition 821 (load_dst_821 - 821 )
Partition 823 (_823 - 823 )
Partition 826 (v$15_826 - 826 )
Partition 828 (v$14_828 - 828 )
Partition 830 (v$13_830 - 830 )
Partition 831 (load_dst_831 - 831 )
Partition 832 (v$12_832 - 832 )
Partition 834 (v$9_834 - 834 )
Partition 836 (v$10_836 - 836 )
Partition 838 (v$8_838 - 838 )
Partition 840 (v$7_840 - 840 )
Partition 841 (load_dst_841 - 841 )
Partition 842 (v$6_842 - 842 )
Partition 844 (v$5_844 - 844 )
Partition 846 (v$4_846 - 846 )
Partition 848 (v$3_848 - 848 )
Partition 850 (v$2_850 - 850 )
Partition 852 (v$1_852 - 852 )
Partition 854 (v$0_854 - 854 )
Partition 857 (load_dst_857 - 857 )
Partition 863 (load_dst_863 - 863 )
Partition 869 (load_dst_869 - 869 )
Partition 875 (load_dst_875 - 875 )
Partition 881 (load_dst_881 - 881 )
Partition 887 (load_dst_887 - 887 )
Partition 888 (_888 - 888 )
Partition 889 (_889 - 889 )
Partition 891 (vectp.132_891 - 891 )
Partition 892 (load_dst_892 - 892 )
Partition 893 (vect_cst_.125_893 - 893 )
Partition 895 (ivtmp_895 - 895 )
Partition 1448 (pretmp_1448 - 1448 )
Partition 1450 (pretmp_1450 - 1450 )
Partition 1451 (pretmp_1451 - 1451 )
Partition 1452 (prephitmp_1452 - 1452 )
Partition 1453 (pretmp_1453 - 1453 )
Partition 1455 (pretmp_1455 - 1455 )
Partition 1456 (pretmp_1456 - 1456 )
Partition 1457 (prephitmp_1457 - 1457 )
Partition 1458 (pretmp_1458 - 1458 )
Partition 1459 (prephitmp_1459 - 1459 )
Partition 1460 (pretmp_1460 - 1460 )
Partition 1461 (prephitmp_1461 - 1461 )
Partition 1462 (pretmp_1462 - 1462 )
Partition 1464 (pretmp_1464 - 1464 )
Partition 1465 (pretmp_1465 - 1465 )
Partition 1466 (prephitmp_1466 - 1466 )
Partition 1467 (pretmp_1467 - 1467 )
Partition 1469 (pretmp_1469 - 1469 )
Partition 1470 (pretmp_1470 - 1470 )
Partition 1471 (prephitmp_1471 - 1471 )
Partition 1472 (pretmp_1472 - 1472 )
Partition 1473 (prephitmp_1473 - 1473 )
Partition 1474 (pretmp_1474 - 1474 )
Partition 1475 (prephitmp_1475 - 1475 )
Partition 1476 (pretmp_1476 - 1476 )
Partition 1478 (pretmp_1478 - 1478 )
Partition 1479 (pretmp_1479 - 1479 )
Partition 1480 (prephitmp_1480 - 1480 )
Partition 1481 (pretmp_1481 - 1481 )
Partition 1483 (pretmp_1483 - 1483 )
Partition 1484 (pretmp_1484 - 1484 )
Partition 1485 (prephitmp_1485 - 1485 )
Partition 1486 (pretmp_1486 - 1486 )
Partition 1487 (prephitmp_1487 - 1487 )
Partition 1488 (pretmp_1488 - 1488 )
Partition 1489 (prephitmp_1489 - 1489 )
Partition 1490 (pretmp_1490 - 1490 )
Partition 1492 (pretmp_1492 - 1492 )
Partition 1493 (pretmp_1493 - 1493 )
Partition 1494 (prephitmp_1494 - 1494 )
Partition 1495 (pretmp_1495 - 1495 )
Partition 1497 (pretmp_1497 - 1497 )
Partition 1498 (pretmp_1498 - 1498 )
Partition 1499 (prephitmp_1499 - 1499 )
Partition 1500 (pretmp_1500 - 1500 )
Partition 1501 (prephitmp_1501 - 1501 )
Partition 1502 (pretmp_1502 - 1502 )
Partition 1503 (prephitmp_1503 - 1503 )
Partition 1504 (pretmp_1504 - 1504 )
Partition 1506 (pretmp_1506 - 1506 )
Partition 1507 (pretmp_1507 - 1507 )
Partition 1508 (prephitmp_1508 - 1508 )
Partition 1509 (pretmp_1509 - 1509 )
Partition 1511 (pretmp_1511 - 1511 )
Partition 1512 (pretmp_1512 - 1512 )
Partition 1513 (prephitmp_1513 - 1513 )
Partition 1514 (pretmp_1514 - 1514 )
Partition 1515 (prephitmp_1515 - 1515 )
Partition 1516 (pretmp_1516 - 1516 )
Partition 1517 (prephitmp_1517 - 1517 )
Partition 1518 (pretmp_1518 - 1518 )
Partition 1520 (pretmp_1520 - 1520 )
Partition 1521 (pretmp_1521 - 1521 )
Partition 1522 (prephitmp_1522 - 1522 )
Partition 1523 (pretmp_1523 - 1523 )
Partition 1525 (pretmp_1525 - 1525 )
Partition 1526 (pretmp_1526 - 1526 )
Partition 1527 (prephitmp_1527 - 1527 )
Partition 1528 (pretmp_1528 - 1528 )
Partition 1529 (prephitmp_1529 - 1529 )
Partition 1530 (pretmp_1530 - 1530 )
Partition 1531 (prephitmp_1531 - 1531 )
Partition 1532 (pretmp_1532 - 1532 )
Partition 1534 (pretmp_1534 - 1534 )
Partition 1535 (pretmp_1535 - 1535 )
Partition 1536 (prephitmp_1536 - 1536 )
Partition 1537 (pretmp_1537 - 1537 )
Partition 1539 (pretmp_1539 - 1539 )
Partition 1540 (pretmp_1540 - 1540 )
Partition 1541 (prephitmp_1541 - 1541 )
Partition 1542 (pretmp_1542 - 1542 )
Partition 1543 (prephitmp_1543 - 1543 )
Partition 1544 (pretmp_1544 - 1544 )
Partition 1545 (prephitmp_1545 - 1545 )
Partition 1546 (pretmp_1546 - 1546 )
Partition 1548 (pretmp_1548 - 1548 )
Partition 1549 (pretmp_1549 - 1549 )
Partition 1550 (prephitmp_1550 - 1550 )
Partition 1551 (pretmp_1551 - 1551 )
Partition 1553 (pretmp_1553 - 1553 )
Partition 1554 (pretmp_1554 - 1554 )
Partition 1555 (prephitmp_1555 - 1555 )
Partition 1556 (pretmp_1556 - 1556 )
Partition 1557 (prephitmp_1557 - 1557 )
Partition 1558 (pretmp_1558 - 1558 )
Partition 1559 (prephitmp_1559 - 1559 )


Partition map 

Partition 0 (datablock_5(D) - 5 )
Partition 1 (ivtmp_19 - 19 )
Partition 2 (_37 - 37 )
Partition 3 (_70 - 70 )
Partition 4 (_103 - 103 )
Partition 5 (_136 - 136 )
Partition 6 (_169 - 169 )
Partition 7 (_202 - 202 )
Partition 8 (_235 - 235 )
Partition 9 (_268 - 268 )
Partition 10 (_301 - 301 )
Partition 11 (_334 - 334 )
Partition 12 (_367 - 367 )
Partition 13 (_400 - 400 )
Partition 14 (_433 - 433 )
Partition 15 (_466 - 466 )
Partition 16 (_499 - 499 )
Partition 17 (_532 - 532 )
Partition 18 (state_534(D) - 534 )
Partition 19 (v$0_535 - 535 )
Partition 20 (v$1_536 - 536 )
Partition 21 (v$2_537 - 537 )
Partition 22 (v$3_538 - 538 )
Partition 23 (v$4_539 - 539 )
Partition 24 (v$5_540 - 540 )
Partition 25 (v$6_541 - 541 )
Partition 26 (v$7_542 - 542 )
Partition 27 (v$8_544 - 544 )
Partition 28 (v$9_546 - 546 )
Partition 29 (v$10_548 - 548 )
Partition 30 (v$11_550 - 550 )
Partition 31 (v$12_553 - 553 )
Partition 32 (v$13_554 - 554 )
Partition 33 (v$14_556 - 556 )
Partition 34 (v$15_557 - 557 )
Partition 35 (v$11_654 - 654 )
Partition 36 (v$13_672 - 672 )
Partition 37 (v$0_677 - 677 )
Partition 38 (v$12_678 - 678 )
Partition 39 (v$15_680 - 680 )
Partition 40 (v$10_682 - 682 )
Partition 41 (v$5_685 - 685 )
Partition 42 (v$1_709 - 709 )
Partition 43 (v$12_712 - 712 )
Partition 44 (v$14_713 - 713 )
Partition 45 (v$11_714 - 714 )
Partition 46 (v$6_717 - 717 )
Partition 47 (v$2_740 - 740 )
Partition 48 (v$13_743 - 743 )
Partition 49 (v$8_745 - 745 )
Partition 50 (v$7_748 - 748 )
Partition 51 (v$3_772 - 772 )
Partition 52 (v$14_775 - 775 )
Partition 53 (v$9_777 - 777 )
Partition 54 (v$4_780 - 780 )
Partition 55 (ivtmp.149_806 - 806 )
Partition 56 (ivtmp.149_810 - 810 )
Partition 57 (ivtmp.149_814 - 814 )
Partition 58 (v$15_816 - 816 )
Partition 59 (v$15_826 - 826 )
Partition 60 (v$14_828 - 828 )
Partition 61 (v$13_830 - 830 )
Partition 62 (v$12_832 - 832 )
Partition 63 (v$9_834 - 834 )
Partition 64 (v$10_836 - 836 )
Partition 65 (v$8_838 - 838 )
Partition 66 (v$7_840 - 840 )
Partition 67 (v$6_842 - 842 )
Partition 68 (v$5_844 - 844 )
Partition 69 (v$4_846 - 846 )
Partition 70 (v$3_848 - 848 )
Partition 71 (v$2_850 - 850 )
Partition 72 (v$1_852 - 852 )
Partition 73 (v$0_854 - 854 )
Partition 74 (ivtmp_895 - 895 )
Partition 75 (pretmp_1451 - 1451 )
Partition 76 (prephitmp_1452 - 1452 )
Partition 77 (pretmp_1456 - 1456 )
Partition 78 (prephitmp_1457 - 1457 )
Partition 79 (pretmp_1458 - 1458 )
Partition 80 (prephitmp_1459 - 1459 )
Partition 81 (pretmp_1460 - 1460 )
Partition 82 (prephitmp_1461 - 1461 )
Partition 83 (pretmp_1465 - 1465 )
Partition 84 (prephitmp_1466 - 1466 )
Partition 85 (pretmp_1470 - 1470 )
Partition 86 (prephitmp_1471 - 1471 )
Partition 87 (pretmp_1472 - 1472 )
Partition 88 (prephitmp_1473 - 1473 )
Partition 89 (pretmp_1474 - 1474 )
Partition 90 (prephitmp_1475 - 1475 )
Partition 91 (pretmp_1479 - 1479 )
Partition 92 (prephitmp_1480 - 1480 )
Partition 93 (pretmp_1484 - 1484 )
Partition 94 (prephitmp_1485 - 1485 )
Partition 95 (pretmp_1486 - 1486 )
Partition 96 (prephitmp_1487 - 1487 )
Partition 97 (pretmp_1488 - 1488 )
Partition 98 (prephitmp_1489 - 1489 )
Partition 99 (pretmp_1493 - 1493 )
Partition 100 (prephitmp_1494 - 1494 )
Partition 101 (pretmp_1498 - 1498 )
Partition 102 (prephitmp_1499 - 1499 )
Partition 103 (pretmp_1500 - 1500 )
Partition 104 (prephitmp_1501 - 1501 )
Partition 105 (pretmp_1502 - 1502 )
Partition 106 (prephitmp_1503 - 1503 )
Partition 107 (pretmp_1507 - 1507 )
Partition 108 (prephitmp_1508 - 1508 )
Partition 109 (pretmp_1512 - 1512 )
Partition 110 (prephitmp_1513 - 1513 )
Partition 111 (pretmp_1514 - 1514 )
Partition 112 (prephitmp_1515 - 1515 )
Partition 113 (pretmp_1516 - 1516 )
Partition 114 (prephitmp_1517 - 1517 )
Partition 115 (pretmp_1521 - 1521 )
Partition 116 (prephitmp_1522 - 1522 )
Partition 117 (pretmp_1526 - 1526 )
Partition 118 (prephitmp_1527 - 1527 )
Partition 119 (pretmp_1528 - 1528 )
Partition 120 (prephitmp_1529 - 1529 )
Partition 121 (pretmp_1530 - 1530 )
Partition 122 (prephitmp_1531 - 1531 )
Partition 123 (pretmp_1535 - 1535 )
Partition 124 (prephitmp_1536 - 1536 )
Partition 125 (pretmp_1540 - 1540 )
Partition 126 (prephitmp_1541 - 1541 )
Partition 127 (pretmp_1542 - 1542 )
Partition 128 (prephitmp_1543 - 1543 )
Partition 129 (pretmp_1544 - 1544 )
Partition 130 (prephitmp_1545 - 1545 )
Partition 131 (pretmp_1549 - 1549 )
Partition 132 (prephitmp_1550 - 1550 )
Partition 133 (pretmp_1554 - 1554 )
Partition 134 (prephitmp_1555 - 1555 )
Partition 135 (pretmp_1556 - 1556 )
Partition 136 (prephitmp_1557 - 1557 )
Partition 137 (pretmp_1558 - 1558 )
Partition 138 (prephitmp_1559 - 1559 )


Conflict graph:
2: 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
3: 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
4: 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
5: 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
6: 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
7: 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
8: 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17
9: 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17
10: 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17
11: 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17
12: 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17
13: 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17
14: 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
15: 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17
16: 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17
17: 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
19: 37, 73
20: 42, 72
21: 47, 71
22: 51, 70
23: 54, 69
24: 41, 68
25: 46, 67
26: 50, 66
37: 19
41: 24
42: 20
46: 25
47: 21
50: 26
51: 22
54: 23
66: 26
67: 25
68: 24
69: 23
70: 22
71: 21
72: 20
73: 19
75: 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131, 135
76: 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136
77: 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137
78: 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138
79: 75, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131, 135
80: 76, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136
81: 77, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137
82: 78, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138
83: 75, 79, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131, 135
84: 76, 80, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136
85: 77, 81, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137
86: 78, 82, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138
87: 75, 79, 83, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131, 135
88: 76, 80, 84, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136
89: 77, 81, 85, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137
90: 78, 82, 86, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138
91: 75, 79, 83, 87, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131, 135
92: 76, 80, 84, 88, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136
93: 77, 81, 85, 89, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137
94: 78, 82, 86, 90, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138
95: 75, 79, 83, 87, 91, 99, 103, 107, 111, 115, 119, 123, 127, 131, 135
96: 76, 80, 84, 88, 92, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136
97: 77, 81, 85, 89, 93, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137
98: 78, 82, 86, 90, 94, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138
99: 75, 79, 83, 87, 91, 95, 103, 107, 111, 115, 119, 123, 127, 131, 135
100: 76, 80, 84, 88, 92, 96, 104, 108, 112, 116, 120, 124, 128, 132, 136
101: 77, 81, 85, 89, 93, 97, 105, 109, 113, 117, 121, 125, 129, 133, 137
102: 78, 82, 86, 90, 94, 98, 106, 110, 114, 118, 122, 126, 130, 134, 138
103: 75, 79, 83, 87, 91, 95, 99, 107, 111, 115, 119, 123, 127, 131, 135
104: 76, 80, 84, 88, 92, 96, 100, 108, 112, 116, 120, 124, 128, 132, 136
105: 77, 81, 85, 89, 93, 97, 101, 109, 113, 117, 121, 125, 129, 133, 137
106: 78, 82, 86, 90, 94, 98, 102, 110, 114, 118, 122, 126, 130, 134, 138
107: 75, 79, 83, 87, 91, 95, 99, 103, 111, 115, 119, 123, 127, 131, 135
108: 76, 80, 84, 88, 92, 96, 100, 104, 112, 116, 120, 124, 128, 132, 136
109: 77, 81, 85, 89, 93, 97, 101, 105, 113, 117, 121, 125, 129, 133, 137
110: 78, 82, 86, 90, 94, 98, 102, 106, 114, 118, 122, 126, 130, 134, 138
111: 75, 79, 83, 87, 91, 95, 99, 103, 107, 115, 119, 123, 127, 131, 135
112: 76, 80, 84, 88, 92, 96, 100, 104, 108, 116, 120, 124, 128, 132, 136
113: 77, 81, 85, 89, 93, 97, 101, 105, 109, 117, 121, 125, 129, 133, 137
114: 78, 82, 86, 90, 94, 98, 102, 106, 110, 118, 122, 126, 130, 134, 138
115: 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 119, 123, 127, 131, 135
116: 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 120, 124, 128, 132, 136
117: 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 121, 125, 129, 133, 137
118: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 122, 126, 130, 134, 138
119: 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 123, 127, 131, 135
120: 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 124, 128, 132, 136
121: 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 125, 129, 133, 137
122: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 126, 130, 134, 138
123: 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 127, 131, 135
124: 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 128, 132, 136
125: 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 129, 133, 137
126: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 130, 134, 138
127: 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 131, 135
128: 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 132, 136
129: 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 133, 137
130: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 134, 138
131: 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 135
132: 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 136
133: 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 137
134: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 138
135: 75, 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131
136: 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132
137: 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133
138: 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134

After sorting:
Sorted Coalesce list:
(8859) ivtmp_19 <-> ivtmp_895
(8859) v$11_654 <-> v$11_714
(8859) v$0_677 <-> v$0_854
(8859) v$15_680 <-> v$15_826
(8859) v$10_682 <-> v$10_836
(8859) v$5_685 <-> v$5_844
(8859) v$1_709 <-> v$1_852
(8859) v$12_712 <-> v$12_832
(8859) v$6_717 <-> v$6_842
(8859) v$2_740 <-> v$2_850
(8859) v$13_743 <-> v$13_830
(8859) v$8_745 <-> v$8_838
(8859) v$7_748 <-> v$7_840
(8859) v$3_772 <-> v$3_848
(8859) v$14_775 <-> v$14_828
(8859) v$9_777 <-> v$9_834
(8859) v$4_780 <-> v$4_846
(8859) ivtmp.149_810 <-> ivtmp.149_814
(8859) pretmp_1451 <-> prephitmp_1452
(8859) pretmp_1456 <-> prephitmp_1457
(8859) pretmp_1458 <-> prephitmp_1459
(8859) pretmp_1460 <-> prephitmp_1461
(8859) pretmp_1465 <-> prephitmp_1466
(8859) pretmp_1470 <-> prephitmp_1471
(8859) pretmp_1472 <-> prephitmp_1473
(8859) pretmp_1474 <-> prephitmp_1475
(8859) pretmp_1479 <-> prephitmp_1480
(8859) pretmp_1484 <-> prephitmp_1485
(8859) pretmp_1486 <-> prephitmp_1487
(8859) pretmp_1488 <-> prephitmp_1489
(8859) pretmp_1493 <-> prephitmp_1494
(8859) pretmp_1498 <-> prephitmp_1499
(8859) pretmp_1500 <-> prephitmp_1501
(8859) pretmp_1502 <-> prephitmp_1503
(8859) pretmp_1507 <-> prephitmp_1508
(8859) pretmp_1512 <-> prephitmp_1513
(8859) pretmp_1514 <-> prephitmp_1515
(8859) pretmp_1516 <-> prephitmp_1517
(8859) pretmp_1521 <-> prephitmp_1522
(8859) pretmp_1526 <-> prephitmp_1527
(8859) pretmp_1528 <-> prephitmp_1529
(8859) pretmp_1530 <-> prephitmp_1531
(8859) pretmp_1535 <-> prephitmp_1536
(8859) pretmp_1540 <-> prephitmp_1541
(8859) pretmp_1542 <-> prephitmp_1543
(8859) pretmp_1544 <-> prephitmp_1545
(8859) pretmp_1549 <-> prephitmp_1550
(8859) pretmp_1554 <-> prephitmp_1555
(8859) pretmp_1556 <-> prephitmp_1557
(8859) pretmp_1558 <-> prephitmp_1559
(590) _37 <-> prephitmp_1452
(590) _70 <-> prephitmp_1459
(590) _103 <-> prephitmp_1466
(590) _136 <-> prephitmp_1473
(590) _169 <-> prephitmp_1480
(590) _202 <-> prephitmp_1487
(590) _235 <-> prephitmp_1494
(590) _268 <-> prephitmp_1501
(590) _301 <-> prephitmp_1508
(590) _334 <-> prephitmp_1515
(590) _367 <-> prephitmp_1522
(590) _400 <-> prephitmp_1529
(590) _433 <-> prephitmp_1536
(590) _466 <-> prephitmp_1543
(590) _499 <-> prephitmp_1550
(590) _532 <-> prephitmp_1557
(590) v$0_535 <-> v$0_854
(590) v$1_536 <-> v$1_852
(590) v$2_537 <-> v$2_850
(590) v$3_538 <-> v$3_848
(590) v$4_539 <-> v$4_846
(590) v$5_540 <-> v$5_844
(590) v$6_541 <-> v$6_842
(590) v$7_542 <-> v$7_840
(590) v$8_544 <-> v$8_838
(590) v$9_546 <-> v$9_834
(590) v$10_548 <-> v$10_836
(590) v$11_550 <-> v$11_654
(590) v$13_672 <-> v$13_830
(590) v$12_678 <-> v$12_832
(590) v$14_713 <-> v$14_828
(590) ivtmp.149_806 <-> ivtmp.149_814
(590) v$15_816 <-> v$15_826
(294) v$12_553 <-> v$12_678
(294) v$13_554 <-> v$13_672
(294) v$14_556 <-> v$14_713
(294) v$15_557 <-> v$15_816

Partition map 

Partition 0 (datablock_5(D) - 5 )
Partition 1 (ivtmp_19 - 19 )
Partition 2 (_37 - 37 )
Partition 3 (_70 - 70 )
Partition 4 (_103 - 103 )
Partition 5 (_136 - 136 )
Partition 6 (_169 - 169 )
Partition 7 (_202 - 202 )
Partition 8 (_235 - 235 )
Partition 9 (_268 - 268 )
Partition 10 (_301 - 301 )
Partition 11 (_334 - 334 )
Partition 12 (_367 - 367 )
Partition 13 (_400 - 400 )
Partition 14 (_433 - 433 )
Partition 15 (_466 - 466 )
Partition 16 (_499 - 499 )
Partition 17 (_532 - 532 )
Partition 18 (state_534(D) - 534 )
Partition 19 (v$0_535 - 535 )
Partition 20 (v$1_536 - 536 )
Partition 21 (v$2_537 - 537 )
Partition 22 (v$3_538 - 538 )
Partition 23 (v$4_539 - 539 )
Partition 24 (v$5_540 - 540 )
Partition 25 (v$6_541 - 541 )
Partition 26 (v$7_542 - 542 )
Partition 27 (v$8_544 - 544 )
Partition 28 (v$9_546 - 546 )
Partition 29 (v$10_548 - 548 )
Partition 30 (v$11_550 - 550 )
Partition 31 (v$12_553 - 553 )
Partition 32 (v$13_554 - 554 )
Partition 33 (v$14_556 - 556 )
Partition 34 (v$15_557 - 557 )
Partition 35 (v$11_654 - 654 )
Partition 36 (v$13_672 - 672 )
Partition 37 (v$0_677 - 677 )
Partition 38 (v$12_678 - 678 )
Partition 39 (v$15_680 - 680 )
Partition 40 (v$10_682 - 682 )
Partition 41 (v$5_685 - 685 )
Partition 42 (v$1_709 - 709 )
Partition 43 (v$12_712 - 712 )
Partition 44 (v$14_713 - 713 )
Partition 45 (v$11_714 - 714 )
Partition 46 (v$6_717 - 717 )
Partition 47 (v$2_740 - 740 )
Partition 48 (v$13_743 - 743 )
Partition 49 (v$8_745 - 745 )
Partition 50 (v$7_748 - 748 )
Partition 51 (v$3_772 - 772 )
Partition 52 (v$14_775 - 775 )
Partition 53 (v$9_777 - 777 )
Partition 54 (v$4_780 - 780 )
Partition 55 (ivtmp.149_806 - 806 )
Partition 56 (ivtmp.149_810 - 810 )
Partition 57 (ivtmp.149_814 - 814 )
Partition 58 (v$15_816 - 816 )
Partition 59 (v$15_826 - 826 )
Partition 60 (v$14_828 - 828 )
Partition 61 (v$13_830 - 830 )
Partition 62 (v$12_832 - 832 )
Partition 63 (v$9_834 - 834 )
Partition 64 (v$10_836 - 836 )
Partition 65 (v$8_838 - 838 )
Partition 66 (v$7_840 - 840 )
Partition 67 (v$6_842 - 842 )
Partition 68 (v$5_844 - 844 )
Partition 69 (v$4_846 - 846 )
Partition 70 (v$3_848 - 848 )
Partition 71 (v$2_850 - 850 )
Partition 72 (v$1_852 - 852 )
Partition 73 (v$0_854 - 854 )
Partition 74 (ivtmp_895 - 895 )
Partition 75 (pretmp_1451 - 1451 )
Partition 76 (prephitmp_1452 - 1452 )
Partition 77 (pretmp_1456 - 1456 )
Partition 78 (prephitmp_1457 - 1457 )
Partition 79 (pretmp_1458 - 1458 )
Partition 80 (prephitmp_1459 - 1459 )
Partition 81 (pretmp_1460 - 1460 )
Partition 82 (prephitmp_1461 - 1461 )
Partition 83 (pretmp_1465 - 1465 )
Partition 84 (prephitmp_1466 - 1466 )
Partition 85 (pretmp_1470 - 1470 )
Partition 86 (prephitmp_1471 - 1471 )
Partition 87 (pretmp_1472 - 1472 )
Partition 88 (prephitmp_1473 - 1473 )
Partition 89 (pretmp_1474 - 1474 )
Partition 90 (prephitmp_1475 - 1475 )
Partition 91 (pretmp_1479 - 1479 )
Partition 92 (prephitmp_1480 - 1480 )
Partition 93 (pretmp_1484 - 1484 )
Partition 94 (prephitmp_1485 - 1485 )
Partition 95 (pretmp_1486 - 1486 )
Partition 96 (prephitmp_1487 - 1487 )
Partition 97 (pretmp_1488 - 1488 )
Partition 98 (prephitmp_1489 - 1489 )
Partition 99 (pretmp_1493 - 1493 )
Partition 100 (prephitmp_1494 - 1494 )
Partition 101 (pretmp_1498 - 1498 )
Partition 102 (prephitmp_1499 - 1499 )
Partition 103 (pretmp_1500 - 1500 )
Partition 104 (prephitmp_1501 - 1501 )
Partition 105 (pretmp_1502 - 1502 )
Partition 106 (prephitmp_1503 - 1503 )
Partition 107 (pretmp_1507 - 1507 )
Partition 108 (prephitmp_1508 - 1508 )
Partition 109 (pretmp_1512 - 1512 )
Partition 110 (prephitmp_1513 - 1513 )
Partition 111 (pretmp_1514 - 1514 )
Partition 112 (prephitmp_1515 - 1515 )
Partition 113 (pretmp_1516 - 1516 )
Partition 114 (prephitmp_1517 - 1517 )
Partition 115 (pretmp_1521 - 1521 )
Partition 116 (prephitmp_1522 - 1522 )
Partition 117 (pretmp_1526 - 1526 )
Partition 118 (prephitmp_1527 - 1527 )
Partition 119 (pretmp_1528 - 1528 )
Partition 120 (prephitmp_1529 - 1529 )
Partition 121 (pretmp_1530 - 1530 )
Partition 122 (prephitmp_1531 - 1531 )
Partition 123 (pretmp_1535 - 1535 )
Partition 124 (prephitmp_1536 - 1536 )
Partition 125 (pretmp_1540 - 1540 )
Partition 126 (prephitmp_1541 - 1541 )
Partition 127 (pretmp_1542 - 1542 )
Partition 128 (prephitmp_1543 - 1543 )
Partition 129 (pretmp_1544 - 1544 )
Partition 130 (prephitmp_1545 - 1545 )
Partition 131 (pretmp_1549 - 1549 )
Partition 132 (prephitmp_1550 - 1550 )
Partition 133 (pretmp_1554 - 1554 )
Partition 134 (prephitmp_1555 - 1555 )
Partition 135 (pretmp_1556 - 1556 )
Partition 136 (prephitmp_1557 - 1557 )
Partition 137 (pretmp_1558 - 1558 )
Partition 138 (prephitmp_1559 - 1559 )

Coalesce list: (19)ivtmp_19 & (895)ivtmp_895 [map: 1, 74] : Success -> 1
Coalesce list: (654)v$11_654 & (714)v$11_714 [map: 35, 45] : Success -> 35
Coalesce list: (677)v$0_677 & (854)v$0_854 [map: 37, 73] : Success -> 37
Coalesce list: (680)v$15_680 & (826)v$15_826 [map: 39, 59] : Success -> 39
Coalesce list: (682)v$10_682 & (836)v$10_836 [map: 40, 64] : Success -> 40
Coalesce list: (685)v$5_685 & (844)v$5_844 [map: 41, 68] : Success -> 41
Coalesce list: (709)v$1_709 & (852)v$1_852 [map: 42, 72] : Success -> 42
Coalesce list: (712)v$12_712 & (832)v$12_832 [map: 43, 62] : Success -> 43
Coalesce list: (717)v$6_717 & (842)v$6_842 [map: 46, 67] : Success -> 46
Coalesce list: (740)v$2_740 & (850)v$2_850 [map: 47, 71] : Success -> 47
Coalesce list: (743)v$13_743 & (830)v$13_830 [map: 48, 61] : Success -> 48
Coalesce list: (745)v$8_745 & (838)v$8_838 [map: 49, 65] : Success -> 49
Coalesce list: (748)v$7_748 & (840)v$7_840 [map: 50, 66] : Success -> 50
Coalesce list: (772)v$3_772 & (848)v$3_848 [map: 51, 70] : Success -> 51
Coalesce list: (775)v$14_775 & (828)v$14_828 [map: 52, 60] : Success -> 52
Coalesce list: (777)v$9_777 & (834)v$9_834 [map: 53, 63] : Success -> 53
Coalesce list: (780)v$4_780 & (846)v$4_846 [map: 54, 69] : Success -> 54
Coalesce list: (810)ivtmp.149_810 & (814)ivtmp.149_814 [map: 56, 57] : Success -> 56
Coalesce list: (1451)pretmp_1451 & (1452)prephitmp_1452 [map: 75, 76] : Success -> 75
Coalesce list: (1456)pretmp_1456 & (1457)prephitmp_1457 [map: 77, 78] : Success -> 77
Coalesce list: (1458)pretmp_1458 & (1459)prephitmp_1459 [map: 79, 80] : Success -> 79
Coalesce list: (1460)pretmp_1460 & (1461)prephitmp_1461 [map: 81, 82] : Success -> 81
Coalesce list: (1465)pretmp_1465 & (1466)prephitmp_1466 [map: 83, 84] : Success -> 83
Coalesce list: (1470)pretmp_1470 & (1471)prephitmp_1471 [map: 85, 86] : Success -> 85
Coalesce list: (1472)pretmp_1472 & (1473)prephitmp_1473 [map: 87, 88] : Success -> 87
Coalesce list: (1474)pretmp_1474 & (1475)prephitmp_1475 [map: 89, 90] : Success -> 89
Coalesce list: (1479)pretmp_1479 & (1480)prephitmp_1480 [map: 91, 92] : Success -> 91
Coalesce list: (1484)pretmp_1484 & (1485)prephitmp_1485 [map: 93, 94] : Success -> 93
Coalesce list: (1486)pretmp_1486 & (1487)prephitmp_1487 [map: 95, 96] : Success -> 95
Coalesce list: (1488)pretmp_1488 & (1489)prephitmp_1489 [map: 97, 98] : Success -> 97
Coalesce list: (1493)pretmp_1493 & (1494)prephitmp_1494 [map: 99, 100] : Success -> 99
Coalesce list: (1498)pretmp_1498 & (1499)prephitmp_1499 [map: 101, 102] : Success -> 101
Coalesce list: (1500)pretmp_1500 & (1501)prephitmp_1501 [map: 103, 104] : Success -> 103
Coalesce list: (1502)pretmp_1502 & (1503)prephitmp_1503 [map: 105, 106] : Success -> 105
Coalesce list: (1507)pretmp_1507 & (1508)prephitmp_1508 [map: 107, 108] : Success -> 107
Coalesce list: (1512)pretmp_1512 & (1513)prephitmp_1513 [map: 109, 110] : Success -> 109
Coalesce list: (1514)pretmp_1514 & (1515)prephitmp_1515 [map: 111, 112] : Success -> 111
Coalesce list: (1516)pretmp_1516 & (1517)prephitmp_1517 [map: 113, 114] : Success -> 113
Coalesce list: (1521)pretmp_1521 & (1522)prephitmp_1522 [map: 115, 116] : Success -> 115
Coalesce list: (1526)pretmp_1526 & (1527)prephitmp_1527 [map: 117, 118] : Success -> 117
Coalesce list: (1528)pretmp_1528 & (1529)prephitmp_1529 [map: 119, 120] : Success -> 119
Coalesce list: (1530)pretmp_1530 & (1531)prephitmp_1531 [map: 121, 122] : Success -> 121
Coalesce list: (1535)pretmp_1535 & (1536)prephitmp_1536 [map: 123, 124] : Success -> 123
Coalesce list: (1540)pretmp_1540 & (1541)prephitmp_1541 [map: 125, 126] : Success -> 125
Coalesce list: (1542)pretmp_1542 & (1543)prephitmp_1543 [map: 127, 128] : Success -> 127
Coalesce list: (1544)pretmp_1544 & (1545)prephitmp_1545 [map: 129, 130] : Success -> 129
Coalesce list: (1549)pretmp_1549 & (1550)prephitmp_1550 [map: 131, 132] : Success -> 131
Coalesce list: (1554)pretmp_1554 & (1555)prephitmp_1555 [map: 133, 134] : Success -> 133
Coalesce list: (1556)pretmp_1556 & (1557)prephitmp_1557 [map: 135, 136] : Success -> 135
Coalesce list: (1558)pretmp_1558 & (1559)prephitmp_1559 [map: 137, 138] : Success -> 137
Coalesce list: (37)_37 & (1452)pretmp_1451 [map: 2, 75] : Success -> 75
Coalesce list: (70)_70 & (1459)pretmp_1458 [map: 3, 79] : Success -> 79
Coalesce list: (103)_103 & (1466)pretmp_1465 [map: 4, 83] : Success -> 83
Coalesce list: (136)_136 & (1473)pretmp_1472 [map: 5, 87] : Success -> 87
Coalesce list: (169)_169 & (1480)pretmp_1479 [map: 6, 91] : Success -> 91
Coalesce list: (202)_202 & (1487)pretmp_1486 [map: 7, 95] : Success -> 95
Coalesce list: (235)_235 & (1494)pretmp_1493 [map: 8, 99] : Success -> 99
Coalesce list: (268)_268 & (1501)pretmp_1500 [map: 9, 103] : Success -> 103
Coalesce list: (301)_301 & (1508)pretmp_1507 [map: 10, 107] : Success -> 107
Coalesce list: (334)_334 & (1515)pretmp_1514 [map: 11, 111] : Success -> 111
Coalesce list: (367)_367 & (1522)pretmp_1521 [map: 12, 115] : Success -> 115
Coalesce list: (400)_400 & (1529)pretmp_1528 [map: 13, 119] : Success -> 119
Coalesce list: (433)_433 & (1536)pretmp_1535 [map: 14, 123] : Success -> 123
Coalesce list: (466)_466 & (1543)pretmp_1542 [map: 15, 127] : Success -> 127
Coalesce list: (499)_499 & (1550)pretmp_1549 [map: 16, 131] : Success -> 131
Coalesce list: (532)_532 & (1557)pretmp_1556 [map: 17, 135] : Success -> 135
Coalesce list: (535)v$0_535 & (854)v$0_677 [map: 19, 37] : Fail due to conflict
Coalesce list: (536)v$1_536 & (852)v$1_709 [map: 20, 42] : Fail due to conflict
Coalesce list: (537)v$2_537 & (850)v$2_740 [map: 21, 47] : Fail due to conflict
Coalesce list: (538)v$3_538 & (848)v$3_772 [map: 22, 51] : Fail due to conflict
Coalesce list: (539)v$4_539 & (846)v$4_780 [map: 23, 54] : Fail due to conflict
Coalesce list: (540)v$5_540 & (844)v$5_685 [map: 24, 41] : Fail due to conflict
Coalesce list: (541)v$6_541 & (842)v$6_717 [map: 25, 46] : Fail due to conflict
Coalesce list: (542)v$7_542 & (840)v$7_748 [map: 26, 50] : Fail due to conflict
Coalesce list: (544)v$8_544 & (838)v$8_745 [map: 27, 49] : Success -> 49
Coalesce list: (546)v$9_546 & (834)v$9_777 [map: 28, 53] : Success -> 53
Coalesce list: (548)v$10_548 & (836)v$10_682 [map: 29, 40] : Success -> 40
Coalesce list: (550)v$11_550 & (654)v$11_654 [map: 30, 35] : Success -> 35
Coalesce list: (672)v$13_672 & (830)v$13_743 [map: 36, 48] : Success -> 48
Coalesce list: (678)v$12_678 & (832)v$12_712 [map: 38, 43] : Success -> 43
Coalesce list: (713)v$14_713 & (828)v$14_775 [map: 44, 52] : Success -> 52
Coalesce list: (806)ivtmp.149_806 & (814)ivtmp.149_810 [map: 55, 56] : Success -> 56
Coalesce list: (816)v$15_816 & (826)v$15_680 [map: 58, 39] : Success -> 39
Coalesce list: (553)v$12_553 & (678)v$12_712 [map: 31, 43] : Success -> 43
Coalesce list: (554)v$13_554 & (672)v$13_743 [map: 32, 48] : Success -> 48
Coalesce list: (556)v$14_556 & (713)v$14_775 [map: 33, 52] : Success -> 52
Coalesce list: (557)v$15_557 & (816)v$15_680 [map: 34, 39] : Success -> 39
After Coalescing:

Partition map 

Partition 0 (load_dst_2 - 2 )
Partition 1 (datablock_5(D) - 5 )
Partition 2 (vect_cst_.113_6 - 6 )
Partition 3 (vect_cst_.114_7 - 7 )
Partition 4 (vect_cst_.115_8 - 8 )
Partition 5 (vect_cst_.116_9 - 9 )
Partition 6 (vect_cst_.117_10 - 10 )
Partition 7 (vect_cst_.118_11 - 11 )
Partition 8 (vect_cst_.119_12 - 12 )
Partition 9 (vect_cst_.120_13 - 13 )
Partition 10 (ivtmp_19 - 19 895 )
Partition 11 (vect_cst_.123_20 - 20 )
Partition 12 (vect_cst_.124_21 - 21 )
Partition 13 (vect_cst_.127_24 - 24 )
Partition 14 (vect_cst_.128_25 - 25 )
Partition 15 (vect_cst_.129_26 - 26 )
Partition 16 (vect_cst_.130_27 - 27 )
Partition 17 (vect__785.126_28 - 28 )
Partition 18 (vect__785.126_29 - 29 )
Partition 19 (vect__785.126_30 - 30 )
Partition 20 (vect__785.126_31 - 31 )
Partition 21 (vect_cst_.122_32 - 32 )
Partition 22 (vectp.132_33 - 33 )
Partition 23 (vectp.132_39 - 39 )
Partition 24 (vectp.132_49 - 49 )
Partition 25 (_53 - 53 )
Partition 26 (_54 - 54 )
Partition 27 (_55 - 55 )
Partition 28 (_68 - 68 )
Partition 29 (state_534(D) - 534 )
Partition 30 (v$0_535 - 535 )
Partition 31 (v$1_536 - 536 )
Partition 32 (v$2_537 - 537 )
Partition 33 (v$3_538 - 538 )
Partition 34 (v$4_539 - 539 )
Partition 35 (v$5_540 - 540 )
Partition 36 (v$6_541 - 541 )
Partition 37 (v$7_542 - 542 )
Partition 38 (_543 - 543 )
Partition 39 (_545 - 545 )
Partition 40 (_547 - 547 )
Partition 41 (_549 - 549 )
Partition 42 (_551 - 551 )
Partition 43 (_552 - 552 )
Partition 44 (_555 - 555 )
Partition 45 (_565 - 565 )
Partition 46 (_566 - 566 )
Partition 47 (_567 - 567 )
Partition 48 (_568 - 568 )
Partition 49 (_569 - 569 )
Partition 50 (_570 - 570 )
Partition 51 (_571 - 571 )
Partition 52 (_572 - 572 )
Partition 53 (_575 - 575 )
Partition 54 (_576 - 576 )
Partition 55 (_577 - 577 )
Partition 56 (_578 - 578 )
Partition 57 (_579 - 579 )
Partition 58 (_580 - 580 )
Partition 59 (_581 - 581 )
Partition 60 (_582 - 582 )
Partition 61 (_589 - 589 )
Partition 62 (_590 - 590 )
Partition 63 (_591 - 591 )
Partition 64 (_592 - 592 )
Partition 65 (_593 - 593 )
Partition 66 (_594 - 594 )
Partition 67 (_595 - 595 )
Partition 68 (_596 - 596 )
Partition 69 (_599 - 599 )
Partition 70 (_600 - 600 )
Partition 71 (_601 - 601 )
Partition 72 (_602 - 602 )
Partition 73 (_603 - 603 )
Partition 74 (_604 - 604 )
Partition 75 (_605 - 605 )
Partition 76 (_606 - 606 )
Partition 77 (_613 - 613 )
Partition 78 (_614 - 614 )
Partition 79 (_615 - 615 )
Partition 80 (_616 - 616 )
Partition 81 (_617 - 617 )
Partition 82 (_618 - 618 )
Partition 83 (_619 - 619 )
Partition 84 (_620 - 620 )
Partition 85 (_623 - 623 )
Partition 86 (_624 - 624 )
Partition 87 (_625 - 625 )
Partition 88 (_626 - 626 )
Partition 89 (_627 - 627 )
Partition 90 (_628 - 628 )
Partition 91 (_629 - 629 )
Partition 92 (_630 - 630 )
Partition 93 (_637 - 637 )
Partition 94 (_638 - 638 )
Partition 95 (_639 - 639 )
Partition 96 (_640 - 640 )
Partition 97 (_641 - 641 )
Partition 98 (_642 - 642 )
Partition 99 (_643 - 643 )
Partition 100 (_644 - 644 )
Partition 101 (_647 - 647 )
Partition 102 (_648 - 648 )
Partition 103 (_649 - 649 )
Partition 104 (_650 - 650 )
Partition 105 (_651 - 651 )
Partition 106 (_652 - 652 )
Partition 107 (_653 - 653 )
Partition 108 (v$11_654 - 550 654 714 )
Partition 109 (_655 - 655 )
Partition 110 (_662 - 662 )
Partition 111 (_663 - 663 )
Partition 112 (_665 - 665 )
Partition 113 (_666 - 666 )
Partition 114 (_668 - 668 )
Partition 115 (_670 - 670 )
Partition 116 (_671 - 671 )
Partition 117 (_673 - 673 )
Partition 118 (_676 - 676 )
Partition 119 (v$0_677 - 677 854 )
Partition 120 (_679 - 679 )
Partition 121 (v$15_680 - 557 680 816 826 )
Partition 122 (v$10_682 - 548 682 836 )
Partition 123 (load_dst_683 - 683 )
Partition 124 (_684 - 684 )
Partition 125 (v$5_685 - 685 844 )
Partition 126 (_687 - 687 )
Partition 127 (_694 - 694 )
Partition 128 (_695 - 695 )
Partition 129 (_697 - 697 )
Partition 130 (_698 - 698 )
Partition 131 (_700 - 700 )
Partition 132 (_702 - 702 )
Partition 133 (_703 - 703 )
Partition 134 (_705 - 705 )
Partition 135 (_708 - 708 )
Partition 136 (v$1_709 - 709 852 )
Partition 137 (_711 - 711 )
Partition 138 (v$12_712 - 553 678 712 832 )
Partition 139 (load_dst_715 - 715 )
Partition 140 (_716 - 716 )
Partition 141 (v$6_717 - 717 842 )
Partition 142 (_718 - 718 )
Partition 143 (_725 - 725 )
Partition 144 (_726 - 726 )
Partition 145 (_728 - 728 )
Partition 146 (_729 - 729 )
Partition 147 (_731 - 731 )
Partition 148 (_733 - 733 )
Partition 149 (_734 - 734 )
Partition 150 (_736 - 736 )
Partition 151 (_739 - 739 )
Partition 152 (v$2_740 - 740 850 )
Partition 153 (_742 - 742 )
Partition 154 (v$13_743 - 554 672 743 830 )
Partition 155 (v$8_745 - 544 745 838 )
Partition 156 (_747 - 747 )
Partition 157 (v$7_748 - 748 840 )
Partition 158 (load_dst_749 - 749 )
Partition 159 (_750 - 750 )
Partition 160 (_757 - 757 )
Partition 161 (_758 - 758 )
Partition 162 (_760 - 760 )
Partition 163 (_761 - 761 )
Partition 164 (_763 - 763 )
Partition 165 (_765 - 765 )
Partition 166 (_766 - 766 )
Partition 167 (_768 - 768 )
Partition 168 (_771 - 771 )
Partition 169 (v$3_772 - 772 848 )
Partition 170 (_774 - 774 )
Partition 171 (v$14_775 - 556 713 775 828 )
Partition 172 (load_dst_776 - 776 )
Partition 173 (v$9_777 - 546 777 834 )
Partition 174 (_779 - 779 )
Partition 175 (v$4_780 - 780 846 )
Partition 176 (_782 - 782 )
Partition 177 (_783 - 783 )
Partition 178 (load_dst_784 - 784 )
Partition 179 (_802 - 802 )
Partition 180 (ivtmp.149_810 - 806 810 814 )
Partition 181 (load_dst_821 - 821 )
Partition 182 (_823 - 823 )
Partition 183 (load_dst_831 - 831 )
Partition 184 (load_dst_841 - 841 )
Partition 185 (load_dst_857 - 857 )
Partition 186 (load_dst_863 - 863 )
Partition 187 (load_dst_869 - 869 )
Partition 188 (load_dst_875 - 875 )
Partition 189 (load_dst_881 - 881 )
Partition 190 (load_dst_887 - 887 )
Partition 191 (_888 - 888 )
Partition 192 (_889 - 889 )
Partition 193 (vectp.132_891 - 891 )
Partition 194 (load_dst_892 - 892 )
Partition 195 (vect_cst_.125_893 - 893 )
Partition 196 (pretmp_1448 - 1448 )
Partition 197 (pretmp_1450 - 1450 )
Partition 198 (pretmp_1451 - 37 1451 1452 )
Partition 199 (pretmp_1453 - 1453 )
Partition 200 (pretmp_1455 - 1455 )
Partition 201 (pretmp_1456 - 1456 1457 )
Partition 202 (pretmp_1458 - 70 1458 1459 )
Partition 203 (pretmp_1460 - 1460 1461 )
Partition 204 (pretmp_1462 - 1462 )
Partition 205 (pretmp_1464 - 1464 )
Partition 206 (pretmp_1465 - 103 1465 1466 )
Partition 207 (pretmp_1467 - 1467 )
Partition 208 (pretmp_1469 - 1469 )
Partition 209 (pretmp_1470 - 1470 1471 )
Partition 210 (pretmp_1472 - 136 1472 1473 )
Partition 211 (pretmp_1474 - 1474 1475 )
Partition 212 (pretmp_1476 - 1476 )
Partition 213 (pretmp_1478 - 1478 )
Partition 214 (pretmp_1479 - 169 1479 1480 )
Partition 215 (pretmp_1481 - 1481 )
Partition 216 (pretmp_1483 - 1483 )
Partition 217 (pretmp_1484 - 1484 1485 )
Partition 218 (pretmp_1486 - 202 1486 1487 )
Partition 219 (pretmp_1488 - 1488 1489 )
Partition 220 (pretmp_1490 - 1490 )
Partition 221 (pretmp_1492 - 1492 )
Partition 222 (pretmp_1493 - 235 1493 1494 )
Partition 223 (pretmp_1495 - 1495 )
Partition 224 (pretmp_1497 - 1497 )
Partition 225 (pretmp_1498 - 1498 1499 )
Partition 226 (pretmp_1500 - 268 1500 1501 )
Partition 227 (pretmp_1502 - 1502 1503 )
Partition 228 (pretmp_1504 - 1504 )
Partition 229 (pretmp_1506 - 1506 )
Partition 230 (pretmp_1507 - 301 1507 1508 )
Partition 231 (pretmp_1509 - 1509 )
Partition 232 (pretmp_1511 - 1511 )
Partition 233 (pretmp_1512 - 1512 1513 )
Partition 234 (pretmp_1514 - 334 1514 1515 )
Partition 235 (pretmp_1516 - 1516 1517 )
Partition 236 (pretmp_1518 - 1518 )
Partition 237 (pretmp_1520 - 1520 )
Partition 238 (pretmp_1521 - 367 1521 1522 )
Partition 239 (pretmp_1523 - 1523 )
Partition 240 (pretmp_1525 - 1525 )
Partition 241 (pretmp_1526 - 1526 1527 )
Partition 242 (pretmp_1528 - 400 1528 1529 )
Partition 243 (pretmp_1530 - 1530 1531 )
Partition 244 (pretmp_1532 - 1532 )
Partition 245 (pretmp_1534 - 1534 )
Partition 246 (pretmp_1535 - 433 1535 1536 )
Partition 247 (pretmp_1537 - 1537 )
Partition 248 (pretmp_1539 - 1539 )
Partition 249 (pretmp_1540 - 1540 1541 )
Partition 250 (pretmp_1542 - 466 1542 1543 )
Partition 251 (pretmp_1544 - 1544 1545 )
Partition 252 (pretmp_1546 - 1546 )
Partition 253 (pretmp_1548 - 1548 )
Partition 254 (pretmp_1549 - 499 1549 1550 )
Partition 255 (pretmp_1551 - 1551 )
Partition 256 (pretmp_1553 - 1553 )
Partition 257 (pretmp_1554 - 1554 1555 )
Partition 258 (pretmp_1556 - 532 1556 1557 )
Partition 259 (pretmp_1558 - 1558 1559 )


Replacing Expressions
load_dst_2 replace with --> load_dst_2 = MEM[(const BitSequence *)datablock_5(D) + 56B];

vect_cst_.113_6 replace with --> vect_cst_.113_6 = {v$6_541, v$7_542};

vect_cst_.114_7 replace with --> vect_cst_.114_7 = {v$4_539, v$5_540};

vect_cst_.115_8 replace with --> vect_cst_.115_8 = {v$2_537, v$3_538};

vect_cst_.116_9 replace with --> vect_cst_.116_9 = {v$0_535, v$1_536};

vect_cst_.117_10 replace with --> vect_cst_.117_10 = {_547, _549};

vect_cst_.118_11 replace with --> vect_cst_.118_11 = {_543, _545};

vect_cst_.119_12 replace with --> vect_cst_.119_12 = {_547, _549};

vect_cst_.120_13 replace with --> vect_cst_.120_13 = {_543, _545};

vect_cst_.123_20 replace with --> vect_cst_.123_20 = {v$12_712, v$13_743};

vect_cst_.124_21 replace with --> vect_cst_.124_21 = {v$2_740, v$3_772};

vect_cst_.127_24 replace with --> vect_cst_.127_24 = {v$6_717, v$7_748};

vect_cst_.128_25 replace with --> vect_cst_.128_25 = {v$4_780, v$5_685};

vect_cst_.129_26 replace with --> vect_cst_.129_26 = {v$10_682, v$11_714};

vect_cst_.130_27 replace with --> vect_cst_.130_27 = {v$8_745, v$9_777};

vect__785.126_28 replace with --> vect__785.126_28 = vect_cst_.116_9 ^ _55;

vect__785.126_29 replace with --> vect__785.126_29 = vect_cst_.115_8 ^ _889;

vect__785.126_30 replace with --> vect__785.126_30 = vect_cst_.114_7 ^ _54;

vect__785.126_31 replace with --> vect__785.126_31 = vect_cst_.113_6 ^ _782;

vect_cst_.122_32 replace with --> vect_cst_.122_32 = {v$14_775, v$15_680};

_53 replace with --> _53 = vect_cst_.123_20 ^ vect_cst_.128_25;

_54 replace with --> _54 = vect_cst_.118_11 ^ _53;

_55 replace with --> _55 = vect_cst_.120_13 ^ _68;

_68 replace with --> _68 = vect_cst_.130_27 ^ vect_cst_.125_893;

_551 replace with --> _551 = state_534(D)->nullt;

_565 replace with --> _565 = prephitmp_1452 ^ prephitmp_1457;

_567 replace with --> _567 = _566 ^ v$12_832;

_570 replace with --> _570 = _569 ^ v$4_846;

_572 replace with --> _572 = _565 + v$4_846;

_575 replace with --> _575 = prephitmp_1459 ^ prephitmp_1461;

_577 replace with --> _577 = _568 ^ _576;

_580 replace with --> _580 = _571 ^ _579;

_582 replace with --> _582 = _566 + _575;

_589 replace with --> _589 = prephitmp_1466 ^ prephitmp_1471;

_591 replace with --> _591 = _590 ^ v$13_830;

_594 replace with --> _594 = _593 ^ v$5_844;

_596 replace with --> _596 = _589 + v$5_844;

_599 replace with --> _599 = prephitmp_1473 ^ prephitmp_1475;

_601 replace with --> _601 = _592 ^ _600;

_604 replace with --> _604 = _595 ^ _603;

_606 replace with --> _606 = _590 + _599;

_613 replace with --> _613 = prephitmp_1480 ^ prephitmp_1485;

_615 replace with --> _615 = _614 ^ v$14_828;

_618 replace with --> _618 = _617 ^ v$6_842;

_620 replace with --> _620 = _613 + v$6_842;

_623 replace with --> _623 = prephitmp_1487 ^ prephitmp_1489;

_625 replace with --> _625 = _616 ^ _624;

_628 replace with --> _628 = _619 ^ _627;

_630 replace with --> _630 = _614 + _623;

_637 replace with --> _637 = prephitmp_1494 ^ prephitmp_1499;

_639 replace with --> _639 = _638 ^ v$15_826;

_642 replace with --> _642 = _641 ^ v$7_840;

_644 replace with --> _644 = _637 + v$7_840;

_647 replace with --> _647 = prephitmp_1501 ^ prephitmp_1503;

_649 replace with --> _649 = _640 ^ _648;

_652 replace with --> _652 = _643 ^ _651;

_655 replace with --> _655 = _638 + _647;

_662 replace with --> _662 = prephitmp_1508 ^ prephitmp_1513;

_665 replace with --> _665 = _650 ^ _663;

_670 replace with --> _670 = _605 ^ _668;

_673 replace with --> _673 = _576 + _662;

_676 replace with --> _676 = prephitmp_1515 ^ prephitmp_1517;

_679 replace with --> _679 = _666 ^ v$0_677;

load_dst_683 replace with --> load_dst_683 = MEM[(const BitSequence *)datablock_5(D) + 64B];

_684 replace with --> _684 = _671 ^ v$10_682;

_687 replace with --> _687 = _663 + _676;

_694 replace with --> _694 = prephitmp_1522 ^ prephitmp_1527;

_697 replace with --> _697 = _578 ^ _695;

_702 replace with --> _702 = _629 ^ _700;

_705 replace with --> _705 = _600 + _694;

_708 replace with --> _708 = prephitmp_1529 ^ prephitmp_1531;

_711 replace with --> _711 = _698 ^ v$1_709;

load_dst_715 replace with --> load_dst_715 = MEM[(const BitSequence *)datablock_5(D) + 96B];

_716 replace with --> _716 = _703 ^ v$11_714;

_718 replace with --> _718 = _695 + _708;

_725 replace with --> _725 = prephitmp_1536 ^ prephitmp_1541;

_728 replace with --> _728 = _602 ^ _726;

_733 replace with --> _733 = _653 ^ _731;

_736 replace with --> _736 = _624 + _725;

_739 replace with --> _739 = prephitmp_1543 ^ prephitmp_1545;

_742 replace with --> _742 = _729 ^ v$2_740;

_747 replace with --> _747 = _734 ^ v$8_745;

load_dst_749 replace with --> load_dst_749 = MEM[(const BitSequence *)datablock_5(D) + 88B];

_750 replace with --> _750 = _726 + _739;

_757 replace with --> _757 = prephitmp_1550 ^ prephitmp_1555;

_760 replace with --> _760 = _626 ^ _758;

_765 replace with --> _765 = _581 ^ _763;

_768 replace with --> _768 = _648 + _757;

_771 replace with --> _771 = prephitmp_1557 ^ prephitmp_1559;

_774 replace with --> _774 = _761 ^ v$3_772;

load_dst_776 replace with --> load_dst_776 = MEM[(const BitSequence *)datablock_5(D) + 80B];

_779 replace with --> _779 = _766 ^ v$9_777;

_782 replace with --> _782 = vect_cst_.117_10 ^ _823;

_783 replace with --> _783 = _758 + _771;

load_dst_784 replace with --> load_dst_784 = MEM[(const BitSequence *)datablock_5(D) + 120B];

load_dst_821 replace with --> load_dst_821 = MEM[(const BitSequence *)datablock_5(D) + 72B];

_823 replace with --> _823 = vect_cst_.127_24 ^ vect_cst_.122_32;

load_dst_831 replace with --> load_dst_831 = MEM[(const BitSequence *)datablock_5(D) + 104B];

load_dst_841 replace with --> load_dst_841 = MEM[(const BitSequence *)datablock_5(D) + 112B];

load_dst_857 replace with --> load_dst_857 = MEM[(const BitSequence *)datablock_5(D) + 48B];

load_dst_863 replace with --> load_dst_863 = MEM[(const BitSequence *)datablock_5(D) + 40B];

load_dst_869 replace with --> load_dst_869 = MEM[(const BitSequence *)datablock_5(D) + 32B];

load_dst_875 replace with --> load_dst_875 = MEM[(const BitSequence *)datablock_5(D) + 24B];

load_dst_881 replace with --> load_dst_881 = MEM[(const BitSequence *)datablock_5(D) + 16B];

load_dst_887 replace with --> load_dst_887 = MEM[(const BitSequence *)datablock_5(D) + 8B];

_888 replace with --> _888 = vect_cst_.124_21 ^ vect_cst_.129_26;

_889 replace with --> _889 = vect_cst_.119_12 ^ _888;

load_dst_892 replace with --> load_dst_892 = MEM[(const BitSequence *)datablock_5(D)];

vect_cst_.125_893 replace with --> vect_cst_.125_893 = {v$0_677, v$1_709};

pretmp_1448 replace with --> pretmp_1448 = MEM[base: _802, offset: 0B];

pretmp_1453 replace with --> pretmp_1453 = MEM[base: _802, offset: 1B];

pretmp_1462 replace with --> pretmp_1462 = MEM[base: _802, offset: 2B];

pretmp_1467 replace with --> pretmp_1467 = MEM[base: _802, offset: 3B];

pretmp_1476 replace with --> pretmp_1476 = MEM[base: _802, offset: 4B];

pretmp_1481 replace with --> pretmp_1481 = MEM[base: _802, offset: 5B];

pretmp_1490 replace with --> pretmp_1490 = MEM[base: _802, offset: 6B];

pretmp_1495 replace with --> pretmp_1495 = MEM[base: _802, offset: 7B];

pretmp_1504 replace with --> pretmp_1504 = MEM[base: _802, offset: 8B];

pretmp_1509 replace with --> pretmp_1509 = MEM[base: _802, offset: 9B];

pretmp_1518 replace with --> pretmp_1518 = MEM[base: _802, offset: 10B];

pretmp_1523 replace with --> pretmp_1523 = MEM[base: _802, offset: 11B];

pretmp_1532 replace with --> pretmp_1532 = MEM[base: _802, offset: 12B];

pretmp_1537 replace with --> pretmp_1537 = MEM[base: _802, offset: 13B];

pretmp_1546 replace with --> pretmp_1546 = MEM[base: _802, offset: 14B];

pretmp_1551 replace with --> pretmp_1551 = MEM[base: _802, offset: 15B];


compress64 (struct hashState * state, const BitSequence * datablock)
{
  unsigned long ivtmp.149;
  vector(2) long long unsigned int * vectp.132;
  vector(2) long long unsigned int vect_cst_.130;
  vector(2) long long unsigned int vect_cst_.129;
  vector(2) long long unsigned int vect_cst_.128;
  vector(2) long long unsigned int vect_cst_.127;
  vector(2) long long unsigned int vect__785.126;
  vector(2) long long unsigned int vect_cst_.125;
  vector(2) long long unsigned int vect_cst_.124;
  vector(2) long long unsigned int vect_cst_.123;
  vector(2) long long unsigned int vect_cst_.122;
  vector(2) long long unsigned int vect_cst_.120;
  vector(2) long long unsigned int vect_cst_.119;
  vector(2) long long unsigned int vect_cst_.118;
  vector(2) long long unsigned int vect_cst_.117;
  vector(2) long long unsigned int vect_cst_.116;
  vector(2) long long unsigned int vect_cst_.115;
  vector(2) long long unsigned int vect_cst_.114;
  vector(2) long long unsigned int vect_cst_.113;
  long long unsigned int v$15;
  long long unsigned int v$14;
  long long unsigned int v$13;
  long long unsigned int v$12;
  long long unsigned int v$11;
  long long unsigned int v$10;
  long long unsigned int v$9;
  long long unsigned int v$8;
  long long unsigned int v$7;
  long long unsigned int v$6;
  long long unsigned int v$5;
  long long unsigned int v$4;
  long long unsigned int v$3;
  long long unsigned int v$2;
  long long unsigned int v$1;
  long long unsigned int v$0;
  u64 m[16];
  long unsigned int load_dst_2;
  unsigned int ivtmp_19;
  long long unsigned int _37;
  vector(2) long long unsigned int _53;
  vector(2) long long unsigned int _54;
  vector(2) long long unsigned int _55;
  vector(2) long long unsigned int _68;
  long long unsigned int _70;
  long long unsigned int _103;
  long long unsigned int _136;
  long long unsigned int _169;
  long long unsigned int _202;
  long long unsigned int _235;
  long long unsigned int _268;
  long long unsigned int _301;
  long long unsigned int _334;
  long long unsigned int _367;
  long long unsigned int _400;
  long long unsigned int _433;
  long long unsigned int _466;
  long long unsigned int _499;
  long long unsigned int _532;
  long long unsigned int _543;
  long long unsigned int _545;
  long long unsigned int _547;
  long long unsigned int _549;
  int _551;
  long long unsigned int _552;
  long long unsigned int _555;
  long long unsigned int _565;
  long long unsigned int _566;
  long long unsigned int _567;
  long long unsigned int _568;
  long long unsigned int _569;
  long long unsigned int _570;
  long long unsigned int _571;
  long long unsigned int _572;
  long long unsigned int _575;
  long long unsigned int _576;
  long long unsigned int _577;
  long long unsigned int _578;
  long long unsigned int _579;
  long long unsigned int _580;
  long long unsigned int _581;
  long long unsigned int _582;
  long long unsigned int _589;
  long long unsigned int _590;
  long long unsigned int _591;
  long long unsigned int _592;
  long long unsigned int _593;
  long long unsigned int _594;
  long long unsigned int _595;
  long long unsigned int _596;
  long long unsigned int _599;
  long long unsigned int _600;
  long long unsigned int _601;
  long long unsigned int _602;
  long long unsigned int _603;
  long long unsigned int _604;
  long long unsigned int _605;
  long long unsigned int _606;
  long long unsigned int _613;
  long long unsigned int _614;
  long long unsigned int _615;
  long long unsigned int _616;
  long long unsigned int _617;
  long long unsigned int _618;
  long long unsigned int _619;
  long long unsigned int _620;
  long long unsigned int _623;
  long long unsigned int _624;
  long long unsigned int _625;
  long long unsigned int _626;
  long long unsigned int _627;
  long long unsigned int _628;
  long long unsigned int _629;
  long long unsigned int _630;
  long long unsigned int _637;
  long long unsigned int _638;
  long long unsigned int _639;
  long long unsigned int _640;
  long long unsigned int _641;
  long long unsigned int _642;
  long long unsigned int _643;
  long long unsigned int _644;
  long long unsigned int _647;
  long long unsigned int _648;
  long long unsigned int _649;
  long long unsigned int _650;
  long long unsigned int _651;
  long long unsigned int _652;
  long long unsigned int _653;
  long long unsigned int _655;
  long long unsigned int _662;
  long long unsigned int _663;
  long long unsigned int _665;
  long long unsigned int _666;
  long long unsigned int _668;
  long long unsigned int _670;
  long long unsigned int _671;
  long long unsigned int _673;
  long long unsigned int _676;
  long long unsigned int _679;
  long unsigned int load_dst_683;
  long long unsigned int _684;
  long long unsigned int _687;
  long long unsigned int _694;
  long long unsigned int _695;
  long long unsigned int _697;
  long long unsigned int _698;
  long long unsigned int _700;
  long long unsigned int _702;
  long long unsigned int _703;
  long long unsigned int _705;
  long long unsigned int _708;
  long long unsigned int _711;
  long unsigned int load_dst_715;
  long long unsigned int _716;
  long long unsigned int _718;
  long long unsigned int _725;
  long long unsigned int _726;
  long long unsigned int _728;
  long long unsigned int _729;
  long long unsigned int _731;
  long long unsigned int _733;
  long long unsigned int _734;
  long long unsigned int _736;
  long long unsigned int _739;
  long long unsigned int _742;
  long long unsigned int _747;
  long unsigned int load_dst_749;
  long long unsigned int _750;
  long long unsigned int _757;
  long long unsigned int _758;
  long long unsigned int _760;
  long long unsigned int _761;
  long long unsigned int _763;
  long long unsigned int _765;
  long long unsigned int _766;
  long long unsigned int _768;
  long long unsigned int _771;
  long long unsigned int _774;
  long unsigned int load_dst_776;
  long long unsigned int _779;
  vector(2) long long unsigned int _782;
  long long unsigned int _783;
  long unsigned int load_dst_784;
  void * _802;
  long unsigned int load_dst_821;
  vector(2) long long unsigned int _823;
  long unsigned int load_dst_831;
  long unsigned int load_dst_841;
  long unsigned int load_dst_857;
  long unsigned int load_dst_863;
  long unsigned int load_dst_869;
  long unsigned int load_dst_875;
  long unsigned int load_dst_881;
  long unsigned int load_dst_887;
  vector(2) long long unsigned int _888;
  vector(2) long long unsigned int _889;
  long unsigned int load_dst_892;
  unsigned int ivtmp_895;
  const unsigned char pretmp_1448;
  int pretmp_1450;
  u64 pretmp_1451;
  u64 prephitmp_1452;
  const unsigned char pretmp_1453;
  int pretmp_1455;
  const u64 pretmp_1456;
  const u64 prephitmp_1457;
  u64 pretmp_1458;
  u64 prephitmp_1459;
  const u64 pretmp_1460;
  const u64 prephitmp_1461;
  const unsigned char pretmp_1462;
  int pretmp_1464;
  u64 pretmp_1465;
  u64 prephitmp_1466;
  const unsigned char pretmp_1467;
  int pretmp_1469;
  const u64 pretmp_1470;
  const u64 prephitmp_1471;
  u64 pretmp_1472;
  u64 prephitmp_1473;
  const u64 pretmp_1474;
  const u64 prephitmp_1475;
  const unsigned char pretmp_1476;
  int pretmp_1478;
  u64 pretmp_1479;
  u64 prephitmp_1480;
  const unsigned char pretmp_1481;
  int pretmp_1483;
  const u64 pretmp_1484;
  const u64 prephitmp_1485;
  u64 pretmp_1486;
  u64 prephitmp_1487;
  const u64 pretmp_1488;
  const u64 prephitmp_1489;
  const unsigned char pretmp_1490;
  int pretmp_1492;
  u64 pretmp_1493;
  u64 prephitmp_1494;
  const unsigned char pretmp_1495;
  int pretmp_1497;
  const u64 pretmp_1498;
  const u64 prephitmp_1499;
  u64 pretmp_1500;
  u64 prephitmp_1501;
  const u64 pretmp_1502;
  const u64 prephitmp_1503;
  const unsigned char pretmp_1504;
  int pretmp_1506;
  u64 pretmp_1507;
  u64 prephitmp_1508;
  const unsigned char pretmp_1509;
  int pretmp_1511;
  const u64 pretmp_1512;
  const u64 prephitmp_1513;
  u64 pretmp_1514;
  u64 prephitmp_1515;
  const u64 pretmp_1516;
  const u64 prephitmp_1517;
  const unsigned char pretmp_1518;
  int pretmp_1520;
  u64 pretmp_1521;
  u64 prephitmp_1522;
  const unsigned char pretmp_1523;
  int pretmp_1525;
  const u64 pretmp_1526;
  const u64 prephitmp_1527;
  u64 pretmp_1528;
  u64 prephitmp_1529;
  const u64 pretmp_1530;
  const u64 prephitmp_1531;
  const unsigned char pretmp_1532;
  int pretmp_1534;
  u64 pretmp_1535;
  u64 prephitmp_1536;
  const unsigned char pretmp_1537;
  int pretmp_1539;
  const u64 pretmp_1540;
  const u64 prephitmp_1541;
  u64 pretmp_1542;
  u64 prephitmp_1543;
  const u64 pretmp_1544;
  const u64 prephitmp_1545;
  const unsigned char pretmp_1546;
  int pretmp_1548;
  u64 pretmp_1549;
  u64 prephitmp_1550;
  const unsigned char pretmp_1551;
  int pretmp_1553;
  const u64 pretmp_1554;
  const u64 prephitmp_1555;
  u64 pretmp_1556;
  u64 prephitmp_1557;
  const u64 pretmp_1558;
  const u64 prephitmp_1559;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  load_dst_892 = MEM[(const BitSequence *)datablock_5(D)];
  _37 = __builtin_bswap64 (load_dst_892);
  m[0] = _37;
  load_dst_887 = MEM[(const BitSequence *)datablock_5(D) + 8B];
  _70 = __builtin_bswap64 (load_dst_887);
  m[1] = _70;
  load_dst_881 = MEM[(const BitSequence *)datablock_5(D) + 16B];
  _103 = __builtin_bswap64 (load_dst_881);
  m[2] = _103;
  load_dst_875 = MEM[(const BitSequence *)datablock_5(D) + 24B];
  _136 = __builtin_bswap64 (load_dst_875);
  m[3] = _136;
  load_dst_869 = MEM[(const BitSequence *)datablock_5(D) + 32B];
  _169 = __builtin_bswap64 (load_dst_869);
  m[4] = _169;
  load_dst_863 = MEM[(const BitSequence *)datablock_5(D) + 40B];
  _202 = __builtin_bswap64 (load_dst_863);
  m[5] = _202;
  load_dst_857 = MEM[(const BitSequence *)datablock_5(D) + 48B];
  _235 = __builtin_bswap64 (load_dst_857);
  m[6] = _235;
  load_dst_2 = MEM[(const BitSequence *)datablock_5(D) + 56B];
  _268 = __builtin_bswap64 (load_dst_2);
  m[7] = _268;
  load_dst_683 = MEM[(const BitSequence *)datablock_5(D) + 64B];
  _301 = __builtin_bswap64 (load_dst_683);
  m[8] = _301;
  load_dst_821 = MEM[(const BitSequence *)datablock_5(D) + 72B];
  _334 = __builtin_bswap64 (load_dst_821);
  m[9] = _334;
  load_dst_776 = MEM[(const BitSequence *)datablock_5(D) + 80B];
  _367 = __builtin_bswap64 (load_dst_776);
  m[10] = _367;
  load_dst_749 = MEM[(const BitSequence *)datablock_5(D) + 88B];
  _400 = __builtin_bswap64 (load_dst_749);
  m[11] = _400;
  load_dst_715 = MEM[(const BitSequence *)datablock_5(D) + 96B];
  _433 = __builtin_bswap64 (load_dst_715);
  m[12] = _433;
  load_dst_831 = MEM[(const BitSequence *)datablock_5(D) + 104B];
  _466 = __builtin_bswap64 (load_dst_831);
  m[13] = _466;
  load_dst_841 = MEM[(const BitSequence *)datablock_5(D) + 112B];
  _499 = __builtin_bswap64 (load_dst_841);
  m[14] = _499;
  load_dst_784 = MEM[(const BitSequence *)datablock_5(D) + 120B];
  _532 = __builtin_bswap64 (load_dst_784);
  m[15] = _532;
  v$0_535 = state_534(D)->h64[0];
  v$1_536 = state_534(D)->h64[1];
  v$2_537 = state_534(D)->h64[2];
  v$3_538 = state_534(D)->h64[3];
  v$4_539 = state_534(D)->h64[4];
  v$5_540 = state_534(D)->h64[5];
  v$6_541 = state_534(D)->h64[6];
  v$7_542 = state_534(D)->h64[7];
  _543 = state_534(D)->salt64[0];
  v$8_544 = _543 ^ 2611923443488327891;
  _545 = state_534(D)->salt64[1];
  v$9_546 = _545 ^ 1376283091369227076;
  _547 = state_534(D)->salt64[2];
  v$10_548 = _547 ^ 11820040416388919760;
  _549 = state_534(D)->salt64[3];
  v$11_550 = _549 ^ 589684135938649225;
  _551 = state_534(D)->nullt;
  if (_551 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4
;;                3

;;   basic block 3, loop depth 0
;;    pred:       2
  _552 = state_534(D)->t64[0];
  v$12_553 = _552 ^ 4983270260364809079;
  v$13_554 = _552 ^ 13714699805381954668;
  _555 = state_534(D)->t64[1];
  v$14_556 = _555 ^ 13883517620612518109;
  v$15_557 = _555 ^ 4577018097722394903;
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  # v$12_678 = PHI <4983270260364809079(2), v$12_553(3)>
  # v$13_672 = PHI <13714699805381954668(2), v$13_554(3)>
  # v$14_713 = PHI <13883517620612518109(2), v$14_556(3)>
  # v$15_816 = PHI <4577018097722394903(2), v$15_557(3)>
  ivtmp.149_806 = (unsigned long) &sigma;
;;    succ:       5

;;   basic block 5, loop depth 1
;;    pred:       6
;;                4
  # v$15_826 = PHI <v$15_680(6), v$15_816(4)>
  # v$14_828 = PHI <v$14_775(6), v$14_713(4)>
  # v$13_830 = PHI <v$13_743(6), v$13_672(4)>
  # v$12_832 = PHI <v$12_712(6), v$12_678(4)>
  # v$11_654 = PHI <v$11_714(6), v$11_550(4)>
  # v$10_836 = PHI <v$10_682(6), v$10_548(4)>
  # v$9_834 = PHI <v$9_777(6), v$9_546(4)>
  # v$8_838 = PHI <v$8_745(6), v$8_544(4)>
  # v$7_840 = PHI <v$7_748(6), v$7_542(4)>
  # v$6_842 = PHI <v$6_717(6), v$6_541(4)>
  # v$5_844 = PHI <v$5_685(6), v$5_540(4)>
  # v$4_846 = PHI <v$4_780(6), v$4_539(4)>
  # v$3_848 = PHI <v$3_772(6), v$3_538(4)>
  # v$2_850 = PHI <v$2_740(6), v$2_537(4)>
  # v$1_852 = PHI <v$1_709(6), v$1_536(4)>
  # v$0_854 = PHI <v$0_677(6), v$0_535(4)>
  # prephitmp_1452 = PHI <pretmp_1451(6), _37(4)>
  # prephitmp_1457 = PHI <pretmp_1456(6), 1376283091369227076(4)>
  # prephitmp_1459 = PHI <pretmp_1458(6), _70(4)>
  # prephitmp_1461 = PHI <pretmp_1460(6), 2611923443488327891(4)>
  # prephitmp_1466 = PHI <pretmp_1465(6), _103(4)>
  # prephitmp_1471 = PHI <pretmp_1470(6), 589684135938649225(4)>
  # prephitmp_1473 = PHI <pretmp_1472(6), _136(4)>
  # prephitmp_1475 = PHI <pretmp_1474(6), 11820040416388919760(4)>
  # prephitmp_1480 = PHI <pretmp_1479(6), _169(4)>
  # prephitmp_1485 = PHI <pretmp_1484(6), 13714699805381954668(4)>
  # prephitmp_1487 = PHI <pretmp_1486(6), _202(4)>
  # prephitmp_1489 = PHI <pretmp_1488(6), 4983270260364809079(4)>
  # prephitmp_1494 = PHI <pretmp_1493(6), _235(4)>
  # prephitmp_1499 = PHI <pretmp_1498(6), 4577018097722394903(4)>
  # prephitmp_1501 = PHI <pretmp_1500(6), _268(4)>
  # prephitmp_1503 = PHI <pretmp_1502(6), 13883517620612518109(4)>
  # prephitmp_1508 = PHI <pretmp_1507(6), _301(4)>
  # prephitmp_1513 = PHI <pretmp_1512(6), 15073842237943035308(4)>
  # prephitmp_1515 = PHI <pretmp_1514(6), _334(4)>
  # prephitmp_1517 = PHI <pretmp_1516(6), 10526836309316205339(4)>
  # prephitmp_1522 = PHI <pretmp_1521(6), _367(4)>
  # prephitmp_1527 = PHI <pretmp_1526(6), 13322122606961655446(4)>
  # prephitmp_1529 = PHI <pretmp_1528(6), _400(4)>
  # prephitmp_1531 = PHI <pretmp_1530(6), 3458046377305235383(4)>
  # prephitmp_1536 = PHI <pretmp_1535(6), _433(4)>
  # prephitmp_1541 = PHI <pretmp_1540(6), 2639559389850201335(4)>
  # prephitmp_1543 = PHI <pretmp_1542(6), _466(4)>
  # prephitmp_1545 = PHI <pretmp_1544(6), 13437774018240085913(4)>
  # prephitmp_1550 = PHI <pretmp_1549(6), _499(4)>
  # prephitmp_1555 = PHI <pretmp_1554(6), 7163292796296056425(4)>
  # prephitmp_1557 = PHI <pretmp_1556(6), _532(4)>
  # prephitmp_1559 = PHI <pretmp_1558(6), 577009281997405206(4)>
  # ivtmp_895 = PHI <ivtmp_19(6), 16(4)>
  # ivtmp.149_814 = PHI <ivtmp.149_810(6), ivtmp.149_806(4)>
  _565 = prephitmp_1452 ^ prephitmp_1457;
  _572 = _565 + v$4_846;
  _566 = _572 + v$0_854;
  _567 = _566 ^ v$12_832;
  _568 = _567 r>> 32;
  _569 = _568 + v$8_838;
  _570 = _569 ^ v$4_846;
  _571 = _570 r>> 25;
  _575 = prephitmp_1459 ^ prephitmp_1461;
  _582 = _566 + _575;
  _576 = _571 + _582;
  _577 = _568 ^ _576;
  _578 = _577 r>> 16;
  _579 = _569 + _578;
  _580 = _571 ^ _579;
  _581 = _580 r>> 11;
  _589 = prephitmp_1466 ^ prephitmp_1471;
  _596 = _589 + v$5_844;
  _590 = _596 + v$1_852;
  _591 = _590 ^ v$13_830;
  _592 = _591 r>> 32;
  _593 = _592 + v$9_834;
  _594 = _593 ^ v$5_844;
  _595 = _594 r>> 25;
  _599 = prephitmp_1473 ^ prephitmp_1475;
  _606 = _590 + _599;
  _600 = _595 + _606;
  _601 = _592 ^ _600;
  _602 = _601 r>> 16;
  _603 = _593 + _602;
  _604 = _595 ^ _603;
  _605 = _604 r>> 11;
  _613 = prephitmp_1480 ^ prephitmp_1485;
  _620 = _613 + v$6_842;
  _614 = _620 + v$2_850;
  _615 = _614 ^ v$14_828;
  _616 = _615 r>> 32;
  _617 = _616 + v$10_836;
  _618 = _617 ^ v$6_842;
  _619 = _618 r>> 25;
  _623 = prephitmp_1487 ^ prephitmp_1489;
  _630 = _614 + _623;
  _624 = _619 + _630;
  _625 = _616 ^ _624;
  _626 = _625 r>> 16;
  _627 = _617 + _626;
  _628 = _619 ^ _627;
  _629 = _628 r>> 11;
  _637 = prephitmp_1494 ^ prephitmp_1499;
  _644 = _637 + v$7_840;
  _638 = _644 + v$3_848;
  _639 = _638 ^ v$15_826;
  _640 = _639 r>> 32;
  _641 = _640 + v$11_654;
  _642 = _641 ^ v$7_840;
  _643 = _642 r>> 25;
  _647 = prephitmp_1501 ^ prephitmp_1503;
  _655 = _638 + _647;
  _648 = _643 + _655;
  _649 = _640 ^ _648;
  _650 = _649 r>> 16;
  _651 = _641 + _650;
  _652 = _643 ^ _651;
  _653 = _652 r>> 11;
  _662 = prephitmp_1508 ^ prephitmp_1513;
  _673 = _576 + _662;
  _663 = _605 + _673;
  _665 = _650 ^ _663;
  _666 = _665 r>> 32;
  _668 = _627 + _666;
  _670 = _605 ^ _668;
  _671 = _670 r>> 25;
  _676 = prephitmp_1515 ^ prephitmp_1517;
  _687 = _663 + _676;
  v$0_677 = _671 + _687;
  _679 = _666 ^ v$0_677;
  v$15_680 = _679 r>> 16;
  v$10_682 = _668 + v$15_680;
  _684 = _671 ^ v$10_682;
  v$5_685 = _684 r>> 11;
  _694 = prephitmp_1522 ^ prephitmp_1527;
  _705 = _600 + _694;
  _695 = _629 + _705;
  _697 = _578 ^ _695;
  _698 = _697 r>> 32;
  _700 = _651 + _698;
  _702 = _629 ^ _700;
  _703 = _702 r>> 25;
  _708 = prephitmp_1529 ^ prephitmp_1531;
  _718 = _695 + _708;
  v$1_709 = _703 + _718;
  _711 = _698 ^ v$1_709;
  v$12_712 = _711 r>> 16;
  v$11_714 = _700 + v$12_712;
  _716 = _703 ^ v$11_714;
  v$6_717 = _716 r>> 11;
  _725 = prephitmp_1536 ^ prephitmp_1541;
  _736 = _624 + _725;
  _726 = _653 + _736;
  _728 = _602 ^ _726;
  _729 = _728 r>> 32;
  _731 = _579 + _729;
  _733 = _653 ^ _731;
  _734 = _733 r>> 25;
  _739 = prephitmp_1543 ^ prephitmp_1545;
  _750 = _726 + _739;
  v$2_740 = _734 + _750;
  _742 = _729 ^ v$2_740;
  v$13_743 = _742 r>> 16;
  v$8_745 = _731 + v$13_743;
  _747 = _734 ^ v$8_745;
  v$7_748 = _747 r>> 11;
  _757 = prephitmp_1550 ^ prephitmp_1555;
  _768 = _648 + _757;
  _758 = _581 + _768;
  _760 = _626 ^ _758;
  _761 = _760 r>> 32;
  _763 = _603 + _761;
  _765 = _581 ^ _763;
  _766 = _765 r>> 25;
  _771 = prephitmp_1557 ^ prephitmp_1559;
  _783 = _758 + _771;
  v$3_772 = _766 + _783;
  _774 = _761 ^ v$3_772;
  v$14_775 = _774 r>> 16;
  v$9_777 = _763 + v$14_775;
  _779 = _766 ^ v$9_777;
  v$4_780 = _779 r>> 11;
  ivtmp_19 = ivtmp_895 + 4294967295;
  ivtmp.149_810 = ivtmp.149_814 + 16;
  if (ivtmp_19 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6
;;                7

;;   basic block 6, loop depth 1
;;    pred:       5
  _802 = (void *) ivtmp.149_810;
  pretmp_1448 = MEM[base: _802, offset: 0B];
  pretmp_1450 = (int) pretmp_1448;
  pretmp_1451 = m[pretmp_1450];
  pretmp_1453 = MEM[base: _802, offset: 1B];
  pretmp_1455 = (int) pretmp_1453;
  pretmp_1456 = c64[pretmp_1455];
  pretmp_1458 = m[pretmp_1455];
  pretmp_1460 = c64[pretmp_1450];
  pretmp_1462 = MEM[base: _802, offset: 2B];
  pretmp_1464 = (int) pretmp_1462;
  pretmp_1465 = m[pretmp_1464];
  pretmp_1467 = MEM[base: _802, offset: 3B];
  pretmp_1469 = (int) pretmp_1467;
  pretmp_1470 = c64[pretmp_1469];
  pretmp_1472 = m[pretmp_1469];
  pretmp_1474 = c64[pretmp_1464];
  pretmp_1476 = MEM[base: _802, offset: 4B];
  pretmp_1478 = (int) pretmp_1476;
  pretmp_1479 = m[pretmp_1478];
  pretmp_1481 = MEM[base: _802, offset: 5B];
  pretmp_1483 = (int) pretmp_1481;
  pretmp_1484 = c64[pretmp_1483];
  pretmp_1486 = m[pretmp_1483];
  pretmp_1488 = c64[pretmp_1478];
  pretmp_1490 = MEM[base: _802, offset: 6B];
  pretmp_1492 = (int) pretmp_1490;
  pretmp_1493 = m[pretmp_1492];
  pretmp_1495 = MEM[base: _802, offset: 7B];
  pretmp_1497 = (int) pretmp_1495;
  pretmp_1498 = c64[pretmp_1497];
  pretmp_1500 = m[pretmp_1497];
  pretmp_1502 = c64[pretmp_1492];
  pretmp_1504 = MEM[base: _802, offset: 8B];
  pretmp_1506 = (int) pretmp_1504;
  pretmp_1507 = m[pretmp_1506];
  pretmp_1509 = MEM[base: _802, offset: 9B];
  pretmp_1511 = (int) pretmp_1509;
  pretmp_1512 = c64[pretmp_1511];
  pretmp_1514 = m[pretmp_1511];
  pretmp_1516 = c64[pretmp_1506];
  pretmp_1518 = MEM[base: _802, offset: 10B];
  pretmp_1520 = (int) pretmp_1518;
  pretmp_1521 = m[pretmp_1520];
  pretmp_1523 = MEM[base: _802, offset: 11B];
  pretmp_1525 = (int) pretmp_1523;
  pretmp_1526 = c64[pretmp_1525];
  pretmp_1528 = m[pretmp_1525];
  pretmp_1530 = c64[pretmp_1520];
  pretmp_1532 = MEM[base: _802, offset: 12B];
  pretmp_1534 = (int) pretmp_1532;
  pretmp_1535 = m[pretmp_1534];
  pretmp_1537 = MEM[base: _802, offset: 13B];
  pretmp_1539 = (int) pretmp_1537;
  pretmp_1540 = c64[pretmp_1539];
  pretmp_1542 = m[pretmp_1539];
  pretmp_1544 = c64[pretmp_1534];
  pretmp_1546 = MEM[base: _802, offset: 14B];
  pretmp_1548 = (int) pretmp_1546;
  pretmp_1549 = m[pretmp_1548];
  pretmp_1551 = MEM[base: _802, offset: 15B];
  pretmp_1553 = (int) pretmp_1551;
  pretmp_1554 = c64[pretmp_1553];
  pretmp_1556 = m[pretmp_1553];
  pretmp_1558 = c64[pretmp_1548];
  goto <bb 5>;
;;    succ:       5

;;   basic block 7, loop depth 0
;;    pred:       5
  vect_cst_.130_27 = {v$8_745, v$9_777};
  vect_cst_.129_26 = {v$10_682, v$11_714};
  vect_cst_.128_25 = {v$4_780, v$5_685};
  vect_cst_.127_24 = {v$6_717, v$7_748};
  vect_cst_.125_893 = {v$0_677, v$1_709};
  vect_cst_.124_21 = {v$2_740, v$3_772};
  vect_cst_.123_20 = {v$12_712, v$13_743};
  vect_cst_.122_32 = {v$14_775, v$15_680};
  vect_cst_.120_13 = {_543, _545};
  vect_cst_.119_12 = {_547, _549};
  vect_cst_.118_11 = {_543, _545};
  vect_cst_.117_10 = {_547, _549};
  vect_cst_.116_9 = {v$0_535, v$1_536};
  vect_cst_.115_8 = {v$2_537, v$3_538};
  vect_cst_.114_7 = {v$4_539, v$5_540};
  vect_cst_.113_6 = {v$6_541, v$7_542};
  _68 = vect_cst_.130_27 ^ vect_cst_.125_893;
  _888 = vect_cst_.124_21 ^ vect_cst_.129_26;
  _53 = vect_cst_.123_20 ^ vect_cst_.128_25;
  _823 = vect_cst_.127_24 ^ vect_cst_.122_32;
  _55 = vect_cst_.120_13 ^ _68;
  _889 = vect_cst_.119_12 ^ _888;
  _54 = vect_cst_.118_11 ^ _53;
  _782 = vect_cst_.117_10 ^ _823;
  vect__785.126_28 = vect_cst_.116_9 ^ _55;
  vect__785.126_29 = vect_cst_.115_8 ^ _889;
  vect__785.126_30 = vect_cst_.114_7 ^ _54;
  vect__785.126_31 = vect_cst_.113_6 ^ _782;
  vectp.132_33 = &state_534(D)->h64[0];
  MEM[(long long unsigned int *)state_534(D) + 136B] = vect__785.126_28;
  vectp.132_49 = &MEM[(void *)state_534(D) + 152B];
  MEM[(long long unsigned int *)state_534(D) + 152B] = vect__785.126_29;
  vectp.132_891 = &MEM[(void *)state_534(D) + 168B];
  MEM[(long long unsigned int *)state_534(D) + 168B] = vect__785.126_30;
  vectp.132_39 = &MEM[(void *)state_534(D) + 184B];
  MEM[(long long unsigned int *)state_534(D) + 184B] = vect__785.126_31;
  m ={v} {CLOBBER};
  return 0;
;;    succ:       EXIT

}


Partition 0: size 128 align 16
	m
Inserting a value copy on edge BB2->BB4 : PART.121 = 4577018097722394903
Inserting a value copy on edge BB2->BB4 : PART.171 = 13883517620612518109
Inserting a value copy on edge BB2->BB4 : PART.154 = 13714699805381954668
Inserting a value copy on edge BB2->BB4 : PART.138 = 4983270260364809079
Inserting a partition copy on edge BB4->BB5 :PART.119 = PART.30
Inserting a partition copy on edge BB4->BB5 :PART.136 = PART.31
Inserting a partition copy on edge BB4->BB5 :PART.152 = PART.32
Inserting a partition copy on edge BB4->BB5 :PART.169 = PART.33
Inserting a partition copy on edge BB4->BB5 :PART.175 = PART.34
Inserting a partition copy on edge BB4->BB5 :PART.125 = PART.35
Inserting a partition copy on edge BB4->BB5 :PART.141 = PART.36
Inserting a partition copy on edge BB4->BB5 :PART.157 = PART.37
Inserting a value copy on edge BB4->BB5 : PART.10 = 16
Inserting a value copy on edge BB4->BB5 : PART.259 = 577009281997405206
Inserting a value copy on edge BB4->BB5 : PART.257 = 7163292796296056425
Inserting a value copy on edge BB4->BB5 : PART.251 = 13437774018240085913
Inserting a value copy on edge BB4->BB5 : PART.249 = 2639559389850201335
Inserting a value copy on edge BB4->BB5 : PART.243 = 3458046377305235383
Inserting a value copy on edge BB4->BB5 : PART.241 = 13322122606961655446
Inserting a value copy on edge BB4->BB5 : PART.235 = 10526836309316205339
Inserting a value copy on edge BB4->BB5 : PART.233 = 15073842237943035308
Inserting a value copy on edge BB4->BB5 : PART.227 = 13883517620612518109
Inserting a value copy on edge BB4->BB5 : PART.225 = 4577018097722394903
Inserting a value copy on edge BB4->BB5 : PART.219 = 4983270260364809079
Inserting a value copy on edge BB4->BB5 : PART.217 = 13714699805381954668
Inserting a value copy on edge BB4->BB5 : PART.211 = 11820040416388919760
Inserting a value copy on edge BB4->BB5 : PART.209 = 589684135938649225
Inserting a value copy on edge BB4->BB5 : PART.203 = 2611923443488327891
Inserting a value copy on edge BB4->BB5 : PART.201 = 1376283091369227076

;; Generating RTL for gimple basic block 2

;; _37 = __builtin_bswap64 (_892);

(insn 40 39 41 (set (reg:DI 352)
        (mem:DI (reg/v/f:DI 351 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8])) -1
     (nil))

(insn 41 40 0 (set (reg:DI 287 [ D.5867 ])
        (bswap:DI (reg:DI 352))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/v/f:DI 351 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8]))
        (nil)))

;; m[0] = _37;

(insn 42 41 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -128 [0xffffffffffffff80])) [3 m+0 S8 A128])
        (reg:DI 287 [ D.5867 ])) blake_ref.c:129 -1
     (nil))

;; _70 = __builtin_bswap64 (_887);

(insn 43 42 44 (set (reg:DI 353)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8])) -1
     (nil))

(insn 44 43 0 (set (reg:DI 291 [ D.5867 ])
        (bswap:DI (reg:DI 353))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8]))
        (nil)))

;; m[1] = _70;

(insn 45 44 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -120 [0xffffffffffffff88])) [3 m+8 S8 A64])
        (reg:DI 291 [ D.5867 ])) blake_ref.c:130 -1
     (nil))

;; _103 = __builtin_bswap64 (_881);

(insn 46 45 47 (set (reg:DI 354)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8])) -1
     (nil))

(insn 47 46 0 (set (reg:DI 295 [ D.5867 ])
        (bswap:DI (reg:DI 354))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8]))
        (nil)))

;; m[2] = _103;

(insn 48 47 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -112 [0xffffffffffffff90])) [3 m+16 S8 A128])
        (reg:DI 295 [ D.5867 ])) blake_ref.c:131 -1
     (nil))

;; _136 = __builtin_bswap64 (_875);

(insn 49 48 50 (set (reg:DI 355)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8])) -1
     (nil))

(insn 50 49 0 (set (reg:DI 299 [ D.5867 ])
        (bswap:DI (reg:DI 355))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8]))
        (nil)))

;; m[3] = _136;

(insn 51 50 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -104 [0xffffffffffffff98])) [3 m+24 S8 A64])
        (reg:DI 299 [ D.5867 ])) blake_ref.c:132 -1
     (nil))

;; _169 = __builtin_bswap64 (_869);

(insn 52 51 53 (set (reg:DI 356)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8])) -1
     (nil))

(insn 53 52 0 (set (reg:DI 303 [ D.5867 ])
        (bswap:DI (reg:DI 356))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8]))
        (nil)))

;; m[4] = _169;

(insn 54 53 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -96 [0xffffffffffffffa0])) [3 m+32 S8 A128])
        (reg:DI 303 [ D.5867 ])) blake_ref.c:133 -1
     (nil))

;; _202 = __builtin_bswap64 (_863);

(insn 55 54 56 (set (reg:DI 357)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8])) -1
     (nil))

(insn 56 55 0 (set (reg:DI 307 [ D.5867 ])
        (bswap:DI (reg:DI 357))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8]))
        (nil)))

;; m[5] = _202;

(insn 57 56 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -88 [0xffffffffffffffa8])) [3 m+40 S8 A64])
        (reg:DI 307 [ D.5867 ])) blake_ref.c:134 -1
     (nil))

;; _235 = __builtin_bswap64 (_857);

(insn 58 57 59 (set (reg:DI 358)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8])) -1
     (nil))

(insn 59 58 0 (set (reg:DI 311 [ D.5867 ])
        (bswap:DI (reg:DI 358))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8]))
        (nil)))

;; m[6] = _235;

(insn 60 59 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -80 [0xffffffffffffffb0])) [3 m+48 S8 A128])
        (reg:DI 311 [ D.5867 ])) blake_ref.c:135 -1
     (nil))

;; _268 = __builtin_bswap64 (_2);

(insn 61 60 62 (set (reg:DI 359)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8])) -1
     (nil))

(insn 62 61 0 (set (reg:DI 315 [ D.5867 ])
        (bswap:DI (reg:DI 359))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8]))
        (nil)))

;; m[7] = _268;

(insn 63 62 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -72 [0xffffffffffffffb8])) [3 m+56 S8 A64])
        (reg:DI 315 [ D.5867 ])) blake_ref.c:136 -1
     (nil))

;; _301 = __builtin_bswap64 (_683);

(insn 64 63 65 (set (reg:DI 360)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8])) -1
     (nil))

(insn 65 64 0 (set (reg:DI 319 [ D.5867 ])
        (bswap:DI (reg:DI 360))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8]))
        (nil)))

;; m[8] = _301;

(insn 66 65 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [3 m+64 S8 A128])
        (reg:DI 319 [ D.5867 ])) blake_ref.c:137 -1
     (nil))

;; _334 = __builtin_bswap64 (_821);

(insn 67 66 68 (set (reg:DI 361)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8])) -1
     (nil))

(insn 68 67 0 (set (reg:DI 323 [ D.5867 ])
        (bswap:DI (reg:DI 361))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8]))
        (nil)))

;; m[9] = _334;

(insn 69 68 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [3 m+72 S8 A64])
        (reg:DI 323 [ D.5867 ])) blake_ref.c:138 -1
     (nil))

;; _367 = __builtin_bswap64 (_776);

(insn 70 69 71 (set (reg:DI 362)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8])) -1
     (nil))

(insn 71 70 0 (set (reg:DI 327 [ D.5867 ])
        (bswap:DI (reg:DI 362))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8]))
        (nil)))

;; m[10] = _367;

(insn 72 71 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [3 m+80 S8 A128])
        (reg:DI 327 [ D.5867 ])) blake_ref.c:139 -1
     (nil))

;; _400 = __builtin_bswap64 (_749);

(insn 73 72 74 (set (reg:DI 363)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8])) -1
     (nil))

(insn 74 73 0 (set (reg:DI 331 [ D.5867 ])
        (bswap:DI (reg:DI 363))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8]))
        (nil)))

;; m[11] = _400;

(insn 75 74 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [3 m+88 S8 A64])
        (reg:DI 331 [ D.5867 ])) blake_ref.c:140 -1
     (nil))

;; _433 = __builtin_bswap64 (_715);

(insn 76 75 77 (set (reg:DI 364)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8])) -1
     (nil))

(insn 77 76 0 (set (reg:DI 335 [ D.5867 ])
        (bswap:DI (reg:DI 364))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8]))
        (nil)))

;; m[12] = _433;

(insn 78 77 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [3 m+96 S8 A128])
        (reg:DI 335 [ D.5867 ])) blake_ref.c:141 -1
     (nil))

;; _466 = __builtin_bswap64 (_831);

(insn 79 78 80 (set (reg:DI 365)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8])) -1
     (nil))

(insn 80 79 0 (set (reg:DI 339 [ D.5867 ])
        (bswap:DI (reg:DI 365))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8]))
        (nil)))

;; m[13] = _466;

(insn 81 80 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [3 m+104 S8 A64])
        (reg:DI 339 [ D.5867 ])) blake_ref.c:142 -1
     (nil))

;; _499 = __builtin_bswap64 (_841);

(insn 82 81 83 (set (reg:DI 366)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8])) -1
     (nil))

(insn 83 82 0 (set (reg:DI 343 [ D.5867 ])
        (bswap:DI (reg:DI 366))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8]))
        (nil)))

;; m[14] = _499;

(insn 84 83 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 m+112 S8 A128])
        (reg:DI 343 [ D.5867 ])) blake_ref.c:143 -1
     (nil))

;; _532 = __builtin_bswap64 (_784);

(insn 85 84 86 (set (reg:DI 367)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 120 [0x78])) [0 MEM[(const BitSequence *)datablock_5(D) + 120B]+0 S8 A8])) -1
     (nil))

(insn 86 85 0 (set (reg:DI 347 [ D.5867 ])
        (bswap:DI (reg:DI 367))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 120 [0x78])) [0 MEM[(const BitSequence *)datablock_5(D) + 120B]+0 S8 A8]))
        (nil)))

;; m[15] = _532;

(insn 87 86 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 m+120 S8 A64])
        (reg:DI 347 [ D.5867 ])) blake_ref.c:144 -1
     (nil))

;; v$0_535 = state_534(D)->h64[0];

(insn 88 87 0 (set (reg:DI 119 [ v$0 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 136 [0x88])) [3 state_534(D)->h64+0 S8 A64])) blake_ref.c:147 -1
     (nil))

;; v$1_536 = state_534(D)->h64[1];

(insn 89 88 0 (set (reg:DI 120 [ v$1 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 144 [0x90])) [3 state_534(D)->h64+8 S8 A64])) blake_ref.c:148 -1
     (nil))

;; v$2_537 = state_534(D)->h64[2];

(insn 90 89 0 (set (reg:DI 121 [ v$2 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 152 [0x98])) [3 state_534(D)->h64+16 S8 A64])) blake_ref.c:149 -1
     (nil))

;; v$3_538 = state_534(D)->h64[3];

(insn 91 90 0 (set (reg:DI 122 [ v$3 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 160 [0xa0])) [3 state_534(D)->h64+24 S8 A64])) blake_ref.c:150 -1
     (nil))

;; v$4_539 = state_534(D)->h64[4];

(insn 92 91 0 (set (reg:DI 123 [ v$4 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 168 [0xa8])) [3 state_534(D)->h64+32 S8 A64])) blake_ref.c:151 -1
     (nil))

;; v$5_540 = state_534(D)->h64[5];

(insn 93 92 0 (set (reg:DI 124 [ v$5 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 176 [0xb0])) [3 state_534(D)->h64+40 S8 A64])) blake_ref.c:152 -1
     (nil))

;; v$6_541 = state_534(D)->h64[6];

(insn 94 93 0 (set (reg:DI 125 [ v$6 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 184 [0xb8])) [3 state_534(D)->h64+48 S8 A64])) blake_ref.c:153 -1
     (nil))

;; v$7_542 = state_534(D)->h64[7];

(insn 95 94 0 (set (reg:DI 126 [ v$7 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 192 [0xc0])) [3 state_534(D)->h64+56 S8 A64])) blake_ref.c:154 -1
     (nil))

;; _543 = state_534(D)->salt64[0];

(insn 96 95 0 (set (reg:DI 127 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 344 [0x158])) [3 state_534(D)->salt64+0 S8 A64])) blake_ref.c:155 -1
     (nil))

;; v$8_544 = _543 ^ 2611923443488327891;

(insn 97 96 98 (set (reg:DI 368)
        (const_int 2611923443488327891 [0x243f6a8885a308d3])) blake_ref.c:155 -1
     (nil))

(insn 98 97 0 (parallel [
            (set (reg:DI 244 [ v$8 ])
                (xor:DI (reg:DI 127 [ D.5863 ])
                    (reg:DI 368)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:155 -1
     (nil))

;; _545 = state_534(D)->salt64[1];

(insn 99 98 0 (set (reg:DI 128 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 352 [0x160])) [3 state_534(D)->salt64+8 S8 A64])) blake_ref.c:156 -1
     (nil))

;; v$9_546 = _545 ^ 1376283091369227076;

(insn 100 99 101 (set (reg:DI 369)
        (const_int 1376283091369227076 [0x13198a2e03707344])) blake_ref.c:156 -1
     (nil))

(insn 101 100 0 (parallel [
            (set (reg:DI 262 [ v$9 ])
                (xor:DI (reg:DI 128 [ D.5863 ])
                    (reg:DI 369)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:156 -1
     (nil))

;; _547 = state_534(D)->salt64[2];

(insn 102 101 0 (set (reg:DI 129 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 360 [0x168])) [3 state_534(D)->salt64+16 S8 A64])) blake_ref.c:157 -1
     (nil))

;; v$10_548 = _547 ^ 11820040416388919760;

(insn 103 102 104 (set (reg:DI 370)
        (const_int -6626703657320631856 [0xa4093822299f31d0])) blake_ref.c:157 -1
     (nil))

(insn 104 103 0 (parallel [
            (set (reg:DI 211 [ v$10 ])
                (xor:DI (reg:DI 129 [ D.5863 ])
                    (reg:DI 370)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:157 -1
     (nil))

;; _549 = state_534(D)->salt64[3];

(insn 105 104 0 (set (reg:DI 130 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 368 [0x170])) [3 state_534(D)->salt64+24 S8 A64])) blake_ref.c:158 -1
     (nil))

;; v$11_550 = _549 ^ 589684135938649225;

(insn 106 105 107 (set (reg:DI 371)
        (const_int 589684135938649225 [0x82efa98ec4e6c89])) blake_ref.c:158 -1
     (nil))

(insn 107 106 0 (parallel [
            (set (reg:DI 197 [ v$11 ])
                (xor:DI (reg:DI 130 [ D.5863 ])
                    (reg:DI 371)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:158 -1
     (nil))

;; if (_551 != 0)

(insn 108 107 109 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 350 [ state ])
                    (const_int 12 [0xc])) [2 state_534(D)->nullt+0 S4 A32])
            (const_int 0 [0]))) blake_ref.c:159 -1
     (nil))

(jump_insn 109 108 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:159 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 3

;; _552 = state_534(D)->t64[0];

(insn 111 110 0 (set (reg:DI 132 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 200 [0xc8])) [3 state_534(D)->t64+0 S8 A64])) blake_ref.c:166 -1
     (nil))

;; v$12_553 = _552 ^ 4983270260364809079;

(insn 112 111 113 (set (reg:DI 372)
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:166 -1
     (nil))

(insn 113 112 0 (parallel [
            (set (reg:DI 227 [ v$12 ])
                (xor:DI (reg:DI 132 [ D.5863 ])
                    (reg:DI 372)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:166 -1
     (nil))

;; v$13_554 = _552 ^ 13714699805381954668;

(insn 114 113 115 (set (reg:DI 373)
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:167 -1
     (nil))

(insn 115 114 0 (parallel [
            (set (reg:DI 243 [ v$13 ])
                (xor:DI (reg:DI 132 [ D.5863 ])
                    (reg:DI 373)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:167 -1
     (nil))

;; _555 = state_534(D)->t64[1];

(insn 116 115 0 (set (reg:DI 133 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 208 [0xd0])) [3 state_534(D)->t64+8 S8 A64])) blake_ref.c:168 -1
     (nil))

;; v$14_556 = _555 ^ 13883517620612518109;

(insn 117 116 118 (set (reg:DI 374)
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:168 -1
     (nil))

(insn 118 117 0 (parallel [
            (set (reg:DI 260 [ v$14 ])
                (xor:DI (reg:DI 133 [ D.5863 ])
                    (reg:DI 374)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:168 -1
     (nil))

;; v$15_557 = _555 ^ 4577018097722394903;

(insn 119 118 120 (set (reg:DI 375)
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:169 -1
     (nil))

(insn 120 119 0 (parallel [
            (set (reg:DI 210 [ v$15 ])
                (xor:DI (reg:DI 133 [ D.5863 ])
                    (reg:DI 375)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:169 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 121 120 122 9 "" [0 uses])

(note 122 121 0 NOTE_INSN_BASIC_BLOCK)

;; ivtmp.149_806 = (unsigned long) &sigma;

(insn 123 122 0 (set (reg:DI 269 [ ivtmp.149 ])
        (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)) -1
     (nil))

;; Generating RTL for gimple basic block 5
Swap operands in stmt:
_582 = _566 + _575;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_576 = _571 + _582;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_606 = _590 + _599;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_600 = _595 + _606;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_630 = _614 + _623;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_624 = _619 + _630;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_655 = _638 + _647;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_648 = _643 + _655;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_673 = _576 + _662;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_663 = _605 + _673;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_687 = _663 + _676;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
v$0_677 = _671 + _687;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_705 = _600 + _694;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_695 = _629 + _705;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_718 = _695 + _708;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
v$1_709 = _703 + _718;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_736 = _624 + _725;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_726 = _653 + _736;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_750 = _726 + _739;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
v$2_740 = _734 + _750;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_768 = _648 + _757;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_758 = _581 + _768;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
_783 = _758 + _771;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
v$3_772 = _766 + _783;
Cost left opnd=0, right opnd=2

;; _566 = _572 + v$0_854;

(insn 125 124 126 (parallel [
            (set (reg:DI 376 [ D.5863 ])
                (xor:DI (reg:DI 287 [ D.5867 ])
                    (reg:DI 290 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

(insn 126 125 127 (parallel [
            (set (reg:DI 377 [ D.5863 ])
                (plus:DI (reg:DI 376 [ D.5863 ])
                    (reg:DI 264 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

(insn 127 126 0 (parallel [
            (set (reg:DI 135 [ D.5863 ])
                (plus:DI (reg:DI 377 [ D.5863 ])
                    (reg:DI 208 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

;; _568 = _567 r>> 32;

(insn 128 127 129 (parallel [
            (set (reg:DI 378 [ D.5863 ])
                (xor:DI (reg:DI 135 [ D.5863 ])
                    (reg:DI 227 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

(insn 129 128 0 (parallel [
            (set (reg:DI 137 [ D.5863 ])
                (rotate:DI (reg:DI 378 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

;; _569 = _568 + v$8_838;

(insn 130 129 0 (parallel [
            (set (reg:DI 138 [ D.5863 ])
                (plus:DI (reg:DI 137 [ D.5863 ])
                    (reg:DI 244 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

;; _571 = _570 r>> 25;

(insn 131 130 132 (parallel [
            (set (reg:DI 379 [ D.5863 ])
                (xor:DI (reg:DI 138 [ D.5863 ])
                    (reg:DI 264 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

(insn 132 131 0 (parallel [
            (set (reg:DI 140 [ D.5863 ])
                (rotatert:DI (reg:DI 379 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

;; _576 = _582 + _571;

(insn 133 132 134 (parallel [
            (set (reg:DI 380 [ D.5863 ])
                (xor:DI (reg:DI 291 [ D.5867 ])
                    (reg:DI 292 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

(insn 134 133 135 (parallel [
            (set (reg:DI 381 [ D.5863 ])
                (plus:DI (reg:DI 380 [ D.5863 ])
                    (reg:DI 135 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

(insn 135 134 0 (parallel [
            (set (reg:DI 143 [ D.5863 ])
                (plus:DI (reg:DI 381 [ D.5863 ])
                    (reg:DI 140 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

;; _578 = _577 r>> 16;

(insn 136 135 137 (parallel [
            (set (reg:DI 382 [ D.5863 ])
                (xor:DI (reg:DI 137 [ D.5863 ])
                    (reg:DI 143 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

(insn 137 136 0 (parallel [
            (set (reg:DI 145 [ D.5863 ])
                (rotatert:DI (reg:DI 382 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

;; _579 = _569 + _578;

(insn 138 137 0 (parallel [
            (set (reg:DI 146 [ D.5863 ])
                (plus:DI (reg:DI 138 [ D.5863 ])
                    (reg:DI 145 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

;; _581 = _580 r>> 11;

(insn 139 138 140 (parallel [
            (set (reg:DI 383 [ D.5863 ])
                (xor:DI (reg:DI 140 [ D.5863 ])
                    (reg:DI 146 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

(insn 140 139 0 (parallel [
            (set (reg:DI 148 [ D.5863 ])
                (rotatert:DI (reg:DI 383 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))

;; _590 = _596 + v$1_852;

(insn 141 140 142 (parallel [
            (set (reg:DI 384 [ D.5863 ])
                (xor:DI (reg:DI 295 [ D.5867 ])
                    (reg:DI 298 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

(insn 142 141 143 (parallel [
            (set (reg:DI 385 [ D.5863 ])
                (plus:DI (reg:DI 384 [ D.5863 ])
                    (reg:DI 214 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

(insn 143 142 0 (parallel [
            (set (reg:DI 151 [ D.5863 ])
                (plus:DI (reg:DI 385 [ D.5863 ])
                    (reg:DI 225 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

;; _592 = _591 r>> 32;

(insn 144 143 145 (parallel [
            (set (reg:DI 386 [ D.5863 ])
                (xor:DI (reg:DI 151 [ D.5863 ])
                    (reg:DI 243 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

(insn 145 144 0 (parallel [
            (set (reg:DI 153 [ D.5863 ])
                (rotate:DI (reg:DI 386 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

;; _593 = _592 + v$9_834;

(insn 146 145 0 (parallel [
            (set (reg:DI 154 [ D.5863 ])
                (plus:DI (reg:DI 153 [ D.5863 ])
                    (reg:DI 262 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

;; _595 = _594 r>> 25;

(insn 147 146 148 (parallel [
            (set (reg:DI 387 [ D.5863 ])
                (xor:DI (reg:DI 154 [ D.5863 ])
                    (reg:DI 214 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

(insn 148 147 0 (parallel [
            (set (reg:DI 156 [ D.5863 ])
                (rotatert:DI (reg:DI 387 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

;; _600 = _606 + _595;

(insn 149 148 150 (parallel [
            (set (reg:DI 388 [ D.5863 ])
                (xor:DI (reg:DI 299 [ D.5867 ])
                    (reg:DI 300 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

(insn 150 149 151 (parallel [
            (set (reg:DI 389 [ D.5863 ])
                (plus:DI (reg:DI 388 [ D.5863 ])
                    (reg:DI 151 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

(insn 151 150 0 (parallel [
            (set (reg:DI 159 [ D.5863 ])
                (plus:DI (reg:DI 389 [ D.5863 ])
                    (reg:DI 156 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

;; _602 = _601 r>> 16;

(insn 152 151 153 (parallel [
            (set (reg:DI 390 [ D.5863 ])
                (xor:DI (reg:DI 153 [ D.5863 ])
                    (reg:DI 159 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

(insn 153 152 0 (parallel [
            (set (reg:DI 161 [ D.5863 ])
                (rotatert:DI (reg:DI 390 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

;; _603 = _593 + _602;

(insn 154 153 0 (parallel [
            (set (reg:DI 162 [ D.5863 ])
                (plus:DI (reg:DI 154 [ D.5863 ])
                    (reg:DI 161 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

;; _605 = _604 r>> 11;

(insn 155 154 156 (parallel [
            (set (reg:DI 391 [ D.5863 ])
                (xor:DI (reg:DI 156 [ D.5863 ])
                    (reg:DI 162 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

(insn 156 155 0 (parallel [
            (set (reg:DI 164 [ D.5863 ])
                (rotatert:DI (reg:DI 391 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))

;; _614 = _620 + v$2_850;

(insn 157 156 158 (parallel [
            (set (reg:DI 392 [ D.5863 ])
                (xor:DI (reg:DI 303 [ D.5867 ])
                    (reg:DI 306 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

(insn 158 157 159 (parallel [
            (set (reg:DI 393 [ D.5863 ])
                (plus:DI (reg:DI 392 [ D.5863 ])
                    (reg:DI 230 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

(insn 159 158 0 (parallel [
            (set (reg:DI 167 [ D.5863 ])
                (plus:DI (reg:DI 393 [ D.5863 ])
                    (reg:DI 241 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

;; _616 = _615 r>> 32;

(insn 160 159 161 (parallel [
            (set (reg:DI 394 [ D.5863 ])
                (xor:DI (reg:DI 167 [ D.5863 ])
                    (reg:DI 260 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

(insn 161 160 0 (parallel [
            (set (reg:DI 169 [ D.5863 ])
                (rotate:DI (reg:DI 394 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

;; _617 = _616 + v$10_836;

(insn 162 161 0 (parallel [
            (set (reg:DI 170 [ D.5863 ])
                (plus:DI (reg:DI 169 [ D.5863 ])
                    (reg:DI 211 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

;; _619 = _618 r>> 25;

(insn 163 162 164 (parallel [
            (set (reg:DI 395 [ D.5863 ])
                (xor:DI (reg:DI 170 [ D.5863 ])
                    (reg:DI 230 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

(insn 164 163 0 (parallel [
            (set (reg:DI 172 [ D.5863 ])
                (rotatert:DI (reg:DI 395 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

;; _624 = _630 + _619;

(insn 165 164 166 (parallel [
            (set (reg:DI 396 [ D.5863 ])
                (xor:DI (reg:DI 307 [ D.5867 ])
                    (reg:DI 308 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

(insn 166 165 167 (parallel [
            (set (reg:DI 397 [ D.5863 ])
                (plus:DI (reg:DI 396 [ D.5863 ])
                    (reg:DI 167 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

(insn 167 166 0 (parallel [
            (set (reg:DI 175 [ D.5863 ])
                (plus:DI (reg:DI 397 [ D.5863 ])
                    (reg:DI 172 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

;; _626 = _625 r>> 16;

(insn 168 167 169 (parallel [
            (set (reg:DI 398 [ D.5863 ])
                (xor:DI (reg:DI 169 [ D.5863 ])
                    (reg:DI 175 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

(insn 169 168 0 (parallel [
            (set (reg:DI 177 [ D.5863 ])
                (rotatert:DI (reg:DI 398 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

;; _627 = _617 + _626;

(insn 170 169 0 (parallel [
            (set (reg:DI 178 [ D.5863 ])
                (plus:DI (reg:DI 170 [ D.5863 ])
                    (reg:DI 177 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

;; _629 = _628 r>> 11;

(insn 171 170 172 (parallel [
            (set (reg:DI 399 [ D.5863 ])
                (xor:DI (reg:DI 172 [ D.5863 ])
                    (reg:DI 178 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

(insn 172 171 0 (parallel [
            (set (reg:DI 180 [ D.5863 ])
                (rotatert:DI (reg:DI 399 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))

;; _638 = _644 + v$3_848;

(insn 173 172 174 (parallel [
            (set (reg:DI 400 [ D.5863 ])
                (xor:DI (reg:DI 311 [ D.5867 ])
                    (reg:DI 314 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

(insn 174 173 175 (parallel [
            (set (reg:DI 401 [ D.5863 ])
                (plus:DI (reg:DI 400 [ D.5863 ])
                    (reg:DI 246 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

(insn 175 174 0 (parallel [
            (set (reg:DI 183 [ D.5863 ])
                (plus:DI (reg:DI 401 [ D.5863 ])
                    (reg:DI 258 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

;; _640 = _639 r>> 32;

(insn 176 175 177 (parallel [
            (set (reg:DI 402 [ D.5863 ])
                (xor:DI (reg:DI 183 [ D.5863 ])
                    (reg:DI 210 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

(insn 177 176 0 (parallel [
            (set (reg:DI 185 [ D.5863 ])
                (rotate:DI (reg:DI 402 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

;; _641 = _640 + v$11_654;

(insn 178 177 0 (parallel [
            (set (reg:DI 186 [ D.5863 ])
                (plus:DI (reg:DI 185 [ D.5863 ])
                    (reg:DI 197 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

;; _643 = _642 r>> 25;

(insn 179 178 180 (parallel [
            (set (reg:DI 403 [ D.5863 ])
                (xor:DI (reg:DI 186 [ D.5863 ])
                    (reg:DI 246 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

(insn 180 179 0 (parallel [
            (set (reg:DI 188 [ D.5863 ])
                (rotatert:DI (reg:DI 403 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

;; _648 = _655 + _643;

(insn 181 180 182 (parallel [
            (set (reg:DI 404 [ D.5863 ])
                (xor:DI (reg:DI 315 [ D.5867 ])
                    (reg:DI 316 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

(insn 182 181 183 (parallel [
            (set (reg:DI 405 [ D.5863 ])
                (plus:DI (reg:DI 404 [ D.5863 ])
                    (reg:DI 183 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

(insn 183 182 0 (parallel [
            (set (reg:DI 191 [ D.5863 ])
                (plus:DI (reg:DI 405 [ D.5863 ])
                    (reg:DI 188 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

;; _650 = _649 r>> 16;

(insn 184 183 185 (parallel [
            (set (reg:DI 406 [ D.5863 ])
                (xor:DI (reg:DI 185 [ D.5863 ])
                    (reg:DI 191 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

(insn 185 184 0 (parallel [
            (set (reg:DI 193 [ D.5863 ])
                (rotatert:DI (reg:DI 406 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

;; _651 = _641 + _650;

(insn 186 185 0 (parallel [
            (set (reg:DI 194 [ D.5863 ])
                (plus:DI (reg:DI 186 [ D.5863 ])
                    (reg:DI 193 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

;; _653 = _652 r>> 11;

(insn 187 186 188 (parallel [
            (set (reg:DI 407 [ D.5863 ])
                (xor:DI (reg:DI 188 [ D.5863 ])
                    (reg:DI 194 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

(insn 188 187 0 (parallel [
            (set (reg:DI 196 [ D.5863 ])
                (rotatert:DI (reg:DI 407 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))

;; _663 = _673 + _605;

(insn 189 188 190 (parallel [
            (set (reg:DI 408 [ D.5863 ])
                (xor:DI (reg:DI 319 [ D.5867 ])
                    (reg:DI 322 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

(insn 190 189 191 (parallel [
            (set (reg:DI 409 [ D.5863 ])
                (plus:DI (reg:DI 408 [ D.5863 ])
                    (reg:DI 143 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

(insn 191 190 0 (parallel [
            (set (reg:DI 200 [ D.5863 ])
                (plus:DI (reg:DI 409 [ D.5863 ])
                    (reg:DI 164 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

;; _666 = _665 r>> 32;

(insn 192 191 193 (parallel [
            (set (reg:DI 410 [ D.5863 ])
                (xor:DI (reg:DI 193 [ D.5863 ])
                    (reg:DI 200 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

(insn 193 192 0 (parallel [
            (set (reg:DI 202 [ D.5863 ])
                (rotate:DI (reg:DI 410 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

;; _668 = _627 + _666;

(insn 194 193 0 (parallel [
            (set (reg:DI 203 [ D.5863 ])
                (plus:DI (reg:DI 178 [ D.5863 ])
                    (reg:DI 202 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

;; _671 = _670 r>> 25;

(insn 195 194 196 (parallel [
            (set (reg:DI 411 [ D.5863 ])
                (xor:DI (reg:DI 164 [ D.5863 ])
                    (reg:DI 203 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

(insn 196 195 0 (parallel [
            (set (reg:DI 205 [ D.5863 ])
                (rotatert:DI (reg:DI 411 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

;; v$0_677 = _687 + _671;

(insn 197 196 198 (parallel [
            (set (reg:DI 412 [ D.5863 ])
                (xor:DI (reg:DI 323 [ D.5867 ])
                    (reg:DI 324 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

(insn 198 197 199 (parallel [
            (set (reg:DI 413 [ D.5863 ])
                (plus:DI (reg:DI 412 [ D.5863 ])
                    (reg:DI 200 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

(insn 199 198 0 (parallel [
            (set (reg:DI 208 [ v$0 ])
                (plus:DI (reg:DI 413 [ D.5863 ])
                    (reg:DI 205 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

;; v$15_680 = _679 r>> 16;

(insn 200 199 201 (parallel [
            (set (reg:DI 414 [ D.5863 ])
                (xor:DI (reg:DI 202 [ D.5863 ])
                    (reg:DI 208 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

(insn 201 200 0 (parallel [
            (set (reg:DI 210 [ v$15 ])
                (rotatert:DI (reg:DI 414 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

;; v$10_682 = _668 + v$15_680;

(insn 202 201 0 (parallel [
            (set (reg:DI 211 [ v$10 ])
                (plus:DI (reg:DI 203 [ D.5863 ])
                    (reg:DI 210 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

;; v$5_685 = _684 r>> 11;

(insn 203 202 204 (parallel [
            (set (reg:DI 415 [ D.5863 ])
                (xor:DI (reg:DI 205 [ D.5863 ])
                    (reg:DI 211 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

(insn 204 203 0 (parallel [
            (set (reg:DI 214 [ v$5 ])
                (rotatert:DI (reg:DI 415 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))

;; _695 = _705 + _629;

(insn 205 204 206 (parallel [
            (set (reg:DI 416 [ D.5863 ])
                (xor:DI (reg:DI 327 [ D.5867 ])
                    (reg:DI 330 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

(insn 206 205 207 (parallel [
            (set (reg:DI 417 [ D.5863 ])
                (plus:DI (reg:DI 416 [ D.5863 ])
                    (reg:DI 159 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

(insn 207 206 0 (parallel [
            (set (reg:DI 217 [ D.5863 ])
                (plus:DI (reg:DI 417 [ D.5863 ])
                    (reg:DI 180 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

;; _698 = _697 r>> 32;

(insn 208 207 209 (parallel [
            (set (reg:DI 418 [ D.5863 ])
                (xor:DI (reg:DI 145 [ D.5863 ])
                    (reg:DI 217 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

(insn 209 208 0 (parallel [
            (set (reg:DI 219 [ D.5863 ])
                (rotate:DI (reg:DI 418 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

;; _700 = _651 + _698;

(insn 210 209 0 (parallel [
            (set (reg:DI 220 [ D.5863 ])
                (plus:DI (reg:DI 194 [ D.5863 ])
                    (reg:DI 219 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

;; _703 = _702 r>> 25;

(insn 211 210 212 (parallel [
            (set (reg:DI 419 [ D.5863 ])
                (xor:DI (reg:DI 180 [ D.5863 ])
                    (reg:DI 220 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

(insn 212 211 0 (parallel [
            (set (reg:DI 222 [ D.5863 ])
                (rotatert:DI (reg:DI 419 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

;; v$1_709 = _718 + _703;

(insn 213 212 214 (parallel [
            (set (reg:DI 420 [ D.5863 ])
                (xor:DI (reg:DI 331 [ D.5867 ])
                    (reg:DI 332 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

(insn 214 213 215 (parallel [
            (set (reg:DI 421 [ D.5863 ])
                (plus:DI (reg:DI 420 [ D.5863 ])
                    (reg:DI 217 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

(insn 215 214 0 (parallel [
            (set (reg:DI 225 [ v$1 ])
                (plus:DI (reg:DI 421 [ D.5863 ])
                    (reg:DI 222 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

;; v$12_712 = _711 r>> 16;

(insn 216 215 217 (parallel [
            (set (reg:DI 422 [ D.5863 ])
                (xor:DI (reg:DI 219 [ D.5863 ])
                    (reg:DI 225 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

(insn 217 216 0 (parallel [
            (set (reg:DI 227 [ v$12 ])
                (rotatert:DI (reg:DI 422 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

;; v$11_714 = _700 + v$12_712;

(insn 218 217 0 (parallel [
            (set (reg:DI 197 [ v$11 ])
                (plus:DI (reg:DI 220 [ D.5863 ])
                    (reg:DI 227 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

;; v$6_717 = _716 r>> 11;

(insn 219 218 220 (parallel [
            (set (reg:DI 423 [ D.5863 ])
                (xor:DI (reg:DI 222 [ D.5863 ])
                    (reg:DI 197 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

(insn 220 219 0 (parallel [
            (set (reg:DI 230 [ v$6 ])
                (rotatert:DI (reg:DI 423 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))

;; _726 = _736 + _653;

(insn 221 220 222 (parallel [
            (set (reg:DI 424 [ D.5863 ])
                (xor:DI (reg:DI 335 [ D.5867 ])
                    (reg:DI 338 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

(insn 222 221 223 (parallel [
            (set (reg:DI 425 [ D.5863 ])
                (plus:DI (reg:DI 424 [ D.5863 ])
                    (reg:DI 175 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

(insn 223 222 0 (parallel [
            (set (reg:DI 233 [ D.5863 ])
                (plus:DI (reg:DI 425 [ D.5863 ])
                    (reg:DI 196 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

;; _729 = _728 r>> 32;

(insn 224 223 225 (parallel [
            (set (reg:DI 426 [ D.5863 ])
                (xor:DI (reg:DI 161 [ D.5863 ])
                    (reg:DI 233 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

(insn 225 224 0 (parallel [
            (set (reg:DI 235 [ D.5863 ])
                (rotate:DI (reg:DI 426 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

;; _731 = _579 + _729;

(insn 226 225 0 (parallel [
            (set (reg:DI 236 [ D.5863 ])
                (plus:DI (reg:DI 146 [ D.5863 ])
                    (reg:DI 235 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

;; _734 = _733 r>> 25;

(insn 227 226 228 (parallel [
            (set (reg:DI 427 [ D.5863 ])
                (xor:DI (reg:DI 196 [ D.5863 ])
                    (reg:DI 236 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

(insn 228 227 0 (parallel [
            (set (reg:DI 238 [ D.5863 ])
                (rotatert:DI (reg:DI 427 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

;; v$2_740 = _750 + _734;

(insn 229 228 230 (parallel [
            (set (reg:DI 428 [ D.5863 ])
                (xor:DI (reg:DI 339 [ D.5867 ])
                    (reg:DI 340 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

(insn 230 229 231 (parallel [
            (set (reg:DI 429 [ D.5863 ])
                (plus:DI (reg:DI 428 [ D.5863 ])
                    (reg:DI 233 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

(insn 231 230 0 (parallel [
            (set (reg:DI 241 [ v$2 ])
                (plus:DI (reg:DI 429 [ D.5863 ])
                    (reg:DI 238 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

;; v$13_743 = _742 r>> 16;

(insn 232 231 233 (parallel [
            (set (reg:DI 430 [ D.5863 ])
                (xor:DI (reg:DI 235 [ D.5863 ])
                    (reg:DI 241 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

(insn 233 232 0 (parallel [
            (set (reg:DI 243 [ v$13 ])
                (rotatert:DI (reg:DI 430 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

;; v$8_745 = _731 + v$13_743;

(insn 234 233 0 (parallel [
            (set (reg:DI 244 [ v$8 ])
                (plus:DI (reg:DI 236 [ D.5863 ])
                    (reg:DI 243 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

;; v$7_748 = _747 r>> 11;

(insn 235 234 236 (parallel [
            (set (reg:DI 431 [ D.5863 ])
                (xor:DI (reg:DI 238 [ D.5863 ])
                    (reg:DI 244 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

(insn 236 235 0 (parallel [
            (set (reg:DI 246 [ v$7 ])
                (rotatert:DI (reg:DI 431 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))

;; _758 = _768 + _581;

(insn 237 236 238 (parallel [
            (set (reg:DI 432 [ D.5863 ])
                (xor:DI (reg:DI 343 [ D.5867 ])
                    (reg:DI 346 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

(insn 238 237 239 (parallel [
            (set (reg:DI 433 [ D.5863 ])
                (plus:DI (reg:DI 432 [ D.5863 ])
                    (reg:DI 191 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

(insn 239 238 0 (parallel [
            (set (reg:DI 250 [ D.5863 ])
                (plus:DI (reg:DI 433 [ D.5863 ])
                    (reg:DI 148 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

;; _761 = _760 r>> 32;

(insn 240 239 241 (parallel [
            (set (reg:DI 434 [ D.5863 ])
                (xor:DI (reg:DI 177 [ D.5863 ])
                    (reg:DI 250 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

(insn 241 240 0 (parallel [
            (set (reg:DI 252 [ D.5863 ])
                (rotate:DI (reg:DI 434 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

;; _763 = _603 + _761;

(insn 242 241 0 (parallel [
            (set (reg:DI 253 [ D.5863 ])
                (plus:DI (reg:DI 162 [ D.5863 ])
                    (reg:DI 252 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

;; _766 = _765 r>> 25;

(insn 243 242 244 (parallel [
            (set (reg:DI 435 [ D.5863 ])
                (xor:DI (reg:DI 148 [ D.5863 ])
                    (reg:DI 253 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

(insn 244 243 0 (parallel [
            (set (reg:DI 255 [ D.5863 ])
                (rotatert:DI (reg:DI 435 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

;; v$3_772 = _783 + _766;

(insn 245 244 246 (parallel [
            (set (reg:DI 436 [ D.5863 ])
                (xor:DI (reg:DI 347 [ D.5867 ])
                    (reg:DI 348 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

(insn 246 245 247 (parallel [
            (set (reg:DI 437 [ D.5863 ])
                (plus:DI (reg:DI 436 [ D.5863 ])
                    (reg:DI 250 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

(insn 247 246 0 (parallel [
            (set (reg:DI 258 [ v$3 ])
                (plus:DI (reg:DI 437 [ D.5863 ])
                    (reg:DI 255 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

;; v$14_775 = _774 r>> 16;

(insn 248 247 249 (parallel [
            (set (reg:DI 438 [ D.5863 ])
                (xor:DI (reg:DI 252 [ D.5863 ])
                    (reg:DI 258 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

(insn 249 248 0 (parallel [
            (set (reg:DI 260 [ v$14 ])
                (rotatert:DI (reg:DI 438 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

;; v$9_777 = _763 + v$14_775;

(insn 250 249 0 (parallel [
            (set (reg:DI 262 [ v$9 ])
                (plus:DI (reg:DI 253 [ D.5863 ])
                    (reg:DI 260 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

;; v$4_780 = _779 r>> 11;

(insn 251 250 252 (parallel [
            (set (reg:DI 439 [ D.5863 ])
                (xor:DI (reg:DI 255 [ D.5863 ])
                    (reg:DI 262 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

(insn 252 251 0 (parallel [
            (set (reg:DI 264 [ v$4 ])
                (rotatert:DI (reg:DI 439 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))

;; _19 = _895 + 4294967295;

(insn 253 252 0 (parallel [
            (set (reg:SI 100 [ D.5861 ])
                (plus:SI (reg:SI 100 [ D.5861 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

;; ivtmp.149_810 = ivtmp.149_814 + 16;

(insn 254 253 0 (parallel [
            (set (reg:DI 269 [ ivtmp.149 ])
                (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

;; if (_19 != 0)

(insn 255 254 256 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ D.5861 ])
            (const_int 0 [0]))) blake_ref.c:173 -1
     (nil))

(jump_insn 256 255 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:173 -1
     (int_list:REG_BR_PROB 588 (nil)))

;; Generating RTL for gimple basic block 6

;; _802 = (void *) ivtmp.149_810;

(insn 258 257 0 (set (reg/f:DI 268 [ D.5865 ])
        (reg:DI 269 [ ivtmp.149 ])) -1
     (nil))

;; _1450 = (int) _1448;

(insn 259 258 0 (set (reg:SI 286 [ D.5864 ])
        (zero_extend:SI (mem:QI (reg/f:DI 268 [ D.5865 ]) [0 MEM[base: _802, offset: 0B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1451 = m[_1450];

(insn 260 259 261 (set (reg:DI 440)
        (sign_extend:DI (reg:SI 286 [ D.5864 ]))) -1
     (nil))

(insn 261 260 0 (set (reg:DI 287 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 440)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))

;; _1455 = (int) _1453;

(insn 262 261 0 (set (reg:SI 289 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 1 [0x1])) [0 MEM[base: _802, offset: 1B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1456 = c64[_1455];

(insn 263 262 264 (set (reg/f:DI 441)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 264 263 265 (set (reg:DI 442)
        (sign_extend:DI (reg:SI 289 [ D.5864 ]))) -1
     (nil))

(insn 265 264 0 (set (reg:DI 290 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 442)
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1458 = m[_1455];

(insn 266 265 267 (set (reg:DI 443)
        (sign_extend:DI (reg:SI 289 [ D.5864 ]))) -1
     (nil))

(insn 267 266 0 (set (reg:DI 291 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 443)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1460 = c64[_1450];

(insn 268 267 269 (set (reg/f:DI 444)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 269 268 270 (set (reg:DI 445)
        (sign_extend:DI (reg:SI 286 [ D.5864 ]))) -1
     (nil))

(insn 270 269 0 (set (reg:DI 292 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 445)
                    (const_int 8 [0x8]))
                (reg/f:DI 444)) [3 c64 S8 A64])) -1
     (nil))

;; _1464 = (int) _1462;

(insn 271 270 0 (set (reg:SI 294 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 2 [0x2])) [0 MEM[base: _802, offset: 2B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1465 = m[_1464];

(insn 272 271 273 (set (reg:DI 446)
        (sign_extend:DI (reg:SI 294 [ D.5864 ]))) -1
     (nil))

(insn 273 272 0 (set (reg:DI 295 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 446)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))

;; _1469 = (int) _1467;

(insn 274 273 0 (set (reg:SI 297 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 3 [0x3])) [0 MEM[base: _802, offset: 3B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1470 = c64[_1469];

(insn 275 274 276 (set (reg/f:DI 447)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 276 275 277 (set (reg:DI 448)
        (sign_extend:DI (reg:SI 297 [ D.5864 ]))) -1
     (nil))

(insn 277 276 0 (set (reg:DI 298 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 448)
                    (const_int 8 [0x8]))
                (reg/f:DI 447)) [3 c64 S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1472 = m[_1469];

(insn 278 277 279 (set (reg:DI 449)
        (sign_extend:DI (reg:SI 297 [ D.5864 ]))) -1
     (nil))

(insn 279 278 0 (set (reg:DI 299 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 449)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1474 = c64[_1464];

(insn 280 279 281 (set (reg/f:DI 450)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 281 280 282 (set (reg:DI 451)
        (sign_extend:DI (reg:SI 294 [ D.5864 ]))) -1
     (nil))

(insn 282 281 0 (set (reg:DI 300 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 451)
                    (const_int 8 [0x8]))
                (reg/f:DI 450)) [3 c64 S8 A64])) -1
     (nil))

;; _1478 = (int) _1476;

(insn 283 282 0 (set (reg:SI 302 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 4 [0x4])) [0 MEM[base: _802, offset: 4B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1479 = m[_1478];

(insn 284 283 285 (set (reg:DI 452)
        (sign_extend:DI (reg:SI 302 [ D.5864 ]))) -1
     (nil))

(insn 285 284 0 (set (reg:DI 303 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 452)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))

;; _1483 = (int) _1481;

(insn 286 285 0 (set (reg:SI 305 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 5 [0x5])) [0 MEM[base: _802, offset: 5B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1484 = c64[_1483];

(insn 287 286 288 (set (reg/f:DI 453)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 288 287 289 (set (reg:DI 454)
        (sign_extend:DI (reg:SI 305 [ D.5864 ]))) -1
     (nil))

(insn 289 288 0 (set (reg:DI 306 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 454)
                    (const_int 8 [0x8]))
                (reg/f:DI 453)) [3 c64 S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1486 = m[_1483];

(insn 290 289 291 (set (reg:DI 455)
        (sign_extend:DI (reg:SI 305 [ D.5864 ]))) -1
     (nil))

(insn 291 290 0 (set (reg:DI 307 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 455)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1488 = c64[_1478];

(insn 292 291 293 (set (reg/f:DI 456)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 293 292 294 (set (reg:DI 457)
        (sign_extend:DI (reg:SI 302 [ D.5864 ]))) -1
     (nil))

(insn 294 293 0 (set (reg:DI 308 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 457)
                    (const_int 8 [0x8]))
                (reg/f:DI 456)) [3 c64 S8 A64])) -1
     (nil))

;; _1492 = (int) _1490;

(insn 295 294 0 (set (reg:SI 310 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 6 [0x6])) [0 MEM[base: _802, offset: 6B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1493 = m[_1492];

(insn 296 295 297 (set (reg:DI 458)
        (sign_extend:DI (reg:SI 310 [ D.5864 ]))) -1
     (nil))

(insn 297 296 0 (set (reg:DI 311 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 458)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))

;; _1497 = (int) _1495;

(insn 298 297 0 (set (reg:SI 313 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 7 [0x7])) [0 MEM[base: _802, offset: 7B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1498 = c64[_1497];

(insn 299 298 300 (set (reg/f:DI 459)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 300 299 301 (set (reg:DI 460)
        (sign_extend:DI (reg:SI 313 [ D.5864 ]))) -1
     (nil))

(insn 301 300 0 (set (reg:DI 314 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 460)
                    (const_int 8 [0x8]))
                (reg/f:DI 459)) [3 c64 S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1500 = m[_1497];

(insn 302 301 303 (set (reg:DI 461)
        (sign_extend:DI (reg:SI 313 [ D.5864 ]))) -1
     (nil))

(insn 303 302 0 (set (reg:DI 315 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 461)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1502 = c64[_1492];

(insn 304 303 305 (set (reg/f:DI 462)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 305 304 306 (set (reg:DI 463)
        (sign_extend:DI (reg:SI 310 [ D.5864 ]))) -1
     (nil))

(insn 306 305 0 (set (reg:DI 316 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 463)
                    (const_int 8 [0x8]))
                (reg/f:DI 462)) [3 c64 S8 A64])) -1
     (nil))

;; _1506 = (int) _1504;

(insn 307 306 0 (set (reg:SI 318 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 8 [0x8])) [0 MEM[base: _802, offset: 8B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1507 = m[_1506];

(insn 308 307 309 (set (reg:DI 464)
        (sign_extend:DI (reg:SI 318 [ D.5864 ]))) -1
     (nil))

(insn 309 308 0 (set (reg:DI 319 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 464)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))

;; _1511 = (int) _1509;

(insn 310 309 0 (set (reg:SI 321 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 9 [0x9])) [0 MEM[base: _802, offset: 9B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1512 = c64[_1511];

(insn 311 310 312 (set (reg/f:DI 465)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 312 311 313 (set (reg:DI 466)
        (sign_extend:DI (reg:SI 321 [ D.5864 ]))) -1
     (nil))

(insn 313 312 0 (set (reg:DI 322 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 466)
                    (const_int 8 [0x8]))
                (reg/f:DI 465)) [3 c64 S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1514 = m[_1511];

(insn 314 313 315 (set (reg:DI 467)
        (sign_extend:DI (reg:SI 321 [ D.5864 ]))) -1
     (nil))

(insn 315 314 0 (set (reg:DI 323 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 467)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1516 = c64[_1506];

(insn 316 315 317 (set (reg/f:DI 468)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 317 316 318 (set (reg:DI 469)
        (sign_extend:DI (reg:SI 318 [ D.5864 ]))) -1
     (nil))

(insn 318 317 0 (set (reg:DI 324 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 469)
                    (const_int 8 [0x8]))
                (reg/f:DI 468)) [3 c64 S8 A64])) -1
     (nil))

;; _1520 = (int) _1518;

(insn 319 318 0 (set (reg:SI 326 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 10 [0xa])) [0 MEM[base: _802, offset: 10B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1521 = m[_1520];

(insn 320 319 321 (set (reg:DI 470)
        (sign_extend:DI (reg:SI 326 [ D.5864 ]))) -1
     (nil))

(insn 321 320 0 (set (reg:DI 327 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 470)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))

;; _1525 = (int) _1523;

(insn 322 321 0 (set (reg:SI 329 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 11 [0xb])) [0 MEM[base: _802, offset: 11B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1526 = c64[_1525];

(insn 323 322 324 (set (reg/f:DI 471)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 324 323 325 (set (reg:DI 472)
        (sign_extend:DI (reg:SI 329 [ D.5864 ]))) -1
     (nil))

(insn 325 324 0 (set (reg:DI 330 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 472)
                    (const_int 8 [0x8]))
                (reg/f:DI 471)) [3 c64 S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1528 = m[_1525];

(insn 326 325 327 (set (reg:DI 473)
        (sign_extend:DI (reg:SI 329 [ D.5864 ]))) -1
     (nil))

(insn 327 326 0 (set (reg:DI 331 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 473)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1530 = c64[_1520];

(insn 328 327 329 (set (reg/f:DI 474)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 329 328 330 (set (reg:DI 475)
        (sign_extend:DI (reg:SI 326 [ D.5864 ]))) -1
     (nil))

(insn 330 329 0 (set (reg:DI 332 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 475)
                    (const_int 8 [0x8]))
                (reg/f:DI 474)) [3 c64 S8 A64])) -1
     (nil))

;; _1534 = (int) _1532;

(insn 331 330 0 (set (reg:SI 334 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 12 [0xc])) [0 MEM[base: _802, offset: 12B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1535 = m[_1534];

(insn 332 331 333 (set (reg:DI 476)
        (sign_extend:DI (reg:SI 334 [ D.5864 ]))) -1
     (nil))

(insn 333 332 0 (set (reg:DI 335 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 476)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))

;; _1539 = (int) _1537;

(insn 334 333 0 (set (reg:SI 337 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 13 [0xd])) [0 MEM[base: _802, offset: 13B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1540 = c64[_1539];

(insn 335 334 336 (set (reg/f:DI 477)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 336 335 337 (set (reg:DI 478)
        (sign_extend:DI (reg:SI 337 [ D.5864 ]))) -1
     (nil))

(insn 337 336 0 (set (reg:DI 338 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 478)
                    (const_int 8 [0x8]))
                (reg/f:DI 477)) [3 c64 S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1542 = m[_1539];

(insn 338 337 339 (set (reg:DI 479)
        (sign_extend:DI (reg:SI 337 [ D.5864 ]))) -1
     (nil))

(insn 339 338 0 (set (reg:DI 339 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 479)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1544 = c64[_1534];

(insn 340 339 341 (set (reg/f:DI 480)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 341 340 342 (set (reg:DI 481)
        (sign_extend:DI (reg:SI 334 [ D.5864 ]))) -1
     (nil))

(insn 342 341 0 (set (reg:DI 340 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 481)
                    (const_int 8 [0x8]))
                (reg/f:DI 480)) [3 c64 S8 A64])) -1
     (nil))

;; _1548 = (int) _1546;

(insn 343 342 0 (set (reg:SI 342 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 14 [0xe])) [0 MEM[base: _802, offset: 14B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1549 = m[_1548];

(insn 344 343 345 (set (reg:DI 482)
        (sign_extend:DI (reg:SI 342 [ D.5864 ]))) -1
     (nil))

(insn 345 344 0 (set (reg:DI 343 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 482)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))

;; _1553 = (int) _1551;

(insn 346 345 0 (set (reg:SI 345 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 15 [0xf])) [0 MEM[base: _802, offset: 15B]+0 S1 A8]))) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1554 = c64[_1553];

(insn 347 346 348 (set (reg/f:DI 483)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 348 347 349 (set (reg:DI 484)
        (sign_extend:DI (reg:SI 345 [ D.5864 ]))) -1
     (nil))

(insn 349 348 0 (set (reg:DI 346 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 484)
                    (const_int 8 [0x8]))
                (reg/f:DI 483)) [3 c64 S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1556 = m[_1553];

(insn 350 349 351 (set (reg:DI 485)
        (sign_extend:DI (reg:SI 345 [ D.5864 ]))) -1
     (nil))

(insn 351 350 0 (set (reg:DI 347 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 485)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:49, generic-match.c:3223

;; _1558 = c64[_1548];

(insn 352 351 353 (set (reg/f:DI 486)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))

(insn 353 352 354 (set (reg:DI 487)
        (sign_extend:DI (reg:SI 342 [ D.5864 ]))) -1
     (nil))

(insn 354 353 0 (set (reg:DI 348 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 487)
                    (const_int 8 [0x8]))
                (reg/f:DI 486)) [3 c64 S8 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 7
Swap operands in stmt:
_55 = vect_cst_.120_13 ^ _68;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_889 = vect_cst_.119_12 ^ _888;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_54 = vect_cst_.118_11 ^ _53;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
_782 = vect_cst_.117_10 ^ _823;
Cost left opnd=0, right opnd=1
Swap operands in stmt:
vect__785.126_28 = vect_cst_.116_9 ^ _55;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
vect__785.126_29 = vect_cst_.115_8 ^ _889;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
vect__785.126_30 = vect_cst_.114_7 ^ _54;
Cost left opnd=0, right opnd=2
Swap operands in stmt:
vect__785.126_31 = vect_cst_.113_6 ^ _782;
Cost left opnd=0, right opnd=2

;; 

(code_label 358 357 359 10 "" [0 uses])

(note 359 358 0 NOTE_INSN_BASIC_BLOCK)

;; vectp.132_33 = &state_534(D)->h64[0];

(insn 360 359 0 (parallel [
            (set (reg/f:DI 112 [ vectp.132 ])
                (plus:DI (reg/v/f:DI 350 [ state ])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

;; MEM[(long long unsigned int *)state_534(D) + 136B] = vect__785.126_28;

(insn 361 360 362 (set (reg:V2DI 488 [ vect_cst_.130 ])
        (vec_concat:V2DI (reg:DI 244 [ v$8 ])
            (reg:DI 262 [ v$9 ]))) -1
     (nil))

(insn 362 361 363 (set (reg:V2DI 489 [ vect_cst_.125 ])
        (vec_concat:V2DI (reg:DI 208 [ v$0 ])
            (reg:DI 225 [ v$1 ]))) -1
     (nil))

(insn 363 362 364 (set (reg:V2DI 490 [ D.5862 ])
        (xor:V2DI (reg:V2DI 488 [ vect_cst_.130 ])
            (reg:V2DI 489 [ vect_cst_.125 ]))) blake_ref.c:189 -1
     (nil))

(insn 364 363 365 (set (reg:V2DI 491 [ vect_cst_.120 ])
        (vec_concat:V2DI (reg:DI 127 [ D.5863 ])
            (reg:DI 128 [ D.5863 ]))) -1
     (nil))

(insn 365 364 366 (set (reg:V2DI 492 [ D.5862 ])
        (xor:V2DI (reg:V2DI 490 [ D.5862 ])
            (reg:V2DI 491 [ vect_cst_.120 ]))) blake_ref.c:189 -1
     (nil))

(insn 366 365 367 (set (reg:V2DI 493 [ vect_cst_.116 ])
        (vec_concat:V2DI (reg:DI 119 [ v$0 ])
            (reg:DI 120 [ v$1 ]))) -1
     (nil))

(insn 367 366 368 (set (reg:V2DI 494 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 492 [ D.5862 ])
            (reg:V2DI 493 [ vect_cst_.116 ]))) blake_ref.c:189 -1
     (nil))

(insn 368 367 0 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 136 [0x88])) [3 MEM[(long long unsigned int *)state_534(D) + 136B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 494 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 -1
     (nil))

;; vectp.132_49 = &MEM[(void *)state_534(D) + 152B];

(insn 369 368 0 (parallel [
            (set (reg/f:DI 114 [ vectp.132 ])
                (plus:DI (reg/v/f:DI 350 [ state ])
                    (const_int 152 [0x98])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:189 -1
     (nil))

;; MEM[(long long unsigned int *)state_534(D) + 152B] = vect__785.126_29;

(insn 370 369 371 (set (reg:V2DI 495 [ vect_cst_.124 ])
        (vec_concat:V2DI (reg:DI 241 [ v$2 ])
            (reg:DI 258 [ v$3 ]))) -1
     (nil))

(insn 371 370 372 (set (reg:V2DI 496 [ vect_cst_.129 ])
        (vec_concat:V2DI (reg:DI 211 [ v$10 ])
            (reg:DI 197 [ v$11 ]))) -1
     (nil))

(insn 372 371 373 (set (reg:V2DI 497 [ D.5862 ])
        (xor:V2DI (reg:V2DI 495 [ vect_cst_.124 ])
            (reg:V2DI 496 [ vect_cst_.129 ]))) blake_ref.c:189 -1
     (nil))

(insn 373 372 374 (set (reg:V2DI 498 [ vect_cst_.119 ])
        (vec_concat:V2DI (reg:DI 129 [ D.5863 ])
            (reg:DI 130 [ D.5863 ]))) -1
     (nil))

(insn 374 373 375 (set (reg:V2DI 499 [ D.5862 ])
        (xor:V2DI (reg:V2DI 497 [ D.5862 ])
            (reg:V2DI 498 [ vect_cst_.119 ]))) blake_ref.c:189 -1
     (nil))

(insn 375 374 376 (set (reg:V2DI 500 [ vect_cst_.115 ])
        (vec_concat:V2DI (reg:DI 121 [ v$2 ])
            (reg:DI 122 [ v$3 ]))) -1
     (nil))

(insn 376 375 377 (set (reg:V2DI 501 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 499 [ D.5862 ])
            (reg:V2DI 500 [ vect_cst_.115 ]))) blake_ref.c:189 -1
     (nil))

(insn 377 376 0 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 152 [0x98])) [3 MEM[(long long unsigned int *)state_534(D) + 152B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 501 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 -1
     (nil))

;; vectp.132_891 = &MEM[(void *)state_534(D) + 168B];

(insn 378 377 0 (parallel [
            (set (reg/f:DI 282 [ vectp.132 ])
                (plus:DI (reg/v/f:DI 350 [ state ])
                    (const_int 168 [0xa8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:189 -1
     (nil))

;; MEM[(long long unsigned int *)state_534(D) + 168B] = vect__785.126_30;

(insn 379 378 380 (set (reg:V2DI 502 [ vect_cst_.123 ])
        (vec_concat:V2DI (reg:DI 227 [ v$12 ])
            (reg:DI 243 [ v$13 ]))) -1
     (nil))

(insn 380 379 381 (set (reg:V2DI 503 [ vect_cst_.128 ])
        (vec_concat:V2DI (reg:DI 264 [ v$4 ])
            (reg:DI 214 [ v$5 ]))) -1
     (nil))

(insn 381 380 382 (set (reg:V2DI 504 [ D.5862 ])
        (xor:V2DI (reg:V2DI 502 [ vect_cst_.123 ])
            (reg:V2DI 503 [ vect_cst_.128 ]))) blake_ref.c:189 -1
     (nil))

(insn 382 381 383 (set (reg:V2DI 505 [ vect_cst_.118 ])
        (vec_concat:V2DI (reg:DI 127 [ D.5863 ])
            (reg:DI 128 [ D.5863 ]))) -1
     (nil))

(insn 383 382 384 (set (reg:V2DI 506 [ D.5862 ])
        (xor:V2DI (reg:V2DI 504 [ D.5862 ])
            (reg:V2DI 505 [ vect_cst_.118 ]))) blake_ref.c:189 -1
     (nil))

(insn 384 383 385 (set (reg:V2DI 507 [ vect_cst_.114 ])
        (vec_concat:V2DI (reg:DI 123 [ v$4 ])
            (reg:DI 124 [ v$5 ]))) -1
     (nil))

(insn 385 384 386 (set (reg:V2DI 508 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 506 [ D.5862 ])
            (reg:V2DI 507 [ vect_cst_.114 ]))) blake_ref.c:189 -1
     (nil))

(insn 386 385 0 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 168 [0xa8])) [3 MEM[(long long unsigned int *)state_534(D) + 168B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 508 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 -1
     (nil))

;; vectp.132_39 = &MEM[(void *)state_534(D) + 184B];

(insn 387 386 0 (parallel [
            (set (reg/f:DI 113 [ vectp.132 ])
                (plus:DI (reg/v/f:DI 350 [ state ])
                    (const_int 184 [0xb8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:189 -1
     (nil))

;; MEM[(long long unsigned int *)state_534(D) + 184B] = vect__785.126_31;

(insn 388 387 389 (set (reg:V2DI 509 [ vect_cst_.127 ])
        (vec_concat:V2DI (reg:DI 230 [ v$6 ])
            (reg:DI 246 [ v$7 ]))) -1
     (nil))

(insn 389 388 390 (set (reg:V2DI 510 [ vect_cst_.122 ])
        (vec_concat:V2DI (reg:DI 260 [ v$14 ])
            (reg:DI 210 [ v$15 ]))) -1
     (nil))

(insn 390 389 391 (set (reg:V2DI 511 [ D.5862 ])
        (xor:V2DI (reg:V2DI 509 [ vect_cst_.127 ])
            (reg:V2DI 510 [ vect_cst_.122 ]))) blake_ref.c:189 -1
     (nil))

(insn 391 390 392 (set (reg:V2DI 512 [ vect_cst_.117 ])
        (vec_concat:V2DI (reg:DI 129 [ D.5863 ])
            (reg:DI 130 [ D.5863 ]))) -1
     (nil))

(insn 392 391 393 (set (reg:V2DI 513 [ D.5862 ])
        (xor:V2DI (reg:V2DI 511 [ D.5862 ])
            (reg:V2DI 512 [ vect_cst_.117 ]))) blake_ref.c:189 -1
     (nil))

(insn 393 392 394 (set (reg:V2DI 514 [ vect_cst_.113 ])
        (vec_concat:V2DI (reg:DI 125 [ v$6 ])
            (reg:DI 126 [ v$7 ]))) -1
     (nil))

(insn 394 393 395 (set (reg:V2DI 515 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 513 [ D.5862 ])
            (reg:V2DI 514 [ vect_cst_.113 ]))) blake_ref.c:189 -1
     (nil))

(insn 395 394 0 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 184 [0xb8])) [3 MEM[(long long unsigned int *)state_534(D) + 184B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 515 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 -1
     (nil))

;; m ={v} {CLOBBER};

(nil)

;; return 0;

(insn 396 395 397 (set (reg:SI 349 [ <retval> ])
        (const_int 0 [0])) blake_ref.c:198 -1
     (nil))

(jump_insn 397 396 398 (set (pc)
        (label_ref 0)) blake_ref.c:198 -1
     (nil))

(barrier 398 397 0)
Edge 2->4 redirected to 10


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 397.
Merging block 10 into block 9...
Merged blocks 9 and 10.
Merged 9 and 10 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 5 0 38 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 588, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 38 5 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 6 38 7 2 (set (reg/v/f:DI 350 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:106 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 81 virtual-incoming-args) [4 state+0 S8 A64])
        (nil)))
(insn 7 6 8 2 (set (reg/v/f:DI 351 [ datablock ])
        (reg:DI 1 dx [ datablock ])) blake_ref.c:106 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 8 [0x8])) [4 datablock+0 S8 A64])
        (nil)))
(note 8 7 40 2 NOTE_INSN_FUNCTION_BEG)
(insn 40 8 41 2 (set (reg:DI 352)
        (mem:DI (reg/v/f:DI 351 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8])) -1
     (nil))
(insn 41 40 42 2 (set (reg:DI 287 [ D.5867 ])
        (bswap:DI (reg:DI 352))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/v/f:DI 351 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8]))
        (nil)))
(insn 42 41 43 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -128 [0xffffffffffffff80])) [3 m+0 S8 A128])
        (reg:DI 287 [ D.5867 ])) blake_ref.c:129 -1
     (nil))
(insn 43 42 44 2 (set (reg:DI 353)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8])) -1
     (nil))
(insn 44 43 45 2 (set (reg:DI 291 [ D.5867 ])
        (bswap:DI (reg:DI 353))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8]))
        (nil)))
(insn 45 44 46 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -120 [0xffffffffffffff88])) [3 m+8 S8 A64])
        (reg:DI 291 [ D.5867 ])) blake_ref.c:130 -1
     (nil))
(insn 46 45 47 2 (set (reg:DI 354)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8])) -1
     (nil))
(insn 47 46 48 2 (set (reg:DI 295 [ D.5867 ])
        (bswap:DI (reg:DI 354))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8]))
        (nil)))
(insn 48 47 49 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -112 [0xffffffffffffff90])) [3 m+16 S8 A128])
        (reg:DI 295 [ D.5867 ])) blake_ref.c:131 -1
     (nil))
(insn 49 48 50 2 (set (reg:DI 355)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8])) -1
     (nil))
(insn 50 49 51 2 (set (reg:DI 299 [ D.5867 ])
        (bswap:DI (reg:DI 355))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8]))
        (nil)))
(insn 51 50 52 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -104 [0xffffffffffffff98])) [3 m+24 S8 A64])
        (reg:DI 299 [ D.5867 ])) blake_ref.c:132 -1
     (nil))
(insn 52 51 53 2 (set (reg:DI 356)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8])) -1
     (nil))
(insn 53 52 54 2 (set (reg:DI 303 [ D.5867 ])
        (bswap:DI (reg:DI 356))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8]))
        (nil)))
(insn 54 53 55 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -96 [0xffffffffffffffa0])) [3 m+32 S8 A128])
        (reg:DI 303 [ D.5867 ])) blake_ref.c:133 -1
     (nil))
(insn 55 54 56 2 (set (reg:DI 357)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8])) -1
     (nil))
(insn 56 55 57 2 (set (reg:DI 307 [ D.5867 ])
        (bswap:DI (reg:DI 357))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8]))
        (nil)))
(insn 57 56 58 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -88 [0xffffffffffffffa8])) [3 m+40 S8 A64])
        (reg:DI 307 [ D.5867 ])) blake_ref.c:134 -1
     (nil))
(insn 58 57 59 2 (set (reg:DI 358)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8])) -1
     (nil))
(insn 59 58 60 2 (set (reg:DI 311 [ D.5867 ])
        (bswap:DI (reg:DI 358))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8]))
        (nil)))
(insn 60 59 61 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -80 [0xffffffffffffffb0])) [3 m+48 S8 A128])
        (reg:DI 311 [ D.5867 ])) blake_ref.c:135 -1
     (nil))
(insn 61 60 62 2 (set (reg:DI 359)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8])) -1
     (nil))
(insn 62 61 63 2 (set (reg:DI 315 [ D.5867 ])
        (bswap:DI (reg:DI 359))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8]))
        (nil)))
(insn 63 62 64 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -72 [0xffffffffffffffb8])) [3 m+56 S8 A64])
        (reg:DI 315 [ D.5867 ])) blake_ref.c:136 -1
     (nil))
(insn 64 63 65 2 (set (reg:DI 360)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8])) -1
     (nil))
(insn 65 64 66 2 (set (reg:DI 319 [ D.5867 ])
        (bswap:DI (reg:DI 360))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8]))
        (nil)))
(insn 66 65 67 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [3 m+64 S8 A128])
        (reg:DI 319 [ D.5867 ])) blake_ref.c:137 -1
     (nil))
(insn 67 66 68 2 (set (reg:DI 361)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8])) -1
     (nil))
(insn 68 67 69 2 (set (reg:DI 323 [ D.5867 ])
        (bswap:DI (reg:DI 361))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8]))
        (nil)))
(insn 69 68 70 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [3 m+72 S8 A64])
        (reg:DI 323 [ D.5867 ])) blake_ref.c:138 -1
     (nil))
(insn 70 69 71 2 (set (reg:DI 362)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8])) -1
     (nil))
(insn 71 70 72 2 (set (reg:DI 327 [ D.5867 ])
        (bswap:DI (reg:DI 362))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8]))
        (nil)))
(insn 72 71 73 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [3 m+80 S8 A128])
        (reg:DI 327 [ D.5867 ])) blake_ref.c:139 -1
     (nil))
(insn 73 72 74 2 (set (reg:DI 363)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8])) -1
     (nil))
(insn 74 73 75 2 (set (reg:DI 331 [ D.5867 ])
        (bswap:DI (reg:DI 363))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8]))
        (nil)))
(insn 75 74 76 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [3 m+88 S8 A64])
        (reg:DI 331 [ D.5867 ])) blake_ref.c:140 -1
     (nil))
(insn 76 75 77 2 (set (reg:DI 364)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8])) -1
     (nil))
(insn 77 76 78 2 (set (reg:DI 335 [ D.5867 ])
        (bswap:DI (reg:DI 364))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8]))
        (nil)))
(insn 78 77 79 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [3 m+96 S8 A128])
        (reg:DI 335 [ D.5867 ])) blake_ref.c:141 -1
     (nil))
(insn 79 78 80 2 (set (reg:DI 365)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8])) -1
     (nil))
(insn 80 79 81 2 (set (reg:DI 339 [ D.5867 ])
        (bswap:DI (reg:DI 365))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8]))
        (nil)))
(insn 81 80 82 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [3 m+104 S8 A64])
        (reg:DI 339 [ D.5867 ])) blake_ref.c:142 -1
     (nil))
(insn 82 81 83 2 (set (reg:DI 366)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8])) -1
     (nil))
(insn 83 82 84 2 (set (reg:DI 343 [ D.5867 ])
        (bswap:DI (reg:DI 366))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8]))
        (nil)))
(insn 84 83 85 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 m+112 S8 A128])
        (reg:DI 343 [ D.5867 ])) blake_ref.c:143 -1
     (nil))
(insn 85 84 86 2 (set (reg:DI 367)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 120 [0x78])) [0 MEM[(const BitSequence *)datablock_5(D) + 120B]+0 S8 A8])) -1
     (nil))
(insn 86 85 87 2 (set (reg:DI 347 [ D.5867 ])
        (bswap:DI (reg:DI 367))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 120 [0x78])) [0 MEM[(const BitSequence *)datablock_5(D) + 120B]+0 S8 A8]))
        (nil)))
(insn 87 86 88 2 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 m+120 S8 A64])
        (reg:DI 347 [ D.5867 ])) blake_ref.c:144 -1
     (nil))
(insn 88 87 89 2 (set (reg:DI 119 [ v$0 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 136 [0x88])) [3 state_534(D)->h64+0 S8 A64])) blake_ref.c:147 -1
     (nil))
(insn 89 88 90 2 (set (reg:DI 120 [ v$1 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 144 [0x90])) [3 state_534(D)->h64+8 S8 A64])) blake_ref.c:148 -1
     (nil))
(insn 90 89 91 2 (set (reg:DI 121 [ v$2 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 152 [0x98])) [3 state_534(D)->h64+16 S8 A64])) blake_ref.c:149 -1
     (nil))
(insn 91 90 92 2 (set (reg:DI 122 [ v$3 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 160 [0xa0])) [3 state_534(D)->h64+24 S8 A64])) blake_ref.c:150 -1
     (nil))
(insn 92 91 93 2 (set (reg:DI 123 [ v$4 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 168 [0xa8])) [3 state_534(D)->h64+32 S8 A64])) blake_ref.c:151 -1
     (nil))
(insn 93 92 94 2 (set (reg:DI 124 [ v$5 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 176 [0xb0])) [3 state_534(D)->h64+40 S8 A64])) blake_ref.c:152 -1
     (nil))
(insn 94 93 95 2 (set (reg:DI 125 [ v$6 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 184 [0xb8])) [3 state_534(D)->h64+48 S8 A64])) blake_ref.c:153 -1
     (nil))
(insn 95 94 96 2 (set (reg:DI 126 [ v$7 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 192 [0xc0])) [3 state_534(D)->h64+56 S8 A64])) blake_ref.c:154 -1
     (nil))
(insn 96 95 97 2 (set (reg:DI 127 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 344 [0x158])) [3 state_534(D)->salt64+0 S8 A64])) blake_ref.c:155 -1
     (nil))
(insn 97 96 98 2 (set (reg:DI 368)
        (const_int 2611923443488327891 [0x243f6a8885a308d3])) blake_ref.c:155 -1
     (nil))
(insn 98 97 99 2 (parallel [
            (set (reg:DI 244 [ v$8 ])
                (xor:DI (reg:DI 127 [ D.5863 ])
                    (reg:DI 368)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:155 -1
     (nil))
(insn 99 98 100 2 (set (reg:DI 128 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 352 [0x160])) [3 state_534(D)->salt64+8 S8 A64])) blake_ref.c:156 -1
     (nil))
(insn 100 99 101 2 (set (reg:DI 369)
        (const_int 1376283091369227076 [0x13198a2e03707344])) blake_ref.c:156 -1
     (nil))
(insn 101 100 102 2 (parallel [
            (set (reg:DI 262 [ v$9 ])
                (xor:DI (reg:DI 128 [ D.5863 ])
                    (reg:DI 369)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:156 -1
     (nil))
(insn 102 101 103 2 (set (reg:DI 129 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 360 [0x168])) [3 state_534(D)->salt64+16 S8 A64])) blake_ref.c:157 -1
     (nil))
(insn 103 102 104 2 (set (reg:DI 370)
        (const_int -6626703657320631856 [0xa4093822299f31d0])) blake_ref.c:157 -1
     (nil))
(insn 104 103 105 2 (parallel [
            (set (reg:DI 211 [ v$10 ])
                (xor:DI (reg:DI 129 [ D.5863 ])
                    (reg:DI 370)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:157 -1
     (nil))
(insn 105 104 106 2 (set (reg:DI 130 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 368 [0x170])) [3 state_534(D)->salt64+24 S8 A64])) blake_ref.c:158 -1
     (nil))
(insn 106 105 107 2 (set (reg:DI 371)
        (const_int 589684135938649225 [0x82efa98ec4e6c89])) blake_ref.c:158 -1
     (nil))
(insn 107 106 108 2 (parallel [
            (set (reg:DI 197 [ v$11 ])
                (xor:DI (reg:DI 130 [ D.5863 ])
                    (reg:DI 371)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:158 -1
     (nil))
(insn 108 107 109 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 350 [ state ])
                    (const_int 12 [0xc])) [2 state_534(D)->nullt+0 S4 A32])
            (const_int 0 [0]))) blake_ref.c:159 -1
     (nil))
(jump_insn 109 108 110 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 406)
            (pc))) blake_ref.c:159 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 406)
;;  succ:       5 [50.0%] 
;;              4 [50.0%]  (FALLTHRU)

;; basic block 4, loop depth 0, count 0, freq 294, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 110 109 111 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 4 (set (reg:DI 132 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 200 [0xc8])) [3 state_534(D)->t64+0 S8 A64])) blake_ref.c:166 -1
     (nil))
(insn 112 111 113 4 (set (reg:DI 372)
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:166 -1
     (nil))
(insn 113 112 114 4 (parallel [
            (set (reg:DI 227 [ v$12 ])
                (xor:DI (reg:DI 132 [ D.5863 ])
                    (reg:DI 372)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:166 -1
     (nil))
(insn 114 113 115 4 (set (reg:DI 373)
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:167 -1
     (nil))
(insn 115 114 116 4 (parallel [
            (set (reg:DI 243 [ v$13 ])
                (xor:DI (reg:DI 132 [ D.5863 ])
                    (reg:DI 373)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:167 -1
     (nil))
(insn 116 115 117 4 (set (reg:DI 133 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 208 [0xd0])) [3 state_534(D)->t64+8 S8 A64])) blake_ref.c:168 -1
     (nil))
(insn 117 116 118 4 (set (reg:DI 374)
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:168 -1
     (nil))
(insn 118 117 119 4 (parallel [
            (set (reg:DI 260 [ v$14 ])
                (xor:DI (reg:DI 133 [ D.5863 ])
                    (reg:DI 374)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:168 -1
     (nil))
(insn 119 118 120 4 (set (reg:DI 375)
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:169 -1
     (nil))
(insn 120 119 403 4 (parallel [
            (set (reg:DI 210 [ v$15 ])
                (xor:DI (reg:DI 133 [ D.5863 ])
                    (reg:DI 375)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:169 -1
     (nil))
(jump_insn 403 120 404 4 (set (pc)
        (label_ref 121)) -1
     (nil)
 -> 121)
;;  succ:       6 [100.0%] 

(barrier 404 403 406)
;; basic block 5, loop depth 0, count 0, freq 294, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
(code_label 406 404 405 5 12 "" [1 uses])
(note 405 406 9 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 9 405 10 5 (set (reg:DI 210 [ v$15 ])
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:163 -1
     (nil))
(insn 10 9 11 5 (set (reg:DI 260 [ v$14 ])
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:162 -1
     (nil))
(insn 11 10 12 5 (set (reg:DI 243 [ v$13 ])
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:161 -1
     (nil))
(insn 12 11 121 5 (set (reg:DI 227 [ v$12 ])
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:160 -1
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 590, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
(code_label 121 12 122 6 9 "" [1 uses])
(note 122 121 123 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 13 6 (set (reg:DI 269 [ ivtmp.149 ])
        (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)) -1
     (nil))
(insn 13 123 14 6 (set (reg:DI 208 [ v$0 ])
        (reg:DI 119 [ v$0 ])) blake_ref.c:160 -1
     (nil))
(insn 14 13 15 6 (set (reg:DI 225 [ v$1 ])
        (reg:DI 120 [ v$1 ])) blake_ref.c:160 -1
     (nil))
(insn 15 14 16 6 (set (reg:DI 241 [ v$2 ])
        (reg:DI 121 [ v$2 ])) blake_ref.c:160 -1
     (nil))
(insn 16 15 17 6 (set (reg:DI 258 [ v$3 ])
        (reg:DI 122 [ v$3 ])) blake_ref.c:160 -1
     (nil))
(insn 17 16 18 6 (set (reg:DI 264 [ v$4 ])
        (reg:DI 123 [ v$4 ])) blake_ref.c:160 -1
     (nil))
(insn 18 17 19 6 (set (reg:DI 214 [ v$5 ])
        (reg:DI 124 [ v$5 ])) blake_ref.c:160 -1
     (nil))
(insn 19 18 20 6 (set (reg:DI 230 [ v$6 ])
        (reg:DI 125 [ v$6 ])) blake_ref.c:160 -1
     (nil))
(insn 20 19 21 6 (set (reg:DI 246 [ v$7 ])
        (reg:DI 126 [ v$7 ])) blake_ref.c:160 -1
     (nil))
(insn 21 20 22 6 (set (reg:SI 100 [ D.5861 ])
        (const_int 16 [0x10])) blake_ref.c:160 -1
     (nil))
(insn 22 21 23 6 (set (reg:DI 348 [ D.5868 ])
        (const_int 577009281997405206 [0x801f2e2858efc16])) blake_ref.c:160 -1
     (nil))
(insn 23 22 24 6 (set (reg:DI 346 [ D.5868 ])
        (const_int 7163292796296056425 [0x636920d871574e69])) blake_ref.c:160 -1
     (nil))
(insn 24 23 25 6 (set (reg:DI 340 [ D.5868 ])
        (const_int -5008970055469465703 [0xba7c9045f12c7f99])) blake_ref.c:160 -1
     (nil))
(insn 25 24 26 6 (set (reg:DI 338 [ D.5868 ])
        (const_int 2639559389850201335 [0x24a19947b3916cf7])) blake_ref.c:160 -1
     (nil))
(insn 26 25 27 6 (set (reg:DI 332 [ D.5868 ])
        (const_int 3458046377305235383 [0x2ffd72dbd01adfb7])) blake_ref.c:160 -1
     (nil))
(insn 27 26 28 6 (set (reg:DI 330 [ D.5868 ])
        (const_int -5124621466747896170 [0xb8e1afed6a267e96])) blake_ref.c:160 -1
     (nil))
(insn 28 27 29 6 (set (reg:DI 324 [ D.5868 ])
        (const_int -7919907764393346277 [0x9216d5d98979fb1b])) blake_ref.c:160 -1
     (nil))
(insn 29 28 30 6 (set (reg:DI 322 [ D.5868 ])
        (const_int -3372901835766516308 [0xd1310ba698dfb5ac])) blake_ref.c:160 -1
     (nil))
(insn 30 29 31 6 (set (reg:DI 316 [ D.5868 ])
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:160 -1
     (nil))
(insn 31 30 32 6 (set (reg:DI 314 [ D.5868 ])
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:160 -1
     (nil))
(insn 32 31 33 6 (set (reg:DI 308 [ D.5868 ])
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:160 -1
     (nil))
(insn 33 32 34 6 (set (reg:DI 306 [ D.5868 ])
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:160 -1
     (nil))
(insn 34 33 35 6 (set (reg:DI 300 [ D.5868 ])
        (const_int -6626703657320631856 [0xa4093822299f31d0])) blake_ref.c:160 -1
     (nil))
(insn 35 34 36 6 (set (reg:DI 298 [ D.5868 ])
        (const_int 589684135938649225 [0x82efa98ec4e6c89])) blake_ref.c:160 -1
     (nil))
(insn 36 35 37 6 (set (reg:DI 292 [ D.5868 ])
        (const_int 2611923443488327891 [0x243f6a8885a308d3])) blake_ref.c:160 -1
     (nil))
(insn 37 36 355 6 (set (reg:DI 290 [ D.5868 ])
        (const_int 1376283091369227076 [0x13198a2e03707344])) blake_ref.c:160 -1
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 1, count 0, freq 9412, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [100.0%]  (DFS_BACK)
;;              6 [100.0%]  (FALLTHRU)
(code_label 355 37 124 7 11 "" [1 uses])
(note 124 355 125 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 7 (parallel [
            (set (reg:DI 376 [ D.5863 ])
                (xor:DI (reg:DI 287 [ D.5867 ])
                    (reg:DI 290 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 126 125 127 7 (parallel [
            (set (reg:DI 377 [ D.5863 ])
                (plus:DI (reg:DI 376 [ D.5863 ])
                    (reg:DI 264 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 127 126 128 7 (parallel [
            (set (reg:DI 135 [ D.5863 ])
                (plus:DI (reg:DI 377 [ D.5863 ])
                    (reg:DI 208 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 128 127 129 7 (parallel [
            (set (reg:DI 378 [ D.5863 ])
                (xor:DI (reg:DI 135 [ D.5863 ])
                    (reg:DI 227 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 129 128 130 7 (parallel [
            (set (reg:DI 137 [ D.5863 ])
                (rotate:DI (reg:DI 378 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 130 129 131 7 (parallel [
            (set (reg:DI 138 [ D.5863 ])
                (plus:DI (reg:DI 137 [ D.5863 ])
                    (reg:DI 244 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 131 130 132 7 (parallel [
            (set (reg:DI 379 [ D.5863 ])
                (xor:DI (reg:DI 138 [ D.5863 ])
                    (reg:DI 264 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 132 131 133 7 (parallel [
            (set (reg:DI 140 [ D.5863 ])
                (rotatert:DI (reg:DI 379 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 133 132 134 7 (parallel [
            (set (reg:DI 380 [ D.5863 ])
                (xor:DI (reg:DI 291 [ D.5867 ])
                    (reg:DI 292 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 134 133 135 7 (parallel [
            (set (reg:DI 381 [ D.5863 ])
                (plus:DI (reg:DI 380 [ D.5863 ])
                    (reg:DI 135 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 135 134 136 7 (parallel [
            (set (reg:DI 143 [ D.5863 ])
                (plus:DI (reg:DI 381 [ D.5863 ])
                    (reg:DI 140 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 136 135 137 7 (parallel [
            (set (reg:DI 382 [ D.5863 ])
                (xor:DI (reg:DI 137 [ D.5863 ])
                    (reg:DI 143 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 137 136 138 7 (parallel [
            (set (reg:DI 145 [ D.5863 ])
                (rotatert:DI (reg:DI 382 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 138 137 139 7 (parallel [
            (set (reg:DI 146 [ D.5863 ])
                (plus:DI (reg:DI 138 [ D.5863 ])
                    (reg:DI 145 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 139 138 140 7 (parallel [
            (set (reg:DI 383 [ D.5863 ])
                (xor:DI (reg:DI 140 [ D.5863 ])
                    (reg:DI 146 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 140 139 141 7 (parallel [
            (set (reg:DI 148 [ D.5863 ])
                (rotatert:DI (reg:DI 383 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 -1
     (nil))
(insn 141 140 142 7 (parallel [
            (set (reg:DI 384 [ D.5863 ])
                (xor:DI (reg:DI 295 [ D.5867 ])
                    (reg:DI 298 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 142 141 143 7 (parallel [
            (set (reg:DI 385 [ D.5863 ])
                (plus:DI (reg:DI 384 [ D.5863 ])
                    (reg:DI 214 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 143 142 144 7 (parallel [
            (set (reg:DI 151 [ D.5863 ])
                (plus:DI (reg:DI 385 [ D.5863 ])
                    (reg:DI 225 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 144 143 145 7 (parallel [
            (set (reg:DI 386 [ D.5863 ])
                (xor:DI (reg:DI 151 [ D.5863 ])
                    (reg:DI 243 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 145 144 146 7 (parallel [
            (set (reg:DI 153 [ D.5863 ])
                (rotate:DI (reg:DI 386 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 146 145 147 7 (parallel [
            (set (reg:DI 154 [ D.5863 ])
                (plus:DI (reg:DI 153 [ D.5863 ])
                    (reg:DI 262 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 147 146 148 7 (parallel [
            (set (reg:DI 387 [ D.5863 ])
                (xor:DI (reg:DI 154 [ D.5863 ])
                    (reg:DI 214 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 148 147 149 7 (parallel [
            (set (reg:DI 156 [ D.5863 ])
                (rotatert:DI (reg:DI 387 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 149 148 150 7 (parallel [
            (set (reg:DI 388 [ D.5863 ])
                (xor:DI (reg:DI 299 [ D.5867 ])
                    (reg:DI 300 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 150 149 151 7 (parallel [
            (set (reg:DI 389 [ D.5863 ])
                (plus:DI (reg:DI 388 [ D.5863 ])
                    (reg:DI 151 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 151 150 152 7 (parallel [
            (set (reg:DI 159 [ D.5863 ])
                (plus:DI (reg:DI 389 [ D.5863 ])
                    (reg:DI 156 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 152 151 153 7 (parallel [
            (set (reg:DI 390 [ D.5863 ])
                (xor:DI (reg:DI 153 [ D.5863 ])
                    (reg:DI 159 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 153 152 154 7 (parallel [
            (set (reg:DI 161 [ D.5863 ])
                (rotatert:DI (reg:DI 390 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 154 153 155 7 (parallel [
            (set (reg:DI 162 [ D.5863 ])
                (plus:DI (reg:DI 154 [ D.5863 ])
                    (reg:DI 161 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 155 154 156 7 (parallel [
            (set (reg:DI 391 [ D.5863 ])
                (xor:DI (reg:DI 156 [ D.5863 ])
                    (reg:DI 162 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 156 155 157 7 (parallel [
            (set (reg:DI 164 [ D.5863 ])
                (rotatert:DI (reg:DI 391 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 -1
     (nil))
(insn 157 156 158 7 (parallel [
            (set (reg:DI 392 [ D.5863 ])
                (xor:DI (reg:DI 303 [ D.5867 ])
                    (reg:DI 306 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 158 157 159 7 (parallel [
            (set (reg:DI 393 [ D.5863 ])
                (plus:DI (reg:DI 392 [ D.5863 ])
                    (reg:DI 230 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 159 158 160 7 (parallel [
            (set (reg:DI 167 [ D.5863 ])
                (plus:DI (reg:DI 393 [ D.5863 ])
                    (reg:DI 241 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 160 159 161 7 (parallel [
            (set (reg:DI 394 [ D.5863 ])
                (xor:DI (reg:DI 167 [ D.5863 ])
                    (reg:DI 260 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 161 160 162 7 (parallel [
            (set (reg:DI 169 [ D.5863 ])
                (rotate:DI (reg:DI 394 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 162 161 163 7 (parallel [
            (set (reg:DI 170 [ D.5863 ])
                (plus:DI (reg:DI 169 [ D.5863 ])
                    (reg:DI 211 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 163 162 164 7 (parallel [
            (set (reg:DI 395 [ D.5863 ])
                (xor:DI (reg:DI 170 [ D.5863 ])
                    (reg:DI 230 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 164 163 165 7 (parallel [
            (set (reg:DI 172 [ D.5863 ])
                (rotatert:DI (reg:DI 395 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 165 164 166 7 (parallel [
            (set (reg:DI 396 [ D.5863 ])
                (xor:DI (reg:DI 307 [ D.5867 ])
                    (reg:DI 308 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 166 165 167 7 (parallel [
            (set (reg:DI 397 [ D.5863 ])
                (plus:DI (reg:DI 396 [ D.5863 ])
                    (reg:DI 167 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 167 166 168 7 (parallel [
            (set (reg:DI 175 [ D.5863 ])
                (plus:DI (reg:DI 397 [ D.5863 ])
                    (reg:DI 172 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 168 167 169 7 (parallel [
            (set (reg:DI 398 [ D.5863 ])
                (xor:DI (reg:DI 169 [ D.5863 ])
                    (reg:DI 175 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 169 168 170 7 (parallel [
            (set (reg:DI 177 [ D.5863 ])
                (rotatert:DI (reg:DI 398 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 170 169 171 7 (parallel [
            (set (reg:DI 178 [ D.5863 ])
                (plus:DI (reg:DI 170 [ D.5863 ])
                    (reg:DI 177 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 171 170 172 7 (parallel [
            (set (reg:DI 399 [ D.5863 ])
                (xor:DI (reg:DI 172 [ D.5863 ])
                    (reg:DI 178 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 172 171 173 7 (parallel [
            (set (reg:DI 180 [ D.5863 ])
                (rotatert:DI (reg:DI 399 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 -1
     (nil))
(insn 173 172 174 7 (parallel [
            (set (reg:DI 400 [ D.5863 ])
                (xor:DI (reg:DI 311 [ D.5867 ])
                    (reg:DI 314 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 174 173 175 7 (parallel [
            (set (reg:DI 401 [ D.5863 ])
                (plus:DI (reg:DI 400 [ D.5863 ])
                    (reg:DI 246 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 175 174 176 7 (parallel [
            (set (reg:DI 183 [ D.5863 ])
                (plus:DI (reg:DI 401 [ D.5863 ])
                    (reg:DI 258 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 176 175 177 7 (parallel [
            (set (reg:DI 402 [ D.5863 ])
                (xor:DI (reg:DI 183 [ D.5863 ])
                    (reg:DI 210 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 177 176 178 7 (parallel [
            (set (reg:DI 185 [ D.5863 ])
                (rotate:DI (reg:DI 402 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 178 177 179 7 (parallel [
            (set (reg:DI 186 [ D.5863 ])
                (plus:DI (reg:DI 185 [ D.5863 ])
                    (reg:DI 197 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 179 178 180 7 (parallel [
            (set (reg:DI 403 [ D.5863 ])
                (xor:DI (reg:DI 186 [ D.5863 ])
                    (reg:DI 246 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 180 179 181 7 (parallel [
            (set (reg:DI 188 [ D.5863 ])
                (rotatert:DI (reg:DI 403 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 181 180 182 7 (parallel [
            (set (reg:DI 404 [ D.5863 ])
                (xor:DI (reg:DI 315 [ D.5867 ])
                    (reg:DI 316 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 182 181 183 7 (parallel [
            (set (reg:DI 405 [ D.5863 ])
                (plus:DI (reg:DI 404 [ D.5863 ])
                    (reg:DI 183 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 183 182 184 7 (parallel [
            (set (reg:DI 191 [ D.5863 ])
                (plus:DI (reg:DI 405 [ D.5863 ])
                    (reg:DI 188 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 184 183 185 7 (parallel [
            (set (reg:DI 406 [ D.5863 ])
                (xor:DI (reg:DI 185 [ D.5863 ])
                    (reg:DI 191 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 185 184 186 7 (parallel [
            (set (reg:DI 193 [ D.5863 ])
                (rotatert:DI (reg:DI 406 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 186 185 187 7 (parallel [
            (set (reg:DI 194 [ D.5863 ])
                (plus:DI (reg:DI 186 [ D.5863 ])
                    (reg:DI 193 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 187 186 188 7 (parallel [
            (set (reg:DI 407 [ D.5863 ])
                (xor:DI (reg:DI 188 [ D.5863 ])
                    (reg:DI 194 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 188 187 189 7 (parallel [
            (set (reg:DI 196 [ D.5863 ])
                (rotatert:DI (reg:DI 407 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 -1
     (nil))
(insn 189 188 190 7 (parallel [
            (set (reg:DI 408 [ D.5863 ])
                (xor:DI (reg:DI 319 [ D.5867 ])
                    (reg:DI 322 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 190 189 191 7 (parallel [
            (set (reg:DI 409 [ D.5863 ])
                (plus:DI (reg:DI 408 [ D.5863 ])
                    (reg:DI 143 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 191 190 192 7 (parallel [
            (set (reg:DI 200 [ D.5863 ])
                (plus:DI (reg:DI 409 [ D.5863 ])
                    (reg:DI 164 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 192 191 193 7 (parallel [
            (set (reg:DI 410 [ D.5863 ])
                (xor:DI (reg:DI 193 [ D.5863 ])
                    (reg:DI 200 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 193 192 194 7 (parallel [
            (set (reg:DI 202 [ D.5863 ])
                (rotate:DI (reg:DI 410 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 194 193 195 7 (parallel [
            (set (reg:DI 203 [ D.5863 ])
                (plus:DI (reg:DI 178 [ D.5863 ])
                    (reg:DI 202 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 195 194 196 7 (parallel [
            (set (reg:DI 411 [ D.5863 ])
                (xor:DI (reg:DI 164 [ D.5863 ])
                    (reg:DI 203 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 196 195 197 7 (parallel [
            (set (reg:DI 205 [ D.5863 ])
                (rotatert:DI (reg:DI 411 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 197 196 198 7 (parallel [
            (set (reg:DI 412 [ D.5863 ])
                (xor:DI (reg:DI 323 [ D.5867 ])
                    (reg:DI 324 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 198 197 199 7 (parallel [
            (set (reg:DI 413 [ D.5863 ])
                (plus:DI (reg:DI 412 [ D.5863 ])
                    (reg:DI 200 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 199 198 200 7 (parallel [
            (set (reg:DI 208 [ v$0 ])
                (plus:DI (reg:DI 413 [ D.5863 ])
                    (reg:DI 205 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 200 199 201 7 (parallel [
            (set (reg:DI 414 [ D.5863 ])
                (xor:DI (reg:DI 202 [ D.5863 ])
                    (reg:DI 208 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 201 200 202 7 (parallel [
            (set (reg:DI 210 [ v$15 ])
                (rotatert:DI (reg:DI 414 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 202 201 203 7 (parallel [
            (set (reg:DI 211 [ v$10 ])
                (plus:DI (reg:DI 203 [ D.5863 ])
                    (reg:DI 210 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 203 202 204 7 (parallel [
            (set (reg:DI 415 [ D.5863 ])
                (xor:DI (reg:DI 205 [ D.5863 ])
                    (reg:DI 211 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 204 203 205 7 (parallel [
            (set (reg:DI 214 [ v$5 ])
                (rotatert:DI (reg:DI 415 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 -1
     (nil))
(insn 205 204 206 7 (parallel [
            (set (reg:DI 416 [ D.5863 ])
                (xor:DI (reg:DI 327 [ D.5867 ])
                    (reg:DI 330 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 206 205 207 7 (parallel [
            (set (reg:DI 417 [ D.5863 ])
                (plus:DI (reg:DI 416 [ D.5863 ])
                    (reg:DI 159 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 207 206 208 7 (parallel [
            (set (reg:DI 217 [ D.5863 ])
                (plus:DI (reg:DI 417 [ D.5863 ])
                    (reg:DI 180 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 208 207 209 7 (parallel [
            (set (reg:DI 418 [ D.5863 ])
                (xor:DI (reg:DI 145 [ D.5863 ])
                    (reg:DI 217 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 209 208 210 7 (parallel [
            (set (reg:DI 219 [ D.5863 ])
                (rotate:DI (reg:DI 418 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 210 209 211 7 (parallel [
            (set (reg:DI 220 [ D.5863 ])
                (plus:DI (reg:DI 194 [ D.5863 ])
                    (reg:DI 219 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 211 210 212 7 (parallel [
            (set (reg:DI 419 [ D.5863 ])
                (xor:DI (reg:DI 180 [ D.5863 ])
                    (reg:DI 220 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 212 211 213 7 (parallel [
            (set (reg:DI 222 [ D.5863 ])
                (rotatert:DI (reg:DI 419 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 213 212 214 7 (parallel [
            (set (reg:DI 420 [ D.5863 ])
                (xor:DI (reg:DI 331 [ D.5867 ])
                    (reg:DI 332 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 214 213 215 7 (parallel [
            (set (reg:DI 421 [ D.5863 ])
                (plus:DI (reg:DI 420 [ D.5863 ])
                    (reg:DI 217 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 215 214 216 7 (parallel [
            (set (reg:DI 225 [ v$1 ])
                (plus:DI (reg:DI 421 [ D.5863 ])
                    (reg:DI 222 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 216 215 217 7 (parallel [
            (set (reg:DI 422 [ D.5863 ])
                (xor:DI (reg:DI 219 [ D.5863 ])
                    (reg:DI 225 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 217 216 218 7 (parallel [
            (set (reg:DI 227 [ v$12 ])
                (rotatert:DI (reg:DI 422 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 218 217 219 7 (parallel [
            (set (reg:DI 197 [ v$11 ])
                (plus:DI (reg:DI 220 [ D.5863 ])
                    (reg:DI 227 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 219 218 220 7 (parallel [
            (set (reg:DI 423 [ D.5863 ])
                (xor:DI (reg:DI 222 [ D.5863 ])
                    (reg:DI 197 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 220 219 221 7 (parallel [
            (set (reg:DI 230 [ v$6 ])
                (rotatert:DI (reg:DI 423 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 -1
     (nil))
(insn 221 220 222 7 (parallel [
            (set (reg:DI 424 [ D.5863 ])
                (xor:DI (reg:DI 335 [ D.5867 ])
                    (reg:DI 338 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 222 221 223 7 (parallel [
            (set (reg:DI 425 [ D.5863 ])
                (plus:DI (reg:DI 424 [ D.5863 ])
                    (reg:DI 175 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 223 222 224 7 (parallel [
            (set (reg:DI 233 [ D.5863 ])
                (plus:DI (reg:DI 425 [ D.5863 ])
                    (reg:DI 196 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 224 223 225 7 (parallel [
            (set (reg:DI 426 [ D.5863 ])
                (xor:DI (reg:DI 161 [ D.5863 ])
                    (reg:DI 233 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 225 224 226 7 (parallel [
            (set (reg:DI 235 [ D.5863 ])
                (rotate:DI (reg:DI 426 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 226 225 227 7 (parallel [
            (set (reg:DI 236 [ D.5863 ])
                (plus:DI (reg:DI 146 [ D.5863 ])
                    (reg:DI 235 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 227 226 228 7 (parallel [
            (set (reg:DI 427 [ D.5863 ])
                (xor:DI (reg:DI 196 [ D.5863 ])
                    (reg:DI 236 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 228 227 229 7 (parallel [
            (set (reg:DI 238 [ D.5863 ])
                (rotatert:DI (reg:DI 427 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 229 228 230 7 (parallel [
            (set (reg:DI 428 [ D.5863 ])
                (xor:DI (reg:DI 339 [ D.5867 ])
                    (reg:DI 340 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 230 229 231 7 (parallel [
            (set (reg:DI 429 [ D.5863 ])
                (plus:DI (reg:DI 428 [ D.5863 ])
                    (reg:DI 233 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 231 230 232 7 (parallel [
            (set (reg:DI 241 [ v$2 ])
                (plus:DI (reg:DI 429 [ D.5863 ])
                    (reg:DI 238 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 232 231 233 7 (parallel [
            (set (reg:DI 430 [ D.5863 ])
                (xor:DI (reg:DI 235 [ D.5863 ])
                    (reg:DI 241 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 233 232 234 7 (parallel [
            (set (reg:DI 243 [ v$13 ])
                (rotatert:DI (reg:DI 430 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 234 233 235 7 (parallel [
            (set (reg:DI 244 [ v$8 ])
                (plus:DI (reg:DI 236 [ D.5863 ])
                    (reg:DI 243 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 235 234 236 7 (parallel [
            (set (reg:DI 431 [ D.5863 ])
                (xor:DI (reg:DI 238 [ D.5863 ])
                    (reg:DI 244 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 236 235 237 7 (parallel [
            (set (reg:DI 246 [ v$7 ])
                (rotatert:DI (reg:DI 431 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 -1
     (nil))
(insn 237 236 238 7 (parallel [
            (set (reg:DI 432 [ D.5863 ])
                (xor:DI (reg:DI 343 [ D.5867 ])
                    (reg:DI 346 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 238 237 239 7 (parallel [
            (set (reg:DI 433 [ D.5863 ])
                (plus:DI (reg:DI 432 [ D.5863 ])
                    (reg:DI 191 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 239 238 240 7 (parallel [
            (set (reg:DI 250 [ D.5863 ])
                (plus:DI (reg:DI 433 [ D.5863 ])
                    (reg:DI 148 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 240 239 241 7 (parallel [
            (set (reg:DI 434 [ D.5863 ])
                (xor:DI (reg:DI 177 [ D.5863 ])
                    (reg:DI 250 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 241 240 242 7 (parallel [
            (set (reg:DI 252 [ D.5863 ])
                (rotate:DI (reg:DI 434 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 242 241 243 7 (parallel [
            (set (reg:DI 253 [ D.5863 ])
                (plus:DI (reg:DI 162 [ D.5863 ])
                    (reg:DI 252 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 243 242 244 7 (parallel [
            (set (reg:DI 435 [ D.5863 ])
                (xor:DI (reg:DI 148 [ D.5863 ])
                    (reg:DI 253 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 244 243 245 7 (parallel [
            (set (reg:DI 255 [ D.5863 ])
                (rotatert:DI (reg:DI 435 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 245 244 246 7 (parallel [
            (set (reg:DI 436 [ D.5863 ])
                (xor:DI (reg:DI 347 [ D.5867 ])
                    (reg:DI 348 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 246 245 247 7 (parallel [
            (set (reg:DI 437 [ D.5863 ])
                (plus:DI (reg:DI 436 [ D.5863 ])
                    (reg:DI 250 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 247 246 248 7 (parallel [
            (set (reg:DI 258 [ v$3 ])
                (plus:DI (reg:DI 437 [ D.5863 ])
                    (reg:DI 255 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 248 247 249 7 (parallel [
            (set (reg:DI 438 [ D.5863 ])
                (xor:DI (reg:DI 252 [ D.5863 ])
                    (reg:DI 258 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 249 248 250 7 (parallel [
            (set (reg:DI 260 [ v$14 ])
                (rotatert:DI (reg:DI 438 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 250 249 251 7 (parallel [
            (set (reg:DI 262 [ v$9 ])
                (plus:DI (reg:DI 253 [ D.5863 ])
                    (reg:DI 260 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 251 250 252 7 (parallel [
            (set (reg:DI 439 [ D.5863 ])
                (xor:DI (reg:DI 255 [ D.5863 ])
                    (reg:DI 262 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 252 251 253 7 (parallel [
            (set (reg:DI 264 [ v$4 ])
                (rotatert:DI (reg:DI 439 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 -1
     (nil))
(insn 253 252 254 7 (parallel [
            (set (reg:SI 100 [ D.5861 ])
                (plus:SI (reg:SI 100 [ D.5861 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 254 253 255 7 (parallel [
            (set (reg:DI 269 [ ivtmp.149 ])
                (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 255 254 256 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ D.5861 ])
            (const_int 0 [0]))) blake_ref.c:173 -1
     (nil))
(jump_insn 256 255 257 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 358)
            (pc))) blake_ref.c:173 -1
     (int_list:REG_BR_PROB 588 (nil))
 -> 358)
;;  succ:       8 [94.1%]  (FALLTHRU)
;;              9 [5.9%] 

;; basic block 8, loop depth 1, count 0, freq 8859, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [94.1%]  (FALLTHRU)
(note 257 256 258 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 258 257 259 8 (set (reg/f:DI 268 [ D.5865 ])
        (reg:DI 269 [ ivtmp.149 ])) -1
     (nil))
(insn 259 258 260 8 (set (reg:SI 286 [ D.5864 ])
        (zero_extend:SI (mem:QI (reg/f:DI 268 [ D.5865 ]) [0 MEM[base: _802, offset: 0B]+0 S1 A8]))) -1
     (nil))
(insn 260 259 261 8 (set (reg:DI 440)
        (sign_extend:DI (reg:SI 286 [ D.5864 ]))) -1
     (nil))
(insn 261 260 262 8 (set (reg:DI 287 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 440)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 262 261 263 8 (set (reg:SI 289 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 1 [0x1])) [0 MEM[base: _802, offset: 1B]+0 S1 A8]))) -1
     (nil))
(insn 263 262 264 8 (set (reg/f:DI 441)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 264 263 265 8 (set (reg:DI 442)
        (sign_extend:DI (reg:SI 289 [ D.5864 ]))) -1
     (nil))
(insn 265 264 266 8 (set (reg:DI 290 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 442)
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) -1
     (nil))
(insn 266 265 267 8 (set (reg:DI 443)
        (sign_extend:DI (reg:SI 289 [ D.5864 ]))) -1
     (nil))
(insn 267 266 268 8 (set (reg:DI 291 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 443)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 268 267 269 8 (set (reg/f:DI 444)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 269 268 270 8 (set (reg:DI 445)
        (sign_extend:DI (reg:SI 286 [ D.5864 ]))) -1
     (nil))
(insn 270 269 271 8 (set (reg:DI 292 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 445)
                    (const_int 8 [0x8]))
                (reg/f:DI 444)) [3 c64 S8 A64])) -1
     (nil))
(insn 271 270 272 8 (set (reg:SI 294 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 2 [0x2])) [0 MEM[base: _802, offset: 2B]+0 S1 A8]))) -1
     (nil))
(insn 272 271 273 8 (set (reg:DI 446)
        (sign_extend:DI (reg:SI 294 [ D.5864 ]))) -1
     (nil))
(insn 273 272 274 8 (set (reg:DI 295 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 446)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 274 273 275 8 (set (reg:SI 297 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 3 [0x3])) [0 MEM[base: _802, offset: 3B]+0 S1 A8]))) -1
     (nil))
(insn 275 274 276 8 (set (reg/f:DI 447)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 276 275 277 8 (set (reg:DI 448)
        (sign_extend:DI (reg:SI 297 [ D.5864 ]))) -1
     (nil))
(insn 277 276 278 8 (set (reg:DI 298 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 448)
                    (const_int 8 [0x8]))
                (reg/f:DI 447)) [3 c64 S8 A64])) -1
     (nil))
(insn 278 277 279 8 (set (reg:DI 449)
        (sign_extend:DI (reg:SI 297 [ D.5864 ]))) -1
     (nil))
(insn 279 278 280 8 (set (reg:DI 299 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 449)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 280 279 281 8 (set (reg/f:DI 450)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 281 280 282 8 (set (reg:DI 451)
        (sign_extend:DI (reg:SI 294 [ D.5864 ]))) -1
     (nil))
(insn 282 281 283 8 (set (reg:DI 300 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 451)
                    (const_int 8 [0x8]))
                (reg/f:DI 450)) [3 c64 S8 A64])) -1
     (nil))
(insn 283 282 284 8 (set (reg:SI 302 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 4 [0x4])) [0 MEM[base: _802, offset: 4B]+0 S1 A8]))) -1
     (nil))
(insn 284 283 285 8 (set (reg:DI 452)
        (sign_extend:DI (reg:SI 302 [ D.5864 ]))) -1
     (nil))
(insn 285 284 286 8 (set (reg:DI 303 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 452)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 286 285 287 8 (set (reg:SI 305 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 5 [0x5])) [0 MEM[base: _802, offset: 5B]+0 S1 A8]))) -1
     (nil))
(insn 287 286 288 8 (set (reg/f:DI 453)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 288 287 289 8 (set (reg:DI 454)
        (sign_extend:DI (reg:SI 305 [ D.5864 ]))) -1
     (nil))
(insn 289 288 290 8 (set (reg:DI 306 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 454)
                    (const_int 8 [0x8]))
                (reg/f:DI 453)) [3 c64 S8 A64])) -1
     (nil))
(insn 290 289 291 8 (set (reg:DI 455)
        (sign_extend:DI (reg:SI 305 [ D.5864 ]))) -1
     (nil))
(insn 291 290 292 8 (set (reg:DI 307 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 455)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 292 291 293 8 (set (reg/f:DI 456)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 293 292 294 8 (set (reg:DI 457)
        (sign_extend:DI (reg:SI 302 [ D.5864 ]))) -1
     (nil))
(insn 294 293 295 8 (set (reg:DI 308 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 457)
                    (const_int 8 [0x8]))
                (reg/f:DI 456)) [3 c64 S8 A64])) -1
     (nil))
(insn 295 294 296 8 (set (reg:SI 310 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 6 [0x6])) [0 MEM[base: _802, offset: 6B]+0 S1 A8]))) -1
     (nil))
(insn 296 295 297 8 (set (reg:DI 458)
        (sign_extend:DI (reg:SI 310 [ D.5864 ]))) -1
     (nil))
(insn 297 296 298 8 (set (reg:DI 311 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 458)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 298 297 299 8 (set (reg:SI 313 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 7 [0x7])) [0 MEM[base: _802, offset: 7B]+0 S1 A8]))) -1
     (nil))
(insn 299 298 300 8 (set (reg/f:DI 459)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 300 299 301 8 (set (reg:DI 460)
        (sign_extend:DI (reg:SI 313 [ D.5864 ]))) -1
     (nil))
(insn 301 300 302 8 (set (reg:DI 314 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 460)
                    (const_int 8 [0x8]))
                (reg/f:DI 459)) [3 c64 S8 A64])) -1
     (nil))
(insn 302 301 303 8 (set (reg:DI 461)
        (sign_extend:DI (reg:SI 313 [ D.5864 ]))) -1
     (nil))
(insn 303 302 304 8 (set (reg:DI 315 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 461)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 304 303 305 8 (set (reg/f:DI 462)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 305 304 306 8 (set (reg:DI 463)
        (sign_extend:DI (reg:SI 310 [ D.5864 ]))) -1
     (nil))
(insn 306 305 307 8 (set (reg:DI 316 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 463)
                    (const_int 8 [0x8]))
                (reg/f:DI 462)) [3 c64 S8 A64])) -1
     (nil))
(insn 307 306 308 8 (set (reg:SI 318 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 8 [0x8])) [0 MEM[base: _802, offset: 8B]+0 S1 A8]))) -1
     (nil))
(insn 308 307 309 8 (set (reg:DI 464)
        (sign_extend:DI (reg:SI 318 [ D.5864 ]))) -1
     (nil))
(insn 309 308 310 8 (set (reg:DI 319 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 464)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 310 309 311 8 (set (reg:SI 321 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 9 [0x9])) [0 MEM[base: _802, offset: 9B]+0 S1 A8]))) -1
     (nil))
(insn 311 310 312 8 (set (reg/f:DI 465)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 312 311 313 8 (set (reg:DI 466)
        (sign_extend:DI (reg:SI 321 [ D.5864 ]))) -1
     (nil))
(insn 313 312 314 8 (set (reg:DI 322 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 466)
                    (const_int 8 [0x8]))
                (reg/f:DI 465)) [3 c64 S8 A64])) -1
     (nil))
(insn 314 313 315 8 (set (reg:DI 467)
        (sign_extend:DI (reg:SI 321 [ D.5864 ]))) -1
     (nil))
(insn 315 314 316 8 (set (reg:DI 323 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 467)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 316 315 317 8 (set (reg/f:DI 468)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 317 316 318 8 (set (reg:DI 469)
        (sign_extend:DI (reg:SI 318 [ D.5864 ]))) -1
     (nil))
(insn 318 317 319 8 (set (reg:DI 324 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 469)
                    (const_int 8 [0x8]))
                (reg/f:DI 468)) [3 c64 S8 A64])) -1
     (nil))
(insn 319 318 320 8 (set (reg:SI 326 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 10 [0xa])) [0 MEM[base: _802, offset: 10B]+0 S1 A8]))) -1
     (nil))
(insn 320 319 321 8 (set (reg:DI 470)
        (sign_extend:DI (reg:SI 326 [ D.5864 ]))) -1
     (nil))
(insn 321 320 322 8 (set (reg:DI 327 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 470)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 322 321 323 8 (set (reg:SI 329 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 11 [0xb])) [0 MEM[base: _802, offset: 11B]+0 S1 A8]))) -1
     (nil))
(insn 323 322 324 8 (set (reg/f:DI 471)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 324 323 325 8 (set (reg:DI 472)
        (sign_extend:DI (reg:SI 329 [ D.5864 ]))) -1
     (nil))
(insn 325 324 326 8 (set (reg:DI 330 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 472)
                    (const_int 8 [0x8]))
                (reg/f:DI 471)) [3 c64 S8 A64])) -1
     (nil))
(insn 326 325 327 8 (set (reg:DI 473)
        (sign_extend:DI (reg:SI 329 [ D.5864 ]))) -1
     (nil))
(insn 327 326 328 8 (set (reg:DI 331 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 473)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 328 327 329 8 (set (reg/f:DI 474)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 329 328 330 8 (set (reg:DI 475)
        (sign_extend:DI (reg:SI 326 [ D.5864 ]))) -1
     (nil))
(insn 330 329 331 8 (set (reg:DI 332 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 475)
                    (const_int 8 [0x8]))
                (reg/f:DI 474)) [3 c64 S8 A64])) -1
     (nil))
(insn 331 330 332 8 (set (reg:SI 334 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 12 [0xc])) [0 MEM[base: _802, offset: 12B]+0 S1 A8]))) -1
     (nil))
(insn 332 331 333 8 (set (reg:DI 476)
        (sign_extend:DI (reg:SI 334 [ D.5864 ]))) -1
     (nil))
(insn 333 332 334 8 (set (reg:DI 335 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 476)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 334 333 335 8 (set (reg:SI 337 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 13 [0xd])) [0 MEM[base: _802, offset: 13B]+0 S1 A8]))) -1
     (nil))
(insn 335 334 336 8 (set (reg/f:DI 477)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 336 335 337 8 (set (reg:DI 478)
        (sign_extend:DI (reg:SI 337 [ D.5864 ]))) -1
     (nil))
(insn 337 336 338 8 (set (reg:DI 338 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 478)
                    (const_int 8 [0x8]))
                (reg/f:DI 477)) [3 c64 S8 A64])) -1
     (nil))
(insn 338 337 339 8 (set (reg:DI 479)
        (sign_extend:DI (reg:SI 337 [ D.5864 ]))) -1
     (nil))
(insn 339 338 340 8 (set (reg:DI 339 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 479)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 340 339 341 8 (set (reg/f:DI 480)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 341 340 342 8 (set (reg:DI 481)
        (sign_extend:DI (reg:SI 334 [ D.5864 ]))) -1
     (nil))
(insn 342 341 343 8 (set (reg:DI 340 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 481)
                    (const_int 8 [0x8]))
                (reg/f:DI 480)) [3 c64 S8 A64])) -1
     (nil))
(insn 343 342 344 8 (set (reg:SI 342 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 14 [0xe])) [0 MEM[base: _802, offset: 14B]+0 S1 A8]))) -1
     (nil))
(insn 344 343 345 8 (set (reg:DI 482)
        (sign_extend:DI (reg:SI 342 [ D.5864 ]))) -1
     (nil))
(insn 345 344 346 8 (set (reg:DI 343 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 482)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 346 345 347 8 (set (reg:SI 345 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 15 [0xf])) [0 MEM[base: _802, offset: 15B]+0 S1 A8]))) -1
     (nil))
(insn 347 346 348 8 (set (reg/f:DI 483)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 348 347 349 8 (set (reg:DI 484)
        (sign_extend:DI (reg:SI 345 [ D.5864 ]))) -1
     (nil))
(insn 349 348 350 8 (set (reg:DI 346 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 484)
                    (const_int 8 [0x8]))
                (reg/f:DI 483)) [3 c64 S8 A64])) -1
     (nil))
(insn 350 349 351 8 (set (reg:DI 485)
        (sign_extend:DI (reg:SI 345 [ D.5864 ]))) -1
     (nil))
(insn 351 350 352 8 (set (reg:DI 347 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 485)
                        (const_int 8 [0x8]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) -1
     (nil))
(insn 352 351 353 8 (set (reg/f:DI 486)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) -1
     (nil))
(insn 353 352 354 8 (set (reg:DI 487)
        (sign_extend:DI (reg:SI 342 [ D.5864 ]))) -1
     (nil))
(insn 354 353 356 8 (set (reg:DI 348 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 487)
                    (const_int 8 [0x8]))
                (reg/f:DI 486)) [3 c64 S8 A64])) -1
     (nil))
(jump_insn 356 354 357 8 (set (pc)
        (label_ref 355)) -1
     (nil)
 -> 355)
;;  succ:       7 [100.0%]  (DFS_BACK)

(barrier 357 356 358)
;; basic block 9, loop depth 0, count 0, freq 588, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [5.9%] 
(code_label 358 357 359 9 10 "" [1 uses])
(note 359 358 360 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 360 359 361 9 (parallel [
            (set (reg/f:DI 112 [ vectp.132 ])
                (plus:DI (reg/v/f:DI 350 [ state ])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 361 360 362 9 (set (reg:V2DI 488 [ vect_cst_.130 ])
        (vec_concat:V2DI (reg:DI 244 [ v$8 ])
            (reg:DI 262 [ v$9 ]))) -1
     (nil))
(insn 362 361 363 9 (set (reg:V2DI 489 [ vect_cst_.125 ])
        (vec_concat:V2DI (reg:DI 208 [ v$0 ])
            (reg:DI 225 [ v$1 ]))) -1
     (nil))
(insn 363 362 364 9 (set (reg:V2DI 490 [ D.5862 ])
        (xor:V2DI (reg:V2DI 488 [ vect_cst_.130 ])
            (reg:V2DI 489 [ vect_cst_.125 ]))) blake_ref.c:189 -1
     (nil))
(insn 364 363 365 9 (set (reg:V2DI 491 [ vect_cst_.120 ])
        (vec_concat:V2DI (reg:DI 127 [ D.5863 ])
            (reg:DI 128 [ D.5863 ]))) -1
     (nil))
(insn 365 364 366 9 (set (reg:V2DI 492 [ D.5862 ])
        (xor:V2DI (reg:V2DI 490 [ D.5862 ])
            (reg:V2DI 491 [ vect_cst_.120 ]))) blake_ref.c:189 -1
     (nil))
(insn 366 365 367 9 (set (reg:V2DI 493 [ vect_cst_.116 ])
        (vec_concat:V2DI (reg:DI 119 [ v$0 ])
            (reg:DI 120 [ v$1 ]))) -1
     (nil))
(insn 367 366 368 9 (set (reg:V2DI 494 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 492 [ D.5862 ])
            (reg:V2DI 493 [ vect_cst_.116 ]))) blake_ref.c:189 -1
     (nil))
(insn 368 367 369 9 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 136 [0x88])) [3 MEM[(long long unsigned int *)state_534(D) + 136B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 494 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 -1
     (nil))
(insn 369 368 370 9 (parallel [
            (set (reg/f:DI 114 [ vectp.132 ])
                (plus:DI (reg/v/f:DI 350 [ state ])
                    (const_int 152 [0x98])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:189 -1
     (nil))
(insn 370 369 371 9 (set (reg:V2DI 495 [ vect_cst_.124 ])
        (vec_concat:V2DI (reg:DI 241 [ v$2 ])
            (reg:DI 258 [ v$3 ]))) -1
     (nil))
(insn 371 370 372 9 (set (reg:V2DI 496 [ vect_cst_.129 ])
        (vec_concat:V2DI (reg:DI 211 [ v$10 ])
            (reg:DI 197 [ v$11 ]))) -1
     (nil))
(insn 372 371 373 9 (set (reg:V2DI 497 [ D.5862 ])
        (xor:V2DI (reg:V2DI 495 [ vect_cst_.124 ])
            (reg:V2DI 496 [ vect_cst_.129 ]))) blake_ref.c:189 -1
     (nil))
(insn 373 372 374 9 (set (reg:V2DI 498 [ vect_cst_.119 ])
        (vec_concat:V2DI (reg:DI 129 [ D.5863 ])
            (reg:DI 130 [ D.5863 ]))) -1
     (nil))
(insn 374 373 375 9 (set (reg:V2DI 499 [ D.5862 ])
        (xor:V2DI (reg:V2DI 497 [ D.5862 ])
            (reg:V2DI 498 [ vect_cst_.119 ]))) blake_ref.c:189 -1
     (nil))
(insn 375 374 376 9 (set (reg:V2DI 500 [ vect_cst_.115 ])
        (vec_concat:V2DI (reg:DI 121 [ v$2 ])
            (reg:DI 122 [ v$3 ]))) -1
     (nil))
(insn 376 375 377 9 (set (reg:V2DI 501 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 499 [ D.5862 ])
            (reg:V2DI 500 [ vect_cst_.115 ]))) blake_ref.c:189 -1
     (nil))
(insn 377 376 378 9 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 152 [0x98])) [3 MEM[(long long unsigned int *)state_534(D) + 152B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 501 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 -1
     (nil))
(insn 378 377 379 9 (parallel [
            (set (reg/f:DI 282 [ vectp.132 ])
                (plus:DI (reg/v/f:DI 350 [ state ])
                    (const_int 168 [0xa8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:189 -1
     (nil))
(insn 379 378 380 9 (set (reg:V2DI 502 [ vect_cst_.123 ])
        (vec_concat:V2DI (reg:DI 227 [ v$12 ])
            (reg:DI 243 [ v$13 ]))) -1
     (nil))
(insn 380 379 381 9 (set (reg:V2DI 503 [ vect_cst_.128 ])
        (vec_concat:V2DI (reg:DI 264 [ v$4 ])
            (reg:DI 214 [ v$5 ]))) -1
     (nil))
(insn 381 380 382 9 (set (reg:V2DI 504 [ D.5862 ])
        (xor:V2DI (reg:V2DI 502 [ vect_cst_.123 ])
            (reg:V2DI 503 [ vect_cst_.128 ]))) blake_ref.c:189 -1
     (nil))
(insn 382 381 383 9 (set (reg:V2DI 505 [ vect_cst_.118 ])
        (vec_concat:V2DI (reg:DI 127 [ D.5863 ])
            (reg:DI 128 [ D.5863 ]))) -1
     (nil))
(insn 383 382 384 9 (set (reg:V2DI 506 [ D.5862 ])
        (xor:V2DI (reg:V2DI 504 [ D.5862 ])
            (reg:V2DI 505 [ vect_cst_.118 ]))) blake_ref.c:189 -1
     (nil))
(insn 384 383 385 9 (set (reg:V2DI 507 [ vect_cst_.114 ])
        (vec_concat:V2DI (reg:DI 123 [ v$4 ])
            (reg:DI 124 [ v$5 ]))) -1
     (nil))
(insn 385 384 386 9 (set (reg:V2DI 508 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 506 [ D.5862 ])
            (reg:V2DI 507 [ vect_cst_.114 ]))) blake_ref.c:189 -1
     (nil))
(insn 386 385 387 9 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 168 [0xa8])) [3 MEM[(long long unsigned int *)state_534(D) + 168B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 508 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 -1
     (nil))
(insn 387 386 388 9 (parallel [
            (set (reg/f:DI 113 [ vectp.132 ])
                (plus:DI (reg/v/f:DI 350 [ state ])
                    (const_int 184 [0xb8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:189 -1
     (nil))
(insn 388 387 389 9 (set (reg:V2DI 509 [ vect_cst_.127 ])
        (vec_concat:V2DI (reg:DI 230 [ v$6 ])
            (reg:DI 246 [ v$7 ]))) -1
     (nil))
(insn 389 388 390 9 (set (reg:V2DI 510 [ vect_cst_.122 ])
        (vec_concat:V2DI (reg:DI 260 [ v$14 ])
            (reg:DI 210 [ v$15 ]))) -1
     (nil))
(insn 390 389 391 9 (set (reg:V2DI 511 [ D.5862 ])
        (xor:V2DI (reg:V2DI 509 [ vect_cst_.127 ])
            (reg:V2DI 510 [ vect_cst_.122 ]))) blake_ref.c:189 -1
     (nil))
(insn 391 390 392 9 (set (reg:V2DI 512 [ vect_cst_.117 ])
        (vec_concat:V2DI (reg:DI 129 [ D.5863 ])
            (reg:DI 130 [ D.5863 ]))) -1
     (nil))
(insn 392 391 393 9 (set (reg:V2DI 513 [ D.5862 ])
        (xor:V2DI (reg:V2DI 511 [ D.5862 ])
            (reg:V2DI 512 [ vect_cst_.117 ]))) blake_ref.c:189 -1
     (nil))
(insn 393 392 394 9 (set (reg:V2DI 514 [ vect_cst_.113 ])
        (vec_concat:V2DI (reg:DI 125 [ v$6 ])
            (reg:DI 126 [ v$7 ]))) -1
     (nil))
(insn 394 393 395 9 (set (reg:V2DI 515 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 513 [ D.5862 ])
            (reg:V2DI 514 [ vect_cst_.113 ]))) blake_ref.c:189 -1
     (nil))
(insn 395 394 396 9 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 184 [0xb8])) [3 MEM[(long long unsigned int *)state_534(D) + 184B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 515 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 -1
     (nil))
(insn 396 395 400 9 (set (reg:SI 349 [ <retval> ])
        (const_int 0 [0])) blake_ref.c:198 -1
     (nil))
(insn 400 396 401 9 (set (reg/i:SI 0 ax)
        (reg:SI 349 [ <retval> ])) blake_ref.c:199 -1
     (nil))
(insn 401 400 0 9 (use (reg/i:SI 0 ax)) blake_ref.c:199 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function Update32.part.0 (Update32.part.0, funcdef_no=22, decl_uid=5562, cgraph_uid=0, symbol_order=31)

Update32.part.0 (struct hashState * state, const BitSequence * data, DataLength databitlen)
{
  int fill;
  int left;
  int _2;
  long long unsigned int _6;
  long long unsigned int _7;
  BitSequence[64] * _8;
  sizetype _9;
  void * _10;
  unsigned int _12;
  unsigned int _13;
  unsigned int _14;
  unsigned int _15;
  int _17;
  long long unsigned int _18;
  unsigned int _20;
  unsigned int _21;
  unsigned int _22;
  unsigned int _23;
  long long unsigned int _24;
  long long unsigned int _26;
  long long unsigned int _28;
  BitSequence[64] * _29;
  sizetype _31;
  void * _32;
  int _33;
  unsigned int _34;
  unsigned int _35;
  unsigned int _36;
  int _37;
  long long unsigned int _38;
  long long unsigned int _39;
  const BitSequence * _40;
  unsigned char _41;
  sizetype _63;
  sizetype _67;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _2 = state_1(D)->datalen;
  left_3 = _2 >> 3;
  if (left_3 != 0)
    goto <bb 3>;
  else
    goto <bb 7>;
;;    succ:       3
;;                7

;;   basic block 3, loop depth 0
;;    pred:       2
  fill_4 = 64 - left_3;
  _6 = databitlen_5(D) >> 3;
  _7 = (long long unsigned int) fill_4;
  if (_6 >= _7)
    goto <bb 4>;
  else
    goto <bb 7>;
;;    succ:       4
;;                7

;;   basic block 4, loop depth 0
;;    pred:       3
  _8 = &state_1(D)->data32;
  _9 = (sizetype) left_3;
  _10 = _8 + _9;
  memcpy (_10, data_11(D), _7);
  _12 = state_1(D)->t32[0];
  _13 = _12 + 512;
  state_1(D)->t32[0] = _13;
  if (_13 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  _14 = state_1(D)->t32[1];
  _15 = _14 + 1;
  state_1(D)->t32[1] = _15;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  compress32 (state_1(D), _8);
  data_16 = data_11(D) + _7;
  _17 = fill_4 << 3;
  _18 = (long long unsigned int) _17;
  databitlen_19 = databitlen_5(D) - _18;
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       2
;;                3
;;                6
  # data_42 = PHI <data_11(D)(2), data_11(D)(3), data_16(6)>
  # databitlen_43 = PHI <databitlen_5(D)(2), databitlen_5(D)(3), databitlen_19(6)>
  # left_44 = PHI <left_3(2), left_3(3), 0(6)>
  if (databitlen_43 > 511)
    goto <bb 8>;
  else
    goto <bb 13>;
;;    succ:       8
;;                13

;;   basic block 8, loop depth 0
;;    pred:       7
  _26 = databitlen_43 + 18446744073709551104;
  _24 = _26 >> 9;
  _67 = _24 + 1;
  _63 = _67 * 64;
  data_74 = data_42 + _63;
;;    succ:       9

;;   basic block 9, loop depth 1
;;    pred:       8
;;                11
  # data_72 = PHI <data_42(8), data_25(11)>
  _20 = state_1(D)->t32[0];
  _21 = _20 + 512;
  state_1(D)->t32[0] = _21;
  if (_21 == 0)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10
;;                11

;;   basic block 10, loop depth 1
;;    pred:       9
  _22 = state_1(D)->t32[1];
  _23 = _22 + 1;
  state_1(D)->t32[1] = _23;
;;    succ:       11

;;   basic block 11, loop depth 1
;;    pred:       9
;;                10
  compress32 (state_1(D), data_72);
  data_25 = data_72 + 64;
  if (data_25 != data_74)
    goto <bb 9>;
  else
    goto <bb 12>;
;;    succ:       9
;;                12

;;   basic block 12, loop depth 0
;;    pred:       11
  databitlen_66 = databitlen_43 & 511;
;;    succ:       13

;;   basic block 13, loop depth 0
;;    pred:       12
;;                7
  # data_73 = PHI <data_74(12), data_42(7)>
  # databitlen_70 = PHI <databitlen_66(12), databitlen_43(7)>
  if (databitlen_70 != 0)
    goto <bb 14>;
  else
    goto <bb 16>;
;;    succ:       14
;;                16

;;   basic block 14, loop depth 0
;;    pred:       13
  _28 = databitlen_70 >> 3;
  _29 = &state_1(D)->data32;
  _31 = (sizetype) left_44;
  _32 = _29 + _31;
  memcpy (_32, data_73, _28);
  _33 = left_44 << 3;
  _34 = (unsigned int) _33;
  _35 = (unsigned int) databitlen_70;
  _36 = _34 + _35;
  _37 = (int) _36;
  state_1(D)->datalen = _37;
  _38 = databitlen_70 & 7;
  if (_38 != 0)
    goto <bb 15>;
  else
    goto <bb 17>;
;;    succ:       15
;;                17

;;   basic block 15, loop depth 0
;;    pred:       14
  _39 = _28 + _31;
  _40 = data_73 + _28;
  _41 = *_40;
  state_1(D)->data32[_39] = _41;
  goto <bb 17>;
;;    succ:       17

;;   basic block 16, loop depth 0
;;    pred:       13
  state_1(D)->datalen = 0;
;;    succ:       17

;;   basic block 17, loop depth 0
;;    pred:       14
;;                15
;;                16
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (state_1(D) - 1 )
Partition 2 (_2 - 2 )
Partition 3 (left_3 - 3 )
Partition 4 (fill_4 - 4 )
Partition 5 (databitlen_5(D) - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (data_11(D) - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13 - 13 )
Partition 14 (_14 - 14 )
Partition 15 (_15 - 15 )
Partition 16 (data_16 - 16 )
Partition 17 (_17 - 17 )
Partition 18 (_18 - 18 )
Partition 19 (databitlen_19 - 19 )
Partition 20 (_20 - 20 )
Partition 21 (_21 - 21 )
Partition 22 (_22 - 22 )
Partition 23 (_23 - 23 )
Partition 24 (_24 - 24 )
Partition 25 (data_25 - 25 )
Partition 26 (_26 - 26 )
Partition 28 (_28 - 28 )
Partition 29 (_29 - 29 )
Partition 31 (_31 - 31 )
Partition 32 (_32 - 32 )
Partition 33 (_33 - 33 )
Partition 34 (_34 - 34 )
Partition 35 (_35 - 35 )
Partition 36 (_36 - 36 )
Partition 37 (_37 - 37 )
Partition 38 (_38 - 38 )
Partition 39 (_39 - 39 )
Partition 40 (_40 - 40 )
Partition 41 (_41 - 41 )
Partition 42 (data_42 - 42 )
Partition 43 (databitlen_43 - 43 )
Partition 44 (left_44 - 44 )
Partition 63 (_63 - 63 )
Partition 66 (databitlen_66 - 66 )
Partition 67 (_67 - 67 )
Partition 70 (databitlen_70 - 70 )
Partition 72 (data_72 - 72 )
Partition 73 (data_73 - 73 )
Partition 74 (data_74 - 74 )


Partition map 

Partition 0 (state_1(D) - 1 )
Partition 1 (left_3 - 3 )
Partition 2 (databitlen_5(D) - 5 )
Partition 3 (data_11(D) - 11 )
Partition 4 (data_16 - 16 )
Partition 5 (databitlen_19 - 19 )
Partition 6 (data_25 - 25 )
Partition 7 (data_42 - 42 )
Partition 8 (databitlen_43 - 43 )
Partition 9 (left_44 - 44 )
Partition 10 (databitlen_66 - 66 )
Partition 11 (databitlen_70 - 70 )
Partition 12 (data_72 - 72 )
Partition 13 (data_73 - 73 )
Partition 14 (data_74 - 74 )


Conflict graph:
6: 14
7: 14
12: 14
14: 6, 7, 12

After sorting:
Sorted Coalesce list:
(16562) data_25 <-> data_72
(1540) left_3 <-> left_44
(1540) databitlen_5(D) <-> databitlen_43
(1540) data_11(D) <-> data_42
(819) data_42 <-> data_72
(819) databitlen_66 <-> databitlen_70
(819) data_73 <-> data_74
(162) data_42 <-> data_73
(162) databitlen_43 <-> databitlen_70
(130) data_16 <-> data_42
(130) databitlen_19 <-> databitlen_43

Partition map 

Partition 0 (state_1(D) - 1 )
Partition 1 (left_3 - 3 )
Partition 2 (databitlen_5(D) - 5 )
Partition 3 (data_11(D) - 11 )
Partition 4 (data_16 - 16 )
Partition 5 (databitlen_19 - 19 )
Partition 6 (data_25 - 25 )
Partition 7 (data_42 - 42 )
Partition 8 (databitlen_43 - 43 )
Partition 9 (left_44 - 44 )
Partition 10 (databitlen_66 - 66 )
Partition 11 (databitlen_70 - 70 )
Partition 12 (data_72 - 72 )
Partition 13 (data_73 - 73 )
Partition 14 (data_74 - 74 )

Coalesce list: (25)data_25 & (72)data_72 [map: 6, 12] : Success -> 6
Coalesce list: (3)left_3 & (44)left_44 [map: 1, 9] : Success -> 1
Coalesce list: (5)databitlen_5(D) & (43)databitlen_43 [map: 2, 8] : Success -> 2
Coalesce list: (11)data_11(D) & (42)data_42 [map: 3, 7] : Success -> 3
Coalesce list: (42)data_11(D) & (72)data_25 [map: 3, 6] : Success -> 3
Coalesce list: (66)databitlen_66 & (70)databitlen_70 [map: 10, 11] : Success -> 10
Coalesce list: (73)data_73 & (74)data_74 [map: 13, 14] : Success -> 13
Coalesce list: (42)data_11(D) & (73)data_73 [map: 3, 13] : Fail due to conflict
Coalesce list: (43)databitlen_5(D) & (70)databitlen_66 [map: 2, 10] : Success -> 2
Coalesce list: (16)data_16 & (42)data_11(D) [map: 4, 3] : Success -> 3
Coalesce list: (19)databitlen_19 & (43)databitlen_5(D) [map: 5, 2] : Success -> 2
After Coalescing:

Partition map 

Partition 0 (state_1(D) - 1 )
Partition 1 (_2 - 2 )
Partition 2 (left_3 - 3 44 )
Partition 3 (fill_4 - 4 )
Partition 4 (databitlen_5(D) - 5 19 43 66 70 )
Partition 5 (_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (data_11(D) - 11 16 25 42 72 )
Partition 11 (_12 - 12 )
Partition 12 (_13 - 13 )
Partition 13 (_14 - 14 )
Partition 14 (_15 - 15 )
Partition 15 (_17 - 17 )
Partition 16 (_18 - 18 )
Partition 17 (_20 - 20 )
Partition 18 (_21 - 21 )
Partition 19 (_22 - 22 )
Partition 20 (_23 - 23 )
Partition 21 (_24 - 24 )
Partition 22 (_26 - 26 )
Partition 23 (_28 - 28 )
Partition 24 (_29 - 29 )
Partition 25 (_31 - 31 )
Partition 26 (_32 - 32 )
Partition 27 (_33 - 33 )
Partition 28 (_34 - 34 )
Partition 29 (_35 - 35 )
Partition 30 (_36 - 36 )
Partition 31 (_37 - 37 )
Partition 32 (_38 - 38 )
Partition 33 (_39 - 39 )
Partition 34 (_40 - 40 )
Partition 35 (_41 - 41 )
Partition 36 (_63 - 63 )
Partition 37 (_67 - 67 )
Partition 38 (data_73 - 73 74 )


Replacing Expressions
_2 replace with --> _2 = state_1(D)->datalen;

_6 replace with --> _6 = databitlen_5(D) >> 3;

_9 replace with --> _9 = (sizetype) left_3;

_10 replace with --> _10 = _8 + _9;

_12 replace with --> _12 = state_1(D)->t32[0];

_14 replace with --> _14 = state_1(D)->t32[1];

_15 replace with --> _15 = _14 + 1;

_17 replace with --> _17 = fill_4 << 3;

_18 replace with --> _18 = (long long unsigned int) _17;

_20 replace with --> _20 = state_1(D)->t32[0];

_22 replace with --> _22 = state_1(D)->t32[1];

_23 replace with --> _23 = _22 + 1;

_24 replace with --> _24 = _26 >> 9;

_26 replace with --> _26 = databitlen_43 + 18446744073709551104;

_29 replace with --> _29 = &state_1(D)->data32;

_32 replace with --> _32 = _29 + _31;

_33 replace with --> _33 = left_44 << 3;

_34 replace with --> _34 = (unsigned int) _33;

_35 replace with --> _35 = (unsigned int) databitlen_70;

_36 replace with --> _36 = _34 + _35;

_37 replace with --> _37 = (int) _36;

_38 replace with --> _38 = databitlen_70 & 7;

_39 replace with --> _39 = _28 + _31;

_40 replace with --> _40 = data_73 + _28;

_63 replace with --> _63 = _67 * 64;

_67 replace with --> _67 = _24 + 1;


Update32.part.0 (struct hashState * state, const BitSequence * data, DataLength databitlen)
{
  int fill;
  int left;
  int _2;
  long long unsigned int _6;
  long long unsigned int _7;
  BitSequence[64] * _8;
  sizetype _9;
  void * _10;
  unsigned int _12;
  unsigned int _13;
  unsigned int _14;
  unsigned int _15;
  int _17;
  long long unsigned int _18;
  unsigned int _20;
  unsigned int _21;
  unsigned int _22;
  unsigned int _23;
  long long unsigned int _24;
  long long unsigned int _26;
  long long unsigned int _28;
  BitSequence[64] * _29;
  sizetype _31;
  void * _32;
  int _33;
  unsigned int _34;
  unsigned int _35;
  unsigned int _36;
  int _37;
  long long unsigned int _38;
  long long unsigned int _39;
  const BitSequence * _40;
  unsigned char _41;
  sizetype _63;
  sizetype _67;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _2 = state_1(D)->datalen;
  left_3 = _2 >> 3;
  if (left_3 != 0)
    goto <bb 3>;
  else
    goto <bb 7>;
;;    succ:       3
;;                7

;;   basic block 3, loop depth 0
;;    pred:       2
  fill_4 = 64 - left_3;
  _6 = databitlen_5(D) >> 3;
  _7 = (long long unsigned int) fill_4;
  if (_6 >= _7)
    goto <bb 4>;
  else
    goto <bb 7>;
;;    succ:       4
;;                7

;;   basic block 4, loop depth 0
;;    pred:       3
  _8 = &state_1(D)->data32;
  _9 = (sizetype) left_3;
  _10 = _8 + _9;
  memcpy (_10, data_11(D), _7);
  _12 = state_1(D)->t32[0];
  _13 = _12 + 512;
  state_1(D)->t32[0] = _13;
  if (_13 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  _14 = state_1(D)->t32[1];
  _15 = _14 + 1;
  state_1(D)->t32[1] = _15;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  compress32 (state_1(D), _8);
  data_16 = data_11(D) + _7;
  _17 = fill_4 << 3;
  _18 = (long long unsigned int) _17;
  databitlen_19 = databitlen_5(D) - _18;
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       2
;;                3
;;                6
  # data_42 = PHI <data_11(D)(2), data_11(D)(3), data_16(6)>
  # databitlen_43 = PHI <databitlen_5(D)(2), databitlen_5(D)(3), databitlen_19(6)>
  # left_44 = PHI <left_3(2), left_3(3), 0(6)>
  if (databitlen_43 > 511)
    goto <bb 8>;
  else
    goto <bb 13>;
;;    succ:       8
;;                13

;;   basic block 8, loop depth 0
;;    pred:       7
  _26 = databitlen_43 + 18446744073709551104;
  _24 = _26 >> 9;
  _67 = _24 + 1;
  _63 = _67 * 64;
  data_74 = data_42 + _63;
;;    succ:       9

;;   basic block 9, loop depth 1
;;    pred:       8
;;                11
  # data_72 = PHI <data_42(8), data_25(11)>
  _20 = state_1(D)->t32[0];
  _21 = _20 + 512;
  state_1(D)->t32[0] = _21;
  if (_21 == 0)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10
;;                11

;;   basic block 10, loop depth 1
;;    pred:       9
  _22 = state_1(D)->t32[1];
  _23 = _22 + 1;
  state_1(D)->t32[1] = _23;
;;    succ:       11

;;   basic block 11, loop depth 1
;;    pred:       9
;;                10
  compress32 (state_1(D), data_72);
  data_25 = data_72 + 64;
  if (data_25 != data_74)
    goto <bb 9>;
  else
    goto <bb 12>;
;;    succ:       9
;;                12

;;   basic block 12, loop depth 0
;;    pred:       11
  databitlen_66 = databitlen_43 & 511;
;;    succ:       13

;;   basic block 13, loop depth 0
;;    pred:       12
;;                7
  # data_73 = PHI <data_74(12), data_42(7)>
  # databitlen_70 = PHI <databitlen_66(12), databitlen_43(7)>
  if (databitlen_70 != 0)
    goto <bb 14>;
  else
    goto <bb 16>;
;;    succ:       14
;;                16

;;   basic block 14, loop depth 0
;;    pred:       13
  _28 = databitlen_70 >> 3;
  _29 = &state_1(D)->data32;
  _31 = (sizetype) left_44;
  _32 = _29 + _31;
  memcpy (_32, data_73, _28);
  _33 = left_44 << 3;
  _34 = (unsigned int) _33;
  _35 = (unsigned int) databitlen_70;
  _36 = _34 + _35;
  _37 = (int) _36;
  state_1(D)->datalen = _37;
  _38 = databitlen_70 & 7;
  if (_38 != 0)
    goto <bb 15>;
  else
    goto <bb 17>;
;;    succ:       15
;;                17

;;   basic block 15, loop depth 0
;;    pred:       14
  _39 = _28 + _31;
  _40 = data_73 + _28;
  _41 = *_40;
  state_1(D)->data32[_39] = _41;
  goto <bb 17>;
;;    succ:       17

;;   basic block 16, loop depth 0
;;    pred:       13
  state_1(D)->datalen = 0;
;;    succ:       17

;;   basic block 17, loop depth 0
;;    pred:       14
;;                15
;;                16
  return;
;;    succ:       EXIT

}


Inserting a value copy on edge BB6->BB7 : PART.2 = 0
Inserting a partition copy on edge BB7->BB13 :PART.38 = PART.10

;; Generating RTL for gimple basic block 2

;; left_3 = _2 >> 3;

(insn 10 9 11 (set (reg:SI 127)
        (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])) blake_ref.c:298 -1
     (nil))

(insn 11 10 0 (parallel [
            (set (reg/v:SI 88 [ left ])
                (ashiftrt:SI (reg:SI 127)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:298 -1
     (expr_list:REG_EQUAL (ashiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))

;; if (left_3 != 0)

(insn 12 11 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 88 [ left ])
            (const_int 0 [0]))) blake_ref.c:302 -1
     (nil))

(jump_insn 13 12 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:302 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 3

;; fill_4 = 64 - left_3;

(insn 15 14 16 (set (reg:SI 128)
        (const_int 64 [0x40])) blake_ref.c:299 -1
     (nil))

(insn 16 15 0 (parallel [
            (set (reg/v:SI 89 [ fill ])
                (minus:SI (reg:SI 128)
                    (reg/v:SI 88 [ left ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:299 -1
     (nil))

;; _7 = (long long unsigned int) fill_4;

(insn 17 16 0 (set (reg:DI 91 [ D.5880 ])
        (sign_extend:DI (reg/v:SI 89 [ fill ]))) blake_ref.c:302 -1
     (nil))

;; if (_6 >= _7)

(insn 18 17 19 (parallel [
            (set (reg:DI 129 [ D.5880 ])
                (lshiftrt:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:302 -1
     (nil))

(insn 19 18 20 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 129 [ D.5880 ])
            (reg:DI 91 [ D.5880 ]))) blake_ref.c:302 -1
     (nil))

(jump_insn 20 19 0 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:302 -1
     (int_list:REG_BR_PROB 7100 (nil)))

;; Generating RTL for gimple basic block 4

;; _8 = &state_1(D)->data32;

(insn 22 21 0 (parallel [
            (set (reg/f:DI 92 [ D.5881 ])
                (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:303 -1
     (nil))
Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:711, generic-match.c:1389
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:711, generic-match.c:1389
Applying pattern match.pd:114, generic-match.c:6949

;; memcpy (_10, data_11(D), _7);

(insn 23 22 24 (set (reg:DI 130 [ D.5882 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:303 -1
     (nil))

(insn 24 23 25 (parallel [
            (set (reg:DI 131 [ D.5883 ])
                (plus:DI (reg/f:DI 92 [ D.5881 ])
                    (reg:DI 130 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:303 -1
     (nil))

(insn 25 24 26 (set (reg:DI 132)
        (reg:DI 131 [ D.5883 ])) blake_ref.c:303 -1
     (nil))

(insn 26 25 27 (set (reg:DI 133)
        (reg/v/f:DI 125 [ data ])) blake_ref.c:303 -1
     (nil))

(insn 27 26 28 (set (reg:DI 134)
        (reg:DI 91 [ D.5880 ])) blake_ref.c:303 -1
     (nil))

(insn 28 27 29 (set (reg:DI 37 r8)
        (reg:DI 134)) blake_ref.c:303 -1
     (nil))

(insn 29 28 30 (set (reg:DI 1 dx)
        (reg:DI 133)) blake_ref.c:303 -1
     (nil))

(insn 30 29 31 (set (reg:DI 2 cx)
        (reg:DI 132)) blake_ref.c:303 -1
     (nil))

(call_insn 31 30 32 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>) [0 memcpy S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:303 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 2 cx))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 37 r8))
                    (nil))))))

(insn 32 31 33 (set (reg:DI 135)
        (reg:DI 0 ax)) blake_ref.c:303 -1
     (nil))

(insn 33 32 0 (set (reg:DI 136)
        (reg:DI 135)) blake_ref.c:303 -1
     (nil))

;; _13 = _12 + 512;

(insn 34 33 35 (set (reg:SI 137)
        (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])) blake_ref.c:306 -1
     (nil))

(insn 35 34 0 (parallel [
            (set (reg:SI 96 [ D.5884 ])
                (plus:SI (reg:SI 137)
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:306 -1
     (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
            (const_int 512 [0x200]))
        (nil)))

;; state_1(D)->t32[0] = _13;

(insn 36 35 0 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
        (reg:SI 96 [ D.5884 ])) blake_ref.c:306 -1
     (nil))

;; if (_13 == 0)

(insn 37 36 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 96 [ D.5884 ])
            (const_int 0 [0]))) blake_ref.c:307 -1
     (nil))

(jump_insn 38 37 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:307 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 5

;; state_1(D)->t32[1] = _15;

(insn 40 39 0 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                        (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                            (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:308 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 41 40 42 16 "" [0 uses])

(note 42 41 0 NOTE_INSN_BASIC_BLOCK)

;; compress32 (state_1(D), _8);

(insn 43 42 44 (set (reg:DI 1 dx)
        (reg/f:DI 92 [ D.5881 ])) blake_ref.c:310 -1
     (nil))

(insn 44 43 45 (set (reg:DI 2 cx)
        (reg/v/f:DI 124 [ state ])) blake_ref.c:310 -1
     (nil))

(call_insn 45 44 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>) [0 compress32 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:310 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))

;; data_16 = data_11(D) + _7;

(insn 46 45 0 (parallel [
            (set (reg/v/f:DI 125 [ data ])
                (plus:DI (reg/v/f:DI 125 [ data ])
                    (reg:DI 91 [ D.5880 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:311 -1
     (nil))

;; databitlen_19 = databitlen_5(D) - _18;

(insn 47 46 48 (parallel [
            (set (reg:SI 138 [ D.5879 ])
                (ashift:SI (reg/v:SI 89 [ fill ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:312 -1
     (nil))

(insn 48 47 49 (set (reg:DI 139 [ D.5880 ])
        (sign_extend:DI (reg:SI 138 [ D.5879 ]))) blake_ref.c:312 -1
     (nil))

(insn 49 48 0 (parallel [
            (set (reg/v:DI 126 [ databitlen ])
                (minus:DI (reg/v:DI 126 [ databitlen ])
                    (reg:DI 139 [ D.5880 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:312 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; 

(code_label 50 49 51 15 "" [0 uses])

(note 51 50 0 NOTE_INSN_BASIC_BLOCK)

;; if (databitlen_43 > 511)

(insn 52 51 53 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 126 [ databitlen ])
            (const_int 511 [0x1ff]))) blake_ref.c:318 -1
     (nil))

(jump_insn 53 52 0 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:318 -1
     (int_list:REG_BR_PROB 900 (nil)))

;; Generating RTL for gimple basic block 8

;; data_74 = data_42 + _63;

(insn 55 54 56 (parallel [
            (set (reg:DI 140 [ D.5880 ])
                (plus:DI (reg/v:DI 126 [ databitlen ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 56 55 57 (parallel [
            (set (reg:DI 141 [ D.5880 ])
                (lshiftrt:DI (reg:DI 140 [ D.5880 ])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 57 56 58 (parallel [
            (set (reg:DI 142 [ D.5882 ])
                (plus:DI (reg:DI 141 [ D.5880 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 58 57 59 (parallel [
            (set (reg:DI 143 [ D.5882 ])
                (ashift:DI (reg:DI 142 [ D.5882 ])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 59 58 0 (parallel [
            (set (reg/v/f:DI 122 [ data ])
                (plus:DI (reg/v/f:DI 125 [ data ])
                    (reg:DI 143 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

;; Generating RTL for gimple basic block 9

;; _21 = _20 + 512;

(insn 61 60 62 (set (reg:SI 144)
        (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])) blake_ref.c:321 -1
     (nil))

(insn 62 61 0 (parallel [
            (set (reg:SI 102 [ D.5884 ])
                (plus:SI (reg:SI 144)
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:321 -1
     (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
            (const_int 512 [0x200]))
        (nil)))

;; state_1(D)->t32[0] = _21;

(insn 63 62 0 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
        (reg:SI 102 [ D.5884 ])) blake_ref.c:321 -1
     (nil))

;; if (_21 == 0)

(insn 64 63 65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 102 [ D.5884 ])
            (const_int 0 [0]))) blake_ref.c:323 -1
     (nil))

(jump_insn 65 64 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:323 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 10

;; state_1(D)->t32[1] = _23;

(insn 67 66 0 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                        (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                            (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:324 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; 

(code_label 68 67 69 18 "" [0 uses])

(note 69 68 0 NOTE_INSN_BASIC_BLOCK)

;; compress32 (state_1(D), data_72);

(insn 70 69 71 (set (reg:DI 1 dx)
        (reg/v/f:DI 125 [ data ])) blake_ref.c:325 -1
     (nil))

(insn 71 70 72 (set (reg:DI 2 cx)
        (reg/v/f:DI 124 [ state ])) blake_ref.c:325 -1
     (nil))

(call_insn 72 71 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>) [0 compress32 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:325 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))

;; data_25 = data_72 + 64;

(insn 73 72 0 (parallel [
            (set (reg/v/f:DI 125 [ data ])
                (plus:DI (reg/v/f:DI 125 [ data ])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:326 -1
     (nil))

;; if (data_25 != data_74)

(insn 75 73 76 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 125 [ data ])
            (reg/v/f:DI 122 [ data ]))) blake_ref.c:318 -1
     (nil))

(jump_insn 76 75 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) blake_ref.c:318 -1
     (int_list:REG_BR_PROB 9100 (nil)))

;; Generating RTL for gimple basic block 12

;; databitlen_66 = databitlen_43 & 511;

(insn 78 77 0 (parallel [
            (set (reg/v:DI 126 [ databitlen ])
                (and:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 511 [0x1ff])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

;; Generating RTL for gimple basic block 13

;; 

(code_label 79 78 80 17 "" [0 uses])

(note 80 79 0 NOTE_INSN_BASIC_BLOCK)

;; if (databitlen_70 != 0)

(insn 81 80 82 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 126 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:330 -1
     (nil))

(jump_insn 82 81 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:330 -1
     (int_list:REG_BR_PROB 7100 (nil)))

;; Generating RTL for gimple basic block 14

;; _28 = databitlen_70 >> 3;

(insn 84 83 0 (parallel [
            (set (reg:DI 107 [ D.5880 ])
                (lshiftrt:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:332 -1
     (nil))

;; _31 = (sizetype) left_44;

(insn 85 84 0 (set (reg:DI 109 [ D.5882 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:331 -1
     (nil))
Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:711, generic-match.c:1389
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:711, generic-match.c:1389
Applying pattern match.pd:114, generic-match.c:6949

;; memcpy (_32, data_73, _28);

(insn 86 85 87 (parallel [
            (set (reg:DI 145 [ D.5881 ])
                (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 87 86 88 (parallel [
            (set (reg:DI 146 [ D.5883 ])
                (plus:DI (reg:DI 145 [ D.5881 ])
                    (reg:DI 109 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 88 87 89 (set (reg:SI 147)
        (subreg:SI (reg:DI 107 [ D.5880 ]) 0)) blake_ref.c:331 -1
     (nil))

(insn 89 88 90 (set (reg/f:DI 148)
        (reg:DI 146 [ D.5883 ])) blake_ref.c:331 -1
     (nil))

(insn 90 89 91 (set (reg/f:DI 149)
        (reg/v/f:DI 122 [ data ])) blake_ref.c:331 -1
     (nil))

(insn 91 90 92 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 147)
            (const_int 8 [0x8]))) blake_ref.c:331 -1
     (nil))

(jump_insn 92 91 93 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) blake_ref.c:331 -1
     (nil))

(insn 93 92 94 (parallel [
            (set (reg:SI 150)
                (and:SI (reg:SI 147)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 94 93 95 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 150)
            (const_int 0 [0]))) blake_ref.c:331 -1
     (nil))

(jump_insn 95 94 96 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) blake_ref.c:331 -1
     (int_list:REG_BR_PROB 9000 (nil)))

(insn 96 95 97 (set (reg:SI 151)
        (mem:SI (reg/f:DI 149) [0  S4 A8])) blake_ref.c:331 -1
     (nil))

(insn 97 96 98 (set (mem:SI (reg/f:DI 148) [0  S4 A8])
        (reg:SI 151)) blake_ref.c:331 -1
     (nil))

(insn 98 97 99 (set (reg:DI 152)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 -1
     (nil))

(insn 99 98 100 (parallel [
            (set (reg:DI 153)
                (plus:DI (reg/f:DI 148)
                    (reg:DI 152)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 100 99 101 (parallel [
            (set (reg/f:DI 154)
                (plus:DI (reg:DI 153)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 101 100 102 (set (reg:DI 155)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 -1
     (nil))

(insn 102 101 103 (parallel [
            (set (reg:DI 156)
                (plus:DI (reg/f:DI 149)
                    (reg:DI 155)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 103 102 104 (parallel [
            (set (reg/f:DI 157)
                (plus:DI (reg:DI 156)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 104 103 105 (set (reg:SI 158)
        (mem:SI (plus:DI (reg/f:DI 157)
                (const_int -8 [0xfffffffffffffff8])) [0  S4 A8])) blake_ref.c:331 -1
     (nil))

(insn 105 104 106 (set (mem:SI (plus:DI (reg/f:DI 154)
                (const_int -8 [0xfffffffffffffff8])) [0  S4 A8])
        (reg:SI 158)) blake_ref.c:331 -1
     (nil))

(jump_insn 106 105 107 (set (pc)
        (label_ref 159)) blake_ref.c:331 -1
     (nil))

(barrier 107 106 108)

(code_label 108 107 109 23 "" [1 uses])

(insn 109 108 110 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 147)
            (const_int 0 [0]))) blake_ref.c:331 -1
     (nil))

(jump_insn 110 109 111 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) blake_ref.c:331 -1
     (nil))

(insn 111 110 112 (set (reg:QI 159)
        (mem:QI (reg/f:DI 149) [0  S1 A8])) blake_ref.c:331 -1
     (nil))

(insn 112 111 113 (set (mem:QI (reg/f:DI 148) [0  S1 A8])
        (reg:QI 159)) blake_ref.c:331 -1
     (nil))

(insn 113 112 114 (parallel [
            (set (reg:SI 160)
                (and:SI (reg:SI 147)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 114 113 115 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 160)
            (const_int 0 [0]))) blake_ref.c:331 -1
     (nil))

(jump_insn 115 114 116 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 124)
            (pc))) blake_ref.c:331 -1
     (int_list:REG_BR_PROB 9000 (nil)))

(insn 116 115 117 (set (reg:DI 162)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 -1
     (nil))

(insn 117 116 118 (set (reg:DI 161)
        (reg:DI 162)) blake_ref.c:331 -1
     (nil))

(insn 118 117 119 (parallel [
            (set (reg/f:DI 163)
                (plus:DI (reg/f:DI 148)
                    (reg:DI 161)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 119 118 120 (set (reg:DI 165)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 -1
     (nil))

(insn 120 119 121 (set (reg:DI 164)
        (reg:DI 165)) blake_ref.c:331 -1
     (nil))

(insn 121 120 122 (parallel [
            (set (reg/f:DI 166)
                (plus:DI (reg/f:DI 149)
                    (reg:DI 164)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 122 121 123 (set (reg:HI 167)
        (mem:HI (plus:DI (reg/f:DI 166)
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])) blake_ref.c:331 -1
     (nil))

(insn 123 122 124 (set (mem:HI (plus:DI (reg/f:DI 163)
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (reg:HI 167)) blake_ref.c:331 -1
     (nil))

(code_label 124 123 125 24 "" [1 uses])

(jump_insn 125 124 126 (set (pc)
        (label_ref 159)) blake_ref.c:331 -1
     (nil))

(barrier 126 125 127)

(code_label 127 126 128 21 "" [1 uses])

(insn 128 127 129 (set (reg:DI 168)
        (mem:DI (reg/f:DI 149) [0  S8 A8])) blake_ref.c:331 -1
     (nil))

(insn 129 128 130 (set (mem:DI (reg/f:DI 148) [0  S8 A8])
        (reg:DI 168)) blake_ref.c:331 -1
     (nil))

(insn 130 129 131 (set (reg:DI 169)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 -1
     (nil))

(insn 131 130 132 (parallel [
            (set (reg:DI 170)
                (plus:DI (reg/f:DI 148)
                    (reg:DI 169)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 132 131 133 (parallel [
            (set (reg/f:DI 171)
                (plus:DI (reg:DI 170)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 133 132 134 (set (reg:DI 172)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 -1
     (nil))

(insn 134 133 135 (parallel [
            (set (reg:DI 173)
                (plus:DI (reg/f:DI 149)
                    (reg:DI 172)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 135 134 136 (parallel [
            (set (reg/f:DI 174)
                (plus:DI (reg:DI 173)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 136 135 137 (set (reg:DI 175)
        (mem:DI (plus:DI (reg/f:DI 174)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])) blake_ref.c:331 -1
     (nil))

(insn 137 136 138 (set (mem:DI (plus:DI (reg/f:DI 171)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
        (reg:DI 175)) blake_ref.c:331 -1
     (nil))

(insn 138 137 139 (parallel [
            (set (reg/f:DI 176)
                (plus:DI (reg/f:DI 148)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 139 138 140 (parallel [
            (set (reg/f:DI 176)
                (and:DI (reg/f:DI 176)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 140 139 141 (parallel [
            (set (reg/f:DI 148)
                (minus:DI (reg/f:DI 148)
                    (reg/f:DI 176)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 141 140 142 (parallel [
            (set (reg/f:DI 149)
                (minus:DI (reg/f:DI 149)
                    (reg/f:DI 148)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 142 141 143 (parallel [
            (set (reg:SI 147)
                (plus:SI (reg:SI 147)
                    (subreg:SI (reg/f:DI 148) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 143 142 144 (parallel [
            (set (reg:SI 147)
                (and:SI (reg:SI 147)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 144 143 145 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 147)
            (const_int 8 [0x8]))) blake_ref.c:331 -1
     (nil))

(jump_insn 145 144 146 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) blake_ref.c:331 -1
     (int_list:REG_BR_PROB 2000 (nil)))

(insn 146 145 147 (parallel [
            (set (reg:SI 178)
                (and:SI (reg:SI 147)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 147 146 148 (set (reg:SI 177)
        (const_int 0 [0])) blake_ref.c:331 -1
     (nil))

(code_label 148 147 149 25 "" [0 uses])

(insn 149 148 150 (set (reg:DI 179)
        (zero_extend:DI (reg:SI 177))) blake_ref.c:331 -1
     (nil))

(insn 150 149 151 (set (reg:DI 180)
        (mem:DI (plus:DI (reg/f:DI 149)
                (reg:DI 179)) [0  S8 A8])) blake_ref.c:331 -1
     (nil))

(insn 151 150 152 (set (mem:DI (plus:DI (reg/f:DI 176)
                (reg:DI 179)) [0  S8 A64])
        (reg:DI 180)) blake_ref.c:331 -1
     (nil))

(insn 152 151 153 (parallel [
            (set (reg:SI 177)
                (plus:SI (reg:SI 177)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 153 152 154 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 177)
            (reg:SI 178))) blake_ref.c:331 -1
     (nil))

(jump_insn 154 153 155 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) blake_ref.c:331 -1
     (int_list:REG_BR_PROB 8000 (nil)))

(insn 155 154 156 (set (reg:DI 181)
        (zero_extend:DI (reg:SI 177))) blake_ref.c:331 -1
     (nil))

(insn 156 155 157 (parallel [
            (set (reg/f:DI 176)
                (plus:DI (reg/f:DI 176)
                    (reg:DI 181)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(insn 157 156 158 (parallel [
            (set (reg/f:DI 149)
                (plus:DI (reg/f:DI 149)
                    (reg:DI 181)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))

(code_label 158 157 159 26 "" [0 uses])

(code_label 159 158 0 22 "" [0 uses])

;; state_1(D)->datalen = _37;

(insn 160 159 161 (parallel [
            (set (reg:SI 182 [ D.5879 ])
                (ashift:SI (reg/v:SI 88 [ left ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:333 -1
     (nil))

(insn 161 160 162 (parallel [
            (set (reg:SI 183)
                (plus:SI (reg:SI 182 [ D.5879 ])
                    (subreg:SI (reg/v:DI 126 [ databitlen ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:333 -1
     (nil))

(insn 162 161 0 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (reg:SI 183)) blake_ref.c:333 -1
     (nil))

;; if (_38 != 0)

(insn 163 162 164 (parallel [
            (set (reg:DI 184 [ D.5880 ])
                (and:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:335 -1
     (nil))

(insn 164 163 165 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 184 [ D.5880 ])
            (const_int 0 [0]))) blake_ref.c:335 -1
     (nil))

(jump_insn 165 164 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:335 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 15

;; _41 = *_40;

(insn 167 166 0 (set (reg:QI 119 [ D.5887 ])
        (mem:QI (plus:DI (reg/v/f:DI 122 [ data ])
                (reg:DI 107 [ D.5880 ])) [0 *_40+0 S1 A8])) blake_ref.c:336 -1
     (nil))
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223

;; state_1(D)->data32[_39] = _41;

(insn 168 167 169 (parallel [
            (set (reg:DI 185)
                (plus:DI (reg/v/f:DI 124 [ state ])
                    (reg:DI 107 [ D.5880 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:336 -1
     (nil))

(insn 169 168 170 (parallel [
            (set (reg:DI 186)
                (plus:DI (reg:DI 185)
                    (reg:DI 109 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:336 -1
     (nil))

(insn 170 169 171 (parallel [
            (set (reg/f:DI 187)
                (plus:DI (reg:DI 186)
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:336 -1
     (nil))

(insn 171 170 0 (set (mem/j:QI (reg/f:DI 187) [0 state_1(D)->data32 S1 A8])
        (reg:QI 119 [ D.5887 ])) blake_ref.c:336 -1
     (nil))

;; Generating RTL for gimple basic block 16

;; 

(code_label 174 173 175 20 "" [0 uses])

(note 175 174 0 NOTE_INSN_BASIC_BLOCK)

;; state_1(D)->datalen = 0;

(insn 176 175 0 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:339 -1
     (nil))

;; Generating RTL for gimple basic block 17

;; 

(code_label 177 176 178 27 "" [0 uses])

(note 178 177 0 NOTE_INSN_BASIC_BLOCK)
Edge 7->13 redirected to 20
Predictions for insn 92 bb 14
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
Predictions for insn 110 bb 23
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 20->22 redirected to 28
Merging block 22 into block 21...
Merged blocks 21 and 22.
Merged 21 and 22 without moving.
Merging block 27 into block 26...
Merged blocks 26 and 27.
Merged 26 and 27 without moving.
Merging block 32 into block 31...
Merged blocks 31 and 32.
Merged 31 and 32 without moving.


try_optimize_cfg iteration 2

flow_loops_find: discovered new loop 2 with header 25


;;
;; Full RTL generated for this function:
;;
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 124 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:289 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 81 virtual-incoming-args) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 125 [ data ])
        (reg:DI 1 dx [ data ])) blake_ref.c:289 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 8 [0x8])) [4 data+0 S8 A64])
        (nil)))
(insn 4 3 5 2 (set (reg/v:DI 126 [ databitlen ])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:289 -1
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
        (nil)))
(note 5 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 5 11 2 (set (reg:SI 127)
        (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])) blake_ref.c:298 -1
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/v:SI 88 [ left ])
                (ashiftrt:SI (reg:SI 127)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:298 -1
     (expr_list:REG_EQUAL (ashiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 88 [ left ])
            (const_int 0 [0]))) blake_ref.c:302 -1
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) blake_ref.c:302 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 50)
;;  succ:       4 [50.0%]  (FALLTHRU)
;;              8 [50.0%] 

;; basic block 4, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:SI 128)
        (const_int 64 [0x40])) blake_ref.c:299 -1
     (nil))
(insn 16 15 17 4 (parallel [
            (set (reg/v:SI 89 [ fill ])
                (minus:SI (reg:SI 128)
                    (reg/v:SI 88 [ left ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:299 -1
     (nil))
(insn 17 16 18 4 (set (reg:DI 91 [ D.5880 ])
        (sign_extend:DI (reg/v:SI 89 [ fill ]))) blake_ref.c:302 -1
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg:DI 129 [ D.5880 ])
                (lshiftrt:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:302 -1
     (nil))
(insn 19 18 20 4 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 129 [ D.5880 ])
            (reg:DI 91 [ D.5880 ]))) blake_ref.c:302 -1
     (nil))
(jump_insn 20 19 21 4 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) blake_ref.c:302 -1
     (int_list:REG_BR_PROB 7100 (nil))
 -> 50)
;;  succ:       5 [29.0%]  (FALLTHRU)
;;              8 [71.0%] 

;; basic block 5, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [29.0%]  (FALLTHRU)
(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 5 (parallel [
            (set (reg/f:DI 92 [ D.5881 ])
                (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:303 -1
     (nil))
(insn 23 22 24 5 (set (reg:DI 130 [ D.5882 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:303 -1
     (nil))
(insn 24 23 25 5 (parallel [
            (set (reg:DI 131 [ D.5883 ])
                (plus:DI (reg/f:DI 92 [ D.5881 ])
                    (reg:DI 130 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:303 -1
     (nil))
(insn 25 24 26 5 (set (reg:DI 132)
        (reg:DI 131 [ D.5883 ])) blake_ref.c:303 -1
     (nil))
(insn 26 25 27 5 (set (reg:DI 133)
        (reg/v/f:DI 125 [ data ])) blake_ref.c:303 -1
     (nil))
(insn 27 26 28 5 (set (reg:DI 134)
        (reg:DI 91 [ D.5880 ])) blake_ref.c:303 -1
     (nil))
(insn 28 27 29 5 (set (reg:DI 37 r8)
        (reg:DI 134)) blake_ref.c:303 -1
     (nil))
(insn 29 28 30 5 (set (reg:DI 1 dx)
        (reg:DI 133)) blake_ref.c:303 -1
     (nil))
(insn 30 29 31 5 (set (reg:DI 2 cx)
        (reg:DI 132)) blake_ref.c:303 -1
     (nil))
(call_insn 31 30 32 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>) [0 memcpy S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:303 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 2 cx))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 37 r8))
                    (nil))))))
(insn 32 31 33 5 (set (reg:DI 135)
        (reg:DI 0 ax)) blake_ref.c:303 -1
     (nil))
(insn 33 32 34 5 (set (reg:DI 136)
        (reg:DI 135)) blake_ref.c:303 -1
     (nil))
(insn 34 33 35 5 (set (reg:SI 137)
        (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])) blake_ref.c:306 -1
     (nil))
(insn 35 34 36 5 (parallel [
            (set (reg:SI 96 [ D.5884 ])
                (plus:SI (reg:SI 137)
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:306 -1
     (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 36 35 37 5 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
        (reg:SI 96 [ D.5884 ])) blake_ref.c:306 -1
     (nil))
(insn 37 36 38 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 96 [ D.5884 ])
            (const_int 0 [0]))) blake_ref.c:307 -1
     (nil))
(jump_insn 38 37 39 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) blake_ref.c:307 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 41)
;;  succ:       6 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 

;; basic block 6, loop depth 0, count 0, freq 65, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 [50.0%]  (FALLTHRU)
(note 39 38 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 6 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                        (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                            (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:308 -1
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 [50.0%] 
;;              6 [100.0%]  (FALLTHRU)
(code_label 41 40 42 7 16 "" [1 uses])
(note 42 41 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 7 (set (reg:DI 1 dx)
        (reg/f:DI 92 [ D.5881 ])) blake_ref.c:310 -1
     (nil))
(insn 44 43 45 7 (set (reg:DI 2 cx)
        (reg/v/f:DI 124 [ state ])) blake_ref.c:310 -1
     (nil))
(call_insn 45 44 46 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>) [0 compress32 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:310 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 46 45 47 7 (parallel [
            (set (reg/v/f:DI 125 [ data ])
                (plus:DI (reg/v/f:DI 125 [ data ])
                    (reg:DI 91 [ D.5880 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:311 -1
     (nil))
(insn 47 46 48 7 (parallel [
            (set (reg:SI 138 [ D.5879 ])
                (ashift:SI (reg/v:SI 89 [ fill ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:312 -1
     (nil))
(insn 48 47 49 7 (set (reg:DI 139 [ D.5880 ])
        (sign_extend:DI (reg:SI 138 [ D.5879 ]))) blake_ref.c:312 -1
     (nil))
(insn 49 48 6 7 (parallel [
            (set (reg/v:DI 126 [ databitlen ])
                (minus:DI (reg/v:DI 126 [ databitlen ])
                    (reg:DI 139 [ D.5880 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:312 -1
     (nil))
(insn 6 49 50 7 (set (reg/v:SI 88 [ left ])
        (const_int 0 [0])) blake_ref.c:314 -1
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;;              4 [71.0%] 
;;              7 [100.0%]  (FALLTHRU)
(code_label 50 6 51 8 15 "" [2 uses])
(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 8 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 126 [ databitlen ])
            (const_int 511 [0x1ff]))) blake_ref.c:318 -1
     (nil))
(jump_insn 53 52 54 8 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 188)
            (pc))) blake_ref.c:318 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 188)
;;  succ:       9 [91.0%]  (FALLTHRU)
;;              14 [9.0%] 

;; basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [91.0%]  (FALLTHRU)
(note 54 53 55 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 9 (parallel [
            (set (reg:DI 140 [ D.5880 ])
                (plus:DI (reg/v:DI 126 [ databitlen ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 56 55 57 9 (parallel [
            (set (reg:DI 141 [ D.5880 ])
                (lshiftrt:DI (reg:DI 140 [ D.5880 ])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 57 56 58 9 (parallel [
            (set (reg:DI 142 [ D.5882 ])
                (plus:DI (reg:DI 141 [ D.5880 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 58 57 59 9 (parallel [
            (set (reg:DI 143 [ D.5882 ])
                (ashift:DI (reg:DI 142 [ D.5882 ])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 59 58 74 9 (parallel [
            (set (reg/v/f:DI 122 [ data ])
                (plus:DI (reg/v/f:DI 125 [ data ])
                    (reg:DI 143 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
;;  succ:       10 [100.0%]  (FALLTHRU)

;; basic block 10, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              12 [91.0%]  (DFS_BACK)
(code_label 74 59 60 10 19 "" [1 uses])
(note 60 74 61 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 10 (set (reg:SI 144)
        (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])) blake_ref.c:321 -1
     (nil))
(insn 62 61 63 10 (parallel [
            (set (reg:SI 102 [ D.5884 ])
                (plus:SI (reg:SI 144)
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:321 -1
     (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 63 62 64 10 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
        (reg:SI 102 [ D.5884 ])) blake_ref.c:321 -1
     (nil))
(insn 64 63 65 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 102 [ D.5884 ])
            (const_int 0 [0]))) blake_ref.c:323 -1
     (nil))
(jump_insn 65 64 66 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) blake_ref.c:323 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 68)
;;  succ:       11 [50.0%]  (FALLTHRU)
;;              12 [50.0%] 

;; basic block 11, loop depth 1, count 0, freq 4550, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       10 [50.0%]  (FALLTHRU)
(note 66 65 67 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 11 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                        (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                            (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:324 -1
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)

;; basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       10 [50.0%] 
;;              11 [100.0%]  (FALLTHRU)
(code_label 68 67 69 12 18 "" [1 uses])
(note 69 68 70 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 12 (set (reg:DI 1 dx)
        (reg/v/f:DI 125 [ data ])) blake_ref.c:325 -1
     (nil))
(insn 71 70 72 12 (set (reg:DI 2 cx)
        (reg/v/f:DI 124 [ state ])) blake_ref.c:325 -1
     (nil))
(call_insn 72 71 73 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>) [0 compress32 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:325 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 73 72 75 12 (parallel [
            (set (reg/v/f:DI 125 [ data ])
                (plus:DI (reg/v/f:DI 125 [ data ])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:326 -1
     (nil))
(insn 75 73 76 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 125 [ data ])
            (reg/v/f:DI 122 [ data ]))) blake_ref.c:318 -1
     (nil))
(jump_insn 76 75 77 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) blake_ref.c:318 -1
     (int_list:REG_BR_PROB 9100 (nil))
 -> 74)
;;  succ:       10 [91.0%]  (DFS_BACK)
;;              13 [9.0%]  (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       12 [9.0%]  (FALLTHRU)
(note 77 76 78 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 185 13 (parallel [
            (set (reg/v:DI 126 [ databitlen ])
                (and:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 511 [0x1ff])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(jump_insn 185 78 186 13 (set (pc)
        (label_ref 79)) -1
     (nil)
 -> 79)
;;  succ:       15 [100.0%] 

(barrier 186 185 188)
;; basic block 14, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 [9.0%] 
(code_label 188 186 187 14 28 "" [1 uses])
(note 187 188 7 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 7 187 79 14 (set (reg/v/f:DI 122 [ data ])
        (reg/v/f:DI 125 [ data ])) blake_ref.c:318 -1
     (nil))
;;  succ:       15 [100.0%]  (FALLTHRU)

;; basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       14 [100.0%]  (FALLTHRU)
;;              13 [100.0%] 
(code_label 79 7 80 15 17 "" [1 uses])
(note 80 79 81 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 126 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:330 -1
     (nil))
(jump_insn 82 81 83 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 174)
            (pc))) blake_ref.c:330 -1
     (int_list:REG_BR_PROB 7100 (nil))
 -> 174)
;;  succ:       16 [29.0%]  (FALLTHRU)
;;              30 [71.0%] 

;; basic block 16, loop depth 0, count 0, freq 261, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 [29.0%]  (FALLTHRU)
(note 83 82 84 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 16 (parallel [
            (set (reg:DI 107 [ D.5880 ])
                (lshiftrt:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:332 -1
     (nil))
(insn 85 84 86 16 (set (reg:DI 109 [ D.5882 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:331 -1
     (nil))
(insn 86 85 87 16 (parallel [
            (set (reg:DI 145 [ D.5881 ])
                (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 87 86 88 16 (parallel [
            (set (reg:DI 146 [ D.5883 ])
                (plus:DI (reg:DI 145 [ D.5881 ])
                    (reg:DI 109 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 88 87 89 16 (set (reg:SI 147)
        (subreg:SI (reg:DI 107 [ D.5880 ]) 0)) blake_ref.c:331 -1
     (nil))
(insn 89 88 90 16 (set (reg/f:DI 148)
        (reg:DI 146 [ D.5883 ])) blake_ref.c:331 -1
     (nil))
(insn 90 89 91 16 (set (reg/f:DI 149)
        (reg/v/f:DI 122 [ data ])) blake_ref.c:331 -1
     (nil))
(insn 91 90 92 16 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 147)
            (const_int 8 [0x8]))) blake_ref.c:331 -1
     (nil))
(jump_insn 92 91 189 16 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) blake_ref.c:331 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 127)
;;  succ:       23 [50.0%] 
;;              17 [50.0%]  (FALLTHRU)

;; basic block 17, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 [50.0%]  (FALLTHRU)
(note 189 92 93 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 93 189 94 17 (parallel [
            (set (reg:SI 150)
                (and:SI (reg:SI 147)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 94 93 95 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 150)
            (const_int 0 [0]))) blake_ref.c:331 -1
     (nil))
(jump_insn 95 94 190 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) blake_ref.c:331 -1
     (int_list:REG_BR_PROB 9000 (nil))
 -> 108)
;;  succ:       19 [90.0%] 
;;              18 [10.0%]  (FALLTHRU)

;; basic block 18, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 [10.0%]  (FALLTHRU)
(note 190 95 96 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 96 190 97 18 (set (reg:SI 151)
        (mem:SI (reg/f:DI 149) [0  S4 A8])) blake_ref.c:331 -1
     (nil))
(insn 97 96 98 18 (set (mem:SI (reg/f:DI 148) [0  S4 A8])
        (reg:SI 151)) blake_ref.c:331 -1
     (nil))
(insn 98 97 99 18 (set (reg:DI 152)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 -1
     (nil))
(insn 99 98 100 18 (parallel [
            (set (reg:DI 153)
                (plus:DI (reg/f:DI 148)
                    (reg:DI 152)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 100 99 101 18 (parallel [
            (set (reg/f:DI 154)
                (plus:DI (reg:DI 153)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 101 100 102 18 (set (reg:DI 155)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 -1
     (nil))
(insn 102 101 103 18 (parallel [
            (set (reg:DI 156)
                (plus:DI (reg/f:DI 149)
                    (reg:DI 155)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 103 102 104 18 (parallel [
            (set (reg/f:DI 157)
                (plus:DI (reg:DI 156)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 104 103 105 18 (set (reg:SI 158)
        (mem:SI (plus:DI (reg/f:DI 157)
                (const_int -8 [0xfffffffffffffff8])) [0  S4 A8])) blake_ref.c:331 -1
     (nil))
(insn 105 104 106 18 (set (mem:SI (plus:DI (reg/f:DI 154)
                (const_int -8 [0xfffffffffffffff8])) [0  S4 A8])
        (reg:SI 158)) blake_ref.c:331 -1
     (nil))
(jump_insn 106 105 107 18 (set (pc)
        (label_ref 159)) blake_ref.c:331 -1
     (nil)
 -> 159)
;;  succ:       28 [100.0%] 

(barrier 107 106 108)
;; basic block 19, loop depth 0, count 0, freq 118, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 [90.0%] 
(code_label 108 107 191 19 23 "" [1 uses])
(note 191 108 109 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 109 191 110 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 147)
            (const_int 0 [0]))) blake_ref.c:331 -1
     (nil))
(jump_insn 110 109 192 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) blake_ref.c:331 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 159)
;;  succ:       28 [50.0%] 
;;              20 [50.0%]  (FALLTHRU)

;; basic block 20, loop depth 0, count 0, freq 59, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 [50.0%]  (FALLTHRU)
(note 192 110 111 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 111 192 112 20 (set (reg:QI 159)
        (mem:QI (reg/f:DI 149) [0  S1 A8])) blake_ref.c:331 -1
     (nil))
(insn 112 111 113 20 (set (mem:QI (reg/f:DI 148) [0  S1 A8])
        (reg:QI 159)) blake_ref.c:331 -1
     (nil))
(insn 113 112 114 20 (parallel [
            (set (reg:SI 160)
                (and:SI (reg:SI 147)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 114 113 115 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 160)
            (const_int 0 [0]))) blake_ref.c:331 -1
     (nil))
(jump_insn 115 114 193 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 159)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 9000 (nil))
 -> 159)
;;  succ:       28 [90.0%] 
;;              21 [10.0%]  (FALLTHRU)

;; basic block 21, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 20, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 [10.0%]  (FALLTHRU)
(note 193 115 116 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 116 193 117 21 (set (reg:DI 162)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 -1
     (nil))
(insn 117 116 118 21 (set (reg:DI 161)
        (reg:DI 162)) blake_ref.c:331 -1
     (nil))
(insn 118 117 119 21 (parallel [
            (set (reg/f:DI 163)
                (plus:DI (reg/f:DI 148)
                    (reg:DI 161)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 119 118 120 21 (set (reg:DI 165)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 -1
     (nil))
(insn 120 119 121 21 (set (reg:DI 164)
        (reg:DI 165)) blake_ref.c:331 -1
     (nil))
(insn 121 120 122 21 (parallel [
            (set (reg/f:DI 166)
                (plus:DI (reg/f:DI 149)
                    (reg:DI 164)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 122 121 123 21 (set (reg:HI 167)
        (mem:HI (plus:DI (reg/f:DI 166)
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])) blake_ref.c:331 -1
     (nil))
(insn 123 122 125 21 (set (mem:HI (plus:DI (reg/f:DI 163)
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (reg:HI 167)) blake_ref.c:331 -1
     (nil))
(jump_insn 125 123 126 21 (set (pc)
        (label_ref 159)) blake_ref.c:331 -1
     (nil)
 -> 159)
;;  succ:       28 [100.0%] 

(barrier 126 125 127)
;; basic block 23, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 21, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 [50.0%] 
(code_label 127 126 195 23 21 "" [1 uses])
(note 195 127 128 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 128 195 129 23 (set (reg:DI 168)
        (mem:DI (reg/f:DI 149) [0  S8 A8])) blake_ref.c:331 -1
     (nil))
(insn 129 128 130 23 (set (mem:DI (reg/f:DI 148) [0  S8 A8])
        (reg:DI 168)) blake_ref.c:331 -1
     (nil))
(insn 130 129 131 23 (set (reg:DI 169)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 -1
     (nil))
(insn 131 130 132 23 (parallel [
            (set (reg:DI 170)
                (plus:DI (reg/f:DI 148)
                    (reg:DI 169)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 132 131 133 23 (parallel [
            (set (reg/f:DI 171)
                (plus:DI (reg:DI 170)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 133 132 134 23 (set (reg:DI 172)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 -1
     (nil))
(insn 134 133 135 23 (parallel [
            (set (reg:DI 173)
                (plus:DI (reg/f:DI 149)
                    (reg:DI 172)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 135 134 136 23 (parallel [
            (set (reg/f:DI 174)
                (plus:DI (reg:DI 173)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 136 135 137 23 (set (reg:DI 175)
        (mem:DI (plus:DI (reg/f:DI 174)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])) blake_ref.c:331 -1
     (nil))
(insn 137 136 138 23 (set (mem:DI (plus:DI (reg/f:DI 171)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
        (reg:DI 175)) blake_ref.c:331 -1
     (nil))
(insn 138 137 139 23 (parallel [
            (set (reg/f:DI 176)
                (plus:DI (reg/f:DI 148)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 139 138 140 23 (parallel [
            (set (reg/f:DI 176)
                (and:DI (reg/f:DI 176)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 140 139 141 23 (parallel [
            (set (reg/f:DI 148)
                (minus:DI (reg/f:DI 148)
                    (reg/f:DI 176)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 141 140 142 23 (parallel [
            (set (reg/f:DI 149)
                (minus:DI (reg/f:DI 149)
                    (reg/f:DI 148)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 142 141 143 23 (parallel [
            (set (reg:SI 147)
                (plus:SI (reg:SI 147)
                    (subreg:SI (reg/f:DI 148) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 143 142 144 23 (parallel [
            (set (reg:SI 147)
                (and:SI (reg:SI 147)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 144 143 145 23 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 147)
            (const_int 8 [0x8]))) blake_ref.c:331 -1
     (nil))
(jump_insn 145 144 196 23 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) blake_ref.c:331 -1
     (int_list:REG_BR_PROB 2000 (nil))
 -> 159)
;;  succ:       28 [20.0%] 
;;              24 [80.0%]  (FALLTHRU)

;; basic block 24, loop depth 0, count 0, freq 105, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 [80.0%]  (FALLTHRU)
(note 196 145 146 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 146 196 147 24 (parallel [
            (set (reg:SI 178)
                (and:SI (reg:SI 147)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 147 146 148 24 (set (reg:SI 177)
        (const_int 0 [0])) blake_ref.c:331 -1
     (nil))
;;  succ:       25 [100.0%]  (FALLTHRU)

;; basic block 25, loop depth 1, count 0, freq 105, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 [100.0%]  (FALLTHRU)
;;              25 [80.0%] 
(code_label 148 147 197 25 25 "" [1 uses])
(note 197 148 149 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 149 197 150 25 (set (reg:DI 179)
        (zero_extend:DI (reg:SI 177))) blake_ref.c:331 -1
     (nil))
(insn 150 149 151 25 (set (reg:DI 180)
        (mem:DI (plus:DI (reg/f:DI 149)
                (reg:DI 179)) [0  S8 A8])) blake_ref.c:331 -1
     (nil))
(insn 151 150 152 25 (set (mem:DI (plus:DI (reg/f:DI 176)
                (reg:DI 179)) [0  S8 A64])
        (reg:DI 180)) blake_ref.c:331 -1
     (nil))
(insn 152 151 153 25 (parallel [
            (set (reg:SI 177)
                (plus:SI (reg:SI 177)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 153 152 154 25 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 177)
            (reg:SI 178))) blake_ref.c:331 -1
     (nil))
(jump_insn 154 153 198 25 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) blake_ref.c:331 -1
     (int_list:REG_BR_PROB 8000 (nil))
 -> 148)
;;  succ:       25 [80.0%] 
;;              26 [20.0%]  (FALLTHRU)

;; basic block 26, loop depth 0, count 0, freq 21, maybe hot
;;  prev block 25, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 [20.0%]  (FALLTHRU)
(note 198 154 155 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 155 198 156 26 (set (reg:DI 181)
        (zero_extend:DI (reg:SI 177))) blake_ref.c:331 -1
     (nil))
(insn 156 155 157 26 (parallel [
            (set (reg/f:DI 176)
                (plus:DI (reg/f:DI 176)
                    (reg:DI 181)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
(insn 157 156 159 26 (parallel [
            (set (reg/f:DI 149)
                (plus:DI (reg/f:DI 149)
                    (reg:DI 181)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 -1
     (nil))
;;  succ:       28 [100.0%]  (FALLTHRU)

;; basic block 28, loop depth 0, count 0, freq 178, maybe hot
;;  prev block 26, next block 29, flags: (NEW, REACHABLE, RTL)
;;  pred:       18 [100.0%] 
;;              19 [50.0%] 
;;              21 [100.0%] 
;;              23 [20.0%] 
;;              26 [100.0%]  (FALLTHRU)
;;              20 [90.0%] 
(code_label 159 157 200 28 22 "" [5 uses])
(note 200 159 160 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 160 200 161 28 (parallel [
            (set (reg:SI 182 [ D.5879 ])
                (ashift:SI (reg/v:SI 88 [ left ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:333 -1
     (nil))
(insn 161 160 162 28 (parallel [
            (set (reg:SI 183)
                (plus:SI (reg:SI 182 [ D.5879 ])
                    (subreg:SI (reg/v:DI 126 [ databitlen ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:333 -1
     (nil))
(insn 162 161 163 28 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (reg:SI 183)) blake_ref.c:333 -1
     (nil))
(insn 163 162 164 28 (parallel [
            (set (reg:DI 184 [ D.5880 ])
                (and:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:335 -1
     (nil))
(insn 164 163 165 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 184 [ D.5880 ])
            (const_int 0 [0]))) blake_ref.c:335 -1
     (nil))
(jump_insn 165 164 166 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 177)
            (pc))) blake_ref.c:335 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 177)
;;  succ:       29 [50.0%]  (FALLTHRU)
;;              31 [50.0%] 

;; basic block 29, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL)
;;  pred:       28 [50.0%]  (FALLTHRU)
(note 166 165 167 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 29 (set (reg:QI 119 [ D.5887 ])
        (mem:QI (plus:DI (reg/v/f:DI 122 [ data ])
                (reg:DI 107 [ D.5880 ])) [0 *_40+0 S1 A8])) blake_ref.c:336 -1
     (nil))
(insn 168 167 169 29 (parallel [
            (set (reg:DI 185)
                (plus:DI (reg/v/f:DI 124 [ state ])
                    (reg:DI 107 [ D.5880 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:336 -1
     (nil))
(insn 169 168 170 29 (parallel [
            (set (reg:DI 186)
                (plus:DI (reg:DI 185)
                    (reg:DI 109 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:336 -1
     (nil))
(insn 170 169 171 29 (parallel [
            (set (reg/f:DI 187)
                (plus:DI (reg:DI 186)
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:336 -1
     (nil))
(insn 171 170 172 29 (set (mem/j:QI (reg/f:DI 187) [0 state_1(D)->data32 S1 A8])
        (reg:QI 119 [ D.5887 ])) blake_ref.c:336 -1
     (nil))
(jump_insn 172 171 173 29 (set (pc)
        (label_ref 177)) blake_ref.c:336 -1
     (nil)
 -> 177)
;;  succ:       31 [100.0%] 

(barrier 173 172 174)
;; basic block 30, loop depth 0, count 0, freq 639, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL)
;;  pred:       15 [71.0%] 
(code_label 174 173 175 30 20 "" [1 uses])
(note 175 174 176 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 30 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:339 -1
     (nil))
;;  succ:       31 [100.0%]  (FALLTHRU)

;; basic block 31, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 30, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 [50.0%] 
;;              29 [100.0%] 
;;              30 [100.0%]  (FALLTHRU)
(code_label 177 176 178 31 27 "" [2 uses])
(note 178 177 181 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 181 178 182 31 (clobber (reg/i:SI 0 ax)) blake_ref.c:343 -1
     (nil))
(insn 182 181 180 31 (clobber (reg:SI 123 [ <retval> ])) blake_ref.c:343 -1
     (nil))
(insn 180 182 183 31 (set (reg/i:SI 0 ax)
        (reg:SI 123 [ <retval> ])) blake_ref.c:343 -1
     (nil))
(insn 183 180 0 31 (use (reg/i:SI 0 ax)) blake_ref.c:343 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function Update64.part.1 (Update64.part.1, funcdef_no=23, decl_uid=5571, cgraph_uid=1, symbol_order=32)

Update64.part.1 (struct hashState * state, const BitSequence * data, DataLength databitlen)
{
  int fill;
  int left;
  int _2;
  long long unsigned int _6;
  long long unsigned int _7;
  BitSequence[128] * _8;
  sizetype _9;
  void * _10;
  long long unsigned int _12;
  long long unsigned int _13;
  int _15;
  long long unsigned int _16;
  long long unsigned int _18;
  long long unsigned int _19;
  sizetype _20;
  long long unsigned int _22;
  long long unsigned int _24;
  long long unsigned int _25;
  BitSequence[128] * _26;
  sizetype _28;
  void * _29;
  int _30;
  unsigned int _31;
  unsigned int _32;
  unsigned int _33;
  int _34;
  long long unsigned int _35;
  long long unsigned int _36;
  const BitSequence * _37;
  unsigned char _38;
  sizetype _60;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _2 = state_1(D)->datalen;
  left_3 = _2 >> 3;
  if (left_3 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;
;;    succ:       3
;;                5

;;   basic block 3, loop depth 0
;;    pred:       2
  fill_4 = 128 - left_3;
  _6 = databitlen_5(D) >> 3;
  _7 = (long long unsigned int) fill_4;
  if (_6 >= _7)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  _8 = &state_1(D)->data64;
  _9 = (sizetype) left_3;
  _10 = _8 + _9;
  memcpy (_10, data_11(D), _7);
  _12 = state_1(D)->t64[0];
  _13 = _12 + 1024;
  state_1(D)->t64[0] = _13;
  compress64 (state_1(D), _8);
  data_14 = data_11(D) + _7;
  _15 = fill_4 << 3;
  _16 = (long long unsigned int) _15;
  databitlen_17 = databitlen_5(D) - _16;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       2
;;                3
;;                4
  # data_39 = PHI <data_11(D)(2), data_11(D)(3), data_14(4)>
  # databitlen_40 = PHI <databitlen_5(D)(2), databitlen_5(D)(3), databitlen_17(4)>
  # left_41 = PHI <left_3(2), left_3(3), 0(4)>
  if (databitlen_40 > 1023)
    goto <bb 6>;
  else
    goto <bb 9>;
;;    succ:       6
;;                9

;;   basic block 6, loop depth 0
;;    pred:       5
  _25 = databitlen_40 + 18446744073709550592;
  _22 = _25 >> 10;
  _20 = _22 + 1;
  _60 = _20 * 128;
  data_56 = data_39 + _60;
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       6
;;                7
  # data_57 = PHI <data_39(6), data_21(7)>
  _18 = state_1(D)->t64[0];
  _19 = _18 + 1024;
  state_1(D)->t64[0] = _19;
  compress64 (state_1(D), data_57);
  data_21 = data_57 + 128;
  if (data_21 != data_56)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
  databitlen_61 = databitlen_40 & 1023;
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       8
;;                5
  # data_65 = PHI <data_56(8), data_39(5)>
  # databitlen_64 = PHI <databitlen_61(8), databitlen_40(5)>
  if (databitlen_64 != 0)
    goto <bb 10>;
  else
    goto <bb 12>;
;;    succ:       10
;;                12

;;   basic block 10, loop depth 0
;;    pred:       9
  _24 = databitlen_64 >> 3;
  _26 = &state_1(D)->data64;
  _28 = (sizetype) left_41;
  _29 = _26 + _28;
  memcpy (_29, data_65, _24);
  _30 = left_41 << 3;
  _31 = (unsigned int) _30;
  _32 = (unsigned int) databitlen_64;
  _33 = _31 + _32;
  _34 = (int) _33;
  state_1(D)->datalen = _34;
  _35 = databitlen_64 & 7;
  if (_35 != 0)
    goto <bb 11>;
  else
    goto <bb 13>;
;;    succ:       11
;;                13

;;   basic block 11, loop depth 0
;;    pred:       10
  _36 = _24 + _28;
  _37 = data_65 + _24;
  _38 = *_37;
  state_1(D)->data64[_36] = _38;
  goto <bb 13>;
;;    succ:       13

;;   basic block 12, loop depth 0
;;    pred:       9
  state_1(D)->datalen = 0;
;;    succ:       13

;;   basic block 13, loop depth 0
;;    pred:       10
;;                11
;;                12
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (state_1(D) - 1 )
Partition 2 (_2 - 2 )
Partition 3 (left_3 - 3 )
Partition 4 (fill_4 - 4 )
Partition 5 (databitlen_5(D) - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (data_11(D) - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13 - 13 )
Partition 14 (data_14 - 14 )
Partition 15 (_15 - 15 )
Partition 16 (_16 - 16 )
Partition 17 (databitlen_17 - 17 )
Partition 18 (_18 - 18 )
Partition 19 (_19 - 19 )
Partition 20 (_20 - 20 )
Partition 21 (data_21 - 21 )
Partition 22 (_22 - 22 )
Partition 24 (_24 - 24 )
Partition 25 (_25 - 25 )
Partition 26 (_26 - 26 )
Partition 28 (_28 - 28 )
Partition 29 (_29 - 29 )
Partition 30 (_30 - 30 )
Partition 31 (_31 - 31 )
Partition 32 (_32 - 32 )
Partition 33 (_33 - 33 )
Partition 34 (_34 - 34 )
Partition 35 (_35 - 35 )
Partition 36 (_36 - 36 )
Partition 37 (_37 - 37 )
Partition 38 (_38 - 38 )
Partition 39 (data_39 - 39 )
Partition 40 (databitlen_40 - 40 )
Partition 41 (left_41 - 41 )
Partition 56 (data_56 - 56 )
Partition 57 (data_57 - 57 )
Partition 60 (_60 - 60 )
Partition 61 (databitlen_61 - 61 )
Partition 64 (databitlen_64 - 64 )
Partition 65 (data_65 - 65 )


Partition map 

Partition 0 (state_1(D) - 1 )
Partition 1 (left_3 - 3 )
Partition 2 (databitlen_5(D) - 5 )
Partition 3 (data_11(D) - 11 )
Partition 4 (data_14 - 14 )
Partition 5 (databitlen_17 - 17 )
Partition 6 (data_21 - 21 )
Partition 7 (data_39 - 39 )
Partition 8 (databitlen_40 - 40 )
Partition 9 (left_41 - 41 )
Partition 10 (data_56 - 56 )
Partition 11 (data_57 - 57 )
Partition 12 (databitlen_61 - 61 )
Partition 13 (databitlen_64 - 64 )
Partition 14 (data_65 - 65 )


Conflict graph:
6: 10
7: 10
10: 6, 7, 11
11: 10

After sorting:
Sorted Coalesce list:
(16562) data_21 <-> data_57
(1540) left_3 <-> left_41
(1540) databitlen_5(D) <-> databitlen_40
(1540) data_11(D) <-> data_39
(819) data_39 <-> data_57
(819) data_56 <-> data_65
(819) databitlen_61 <-> databitlen_64
(162) data_39 <-> data_65
(162) databitlen_40 <-> databitlen_64
(130) data_14 <-> data_39
(130) databitlen_17 <-> databitlen_40

Partition map 

Partition 0 (state_1(D) - 1 )
Partition 1 (left_3 - 3 )
Partition 2 (databitlen_5(D) - 5 )
Partition 3 (data_11(D) - 11 )
Partition 4 (data_14 - 14 )
Partition 5 (databitlen_17 - 17 )
Partition 6 (data_21 - 21 )
Partition 7 (data_39 - 39 )
Partition 8 (databitlen_40 - 40 )
Partition 9 (left_41 - 41 )
Partition 10 (data_56 - 56 )
Partition 11 (data_57 - 57 )
Partition 12 (databitlen_61 - 61 )
Partition 13 (databitlen_64 - 64 )
Partition 14 (data_65 - 65 )

Coalesce list: (21)data_21 & (57)data_57 [map: 6, 11] : Success -> 6
Coalesce list: (3)left_3 & (41)left_41 [map: 1, 9] : Success -> 1
Coalesce list: (5)databitlen_5(D) & (40)databitlen_40 [map: 2, 8] : Success -> 2
Coalesce list: (11)data_11(D) & (39)data_39 [map: 3, 7] : Success -> 3
Coalesce list: (39)data_11(D) & (57)data_21 [map: 3, 6] : Success -> 3
Coalesce list: (56)data_56 & (65)data_65 [map: 10, 14] : Success -> 10
Coalesce list: (61)databitlen_61 & (64)databitlen_64 [map: 12, 13] : Success -> 12
Coalesce list: (39)data_11(D) & (65)data_56 [map: 3, 10] : Fail due to conflict
Coalesce list: (40)databitlen_5(D) & (64)databitlen_61 [map: 2, 12] : Success -> 2
Coalesce list: (14)data_14 & (39)data_11(D) [map: 4, 3] : Success -> 3
Coalesce list: (17)databitlen_17 & (40)databitlen_5(D) [map: 5, 2] : Success -> 2
After Coalescing:

Partition map 

Partition 0 (state_1(D) - 1 )
Partition 1 (_2 - 2 )
Partition 2 (left_3 - 3 41 )
Partition 3 (fill_4 - 4 )
Partition 4 (databitlen_5(D) - 5 17 40 61 64 )
Partition 5 (_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (data_11(D) - 11 14 21 39 57 )
Partition 11 (_12 - 12 )
Partition 12 (_13 - 13 )
Partition 13 (_15 - 15 )
Partition 14 (_16 - 16 )
Partition 15 (_18 - 18 )
Partition 16 (_19 - 19 )
Partition 17 (_20 - 20 )
Partition 18 (_22 - 22 )
Partition 19 (_24 - 24 )
Partition 20 (_25 - 25 )
Partition 21 (_26 - 26 )
Partition 22 (_28 - 28 )
Partition 23 (_29 - 29 )
Partition 24 (_30 - 30 )
Partition 25 (_31 - 31 )
Partition 26 (_32 - 32 )
Partition 27 (_33 - 33 )
Partition 28 (_34 - 34 )
Partition 29 (_35 - 35 )
Partition 30 (_36 - 36 )
Partition 31 (_37 - 37 )
Partition 32 (_38 - 38 )
Partition 33 (data_56 - 56 65 )
Partition 34 (_60 - 60 )


Replacing Expressions
_2 replace with --> _2 = state_1(D)->datalen;

_6 replace with --> _6 = databitlen_5(D) >> 3;

_9 replace with --> _9 = (sizetype) left_3;

_10 replace with --> _10 = _8 + _9;

_12 replace with --> _12 = state_1(D)->t64[0];

_13 replace with --> _13 = _12 + 1024;

_15 replace with --> _15 = fill_4 << 3;

_16 replace with --> _16 = (long long unsigned int) _15;

_18 replace with --> _18 = state_1(D)->t64[0];

_19 replace with --> _19 = _18 + 1024;

_20 replace with --> _20 = _22 + 1;

_22 replace with --> _22 = _25 >> 10;

_25 replace with --> _25 = databitlen_40 + 18446744073709550592;

_26 replace with --> _26 = &state_1(D)->data64;

_29 replace with --> _29 = _26 + _28;

_30 replace with --> _30 = left_41 << 3;

_31 replace with --> _31 = (unsigned int) _30;

_32 replace with --> _32 = (unsigned int) databitlen_64;

_33 replace with --> _33 = _31 + _32;

_34 replace with --> _34 = (int) _33;

_35 replace with --> _35 = databitlen_64 & 7;

_36 replace with --> _36 = _24 + _28;

_37 replace with --> _37 = data_65 + _24;

_60 replace with --> _60 = _20 * 128;


Update64.part.1 (struct hashState * state, const BitSequence * data, DataLength databitlen)
{
  int fill;
  int left;
  int _2;
  long long unsigned int _6;
  long long unsigned int _7;
  BitSequence[128] * _8;
  sizetype _9;
  void * _10;
  long long unsigned int _12;
  long long unsigned int _13;
  int _15;
  long long unsigned int _16;
  long long unsigned int _18;
  long long unsigned int _19;
  sizetype _20;
  long long unsigned int _22;
  long long unsigned int _24;
  long long unsigned int _25;
  BitSequence[128] * _26;
  sizetype _28;
  void * _29;
  int _30;
  unsigned int _31;
  unsigned int _32;
  unsigned int _33;
  int _34;
  long long unsigned int _35;
  long long unsigned int _36;
  const BitSequence * _37;
  unsigned char _38;
  sizetype _60;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _2 = state_1(D)->datalen;
  left_3 = _2 >> 3;
  if (left_3 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;
;;    succ:       3
;;                5

;;   basic block 3, loop depth 0
;;    pred:       2
  fill_4 = 128 - left_3;
  _6 = databitlen_5(D) >> 3;
  _7 = (long long unsigned int) fill_4;
  if (_6 >= _7)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  _8 = &state_1(D)->data64;
  _9 = (sizetype) left_3;
  _10 = _8 + _9;
  memcpy (_10, data_11(D), _7);
  _12 = state_1(D)->t64[0];
  _13 = _12 + 1024;
  state_1(D)->t64[0] = _13;
  compress64 (state_1(D), _8);
  data_14 = data_11(D) + _7;
  _15 = fill_4 << 3;
  _16 = (long long unsigned int) _15;
  databitlen_17 = databitlen_5(D) - _16;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       2
;;                3
;;                4
  # data_39 = PHI <data_11(D)(2), data_11(D)(3), data_14(4)>
  # databitlen_40 = PHI <databitlen_5(D)(2), databitlen_5(D)(3), databitlen_17(4)>
  # left_41 = PHI <left_3(2), left_3(3), 0(4)>
  if (databitlen_40 > 1023)
    goto <bb 6>;
  else
    goto <bb 9>;
;;    succ:       6
;;                9

;;   basic block 6, loop depth 0
;;    pred:       5
  _25 = databitlen_40 + 18446744073709550592;
  _22 = _25 >> 10;
  _20 = _22 + 1;
  _60 = _20 * 128;
  data_56 = data_39 + _60;
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       6
;;                7
  # data_57 = PHI <data_39(6), data_21(7)>
  _18 = state_1(D)->t64[0];
  _19 = _18 + 1024;
  state_1(D)->t64[0] = _19;
  compress64 (state_1(D), data_57);
  data_21 = data_57 + 128;
  if (data_21 != data_56)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
  databitlen_61 = databitlen_40 & 1023;
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       8
;;                5
  # data_65 = PHI <data_56(8), data_39(5)>
  # databitlen_64 = PHI <databitlen_61(8), databitlen_40(5)>
  if (databitlen_64 != 0)
    goto <bb 10>;
  else
    goto <bb 12>;
;;    succ:       10
;;                12

;;   basic block 10, loop depth 0
;;    pred:       9
  _24 = databitlen_64 >> 3;
  _26 = &state_1(D)->data64;
  _28 = (sizetype) left_41;
  _29 = _26 + _28;
  memcpy (_29, data_65, _24);
  _30 = left_41 << 3;
  _31 = (unsigned int) _30;
  _32 = (unsigned int) databitlen_64;
  _33 = _31 + _32;
  _34 = (int) _33;
  state_1(D)->datalen = _34;
  _35 = databitlen_64 & 7;
  if (_35 != 0)
    goto <bb 11>;
  else
    goto <bb 13>;
;;    succ:       11
;;                13

;;   basic block 11, loop depth 0
;;    pred:       10
  _36 = _24 + _28;
  _37 = data_65 + _24;
  _38 = *_37;
  state_1(D)->data64[_36] = _38;
  goto <bb 13>;
;;    succ:       13

;;   basic block 12, loop depth 0
;;    pred:       9
  state_1(D)->datalen = 0;
;;    succ:       13

;;   basic block 13, loop depth 0
;;    pred:       10
;;                11
;;                12
  return;
;;    succ:       EXIT

}


Inserting a value copy on edge BB4->BB5 : PART.2 = 0
Inserting a partition copy on edge BB5->BB9 :PART.33 = PART.10

;; Generating RTL for gimple basic block 2

;; left_3 = _2 >> 3;

(insn 10 9 11 (set (reg:SI 123)
        (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])) blake_ref.c:354 -1
     (nil))

(insn 11 10 0 (parallel [
            (set (reg/v:SI 88 [ left ])
                (ashiftrt:SI (reg:SI 123)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:354 -1
     (expr_list:REG_EQUAL (ashiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                    (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))

;; if (left_3 != 0)

(insn 12 11 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 88 [ left ])
            (const_int 0 [0]))) blake_ref.c:358 -1
     (nil))

(jump_insn 13 12 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:358 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 3

;; fill_4 = 128 - left_3;

(insn 15 14 16 (set (reg:SI 124)
        (const_int 128 [0x80])) blake_ref.c:355 -1
     (nil))

(insn 16 15 0 (parallel [
            (set (reg/v:SI 89 [ fill ])
                (minus:SI (reg:SI 124)
                    (reg/v:SI 88 [ left ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:355 -1
     (nil))

;; _7 = (long long unsigned int) fill_4;

(insn 17 16 0 (set (reg:DI 91 [ D.5911 ])
        (sign_extend:DI (reg/v:SI 89 [ fill ]))) blake_ref.c:358 -1
     (nil))

;; if (_6 >= _7)

(insn 18 17 19 (parallel [
            (set (reg:DI 125 [ D.5911 ])
                (lshiftrt:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:358 -1
     (nil))

(insn 19 18 20 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 125 [ D.5911 ])
            (reg:DI 91 [ D.5911 ]))) blake_ref.c:358 -1
     (nil))

(jump_insn 20 19 0 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:358 -1
     (int_list:REG_BR_PROB 7100 (nil)))

;; Generating RTL for gimple basic block 4

;; _8 = &state_1(D)->data64;

(insn 22 21 0 (parallel [
            (set (reg/f:DI 92 [ D.5912 ])
                (plus:DI (reg/v/f:DI 120 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 -1
     (nil))
Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:711, generic-match.c:1389
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:711, generic-match.c:1389
Applying pattern match.pd:114, generic-match.c:6949

;; memcpy (_10, data_11(D), _7);

(insn 23 22 24 (set (reg:DI 126 [ D.5913 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:359 -1
     (nil))

(insn 24 23 25 (parallel [
            (set (reg:DI 127 [ D.5914 ])
                (plus:DI (reg/f:DI 92 [ D.5912 ])
                    (reg:DI 126 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 -1
     (nil))

(insn 25 24 26 (set (reg:DI 128)
        (reg:DI 127 [ D.5914 ])) blake_ref.c:359 -1
     (nil))

(insn 26 25 27 (set (reg:DI 129)
        (reg/v/f:DI 121 [ data ])) blake_ref.c:359 -1
     (nil))

(insn 27 26 28 (set (reg:DI 130)
        (reg:DI 91 [ D.5911 ])) blake_ref.c:359 -1
     (nil))

(insn 28 27 29 (set (reg:DI 37 r8)
        (reg:DI 130)) blake_ref.c:359 -1
     (nil))

(insn 29 28 30 (set (reg:DI 1 dx)
        (reg:DI 129)) blake_ref.c:359 -1
     (nil))

(insn 30 29 31 (set (reg:DI 2 cx)
        (reg:DI 128)) blake_ref.c:359 -1
     (nil))

(call_insn 31 30 32 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>) [0 memcpy S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:359 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 2 cx))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 37 r8))
                    (nil))))))

(insn 32 31 33 (set (reg:DI 131)
        (reg:DI 0 ax)) blake_ref.c:359 -1
     (nil))

(insn 33 32 0 (set (reg:DI 132)
        (reg:DI 131)) blake_ref.c:359 -1
     (nil))

;; state_1(D)->t64[0] = _13;

(insn 34 33 0 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                        (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                            (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 -1
     (nil))

;; compress64 (state_1(D), _8);

(insn 35 34 36 (set (reg:DI 1 dx)
        (reg/f:DI 92 [ D.5912 ])) blake_ref.c:364 -1
     (nil))

(insn 36 35 37 (set (reg:DI 2 cx)
        (reg/v/f:DI 120 [ state ])) blake_ref.c:364 -1
     (nil))

(call_insn 37 36 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:364 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))

;; data_14 = data_11(D) + _7;

(insn 38 37 0 (parallel [
            (set (reg/v/f:DI 121 [ data ])
                (plus:DI (reg/v/f:DI 121 [ data ])
                    (reg:DI 91 [ D.5911 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:365 -1
     (nil))

;; databitlen_17 = databitlen_5(D) - _16;

(insn 39 38 40 (parallel [
            (set (reg:SI 133 [ D.5910 ])
                (ashift:SI (reg/v:SI 89 [ fill ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:366 -1
     (nil))

(insn 40 39 41 (set (reg:DI 134 [ D.5911 ])
        (sign_extend:DI (reg:SI 133 [ D.5910 ]))) blake_ref.c:366 -1
     (nil))

(insn 41 40 0 (parallel [
            (set (reg/v:DI 122 [ databitlen ])
                (minus:DI (reg/v:DI 122 [ databitlen ])
                    (reg:DI 134 [ D.5911 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:366 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 42 41 43 45 "" [0 uses])

(note 43 42 0 NOTE_INSN_BASIC_BLOCK)

;; if (databitlen_40 > 1023)

(insn 44 43 45 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 122 [ databitlen ])
            (const_int 1023 [0x3ff]))) blake_ref.c:372 -1
     (nil))

(jump_insn 45 44 0 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:372 -1
     (int_list:REG_BR_PROB 900 (nil)))

;; Generating RTL for gimple basic block 6

;; data_56 = data_39 + _60;

(insn 47 46 48 (parallel [
            (set (reg:DI 135 [ D.5911 ])
                (plus:DI (reg/v:DI 122 [ databitlen ])
                    (const_int -1024 [0xfffffffffffffc00])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 48 47 49 (parallel [
            (set (reg:DI 136 [ D.5911 ])
                (lshiftrt:DI (reg:DI 135 [ D.5911 ])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 49 48 50 (parallel [
            (set (reg:DI 137 [ D.5913 ])
                (plus:DI (reg:DI 136 [ D.5911 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 50 49 51 (parallel [
            (set (reg:DI 138 [ D.5913 ])
                (ashift:DI (reg:DI 137 [ D.5913 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 51 50 0 (parallel [
            (set (reg/v/f:DI 117 [ data ])
                (plus:DI (reg/v/f:DI 121 [ data ])
                    (reg:DI 138 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

;; Generating RTL for gimple basic block 7

;; state_1(D)->t64[0] = _19;

(insn 53 52 0 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                        (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                            (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:375 -1
     (nil))

;; compress64 (state_1(D), data_57);

(insn 54 53 55 (set (reg:DI 1 dx)
        (reg/v/f:DI 121 [ data ])) blake_ref.c:376 -1
     (nil))

(insn 55 54 56 (set (reg:DI 2 cx)
        (reg/v/f:DI 120 [ state ])) blake_ref.c:376 -1
     (nil))

(call_insn 56 55 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:376 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))

;; data_21 = data_57 + 128;

(insn 57 56 0 (parallel [
            (set (reg/v/f:DI 121 [ data ])
                (plus:DI (reg/v/f:DI 121 [ data ])
                    (const_int 128 [0x80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:377 -1
     (nil))

;; if (data_21 != data_56)

(insn 59 57 60 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 121 [ data ])
            (reg/v/f:DI 117 [ data ]))) blake_ref.c:372 -1
     (nil))

(jump_insn 60 59 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) blake_ref.c:372 -1
     (int_list:REG_BR_PROB 9100 (nil)))

;; Generating RTL for gimple basic block 8

;; databitlen_61 = databitlen_40 & 1023;

(insn 62 61 0 (parallel [
            (set (reg/v:DI 122 [ databitlen ])
                (and:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 1023 [0x3ff])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

;; Generating RTL for gimple basic block 9

;; 

(code_label 63 62 64 46 "" [0 uses])

(note 64 63 0 NOTE_INSN_BASIC_BLOCK)

;; if (databitlen_64 != 0)

(insn 65 64 66 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 122 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:381 -1
     (nil))

(jump_insn 66 65 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:381 -1
     (int_list:REG_BR_PROB 7100 (nil)))

;; Generating RTL for gimple basic block 10

;; _24 = databitlen_64 >> 3;

(insn 68 67 0 (parallel [
            (set (reg:DI 103 [ D.5911 ])
                (lshiftrt:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:383 -1
     (nil))

;; _28 = (sizetype) left_41;

(insn 69 68 0 (set (reg:DI 106 [ D.5913 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:382 -1
     (nil))
Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:711, generic-match.c:1389
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:711, generic-match.c:1389
Applying pattern match.pd:114, generic-match.c:6949

;; memcpy (_29, data_65, _24);

(insn 70 69 71 (parallel [
            (set (reg:DI 139 [ D.5912 ])
                (plus:DI (reg/v/f:DI 120 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 71 70 72 (parallel [
            (set (reg:DI 140 [ D.5914 ])
                (plus:DI (reg:DI 139 [ D.5912 ])
                    (reg:DI 106 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 72 71 73 (set (reg:SI 141)
        (subreg:SI (reg:DI 103 [ D.5911 ]) 0)) blake_ref.c:382 -1
     (nil))

(insn 73 72 74 (set (reg/f:DI 142)
        (reg:DI 140 [ D.5914 ])) blake_ref.c:382 -1
     (nil))

(insn 74 73 75 (set (reg/f:DI 143)
        (reg/v/f:DI 117 [ data ])) blake_ref.c:382 -1
     (nil))

(insn 75 74 76 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 141)
            (const_int 8 [0x8]))) blake_ref.c:382 -1
     (nil))

(jump_insn 76 75 77 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) blake_ref.c:382 -1
     (nil))

(insn 77 76 78 (parallel [
            (set (reg:SI 144)
                (and:SI (reg:SI 141)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 78 77 79 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 144)
            (const_int 0 [0]))) blake_ref.c:382 -1
     (nil))

(jump_insn 79 78 80 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) blake_ref.c:382 -1
     (int_list:REG_BR_PROB 9000 (nil)))

(insn 80 79 81 (set (reg:SI 145)
        (mem:SI (reg/f:DI 143) [0  S4 A8])) blake_ref.c:382 -1
     (nil))

(insn 81 80 82 (set (mem:SI (reg/f:DI 142) [0  S4 A8])
        (reg:SI 145)) blake_ref.c:382 -1
     (nil))

(insn 82 81 83 (set (reg:DI 146)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 -1
     (nil))

(insn 83 82 84 (parallel [
            (set (reg:DI 147)
                (plus:DI (reg/f:DI 142)
                    (reg:DI 146)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 84 83 85 (parallel [
            (set (reg/f:DI 148)
                (plus:DI (reg:DI 147)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 85 84 86 (set (reg:DI 149)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 -1
     (nil))

(insn 86 85 87 (parallel [
            (set (reg:DI 150)
                (plus:DI (reg/f:DI 143)
                    (reg:DI 149)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 87 86 88 (parallel [
            (set (reg/f:DI 151)
                (plus:DI (reg:DI 150)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 88 87 89 (set (reg:SI 152)
        (mem:SI (plus:DI (reg/f:DI 151)
                (const_int -8 [0xfffffffffffffff8])) [0  S4 A8])) blake_ref.c:382 -1
     (nil))

(insn 89 88 90 (set (mem:SI (plus:DI (reg/f:DI 148)
                (const_int -8 [0xfffffffffffffff8])) [0  S4 A8])
        (reg:SI 152)) blake_ref.c:382 -1
     (nil))

(jump_insn 90 89 91 (set (pc)
        (label_ref 131)) blake_ref.c:382 -1
     (nil))

(barrier 91 90 92)

(code_label 92 91 93 51 "" [1 uses])

(insn 93 92 94 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 141)
            (const_int 0 [0]))) blake_ref.c:382 -1
     (nil))

(jump_insn 94 93 95 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) blake_ref.c:382 -1
     (nil))

(insn 95 94 96 (set (reg:QI 153)
        (mem:QI (reg/f:DI 143) [0  S1 A8])) blake_ref.c:382 -1
     (nil))

(insn 96 95 97 (set (mem:QI (reg/f:DI 142) [0  S1 A8])
        (reg:QI 153)) blake_ref.c:382 -1
     (nil))

(insn 97 96 98 (parallel [
            (set (reg:SI 154)
                (and:SI (reg:SI 141)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 98 97 99 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 154)
            (const_int 0 [0]))) blake_ref.c:382 -1
     (nil))

(jump_insn 99 98 100 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) blake_ref.c:382 -1
     (int_list:REG_BR_PROB 9000 (nil)))

(insn 100 99 101 (set (reg:DI 156)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 -1
     (nil))

(insn 101 100 102 (set (reg:DI 155)
        (reg:DI 156)) blake_ref.c:382 -1
     (nil))

(insn 102 101 103 (parallel [
            (set (reg/f:DI 157)
                (plus:DI (reg/f:DI 142)
                    (reg:DI 155)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 103 102 104 (set (reg:DI 159)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 -1
     (nil))

(insn 104 103 105 (set (reg:DI 158)
        (reg:DI 159)) blake_ref.c:382 -1
     (nil))

(insn 105 104 106 (parallel [
            (set (reg/f:DI 160)
                (plus:DI (reg/f:DI 143)
                    (reg:DI 158)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 106 105 107 (set (reg:HI 161)
        (mem:HI (plus:DI (reg/f:DI 160)
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])) blake_ref.c:382 -1
     (nil))

(insn 107 106 108 (set (mem:HI (plus:DI (reg/f:DI 157)
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (reg:HI 161)) blake_ref.c:382 -1
     (nil))

(code_label 108 107 109 52 "" [1 uses])

(jump_insn 109 108 110 (set (pc)
        (label_ref 131)) blake_ref.c:382 -1
     (nil))

(barrier 110 109 111)

(code_label 111 110 112 49 "" [1 uses])

(insn 112 111 113 (set (reg:DI 162)
        (mem:DI (reg/f:DI 143) [0  S8 A8])) blake_ref.c:382 -1
     (nil))

(insn 113 112 114 (set (mem:DI (reg/f:DI 142) [0  S8 A8])
        (reg:DI 162)) blake_ref.c:382 -1
     (nil))

(insn 114 113 115 (set (reg:DI 163)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 -1
     (nil))

(insn 115 114 116 (parallel [
            (set (reg:DI 164)
                (plus:DI (reg/f:DI 142)
                    (reg:DI 163)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 116 115 117 (parallel [
            (set (reg/f:DI 165)
                (plus:DI (reg:DI 164)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 117 116 118 (set (reg:DI 166)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 -1
     (nil))

(insn 118 117 119 (parallel [
            (set (reg:DI 167)
                (plus:DI (reg/f:DI 143)
                    (reg:DI 166)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 119 118 120 (parallel [
            (set (reg/f:DI 168)
                (plus:DI (reg:DI 167)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 120 119 121 (set (reg:DI 169)
        (mem:DI (plus:DI (reg/f:DI 168)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])) blake_ref.c:382 -1
     (nil))

(insn 121 120 122 (set (mem:DI (plus:DI (reg/f:DI 165)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
        (reg:DI 169)) blake_ref.c:382 -1
     (nil))

(insn 122 121 123 (parallel [
            (set (reg/f:DI 170)
                (plus:DI (reg/f:DI 142)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 123 122 124 (parallel [
            (set (reg/f:DI 170)
                (and:DI (reg/f:DI 170)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 124 123 125 (parallel [
            (set (reg/f:DI 142)
                (minus:DI (reg/f:DI 142)
                    (reg/f:DI 170)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 125 124 126 (parallel [
            (set (reg/f:DI 143)
                (minus:DI (reg/f:DI 143)
                    (reg/f:DI 142)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 126 125 127 (parallel [
            (set (reg:SI 141)
                (plus:SI (reg:SI 141)
                    (subreg:SI (reg/f:DI 142) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 127 126 128 (parallel [
            (set (reg:SI 141)
                (and:SI (reg:SI 141)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 128 127 129 (parallel [
            (set (reg:SI 171)
                (lshiftrt:SI (reg:SI 141)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))

(insn 129 128 130 (set (reg:DI 172)
        (zero_extend:DI (reg:SI 171))) blake_ref.c:382 -1
     (nil))

(insn 130 129 131 (parallel [
            (set (reg:DI 172)
                (const_int 0 [0]))
            (set (reg/f:DI 170)
                (plus:DI (ashift:DI (reg:DI 172)
                        (const_int 3 [0x3]))
                    (reg/f:DI 170)))
            (set (reg/f:DI 143)
                (plus:DI (ashift:DI (reg:DI 172)
                        (const_int 3 [0x3]))
                    (reg/f:DI 143)))
            (set (mem:BLK (reg/f:DI 170) [0  A64])
                (mem:BLK (reg/f:DI 143) [0  A8]))
            (use (reg:DI 172))
        ]) blake_ref.c:382 -1
     (nil))

(code_label 131 130 0 50 "" [0 uses])

;; state_1(D)->datalen = _34;

(insn 132 131 133 (parallel [
            (set (reg:SI 173 [ D.5910 ])
                (ashift:SI (reg/v:SI 88 [ left ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:384 -1
     (nil))

(insn 133 132 134 (parallel [
            (set (reg:SI 174)
                (plus:SI (reg:SI 173 [ D.5910 ])
                    (subreg:SI (reg/v:DI 122 [ databitlen ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:384 -1
     (nil))

(insn 134 133 0 (set (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (reg:SI 174)) blake_ref.c:384 -1
     (nil))

;; if (_35 != 0)

(insn 135 134 136 (parallel [
            (set (reg:DI 175 [ D.5911 ])
                (and:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:387 -1
     (nil))

(insn 136 135 137 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 175 [ D.5911 ])
            (const_int 0 [0]))) blake_ref.c:387 -1
     (nil))

(jump_insn 137 136 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:387 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 11

;; _38 = *_37;

(insn 139 138 0 (set (reg:QI 116 [ D.5917 ])
        (mem:QI (plus:DI (reg/v/f:DI 117 [ data ])
                (reg:DI 103 [ D.5911 ])) [0 *_37+0 S1 A8])) blake_ref.c:388 -1
     (nil))
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223

;; state_1(D)->data64[_36] = _38;

(insn 140 139 141 (parallel [
            (set (reg:DI 176)
                (plus:DI (reg/v/f:DI 120 [ state ])
                    (reg:DI 103 [ D.5911 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:388 -1
     (nil))

(insn 141 140 142 (parallel [
            (set (reg:DI 177)
                (plus:DI (reg:DI 176)
                    (reg:DI 106 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:388 -1
     (nil))

(insn 142 141 143 (parallel [
            (set (reg/f:DI 178)
                (plus:DI (reg:DI 177)
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:388 -1
     (nil))

(insn 143 142 0 (set (mem/j:QI (reg/f:DI 178) [0 state_1(D)->data64 S1 A8])
        (reg:QI 116 [ D.5917 ])) blake_ref.c:388 -1
     (nil))

;; Generating RTL for gimple basic block 12

;; 

(code_label 146 145 147 48 "" [0 uses])

(note 147 146 0 NOTE_INSN_BASIC_BLOCK)

;; state_1(D)->datalen = 0;

(insn 148 147 0 (set (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:391 -1
     (nil))

;; Generating RTL for gimple basic block 13

;; 

(code_label 149 148 150 53 "" [0 uses])

(note 150 149 0 NOTE_INSN_BASIC_BLOCK)
Edge 5->9 redirected to 16
Predictions for insn 76 bb 10
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
Predictions for insn 94 bb 19
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 16->18 redirected to 20
Merging block 18 into block 17...
Merged blocks 17 and 18.
Merged 17 and 18 without moving.
Merging block 24 into block 23...
Merged blocks 23 and 24.
Merged 23 and 24 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 120 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:345 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 81 virtual-incoming-args) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 121 [ data ])
        (reg:DI 1 dx [ data ])) blake_ref.c:345 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 8 [0x8])) [4 data+0 S8 A64])
        (nil)))
(insn 4 3 5 2 (set (reg/v:DI 122 [ databitlen ])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:345 -1
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
        (nil)))
(note 5 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 5 11 2 (set (reg:SI 123)
        (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])) blake_ref.c:354 -1
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/v:SI 88 [ left ])
                (ashiftrt:SI (reg:SI 123)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:354 -1
     (expr_list:REG_EQUAL (ashiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                    (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 88 [ left ])
            (const_int 0 [0]))) blake_ref.c:358 -1
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) blake_ref.c:358 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 42)
;;  succ:       4 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 

;; basic block 4, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:SI 124)
        (const_int 128 [0x80])) blake_ref.c:355 -1
     (nil))
(insn 16 15 17 4 (parallel [
            (set (reg/v:SI 89 [ fill ])
                (minus:SI (reg:SI 124)
                    (reg/v:SI 88 [ left ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:355 -1
     (nil))
(insn 17 16 18 4 (set (reg:DI 91 [ D.5911 ])
        (sign_extend:DI (reg/v:SI 89 [ fill ]))) blake_ref.c:358 -1
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg:DI 125 [ D.5911 ])
                (lshiftrt:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:358 -1
     (nil))
(insn 19 18 20 4 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 125 [ D.5911 ])
            (reg:DI 91 [ D.5911 ]))) blake_ref.c:358 -1
     (nil))
(jump_insn 20 19 21 4 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) blake_ref.c:358 -1
     (int_list:REG_BR_PROB 7100 (nil))
 -> 42)
;;  succ:       5 [29.0%]  (FALLTHRU)
;;              6 [71.0%] 

;; basic block 5, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 [29.0%]  (FALLTHRU)
(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 5 (parallel [
            (set (reg/f:DI 92 [ D.5912 ])
                (plus:DI (reg/v/f:DI 120 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 -1
     (nil))
(insn 23 22 24 5 (set (reg:DI 126 [ D.5913 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:359 -1
     (nil))
(insn 24 23 25 5 (parallel [
            (set (reg:DI 127 [ D.5914 ])
                (plus:DI (reg/f:DI 92 [ D.5912 ])
                    (reg:DI 126 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 -1
     (nil))
(insn 25 24 26 5 (set (reg:DI 128)
        (reg:DI 127 [ D.5914 ])) blake_ref.c:359 -1
     (nil))
(insn 26 25 27 5 (set (reg:DI 129)
        (reg/v/f:DI 121 [ data ])) blake_ref.c:359 -1
     (nil))
(insn 27 26 28 5 (set (reg:DI 130)
        (reg:DI 91 [ D.5911 ])) blake_ref.c:359 -1
     (nil))
(insn 28 27 29 5 (set (reg:DI 37 r8)
        (reg:DI 130)) blake_ref.c:359 -1
     (nil))
(insn 29 28 30 5 (set (reg:DI 1 dx)
        (reg:DI 129)) blake_ref.c:359 -1
     (nil))
(insn 30 29 31 5 (set (reg:DI 2 cx)
        (reg:DI 128)) blake_ref.c:359 -1
     (nil))
(call_insn 31 30 32 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>) [0 memcpy S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:359 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 2 cx))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 37 r8))
                    (nil))))))
(insn 32 31 33 5 (set (reg:DI 131)
        (reg:DI 0 ax)) blake_ref.c:359 -1
     (nil))
(insn 33 32 34 5 (set (reg:DI 132)
        (reg:DI 131)) blake_ref.c:359 -1
     (nil))
(insn 34 33 35 5 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                        (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                            (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 -1
     (nil))
(insn 35 34 36 5 (set (reg:DI 1 dx)
        (reg/f:DI 92 [ D.5912 ])) blake_ref.c:364 -1
     (nil))
(insn 36 35 37 5 (set (reg:DI 2 cx)
        (reg/v/f:DI 120 [ state ])) blake_ref.c:364 -1
     (nil))
(call_insn 37 36 38 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:364 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 38 37 39 5 (parallel [
            (set (reg/v/f:DI 121 [ data ])
                (plus:DI (reg/v/f:DI 121 [ data ])
                    (reg:DI 91 [ D.5911 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:365 -1
     (nil))
(insn 39 38 40 5 (parallel [
            (set (reg:SI 133 [ D.5910 ])
                (ashift:SI (reg/v:SI 89 [ fill ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:366 -1
     (nil))
(insn 40 39 41 5 (set (reg:DI 134 [ D.5911 ])
        (sign_extend:DI (reg:SI 133 [ D.5910 ]))) blake_ref.c:366 -1
     (nil))
(insn 41 40 6 5 (parallel [
            (set (reg/v:DI 122 [ databitlen ])
                (minus:DI (reg/v:DI 122 [ databitlen ])
                    (reg:DI 134 [ D.5911 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:366 -1
     (nil))
(insn 6 41 42 5 (set (reg/v:SI 88 [ left ])
        (const_int 0 [0])) blake_ref.c:368 -1
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;;              4 [71.0%] 
;;              5 [100.0%]  (FALLTHRU)
(code_label 42 6 43 6 45 "" [2 uses])
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 6 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 122 [ databitlen ])
            (const_int 1023 [0x3ff]))) blake_ref.c:372 -1
     (nil))
(jump_insn 45 44 46 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 160)
            (pc))) blake_ref.c:372 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 160)
;;  succ:       7 [91.0%]  (FALLTHRU)
;;              10 [9.0%] 

;; basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 [91.0%]  (FALLTHRU)
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 7 (parallel [
            (set (reg:DI 135 [ D.5911 ])
                (plus:DI (reg/v:DI 122 [ databitlen ])
                    (const_int -1024 [0xfffffffffffffc00])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 48 47 49 7 (parallel [
            (set (reg:DI 136 [ D.5911 ])
                (lshiftrt:DI (reg:DI 135 [ D.5911 ])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 49 48 50 7 (parallel [
            (set (reg:DI 137 [ D.5913 ])
                (plus:DI (reg:DI 136 [ D.5911 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 50 49 51 7 (parallel [
            (set (reg:DI 138 [ D.5913 ])
                (ashift:DI (reg:DI 137 [ D.5913 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 51 50 58 7 (parallel [
            (set (reg/v/f:DI 117 [ data ])
                (plus:DI (reg/v/f:DI 121 [ data ])
                    (reg:DI 138 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)

;; basic block 8, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [100.0%]  (FALLTHRU)
;;              8 [91.0%]  (DFS_BACK)
(code_label 58 51 52 8 47 "" [1 uses])
(note 52 58 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 8 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                        (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                            (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:375 -1
     (nil))
(insn 54 53 55 8 (set (reg:DI 1 dx)
        (reg/v/f:DI 121 [ data ])) blake_ref.c:376 -1
     (nil))
(insn 55 54 56 8 (set (reg:DI 2 cx)
        (reg/v/f:DI 120 [ state ])) blake_ref.c:376 -1
     (nil))
(call_insn 56 55 57 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:376 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 57 56 59 8 (parallel [
            (set (reg/v/f:DI 121 [ data ])
                (plus:DI (reg/v/f:DI 121 [ data ])
                    (const_int 128 [0x80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:377 -1
     (nil))
(insn 59 57 60 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 121 [ data ])
            (reg/v/f:DI 117 [ data ]))) blake_ref.c:372 -1
     (nil))
(jump_insn 60 59 61 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) blake_ref.c:372 -1
     (int_list:REG_BR_PROB 9100 (nil))
 -> 58)
;;  succ:       8 [91.0%]  (DFS_BACK)
;;              9 [9.0%]  (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [9.0%]  (FALLTHRU)
(note 61 60 62 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 157 9 (parallel [
            (set (reg/v:DI 122 [ databitlen ])
                (and:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 1023 [0x3ff])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(jump_insn 157 62 158 9 (set (pc)
        (label_ref 63)) -1
     (nil)
 -> 63)
;;  succ:       11 [100.0%] 

(barrier 158 157 160)
;; basic block 10, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 [9.0%] 
(code_label 160 158 159 10 54 "" [1 uses])
(note 159 160 7 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 7 159 63 10 (set (reg/v/f:DI 117 [ data ])
        (reg/v/f:DI 121 [ data ])) blake_ref.c:372 -1
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)

;; basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              9 [100.0%] 
(code_label 63 7 64 11 46 "" [1 uses])
(note 64 63 65 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 122 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:381 -1
     (nil))
(jump_insn 66 65 67 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) blake_ref.c:381 -1
     (int_list:REG_BR_PROB 7100 (nil))
 -> 146)
;;  succ:       12 [29.0%]  (FALLTHRU)
;;              22 [71.0%] 

;; basic block 12, loop depth 0, count 0, freq 261, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 [29.0%]  (FALLTHRU)
(note 67 66 68 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 12 (parallel [
            (set (reg:DI 103 [ D.5911 ])
                (lshiftrt:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:383 -1
     (nil))
(insn 69 68 70 12 (set (reg:DI 106 [ D.5913 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:382 -1
     (nil))
(insn 70 69 71 12 (parallel [
            (set (reg:DI 139 [ D.5912 ])
                (plus:DI (reg/v/f:DI 120 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 71 70 72 12 (parallel [
            (set (reg:DI 140 [ D.5914 ])
                (plus:DI (reg:DI 139 [ D.5912 ])
                    (reg:DI 106 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 72 71 73 12 (set (reg:SI 141)
        (subreg:SI (reg:DI 103 [ D.5911 ]) 0)) blake_ref.c:382 -1
     (nil))
(insn 73 72 74 12 (set (reg/f:DI 142)
        (reg:DI 140 [ D.5914 ])) blake_ref.c:382 -1
     (nil))
(insn 74 73 75 12 (set (reg/f:DI 143)
        (reg/v/f:DI 117 [ data ])) blake_ref.c:382 -1
     (nil))
(insn 75 74 76 12 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 141)
            (const_int 8 [0x8]))) blake_ref.c:382 -1
     (nil))
(jump_insn 76 75 161 12 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) blake_ref.c:382 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 111)
;;  succ:       19 [50.0%] 
;;              13 [50.0%]  (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 [50.0%]  (FALLTHRU)
(note 161 76 77 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 77 161 78 13 (parallel [
            (set (reg:SI 144)
                (and:SI (reg:SI 141)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 78 77 79 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 144)
            (const_int 0 [0]))) blake_ref.c:382 -1
     (nil))
(jump_insn 79 78 162 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) blake_ref.c:382 -1
     (int_list:REG_BR_PROB 9000 (nil))
 -> 92)
;;  succ:       15 [90.0%] 
;;              14 [10.0%]  (FALLTHRU)

;; basic block 14, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 [10.0%]  (FALLTHRU)
(note 162 79 80 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 80 162 81 14 (set (reg:SI 145)
        (mem:SI (reg/f:DI 143) [0  S4 A8])) blake_ref.c:382 -1
     (nil))
(insn 81 80 82 14 (set (mem:SI (reg/f:DI 142) [0  S4 A8])
        (reg:SI 145)) blake_ref.c:382 -1
     (nil))
(insn 82 81 83 14 (set (reg:DI 146)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 -1
     (nil))
(insn 83 82 84 14 (parallel [
            (set (reg:DI 147)
                (plus:DI (reg/f:DI 142)
                    (reg:DI 146)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 84 83 85 14 (parallel [
            (set (reg/f:DI 148)
                (plus:DI (reg:DI 147)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 85 84 86 14 (set (reg:DI 149)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 -1
     (nil))
(insn 86 85 87 14 (parallel [
            (set (reg:DI 150)
                (plus:DI (reg/f:DI 143)
                    (reg:DI 149)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 87 86 88 14 (parallel [
            (set (reg/f:DI 151)
                (plus:DI (reg:DI 150)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 88 87 89 14 (set (reg:SI 152)
        (mem:SI (plus:DI (reg/f:DI 151)
                (const_int -8 [0xfffffffffffffff8])) [0  S4 A8])) blake_ref.c:382 -1
     (nil))
(insn 89 88 90 14 (set (mem:SI (plus:DI (reg/f:DI 148)
                (const_int -8 [0xfffffffffffffff8])) [0  S4 A8])
        (reg:SI 152)) blake_ref.c:382 -1
     (nil))
(jump_insn 90 89 91 14 (set (pc)
        (label_ref 131)) blake_ref.c:382 -1
     (nil)
 -> 131)
;;  succ:       20 [100.0%] 

(barrier 91 90 92)
;; basic block 15, loop depth 0, count 0, freq 118, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 [90.0%] 
(code_label 92 91 163 15 51 "" [1 uses])
(note 163 92 93 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 93 163 94 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 141)
            (const_int 0 [0]))) blake_ref.c:382 -1
     (nil))
(jump_insn 94 93 164 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) blake_ref.c:382 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 131)
;;  succ:       20 [50.0%] 
;;              16 [50.0%]  (FALLTHRU)

;; basic block 16, loop depth 0, count 0, freq 59, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 [50.0%]  (FALLTHRU)
(note 164 94 95 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 95 164 96 16 (set (reg:QI 153)
        (mem:QI (reg/f:DI 143) [0  S1 A8])) blake_ref.c:382 -1
     (nil))
(insn 96 95 97 16 (set (mem:QI (reg/f:DI 142) [0  S1 A8])
        (reg:QI 153)) blake_ref.c:382 -1
     (nil))
(insn 97 96 98 16 (parallel [
            (set (reg:SI 154)
                (and:SI (reg:SI 141)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 98 97 99 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 154)
            (const_int 0 [0]))) blake_ref.c:382 -1
     (nil))
(jump_insn 99 98 165 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 131)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (int_list:REG_BR_PROB 9000 (nil))
 -> 131)
;;  succ:       20 [90.0%] 
;;              17 [10.0%]  (FALLTHRU)

;; basic block 17, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 16, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 [10.0%]  (FALLTHRU)
(note 165 99 100 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 100 165 101 17 (set (reg:DI 156)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 -1
     (nil))
(insn 101 100 102 17 (set (reg:DI 155)
        (reg:DI 156)) blake_ref.c:382 -1
     (nil))
(insn 102 101 103 17 (parallel [
            (set (reg/f:DI 157)
                (plus:DI (reg/f:DI 142)
                    (reg:DI 155)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 103 102 104 17 (set (reg:DI 159)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 -1
     (nil))
(insn 104 103 105 17 (set (reg:DI 158)
        (reg:DI 159)) blake_ref.c:382 -1
     (nil))
(insn 105 104 106 17 (parallel [
            (set (reg/f:DI 160)
                (plus:DI (reg/f:DI 143)
                    (reg:DI 158)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 106 105 107 17 (set (reg:HI 161)
        (mem:HI (plus:DI (reg/f:DI 160)
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])) blake_ref.c:382 -1
     (nil))
(insn 107 106 109 17 (set (mem:HI (plus:DI (reg/f:DI 157)
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (reg:HI 161)) blake_ref.c:382 -1
     (nil))
(jump_insn 109 107 110 17 (set (pc)
        (label_ref 131)) blake_ref.c:382 -1
     (nil)
 -> 131)
;;  succ:       20 [100.0%] 

(barrier 110 109 111)
;; basic block 19, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 17, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 [50.0%] 
(code_label 111 110 167 19 49 "" [1 uses])
(note 167 111 112 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 112 167 113 19 (set (reg:DI 162)
        (mem:DI (reg/f:DI 143) [0  S8 A8])) blake_ref.c:382 -1
     (nil))
(insn 113 112 114 19 (set (mem:DI (reg/f:DI 142) [0  S8 A8])
        (reg:DI 162)) blake_ref.c:382 -1
     (nil))
(insn 114 113 115 19 (set (reg:DI 163)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 -1
     (nil))
(insn 115 114 116 19 (parallel [
            (set (reg:DI 164)
                (plus:DI (reg/f:DI 142)
                    (reg:DI 163)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 116 115 117 19 (parallel [
            (set (reg/f:DI 165)
                (plus:DI (reg:DI 164)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 117 116 118 19 (set (reg:DI 166)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 -1
     (nil))
(insn 118 117 119 19 (parallel [
            (set (reg:DI 167)
                (plus:DI (reg/f:DI 143)
                    (reg:DI 166)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 119 118 120 19 (parallel [
            (set (reg/f:DI 168)
                (plus:DI (reg:DI 167)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 120 119 121 19 (set (reg:DI 169)
        (mem:DI (plus:DI (reg/f:DI 168)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])) blake_ref.c:382 -1
     (nil))
(insn 121 120 122 19 (set (mem:DI (plus:DI (reg/f:DI 165)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
        (reg:DI 169)) blake_ref.c:382 -1
     (nil))
(insn 122 121 123 19 (parallel [
            (set (reg/f:DI 170)
                (plus:DI (reg/f:DI 142)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 123 122 124 19 (parallel [
            (set (reg/f:DI 170)
                (and:DI (reg/f:DI 170)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 124 123 125 19 (parallel [
            (set (reg/f:DI 142)
                (minus:DI (reg/f:DI 142)
                    (reg/f:DI 170)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 125 124 126 19 (parallel [
            (set (reg/f:DI 143)
                (minus:DI (reg/f:DI 143)
                    (reg/f:DI 142)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 126 125 127 19 (parallel [
            (set (reg:SI 141)
                (plus:SI (reg:SI 141)
                    (subreg:SI (reg/f:DI 142) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 127 126 128 19 (parallel [
            (set (reg:SI 141)
                (and:SI (reg:SI 141)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 128 127 129 19 (parallel [
            (set (reg:SI 171)
                (lshiftrt:SI (reg:SI 141)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 -1
     (nil))
(insn 129 128 130 19 (set (reg:DI 172)
        (zero_extend:DI (reg:SI 171))) blake_ref.c:382 -1
     (nil))
(insn 130 129 131 19 (parallel [
            (set (reg:DI 172)
                (const_int 0 [0]))
            (set (reg/f:DI 170)
                (plus:DI (ashift:DI (reg:DI 172)
                        (const_int 3 [0x3]))
                    (reg/f:DI 170)))
            (set (reg/f:DI 143)
                (plus:DI (ashift:DI (reg:DI 172)
                        (const_int 3 [0x3]))
                    (reg/f:DI 143)))
            (set (mem:BLK (reg/f:DI 170) [0  A64])
                (mem:BLK (reg/f:DI 143) [0  A8]))
            (use (reg:DI 172))
        ]) blake_ref.c:382 -1
     (nil))
;;  succ:       20 [100.0%]  (FALLTHRU)

;; basic block 20, loop depth 0, count 0, freq 262, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL)
;;  pred:       14 [100.0%] 
;;              15 [50.0%] 
;;              17 [100.0%] 
;;              19 [100.0%]  (FALLTHRU)
;;              16 [90.0%] 
(code_label 131 130 168 20 50 "" [4 uses])
(note 168 131 132 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 132 168 133 20 (parallel [
            (set (reg:SI 173 [ D.5910 ])
                (ashift:SI (reg/v:SI 88 [ left ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:384 -1
     (nil))
(insn 133 132 134 20 (parallel [
            (set (reg:SI 174)
                (plus:SI (reg:SI 173 [ D.5910 ])
                    (subreg:SI (reg/v:DI 122 [ databitlen ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:384 -1
     (nil))
(insn 134 133 135 20 (set (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (reg:SI 174)) blake_ref.c:384 -1
     (nil))
(insn 135 134 136 20 (parallel [
            (set (reg:DI 175 [ D.5911 ])
                (and:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:387 -1
     (nil))
(insn 136 135 137 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 175 [ D.5911 ])
            (const_int 0 [0]))) blake_ref.c:387 -1
     (nil))
(jump_insn 137 136 138 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 149)
            (pc))) blake_ref.c:387 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 149)
;;  succ:       21 [50.0%]  (FALLTHRU)
;;              23 [50.0%] 

;; basic block 21, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL)
;;  pred:       20 [50.0%]  (FALLTHRU)
(note 138 137 139 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 21 (set (reg:QI 116 [ D.5917 ])
        (mem:QI (plus:DI (reg/v/f:DI 117 [ data ])
                (reg:DI 103 [ D.5911 ])) [0 *_37+0 S1 A8])) blake_ref.c:388 -1
     (nil))
(insn 140 139 141 21 (parallel [
            (set (reg:DI 176)
                (plus:DI (reg/v/f:DI 120 [ state ])
                    (reg:DI 103 [ D.5911 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:388 -1
     (nil))
(insn 141 140 142 21 (parallel [
            (set (reg:DI 177)
                (plus:DI (reg:DI 176)
                    (reg:DI 106 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:388 -1
     (nil))
(insn 142 141 143 21 (parallel [
            (set (reg/f:DI 178)
                (plus:DI (reg:DI 177)
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:388 -1
     (nil))
(insn 143 142 144 21 (set (mem/j:QI (reg/f:DI 178) [0 state_1(D)->data64 S1 A8])
        (reg:QI 116 [ D.5917 ])) blake_ref.c:388 -1
     (nil))
(jump_insn 144 143 145 21 (set (pc)
        (label_ref 149)) blake_ref.c:388 -1
     (nil)
 -> 149)
;;  succ:       23 [100.0%] 

(barrier 145 144 146)
;; basic block 22, loop depth 0, count 0, freq 639, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 [71.0%] 
(code_label 146 145 147 22 48 "" [1 uses])
(note 147 146 148 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 22 (set (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:391 -1
     (nil))
;;  succ:       23 [100.0%]  (FALLTHRU)

;; basic block 23, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 22, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 [50.0%] 
;;              21 [100.0%] 
;;              22 [100.0%]  (FALLTHRU)
(code_label 149 148 150 23 53 "" [2 uses])
(note 150 149 153 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 153 150 154 23 (clobber (reg/i:SI 0 ax)) blake_ref.c:394 -1
     (nil))
(insn 154 153 152 23 (clobber (reg:SI 119 [ <retval> ])) blake_ref.c:394 -1
     (nil))
(insn 152 154 155 23 (set (reg/i:SI 0 ax)
        (reg:SI 119 [ <retval> ])) blake_ref.c:394 -1
     (nil))
(insn 155 152 0 23 (use (reg/i:SI 0 ax)) blake_ref.c:394 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function GetHashStateSize (GetHashStateSize, funcdef_no=10, decl_uid=3156, cgraph_uid=10, symbol_order=18)

GetHashStateSize ()
{
;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  return 376;
;;    succ:       EXIT

}



Partition map 


After Coalescing:

Partition map 


GetHashStateSize ()
{
;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  return 376;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; return 376;

(insn 5 4 6 (set (reg:SI 87 [ <retval> ])
        (const_int 376 [0x178])) blake_ref.c:6 -1
     (nil))

(jump_insn 6 5 7 (set (pc)
        (label_ref 0)) blake_ref.c:6 -1
     (nil))

(barrier 7 6 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 6.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 9 2 (set (reg:SI 87 [ <retval> ])
        (const_int 376 [0x178])) blake_ref.c:6 -1
     (nil))
(insn 9 5 10 2 (set (reg/i:SI 0 ax)
        (reg:SI 87 [ <retval> ])) blake_ref.c:7 -1
     (nil))
(insn 10 9 0 2 (use (reg/i:SI 0 ax)) blake_ref.c:7 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function Init (Init, funcdef_no=13, decl_uid=3182, cgraph_uid=13, symbol_order=21)

Init (struct hashState * state, int hashbitlen)
{
  unsigned int _1;
  HashReturn _3;
  unsigned int _7;
  struct hashState * _14;
  u64[8] * _19;
  u64[8] * _21;
  u32[8] * _31;
  u32[8] * _33;
  struct hashState * _47;
  unsigned int _48;
  unsigned int _52;
  unsigned int _57;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _52 = (unsigned int) hashbitlen_10(D);
  _48 = _52 + 4294967072;
  _7 = _48 & 4294967263;
  if (_7 == 0)
    goto <bb 3>;
  else
    goto <bb 7>;
;;    succ:       3
;;                7

;;   basic block 3, loop depth 0
;;    pred:       2
  if (hashbitlen_10(D) == 224)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  _31 = &state_18(D)->h32;
  memcpy (_31, &IV224, 32);
  goto <bb 6>;
;;    succ:       6

;;   basic block 5, loop depth 0
;;    pred:       3
  _33 = &state_18(D)->h32;
  memcpy (_33, &IV256, 32);
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  state_18(D)->t32[0] = 0;
  state_18(D)->t32[1] = 0;
  _47 = state_18(D) + 56;
  __builtin_memset (_47, 0, 64);
  MEM[(unsigned int *)state_18(D) + 120B] = { 0, 0, 0, 0 };
  goto <bb 12>;
;;    succ:       12

;;   basic block 7, loop depth 0
;;    pred:       2
  _57 = _52 + 4294966912;
  _1 = _57 & 4294967167;
  if (_1 == 0)
    goto <bb 8>;
  else
    goto <bb 13>;
;;    succ:       8
;;                13

;;   basic block 8, loop depth 0
;;    pred:       7
  if (hashbitlen_10(D) == 384)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  _19 = &state_18(D)->h64;
  memcpy (_19, &IV384, 64);
  goto <bb 11>;
;;    succ:       11

;;   basic block 10, loop depth 0
;;    pred:       8
  _21 = &state_18(D)->h64;
  memcpy (_21, &IV512, 64);
;;    succ:       11

;;   basic block 11, loop depth 0
;;    pred:       9
;;                10
  state_18(D)->t64[0] = 0;
  state_18(D)->t64[1] = 0;
  _14 = state_18(D) + 216;
  __builtin_memset (_14, 0, 64);
  state_18(D)->salt64[0] = 0;
  state_18(D)->salt64[1] = 0;
  state_18(D)->salt64[2] = 0;
  state_18(D)->salt64[3] = 0;
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       6
;;                11
  state_18(D)->hashbitlen = hashbitlen_10(D);
  state_18(D)->datalen = 0;
  state_18(D)->init = 1;
  state_18(D)->nullt = 0;
;;    succ:       13

;;   basic block 13, loop depth 0
;;    pred:       7
;;                12
  # _3 = PHI <2(7), 0(12)>
  return _3;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 3 (_3 - 3 )
Partition 7 (_7 - 7 )
Partition 10 (hashbitlen_10(D) - 10 )
Partition 14 (_14 - 14 )
Partition 18 (state_18(D) - 18 )
Partition 19 (_19 - 19 )
Partition 21 (_21 - 21 )
Partition 31 (_31 - 31 )
Partition 33 (_33 - 33 )
Partition 47 (_47 - 47 )
Partition 48 (_48 - 48 )
Partition 52 (_52 - 52 )
Partition 57 (_57 - 57 )


Partition map 

Partition 0 (hashbitlen_10(D) - 10 )
Partition 1 (state_18(D) - 18 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (hashbitlen_10(D) - 10 )
Partition 1 (state_18(D) - 18 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_3 - 3 )
Partition 2 (_7 - 7 )
Partition 3 (hashbitlen_10(D) - 10 )
Partition 4 (_14 - 14 )
Partition 5 (state_18(D) - 18 )
Partition 6 (_19 - 19 )
Partition 7 (_21 - 21 )
Partition 8 (_31 - 31 )
Partition 9 (_33 - 33 )
Partition 10 (_47 - 47 )
Partition 11 (_48 - 48 )
Partition 12 (_52 - 52 )
Partition 13 (_57 - 57 )


Replacing Expressions
_1 replace with --> _1 = _57 & 4294967167;

_7 replace with --> _7 = _48 & 4294967263;

_14 replace with --> _14 = state_18(D) + 216;

_19 replace with --> _19 = &state_18(D)->h64;

_21 replace with --> _21 = &state_18(D)->h64;

_31 replace with --> _31 = &state_18(D)->h32;

_33 replace with --> _33 = &state_18(D)->h32;

_47 replace with --> _47 = state_18(D) + 56;

_48 replace with --> _48 = _52 + 4294967072;

_57 replace with --> _57 = _52 + 4294966912;


Init (struct hashState * state, int hashbitlen)
{
  unsigned int _1;
  HashReturn _3;
  unsigned int _7;
  struct hashState * _14;
  u64[8] * _19;
  u64[8] * _21;
  u32[8] * _31;
  u32[8] * _33;
  struct hashState * _47;
  unsigned int _48;
  unsigned int _52;
  unsigned int _57;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _52 = (unsigned int) hashbitlen_10(D);
  _48 = _52 + 4294967072;
  _7 = _48 & 4294967263;
  if (_7 == 0)
    goto <bb 3>;
  else
    goto <bb 7>;
;;    succ:       3
;;                7

;;   basic block 3, loop depth 0
;;    pred:       2
  if (hashbitlen_10(D) == 224)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  _31 = &state_18(D)->h32;
  memcpy (_31, &IV224, 32);
  goto <bb 6>;
;;    succ:       6

;;   basic block 5, loop depth 0
;;    pred:       3
  _33 = &state_18(D)->h32;
  memcpy (_33, &IV256, 32);
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  state_18(D)->t32[0] = 0;
  state_18(D)->t32[1] = 0;
  _47 = state_18(D) + 56;
  __builtin_memset (_47, 0, 64);
  MEM[(unsigned int *)state_18(D) + 120B] = { 0, 0, 0, 0 };
  goto <bb 12>;
;;    succ:       12

;;   basic block 7, loop depth 0
;;    pred:       2
  _57 = _52 + 4294966912;
  _1 = _57 & 4294967167;
  if (_1 == 0)
    goto <bb 8>;
  else
    goto <bb 13>;
;;    succ:       8
;;                13

;;   basic block 8, loop depth 0
;;    pred:       7
  if (hashbitlen_10(D) == 384)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  _19 = &state_18(D)->h64;
  memcpy (_19, &IV384, 64);
  goto <bb 11>;
;;    succ:       11

;;   basic block 10, loop depth 0
;;    pred:       8
  _21 = &state_18(D)->h64;
  memcpy (_21, &IV512, 64);
;;    succ:       11

;;   basic block 11, loop depth 0
;;    pred:       9
;;                10
  state_18(D)->t64[0] = 0;
  state_18(D)->t64[1] = 0;
  _14 = state_18(D) + 216;
  __builtin_memset (_14, 0, 64);
  state_18(D)->salt64[0] = 0;
  state_18(D)->salt64[1] = 0;
  state_18(D)->salt64[2] = 0;
  state_18(D)->salt64[3] = 0;
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       6
;;                11
  state_18(D)->hashbitlen = hashbitlen_10(D);
  state_18(D)->datalen = 0;
  state_18(D)->init = 1;
  state_18(D)->nullt = 0;
;;    succ:       13

;;   basic block 13, loop depth 0
;;    pred:       7
;;                12
  # _3 = PHI <2(7), 0(12)>
  return _3;
;;    succ:       EXIT

}


Inserting a value copy on edge BB7->BB13 : PART.1 = 2
Inserting a value copy on edge BB12->BB13 : PART.1 = 0

;; Generating RTL for gimple basic block 2

;; _52 = (unsigned int) hashbitlen_10(D);

(insn 9 8 0 (set (reg:SI 97 [ D.5934 ])
        (reg/v:SI 101 [ hashbitlen ])) blake_ref.c:207 -1
     (nil))

;; if (_7 == 0)

(insn 10 9 11 (parallel [
            (set (reg:SI 102 [ D.5934 ])
                (plus:SI (reg:SI 97 [ D.5934 ])
                    (const_int -224 [0xffffffffffffff20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 -1
     (nil))

(insn 11 10 12 (parallel [
            (set (reg:SI 103 [ D.5934 ])
                (and:SI (reg:SI 102 [ D.5934 ])
                    (const_int -33 [0xffffffffffffffdf])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 -1
     (nil))

(insn 12 11 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 103 [ D.5934 ])
            (const_int 0 [0]))) blake_ref.c:207 -1
     (nil))

(jump_insn 13 12 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:207 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 3

;; if (hashbitlen_10(D) == 224)

(insn 15 14 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 101 [ hashbitlen ])
            (const_int 224 [0xe0]))) blake_ref.c:210 -1
     (nil))

(jump_insn 16 15 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:210 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 4

;; memcpy (_31, &IV224, 32);

(insn 18 17 19 (parallel [
            (set (reg:DI 104)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:211 -1
     (nil))

(insn 19 18 20 (set (reg/f:DI 105)
        (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)) blake_ref.c:211 -1
     (nil))

(insn 20 19 21 (set (reg:DI 106)
        (mem/u/c:DI (reg/f:DI 105) [0 MEM[(void *)&IV224]+0 S8 A256])) blake_ref.c:211 -1
     (nil))

(insn 21 20 22 (set (mem:DI (reg:DI 104) [0 MEM[(void *)state_18(D) + 16B]+0 S8 A8])
        (reg:DI 106)) blake_ref.c:211 -1
     (nil))

(insn 22 21 23 (set (reg:DI 107)
        (mem/u/c:DI (plus:DI (reg/f:DI 105)
                (const_int 8 [0x8])) [0 MEM[(void *)&IV224]+8 S8 A64])) blake_ref.c:211 -1
     (nil))

(insn 23 22 24 (set (mem:DI (plus:DI (reg:DI 104)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 16B]+8 S8 A8])
        (reg:DI 107)) blake_ref.c:211 -1
     (nil))

(insn 24 23 25 (set (reg:DI 108)
        (mem/u/c:DI (plus:DI (reg/f:DI 105)
                (const_int 16 [0x10])) [0 MEM[(void *)&IV224]+16 S8 A128])) blake_ref.c:211 -1
     (nil))

(insn 25 24 26 (set (mem:DI (plus:DI (reg:DI 104)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+16 S8 A8])
        (reg:DI 108)) blake_ref.c:211 -1
     (nil))

(insn 26 25 27 (set (reg:DI 109)
        (mem/u/c:DI (plus:DI (reg/f:DI 105)
                (const_int 24 [0x18])) [0 MEM[(void *)&IV224]+24 S8 A64])) blake_ref.c:211 -1
     (nil))

(insn 27 26 0 (set (mem:DI (plus:DI (reg:DI 104)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 16B]+24 S8 A8])
        (reg:DI 109)) blake_ref.c:211 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 30 29 31 72 "" [0 uses])

(note 31 30 0 NOTE_INSN_BASIC_BLOCK)

;; memcpy (_33, &IV256, 32);

(insn 32 31 33 (parallel [
            (set (reg:DI 110)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:213 -1
     (nil))

(insn 33 32 34 (set (reg/f:DI 111)
        (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)) blake_ref.c:213 -1
     (nil))

(insn 34 33 35 (set (reg:DI 112)
        (mem/u/c:DI (reg/f:DI 111) [0 MEM[(void *)&IV256]+0 S8 A256])) blake_ref.c:213 -1
     (nil))

(insn 35 34 36 (set (mem:DI (reg:DI 110) [0 MEM[(void *)state_18(D) + 16B]+0 S8 A8])
        (reg:DI 112)) blake_ref.c:213 -1
     (nil))

(insn 36 35 37 (set (reg:DI 113)
        (mem/u/c:DI (plus:DI (reg/f:DI 111)
                (const_int 8 [0x8])) [0 MEM[(void *)&IV256]+8 S8 A64])) blake_ref.c:213 -1
     (nil))

(insn 37 36 38 (set (mem:DI (plus:DI (reg:DI 110)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 16B]+8 S8 A8])
        (reg:DI 113)) blake_ref.c:213 -1
     (nil))

(insn 38 37 39 (set (reg:DI 114)
        (mem/u/c:DI (plus:DI (reg/f:DI 111)
                (const_int 16 [0x10])) [0 MEM[(void *)&IV256]+16 S8 A128])) blake_ref.c:213 -1
     (nil))

(insn 39 38 40 (set (mem:DI (plus:DI (reg:DI 110)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+16 S8 A8])
        (reg:DI 114)) blake_ref.c:213 -1
     (nil))

(insn 40 39 41 (set (reg:DI 115)
        (mem/u/c:DI (plus:DI (reg/f:DI 111)
                (const_int 24 [0x18])) [0 MEM[(void *)&IV256]+24 S8 A64])) blake_ref.c:213 -1
     (nil))

(insn 41 40 0 (set (mem:DI (plus:DI (reg:DI 110)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 16B]+24 S8 A8])
        (reg:DI 115)) blake_ref.c:213 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 42 41 43 73 "" [0 uses])

(note 43 42 0 NOTE_INSN_BASIC_BLOCK)

;; state_18(D)->t32[0] = 0;

(insn 44 43 0 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 48 [0x30])) [2 state_18(D)->t32+0 S4 A64])
        (const_int 0 [0])) blake_ref.c:215 -1
     (nil))

;; state_18(D)->t32[1] = 0;

(insn 45 44 0 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 52 [0x34])) [2 state_18(D)->t32+4 S4 A32])
        (const_int 0 [0])) blake_ref.c:216 -1
     (nil))

;; __builtin_memset (_47, 0, 64);

(insn 46 45 47 (parallel [
            (set (reg:DI 116 [ D.5936 ])
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 47 46 48 (set (reg/f:DI 117)
        (reg:DI 116 [ D.5936 ])) -1
     (nil))

(insn 48 47 49 (set (reg:SI 118)
        (const_int 64 [0x40])) -1
     (nil))

(insn 49 48 50 (set (reg:DI 119)
        (const_int 0 [0])) -1
     (nil))

(insn 50 49 51 (set (mem:DI (reg/f:DI 117) [0  S8 A8])
        (reg:DI 119)) -1
     (nil))

(insn 51 50 52 (set (reg:DI 120)
        (zero_extend:DI (reg:SI 118))) -1
     (nil))

(insn 52 51 53 (parallel [
            (set (reg:DI 121)
                (plus:DI (reg/f:DI 117)
                    (reg:DI 120)))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 53 52 54 (parallel [
            (set (reg/f:DI 122)
                (plus:DI (reg:DI 121)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 54 53 55 (set (mem:DI (plus:DI (reg/f:DI 122)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
        (reg:DI 119)) -1
     (nil))

(insn 55 54 56 (parallel [
            (set (reg/f:DI 123)
                (plus:DI (reg/f:DI 117)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 56 55 57 (parallel [
            (set (reg/f:DI 123)
                (and:DI (reg/f:DI 123)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 57 56 58 (parallel [
            (set (reg/f:DI 117)
                (minus:DI (reg/f:DI 117)
                    (reg/f:DI 123)))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 58 57 59 (parallel [
            (set (reg:SI 118)
                (plus:SI (reg:SI 118)
                    (subreg:SI (reg/f:DI 117) 0)))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 59 58 60 (parallel [
            (set (reg:SI 118)
                (and:SI (reg:SI 118)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 60 59 61 (parallel [
            (set (reg:SI 124)
                (lshiftrt:SI (reg:SI 118)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 61 60 62 (set (reg:DI 125)
        (zero_extend:DI (reg:SI 124))) -1
     (nil))

(insn 62 61 0 (parallel [
            (set (reg:DI 125)
                (const_int 0 [0]))
            (set (reg/f:DI 123)
                (plus:DI (ashift:DI (reg:DI 125)
                        (const_int 3 [0x3]))
                    (reg/f:DI 123)))
            (set (mem:BLK (reg/f:DI 123) [0  A64])
                (const_int 0 [0]))
            (use (reg:DI 119))
            (use (reg:DI 125))
        ]) -1
     (nil))

;; MEM[(unsigned int *)state_18(D) + 120B] = { 0, 0, 0, 0 };

(insn 63 62 64 (set (reg:V4SI 126)
        (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])) blake_ref.c:221 -1
     (nil))

(insn 64 63 0 (set (mem:V16QI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 120 [0x78])) [2 MEM[(unsigned int *)state_18(D) + 120B]+0 S16 A32])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 126) 0)
            ] UNSPEC_STOREU)) blake_ref.c:221 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; 

(code_label 67 66 68 71 "" [0 uses])

(note 68 67 0 NOTE_INSN_BASIC_BLOCK)

;; if (_1 == 0)

(insn 69 68 70 (parallel [
            (set (reg:SI 127 [ D.5934 ])
                (plus:SI (reg:SI 97 [ D.5934 ])
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 -1
     (nil))

(insn 70 69 71 (parallel [
            (set (reg:SI 128 [ D.5934 ])
                (and:SI (reg:SI 127 [ D.5934 ])
                    (const_int -129 [0xffffffffffffff7f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 -1
     (nil))

(insn 71 70 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 128 [ D.5934 ])
            (const_int 0 [0]))) blake_ref.c:227 -1
     (nil))

(jump_insn 72 71 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:227 -1
     (int_list:REG_BR_PROB 6700 (nil)))

;; Generating RTL for gimple basic block 8

;; if (hashbitlen_10(D) == 384)

(insn 74 73 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 101 [ hashbitlen ])
            (const_int 384 [0x180]))) blake_ref.c:230 -1
     (nil))

(jump_insn 75 74 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:230 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 9

;; memcpy (_19, &IV384, 64);

(insn 77 76 78 (parallel [
            (set (reg:DI 129)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:231 -1
     (nil))

(insn 78 77 79 (set (reg/f:DI 130)
        (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)) blake_ref.c:231 -1
     (nil))

(insn 79 78 80 (set (reg:DI 131)
        (mem/u/c:DI (reg/f:DI 130) [0 MEM[(void *)&IV384]+0 S8 A256])) blake_ref.c:231 -1
     (nil))

(insn 80 79 81 (set (mem:DI (reg:DI 129) [0 MEM[(void *)state_18(D) + 136B]+0 S8 A8])
        (reg:DI 131)) blake_ref.c:231 -1
     (nil))

(insn 81 80 82 (set (reg:DI 132)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 8 [0x8])) [0 MEM[(void *)&IV384]+8 S8 A64])) blake_ref.c:231 -1
     (nil))

(insn 82 81 83 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 136B]+8 S8 A8])
        (reg:DI 132)) blake_ref.c:231 -1
     (nil))

(insn 83 82 84 (set (reg:DI 133)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 16 [0x10])) [0 MEM[(void *)&IV384]+16 S8 A128])) blake_ref.c:231 -1
     (nil))

(insn 84 83 85 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 136B]+16 S8 A8])
        (reg:DI 133)) blake_ref.c:231 -1
     (nil))

(insn 85 84 86 (set (reg:DI 134)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 24 [0x18])) [0 MEM[(void *)&IV384]+24 S8 A64])) blake_ref.c:231 -1
     (nil))

(insn 86 85 87 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 136B]+24 S8 A8])
        (reg:DI 134)) blake_ref.c:231 -1
     (nil))

(insn 87 86 88 (set (reg:DI 135)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 32 [0x20])) [0 MEM[(void *)&IV384]+32 S8 A256])) blake_ref.c:231 -1
     (nil))

(insn 88 87 89 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 32 [0x20])) [0 MEM[(void *)state_18(D) + 136B]+32 S8 A8])
        (reg:DI 135)) blake_ref.c:231 -1
     (nil))

(insn 89 88 90 (set (reg:DI 136)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 40 [0x28])) [0 MEM[(void *)&IV384]+40 S8 A64])) blake_ref.c:231 -1
     (nil))

(insn 90 89 91 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 40 [0x28])) [0 MEM[(void *)state_18(D) + 136B]+40 S8 A8])
        (reg:DI 136)) blake_ref.c:231 -1
     (nil))

(insn 91 90 92 (set (reg:DI 137)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 48 [0x30])) [0 MEM[(void *)&IV384]+48 S8 A128])) blake_ref.c:231 -1
     (nil))

(insn 92 91 93 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 48 [0x30])) [0 MEM[(void *)state_18(D) + 136B]+48 S8 A8])
        (reg:DI 137)) blake_ref.c:231 -1
     (nil))

(insn 93 92 94 (set (reg:DI 138)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 56 [0x38])) [0 MEM[(void *)&IV384]+56 S8 A64])) blake_ref.c:231 -1
     (nil))

(insn 94 93 0 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 56 [0x38])) [0 MEM[(void *)state_18(D) + 136B]+56 S8 A8])
        (reg:DI 138)) blake_ref.c:231 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; 

(code_label 97 96 98 76 "" [0 uses])

(note 98 97 0 NOTE_INSN_BASIC_BLOCK)

;; memcpy (_21, &IV512, 64);

(insn 99 98 100 (parallel [
            (set (reg:DI 139)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:233 -1
     (nil))

(insn 100 99 101 (set (reg/f:DI 140)
        (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)) blake_ref.c:233 -1
     (nil))

(insn 101 100 102 (set (reg:DI 141)
        (mem/u/c:DI (reg/f:DI 140) [0 MEM[(void *)&IV512]+0 S8 A256])) blake_ref.c:233 -1
     (nil))

(insn 102 101 103 (set (mem:DI (reg:DI 139) [0 MEM[(void *)state_18(D) + 136B]+0 S8 A8])
        (reg:DI 141)) blake_ref.c:233 -1
     (nil))

(insn 103 102 104 (set (reg:DI 142)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 8 [0x8])) [0 MEM[(void *)&IV512]+8 S8 A64])) blake_ref.c:233 -1
     (nil))

(insn 104 103 105 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 136B]+8 S8 A8])
        (reg:DI 142)) blake_ref.c:233 -1
     (nil))

(insn 105 104 106 (set (reg:DI 143)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 16 [0x10])) [0 MEM[(void *)&IV512]+16 S8 A128])) blake_ref.c:233 -1
     (nil))

(insn 106 105 107 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 136B]+16 S8 A8])
        (reg:DI 143)) blake_ref.c:233 -1
     (nil))

(insn 107 106 108 (set (reg:DI 144)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 24 [0x18])) [0 MEM[(void *)&IV512]+24 S8 A64])) blake_ref.c:233 -1
     (nil))

(insn 108 107 109 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 136B]+24 S8 A8])
        (reg:DI 144)) blake_ref.c:233 -1
     (nil))

(insn 109 108 110 (set (reg:DI 145)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 32 [0x20])) [0 MEM[(void *)&IV512]+32 S8 A256])) blake_ref.c:233 -1
     (nil))

(insn 110 109 111 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 32 [0x20])) [0 MEM[(void *)state_18(D) + 136B]+32 S8 A8])
        (reg:DI 145)) blake_ref.c:233 -1
     (nil))

(insn 111 110 112 (set (reg:DI 146)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 40 [0x28])) [0 MEM[(void *)&IV512]+40 S8 A64])) blake_ref.c:233 -1
     (nil))

(insn 112 111 113 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 40 [0x28])) [0 MEM[(void *)state_18(D) + 136B]+40 S8 A8])
        (reg:DI 146)) blake_ref.c:233 -1
     (nil))

(insn 113 112 114 (set (reg:DI 147)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 48 [0x30])) [0 MEM[(void *)&IV512]+48 S8 A128])) blake_ref.c:233 -1
     (nil))

(insn 114 113 115 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 48 [0x30])) [0 MEM[(void *)state_18(D) + 136B]+48 S8 A8])
        (reg:DI 147)) blake_ref.c:233 -1
     (nil))

(insn 115 114 116 (set (reg:DI 148)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 56 [0x38])) [0 MEM[(void *)&IV512]+56 S8 A64])) blake_ref.c:233 -1
     (nil))

(insn 116 115 0 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 56 [0x38])) [0 MEM[(void *)state_18(D) + 136B]+56 S8 A8])
        (reg:DI 148)) blake_ref.c:233 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; 

(code_label 117 116 118 77 "" [0 uses])

(note 118 117 0 NOTE_INSN_BASIC_BLOCK)

;; state_18(D)->t64[0] = 0;

(insn 119 118 0 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 200 [0xc8])) [3 state_18(D)->t64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:235 -1
     (nil))

;; state_18(D)->t64[1] = 0;

(insn 120 119 0 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 208 [0xd0])) [3 state_18(D)->t64+8 S8 A64])
        (const_int 0 [0])) blake_ref.c:236 -1
     (nil))

;; __builtin_memset (_14, 0, 64);

(insn 121 120 122 (parallel [
            (set (reg:DI 149 [ D.5936 ])
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 122 121 123 (set (reg/f:DI 150)
        (reg:DI 149 [ D.5936 ])) -1
     (nil))

(insn 123 122 124 (set (reg:SI 151)
        (const_int 64 [0x40])) -1
     (nil))

(insn 124 123 125 (set (reg:DI 152)
        (const_int 0 [0])) -1
     (nil))

(insn 125 124 126 (set (mem:DI (reg/f:DI 150) [0  S8 A8])
        (reg:DI 152)) -1
     (nil))

(insn 126 125 127 (set (reg:DI 153)
        (zero_extend:DI (reg:SI 151))) -1
     (nil))

(insn 127 126 128 (parallel [
            (set (reg:DI 154)
                (plus:DI (reg/f:DI 150)
                    (reg:DI 153)))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 128 127 129 (parallel [
            (set (reg/f:DI 155)
                (plus:DI (reg:DI 154)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 129 128 130 (set (mem:DI (plus:DI (reg/f:DI 155)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
        (reg:DI 152)) -1
     (nil))

(insn 130 129 131 (parallel [
            (set (reg/f:DI 156)
                (plus:DI (reg/f:DI 150)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 131 130 132 (parallel [
            (set (reg/f:DI 156)
                (and:DI (reg/f:DI 156)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 132 131 133 (parallel [
            (set (reg/f:DI 150)
                (minus:DI (reg/f:DI 150)
                    (reg/f:DI 156)))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 133 132 134 (parallel [
            (set (reg:SI 151)
                (plus:SI (reg:SI 151)
                    (subreg:SI (reg/f:DI 150) 0)))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 134 133 135 (parallel [
            (set (reg:SI 151)
                (and:SI (reg:SI 151)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 135 134 136 (parallel [
            (set (reg:SI 157)
                (lshiftrt:SI (reg:SI 151)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 136 135 137 (set (reg:DI 158)
        (zero_extend:DI (reg:SI 157))) -1
     (nil))

(insn 137 136 0 (parallel [
            (set (reg:DI 158)
                (const_int 0 [0]))
            (set (reg/f:DI 156)
                (plus:DI (ashift:DI (reg:DI 158)
                        (const_int 3 [0x3]))
                    (reg/f:DI 156)))
            (set (mem:BLK (reg/f:DI 156) [0  A64])
                (const_int 0 [0]))
            (use (reg:DI 152))
            (use (reg:DI 158))
        ]) -1
     (nil))

;; state_18(D)->salt64[0] = 0;

(insn 138 137 0 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 344 [0x158])) [3 state_18(D)->salt64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:241 -1
     (nil))

;; state_18(D)->salt64[1] = 0;

(insn 139 138 0 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 352 [0x160])) [3 state_18(D)->salt64+8 S8 A64])
        (const_int 0 [0])) blake_ref.c:242 -1
     (nil))

;; state_18(D)->salt64[2] = 0;

(insn 140 139 0 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 360 [0x168])) [3 state_18(D)->salt64+16 S8 A64])
        (const_int 0 [0])) blake_ref.c:243 -1
     (nil))

;; state_18(D)->salt64[3] = 0;

(insn 141 140 0 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 368 [0x170])) [3 state_18(D)->salt64+24 S8 A64])
        (const_int 0 [0])) blake_ref.c:244 -1
     (nil))

;; Generating RTL for gimple basic block 12

;; 

(code_label 142 141 143 74 "" [0 uses])

(note 143 142 0 NOTE_INSN_BASIC_BLOCK)

;; state_18(D)->hashbitlen = hashbitlen_10(D);

(insn 144 143 0 (set (mem:SI (reg/v/f:DI 100 [ state ]) [2 state_18(D)->hashbitlen+0 S4 A64])
        (reg/v:SI 101 [ hashbitlen ])) blake_ref.c:251 -1
     (nil))

;; state_18(D)->datalen = 0;

(insn 145 144 0 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 4 [0x4])) [2 state_18(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:252 -1
     (nil))

;; state_18(D)->init = 1;

(insn 146 145 0 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 8 [0x8])) [2 state_18(D)->init+0 S4 A64])
        (const_int 1 [0x1])) blake_ref.c:253 -1
     (nil))

;; state_18(D)->nullt = 0;

(insn 147 146 0 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 12 [0xc])) [2 state_18(D)->nullt+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:254 -1
     (nil))

;; Generating RTL for gimple basic block 13

;; 

(code_label 148 147 149 75 "" [0 uses])

(note 149 148 0 NOTE_INSN_BASIC_BLOCK)

;; return _3;

(insn 150 149 151 (set (reg:SI 99 [ <retval> ])
        (reg:SI 88 [ D.5935 ])) -1
     (nil))

(jump_insn 151 150 152 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 152 151 0)
Edge 7->13 redirected to 16


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 151.
Merging block 16 into block 15...
Merged blocks 15 and 16.
Merged 15 and 16 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (reg/v/f:DI 100 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:203 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 81 virtual-incoming-args) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 101 [ hashbitlen ])
        (reg:SI 1 dx [ hashbitlen ])) blake_ref.c:203 -1
     (expr_list:REG_EQUIV (mem/c:SI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 8 [0x8])) [2 hashbitlen+0 S4 A64])
        (nil)))
(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 4 10 2 (set (reg:SI 97 [ D.5934 ])
        (reg/v:SI 101 [ hashbitlen ])) blake_ref.c:207 -1
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 102 [ D.5934 ])
                (plus:SI (reg:SI 97 [ D.5934 ])
                    (const_int -224 [0xffffffffffffff20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 -1
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg:SI 103 [ D.5934 ])
                (and:SI (reg:SI 102 [ D.5934 ])
                    (const_int -33 [0xffffffffffffffdf])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 -1
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 103 [ D.5934 ])
            (const_int 0 [0]))) blake_ref.c:207 -1
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) blake_ref.c:207 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 67)
;;  succ:       4 [50.0%]  (FALLTHRU)
;;              8 [50.0%] 

;; basic block 4, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 101 [ hashbitlen ])
            (const_int 224 [0xe0]))) blake_ref.c:210 -1
     (nil))
(jump_insn 16 15 17 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) blake_ref.c:210 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 30)
;;  succ:       5 [28.0%]  (FALLTHRU)
;;              6 [72.0%] 

;; basic block 5, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [28.0%]  (FALLTHRU)
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 5 (parallel [
            (set (reg:DI 104)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:211 -1
     (nil))
(insn 19 18 20 5 (set (reg/f:DI 105)
        (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)) blake_ref.c:211 -1
     (nil))
(insn 20 19 21 5 (set (reg:DI 106)
        (mem/u/c:DI (reg/f:DI 105) [0 MEM[(void *)&IV224]+0 S8 A256])) blake_ref.c:211 -1
     (nil))
(insn 21 20 22 5 (set (mem:DI (reg:DI 104) [0 MEM[(void *)state_18(D) + 16B]+0 S8 A8])
        (reg:DI 106)) blake_ref.c:211 -1
     (nil))
(insn 22 21 23 5 (set (reg:DI 107)
        (mem/u/c:DI (plus:DI (reg/f:DI 105)
                (const_int 8 [0x8])) [0 MEM[(void *)&IV224]+8 S8 A64])) blake_ref.c:211 -1
     (nil))
(insn 23 22 24 5 (set (mem:DI (plus:DI (reg:DI 104)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 16B]+8 S8 A8])
        (reg:DI 107)) blake_ref.c:211 -1
     (nil))
(insn 24 23 25 5 (set (reg:DI 108)
        (mem/u/c:DI (plus:DI (reg/f:DI 105)
                (const_int 16 [0x10])) [0 MEM[(void *)&IV224]+16 S8 A128])) blake_ref.c:211 -1
     (nil))
(insn 25 24 26 5 (set (mem:DI (plus:DI (reg:DI 104)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+16 S8 A8])
        (reg:DI 108)) blake_ref.c:211 -1
     (nil))
(insn 26 25 27 5 (set (reg:DI 109)
        (mem/u/c:DI (plus:DI (reg/f:DI 105)
                (const_int 24 [0x18])) [0 MEM[(void *)&IV224]+24 S8 A64])) blake_ref.c:211 -1
     (nil))
(insn 27 26 28 5 (set (mem:DI (plus:DI (reg:DI 104)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 16B]+24 S8 A8])
        (reg:DI 109)) blake_ref.c:211 -1
     (nil))
(jump_insn 28 27 29 5 (set (pc)
        (label_ref 42)) -1
     (nil)
 -> 42)
;;  succ:       7 [100.0%] 

(barrier 29 28 30)
;; basic block 6, loop depth 0, count 0, freq 111, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [72.0%] 
(code_label 30 29 31 6 72 "" [1 uses])
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 6 (parallel [
            (set (reg:DI 110)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:213 -1
     (nil))
(insn 33 32 34 6 (set (reg/f:DI 111)
        (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)) blake_ref.c:213 -1
     (nil))
(insn 34 33 35 6 (set (reg:DI 112)
        (mem/u/c:DI (reg/f:DI 111) [0 MEM[(void *)&IV256]+0 S8 A256])) blake_ref.c:213 -1
     (nil))
(insn 35 34 36 6 (set (mem:DI (reg:DI 110) [0 MEM[(void *)state_18(D) + 16B]+0 S8 A8])
        (reg:DI 112)) blake_ref.c:213 -1
     (nil))
(insn 36 35 37 6 (set (reg:DI 113)
        (mem/u/c:DI (plus:DI (reg/f:DI 111)
                (const_int 8 [0x8])) [0 MEM[(void *)&IV256]+8 S8 A64])) blake_ref.c:213 -1
     (nil))
(insn 37 36 38 6 (set (mem:DI (plus:DI (reg:DI 110)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 16B]+8 S8 A8])
        (reg:DI 113)) blake_ref.c:213 -1
     (nil))
(insn 38 37 39 6 (set (reg:DI 114)
        (mem/u/c:DI (plus:DI (reg/f:DI 111)
                (const_int 16 [0x10])) [0 MEM[(void *)&IV256]+16 S8 A128])) blake_ref.c:213 -1
     (nil))
(insn 39 38 40 6 (set (mem:DI (plus:DI (reg:DI 110)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+16 S8 A8])
        (reg:DI 114)) blake_ref.c:213 -1
     (nil))
(insn 40 39 41 6 (set (reg:DI 115)
        (mem/u/c:DI (plus:DI (reg/f:DI 111)
                (const_int 24 [0x18])) [0 MEM[(void *)&IV256]+24 S8 A64])) blake_ref.c:213 -1
     (nil))
(insn 41 40 42 6 (set (mem:DI (plus:DI (reg:DI 110)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 16B]+24 S8 A8])
        (reg:DI 115)) blake_ref.c:213 -1
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 [100.0%] 
;;              6 [100.0%]  (FALLTHRU)
(code_label 42 41 43 7 73 "" [1 uses])
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 48 [0x30])) [2 state_18(D)->t32+0 S4 A64])
        (const_int 0 [0])) blake_ref.c:215 -1
     (nil))
(insn 45 44 46 7 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 52 [0x34])) [2 state_18(D)->t32+4 S4 A32])
        (const_int 0 [0])) blake_ref.c:216 -1
     (nil))
(insn 46 45 47 7 (parallel [
            (set (reg:DI 116 [ D.5936 ])
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 47 46 48 7 (set (reg/f:DI 117)
        (reg:DI 116 [ D.5936 ])) -1
     (nil))
(insn 48 47 49 7 (set (reg:SI 118)
        (const_int 64 [0x40])) -1
     (nil))
(insn 49 48 50 7 (set (reg:DI 119)
        (const_int 0 [0])) -1
     (nil))
(insn 50 49 51 7 (set (mem:DI (reg/f:DI 117) [0  S8 A8])
        (reg:DI 119)) -1
     (nil))
(insn 51 50 52 7 (set (reg:DI 120)
        (zero_extend:DI (reg:SI 118))) -1
     (nil))
(insn 52 51 53 7 (parallel [
            (set (reg:DI 121)
                (plus:DI (reg/f:DI 117)
                    (reg:DI 120)))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 53 52 54 7 (parallel [
            (set (reg/f:DI 122)
                (plus:DI (reg:DI 121)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 54 53 55 7 (set (mem:DI (plus:DI (reg/f:DI 122)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
        (reg:DI 119)) -1
     (nil))
(insn 55 54 56 7 (parallel [
            (set (reg/f:DI 123)
                (plus:DI (reg/f:DI 117)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 56 55 57 7 (parallel [
            (set (reg/f:DI 123)
                (and:DI (reg/f:DI 123)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 57 56 58 7 (parallel [
            (set (reg/f:DI 117)
                (minus:DI (reg/f:DI 117)
                    (reg/f:DI 123)))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 58 57 59 7 (parallel [
            (set (reg:SI 118)
                (plus:SI (reg:SI 118)
                    (subreg:SI (reg/f:DI 117) 0)))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 59 58 60 7 (parallel [
            (set (reg:SI 118)
                (and:SI (reg:SI 118)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 60 59 61 7 (parallel [
            (set (reg:SI 124)
                (lshiftrt:SI (reg:SI 118)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 61 60 62 7 (set (reg:DI 125)
        (zero_extend:DI (reg:SI 124))) -1
     (nil))
(insn 62 61 63 7 (parallel [
            (set (reg:DI 125)
                (const_int 0 [0]))
            (set (reg/f:DI 123)
                (plus:DI (ashift:DI (reg:DI 125)
                        (const_int 3 [0x3]))
                    (reg/f:DI 123)))
            (set (mem:BLK (reg/f:DI 123) [0  A64])
                (const_int 0 [0]))
            (use (reg:DI 119))
            (use (reg:DI 125))
        ]) -1
     (nil))
(insn 63 62 64 7 (set (reg:V4SI 126)
        (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])) blake_ref.c:221 -1
     (nil))
(insn 64 63 65 7 (set (mem:V16QI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 120 [0x78])) [2 MEM[(unsigned int *)state_18(D) + 120B]+0 S16 A32])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 126) 0)
            ] UNSPEC_STOREU)) blake_ref.c:221 -1
     (nil))
(jump_insn 65 64 66 7 (set (pc)
        (label_ref 142)) -1
     (nil)
 -> 142)
;;  succ:       13 [100.0%] 

(barrier 66 65 67)
;; basic block 8, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
(code_label 67 66 68 8 71 "" [1 uses])
(note 68 67 69 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 8 (parallel [
            (set (reg:SI 127 [ D.5934 ])
                (plus:SI (reg:SI 97 [ D.5934 ])
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 -1
     (nil))
(insn 70 69 71 8 (parallel [
            (set (reg:SI 128 [ D.5934 ])
                (and:SI (reg:SI 127 [ D.5934 ])
                    (const_int -129 [0xffffffffffffff7f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 -1
     (nil))
(insn 71 70 72 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 128 [ D.5934 ])
            (const_int 0 [0]))) blake_ref.c:227 -1
     (nil))
(jump_insn 72 71 73 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 160)
            (pc))) blake_ref.c:227 612 {*jcc_1}
     (int_list:REG_BR_PROB 6700 (nil))
 -> 160)
;;  succ:       9 [33.0%]  (FALLTHRU)
;;              14 [67.0%] 

;; basic block 9, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [33.0%]  (FALLTHRU)
(note 73 72 74 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 101 [ hashbitlen ])
            (const_int 384 [0x180]))) blake_ref.c:230 -1
     (nil))
(jump_insn 75 74 76 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 97)
            (pc))) blake_ref.c:230 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 97)
;;  succ:       10 [28.0%]  (FALLTHRU)
;;              11 [72.0%] 

;; basic block 10, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 [28.0%]  (FALLTHRU)
(note 76 75 77 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 10 (parallel [
            (set (reg:DI 129)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:231 -1
     (nil))
(insn 78 77 79 10 (set (reg/f:DI 130)
        (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)) blake_ref.c:231 -1
     (nil))
(insn 79 78 80 10 (set (reg:DI 131)
        (mem/u/c:DI (reg/f:DI 130) [0 MEM[(void *)&IV384]+0 S8 A256])) blake_ref.c:231 -1
     (nil))
(insn 80 79 81 10 (set (mem:DI (reg:DI 129) [0 MEM[(void *)state_18(D) + 136B]+0 S8 A8])
        (reg:DI 131)) blake_ref.c:231 -1
     (nil))
(insn 81 80 82 10 (set (reg:DI 132)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 8 [0x8])) [0 MEM[(void *)&IV384]+8 S8 A64])) blake_ref.c:231 -1
     (nil))
(insn 82 81 83 10 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 136B]+8 S8 A8])
        (reg:DI 132)) blake_ref.c:231 -1
     (nil))
(insn 83 82 84 10 (set (reg:DI 133)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 16 [0x10])) [0 MEM[(void *)&IV384]+16 S8 A128])) blake_ref.c:231 -1
     (nil))
(insn 84 83 85 10 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 136B]+16 S8 A8])
        (reg:DI 133)) blake_ref.c:231 -1
     (nil))
(insn 85 84 86 10 (set (reg:DI 134)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 24 [0x18])) [0 MEM[(void *)&IV384]+24 S8 A64])) blake_ref.c:231 -1
     (nil))
(insn 86 85 87 10 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 136B]+24 S8 A8])
        (reg:DI 134)) blake_ref.c:231 -1
     (nil))
(insn 87 86 88 10 (set (reg:DI 135)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 32 [0x20])) [0 MEM[(void *)&IV384]+32 S8 A256])) blake_ref.c:231 -1
     (nil))
(insn 88 87 89 10 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 32 [0x20])) [0 MEM[(void *)state_18(D) + 136B]+32 S8 A8])
        (reg:DI 135)) blake_ref.c:231 -1
     (nil))
(insn 89 88 90 10 (set (reg:DI 136)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 40 [0x28])) [0 MEM[(void *)&IV384]+40 S8 A64])) blake_ref.c:231 -1
     (nil))
(insn 90 89 91 10 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 40 [0x28])) [0 MEM[(void *)state_18(D) + 136B]+40 S8 A8])
        (reg:DI 136)) blake_ref.c:231 -1
     (nil))
(insn 91 90 92 10 (set (reg:DI 137)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 48 [0x30])) [0 MEM[(void *)&IV384]+48 S8 A128])) blake_ref.c:231 -1
     (nil))
(insn 92 91 93 10 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 48 [0x30])) [0 MEM[(void *)state_18(D) + 136B]+48 S8 A8])
        (reg:DI 137)) blake_ref.c:231 -1
     (nil))
(insn 93 92 94 10 (set (reg:DI 138)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 56 [0x38])) [0 MEM[(void *)&IV384]+56 S8 A64])) blake_ref.c:231 -1
     (nil))
(insn 94 93 95 10 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 56 [0x38])) [0 MEM[(void *)state_18(D) + 136B]+56 S8 A8])
        (reg:DI 138)) blake_ref.c:231 -1
     (nil))
(jump_insn 95 94 96 10 (set (pc)
        (label_ref 117)) -1
     (nil)
 -> 117)
;;  succ:       12 [100.0%] 

(barrier 96 95 97)
;; basic block 11, loop depth 0, count 0, freq 37, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 [72.0%] 
(code_label 97 96 98 11 76 "" [1 uses])
(note 98 97 99 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 11 (parallel [
            (set (reg:DI 139)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:233 -1
     (nil))
(insn 100 99 101 11 (set (reg/f:DI 140)
        (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)) blake_ref.c:233 -1
     (nil))
(insn 101 100 102 11 (set (reg:DI 141)
        (mem/u/c:DI (reg/f:DI 140) [0 MEM[(void *)&IV512]+0 S8 A256])) blake_ref.c:233 -1
     (nil))
(insn 102 101 103 11 (set (mem:DI (reg:DI 139) [0 MEM[(void *)state_18(D) + 136B]+0 S8 A8])
        (reg:DI 141)) blake_ref.c:233 -1
     (nil))
(insn 103 102 104 11 (set (reg:DI 142)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 8 [0x8])) [0 MEM[(void *)&IV512]+8 S8 A64])) blake_ref.c:233 -1
     (nil))
(insn 104 103 105 11 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 136B]+8 S8 A8])
        (reg:DI 142)) blake_ref.c:233 -1
     (nil))
(insn 105 104 106 11 (set (reg:DI 143)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 16 [0x10])) [0 MEM[(void *)&IV512]+16 S8 A128])) blake_ref.c:233 -1
     (nil))
(insn 106 105 107 11 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 136B]+16 S8 A8])
        (reg:DI 143)) blake_ref.c:233 -1
     (nil))
(insn 107 106 108 11 (set (reg:DI 144)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 24 [0x18])) [0 MEM[(void *)&IV512]+24 S8 A64])) blake_ref.c:233 -1
     (nil))
(insn 108 107 109 11 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 136B]+24 S8 A8])
        (reg:DI 144)) blake_ref.c:233 -1
     (nil))
(insn 109 108 110 11 (set (reg:DI 145)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 32 [0x20])) [0 MEM[(void *)&IV512]+32 S8 A256])) blake_ref.c:233 -1
     (nil))
(insn 110 109 111 11 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 32 [0x20])) [0 MEM[(void *)state_18(D) + 136B]+32 S8 A8])
        (reg:DI 145)) blake_ref.c:233 -1
     (nil))
(insn 111 110 112 11 (set (reg:DI 146)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 40 [0x28])) [0 MEM[(void *)&IV512]+40 S8 A64])) blake_ref.c:233 -1
     (nil))
(insn 112 111 113 11 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 40 [0x28])) [0 MEM[(void *)state_18(D) + 136B]+40 S8 A8])
        (reg:DI 146)) blake_ref.c:233 -1
     (nil))
(insn 113 112 114 11 (set (reg:DI 147)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 48 [0x30])) [0 MEM[(void *)&IV512]+48 S8 A128])) blake_ref.c:233 -1
     (nil))
(insn 114 113 115 11 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 48 [0x30])) [0 MEM[(void *)state_18(D) + 136B]+48 S8 A8])
        (reg:DI 147)) blake_ref.c:233 -1
     (nil))
(insn 115 114 116 11 (set (reg:DI 148)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 56 [0x38])) [0 MEM[(void *)&IV512]+56 S8 A64])) blake_ref.c:233 -1
     (nil))
(insn 116 115 117 11 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 56 [0x38])) [0 MEM[(void *)state_18(D) + 136B]+56 S8 A8])
        (reg:DI 148)) blake_ref.c:233 -1
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)

;; basic block 12, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       10 [100.0%] 
;;              11 [100.0%]  (FALLTHRU)
(code_label 117 116 118 12 77 "" [1 uses])
(note 118 117 119 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 12 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 200 [0xc8])) [3 state_18(D)->t64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:235 -1
     (nil))
(insn 120 119 121 12 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 208 [0xd0])) [3 state_18(D)->t64+8 S8 A64])
        (const_int 0 [0])) blake_ref.c:236 -1
     (nil))
(insn 121 120 122 12 (parallel [
            (set (reg:DI 149 [ D.5936 ])
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 122 121 123 12 (set (reg/f:DI 150)
        (reg:DI 149 [ D.5936 ])) -1
     (nil))
(insn 123 122 124 12 (set (reg:SI 151)
        (const_int 64 [0x40])) -1
     (nil))
(insn 124 123 125 12 (set (reg:DI 152)
        (const_int 0 [0])) -1
     (nil))
(insn 125 124 126 12 (set (mem:DI (reg/f:DI 150) [0  S8 A8])
        (reg:DI 152)) -1
     (nil))
(insn 126 125 127 12 (set (reg:DI 153)
        (zero_extend:DI (reg:SI 151))) -1
     (nil))
(insn 127 126 128 12 (parallel [
            (set (reg:DI 154)
                (plus:DI (reg/f:DI 150)
                    (reg:DI 153)))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 128 127 129 12 (parallel [
            (set (reg/f:DI 155)
                (plus:DI (reg:DI 154)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 129 128 130 12 (set (mem:DI (plus:DI (reg/f:DI 155)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
        (reg:DI 152)) -1
     (nil))
(insn 130 129 131 12 (parallel [
            (set (reg/f:DI 156)
                (plus:DI (reg/f:DI 150)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 131 130 132 12 (parallel [
            (set (reg/f:DI 156)
                (and:DI (reg/f:DI 156)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 132 131 133 12 (parallel [
            (set (reg/f:DI 150)
                (minus:DI (reg/f:DI 150)
                    (reg/f:DI 156)))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 133 132 134 12 (parallel [
            (set (reg:SI 151)
                (plus:SI (reg:SI 151)
                    (subreg:SI (reg/f:DI 150) 0)))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 134 133 135 12 (parallel [
            (set (reg:SI 151)
                (and:SI (reg:SI 151)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 135 134 136 12 (parallel [
            (set (reg:SI 157)
                (lshiftrt:SI (reg:SI 151)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 136 135 137 12 (set (reg:DI 158)
        (zero_extend:DI (reg:SI 157))) -1
     (nil))
(insn 137 136 138 12 (parallel [
            (set (reg:DI 158)
                (const_int 0 [0]))
            (set (reg/f:DI 156)
                (plus:DI (ashift:DI (reg:DI 158)
                        (const_int 3 [0x3]))
                    (reg/f:DI 156)))
            (set (mem:BLK (reg/f:DI 156) [0  A64])
                (const_int 0 [0]))
            (use (reg:DI 152))
            (use (reg:DI 158))
        ]) -1
     (nil))
(insn 138 137 139 12 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 344 [0x158])) [3 state_18(D)->salt64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:241 -1
     (nil))
(insn 139 138 140 12 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 352 [0x160])) [3 state_18(D)->salt64+8 S8 A64])
        (const_int 0 [0])) blake_ref.c:242 -1
     (nil))
(insn 140 139 141 12 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 360 [0x168])) [3 state_18(D)->salt64+16 S8 A64])
        (const_int 0 [0])) blake_ref.c:243 -1
     (nil))
(insn 141 140 142 12 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 368 [0x170])) [3 state_18(D)->salt64+24 S8 A64])
        (const_int 0 [0])) blake_ref.c:244 -1
     (nil))
;;  succ:       13 [100.0%]  (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 205, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [100.0%] 
;;              12 [100.0%]  (FALLTHRU)
(code_label 142 141 143 13 74 "" [1 uses])
(note 143 142 144 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 13 (set (mem:SI (reg/v/f:DI 100 [ state ]) [2 state_18(D)->hashbitlen+0 S4 A64])
        (reg/v:SI 101 [ hashbitlen ])) blake_ref.c:251 -1
     (nil))
(insn 145 144 146 13 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 4 [0x4])) [2 state_18(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:252 -1
     (nil))
(insn 146 145 147 13 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 8 [0x8])) [2 state_18(D)->init+0 S4 A64])
        (const_int 1 [0x1])) blake_ref.c:253 -1
     (nil))
(insn 147 146 6 13 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 12 [0xc])) [2 state_18(D)->nullt+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:254 -1
     (nil))
(insn 6 147 157 13 (set (reg:SI 88 [ D.5935 ])
        (const_int 0 [0])) blake_ref.c:256 -1
     (nil))
(jump_insn 157 6 158 13 (set (pc)
        (label_ref 148)) blake_ref.c:256 -1
     (nil)
 -> 148)
;;  succ:       15 [100.0%] 

(barrier 158 157 160)
;; basic block 14, loop depth 0, count 0, freq 103, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 [67.0%] 
(code_label 160 158 159 14 78 "" [1 uses])
(note 159 160 5 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 5 159 148 14 (set (reg:SI 88 [ D.5935 ])
        (const_int 2 [0x2])) blake_ref.c:249 -1
     (nil))
;;  succ:       15 [100.0%]  (FALLTHRU)

;; basic block 15, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 14, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       14 [100.0%]  (FALLTHRU)
;;              13 [100.0%] 
(code_label 148 5 149 15 75 "" [1 uses])
(note 149 148 150 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 154 15 (set (reg:SI 99 [ <retval> ])
        (reg:SI 88 [ D.5935 ])) -1
     (nil))
(insn 154 150 155 15 (set (reg/i:SI 0 ax)
        (reg:SI 99 [ <retval> ])) blake_ref.c:257 -1
     (nil))
(insn 155 154 0 15 (use (reg/i:SI 0 ax)) blake_ref.c:257 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function AddSalt (AddSalt, funcdef_no=14, decl_uid=3185, cgraph_uid=14, symbol_order=22)

AddSalt (struct hashState * state, const BitSequence * salt)
{
  HashReturn _1;
  int _5;
  int _6;
  unsigned int _21;
  unsigned int _36;
  unsigned int _51;
  unsigned int _66;
  long long unsigned int _99;
  long long unsigned int _132;
  long long unsigned int _165;
  long long unsigned int _198;
  unsigned int load_dst_200;
  unsigned int load_dst_203;
  unsigned int load_dst_205;
  unsigned int load_dst_206;
  long unsigned int load_dst_208;
  unsigned short _211;
  long unsigned int load_dst_214;
  unsigned short _217;
  long unsigned int load_dst_220;
  unsigned short _223;
  long unsigned int load_dst_225;
  unsigned short _229;
  unsigned short _230;
  unsigned short _231;
  unsigned short _232;
  unsigned short _233;
  unsigned short _234;
  unsigned short _235;
  unsigned short _236;
  unsigned short _237;
  unsigned short _238;
  unsigned short _239;
  unsigned short _240;
  unsigned short _241;
  unsigned short _242;
  unsigned short _243;
  unsigned short _244;
  unsigned short _245;
  unsigned short _246;
  unsigned short _247;
  unsigned short _248;
  unsigned short _249;
  unsigned short _250;
  unsigned short _251;
  unsigned short _252;
  unsigned short _253;
  unsigned short _254;
  unsigned short _255;
  unsigned short _256;
  unsigned short _257;
  unsigned short _258;
  unsigned short _259;
  unsigned short _260;
  unsigned short _261;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _5 = state_4(D)->init;
  if (_5 != 1)
    goto <bb 6>;
  else
    goto <bb 3>;
;;    succ:       6
;;                3

;;   basic block 3, loop depth 0
;;    pred:       2
  _6 = state_4(D)->hashbitlen;
  if (_6 <= 383)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  load_dst_206 = MEM[(const BitSequence *)salt_7(D)];
  _21 = __builtin_bswap32 (load_dst_206);
  state_4(D)->salt32[0] = _21;
  load_dst_205 = MEM[(const BitSequence *)salt_7(D) + 4B];
  _36 = __builtin_bswap32 (load_dst_205);
  state_4(D)->salt32[1] = _36;
  load_dst_200 = MEM[(const BitSequence *)salt_7(D) + 8B];
  _51 = __builtin_bswap32 (load_dst_200);
  state_4(D)->salt32[2] = _51;
  load_dst_203 = MEM[(const BitSequence *)salt_7(D) + 12B];
  _66 = __builtin_bswap32 (load_dst_203);
  state_4(D)->salt32[3] = _66;
  goto <bb 6>;
;;    succ:       6

;;   basic block 5, loop depth 0
;;    pred:       3
  load_dst_225 = MEM[(const BitSequence *)salt_7(D)];
  _99 = __builtin_bswap64 (load_dst_225);
  state_4(D)->salt64[0] = _99;
  load_dst_220 = MEM[(const BitSequence *)salt_7(D) + 8B];
  _132 = __builtin_bswap64 (load_dst_220);
  state_4(D)->salt64[1] = _132;
  load_dst_214 = MEM[(const BitSequence *)salt_7(D) + 16B];
  _165 = __builtin_bswap64 (load_dst_214);
  state_4(D)->salt64[2] = _165;
  load_dst_208 = MEM[(const BitSequence *)salt_7(D) + 24B];
  _198 = __builtin_bswap64 (load_dst_208);
  state_4(D)->salt64[3] = _198;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       2
;;                5
;;                4
  # _1 = PHI <1(2), 0(5), 0(4)>
  return _1;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 4 (state_4(D) - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (salt_7(D) - 7 )
Partition 21 (_21 - 21 )
Partition 36 (_36 - 36 )
Partition 51 (_51 - 51 )
Partition 66 (_66 - 66 )
Partition 99 (_99 - 99 )
Partition 132 (_132 - 132 )
Partition 165 (_165 - 165 )
Partition 198 (_198 - 198 )
Partition 200 (load_dst_200 - 200 )
Partition 203 (load_dst_203 - 203 )
Partition 205 (load_dst_205 - 205 )
Partition 206 (load_dst_206 - 206 )
Partition 208 (load_dst_208 - 208 )
Partition 211 (_211 - 211 )
Partition 214 (load_dst_214 - 214 )
Partition 217 (_217 - 217 )
Partition 220 (load_dst_220 - 220 )
Partition 223 (_223 - 223 )
Partition 225 (load_dst_225 - 225 )
Partition 229 (_229 - 229 )
Partition 230 (_230 - 230 )
Partition 231 (_231 - 231 )
Partition 232 (_232 - 232 )
Partition 233 (_233 - 233 )
Partition 234 (_234 - 234 )
Partition 235 (_235 - 235 )
Partition 236 (_236 - 236 )
Partition 237 (_237 - 237 )
Partition 238 (_238 - 238 )
Partition 239 (_239 - 239 )
Partition 240 (_240 - 240 )
Partition 241 (_241 - 241 )
Partition 242 (_242 - 242 )
Partition 243 (_243 - 243 )
Partition 244 (_244 - 244 )
Partition 245 (_245 - 245 )
Partition 246 (_246 - 246 )
Partition 247 (_247 - 247 )
Partition 248 (_248 - 248 )
Partition 249 (_249 - 249 )
Partition 250 (_250 - 250 )
Partition 251 (_251 - 251 )
Partition 252 (_252 - 252 )
Partition 253 (_253 - 253 )
Partition 254 (_254 - 254 )
Partition 255 (_255 - 255 )
Partition 256 (_256 - 256 )
Partition 257 (_257 - 257 )
Partition 258 (_258 - 258 )
Partition 259 (_259 - 259 )
Partition 260 (_260 - 260 )
Partition 261 (_261 - 261 )


Partition map 

Partition 0 (state_4(D) - 4 )
Partition 1 (salt_7(D) - 7 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (state_4(D) - 4 )
Partition 1 (salt_7(D) - 7 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (state_4(D) - 4 )
Partition 2 (_5 - 5 )
Partition 3 (_6 - 6 )
Partition 4 (salt_7(D) - 7 )
Partition 5 (_21 - 21 )
Partition 6 (_36 - 36 )
Partition 7 (_51 - 51 )
Partition 8 (_66 - 66 )
Partition 9 (_99 - 99 )
Partition 10 (_132 - 132 )
Partition 11 (_165 - 165 )
Partition 12 (_198 - 198 )
Partition 13 (load_dst_200 - 200 )
Partition 14 (load_dst_203 - 203 )
Partition 15 (load_dst_205 - 205 )
Partition 16 (load_dst_206 - 206 )
Partition 17 (load_dst_208 - 208 )
Partition 18 (_211 - 211 )
Partition 19 (load_dst_214 - 214 )
Partition 20 (_217 - 217 )
Partition 21 (load_dst_220 - 220 )
Partition 22 (_223 - 223 )
Partition 23 (load_dst_225 - 225 )
Partition 24 (_229 - 229 )
Partition 25 (_230 - 230 )
Partition 26 (_231 - 231 )
Partition 27 (_232 - 232 )
Partition 28 (_233 - 233 )
Partition 29 (_234 - 234 )
Partition 30 (_235 - 235 )
Partition 31 (_236 - 236 )
Partition 32 (_237 - 237 )
Partition 33 (_238 - 238 )
Partition 34 (_239 - 239 )
Partition 35 (_240 - 240 )
Partition 36 (_241 - 241 )
Partition 37 (_242 - 242 )
Partition 38 (_243 - 243 )
Partition 39 (_244 - 244 )
Partition 40 (_245 - 245 )
Partition 41 (_246 - 246 )
Partition 42 (_247 - 247 )
Partition 43 (_248 - 248 )
Partition 44 (_249 - 249 )
Partition 45 (_250 - 250 )
Partition 46 (_251 - 251 )
Partition 47 (_252 - 252 )
Partition 48 (_253 - 253 )
Partition 49 (_254 - 254 )
Partition 50 (_255 - 255 )
Partition 51 (_256 - 256 )
Partition 52 (_257 - 257 )
Partition 53 (_258 - 258 )
Partition 54 (_259 - 259 )
Partition 55 (_260 - 260 )
Partition 56 (_261 - 261 )


Replacing Expressions
_5 replace with --> _5 = state_4(D)->init;

_6 replace with --> _6 = state_4(D)->hashbitlen;

load_dst_200 replace with --> load_dst_200 = MEM[(const BitSequence *)salt_7(D) + 8B];

load_dst_203 replace with --> load_dst_203 = MEM[(const BitSequence *)salt_7(D) + 12B];

load_dst_205 replace with --> load_dst_205 = MEM[(const BitSequence *)salt_7(D) + 4B];

load_dst_206 replace with --> load_dst_206 = MEM[(const BitSequence *)salt_7(D)];

load_dst_208 replace with --> load_dst_208 = MEM[(const BitSequence *)salt_7(D) + 24B];

load_dst_214 replace with --> load_dst_214 = MEM[(const BitSequence *)salt_7(D) + 16B];

load_dst_220 replace with --> load_dst_220 = MEM[(const BitSequence *)salt_7(D) + 8B];

load_dst_225 replace with --> load_dst_225 = MEM[(const BitSequence *)salt_7(D)];


AddSalt (struct hashState * state, const BitSequence * salt)
{
  HashReturn _1;
  int _5;
  int _6;
  unsigned int _21;
  unsigned int _36;
  unsigned int _51;
  unsigned int _66;
  long long unsigned int _99;
  long long unsigned int _132;
  long long unsigned int _165;
  long long unsigned int _198;
  unsigned int load_dst_200;
  unsigned int load_dst_203;
  unsigned int load_dst_205;
  unsigned int load_dst_206;
  long unsigned int load_dst_208;
  unsigned short _211;
  long unsigned int load_dst_214;
  unsigned short _217;
  long unsigned int load_dst_220;
  unsigned short _223;
  long unsigned int load_dst_225;
  unsigned short _229;
  unsigned short _230;
  unsigned short _231;
  unsigned short _232;
  unsigned short _233;
  unsigned short _234;
  unsigned short _235;
  unsigned short _236;
  unsigned short _237;
  unsigned short _238;
  unsigned short _239;
  unsigned short _240;
  unsigned short _241;
  unsigned short _242;
  unsigned short _243;
  unsigned short _244;
  unsigned short _245;
  unsigned short _246;
  unsigned short _247;
  unsigned short _248;
  unsigned short _249;
  unsigned short _250;
  unsigned short _251;
  unsigned short _252;
  unsigned short _253;
  unsigned short _254;
  unsigned short _255;
  unsigned short _256;
  unsigned short _257;
  unsigned short _258;
  unsigned short _259;
  unsigned short _260;
  unsigned short _261;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _5 = state_4(D)->init;
  if (_5 != 1)
    goto <bb 6>;
  else
    goto <bb 3>;
;;    succ:       6
;;                3

;;   basic block 3, loop depth 0
;;    pred:       2
  _6 = state_4(D)->hashbitlen;
  if (_6 <= 383)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  load_dst_206 = MEM[(const BitSequence *)salt_7(D)];
  _21 = __builtin_bswap32 (load_dst_206);
  state_4(D)->salt32[0] = _21;
  load_dst_205 = MEM[(const BitSequence *)salt_7(D) + 4B];
  _36 = __builtin_bswap32 (load_dst_205);
  state_4(D)->salt32[1] = _36;
  load_dst_200 = MEM[(const BitSequence *)salt_7(D) + 8B];
  _51 = __builtin_bswap32 (load_dst_200);
  state_4(D)->salt32[2] = _51;
  load_dst_203 = MEM[(const BitSequence *)salt_7(D) + 12B];
  _66 = __builtin_bswap32 (load_dst_203);
  state_4(D)->salt32[3] = _66;
  goto <bb 6>;
;;    succ:       6

;;   basic block 5, loop depth 0
;;    pred:       3
  load_dst_225 = MEM[(const BitSequence *)salt_7(D)];
  _99 = __builtin_bswap64 (load_dst_225);
  state_4(D)->salt64[0] = _99;
  load_dst_220 = MEM[(const BitSequence *)salt_7(D) + 8B];
  _132 = __builtin_bswap64 (load_dst_220);
  state_4(D)->salt64[1] = _132;
  load_dst_214 = MEM[(const BitSequence *)salt_7(D) + 16B];
  _165 = __builtin_bswap64 (load_dst_214);
  state_4(D)->salt64[2] = _165;
  load_dst_208 = MEM[(const BitSequence *)salt_7(D) + 24B];
  _198 = __builtin_bswap64 (load_dst_208);
  state_4(D)->salt64[3] = _198;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       2
;;                5
;;                4
  # _1 = PHI <1(2), 0(5), 0(4)>
  return _1;
;;    succ:       EXIT

}


Inserting a value copy on edge BB2->BB6 : PART.0 = 1
Inserting a value copy on edge BB5->BB6 : PART.0 = 0
Inserting a value copy on edge BB4->BB6 : PART.0 = 0

;; Generating RTL for gimple basic block 2

;; if (_5 != 1)

(insn 10 9 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                    (const_int 8 [0x8])) [2 state_4(D)->init+0 S4 A64])
            (const_int 1 [0x1]))) blake_ref.c:268 -1
     (nil))

(jump_insn 11 10 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:268 -1
     (int_list:REG_BR_PROB 6218 (nil)))

;; Generating RTL for gimple basic block 3

;; if (_6 <= 383)

(insn 13 12 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 143 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:271 -1
     (nil))

(jump_insn 14 13 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:271 -1
     (int_list:REG_BR_PROB 6100 (nil)))

;; Generating RTL for gimple basic block 4

;; _21 = __builtin_bswap32 (_206);

(insn 16 15 17 (set (reg:SI 145)
        (mem:SI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8])) -1
     (nil))

(insn 17 16 0 (set (reg:SI 90 [ D.5943 ])
        (bswap:SI (reg:SI 145))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8]))
        (nil)))

;; state_4(D)->salt32[0] = _21;

(insn 18 17 0 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 120 [0x78])) [2 state_4(D)->salt32+0 S4 A64])
        (reg:SI 90 [ D.5943 ])) blake_ref.c:272 -1
     (nil))

;; _36 = __builtin_bswap32 (_205);

(insn 19 18 20 (set (reg:SI 146)
        (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8])) -1
     (nil))

(insn 20 19 0 (set (reg:SI 91 [ D.5943 ])
        (bswap:SI (reg:SI 146))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8]))
        (nil)))

;; state_4(D)->salt32[1] = _36;

(insn 21 20 0 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 124 [0x7c])) [2 state_4(D)->salt32+4 S4 A32])
        (reg:SI 91 [ D.5943 ])) blake_ref.c:273 -1
     (nil))

;; _51 = __builtin_bswap32 (_200);

(insn 22 21 23 (set (reg:SI 147)
        (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8])) -1
     (nil))

(insn 23 22 0 (set (reg:SI 92 [ D.5943 ])
        (bswap:SI (reg:SI 147))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8]))
        (nil)))

;; state_4(D)->salt32[2] = _51;

(insn 24 23 0 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 128 [0x80])) [2 state_4(D)->salt32+8 S4 A64])
        (reg:SI 92 [ D.5943 ])) blake_ref.c:274 -1
     (nil))

;; _66 = __builtin_bswap32 (_203);

(insn 25 24 26 (set (reg:SI 148)
        (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)salt_7(D) + 12B]+0 S4 A8])) -1
     (nil))

(insn 26 25 0 (set (reg:SI 93 [ D.5943 ])
        (bswap:SI (reg:SI 148))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 12 [0xc])) [0 MEM[(const BitSequence *)salt_7(D) + 12B]+0 S4 A8]))
        (nil)))

;; state_4(D)->salt32[3] = _66;

(insn 27 26 0 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 132 [0x84])) [2 state_4(D)->salt32+12 S4 A32])
        (reg:SI 93 [ D.5943 ])) blake_ref.c:275 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 30 29 31 83 "" [0 uses])

(note 31 30 0 NOTE_INSN_BASIC_BLOCK)

;; _99 = __builtin_bswap64 (_225);

(insn 32 31 33 (set (reg:DI 149)
        (mem:DI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8])) -1
     (nil))

(insn 33 32 0 (set (reg:DI 94 [ D.5944 ])
        (bswap:DI (reg:DI 149))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8]))
        (nil)))

;; state_4(D)->salt64[0] = _99;

(insn 34 33 0 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 344 [0x158])) [3 state_4(D)->salt64+0 S8 A64])
        (reg:DI 94 [ D.5944 ])) blake_ref.c:278 -1
     (nil))

;; _132 = __builtin_bswap64 (_220);

(insn 35 34 36 (set (reg:DI 150)
        (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8])) -1
     (nil))

(insn 36 35 0 (set (reg:DI 95 [ D.5944 ])
        (bswap:DI (reg:DI 150))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8]))
        (nil)))

;; state_4(D)->salt64[1] = _132;

(insn 37 36 0 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 352 [0x160])) [3 state_4(D)->salt64+8 S8 A64])
        (reg:DI 95 [ D.5944 ])) blake_ref.c:279 -1
     (nil))

;; _165 = __builtin_bswap64 (_214);

(insn 38 37 39 (set (reg:DI 151)
        (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8])) -1
     (nil))

(insn 39 38 0 (set (reg:DI 96 [ D.5944 ])
        (bswap:DI (reg:DI 151))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8]))
        (nil)))

;; state_4(D)->salt64[2] = _165;

(insn 40 39 0 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 360 [0x168])) [3 state_4(D)->salt64+16 S8 A64])
        (reg:DI 96 [ D.5944 ])) blake_ref.c:280 -1
     (nil))

;; _198 = __builtin_bswap64 (_208);

(insn 41 40 42 (set (reg:DI 152)
        (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)salt_7(D) + 24B]+0 S8 A8])) -1
     (nil))

(insn 42 41 0 (set (reg:DI 97 [ D.5944 ])
        (bswap:DI (reg:DI 152))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)salt_7(D) + 24B]+0 S8 A8]))
        (nil)))

;; state_4(D)->salt64[3] = _198;

(insn 43 42 0 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 368 [0x170])) [3 state_4(D)->salt64+24 S8 A64])
        (reg:DI 97 [ D.5944 ])) blake_ref.c:281 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 44 43 45 82 "" [0 uses])

(note 45 44 0 NOTE_INSN_BASIC_BLOCK)

;; return _1;

(insn 46 45 47 (set (reg:SI 142 [ <retval> ])
        (reg:SI 87 [ D.5941 ])) -1
     (nil))

(jump_insn 47 46 48 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 48 47 0)
Edge 2->6 redirected to 9


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 47.
Merging block 9 into block 8...
Merged blocks 8 and 9.
Merged 8 and 9 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 143 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:261 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 81 virtual-incoming-args) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 144 [ salt ])
        (reg:DI 1 dx [ salt ])) blake_ref.c:261 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 8 [0x8])) [4 salt+0 S8 A64])
        (nil)))
(note 4 3 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 4 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                    (const_int 8 [0x8])) [2 state_4(D)->init+0 S4 A64])
            (const_int 1 [0x1]))) blake_ref.c:268 -1
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 56)
            (pc))) blake_ref.c:268 612 {*jcc_1}
     (int_list:REG_BR_PROB 6218 (nil))
 -> 56)
;;  succ:       7 [62.2%] 
;;              4 [37.8%]  (FALLTHRU)

;; basic block 4, loop depth 0, count 0, freq 3782, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [37.8%]  (FALLTHRU)
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 143 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:271 -1
     (nil))
(jump_insn 14 13 15 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) blake_ref.c:271 -1
     (int_list:REG_BR_PROB 6100 (nil))
 -> 30)
;;  succ:       5 [39.0%]  (FALLTHRU)
;;              6 [61.0%] 

;; basic block 5, loop depth 0, count 0, freq 1475, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [39.0%]  (FALLTHRU)
(note 15 14 16 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 5 (set (reg:SI 145)
        (mem:SI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8])) -1
     (nil))
(insn 17 16 18 5 (set (reg:SI 90 [ D.5943 ])
        (bswap:SI (reg:SI 145))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8]))
        (nil)))
(insn 18 17 19 5 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 120 [0x78])) [2 state_4(D)->salt32+0 S4 A64])
        (reg:SI 90 [ D.5943 ])) blake_ref.c:272 -1
     (nil))
(insn 19 18 20 5 (set (reg:SI 146)
        (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8])) -1
     (nil))
(insn 20 19 21 5 (set (reg:SI 91 [ D.5943 ])
        (bswap:SI (reg:SI 146))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8]))
        (nil)))
(insn 21 20 22 5 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 124 [0x7c])) [2 state_4(D)->salt32+4 S4 A32])
        (reg:SI 91 [ D.5943 ])) blake_ref.c:273 -1
     (nil))
(insn 22 21 23 5 (set (reg:SI 147)
        (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8])) -1
     (nil))
(insn 23 22 24 5 (set (reg:SI 92 [ D.5943 ])
        (bswap:SI (reg:SI 147))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8]))
        (nil)))
(insn 24 23 25 5 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 128 [0x80])) [2 state_4(D)->salt32+8 S4 A64])
        (reg:SI 92 [ D.5943 ])) blake_ref.c:274 -1
     (nil))
(insn 25 24 26 5 (set (reg:SI 148)
        (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)salt_7(D) + 12B]+0 S4 A8])) -1
     (nil))
(insn 26 25 27 5 (set (reg:SI 93 [ D.5943 ])
        (bswap:SI (reg:SI 148))) -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 12 [0xc])) [0 MEM[(const BitSequence *)salt_7(D) + 12B]+0 S4 A8]))
        (nil)))
(insn 27 26 7 5 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 132 [0x84])) [2 state_4(D)->salt32+12 S4 A32])
        (reg:SI 93 [ D.5943 ])) blake_ref.c:275 -1
     (nil))
(insn 7 27 28 5 (set (reg:SI 87 [ D.5941 ])
        (const_int 0 [0])) blake_ref.c:284 -1
     (nil))
(jump_insn 28 7 29 5 (set (pc)
        (label_ref 44)) -1
     (nil)
 -> 44)
;;  succ:       8 [100.0%] 

(barrier 29 28 30)
;; basic block 6, loop depth 0, count 0, freq 2307, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [61.0%] 
(code_label 30 29 31 6 83 "" [1 uses])
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 6 (set (reg:DI 149)
        (mem:DI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8])) -1
     (nil))
(insn 33 32 34 6 (set (reg:DI 94 [ D.5944 ])
        (bswap:DI (reg:DI 149))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8]))
        (nil)))
(insn 34 33 35 6 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 344 [0x158])) [3 state_4(D)->salt64+0 S8 A64])
        (reg:DI 94 [ D.5944 ])) blake_ref.c:278 -1
     (nil))
(insn 35 34 36 6 (set (reg:DI 150)
        (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8])) -1
     (nil))
(insn 36 35 37 6 (set (reg:DI 95 [ D.5944 ])
        (bswap:DI (reg:DI 150))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8]))
        (nil)))
(insn 37 36 38 6 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 352 [0x160])) [3 state_4(D)->salt64+8 S8 A64])
        (reg:DI 95 [ D.5944 ])) blake_ref.c:279 -1
     (nil))
(insn 38 37 39 6 (set (reg:DI 151)
        (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8])) -1
     (nil))
(insn 39 38 40 6 (set (reg:DI 96 [ D.5944 ])
        (bswap:DI (reg:DI 151))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8]))
        (nil)))
(insn 40 39 41 6 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 360 [0x168])) [3 state_4(D)->salt64+16 S8 A64])
        (reg:DI 96 [ D.5944 ])) blake_ref.c:280 -1
     (nil))
(insn 41 40 42 6 (set (reg:DI 152)
        (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)salt_7(D) + 24B]+0 S8 A8])) -1
     (nil))
(insn 42 41 43 6 (set (reg:DI 97 [ D.5944 ])
        (bswap:DI (reg:DI 152))) -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)salt_7(D) + 24B]+0 S8 A8]))
        (nil)))
(insn 43 42 6 6 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 368 [0x170])) [3 state_4(D)->salt64+24 S8 A64])
        (reg:DI 97 [ D.5944 ])) blake_ref.c:281 -1
     (nil))
(insn 6 43 53 6 (set (reg:SI 87 [ D.5941 ])
        (const_int 0 [0])) blake_ref.c:284 -1
     (nil))
(jump_insn 53 6 54 6 (set (pc)
        (label_ref 44)) -1
     (nil)
 -> 44)
;;  succ:       8 [100.0%] 

(barrier 54 53 56)
;; basic block 7, loop depth 0, count 0, freq 6218, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [62.2%] 
(code_label 56 54 55 7 84 "" [1 uses])
(note 55 56 5 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 5 55 44 7 (set (reg:SI 87 [ D.5941 ])
        (const_int 1 [0x1])) blake_ref.c:269 -1
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [100.0%]  (FALLTHRU)
;;              5 [100.0%] 
;;              6 [100.0%] 
(code_label 44 5 45 8 82 "" [2 uses])
(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 50 8 (set (reg:SI 142 [ <retval> ])
        (reg:SI 87 [ D.5941 ])) -1
     (nil))
(insn 50 46 51 8 (set (reg/i:SI 0 ax)
        (reg:SI 142 [ <retval> ])) blake_ref.c:285 -1
     (nil))
(insn 51 50 0 8 (use (reg/i:SI 0 ax)) blake_ref.c:285 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function Update (Update, funcdef_no=17, decl_uid=3189, cgraph_uid=17, symbol_order=25)

Update (struct hashState * state, const BitSequence * data, DataLength databitlen)
{
  int _3;
  int _6;
  int _10;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _3 = state_2(D)->hashbitlen;
  if (_3 <= 383)
    goto <bb 3>;
  else
    goto <bb 6>;
;;    succ:       3
;;                6

;;   basic block 3, loop depth 0
;;    pred:       2
  if (databitlen_5(D) == 0)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  _10 = state_2(D)->datalen;
  if (_10 != 512)
    goto <bb 9>;
  else
    goto <bb 5>;
;;    succ:       9
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
;;                3
  Update32.part.0 (state_2(D), data_4(D), databitlen_5(D));
  goto <bb 9>;
;;    succ:       9

;;   basic block 6, loop depth 0
;;    pred:       2
  if (databitlen_5(D) == 0)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  _6 = state_2(D)->datalen;
  if (_6 != 1024)
    goto <bb 9>;
  else
    goto <bb 8>;
;;    succ:       9
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
;;                6
  Update64.part.1 (state_2(D), data_4(D), databitlen_5(D));
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       7
;;                8
;;                5
;;                4
  return 0;
;;    succ:       EXIT

}



Partition map 

Partition 2 (state_2(D) - 2 )
Partition 3 (_3 - 3 )
Partition 4 (data_4(D) - 4 )
Partition 5 (databitlen_5(D) - 5 )
Partition 6 (_6 - 6 )
Partition 10 (_10 - 10 )


Partition map 

Partition 0 (state_2(D) - 2 )
Partition 1 (data_4(D) - 4 )
Partition 2 (databitlen_5(D) - 5 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (state_2(D) - 2 )
Partition 1 (data_4(D) - 4 )
Partition 2 (databitlen_5(D) - 5 )

After Coalescing:

Partition map 

Partition 0 (state_2(D) - 2 )
Partition 1 (_3 - 3 )
Partition 2 (data_4(D) - 4 )
Partition 3 (databitlen_5(D) - 5 )
Partition 4 (_6 - 6 )
Partition 5 (_10 - 10 )


Replacing Expressions
_3 replace with --> _3 = state_2(D)->hashbitlen;

_6 replace with --> _6 = state_2(D)->datalen;

_10 replace with --> _10 = state_2(D)->datalen;


Update (struct hashState * state, const BitSequence * data, DataLength databitlen)
{
  int _3;
  int _6;
  int _10;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _3 = state_2(D)->hashbitlen;
  if (_3 <= 383)
    goto <bb 3>;
  else
    goto <bb 6>;
;;    succ:       3
;;                6

;;   basic block 3, loop depth 0
;;    pred:       2
  if (databitlen_5(D) == 0)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  _10 = state_2(D)->datalen;
  if (_10 != 512)
    goto <bb 9>;
  else
    goto <bb 5>;
;;    succ:       9
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
;;                3
  Update32.part.0 (state_2(D), data_4(D), databitlen_5(D));
  goto <bb 9>;
;;    succ:       9

;;   basic block 6, loop depth 0
;;    pred:       2
  if (databitlen_5(D) == 0)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  _6 = state_2(D)->datalen;
  if (_6 != 1024)
    goto <bb 9>;
  else
    goto <bb 8>;
;;    succ:       9
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
;;                6
  Update64.part.1 (state_2(D), data_4(D), databitlen_5(D));
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       7
;;                8
;;                5
;;                4
  return 0;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (_3 <= 383)

(insn 8 7 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 91 [ state ]) [2 state_2(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:399 -1
     (nil))

(jump_insn 9 8 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:399 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 3

;; if (databitlen_5(D) == 0)

(insn 11 10 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 93 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(jump_insn 12 11 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 2071 (nil)))

;; Generating RTL for gimple basic block 4

;; if (_10 != 512)

(insn 14 13 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 91 [ state ])
                    (const_int 4 [0x4])) [2 state_2(D)->datalen+0 S4 A32])
            (const_int 512 [0x200]))) blake_ref.c:295 -1
     (nil))

(jump_insn 15 14 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 5

;; 

(code_label 16 15 17 89 "" [0 uses])

(note 17 16 0 NOTE_INSN_BASIC_BLOCK)

;; Update32.part.0 (state_2(D), data_4(D), databitlen_5(D));

(insn 18 17 19 (set (reg:DI 37 r8)
        (reg/v:DI 93 [ databitlen ])) -1
     (nil))

(insn 19 18 20 (set (reg:DI 1 dx)
        (reg/v/f:DI 92 [ data ])) -1
     (nil))

(insn 20 19 21 (set (reg:DI 2 cx)
        (reg/v/f:DI 91 [ state ])) -1
     (nil))

(call_insn 21 20 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 6

;; 

(code_label 24 23 25 88 "" [0 uses])

(note 25 24 0 NOTE_INSN_BASIC_BLOCK)

;; if (databitlen_5(D) == 0)

(insn 26 25 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 93 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(jump_insn 27 26 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 2900 (nil)))

;; Generating RTL for gimple basic block 7

;; if (_6 != 1024)

(insn 29 28 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 91 [ state ])
                    (const_int 4 [0x4])) [2 state_2(D)->datalen+0 S4 A32])
            (const_int 1024 [0x400]))) blake_ref.c:351 -1
     (nil))

(jump_insn 30 29 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 6218 (nil)))

;; Generating RTL for gimple basic block 8

;; 

(code_label 31 30 32 91 "" [0 uses])

(note 32 31 0 NOTE_INSN_BASIC_BLOCK)

;; Update64.part.1 (state_2(D), data_4(D), databitlen_5(D));

(insn 33 32 34 (set (reg:DI 37 r8)
        (reg/v:DI 93 [ databitlen ])) -1
     (nil))

(insn 34 33 35 (set (reg:DI 1 dx)
        (reg/v/f:DI 92 [ data ])) -1
     (nil))

(insn 35 34 36 (set (reg:DI 2 cx)
        (reg/v/f:DI 91 [ state ])) -1
     (nil))

(call_insn 36 35 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 9

;; 

(code_label 37 36 38 90 "" [0 uses])

(note 38 37 0 NOTE_INSN_BASIC_BLOCK)

;; return 0;

(insn 39 38 40 (set (reg:SI 90 [ <retval> ])
        (const_int 0 [0])) -1
     (nil))

(jump_insn 40 39 41 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 41 40 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 40.
Merging block 11 into block 10...
Merged blocks 10 and 11.
Merged 10 and 11 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/v/f:DI 91 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:397 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 81 virtual-incoming-args) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 92 [ data ])
        (reg:DI 1 dx [ data ])) blake_ref.c:397 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 8 [0x8])) [4 data+0 S8 A64])
        (nil)))
(insn 4 3 5 2 (set (reg/v:DI 93 [ databitlen ])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:397 -1
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 91 [ state ]) [2 state_2(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:399 -1
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) blake_ref.c:399 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 24)
;;  succ:       4 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 

;; basic block 4, loop depth 0, count 0, freq 5000, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 93 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(jump_insn 12 11 13 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 2071 (nil))
 -> 16)
;;  succ:       5 [79.3%]  (FALLTHRU)
;;              6 [20.7%] 

;; basic block 5, loop depth 0, count 0, freq 3964, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [79.3%]  (FALLTHRU)
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 91 [ state ])
                    (const_int 4 [0x4])) [2 state_2(D)->datalen+0 S4 A32])
            (const_int 512 [0x200]))) blake_ref.c:295 -1
     (nil))
(jump_insn 15 14 16 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 37)
;;  succ:       10 [72.0%] 
;;              6 [28.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 2146, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 [28.0%]  (FALLTHRU)
;;              4 [20.7%] 
(code_label 16 15 17 6 89 "" [1 uses])
(note 17 16 18 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 6 (set (reg:DI 37 r8)
        (reg/v:DI 93 [ databitlen ])) -1
     (nil))
(insn 19 18 20 6 (set (reg:DI 1 dx)
        (reg/v/f:DI 92 [ data ])) -1
     (nil))
(insn 20 19 21 6 (set (reg:DI 2 cx)
        (reg/v/f:DI 91 [ state ])) -1
     (nil))
(call_insn 21 20 22 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 22 21 23 6 (set (pc)
        (label_ref 37)) -1
     (nil)
 -> 37)
;;  succ:       10 [100.0%] 

(barrier 23 22 24)
;; basic block 7, loop depth 0, count 0, freq 5000, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [50.0%] 
(code_label 24 23 25 7 88 "" [1 uses])
(note 25 24 26 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 93 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(jump_insn 27 26 28 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 2900 (nil))
 -> 31)
;;  succ:       8 [71.0%]  (FALLTHRU)
;;              9 [29.0%] 

;; basic block 8, loop depth 0, count 0, freq 3550, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [71.0%]  (FALLTHRU)
(note 28 27 29 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 91 [ state ])
                    (const_int 4 [0x4])) [2 state_2(D)->datalen+0 S4 A32])
            (const_int 1024 [0x400]))) blake_ref.c:351 -1
     (nil))
(jump_insn 30 29 31 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 6218 (nil))
 -> 37)
;;  succ:       10 [62.2%] 
;;              9 [37.8%]  (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 2793, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [37.8%]  (FALLTHRU)
;;              7 [29.0%] 
(code_label 31 30 32 9 91 "" [1 uses])
(note 32 31 33 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 9 (set (reg:DI 37 r8)
        (reg/v:DI 93 [ databitlen ])) -1
     (nil))
(insn 34 33 35 9 (set (reg:DI 1 dx)
        (reg/v/f:DI 92 [ data ])) -1
     (nil))
(insn 35 34 36 9 (set (reg:DI 2 cx)
        (reg/v/f:DI 91 [ state ])) -1
     (nil))
(call_insn 36 35 37 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       10 [100.0%]  (FALLTHRU)

;; basic block 10, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [62.2%] 
;;              9 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;;              5 [72.0%] 
(code_label 37 36 38 10 90 "" [3 uses])
(note 38 37 39 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 43 10 (set (reg:SI 90 [ <retval> ])
        (const_int 0 [0])) -1
     (nil))
(insn 43 39 44 10 (set (reg/i:SI 0 ax)
        (reg:SI 90 [ <retval> ])) blake_ref.c:403 -1
     (nil))
(insn 44 43 0 10 (use (reg/i:SI 0 ax)) blake_ref.c:403 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function Final (Final, funcdef_no=20, decl_uid=3192, cgraph_uid=20, symbol_order=28)

Final (struct hashState * state, BitSequence * hashval)
{
  unsigned char msglen[16];
  BitSequence zz;
  BitSequence zo;
  BitSequence oz;
  BitSequence oo;
  u64 low;
  u64 high;
  unsigned char msglen[8];
  BitSequence zz;
  BitSequence zo;
  BitSequence oz;
  BitSequence oo;
  u32 low;
  u32 high;
  int pretmp_1;
  int _5;
  u32 pretmp_7;
  u32 prephitmp_8;
  u64 pretmp_9;
  int pretmp_10;
  unsigned int _11;
  int _12;
  unsigned int _13;
  unsigned int _18;
  unsigned char _19;
  unsigned int _20;
  unsigned char _21;
  unsigned int _22;
  unsigned char _23;
  unsigned char _24;
  unsigned int _25;
  unsigned char _26;
  unsigned int _27;
  unsigned char _28;
  unsigned int _29;
  unsigned char _30;
  unsigned char _31;
  unsigned int _32;
  unsigned int _33;
  u64 pretmp_34;
  unsigned int _38;
  int _39;
  long long unsigned int _40;
  unsigned int _42;
  int _43;
  unsigned int _44;
  unsigned int _45;
  unsigned int _47;
  int _48;
  unsigned char _49;
  signed char _50;
  int _51;
  int _52;
  int _53;
  signed char _54;
  signed char _55;
  int _57;
  signed char _58;
  signed char _59;
  unsigned char _60;
  unsigned int _61;
  u32 pretmp_62;
  unsigned char _63;
  unsigned int _64;
  unsigned int _66;
  _Bool _67;
  _Bool _68;
  _Bool _69;
  unsigned int _70;
  unsigned int _71;
  unsigned int _72;
  int _73;
  int _74;
  long long unsigned int _75;
  unsigned int _76;
  unsigned int _77;
  unsigned int _78;
  unsigned int _79;
  unsigned int _80;
  unsigned int _81;
  int _82;
  int _83;
  long long unsigned int _84;
  unsigned int _86;
  unsigned int _88;
  unsigned int _91;
  unsigned int _92;
  unsigned int _93;
  unsigned char _94;
  unsigned int _95;
  unsigned int _96;
  unsigned char _97;
  unsigned int _98;
  unsigned int _99;
  unsigned char _100;
  unsigned int _101;
  unsigned char _102;
  unsigned int _103;
  unsigned int _104;
  unsigned char _105;
  unsigned int _106;
  unsigned int _107;
  unsigned char _108;
  unsigned int _109;
  unsigned int _110;
  unsigned char _111;
  unsigned int _112;
  unsigned char _113;
  unsigned int _114;
  unsigned int _115;
  unsigned char _116;
  unsigned int _117;
  unsigned int _118;
  unsigned char _119;
  unsigned int _120;
  unsigned int _121;
  unsigned char _122;
  unsigned int _123;
  unsigned char _124;
  unsigned int _125;
  unsigned int _126;
  unsigned char _127;
  unsigned int _128;
  unsigned int _129;
  unsigned char _130;
  unsigned int _131;
  unsigned int _132;
  unsigned char _133;
  unsigned int _134;
  unsigned char _135;
  unsigned int _136;
  unsigned int _137;
  unsigned char _138;
  unsigned int _139;
  unsigned int _140;
  unsigned char _141;
  unsigned int _142;
  unsigned int _143;
  unsigned char _144;
  unsigned int _145;
  unsigned char _146;
  unsigned int _147;
  unsigned int _148;
  unsigned char _149;
  unsigned int _150;
  unsigned int _151;
  unsigned char _152;
  unsigned int _153;
  unsigned int _154;
  unsigned char _155;
  unsigned int _156;
  unsigned char _157;
  unsigned int _158;
  unsigned int _159;
  unsigned char _160;
  unsigned int _161;
  unsigned int _162;
  unsigned char _163;
  unsigned int _164;
  unsigned int _165;
  unsigned char _166;
  unsigned int _167;
  unsigned char _168;
  int _169;
  unsigned int _170;
  unsigned int _171;
  unsigned char _172;
  unsigned int _173;
  unsigned int _174;
  unsigned char _175;
  unsigned int _176;
  unsigned int _177;
  unsigned char _178;
  unsigned int _179;
  unsigned char _180;
  u64 pretmp_181;
  u64 pretmp_182;
  long long unsigned int _183;
  int _184;
  long long unsigned int _185;
  long long unsigned int _190;
  unsigned int _191;
  unsigned int _192;
  unsigned char _193;
  unsigned int _194;
  unsigned char _195;
  unsigned int _196;
  unsigned char _197;
  unsigned char _198;
  unsigned int _199;
  unsigned int _200;
  unsigned char _201;
  unsigned int _202;
  unsigned char _203;
  unsigned int _204;
  unsigned char _205;
  unsigned char _206;
  long long unsigned int _207;
  unsigned int _208;
  unsigned int _209;
  unsigned char _210;
  unsigned int _211;
  unsigned char _212;
  unsigned int _213;
  unsigned char _214;
  unsigned char _215;
  unsigned int _216;
  unsigned int _217;
  unsigned char _218;
  unsigned int _219;
  unsigned char _220;
  unsigned int _221;
  unsigned char _222;
  unsigned char _223;
  unsigned int _224;
  unsigned int _225;
  long long unsigned int _226;
  int prephitmp_227;
  _Bool _229;
  _Bool _230;
  int _231;
  long long unsigned int _232;
  long long unsigned int _233;
  long long unsigned int _235;
  int _236;
  long long unsigned int _237;
  long long unsigned int _238;
  long long unsigned int _240;
  int _241;
  unsigned char _242;
  signed char _243;
  int _244;
  int _245;
  int _246;
  signed char _247;
  signed char _248;
  int _250;
  signed char _251;
  signed char _252;
  unsigned char _253;
  unsigned int _254;
  unsigned char _256;
  long long unsigned int _257;
  long long unsigned int _258;
  _Bool _259;
  _Bool _260;
  _Bool _261;
  int _262;
  long long unsigned int _263;
  long long unsigned int _264;
  unsigned int _265;
  unsigned int _266;
  int _267;
  int _268;
  long long unsigned int _269;
  int _270;
  long long unsigned int _271;
  long long unsigned int _272;
  long long unsigned int _273;
  long long unsigned int _274;
  int _275;
  long long unsigned int _276;
  long long unsigned int _277;
  unsigned int _278;
  unsigned int _279;
  int _280;
  int _281;
  long long unsigned int _282;
  long long unsigned int _284;
  long long unsigned int _286;
  long long unsigned int _289;
  long long unsigned int _290;
  long long unsigned int _291;
  unsigned int _292;
  unsigned int _293;
  unsigned char _294;
  long long unsigned int _295;
  long long unsigned int _296;
  unsigned int _297;
  unsigned int _298;
  unsigned char _299;
  long long unsigned int _300;
  long long unsigned int _301;
  unsigned int _302;
  unsigned int _303;
  unsigned char _304;
  long long unsigned int _305;
  long long unsigned int _306;
  unsigned char _307;
  long long unsigned int _308;
  unsigned int _309;
  unsigned int _310;
  unsigned char _311;
  long long unsigned int _312;
  unsigned int _313;
  unsigned int _314;
  unsigned char _315;
  long long unsigned int _316;
  unsigned int _317;
  unsigned int _318;
  unsigned char _319;
  long long unsigned int _320;
  unsigned char _321;
  long long unsigned int _322;
  long long unsigned int _323;
  unsigned int _324;
  unsigned int _325;
  unsigned char _326;
  long long unsigned int _327;
  long long unsigned int _328;
  unsigned int _329;
  unsigned int _330;
  unsigned char _331;
  long long unsigned int _332;
  long long unsigned int _333;
  unsigned int _334;
  unsigned int _335;
  unsigned char _336;
  long long unsigned int _337;
  long long unsigned int _338;
  unsigned char _339;
  long long unsigned int _340;
  unsigned int _341;
  unsigned int _342;
  unsigned char _343;
  long long unsigned int _344;
  unsigned int _345;
  unsigned int _346;
  unsigned char _347;
  long long unsigned int _348;
  unsigned int _349;
  unsigned int _350;
  unsigned char _351;
  long long unsigned int _352;
  unsigned char _353;
  long long unsigned int _354;
  long long unsigned int _355;
  unsigned int _356;
  unsigned int _357;
  unsigned char _358;
  long long unsigned int _359;
  long long unsigned int _360;
  unsigned int _361;
  unsigned int _362;
  unsigned char _363;
  long long unsigned int _364;
  long long unsigned int _365;
  unsigned int _366;
  unsigned int _367;
  unsigned char _368;
  long long unsigned int _369;
  long long unsigned int _370;
  unsigned char _371;
  long long unsigned int _372;
  unsigned int _373;
  unsigned int _374;
  unsigned char _375;
  long long unsigned int _376;
  unsigned int _377;
  unsigned int _378;
  unsigned char _379;
  long long unsigned int _380;
  unsigned int _381;
  unsigned int _382;
  unsigned char _383;
  long long unsigned int _384;
  unsigned char _385;
  long long unsigned int _386;
  long long unsigned int _387;
  unsigned int _388;
  unsigned int _389;
  unsigned char _390;
  long long unsigned int _391;
  long long unsigned int _392;
  unsigned int _393;
  unsigned int _394;
  unsigned char _395;
  long long unsigned int _396;
  long long unsigned int _397;
  unsigned int _398;
  unsigned int _399;
  unsigned char _400;
  long long unsigned int _401;
  long long unsigned int _402;
  unsigned char _403;
  long long unsigned int _404;
  unsigned int _405;
  unsigned int _406;
  unsigned char _407;
  long long unsigned int _408;
  unsigned int _409;
  unsigned int _410;
  unsigned char _411;
  long long unsigned int _412;
  unsigned int _413;
  unsigned int _414;
  unsigned char _415;
  long long unsigned int _416;
  unsigned char _417;
  long long unsigned int _418;
  long long unsigned int _419;
  unsigned int _420;
  unsigned int _421;
  unsigned char _422;
  long long unsigned int _423;
  long long unsigned int _424;
  unsigned int _425;
  unsigned int _426;
  unsigned char _427;
  long long unsigned int _428;
  long long unsigned int _429;
  unsigned int _430;
  unsigned int _431;
  unsigned char _432;
  long long unsigned int _433;
  long long unsigned int _434;
  unsigned char _435;
  long long unsigned int _436;
  unsigned int _437;
  unsigned int _438;
  unsigned char _439;
  long long unsigned int _440;
  unsigned int _441;
  unsigned int _442;
  unsigned char _443;
  long long unsigned int _444;
  unsigned int _445;
  unsigned int _446;
  unsigned char _447;
  long long unsigned int _448;
  unsigned char _449;
  long long unsigned int _450;
  long long unsigned int _451;
  unsigned int _452;
  unsigned int _453;
  unsigned char _454;
  long long unsigned int _455;
  long long unsigned int _456;
  unsigned int _457;
  unsigned int _458;
  unsigned char _459;
  long long unsigned int _460;
  long long unsigned int _461;
  unsigned int _462;
  unsigned int _463;
  unsigned char _464;
  long long unsigned int _465;
  long long unsigned int _466;
  unsigned char _467;
  long long unsigned int _468;
  unsigned int _469;
  unsigned int _470;
  unsigned char _471;
  long long unsigned int _472;
  unsigned int _473;
  unsigned int _474;
  unsigned char _475;
  long long unsigned int _476;
  unsigned int _477;
  unsigned int _478;
  unsigned char _479;
  long long unsigned int _480;
  unsigned char _481;
  int _482;
  long long unsigned int _483;
  long long unsigned int _484;
  unsigned int _485;
  unsigned int _486;
  unsigned char _487;
  long long unsigned int _488;
  long long unsigned int _489;
  unsigned int _490;
  unsigned int _491;
  unsigned char _492;
  long long unsigned int _493;
  long long unsigned int _494;
  unsigned int _495;
  unsigned int _496;
  unsigned char _497;
  long long unsigned int _498;
  long long unsigned int _499;
  unsigned char _500;
  long long unsigned int _501;
  unsigned int _502;
  unsigned int _503;
  unsigned char _504;
  long long unsigned int _505;
  unsigned int _506;
  unsigned int _507;
  unsigned char _508;
  long long unsigned int _509;
  unsigned int _510;
  unsigned int _511;
  unsigned char _512;
  long long unsigned int _513;
  unsigned char _514;
  long long unsigned int _515;
  long long unsigned int _516;
  unsigned int _517;
  unsigned int _518;
  unsigned char _519;
  long long unsigned int _520;
  long long unsigned int _521;
  unsigned int _522;
  unsigned int _523;
  unsigned char _524;
  long long unsigned int _525;
  long long unsigned int _526;
  unsigned int _527;
  unsigned int _528;
  unsigned char _529;
  long long unsigned int _530;
  long long unsigned int _531;
  unsigned char _532;
  long long unsigned int _533;
  unsigned int _534;
  unsigned int _535;
  unsigned char _536;
  long long unsigned int _537;
  unsigned int _538;
  unsigned int _539;
  unsigned char _540;
  long long unsigned int _541;
  unsigned int _542;
  unsigned int _543;
  unsigned char _544;
  long long unsigned int _545;
  unsigned char _546;
  int _549;
  u64 prephitmp_552;
  u64 prephitmp_555;
  BitSequence[128] * _557;
  int patt_559;
  long long unsigned int _561;
  _Bool _568;
  _Bool _570;
  long long unsigned int _575;
  unsigned int _577;
  int _581;
  u32 pretmp_583;
  long long unsigned int _584;
  long long unsigned int _585;
  u32 prephitmp_586;
  _Bool _592;
  _Bool _593;
  _Bool _599;
  _Bool _602;
  u32 pretmp_605;
  u32 prephitmp_607;
  _Bool _608;
  _Bool _609;
  int prephitmp_613;
  _Bool _632;
  _Bool _733;
  u32 pretmp_743;
  u32 pretmp_748;
  unsigned int _749;
  int pretmp_853;
  int pretmp_854;
  u64 pretmp_855;
  int pretmp_856;
  int pretmp_857;
  u64 prephitmp_858;
  int pretmp_859;
  u32 pretmp_860;
  int pretmp_861;
  int prephitmp_862;
  u64 pretmp_863;
  u64 prephitmp_864;
  u64 prephitmp_865;
  u64 pretmp_866;
  u64 pretmp_867;
  u64 pretmp_868;
  long long unsigned int _882;
  int patt_885;
  int patt_886;
  int patt_887;
  unsigned int patt_888;
  unsigned int patt_889;
  int patt_891;
  int patt_892;
  int patt_893;
  int patt_894;
  unsigned int patt_895;
  unsigned int patt_896;
  int patt_897;
  int patt_898;
  int _900;
  u32 pretmp_904;
  u32 prephitmp_905;
  u32 pretmp_906;
  u32 prephitmp_907;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _5 = state_4(D)->hashbitlen;
  if (_5 <= 383)
    goto <bb 3>;
  else
    goto <bb 40>;
;;    succ:       3
;;                40

;;   basic block 3, loop depth 0
;;    pred:       2
  zz = 0;
  zo = 1;
  oz = 128;
  oo = 129;
  _11 = state_4(D)->t32[0];
  _12 = state_4(D)->datalen;
  _13 = (unsigned int) _12;
  low_14 = _11 + _13;
  high_15 = state_4(D)->t32[1];
  if (_13 > low_14)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  high_16 = high_15 + 1;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  # high_17 = PHI <high_15(3), high_16(4)>
  _18 = high_17 >> 24;
  _19 = (unsigned char) _18;
  msglen[0] = _19;
  _20 = high_17 >> 16;
  _21 = (unsigned char) _20;
  msglen[1] = _21;
  _22 = high_17 >> 8;
  _23 = (unsigned char) _22;
  msglen[2] = _23;
  _24 = (unsigned char) high_17;
  msglen[3] = _24;
  _25 = low_14 >> 24;
  _26 = (unsigned char) _25;
  msglen[4] = _26;
  _27 = low_14 >> 16;
  _28 = (unsigned char) _27;
  msglen[5] = _28;
  _29 = low_14 >> 8;
  _30 = (unsigned char) _29;
  msglen[6] = _30;
  _31 = (unsigned char) low_14;
  msglen[7] = _31;
  _32 = _13 & 7;
  if (_32 == 0)
    goto <bb 6>;
  else
    goto <bb 21>;
;;    succ:       6
;;                21

;;   basic block 6, loop depth 0
;;    pred:       5
  if (_12 == 440)
    goto <bb 7>;
  else
    goto <bb 10>;
;;    succ:       7
;;                10

;;   basic block 7, loop depth 0
;;    pred:       6
  _33 = _11 + 4294967288;
  state_4(D)->t32[0] = _33;
  if (_5 == 224)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8
;;                9

;;   basic block 8, loop depth 0
;;    pred:       7
  Update32.part.0 (state_4(D), &oz, 8);
  pretmp_605 = state_4(D)->t32[0];
  goto <bb 20>;
;;    succ:       20

;;   basic block 9, loop depth 0
;;    pred:       7
  Update32.part.0 (state_4(D), &oo, 8);
  pretmp_904 = state_4(D)->t32[0];
  goto <bb 20>;
;;    succ:       20

;;   basic block 10, loop depth 0
;;    pred:       6
  if (_12 <= 439)
    goto <bb 11>;
  else
    goto <bb 13>;
;;    succ:       11
;;                13

;;   basic block 11, loop depth 0
;;    pred:       10
  if (_12 == 0)
    goto <bb 12>;
  else
    goto <bb 82>;
;;    succ:       12
;;                82

;;   basic block 12, loop depth 0
;;    pred:       11
  state_4(D)->nullt = 1;
  goto <bb 82>;
;;    succ:       82

;;   basic block 13, loop depth 0
;;    pred:       10
  _38 = low_14 + 4294966784;
  state_4(D)->t32[0] = _38;
  _39 = 512 - _12;
  _40 = (long long unsigned int) _39;
  _609 = _12 != 512;
  _602 = _40 == 0;
  _593 = _602 & _609;
  if (_593 != 0)
    goto <bb 15>;
  else
    goto <bb 14>;
;;    succ:       15
;;                14

;;   basic block 14, loop depth 0
;;    pred:       13
  Update32.part.0 (state_4(D), &padding, _40);
  pretmp_906 = state_4(D)->t32[0];
;;    succ:       15

;;   basic block 15, loop depth 0
;;    pred:       13
;;                14
  # prephitmp_907 = PHI <_38(13), pretmp_906(14)>
  _42 = prephitmp_907 + 4294966856;
  state_4(D)->t32[0] = _42;
  Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], 440);
  state_4(D)->nullt = 1;
;;    succ:       16

;;   basic block 16, loop depth 0
;;    pred:       15
;;                82
  _43 = state_4(D)->hashbitlen;
  if (_43 == 224)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17
;;                18

;;   basic block 17, loop depth 0
;;    pred:       16
  Update32.part.0 (state_4(D), &zz, 8);
  goto <bb 19>;
;;    succ:       19

;;   basic block 18, loop depth 0
;;    pred:       16
  Update32.part.0 (state_4(D), &zo, 8);
;;    succ:       19

;;   basic block 19, loop depth 0
;;    pred:       17
;;                18
  _44 = state_4(D)->t32[0];
  _45 = _44 + 4294967288;
;;    succ:       20

;;   basic block 20, loop depth 0
;;    pred:       8
;;                9
;;                19
  # prephitmp_905 = PHI <pretmp_605(8), pretmp_904(9), _45(19)>
  _47 = prephitmp_905 + 4294967232;
  state_4(D)->t32[0] = _47;
  Update32.part.0 (state_4(D), &msglen, 64);
  goto <bb 37>;
;;    succ:       37

;;   basic block 21, loop depth 0
;;    pred:       5
  _48 = _12 / 8;
  _49 = state_4(D)->data32[_48];
  _50 = (signed char) _49;
  _51 = _12 % 8;
  _52 = 8 - _51;
  _53 = 255 << _52;
  _54 = (signed char) _53;
  _55 = _50 & _54;
  _57 = 128 >> _51;
  _58 = (signed char) _57;
  _59 = _55 ^ _58;
  _60 = (unsigned char) _59;
  state_4(D)->data32[_48] = _60;
  _61 = _13 + 4294966855;
  if (_61 <= 5)
    goto <bb 22>;
  else
    goto <bb 25>;
;;    succ:       22
;;                25

;;   basic block 22, loop depth 0
;;    pred:       21
  if (_5 == 224)
    goto <bb 24>;
  else
    goto <bb 23>;
;;    succ:       24
;;                23

;;   basic block 23, loop depth 0
;;    pred:       22
  _63 = _60 ^ 1;
  state_4(D)->data32[_48] = _63;
;;    succ:       24

;;   basic block 24, loop depth 0
;;    pred:       22
;;                23
  _64 = (unsigned int) _51;
  _749 = _11 + 4294967288;
  _66 = _64 + _749;
  state_4(D)->datalen = 448;
  goto <bb 36>;
;;    succ:       36

;;   basic block 25, loop depth 0
;;    pred:       21
  if (_12 <= 439)
    goto <bb 26>;
  else
    goto <bb 28>;
;;    succ:       26
;;                28

;;   basic block 26, loop depth 0
;;    pred:       25
  _70 = low_14 + 4294966856;
  state_4(D)->t32[0] = _70;
  _71 = _13 & 4294967288;
  _72 = _71 + 8;
  _73 = (int) _72;
  state_4(D)->datalen = _73;
  _74 = 440 - _73;
  _75 = (long long unsigned int) _74;
  _608 = _73 != 512;
  _570 = _75 == 0;
  _568 = _570 & _608;
  if (_568 != 0)
    goto <bb 33>;
  else
    goto <bb 27>;
;;    succ:       33
;;                27

;;   basic block 27, loop depth 0
;;    pred:       26
  Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], _75);
  pretmp_583 = state_4(D)->t32[0];
  pretmp_859 = state_4(D)->hashbitlen;
  goto <bb 33>;
;;    succ:       33

;;   basic block 28, loop depth 0
;;    pred:       25
  if (_12 > 504)
    goto <bb 29>;
  else
    goto <bb 30>;
;;    succ:       29
;;                30

;;   basic block 29, loop depth 0
;;    pred:       28
  _76 = low_14 + 4294966784;
  state_4(D)->t32[0] = _76;
  state_4(D)->datalen = 512;
  Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], 0);
  _77 = state_4(D)->t32[0];
  _78 = _77 + 4294966856;
  state_4(D)->t32[0] = _78;
  Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], 440);
  state_4(D)->nullt = 1;
  pretmp_743 = state_4(D)->t32[0];
  pretmp_10 = state_4(D)->hashbitlen;
  goto <bb 33>;
;;    succ:       33

;;   basic block 30, loop depth 0
;;    pred:       28
  _79 = low_14 + 4294966784;
  state_4(D)->t32[0] = _79;
  _80 = _13 & 4294967288;
  _81 = _80 + 8;
  _82 = (int) _81;
  state_4(D)->datalen = _82;
  _83 = 512 - _82;
  _84 = (long long unsigned int) _83;
  _259 = _82 != 512;
  _260 = _84 == 0;
  _261 = _259 & _260;
  if (_261 != 0)
    goto <bb 32>;
  else
    goto <bb 31>;
;;    succ:       32
;;                31

;;   basic block 31, loop depth 0
;;    pred:       30
  Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], _84);
  pretmp_860 = state_4(D)->t32[0];
;;    succ:       32

;;   basic block 32, loop depth 0
;;    pred:       30
;;                31
  # prephitmp_586 = PHI <_79(30), pretmp_860(31)>
  _86 = prephitmp_586 + 4294966856;
  state_4(D)->t32[0] = _86;
  Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], 440);
  state_4(D)->nullt = 1;
  pretmp_748 = state_4(D)->t32[0];
  pretmp_861 = state_4(D)->hashbitlen;
;;    succ:       33

;;   basic block 33, loop depth 0
;;    pred:       26
;;                29
;;                32
;;                27
  # prephitmp_607 = PHI <_70(26), pretmp_743(29), pretmp_748(32), pretmp_583(27)>
  # prephitmp_862 = PHI <_5(26), pretmp_10(29), pretmp_861(32), pretmp_859(27)>
  _88 = prephitmp_607 + 4294967288;
  state_4(D)->t32[0] = _88;
  if (prephitmp_862 == 224)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34
;;                35

;;   basic block 34, loop depth 0
;;    pred:       33
  Update32.part.0 (state_4(D), &zz, 8);
  pretmp_62 = state_4(D)->t32[0];
  goto <bb 36>;
;;    succ:       36

;;   basic block 35, loop depth 0
;;    pred:       33
  Update32.part.0 (state_4(D), &zo, 8);
  pretmp_7 = state_4(D)->t32[0];
;;    succ:       36

;;   basic block 36, loop depth 0
;;    pred:       24
;;                34
;;                35
  # prephitmp_8 = PHI <_66(24), pretmp_62(34), pretmp_7(35)>
  _91 = prephitmp_8 + 4294967232;
  state_4(D)->t32[0] = _91;
  Update32.part.0 (state_4(D), &msglen, 64);
;;    succ:       37

;;   basic block 37, loop depth 0
;;    pred:       20
;;                36
  _92 = state_4(D)->h32[0];
  _93 = _92 >> 24;
  _94 = (unsigned char) _93;
  *hashval_6(D) = _94;
  _95 = state_4(D)->h32[0];
  _96 = _95 >> 16;
  _97 = (unsigned char) _96;
  MEM[(BitSequence *)hashval_6(D) + 1B] = _97;
  _98 = state_4(D)->h32[0];
  _99 = _98 >> 8;
  _100 = (unsigned char) _99;
  MEM[(BitSequence *)hashval_6(D) + 2B] = _100;
  _101 = state_4(D)->h32[0];
  _102 = (unsigned char) _101;
  MEM[(BitSequence *)hashval_6(D) + 3B] = _102;
  _103 = state_4(D)->h32[1];
  _104 = _103 >> 24;
  _105 = (unsigned char) _104;
  MEM[(BitSequence *)hashval_6(D) + 4B] = _105;
  _106 = state_4(D)->h32[1];
  _107 = _106 >> 16;
  _108 = (unsigned char) _107;
  MEM[(BitSequence *)hashval_6(D) + 5B] = _108;
  _109 = state_4(D)->h32[1];
  _110 = _109 >> 8;
  _111 = (unsigned char) _110;
  MEM[(BitSequence *)hashval_6(D) + 6B] = _111;
  _112 = state_4(D)->h32[1];
  _113 = (unsigned char) _112;
  MEM[(BitSequence *)hashval_6(D) + 7B] = _113;
  _114 = state_4(D)->h32[2];
  _115 = _114 >> 24;
  _116 = (unsigned char) _115;
  MEM[(BitSequence *)hashval_6(D) + 8B] = _116;
  _117 = state_4(D)->h32[2];
  _118 = _117 >> 16;
  _119 = (unsigned char) _118;
  MEM[(BitSequence *)hashval_6(D) + 9B] = _119;
  _120 = state_4(D)->h32[2];
  _121 = _120 >> 8;
  _122 = (unsigned char) _121;
  MEM[(BitSequence *)hashval_6(D) + 10B] = _122;
  _123 = state_4(D)->h32[2];
  _124 = (unsigned char) _123;
  MEM[(BitSequence *)hashval_6(D) + 11B] = _124;
  _125 = state_4(D)->h32[3];
  _126 = _125 >> 24;
  _127 = (unsigned char) _126;
  MEM[(BitSequence *)hashval_6(D) + 12B] = _127;
  _128 = state_4(D)->h32[3];
  _129 = _128 >> 16;
  _130 = (unsigned char) _129;
  MEM[(BitSequence *)hashval_6(D) + 13B] = _130;
  _131 = state_4(D)->h32[3];
  _132 = _131 >> 8;
  _133 = (unsigned char) _132;
  MEM[(BitSequence *)hashval_6(D) + 14B] = _133;
  _134 = state_4(D)->h32[3];
  _135 = (unsigned char) _134;
  MEM[(BitSequence *)hashval_6(D) + 15B] = _135;
  _136 = state_4(D)->h32[4];
  _137 = _136 >> 24;
  _138 = (unsigned char) _137;
  MEM[(BitSequence *)hashval_6(D) + 16B] = _138;
  _139 = state_4(D)->h32[4];
  _140 = _139 >> 16;
  _141 = (unsigned char) _140;
  MEM[(BitSequence *)hashval_6(D) + 17B] = _141;
  _142 = state_4(D)->h32[4];
  _143 = _142 >> 8;
  _144 = (unsigned char) _143;
  MEM[(BitSequence *)hashval_6(D) + 18B] = _144;
  _145 = state_4(D)->h32[4];
  _146 = (unsigned char) _145;
  MEM[(BitSequence *)hashval_6(D) + 19B] = _146;
  _147 = state_4(D)->h32[5];
  _148 = _147 >> 24;
  _149 = (unsigned char) _148;
  MEM[(BitSequence *)hashval_6(D) + 20B] = _149;
  _150 = state_4(D)->h32[5];
  _151 = _150 >> 16;
  _152 = (unsigned char) _151;
  MEM[(BitSequence *)hashval_6(D) + 21B] = _152;
  _153 = state_4(D)->h32[5];
  _154 = _153 >> 8;
  _155 = (unsigned char) _154;
  MEM[(BitSequence *)hashval_6(D) + 22B] = _155;
  _156 = state_4(D)->h32[5];
  _157 = (unsigned char) _156;
  MEM[(BitSequence *)hashval_6(D) + 23B] = _157;
  _158 = state_4(D)->h32[6];
  _159 = _158 >> 24;
  _160 = (unsigned char) _159;
  MEM[(BitSequence *)hashval_6(D) + 24B] = _160;
  _161 = state_4(D)->h32[6];
  _162 = _161 >> 16;
  _163 = (unsigned char) _162;
  MEM[(BitSequence *)hashval_6(D) + 25B] = _163;
  _164 = state_4(D)->h32[6];
  _165 = _164 >> 8;
  _166 = (unsigned char) _165;
  MEM[(BitSequence *)hashval_6(D) + 26B] = _166;
  _167 = state_4(D)->h32[6];
  _168 = (unsigned char) _167;
  MEM[(BitSequence *)hashval_6(D) + 27B] = _168;
  _169 = state_4(D)->hashbitlen;
  if (_169 == 256)
    goto <bb 38>;
  else
    goto <bb 39>;
;;    succ:       38
;;                39

;;   basic block 38, loop depth 0
;;    pred:       37
  _170 = state_4(D)->h32[7];
  _171 = _170 >> 24;
  _172 = (unsigned char) _171;
  MEM[(BitSequence *)hashval_6(D) + 28B] = _172;
  _173 = state_4(D)->h32[7];
  _174 = _173 >> 16;
  _175 = (unsigned char) _174;
  MEM[(BitSequence *)hashval_6(D) + 29B] = _175;
  _176 = state_4(D)->h32[7];
  _177 = _176 >> 8;
  _178 = (unsigned char) _177;
  MEM[(BitSequence *)hashval_6(D) + 30B] = _178;
  _179 = state_4(D)->h32[7];
  _180 = (unsigned char) _179;
  MEM[(BitSequence *)hashval_6(D) + 31B] = _180;
;;    succ:       39

;;   basic block 39, loop depth 0
;;    pred:       37
;;                38
  msglen ={v} {CLOBBER};
  zz ={v} {CLOBBER};
  zo ={v} {CLOBBER};
  oz ={v} {CLOBBER};
  oo ={v} {CLOBBER};
  goto <bb 81>;
;;    succ:       81

;;   basic block 40, loop depth 0
;;    pred:       2
  zz = 0;
  zo = 1;
  oz = 128;
  oo = 129;
  _183 = state_4(D)->t64[0];
  _184 = state_4(D)->datalen;
  _185 = (long long unsigned int) _184;
  low_186 = _183 + _185;
  high_187 = state_4(D)->t64[1];
  if (_185 > low_186)
    goto <bb 41>;
  else
    goto <bb 42>;
;;    succ:       41
;;                42

;;   basic block 41, loop depth 0
;;    pred:       40
  high_188 = high_187 + 1;
;;    succ:       42

;;   basic block 42, loop depth 0
;;    pred:       40
;;                41
  # high_189 = PHI <high_187(40), high_188(41)>
  _190 = high_189 >> 32;
  _191 = (unsigned int) _190;
  _192 = _191 >> 24;
  _193 = (unsigned char) _192;
  msglen[0] = _193;
  _194 = _191 >> 16;
  _195 = (unsigned char) _194;
  msglen[1] = _195;
  _196 = _191 >> 8;
  _197 = (unsigned char) _196;
  msglen[2] = _197;
  _198 = (unsigned char) _190;
  msglen[3] = _198;
  _199 = (unsigned int) high_189;
  _200 = _199 >> 24;
  _201 = (unsigned char) _200;
  msglen[4] = _201;
  _202 = _199 >> 16;
  _203 = (unsigned char) _202;
  msglen[5] = _203;
  _204 = _199 >> 8;
  _205 = (unsigned char) _204;
  msglen[6] = _205;
  _206 = (unsigned char) high_189;
  msglen[7] = _206;
  _207 = low_186 >> 32;
  _208 = (unsigned int) _207;
  _209 = _208 >> 24;
  _210 = (unsigned char) _209;
  msglen[8] = _210;
  _211 = _208 >> 16;
  _212 = (unsigned char) _211;
  msglen[9] = _212;
  _213 = _208 >> 8;
  _214 = (unsigned char) _213;
  msglen[10] = _214;
  _215 = (unsigned char) _207;
  msglen[11] = _215;
  _216 = (unsigned int) low_186;
  _217 = _216 >> 24;
  _218 = (unsigned char) _217;
  msglen[12] = _218;
  _219 = _216 >> 16;
  _220 = (unsigned char) _219;
  msglen[13] = _220;
  _221 = _216 >> 8;
  _222 = (unsigned char) _221;
  msglen[14] = _222;
  _223 = (unsigned char) low_186;
  msglen[15] = _223;
  _224 = (unsigned int) _184;
  _225 = _224 & 7;
  if (_225 == 0)
    goto <bb 43>;
  else
    goto <bb 62>;
;;    succ:       43
;;                62

;;   basic block 43, loop depth 0
;;    pred:       42
  if (_184 == 888)
    goto <bb 44>;
  else
    goto <bb 47>;
;;    succ:       44
;;                47

;;   basic block 44, loop depth 0
;;    pred:       43
  _226 = _183 + 18446744073709551608;
  state_4(D)->t64[0] = _226;
  if (_5 == 384)
    goto <bb 45>;
  else
    goto <bb 46>;
;;    succ:       45
;;                46

;;   basic block 45, loop depth 0
;;    pred:       44
  Update64.part.1 (state_4(D), &oz, 8);
  pretmp_866 = state_4(D)->t64[0];
  goto <bb 59>;
;;    succ:       59

;;   basic block 46, loop depth 0
;;    pred:       44
  Update64.part.1 (state_4(D), &oo, 8);
  pretmp_182 = state_4(D)->t64[0];
  goto <bb 59>;
;;    succ:       59

;;   basic block 47, loop depth 0
;;    pred:       43
  if (_184 <= 887)
    goto <bb 48>;
  else
    goto <bb 50>;
;;    succ:       48
;;                50

;;   basic block 48, loop depth 0
;;    pred:       47
  if (_184 == 0)
    goto <bb 49>;
  else
    goto <bb 83>;
;;    succ:       49
;;                83

;;   basic block 49, loop depth 0
;;    pred:       48
  state_4(D)->nullt = 1;
  goto <bb 83>;
;;    succ:       83

;;   basic block 50, loop depth 0
;;    pred:       47
  _231 = 1024 - _184;
  _232 = (long long unsigned int) _231;
  _233 = _183 - _232;
  state_4(D)->t64[0] = _233;
  _67 = _184 != 1024;
  _68 = _232 == 0;
  _69 = _67 & _68;
  if (_69 != 0)
    goto <bb 52>;
  else
    goto <bb 51>;
;;    succ:       52
;;                51

;;   basic block 51, loop depth 0
;;    pred:       50
  Update64.part.1 (state_4(D), &padding, _232);
  pretmp_863 = state_4(D)->t64[0];
;;    succ:       52

;;   basic block 52, loop depth 0
;;    pred:       50
;;                51
  # prephitmp_864 = PHI <_233(50), pretmp_863(51)>
  _235 = prephitmp_864 + 18446744073709550728;
  state_4(D)->t64[0] = _235;
  Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], 888);
  state_4(D)->nullt = 1;
;;    succ:       53

;;   basic block 53, loop depth 0
;;    pred:       52
;;                83
  _236 = state_4(D)->hashbitlen;
  if (_236 == 384)
    goto <bb 54>;
  else
    goto <bb 55>;
;;    succ:       54
;;                55

;;   basic block 54, loop depth 0
;;    pred:       53
  Update64.part.1 (state_4(D), &zz, 8);
  goto <bb 58>;
;;    succ:       58

;;   basic block 55, loop depth 0
;;    pred:       53
  if (_236 <= 383)
    goto <bb 56>;
  else
    goto <bb 57>;
;;    succ:       56
;;                57

;;   basic block 56, loop depth 0
;;    pred:       55
  Update32.part.0 (state_4(D), &zo, 8);
  goto <bb 58>;
;;    succ:       58

;;   basic block 57, loop depth 0
;;    pred:       55
  Update64.part.1 (state_4(D), &zo, 8);
;;    succ:       58

;;   basic block 58, loop depth 0
;;    pred:       54
;;                57
;;                56
  _237 = state_4(D)->t64[0];
  _238 = _237 + 18446744073709551608;
;;    succ:       59

;;   basic block 59, loop depth 0
;;    pred:       45
;;                46
;;                58
  # prephitmp_555 = PHI <pretmp_866(45), pretmp_182(46), _238(58)>
  _240 = prephitmp_555 + 18446744073709551488;
  state_4(D)->t64[0] = _240;
  _549 = state_4(D)->hashbitlen;
  if (_549 <= 383)
    goto <bb 60>;
  else
    goto <bb 61>;
;;    succ:       60
;;                61

;;   basic block 60, loop depth 0
;;    pred:       59
;;                77
  Update32.part.0 (state_4(D), &msglen, 128);
  goto <bb 78>;
;;    succ:       78

;;   basic block 61, loop depth 0
;;    pred:       59
;;                77
;;                65
  Update64.part.1 (state_4(D), &msglen, 128);
  goto <bb 78>;
;;    succ:       78

;;   basic block 62, loop depth 0
;;    pred:       42
  _241 = _184 / 8;
  _242 = state_4(D)->data64[_241];
  _243 = (signed char) _242;
  _244 = _184 % 8;
  _245 = 8 - _244;
  _246 = 255 << _245;
  _247 = (signed char) _246;
  _248 = _243 & _247;
  _250 = 128 >> _244;
  _251 = (signed char) _250;
  _252 = _248 ^ _251;
  _253 = (unsigned char) _252;
  state_4(D)->data64[_241] = _253;
  _254 = _224 + 4294966407;
  if (_254 <= 5)
    goto <bb 63>;
  else
    goto <bb 66>;
;;    succ:       63
;;                66

;;   basic block 63, loop depth 0
;;    pred:       62
  if (_5 == 384)
    goto <bb 65>;
  else
    goto <bb 64>;
;;    succ:       65
;;                64

;;   basic block 64, loop depth 0
;;    pred:       63
  _256 = _253 ^ 1;
  state_4(D)->data64[_241] = _256;
;;    succ:       65

;;   basic block 65, loop depth 0
;;    pred:       63
;;                64
  _257 = (long long unsigned int) _245;
  _258 = _183 - _257;
  state_4(D)->datalen = 896;
  _882 = _258 + 18446744073709551488;
  state_4(D)->t64[0] = _882;
  goto <bb 61>;
;;    succ:       61

;;   basic block 66, loop depth 0
;;    pred:       62
  if (_184 <= 887)
    goto <bb 67>;
  else
    goto <bb 69>;
;;    succ:       67
;;                69

;;   basic block 67, loop depth 0
;;    pred:       66
  _262 = 888 - _184;
  _263 = (long long unsigned int) _262;
  _264 = _183 - _263;
  state_4(D)->t64[0] = _264;
  _265 = _224 & 4294967288;
  _266 = _265 + 8;
  _267 = (int) _266;
  state_4(D)->datalen = _267;
  _268 = 888 - _267;
  _269 = (long long unsigned int) _268;
  _733 = _267 != 1024;
  _632 = _269 == 0;
  _599 = _632 & _733;
  if (_599 != 0)
    goto <bb 74>;
  else
    goto <bb 68>;
;;    succ:       74
;;                68

;;   basic block 68, loop depth 0
;;    pred:       67
  Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], _269);
  pretmp_9 = state_4(D)->t64[0];
  pretmp_857 = state_4(D)->hashbitlen;
  goto <bb 74>;
;;    succ:       74

;;   basic block 69, loop depth 0
;;    pred:       66
  if (_184 > 1016)
    goto <bb 70>;
  else
    goto <bb 71>;
;;    succ:       70
;;                71

;;   basic block 70, loop depth 0
;;    pred:       69
  _270 = 1024 - _184;
  _271 = (long long unsigned int) _270;
  _272 = _183 - _271;
  state_4(D)->datalen = 1024;
  _557 = &state_4(D)->data64;
  _561 = _272 + 1024;
  state_4(D)->t64[0] = _561;
  compress64 (state_4(D), _557);
  state_4(D)->datalen = 0;
  _273 = state_4(D)->t64[0];
  _274 = _273 + 18446744073709550728;
  state_4(D)->t64[0] = _274;
  Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], 888);
  state_4(D)->nullt = 1;
  pretmp_855 = state_4(D)->t64[0];
  pretmp_854 = state_4(D)->hashbitlen;
  goto <bb 74>;
;;    succ:       74

;;   basic block 71, loop depth 0
;;    pred:       69
  _275 = 1024 - _184;
  _276 = (long long unsigned int) _275;
  _277 = _183 - _276;
  state_4(D)->t64[0] = _277;
  _278 = _224 & 4294967288;
  _279 = _278 + 8;
  _280 = (int) _279;
  state_4(D)->datalen = _280;
  _281 = 1024 - _280;
  _282 = (long long unsigned int) _281;
  _592 = _280 != 1024;
  _230 = _282 == 0;
  _229 = _230 & _592;
  if (_229 != 0)
    goto <bb 73>;
  else
    goto <bb 72>;
;;    succ:       73
;;                72

;;   basic block 72, loop depth 0
;;    pred:       71
  Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], _282);
  pretmp_34 = state_4(D)->t64[0];
;;    succ:       73

;;   basic block 73, loop depth 0
;;    pred:       71
;;                72
  # prephitmp_865 = PHI <_277(71), pretmp_34(72)>
  _284 = prephitmp_865 + 18446744073709550728;
  state_4(D)->t64[0] = _284;
  Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], 888);
  state_4(D)->nullt = 1;
  pretmp_181 = state_4(D)->t64[0];
  pretmp_1 = state_4(D)->hashbitlen;
;;    succ:       74

;;   basic block 74, loop depth 0
;;    pred:       67
;;                68
;;                70
;;                73
  # prephitmp_858 = PHI <_264(67), pretmp_9(68), pretmp_855(70), pretmp_181(73)>
  # prephitmp_613 = PHI <_5(67), pretmp_857(68), pretmp_854(70), pretmp_1(73)>
  _286 = prephitmp_858 + 18446744073709551608;
  state_4(D)->t64[0] = _286;
  if (prephitmp_613 == 384)
    goto <bb 75>;
  else
    goto <bb 76>;
;;    succ:       75
;;                76

;;   basic block 75, loop depth 0
;;    pred:       74
  Update64.part.1 (state_4(D), &zz, 8);
  pretmp_867 = state_4(D)->t64[0];
  pretmp_856 = state_4(D)->hashbitlen;
  goto <bb 77>;
;;    succ:       77

;;   basic block 76, loop depth 0
;;    pred:       74
  Update64.part.1 (state_4(D), &zo, 8);
  pretmp_868 = state_4(D)->t64[0];
  pretmp_853 = state_4(D)->hashbitlen;
;;    succ:       77

;;   basic block 77, loop depth 0
;;    pred:       76
;;                75
  # prephitmp_552 = PHI <pretmp_868(76), pretmp_867(75)>
  # prephitmp_227 = PHI <pretmp_853(76), pretmp_856(75)>
  _289 = prephitmp_552 + 18446744073709551488;
  state_4(D)->t64[0] = _289;
  if (prephitmp_227 <= 383)
    goto <bb 60>;
  else
    goto <bb 61>;
;;    succ:       60
;;                61

;;   basic block 78, loop depth 0
;;    pred:       61
;;                60
  _290 = state_4(D)->h64[0];
  _291 = _290 >> 32;
  _292 = (unsigned int) _291;
  _293 = _292 >> 24;
  _294 = (unsigned char) _293;
  *hashval_6(D) = _294;
  _295 = state_4(D)->h64[0];
  _296 = _295 >> 32;
  _297 = (unsigned int) _296;
  _298 = _297 >> 16;
  _299 = (unsigned char) _298;
  MEM[(BitSequence *)hashval_6(D) + 1B] = _299;
  _300 = state_4(D)->h64[0];
  _301 = _300 >> 32;
  _302 = (unsigned int) _301;
  _303 = _302 >> 8;
  _304 = (unsigned char) _303;
  MEM[(BitSequence *)hashval_6(D) + 2B] = _304;
  _305 = state_4(D)->h64[0];
  _306 = _305 >> 32;
  _307 = (unsigned char) _306;
  MEM[(BitSequence *)hashval_6(D) + 3B] = _307;
  _308 = state_4(D)->h64[0];
  _309 = (unsigned int) _308;
  _310 = _309 >> 24;
  _311 = (unsigned char) _310;
  MEM[(BitSequence *)hashval_6(D) + 4B] = _311;
  _312 = state_4(D)->h64[0];
  _313 = (unsigned int) _312;
  _314 = _313 >> 16;
  _315 = (unsigned char) _314;
  MEM[(BitSequence *)hashval_6(D) + 5B] = _315;
  _316 = state_4(D)->h64[0];
  _317 = (unsigned int) _316;
  _318 = _317 >> 8;
  _319 = (unsigned char) _318;
  MEM[(BitSequence *)hashval_6(D) + 6B] = _319;
  _320 = state_4(D)->h64[0];
  _321 = (unsigned char) _320;
  MEM[(BitSequence *)hashval_6(D) + 7B] = _321;
  _322 = state_4(D)->h64[1];
  _323 = _322 >> 32;
  _324 = (unsigned int) _323;
  _325 = _324 >> 24;
  _326 = (unsigned char) _325;
  MEM[(BitSequence *)hashval_6(D) + 8B] = _326;
  _327 = state_4(D)->h64[1];
  _328 = _327 >> 32;
  _329 = (unsigned int) _328;
  _330 = _329 >> 16;
  _331 = (unsigned char) _330;
  MEM[(BitSequence *)hashval_6(D) + 9B] = _331;
  _332 = state_4(D)->h64[1];
  _333 = _332 >> 32;
  _334 = (unsigned int) _333;
  _335 = _334 >> 8;
  _336 = (unsigned char) _335;
  MEM[(BitSequence *)hashval_6(D) + 10B] = _336;
  _337 = state_4(D)->h64[1];
  _338 = _337 >> 32;
  _339 = (unsigned char) _338;
  MEM[(BitSequence *)hashval_6(D) + 11B] = _339;
  _340 = state_4(D)->h64[1];
  _341 = (unsigned int) _340;
  _342 = _341 >> 24;
  _343 = (unsigned char) _342;
  MEM[(BitSequence *)hashval_6(D) + 12B] = _343;
  _344 = state_4(D)->h64[1];
  _345 = (unsigned int) _344;
  _346 = _345 >> 16;
  _347 = (unsigned char) _346;
  MEM[(BitSequence *)hashval_6(D) + 13B] = _347;
  _348 = state_4(D)->h64[1];
  _349 = (unsigned int) _348;
  _350 = _349 >> 8;
  _351 = (unsigned char) _350;
  MEM[(BitSequence *)hashval_6(D) + 14B] = _351;
  _352 = state_4(D)->h64[1];
  _353 = (unsigned char) _352;
  MEM[(BitSequence *)hashval_6(D) + 15B] = _353;
  _354 = state_4(D)->h64[2];
  _355 = _354 >> 32;
  _356 = (unsigned int) _355;
  _357 = _356 >> 24;
  _358 = (unsigned char) _357;
  MEM[(BitSequence *)hashval_6(D) + 16B] = _358;
  _359 = state_4(D)->h64[2];
  _360 = _359 >> 32;
  _361 = (unsigned int) _360;
  _362 = _361 >> 16;
  _363 = (unsigned char) _362;
  MEM[(BitSequence *)hashval_6(D) + 17B] = _363;
  _364 = state_4(D)->h64[2];
  _365 = _364 >> 32;
  _366 = (unsigned int) _365;
  _367 = _366 >> 8;
  _368 = (unsigned char) _367;
  MEM[(BitSequence *)hashval_6(D) + 18B] = _368;
  _369 = state_4(D)->h64[2];
  _370 = _369 >> 32;
  _371 = (unsigned char) _370;
  MEM[(BitSequence *)hashval_6(D) + 19B] = _371;
  _372 = state_4(D)->h64[2];
  _373 = (unsigned int) _372;
  _374 = _373 >> 24;
  _375 = (unsigned char) _374;
  MEM[(BitSequence *)hashval_6(D) + 20B] = _375;
  _376 = state_4(D)->h64[2];
  _377 = (unsigned int) _376;
  _378 = _377 >> 16;
  _379 = (unsigned char) _378;
  MEM[(BitSequence *)hashval_6(D) + 21B] = _379;
  _380 = state_4(D)->h64[2];
  _381 = (unsigned int) _380;
  _382 = _381 >> 8;
  _383 = (unsigned char) _382;
  MEM[(BitSequence *)hashval_6(D) + 22B] = _383;
  _384 = state_4(D)->h64[2];
  _385 = (unsigned char) _384;
  MEM[(BitSequence *)hashval_6(D) + 23B] = _385;
  _386 = state_4(D)->h64[3];
  _387 = _386 >> 32;
  _388 = (unsigned int) _387;
  _389 = _388 >> 24;
  _390 = (unsigned char) _389;
  MEM[(BitSequence *)hashval_6(D) + 24B] = _390;
  _391 = state_4(D)->h64[3];
  _392 = _391 >> 32;
  _393 = (unsigned int) _392;
  _394 = _393 >> 16;
  _395 = (unsigned char) _394;
  MEM[(BitSequence *)hashval_6(D) + 25B] = _395;
  _396 = state_4(D)->h64[3];
  _397 = _396 >> 32;
  _398 = (unsigned int) _397;
  _399 = _398 >> 8;
  _400 = (unsigned char) _399;
  MEM[(BitSequence *)hashval_6(D) + 26B] = _400;
  _401 = state_4(D)->h64[3];
  _402 = _401 >> 32;
  _403 = (unsigned char) _402;
  MEM[(BitSequence *)hashval_6(D) + 27B] = _403;
  _404 = state_4(D)->h64[3];
  _405 = (unsigned int) _404;
  _406 = _405 >> 24;
  _407 = (unsigned char) _406;
  MEM[(BitSequence *)hashval_6(D) + 28B] = _407;
  _408 = state_4(D)->h64[3];
  _409 = (unsigned int) _408;
  _410 = _409 >> 16;
  _411 = (unsigned char) _410;
  MEM[(BitSequence *)hashval_6(D) + 29B] = _411;
  _412 = state_4(D)->h64[3];
  _413 = (unsigned int) _412;
  _414 = _413 >> 8;
  _415 = (unsigned char) _414;
  MEM[(BitSequence *)hashval_6(D) + 30B] = _415;
  _416 = state_4(D)->h64[3];
  _417 = (unsigned char) _416;
  MEM[(BitSequence *)hashval_6(D) + 31B] = _417;
  _418 = state_4(D)->h64[4];
  _419 = _418 >> 32;
  _420 = (unsigned int) _419;
  _421 = _420 >> 24;
  _422 = (unsigned char) _421;
  MEM[(BitSequence *)hashval_6(D) + 32B] = _422;
  _423 = state_4(D)->h64[4];
  _424 = _423 >> 32;
  _425 = (unsigned int) _424;
  _426 = _425 >> 16;
  _427 = (unsigned char) _426;
  MEM[(BitSequence *)hashval_6(D) + 33B] = _427;
  _428 = state_4(D)->h64[4];
  _429 = _428 >> 32;
  _430 = (unsigned int) _429;
  _431 = _430 >> 8;
  _432 = (unsigned char) _431;
  MEM[(BitSequence *)hashval_6(D) + 34B] = _432;
  _433 = state_4(D)->h64[4];
  _434 = _433 >> 32;
  _435 = (unsigned char) _434;
  MEM[(BitSequence *)hashval_6(D) + 35B] = _435;
  _436 = state_4(D)->h64[4];
  _437 = (unsigned int) _436;
  _438 = _437 >> 24;
  _439 = (unsigned char) _438;
  MEM[(BitSequence *)hashval_6(D) + 36B] = _439;
  _440 = state_4(D)->h64[4];
  _441 = (unsigned int) _440;
  _442 = _441 >> 16;
  _443 = (unsigned char) _442;
  MEM[(BitSequence *)hashval_6(D) + 37B] = _443;
  _444 = state_4(D)->h64[4];
  _445 = (unsigned int) _444;
  _446 = _445 >> 8;
  _447 = (unsigned char) _446;
  MEM[(BitSequence *)hashval_6(D) + 38B] = _447;
  _448 = state_4(D)->h64[4];
  _449 = (unsigned char) _448;
  MEM[(BitSequence *)hashval_6(D) + 39B] = _449;
  _450 = state_4(D)->h64[5];
  _451 = _450 >> 32;
  _452 = (unsigned int) _451;
  _453 = _452 >> 24;
  _454 = (unsigned char) _453;
  MEM[(BitSequence *)hashval_6(D) + 40B] = _454;
  _455 = state_4(D)->h64[5];
  _456 = _455 >> 32;
  _457 = (unsigned int) _456;
  _458 = _457 >> 16;
  _459 = (unsigned char) _458;
  MEM[(BitSequence *)hashval_6(D) + 41B] = _459;
  _460 = state_4(D)->h64[5];
  _461 = _460 >> 32;
  _462 = (unsigned int) _461;
  _463 = _462 >> 8;
  _464 = (unsigned char) _463;
  MEM[(BitSequence *)hashval_6(D) + 42B] = _464;
  _465 = state_4(D)->h64[5];
  _466 = _465 >> 32;
  _467 = (unsigned char) _466;
  MEM[(BitSequence *)hashval_6(D) + 43B] = _467;
  _468 = state_4(D)->h64[5];
  _469 = (unsigned int) _468;
  _470 = _469 >> 24;
  _471 = (unsigned char) _470;
  MEM[(BitSequence *)hashval_6(D) + 44B] = _471;
  _472 = state_4(D)->h64[5];
  _473 = (unsigned int) _472;
  _474 = _473 >> 16;
  _475 = (unsigned char) _474;
  MEM[(BitSequence *)hashval_6(D) + 45B] = _475;
  _476 = state_4(D)->h64[5];
  _477 = (unsigned int) _476;
  _478 = _477 >> 8;
  _479 = (unsigned char) _478;
  MEM[(BitSequence *)hashval_6(D) + 46B] = _479;
  _480 = state_4(D)->h64[5];
  _481 = (unsigned char) _480;
  MEM[(BitSequence *)hashval_6(D) + 47B] = _481;
  _482 = state_4(D)->hashbitlen;
  if (_482 == 512)
    goto <bb 79>;
  else
    goto <bb 80>;
;;    succ:       79
;;                80

;;   basic block 79, loop depth 0
;;    pred:       78
  _483 = state_4(D)->h64[6];
  _484 = _483 >> 32;
  _485 = (unsigned int) _484;
  _486 = _485 >> 24;
  _487 = (unsigned char) _486;
  MEM[(BitSequence *)hashval_6(D) + 48B] = _487;
  _488 = state_4(D)->h64[6];
  _489 = _488 >> 32;
  _490 = (unsigned int) _489;
  _491 = _490 >> 16;
  _492 = (unsigned char) _491;
  MEM[(BitSequence *)hashval_6(D) + 49B] = _492;
  _493 = state_4(D)->h64[6];
  _494 = _493 >> 32;
  _495 = (unsigned int) _494;
  _496 = _495 >> 8;
  _497 = (unsigned char) _496;
  MEM[(BitSequence *)hashval_6(D) + 50B] = _497;
  _498 = state_4(D)->h64[6];
  _499 = _498 >> 32;
  _500 = (unsigned char) _499;
  MEM[(BitSequence *)hashval_6(D) + 51B] = _500;
  _501 = state_4(D)->h64[6];
  _502 = (unsigned int) _501;
  _503 = _502 >> 24;
  _504 = (unsigned char) _503;
  MEM[(BitSequence *)hashval_6(D) + 52B] = _504;
  _505 = state_4(D)->h64[6];
  _506 = (unsigned int) _505;
  _507 = _506 >> 16;
  _508 = (unsigned char) _507;
  MEM[(BitSequence *)hashval_6(D) + 53B] = _508;
  _509 = state_4(D)->h64[6];
  _510 = (unsigned int) _509;
  _511 = _510 >> 8;
  _512 = (unsigned char) _511;
  MEM[(BitSequence *)hashval_6(D) + 54B] = _512;
  _513 = state_4(D)->h64[6];
  _514 = (unsigned char) _513;
  MEM[(BitSequence *)hashval_6(D) + 55B] = _514;
  _515 = state_4(D)->h64[7];
  _516 = _515 >> 32;
  _517 = (unsigned int) _516;
  _518 = _517 >> 24;
  _519 = (unsigned char) _518;
  MEM[(BitSequence *)hashval_6(D) + 56B] = _519;
  _520 = state_4(D)->h64[7];
  _521 = _520 >> 32;
  _522 = (unsigned int) _521;
  _523 = _522 >> 16;
  _524 = (unsigned char) _523;
  MEM[(BitSequence *)hashval_6(D) + 57B] = _524;
  _525 = state_4(D)->h64[7];
  _526 = _525 >> 32;
  _527 = (unsigned int) _526;
  _528 = _527 >> 8;
  _529 = (unsigned char) _528;
  MEM[(BitSequence *)hashval_6(D) + 58B] = _529;
  _530 = state_4(D)->h64[7];
  _531 = _530 >> 32;
  _532 = (unsigned char) _531;
  MEM[(BitSequence *)hashval_6(D) + 59B] = _532;
  _533 = state_4(D)->h64[7];
  _534 = (unsigned int) _533;
  _535 = _534 >> 24;
  _536 = (unsigned char) _535;
  MEM[(BitSequence *)hashval_6(D) + 60B] = _536;
  _537 = state_4(D)->h64[7];
  _538 = (unsigned int) _537;
  _539 = _538 >> 16;
  _540 = (unsigned char) _539;
  MEM[(BitSequence *)hashval_6(D) + 61B] = _540;
  _541 = state_4(D)->h64[7];
  _542 = (unsigned int) _541;
  _543 = _542 >> 8;
  _544 = (unsigned char) _543;
  MEM[(BitSequence *)hashval_6(D) + 62B] = _544;
  _545 = state_4(D)->h64[7];
  _546 = (unsigned char) _545;
  MEM[(BitSequence *)hashval_6(D) + 63B] = _546;
;;    succ:       80

;;   basic block 80, loop depth 0
;;    pred:       78
;;                79
  msglen ={v} {CLOBBER};
  zz ={v} {CLOBBER};
  zo ={v} {CLOBBER};
  oz ={v} {CLOBBER};
  oo ={v} {CLOBBER};
;;    succ:       81

;;   basic block 81, loop depth 0
;;    pred:       39
;;                80
  return 0;
;;    succ:       EXIT

;;   basic block 82, loop depth 0
;;    pred:       12
;;                11
  _577 = low_14 + 4294966856;
  state_4(D)->t32[0] = _577;
  _900 = 440 - _12;
  _585 = (long long unsigned int) _900;
  Update32.part.0 (state_4(D), &padding, _585);
  goto <bb 16>;
;;    succ:       16

;;   basic block 83, loop depth 0
;;    pred:       49
;;                48
  _581 = 888 - _184;
  _584 = (long long unsigned int) _581;
  _575 = _183 - _584;
  state_4(D)->t64[0] = _575;
  Update64.part.1 (state_4(D), &padding, _584);
  goto <bb 53>;
;;    succ:       53

}



Partition map 

Partition 1 (pretmp_1 - 1 )
Partition 4 (state_4(D) - 4 )
Partition 5 (_5 - 5 )
Partition 6 (hashval_6(D) - 6 )
Partition 7 (pretmp_7 - 7 )
Partition 8 (prephitmp_8 - 8 )
Partition 9 (pretmp_9 - 9 )
Partition 10 (pretmp_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13 - 13 )
Partition 14 (low_14 - 14 )
Partition 15 (high_15 - 15 )
Partition 16 (high_16 - 16 )
Partition 17 (high_17 - 17 )
Partition 18 (_18 - 18 )
Partition 19 (_19 - 19 )
Partition 20 (_20 - 20 )
Partition 21 (_21 - 21 )
Partition 22 (_22 - 22 )
Partition 23 (_23 - 23 )
Partition 24 (_24 - 24 )
Partition 25 (_25 - 25 )
Partition 26 (_26 - 26 )
Partition 27 (_27 - 27 )
Partition 28 (_28 - 28 )
Partition 29 (_29 - 29 )
Partition 30 (_30 - 30 )
Partition 31 (_31 - 31 )
Partition 32 (_32 - 32 )
Partition 33 (_33 - 33 )
Partition 34 (pretmp_34 - 34 )
Partition 38 (_38 - 38 )
Partition 39 (_39 - 39 )
Partition 40 (_40 - 40 )
Partition 42 (_42 - 42 )
Partition 43 (_43 - 43 )
Partition 44 (_44 - 44 )
Partition 45 (_45 - 45 )
Partition 47 (_47 - 47 )
Partition 48 (_48 - 48 )
Partition 49 (_49 - 49 )
Partition 50 (_50 - 50 )
Partition 51 (_51 - 51 )
Partition 52 (_52 - 52 )
Partition 53 (_53 - 53 )
Partition 54 (_54 - 54 )
Partition 55 (_55 - 55 )
Partition 57 (_57 - 57 )
Partition 58 (_58 - 58 )
Partition 59 (_59 - 59 )
Partition 60 (_60 - 60 )
Partition 61 (_61 - 61 )
Partition 62 (pretmp_62 - 62 )
Partition 63 (_63 - 63 )
Partition 64 (_64 - 64 )
Partition 66 (_66 - 66 )
Partition 67 (_67 - 67 )
Partition 68 (_68 - 68 )
Partition 69 (_69 - 69 )
Partition 70 (_70 - 70 )
Partition 71 (_71 - 71 )
Partition 72 (_72 - 72 )
Partition 73 (_73 - 73 )
Partition 74 (_74 - 74 )
Partition 75 (_75 - 75 )
Partition 76 (_76 - 76 )
Partition 77 (_77 - 77 )
Partition 78 (_78 - 78 )
Partition 79 (_79 - 79 )
Partition 80 (_80 - 80 )
Partition 81 (_81 - 81 )
Partition 82 (_82 - 82 )
Partition 83 (_83 - 83 )
Partition 84 (_84 - 84 )
Partition 86 (_86 - 86 )
Partition 88 (_88 - 88 )
Partition 91 (_91 - 91 )
Partition 92 (_92 - 92 )
Partition 93 (_93 - 93 )
Partition 94 (_94 - 94 )
Partition 95 (_95 - 95 )
Partition 96 (_96 - 96 )
Partition 97 (_97 - 97 )
Partition 98 (_98 - 98 )
Partition 99 (_99 - 99 )
Partition 100 (_100 - 100 )
Partition 101 (_101 - 101 )
Partition 102 (_102 - 102 )
Partition 103 (_103 - 103 )
Partition 104 (_104 - 104 )
Partition 105 (_105 - 105 )
Partition 106 (_106 - 106 )
Partition 107 (_107 - 107 )
Partition 108 (_108 - 108 )
Partition 109 (_109 - 109 )
Partition 110 (_110 - 110 )
Partition 111 (_111 - 111 )
Partition 112 (_112 - 112 )
Partition 113 (_113 - 113 )
Partition 114 (_114 - 114 )
Partition 115 (_115 - 115 )
Partition 116 (_116 - 116 )
Partition 117 (_117 - 117 )
Partition 118 (_118 - 118 )
Partition 119 (_119 - 119 )
Partition 120 (_120 - 120 )
Partition 121 (_121 - 121 )
Partition 122 (_122 - 122 )
Partition 123 (_123 - 123 )
Partition 124 (_124 - 124 )
Partition 125 (_125 - 125 )
Partition 126 (_126 - 126 )
Partition 127 (_127 - 127 )
Partition 128 (_128 - 128 )
Partition 129 (_129 - 129 )
Partition 130 (_130 - 130 )
Partition 131 (_131 - 131 )
Partition 132 (_132 - 132 )
Partition 133 (_133 - 133 )
Partition 134 (_134 - 134 )
Partition 135 (_135 - 135 )
Partition 136 (_136 - 136 )
Partition 137 (_137 - 137 )
Partition 138 (_138 - 138 )
Partition 139 (_139 - 139 )
Partition 140 (_140 - 140 )
Partition 141 (_141 - 141 )
Partition 142 (_142 - 142 )
Partition 143 (_143 - 143 )
Partition 144 (_144 - 144 )
Partition 145 (_145 - 145 )
Partition 146 (_146 - 146 )
Partition 147 (_147 - 147 )
Partition 148 (_148 - 148 )
Partition 149 (_149 - 149 )
Partition 150 (_150 - 150 )
Partition 151 (_151 - 151 )
Partition 152 (_152 - 152 )
Partition 153 (_153 - 153 )
Partition 154 (_154 - 154 )
Partition 155 (_155 - 155 )
Partition 156 (_156 - 156 )
Partition 157 (_157 - 157 )
Partition 158 (_158 - 158 )
Partition 159 (_159 - 159 )
Partition 160 (_160 - 160 )
Partition 161 (_161 - 161 )
Partition 162 (_162 - 162 )
Partition 163 (_163 - 163 )
Partition 164 (_164 - 164 )
Partition 165 (_165 - 165 )
Partition 166 (_166 - 166 )
Partition 167 (_167 - 167 )
Partition 168 (_168 - 168 )
Partition 169 (_169 - 169 )
Partition 170 (_170 - 170 )
Partition 171 (_171 - 171 )
Partition 172 (_172 - 172 )
Partition 173 (_173 - 173 )
Partition 174 (_174 - 174 )
Partition 175 (_175 - 175 )
Partition 176 (_176 - 176 )
Partition 177 (_177 - 177 )
Partition 178 (_178 - 178 )
Partition 179 (_179 - 179 )
Partition 180 (_180 - 180 )
Partition 181 (pretmp_181 - 181 )
Partition 182 (pretmp_182 - 182 )
Partition 183 (_183 - 183 )
Partition 184 (_184 - 184 )
Partition 185 (_185 - 185 )
Partition 186 (low_186 - 186 )
Partition 187 (high_187 - 187 )
Partition 188 (high_188 - 188 )
Partition 189 (high_189 - 189 )
Partition 190 (_190 - 190 )
Partition 191 (_191 - 191 )
Partition 192 (_192 - 192 )
Partition 193 (_193 - 193 )
Partition 194 (_194 - 194 )
Partition 195 (_195 - 195 )
Partition 196 (_196 - 196 )
Partition 197 (_197 - 197 )
Partition 198 (_198 - 198 )
Partition 199 (_199 - 199 )
Partition 200 (_200 - 200 )
Partition 201 (_201 - 201 )
Partition 202 (_202 - 202 )
Partition 203 (_203 - 203 )
Partition 204 (_204 - 204 )
Partition 205 (_205 - 205 )
Partition 206 (_206 - 206 )
Partition 207 (_207 - 207 )
Partition 208 (_208 - 208 )
Partition 209 (_209 - 209 )
Partition 210 (_210 - 210 )
Partition 211 (_211 - 211 )
Partition 212 (_212 - 212 )
Partition 213 (_213 - 213 )
Partition 214 (_214 - 214 )
Partition 215 (_215 - 215 )
Partition 216 (_216 - 216 )
Partition 217 (_217 - 217 )
Partition 218 (_218 - 218 )
Partition 219 (_219 - 219 )
Partition 220 (_220 - 220 )
Partition 221 (_221 - 221 )
Partition 222 (_222 - 222 )
Partition 223 (_223 - 223 )
Partition 224 (_224 - 224 )
Partition 225 (_225 - 225 )
Partition 226 (_226 - 226 )
Partition 227 (prephitmp_227 - 227 )
Partition 229 (_229 - 229 )
Partition 230 (_230 - 230 )
Partition 231 (_231 - 231 )
Partition 232 (_232 - 232 )
Partition 233 (_233 - 233 )
Partition 235 (_235 - 235 )
Partition 236 (_236 - 236 )
Partition 237 (_237 - 237 )
Partition 238 (_238 - 238 )
Partition 240 (_240 - 240 )
Partition 241 (_241 - 241 )
Partition 242 (_242 - 242 )
Partition 243 (_243 - 243 )
Partition 244 (_244 - 244 )
Partition 245 (_245 - 245 )
Partition 246 (_246 - 246 )
Partition 247 (_247 - 247 )
Partition 248 (_248 - 248 )
Partition 250 (_250 - 250 )
Partition 251 (_251 - 251 )
Partition 252 (_252 - 252 )
Partition 253 (_253 - 253 )
Partition 254 (_254 - 254 )
Partition 256 (_256 - 256 )
Partition 257 (_257 - 257 )
Partition 258 (_258 - 258 )
Partition 259 (_259 - 259 )
Partition 260 (_260 - 260 )
Partition 261 (_261 - 261 )
Partition 262 (_262 - 262 )
Partition 263 (_263 - 263 )
Partition 264 (_264 - 264 )
Partition 265 (_265 - 265 )
Partition 266 (_266 - 266 )
Partition 267 (_267 - 267 )
Partition 268 (_268 - 268 )
Partition 269 (_269 - 269 )
Partition 270 (_270 - 270 )
Partition 271 (_271 - 271 )
Partition 272 (_272 - 272 )
Partition 273 (_273 - 273 )
Partition 274 (_274 - 274 )
Partition 275 (_275 - 275 )
Partition 276 (_276 - 276 )
Partition 277 (_277 - 277 )
Partition 278 (_278 - 278 )
Partition 279 (_279 - 279 )
Partition 280 (_280 - 280 )
Partition 281 (_281 - 281 )
Partition 282 (_282 - 282 )
Partition 284 (_284 - 284 )
Partition 286 (_286 - 286 )
Partition 289 (_289 - 289 )
Partition 290 (_290 - 290 )
Partition 291 (_291 - 291 )
Partition 292 (_292 - 292 )
Partition 293 (_293 - 293 )
Partition 294 (_294 - 294 )
Partition 295 (_295 - 295 )
Partition 296 (_296 - 296 )
Partition 297 (_297 - 297 )
Partition 298 (_298 - 298 )
Partition 299 (_299 - 299 )
Partition 300 (_300 - 300 )
Partition 301 (_301 - 301 )
Partition 302 (_302 - 302 )
Partition 303 (_303 - 303 )
Partition 304 (_304 - 304 )
Partition 305 (_305 - 305 )
Partition 306 (_306 - 306 )
Partition 307 (_307 - 307 )
Partition 308 (_308 - 308 )
Partition 309 (_309 - 309 )
Partition 310 (_310 - 310 )
Partition 311 (_311 - 311 )
Partition 312 (_312 - 312 )
Partition 313 (_313 - 313 )
Partition 314 (_314 - 314 )
Partition 315 (_315 - 315 )
Partition 316 (_316 - 316 )
Partition 317 (_317 - 317 )
Partition 318 (_318 - 318 )
Partition 319 (_319 - 319 )
Partition 320 (_320 - 320 )
Partition 321 (_321 - 321 )
Partition 322 (_322 - 322 )
Partition 323 (_323 - 323 )
Partition 324 (_324 - 324 )
Partition 325 (_325 - 325 )
Partition 326 (_326 - 326 )
Partition 327 (_327 - 327 )
Partition 328 (_328 - 328 )
Partition 329 (_329 - 329 )
Partition 330 (_330 - 330 )
Partition 331 (_331 - 331 )
Partition 332 (_332 - 332 )
Partition 333 (_333 - 333 )
Partition 334 (_334 - 334 )
Partition 335 (_335 - 335 )
Partition 336 (_336 - 336 )
Partition 337 (_337 - 337 )
Partition 338 (_338 - 338 )
Partition 339 (_339 - 339 )
Partition 340 (_340 - 340 )
Partition 341 (_341 - 341 )
Partition 342 (_342 - 342 )
Partition 343 (_343 - 343 )
Partition 344 (_344 - 344 )
Partition 345 (_345 - 345 )
Partition 346 (_346 - 346 )
Partition 347 (_347 - 347 )
Partition 348 (_348 - 348 )
Partition 349 (_349 - 349 )
Partition 350 (_350 - 350 )
Partition 351 (_351 - 351 )
Partition 352 (_352 - 352 )
Partition 353 (_353 - 353 )
Partition 354 (_354 - 354 )
Partition 355 (_355 - 355 )
Partition 356 (_356 - 356 )
Partition 357 (_357 - 357 )
Partition 358 (_358 - 358 )
Partition 359 (_359 - 359 )
Partition 360 (_360 - 360 )
Partition 361 (_361 - 361 )
Partition 362 (_362 - 362 )
Partition 363 (_363 - 363 )
Partition 364 (_364 - 364 )
Partition 365 (_365 - 365 )
Partition 366 (_366 - 366 )
Partition 367 (_367 - 367 )
Partition 368 (_368 - 368 )
Partition 369 (_369 - 369 )
Partition 370 (_370 - 370 )
Partition 371 (_371 - 371 )
Partition 372 (_372 - 372 )
Partition 373 (_373 - 373 )
Partition 374 (_374 - 374 )
Partition 375 (_375 - 375 )
Partition 376 (_376 - 376 )
Partition 377 (_377 - 377 )
Partition 378 (_378 - 378 )
Partition 379 (_379 - 379 )
Partition 380 (_380 - 380 )
Partition 381 (_381 - 381 )
Partition 382 (_382 - 382 )
Partition 383 (_383 - 383 )
Partition 384 (_384 - 384 )
Partition 385 (_385 - 385 )
Partition 386 (_386 - 386 )
Partition 387 (_387 - 387 )
Partition 388 (_388 - 388 )
Partition 389 (_389 - 389 )
Partition 390 (_390 - 390 )
Partition 391 (_391 - 391 )
Partition 392 (_392 - 392 )
Partition 393 (_393 - 393 )
Partition 394 (_394 - 394 )
Partition 395 (_395 - 395 )
Partition 396 (_396 - 396 )
Partition 397 (_397 - 397 )
Partition 398 (_398 - 398 )
Partition 399 (_399 - 399 )
Partition 400 (_400 - 400 )
Partition 401 (_401 - 401 )
Partition 402 (_402 - 402 )
Partition 403 (_403 - 403 )
Partition 404 (_404 - 404 )
Partition 405 (_405 - 405 )
Partition 406 (_406 - 406 )
Partition 407 (_407 - 407 )
Partition 408 (_408 - 408 )
Partition 409 (_409 - 409 )
Partition 410 (_410 - 410 )
Partition 411 (_411 - 411 )
Partition 412 (_412 - 412 )
Partition 413 (_413 - 413 )
Partition 414 (_414 - 414 )
Partition 415 (_415 - 415 )
Partition 416 (_416 - 416 )
Partition 417 (_417 - 417 )
Partition 418 (_418 - 418 )
Partition 419 (_419 - 419 )
Partition 420 (_420 - 420 )
Partition 421 (_421 - 421 )
Partition 422 (_422 - 422 )
Partition 423 (_423 - 423 )
Partition 424 (_424 - 424 )
Partition 425 (_425 - 425 )
Partition 426 (_426 - 426 )
Partition 427 (_427 - 427 )
Partition 428 (_428 - 428 )
Partition 429 (_429 - 429 )
Partition 430 (_430 - 430 )
Partition 431 (_431 - 431 )
Partition 432 (_432 - 432 )
Partition 433 (_433 - 433 )
Partition 434 (_434 - 434 )
Partition 435 (_435 - 435 )
Partition 436 (_436 - 436 )
Partition 437 (_437 - 437 )
Partition 438 (_438 - 438 )
Partition 439 (_439 - 439 )
Partition 440 (_440 - 440 )
Partition 441 (_441 - 441 )
Partition 442 (_442 - 442 )
Partition 443 (_443 - 443 )
Partition 444 (_444 - 444 )
Partition 445 (_445 - 445 )
Partition 446 (_446 - 446 )
Partition 447 (_447 - 447 )
Partition 448 (_448 - 448 )
Partition 449 (_449 - 449 )
Partition 450 (_450 - 450 )
Partition 451 (_451 - 451 )
Partition 452 (_452 - 452 )
Partition 453 (_453 - 453 )
Partition 454 (_454 - 454 )
Partition 455 (_455 - 455 )
Partition 456 (_456 - 456 )
Partition 457 (_457 - 457 )
Partition 458 (_458 - 458 )
Partition 459 (_459 - 459 )
Partition 460 (_460 - 460 )
Partition 461 (_461 - 461 )
Partition 462 (_462 - 462 )
Partition 463 (_463 - 463 )
Partition 464 (_464 - 464 )
Partition 465 (_465 - 465 )
Partition 466 (_466 - 466 )
Partition 467 (_467 - 467 )
Partition 468 (_468 - 468 )
Partition 469 (_469 - 469 )
Partition 470 (_470 - 470 )
Partition 471 (_471 - 471 )
Partition 472 (_472 - 472 )
Partition 473 (_473 - 473 )
Partition 474 (_474 - 474 )
Partition 475 (_475 - 475 )
Partition 476 (_476 - 476 )
Partition 477 (_477 - 477 )
Partition 478 (_478 - 478 )
Partition 479 (_479 - 479 )
Partition 480 (_480 - 480 )
Partition 481 (_481 - 481 )
Partition 482 (_482 - 482 )
Partition 483 (_483 - 483 )
Partition 484 (_484 - 484 )
Partition 485 (_485 - 485 )
Partition 486 (_486 - 486 )
Partition 487 (_487 - 487 )
Partition 488 (_488 - 488 )
Partition 489 (_489 - 489 )
Partition 490 (_490 - 490 )
Partition 491 (_491 - 491 )
Partition 492 (_492 - 492 )
Partition 493 (_493 - 493 )
Partition 494 (_494 - 494 )
Partition 495 (_495 - 495 )
Partition 496 (_496 - 496 )
Partition 497 (_497 - 497 )
Partition 498 (_498 - 498 )
Partition 499 (_499 - 499 )
Partition 500 (_500 - 500 )
Partition 501 (_501 - 501 )
Partition 502 (_502 - 502 )
Partition 503 (_503 - 503 )
Partition 504 (_504 - 504 )
Partition 505 (_505 - 505 )
Partition 506 (_506 - 506 )
Partition 507 (_507 - 507 )
Partition 508 (_508 - 508 )
Partition 509 (_509 - 509 )
Partition 510 (_510 - 510 )
Partition 511 (_511 - 511 )
Partition 512 (_512 - 512 )
Partition 513 (_513 - 513 )
Partition 514 (_514 - 514 )
Partition 515 (_515 - 515 )
Partition 516 (_516 - 516 )
Partition 517 (_517 - 517 )
Partition 518 (_518 - 518 )
Partition 519 (_519 - 519 )
Partition 520 (_520 - 520 )
Partition 521 (_521 - 521 )
Partition 522 (_522 - 522 )
Partition 523 (_523 - 523 )
Partition 524 (_524 - 524 )
Partition 525 (_525 - 525 )
Partition 526 (_526 - 526 )
Partition 527 (_527 - 527 )
Partition 528 (_528 - 528 )
Partition 529 (_529 - 529 )
Partition 530 (_530 - 530 )
Partition 531 (_531 - 531 )
Partition 532 (_532 - 532 )
Partition 533 (_533 - 533 )
Partition 534 (_534 - 534 )
Partition 535 (_535 - 535 )
Partition 536 (_536 - 536 )
Partition 537 (_537 - 537 )
Partition 538 (_538 - 538 )
Partition 539 (_539 - 539 )
Partition 540 (_540 - 540 )
Partition 541 (_541 - 541 )
Partition 542 (_542 - 542 )
Partition 543 (_543 - 543 )
Partition 544 (_544 - 544 )
Partition 545 (_545 - 545 )
Partition 546 (_546 - 546 )
Partition 549 (_549 - 549 )
Partition 552 (prephitmp_552 - 552 )
Partition 555 (prephitmp_555 - 555 )
Partition 557 (_557 - 557 )
Partition 559 (patt_559 - 559 )
Partition 561 (_561 - 561 )
Partition 568 (_568 - 568 )
Partition 570 (_570 - 570 )
Partition 575 (_575 - 575 )
Partition 577 (_577 - 577 )
Partition 581 (_581 - 581 )
Partition 583 (pretmp_583 - 583 )
Partition 584 (_584 - 584 )
Partition 585 (_585 - 585 )
Partition 586 (prephitmp_586 - 586 )
Partition 592 (_592 - 592 )
Partition 593 (_593 - 593 )
Partition 599 (_599 - 599 )
Partition 602 (_602 - 602 )
Partition 605 (pretmp_605 - 605 )
Partition 607 (prephitmp_607 - 607 )
Partition 608 (_608 - 608 )
Partition 609 (_609 - 609 )
Partition 613 (prephitmp_613 - 613 )
Partition 632 (_632 - 632 )
Partition 733 (_733 - 733 )
Partition 743 (pretmp_743 - 743 )
Partition 748 (pretmp_748 - 748 )
Partition 749 (_749 - 749 )
Partition 853 (pretmp_853 - 853 )
Partition 854 (pretmp_854 - 854 )
Partition 855 (pretmp_855 - 855 )
Partition 856 (pretmp_856 - 856 )
Partition 857 (pretmp_857 - 857 )
Partition 858 (prephitmp_858 - 858 )
Partition 859 (pretmp_859 - 859 )
Partition 860 (pretmp_860 - 860 )
Partition 861 (pretmp_861 - 861 )
Partition 862 (prephitmp_862 - 862 )
Partition 863 (pretmp_863 - 863 )
Partition 864 (prephitmp_864 - 864 )
Partition 865 (prephitmp_865 - 865 )
Partition 866 (pretmp_866 - 866 )
Partition 867 (pretmp_867 - 867 )
Partition 868 (pretmp_868 - 868 )
Partition 882 (_882 - 882 )
Partition 885 (patt_885 - 885 )
Partition 886 (patt_886 - 886 )
Partition 887 (patt_887 - 887 )
Partition 888 (patt_888 - 888 )
Partition 889 (patt_889 - 889 )
Partition 891 (patt_891 - 891 )
Partition 892 (patt_892 - 892 )
Partition 893 (patt_893 - 893 )
Partition 894 (patt_894 - 894 )
Partition 895 (patt_895 - 895 )
Partition 896 (patt_896 - 896 )
Partition 897 (patt_897 - 897 )
Partition 898 (patt_898 - 898 )
Partition 900 (_900 - 900 )
Partition 904 (pretmp_904 - 904 )
Partition 905 (prephitmp_905 - 905 )
Partition 906 (pretmp_906 - 906 )
Partition 907 (prephitmp_907 - 907 )


Partition map 

Partition 0 (pretmp_1 - 1 )
Partition 1 (state_4(D) - 4 )
Partition 2 (_5 - 5 )
Partition 3 (hashval_6(D) - 6 )
Partition 4 (pretmp_7 - 7 )
Partition 5 (prephitmp_8 - 8 )
Partition 6 (pretmp_9 - 9 )
Partition 7 (pretmp_10 - 10 )
Partition 8 (high_15 - 15 )
Partition 9 (high_16 - 16 )
Partition 10 (high_17 - 17 )
Partition 11 (pretmp_34 - 34 )
Partition 12 (_38 - 38 )
Partition 13 (_45 - 45 )
Partition 14 (pretmp_62 - 62 )
Partition 15 (_66 - 66 )
Partition 16 (_70 - 70 )
Partition 17 (_79 - 79 )
Partition 18 (pretmp_181 - 181 )
Partition 19 (pretmp_182 - 182 )
Partition 20 (high_187 - 187 )
Partition 21 (high_188 - 188 )
Partition 22 (high_189 - 189 )
Partition 23 (prephitmp_227 - 227 )
Partition 24 (_233 - 233 )
Partition 25 (_238 - 238 )
Partition 26 (_264 - 264 )
Partition 27 (_277 - 277 )
Partition 28 (prephitmp_552 - 552 )
Partition 29 (prephitmp_555 - 555 )
Partition 30 (pretmp_583 - 583 )
Partition 31 (prephitmp_586 - 586 )
Partition 32 (pretmp_605 - 605 )
Partition 33 (prephitmp_607 - 607 )
Partition 34 (prephitmp_613 - 613 )
Partition 35 (pretmp_743 - 743 )
Partition 36 (pretmp_748 - 748 )
Partition 37 (pretmp_853 - 853 )
Partition 38 (pretmp_854 - 854 )
Partition 39 (pretmp_855 - 855 )
Partition 40 (pretmp_856 - 856 )
Partition 41 (pretmp_857 - 857 )
Partition 42 (prephitmp_858 - 858 )
Partition 43 (pretmp_859 - 859 )
Partition 44 (pretmp_860 - 860 )
Partition 45 (pretmp_861 - 861 )
Partition 46 (prephitmp_862 - 862 )
Partition 47 (pretmp_863 - 863 )
Partition 48 (prephitmp_864 - 864 )
Partition 49 (prephitmp_865 - 865 )
Partition 50 (pretmp_866 - 866 )
Partition 51 (pretmp_867 - 867 )
Partition 52 (pretmp_868 - 868 )
Partition 53 (pretmp_904 - 904 )
Partition 54 (prephitmp_905 - 905 )
Partition 55 (pretmp_906 - 906 )
Partition 56 (prephitmp_907 - 907 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(6100) high_187 <-> high_189
(3900) high_15 <-> high_17
(3050) high_188 <-> high_189
(2457) prephitmp_613 <-> pretmp_854
(2457) pretmp_855 <-> prephitmp_858
(2196) _238 <-> prephitmp_555
(1950) high_16 <-> high_17
(1582) _233 <-> prephitmp_864
(1404) _45 <-> prephitmp_905
(1098) _5 <-> prephitmp_613
(1098) prephitmp_227 <-> pretmp_853
(1098) _264 <-> prephitmp_858
(1098) prephitmp_552 <-> pretmp_868
(1010) _38 <-> prephitmp_907
(975) prephitmp_8 <-> _66
(780) _277 <-> prephitmp_865
(708) _79 <-> prephitmp_586
(702) pretmp_7 <-> prephitmp_8
(615) pretmp_182 <-> prephitmp_555
(541) pretmp_1 <-> prephitmp_613
(541) pretmp_181 <-> prephitmp_858
(537) pretmp_863 <-> prephitmp_864
(491) prephitmp_607 <-> pretmp_748
(491) pretmp_861 <-> prephitmp_862
(427) prephitmp_227 <-> pretmp_856
(427) prephitmp_552 <-> pretmp_867
(408) _5 <-> prephitmp_862
(408) _70 <-> prephitmp_607
(393) pretmp_904 <-> prephitmp_905
(373) pretmp_9 <-> prephitmp_858
(373) prephitmp_613 <-> pretmp_857
(343) pretmp_906 <-> prephitmp_907
(273) prephitmp_8 <-> pretmp_62
(265) pretmp_34 <-> prephitmp_865
(240) prephitmp_586 <-> pretmp_860
(239) prephitmp_555 <-> pretmp_866
(201) pretmp_10 <-> prephitmp_862
(201) prephitmp_607 <-> pretmp_743
(153) pretmp_605 <-> prephitmp_905
(61) pretmp_583 <-> prephitmp_607
(61) pretmp_859 <-> prephitmp_862

Partition map 

Partition 0 (pretmp_1 - 1 )
Partition 1 (state_4(D) - 4 )
Partition 2 (_5 - 5 )
Partition 3 (hashval_6(D) - 6 )
Partition 4 (pretmp_7 - 7 )
Partition 5 (prephitmp_8 - 8 )
Partition 6 (pretmp_9 - 9 )
Partition 7 (pretmp_10 - 10 )
Partition 8 (high_15 - 15 )
Partition 9 (high_16 - 16 )
Partition 10 (high_17 - 17 )
Partition 11 (pretmp_34 - 34 )
Partition 12 (_38 - 38 )
Partition 13 (_45 - 45 )
Partition 14 (pretmp_62 - 62 )
Partition 15 (_66 - 66 )
Partition 16 (_70 - 70 )
Partition 17 (_79 - 79 )
Partition 18 (pretmp_181 - 181 )
Partition 19 (pretmp_182 - 182 )
Partition 20 (high_187 - 187 )
Partition 21 (high_188 - 188 )
Partition 22 (high_189 - 189 )
Partition 23 (prephitmp_227 - 227 )
Partition 24 (_233 - 233 )
Partition 25 (_238 - 238 )
Partition 26 (_264 - 264 )
Partition 27 (_277 - 277 )
Partition 28 (prephitmp_552 - 552 )
Partition 29 (prephitmp_555 - 555 )
Partition 30 (pretmp_583 - 583 )
Partition 31 (prephitmp_586 - 586 )
Partition 32 (pretmp_605 - 605 )
Partition 33 (prephitmp_607 - 607 )
Partition 34 (prephitmp_613 - 613 )
Partition 35 (pretmp_743 - 743 )
Partition 36 (pretmp_748 - 748 )
Partition 37 (pretmp_853 - 853 )
Partition 38 (pretmp_854 - 854 )
Partition 39 (pretmp_855 - 855 )
Partition 40 (pretmp_856 - 856 )
Partition 41 (pretmp_857 - 857 )
Partition 42 (prephitmp_858 - 858 )
Partition 43 (pretmp_859 - 859 )
Partition 44 (pretmp_860 - 860 )
Partition 45 (pretmp_861 - 861 )
Partition 46 (prephitmp_862 - 862 )
Partition 47 (pretmp_863 - 863 )
Partition 48 (prephitmp_864 - 864 )
Partition 49 (prephitmp_865 - 865 )
Partition 50 (pretmp_866 - 866 )
Partition 51 (pretmp_867 - 867 )
Partition 52 (pretmp_868 - 868 )
Partition 53 (pretmp_904 - 904 )
Partition 54 (prephitmp_905 - 905 )
Partition 55 (pretmp_906 - 906 )
Partition 56 (prephitmp_907 - 907 )

Coalesce list: (187)high_187 & (189)high_189 [map: 20, 22] : Success -> 20
Coalesce list: (15)high_15 & (17)high_17 [map: 8, 10] : Success -> 8
Coalesce list: (188)high_188 & (189)high_187 [map: 21, 20] : Success -> 20
Coalesce list: (613)prephitmp_613 & (854)pretmp_854 [map: 34, 38] : Success -> 34
Coalesce list: (855)pretmp_855 & (858)prephitmp_858 [map: 39, 42] : Success -> 39
Coalesce list: (238)_238 & (555)prephitmp_555 [map: 25, 29] : Success -> 25
Coalesce list: (16)high_16 & (17)high_15 [map: 9, 8] : Success -> 8
Coalesce list: (233)_233 & (864)prephitmp_864 [map: 24, 48] : Success -> 24
Coalesce list: (45)_45 & (905)prephitmp_905 [map: 13, 54] : Success -> 13
Coalesce list: (5)_5 & (613)prephitmp_613 [map: 2, 34] : Success -> 34
Coalesce list: (227)prephitmp_227 & (853)pretmp_853 [map: 23, 37] : Success -> 23
Coalesce list: (264)_264 & (858)pretmp_855 [map: 26, 39] : Success -> 39
Coalesce list: (552)prephitmp_552 & (868)pretmp_868 [map: 28, 52] : Success -> 28
Coalesce list: (38)_38 & (907)prephitmp_907 [map: 12, 56] : Success -> 12
Coalesce list: (8)prephitmp_8 & (66)_66 [map: 5, 15] : Success -> 5
Coalesce list: (277)_277 & (865)prephitmp_865 [map: 27, 49] : Success -> 27
Coalesce list: (79)_79 & (586)prephitmp_586 [map: 17, 31] : Success -> 17
Coalesce list: (7)pretmp_7 & (8)prephitmp_8 [map: 4, 5] : Success -> 5
Coalesce list: (182)pretmp_182 & (555)_238 [map: 19, 25] : Success -> 25
Coalesce list: (1)pretmp_1 & (613)prephitmp_613 [map: 0, 34] : Success -> 34
Coalesce list: (181)pretmp_181 & (858)pretmp_855 [map: 18, 39] : Success -> 39
Coalesce list: (863)pretmp_863 & (864)_233 [map: 47, 24] : Success -> 24
Coalesce list: (607)prephitmp_607 & (748)pretmp_748 [map: 33, 36] : Success -> 33
Coalesce list: (861)pretmp_861 & (862)prephitmp_862 [map: 45, 46] : Success -> 45
Coalesce list: (227)prephitmp_227 & (856)pretmp_856 [map: 23, 40] : Success -> 23
Coalesce list: (552)prephitmp_552 & (867)pretmp_867 [map: 28, 51] : Success -> 28
Coalesce list: (5)prephitmp_613 & (862)pretmp_861 [map: 34, 45] : Success -> 34
Coalesce list: (70)_70 & (607)prephitmp_607 [map: 16, 33] : Success -> 33
Coalesce list: (904)pretmp_904 & (905)_45 [map: 53, 13] : Success -> 13
Coalesce list: (9)pretmp_9 & (858)pretmp_855 [map: 6, 39] : Success -> 39
Coalesce list: (613)prephitmp_613 & (857)pretmp_857 [map: 34, 41] : Success -> 34
Coalesce list: (906)pretmp_906 & (907)_38 [map: 55, 12] : Success -> 12
Coalesce list: (8)prephitmp_8 & (62)pretmp_62 [map: 5, 14] : Success -> 5
Coalesce list: (34)pretmp_34 & (865)_277 [map: 11, 27] : Success -> 27
Coalesce list: (586)_79 & (860)pretmp_860 [map: 17, 44] : Success -> 17
Coalesce list: (555)_238 & (866)pretmp_866 [map: 25, 50] : Success -> 25
Coalesce list: (10)pretmp_10 & (862)prephitmp_613 [map: 7, 34] : Success -> 34
Coalesce list: (607)prephitmp_607 & (743)pretmp_743 [map: 33, 35] : Success -> 33
Coalesce list: (605)pretmp_605 & (905)_45 [map: 32, 13] : Success -> 13
Coalesce list: (583)pretmp_583 & (607)prephitmp_607 [map: 30, 33] : Success -> 33
Coalesce list: (859)pretmp_859 & (862)prephitmp_613 [map: 43, 34] : Success -> 34
After Coalescing:

Partition map 

Partition 0 (state_4(D) - 4 )
Partition 1 (hashval_6(D) - 6 )
Partition 2 (prephitmp_8 - 7 8 62 66 )
Partition 3 (_11 - 11 )
Partition 4 (_12 - 12 )
Partition 5 (_13 - 13 )
Partition 6 (low_14 - 14 )
Partition 7 (high_15 - 15 16 17 )
Partition 8 (_18 - 18 )
Partition 9 (_19 - 19 )
Partition 10 (_20 - 20 )
Partition 11 (_21 - 21 )
Partition 12 (_22 - 22 )
Partition 13 (_23 - 23 )
Partition 14 (_24 - 24 )
Partition 15 (_25 - 25 )
Partition 16 (_26 - 26 )
Partition 17 (_27 - 27 )
Partition 18 (_28 - 28 )
Partition 19 (_29 - 29 )
Partition 20 (_30 - 30 )
Partition 21 (_31 - 31 )
Partition 22 (_32 - 32 )
Partition 23 (_33 - 33 )
Partition 24 (_38 - 38 906 907 )
Partition 25 (_39 - 39 )
Partition 26 (_40 - 40 )
Partition 27 (_42 - 42 )
Partition 28 (_43 - 43 )
Partition 29 (_44 - 44 )
Partition 30 (_45 - 45 605 904 905 )
Partition 31 (_47 - 47 )
Partition 32 (_48 - 48 )
Partition 33 (_49 - 49 )
Partition 34 (_50 - 50 )
Partition 35 (_51 - 51 )
Partition 36 (_52 - 52 )
Partition 37 (_53 - 53 )
Partition 38 (_54 - 54 )
Partition 39 (_55 - 55 )
Partition 40 (_57 - 57 )
Partition 41 (_58 - 58 )
Partition 42 (_59 - 59 )
Partition 43 (_60 - 60 )
Partition 44 (_61 - 61 )
Partition 45 (_63 - 63 )
Partition 46 (_64 - 64 )
Partition 47 (_67 - 67 )
Partition 48 (_68 - 68 )
Partition 49 (_69 - 69 )
Partition 50 (_71 - 71 )
Partition 51 (_72 - 72 )
Partition 52 (_73 - 73 )
Partition 53 (_74 - 74 )
Partition 54 (_75 - 75 )
Partition 55 (_76 - 76 )
Partition 56 (_77 - 77 )
Partition 57 (_78 - 78 )
Partition 58 (_79 - 79 586 860 )
Partition 59 (_80 - 80 )
Partition 60 (_81 - 81 )
Partition 61 (_82 - 82 )
Partition 62 (_83 - 83 )
Partition 63 (_84 - 84 )
Partition 64 (_86 - 86 )
Partition 65 (_88 - 88 )
Partition 66 (_91 - 91 )
Partition 67 (_92 - 92 )
Partition 68 (_93 - 93 )
Partition 69 (_94 - 94 )
Partition 70 (_95 - 95 )
Partition 71 (_96 - 96 )
Partition 72 (_97 - 97 )
Partition 73 (_98 - 98 )
Partition 74 (_99 - 99 )
Partition 75 (_100 - 100 )
Partition 76 (_101 - 101 )
Partition 77 (_102 - 102 )
Partition 78 (_103 - 103 )
Partition 79 (_104 - 104 )
Partition 80 (_105 - 105 )
Partition 81 (_106 - 106 )
Partition 82 (_107 - 107 )
Partition 83 (_108 - 108 )
Partition 84 (_109 - 109 )
Partition 85 (_110 - 110 )
Partition 86 (_111 - 111 )
Partition 87 (_112 - 112 )
Partition 88 (_113 - 113 )
Partition 89 (_114 - 114 )
Partition 90 (_115 - 115 )
Partition 91 (_116 - 116 )
Partition 92 (_117 - 117 )
Partition 93 (_118 - 118 )
Partition 94 (_119 - 119 )
Partition 95 (_120 - 120 )
Partition 96 (_121 - 121 )
Partition 97 (_122 - 122 )
Partition 98 (_123 - 123 )
Partition 99 (_124 - 124 )
Partition 100 (_125 - 125 )
Partition 101 (_126 - 126 )
Partition 102 (_127 - 127 )
Partition 103 (_128 - 128 )
Partition 104 (_129 - 129 )
Partition 105 (_130 - 130 )
Partition 106 (_131 - 131 )
Partition 107 (_132 - 132 )
Partition 108 (_133 - 133 )
Partition 109 (_134 - 134 )
Partition 110 (_135 - 135 )
Partition 111 (_136 - 136 )
Partition 112 (_137 - 137 )
Partition 113 (_138 - 138 )
Partition 114 (_139 - 139 )
Partition 115 (_140 - 140 )
Partition 116 (_141 - 141 )
Partition 117 (_142 - 142 )
Partition 118 (_143 - 143 )
Partition 119 (_144 - 144 )
Partition 120 (_145 - 145 )
Partition 121 (_146 - 146 )
Partition 122 (_147 - 147 )
Partition 123 (_148 - 148 )
Partition 124 (_149 - 149 )
Partition 125 (_150 - 150 )
Partition 126 (_151 - 151 )
Partition 127 (_152 - 152 )
Partition 128 (_153 - 153 )
Partition 129 (_154 - 154 )
Partition 130 (_155 - 155 )
Partition 131 (_156 - 156 )
Partition 132 (_157 - 157 )
Partition 133 (_158 - 158 )
Partition 134 (_159 - 159 )
Partition 135 (_160 - 160 )
Partition 136 (_161 - 161 )
Partition 137 (_162 - 162 )
Partition 138 (_163 - 163 )
Partition 139 (_164 - 164 )
Partition 140 (_165 - 165 )
Partition 141 (_166 - 166 )
Partition 142 (_167 - 167 )
Partition 143 (_168 - 168 )
Partition 144 (_169 - 169 )
Partition 145 (_170 - 170 )
Partition 146 (_171 - 171 )
Partition 147 (_172 - 172 )
Partition 148 (_173 - 173 )
Partition 149 (_174 - 174 )
Partition 150 (_175 - 175 )
Partition 151 (_176 - 176 )
Partition 152 (_177 - 177 )
Partition 153 (_178 - 178 )
Partition 154 (_179 - 179 )
Partition 155 (_180 - 180 )
Partition 156 (_183 - 183 )
Partition 157 (_184 - 184 )
Partition 158 (_185 - 185 )
Partition 159 (low_186 - 186 )
Partition 160 (high_187 - 187 188 189 )
Partition 161 (_190 - 190 )
Partition 162 (_191 - 191 )
Partition 163 (_192 - 192 )
Partition 164 (_193 - 193 )
Partition 165 (_194 - 194 )
Partition 166 (_195 - 195 )
Partition 167 (_196 - 196 )
Partition 168 (_197 - 197 )
Partition 169 (_198 - 198 )
Partition 170 (_199 - 199 )
Partition 171 (_200 - 200 )
Partition 172 (_201 - 201 )
Partition 173 (_202 - 202 )
Partition 174 (_203 - 203 )
Partition 175 (_204 - 204 )
Partition 176 (_205 - 205 )
Partition 177 (_206 - 206 )
Partition 178 (_207 - 207 )
Partition 179 (_208 - 208 )
Partition 180 (_209 - 209 )
Partition 181 (_210 - 210 )
Partition 182 (_211 - 211 )
Partition 183 (_212 - 212 )
Partition 184 (_213 - 213 )
Partition 185 (_214 - 214 )
Partition 186 (_215 - 215 )
Partition 187 (_216 - 216 )
Partition 188 (_217 - 217 )
Partition 189 (_218 - 218 )
Partition 190 (_219 - 219 )
Partition 191 (_220 - 220 )
Partition 192 (_221 - 221 )
Partition 193 (_222 - 222 )
Partition 194 (_223 - 223 )
Partition 195 (_224 - 224 )
Partition 196 (_225 - 225 )
Partition 197 (_226 - 226 )
Partition 198 (prephitmp_227 - 227 853 856 )
Partition 199 (_229 - 229 )
Partition 200 (_230 - 230 )
Partition 201 (_231 - 231 )
Partition 202 (_232 - 232 )
Partition 203 (_233 - 233 863 864 )
Partition 204 (_235 - 235 )
Partition 205 (_236 - 236 )
Partition 206 (_237 - 237 )
Partition 207 (_238 - 182 238 555 866 )
Partition 208 (_240 - 240 )
Partition 209 (_241 - 241 )
Partition 210 (_242 - 242 )
Partition 211 (_243 - 243 )
Partition 212 (_244 - 244 )
Partition 213 (_245 - 245 )
Partition 214 (_246 - 246 )
Partition 215 (_247 - 247 )
Partition 216 (_248 - 248 )
Partition 217 (_250 - 250 )
Partition 218 (_251 - 251 )
Partition 219 (_252 - 252 )
Partition 220 (_253 - 253 )
Partition 221 (_254 - 254 )
Partition 222 (_256 - 256 )
Partition 223 (_257 - 257 )
Partition 224 (_258 - 258 )
Partition 225 (_259 - 259 )
Partition 226 (_260 - 260 )
Partition 227 (_261 - 261 )
Partition 228 (_262 - 262 )
Partition 229 (_263 - 263 )
Partition 230 (_265 - 265 )
Partition 231 (_266 - 266 )
Partition 232 (_267 - 267 )
Partition 233 (_268 - 268 )
Partition 234 (_269 - 269 )
Partition 235 (_270 - 270 )
Partition 236 (_271 - 271 )
Partition 237 (_272 - 272 )
Partition 238 (_273 - 273 )
Partition 239 (_274 - 274 )
Partition 240 (_275 - 275 )
Partition 241 (_276 - 276 )
Partition 242 (_277 - 34 277 865 )
Partition 243 (_278 - 278 )
Partition 244 (_279 - 279 )
Partition 245 (_280 - 280 )
Partition 246 (_281 - 281 )
Partition 247 (_282 - 282 )
Partition 248 (_284 - 284 )
Partition 249 (_286 - 286 )
Partition 250 (_289 - 289 )
Partition 251 (_290 - 290 )
Partition 252 (_291 - 291 )
Partition 253 (_292 - 292 )
Partition 254 (_293 - 293 )
Partition 255 (_294 - 294 )
Partition 256 (_295 - 295 )
Partition 257 (_296 - 296 )
Partition 258 (_297 - 297 )
Partition 259 (_298 - 298 )
Partition 260 (_299 - 299 )
Partition 261 (_300 - 300 )
Partition 262 (_301 - 301 )
Partition 263 (_302 - 302 )
Partition 264 (_303 - 303 )
Partition 265 (_304 - 304 )
Partition 266 (_305 - 305 )
Partition 267 (_306 - 306 )
Partition 268 (_307 - 307 )
Partition 269 (_308 - 308 )
Partition 270 (_309 - 309 )
Partition 271 (_310 - 310 )
Partition 272 (_311 - 311 )
Partition 273 (_312 - 312 )
Partition 274 (_313 - 313 )
Partition 275 (_314 - 314 )
Partition 276 (_315 - 315 )
Partition 277 (_316 - 316 )
Partition 278 (_317 - 317 )
Partition 279 (_318 - 318 )
Partition 280 (_319 - 319 )
Partition 281 (_320 - 320 )
Partition 282 (_321 - 321 )
Partition 283 (_322 - 322 )
Partition 284 (_323 - 323 )
Partition 285 (_324 - 324 )
Partition 286 (_325 - 325 )
Partition 287 (_326 - 326 )
Partition 288 (_327 - 327 )
Partition 289 (_328 - 328 )
Partition 290 (_329 - 329 )
Partition 291 (_330 - 330 )
Partition 292 (_331 - 331 )
Partition 293 (_332 - 332 )
Partition 294 (_333 - 333 )
Partition 295 (_334 - 334 )
Partition 296 (_335 - 335 )
Partition 297 (_336 - 336 )
Partition 298 (_337 - 337 )
Partition 299 (_338 - 338 )
Partition 300 (_339 - 339 )
Partition 301 (_340 - 340 )
Partition 302 (_341 - 341 )
Partition 303 (_342 - 342 )
Partition 304 (_343 - 343 )
Partition 305 (_344 - 344 )
Partition 306 (_345 - 345 )
Partition 307 (_346 - 346 )
Partition 308 (_347 - 347 )
Partition 309 (_348 - 348 )
Partition 310 (_349 - 349 )
Partition 311 (_350 - 350 )
Partition 312 (_351 - 351 )
Partition 313 (_352 - 352 )
Partition 314 (_353 - 353 )
Partition 315 (_354 - 354 )
Partition 316 (_355 - 355 )
Partition 317 (_356 - 356 )
Partition 318 (_357 - 357 )
Partition 319 (_358 - 358 )
Partition 320 (_359 - 359 )
Partition 321 (_360 - 360 )
Partition 322 (_361 - 361 )
Partition 323 (_362 - 362 )
Partition 324 (_363 - 363 )
Partition 325 (_364 - 364 )
Partition 326 (_365 - 365 )
Partition 327 (_366 - 366 )
Partition 328 (_367 - 367 )
Partition 329 (_368 - 368 )
Partition 330 (_369 - 369 )
Partition 331 (_370 - 370 )
Partition 332 (_371 - 371 )
Partition 333 (_372 - 372 )
Partition 334 (_373 - 373 )
Partition 335 (_374 - 374 )
Partition 336 (_375 - 375 )
Partition 337 (_376 - 376 )
Partition 338 (_377 - 377 )
Partition 339 (_378 - 378 )
Partition 340 (_379 - 379 )
Partition 341 (_380 - 380 )
Partition 342 (_381 - 381 )
Partition 343 (_382 - 382 )
Partition 344 (_383 - 383 )
Partition 345 (_384 - 384 )
Partition 346 (_385 - 385 )
Partition 347 (_386 - 386 )
Partition 348 (_387 - 387 )
Partition 349 (_388 - 388 )
Partition 350 (_389 - 389 )
Partition 351 (_390 - 390 )
Partition 352 (_391 - 391 )
Partition 353 (_392 - 392 )
Partition 354 (_393 - 393 )
Partition 355 (_394 - 394 )
Partition 356 (_395 - 395 )
Partition 357 (_396 - 396 )
Partition 358 (_397 - 397 )
Partition 359 (_398 - 398 )
Partition 360 (_399 - 399 )
Partition 361 (_400 - 400 )
Partition 362 (_401 - 401 )
Partition 363 (_402 - 402 )
Partition 364 (_403 - 403 )
Partition 365 (_404 - 404 )
Partition 366 (_405 - 405 )
Partition 367 (_406 - 406 )
Partition 368 (_407 - 407 )
Partition 369 (_408 - 408 )
Partition 370 (_409 - 409 )
Partition 371 (_410 - 410 )
Partition 372 (_411 - 411 )
Partition 373 (_412 - 412 )
Partition 374 (_413 - 413 )
Partition 375 (_414 - 414 )
Partition 376 (_415 - 415 )
Partition 377 (_416 - 416 )
Partition 378 (_417 - 417 )
Partition 379 (_418 - 418 )
Partition 380 (_419 - 419 )
Partition 381 (_420 - 420 )
Partition 382 (_421 - 421 )
Partition 383 (_422 - 422 )
Partition 384 (_423 - 423 )
Partition 385 (_424 - 424 )
Partition 386 (_425 - 425 )
Partition 387 (_426 - 426 )
Partition 388 (_427 - 427 )
Partition 389 (_428 - 428 )
Partition 390 (_429 - 429 )
Partition 391 (_430 - 430 )
Partition 392 (_431 - 431 )
Partition 393 (_432 - 432 )
Partition 394 (_433 - 433 )
Partition 395 (_434 - 434 )
Partition 396 (_435 - 435 )
Partition 397 (_436 - 436 )
Partition 398 (_437 - 437 )
Partition 399 (_438 - 438 )
Partition 400 (_439 - 439 )
Partition 401 (_440 - 440 )
Partition 402 (_441 - 441 )
Partition 403 (_442 - 442 )
Partition 404 (_443 - 443 )
Partition 405 (_444 - 444 )
Partition 406 (_445 - 445 )
Partition 407 (_446 - 446 )
Partition 408 (_447 - 447 )
Partition 409 (_448 - 448 )
Partition 410 (_449 - 449 )
Partition 411 (_450 - 450 )
Partition 412 (_451 - 451 )
Partition 413 (_452 - 452 )
Partition 414 (_453 - 453 )
Partition 415 (_454 - 454 )
Partition 416 (_455 - 455 )
Partition 417 (_456 - 456 )
Partition 418 (_457 - 457 )
Partition 419 (_458 - 458 )
Partition 420 (_459 - 459 )
Partition 421 (_460 - 460 )
Partition 422 (_461 - 461 )
Partition 423 (_462 - 462 )
Partition 424 (_463 - 463 )
Partition 425 (_464 - 464 )
Partition 426 (_465 - 465 )
Partition 427 (_466 - 466 )
Partition 428 (_467 - 467 )
Partition 429 (_468 - 468 )
Partition 430 (_469 - 469 )
Partition 431 (_470 - 470 )
Partition 432 (_471 - 471 )
Partition 433 (_472 - 472 )
Partition 434 (_473 - 473 )
Partition 435 (_474 - 474 )
Partition 436 (_475 - 475 )
Partition 437 (_476 - 476 )
Partition 438 (_477 - 477 )
Partition 439 (_478 - 478 )
Partition 440 (_479 - 479 )
Partition 441 (_480 - 480 )
Partition 442 (_481 - 481 )
Partition 443 (_482 - 482 )
Partition 444 (_483 - 483 )
Partition 445 (_484 - 484 )
Partition 446 (_485 - 485 )
Partition 447 (_486 - 486 )
Partition 448 (_487 - 487 )
Partition 449 (_488 - 488 )
Partition 450 (_489 - 489 )
Partition 451 (_490 - 490 )
Partition 452 (_491 - 491 )
Partition 453 (_492 - 492 )
Partition 454 (_493 - 493 )
Partition 455 (_494 - 494 )
Partition 456 (_495 - 495 )
Partition 457 (_496 - 496 )
Partition 458 (_497 - 497 )
Partition 459 (_498 - 498 )
Partition 460 (_499 - 499 )
Partition 461 (_500 - 500 )
Partition 462 (_501 - 501 )
Partition 463 (_502 - 502 )
Partition 464 (_503 - 503 )
Partition 465 (_504 - 504 )
Partition 466 (_505 - 505 )
Partition 467 (_506 - 506 )
Partition 468 (_507 - 507 )
Partition 469 (_508 - 508 )
Partition 470 (_509 - 509 )
Partition 471 (_510 - 510 )
Partition 472 (_511 - 511 )
Partition 473 (_512 - 512 )
Partition 474 (_513 - 513 )
Partition 475 (_514 - 514 )
Partition 476 (_515 - 515 )
Partition 477 (_516 - 516 )
Partition 478 (_517 - 517 )
Partition 479 (_518 - 518 )
Partition 480 (_519 - 519 )
Partition 481 (_520 - 520 )
Partition 482 (_521 - 521 )
Partition 483 (_522 - 522 )
Partition 484 (_523 - 523 )
Partition 485 (_524 - 524 )
Partition 486 (_525 - 525 )
Partition 487 (_526 - 526 )
Partition 488 (_527 - 527 )
Partition 489 (_528 - 528 )
Partition 490 (_529 - 529 )
Partition 491 (_530 - 530 )
Partition 492 (_531 - 531 )
Partition 493 (_532 - 532 )
Partition 494 (_533 - 533 )
Partition 495 (_534 - 534 )
Partition 496 (_535 - 535 )
Partition 497 (_536 - 536 )
Partition 498 (_537 - 537 )
Partition 499 (_538 - 538 )
Partition 500 (_539 - 539 )
Partition 501 (_540 - 540 )
Partition 502 (_541 - 541 )
Partition 503 (_542 - 542 )
Partition 504 (_543 - 543 )
Partition 505 (_544 - 544 )
Partition 506 (_545 - 545 )
Partition 507 (_546 - 546 )
Partition 508 (_549 - 549 )
Partition 509 (prephitmp_552 - 552 867 868 )
Partition 510 (_557 - 557 )
Partition 511 (patt_559 - 559 )
Partition 512 (_561 - 561 )
Partition 513 (_568 - 568 )
Partition 514 (_570 - 570 )
Partition 515 (_575 - 575 )
Partition 516 (_577 - 577 )
Partition 517 (_581 - 581 )
Partition 518 (_584 - 584 )
Partition 519 (_585 - 585 )
Partition 520 (_592 - 592 )
Partition 521 (_593 - 593 )
Partition 522 (_599 - 599 )
Partition 523 (_602 - 602 )
Partition 524 (prephitmp_607 - 70 583 607 743 748 )
Partition 525 (_608 - 608 )
Partition 526 (_609 - 609 )
Partition 527 (prephitmp_613 - 1 5 10 613 854 857 859 861 862 )
Partition 528 (_632 - 632 )
Partition 529 (_733 - 733 )
Partition 530 (_749 - 749 )
Partition 531 (pretmp_855 - 9 181 264 855 858 )
Partition 532 (_882 - 882 )
Partition 533 (patt_885 - 885 )
Partition 534 (patt_886 - 886 )
Partition 535 (patt_887 - 887 )
Partition 536 (patt_888 - 888 )
Partition 537 (patt_889 - 889 )
Partition 538 (patt_891 - 891 )
Partition 539 (patt_892 - 892 )
Partition 540 (patt_893 - 893 )
Partition 541 (patt_894 - 894 )
Partition 542 (patt_895 - 895 )
Partition 543 (patt_896 - 896 )
Partition 544 (patt_897 - 897 )
Partition 545 (patt_898 - 898 )
Partition 546 (_900 - 900 )


Replacing Expressions
_18 replace with --> _18 = high_17 >> 24;

_19 replace with --> _19 = (unsigned char) _18;

_20 replace with --> _20 = high_17 >> 16;

_21 replace with --> _21 = (unsigned char) _20;

_22 replace with --> _22 = high_17 >> 8;

_23 replace with --> _23 = (unsigned char) _22;

_24 replace with --> _24 = (unsigned char) high_17;

_25 replace with --> _25 = low_14 >> 24;

_26 replace with --> _26 = (unsigned char) _25;

_27 replace with --> _27 = low_14 >> 16;

_28 replace with --> _28 = (unsigned char) _27;

_29 replace with --> _29 = low_14 >> 8;

_30 replace with --> _30 = (unsigned char) _29;

_31 replace with --> _31 = (unsigned char) low_14;

_32 replace with --> _32 = _13 & 7;

_33 replace with --> _33 = _11 + 4294967288;

_39 replace with --> _39 = 512 - _12;

_42 replace with --> _42 = prephitmp_907 + 4294966856;

_43 replace with --> _43 = state_4(D)->hashbitlen;

_44 replace with --> _44 = state_4(D)->t32[0];

_47 replace with --> _47 = prephitmp_905 + 4294967232;

_49 replace with --> _49 = state_4(D)->data32[_48];

_50 replace with --> _50 = (signed char) _49;

_52 replace with --> _52 = 8 - _51;

_53 replace with --> _53 = 255 << _52;

_54 replace with --> _54 = (signed char) _53;

_55 replace with --> _55 = _50 & _54;

_57 replace with --> _57 = 128 >> _51;

_58 replace with --> _58 = (signed char) _57;

_59 replace with --> _59 = _55 ^ _58;

_61 replace with --> _61 = _13 + 4294966855;

_63 replace with --> _63 = _60 ^ 1;

_64 replace with --> _64 = (unsigned int) _51;

_67 replace with --> _67 = _184 != 1024;

_68 replace with --> _68 = _232 == 0;

_69 replace with --> _69 = _67 & _68;

_71 replace with --> _71 = _13 & 4294967288;

_72 replace with --> _72 = _71 + 8;

_74 replace with --> _74 = 440 - _73;

_76 replace with --> _76 = low_14 + 4294966784;

_77 replace with --> _77 = state_4(D)->t32[0];

_78 replace with --> _78 = _77 + 4294966856;

_80 replace with --> _80 = _13 & 4294967288;

_81 replace with --> _81 = _80 + 8;

_83 replace with --> _83 = 512 - _82;

_86 replace with --> _86 = prephitmp_586 + 4294966856;

_88 replace with --> _88 = prephitmp_607 + 4294967288;

_91 replace with --> _91 = prephitmp_8 + 4294967232;

_92 replace with --> _92 = state_4(D)->h32[0];

_93 replace with --> _93 = _92 >> 24;

_94 replace with --> _94 = (unsigned char) _93;

_95 replace with --> _95 = state_4(D)->h32[0];

_96 replace with --> _96 = _95 >> 16;

_97 replace with --> _97 = (unsigned char) _96;

_98 replace with --> _98 = state_4(D)->h32[0];

_99 replace with --> _99 = _98 >> 8;

_100 replace with --> _100 = (unsigned char) _99;

_101 replace with --> _101 = state_4(D)->h32[0];

_102 replace with --> _102 = (unsigned char) _101;

_103 replace with --> _103 = state_4(D)->h32[1];

_104 replace with --> _104 = _103 >> 24;

_105 replace with --> _105 = (unsigned char) _104;

_106 replace with --> _106 = state_4(D)->h32[1];

_107 replace with --> _107 = _106 >> 16;

_108 replace with --> _108 = (unsigned char) _107;

_109 replace with --> _109 = state_4(D)->h32[1];

_110 replace with --> _110 = _109 >> 8;

_111 replace with --> _111 = (unsigned char) _110;

_112 replace with --> _112 = state_4(D)->h32[1];

_113 replace with --> _113 = (unsigned char) _112;

_114 replace with --> _114 = state_4(D)->h32[2];

_115 replace with --> _115 = _114 >> 24;

_116 replace with --> _116 = (unsigned char) _115;

_117 replace with --> _117 = state_4(D)->h32[2];

_118 replace with --> _118 = _117 >> 16;

_119 replace with --> _119 = (unsigned char) _118;

_120 replace with --> _120 = state_4(D)->h32[2];

_121 replace with --> _121 = _120 >> 8;

_122 replace with --> _122 = (unsigned char) _121;

_123 replace with --> _123 = state_4(D)->h32[2];

_124 replace with --> _124 = (unsigned char) _123;

_125 replace with --> _125 = state_4(D)->h32[3];

_126 replace with --> _126 = _125 >> 24;

_127 replace with --> _127 = (unsigned char) _126;

_128 replace with --> _128 = state_4(D)->h32[3];

_129 replace with --> _129 = _128 >> 16;

_130 replace with --> _130 = (unsigned char) _129;

_131 replace with --> _131 = state_4(D)->h32[3];

_132 replace with --> _132 = _131 >> 8;

_133 replace with --> _133 = (unsigned char) _132;

_134 replace with --> _134 = state_4(D)->h32[3];

_135 replace with --> _135 = (unsigned char) _134;

_136 replace with --> _136 = state_4(D)->h32[4];

_137 replace with --> _137 = _136 >> 24;

_138 replace with --> _138 = (unsigned char) _137;

_139 replace with --> _139 = state_4(D)->h32[4];

_140 replace with --> _140 = _139 >> 16;

_141 replace with --> _141 = (unsigned char) _140;

_142 replace with --> _142 = state_4(D)->h32[4];

_143 replace with --> _143 = _142 >> 8;

_144 replace with --> _144 = (unsigned char) _143;

_145 replace with --> _145 = state_4(D)->h32[4];

_146 replace with --> _146 = (unsigned char) _145;

_147 replace with --> _147 = state_4(D)->h32[5];

_148 replace with --> _148 = _147 >> 24;

_149 replace with --> _149 = (unsigned char) _148;

_150 replace with --> _150 = state_4(D)->h32[5];

_151 replace with --> _151 = _150 >> 16;

_152 replace with --> _152 = (unsigned char) _151;

_153 replace with --> _153 = state_4(D)->h32[5];

_154 replace with --> _154 = _153 >> 8;

_155 replace with --> _155 = (unsigned char) _154;

_156 replace with --> _156 = state_4(D)->h32[5];

_157 replace with --> _157 = (unsigned char) _156;

_158 replace with --> _158 = state_4(D)->h32[6];

_159 replace with --> _159 = _158 >> 24;

_160 replace with --> _160 = (unsigned char) _159;

_161 replace with --> _161 = state_4(D)->h32[6];

_162 replace with --> _162 = _161 >> 16;

_163 replace with --> _163 = (unsigned char) _162;

_164 replace with --> _164 = state_4(D)->h32[6];

_165 replace with --> _165 = _164 >> 8;

_166 replace with --> _166 = (unsigned char) _165;

_167 replace with --> _167 = state_4(D)->h32[6];

_168 replace with --> _168 = (unsigned char) _167;

_169 replace with --> _169 = state_4(D)->hashbitlen;

_170 replace with --> _170 = state_4(D)->h32[7];

_171 replace with --> _171 = _170 >> 24;

_172 replace with --> _172 = (unsigned char) _171;

_173 replace with --> _173 = state_4(D)->h32[7];

_174 replace with --> _174 = _173 >> 16;

_175 replace with --> _175 = (unsigned char) _174;

_176 replace with --> _176 = state_4(D)->h32[7];

_177 replace with --> _177 = _176 >> 8;

_178 replace with --> _178 = (unsigned char) _177;

_179 replace with --> _179 = state_4(D)->h32[7];

_180 replace with --> _180 = (unsigned char) _179;

_192 replace with --> _192 = _191 >> 24;

_193 replace with --> _193 = (unsigned char) _192;

_194 replace with --> _194 = _191 >> 16;

_195 replace with --> _195 = (unsigned char) _194;

_196 replace with --> _196 = _191 >> 8;

_197 replace with --> _197 = (unsigned char) _196;

_198 replace with --> _198 = (unsigned char) _190;

_200 replace with --> _200 = _199 >> 24;

_201 replace with --> _201 = (unsigned char) _200;

_202 replace with --> _202 = _199 >> 16;

_203 replace with --> _203 = (unsigned char) _202;

_204 replace with --> _204 = _199 >> 8;

_205 replace with --> _205 = (unsigned char) _204;

_206 replace with --> _206 = (unsigned char) high_189;

_209 replace with --> _209 = _208 >> 24;

_210 replace with --> _210 = (unsigned char) _209;

_211 replace with --> _211 = _208 >> 16;

_212 replace with --> _212 = (unsigned char) _211;

_213 replace with --> _213 = _208 >> 8;

_214 replace with --> _214 = (unsigned char) _213;

_215 replace with --> _215 = (unsigned char) _207;

_217 replace with --> _217 = _216 >> 24;

_218 replace with --> _218 = (unsigned char) _217;

_219 replace with --> _219 = _216 >> 16;

_220 replace with --> _220 = (unsigned char) _219;

_221 replace with --> _221 = _216 >> 8;

_222 replace with --> _222 = (unsigned char) _221;

_223 replace with --> _223 = (unsigned char) low_186;

_225 replace with --> _225 = _224 & 7;

_226 replace with --> _226 = _183 + 18446744073709551608;

_229 replace with --> _229 = _230 & _592;

_230 replace with --> _230 = _282 == 0;

_231 replace with --> _231 = 1024 - _184;

_235 replace with --> _235 = prephitmp_864 + 18446744073709550728;

_237 replace with --> _237 = state_4(D)->t64[0];

_240 replace with --> _240 = prephitmp_555 + 18446744073709551488;

_242 replace with --> _242 = state_4(D)->data64[_241];

_243 replace with --> _243 = (signed char) _242;

_246 replace with --> _246 = 255 << _245;

_247 replace with --> _247 = (signed char) _246;

_248 replace with --> _248 = _243 & _247;

_250 replace with --> _250 = 128 >> _244;

_251 replace with --> _251 = (signed char) _250;

_252 replace with --> _252 = _248 ^ _251;

_254 replace with --> _254 = _224 + 4294966407;

_256 replace with --> _256 = _253 ^ 1;

_257 replace with --> _257 = (long long unsigned int) _245;

_258 replace with --> _258 = _183 - _257;

_259 replace with --> _259 = _82 != 512;

_260 replace with --> _260 = _84 == 0;

_261 replace with --> _261 = _259 & _260;

_262 replace with --> _262 = 888 - _184;

_263 replace with --> _263 = (long long unsigned int) _262;

_265 replace with --> _265 = _224 & 4294967288;

_266 replace with --> _266 = _265 + 8;

_268 replace with --> _268 = 888 - _267;

_270 replace with --> _270 = 1024 - _184;

_271 replace with --> _271 = (long long unsigned int) _270;

_272 replace with --> _272 = _183 - _271;

_273 replace with --> _273 = state_4(D)->t64[0];

_274 replace with --> _274 = _273 + 18446744073709550728;

_275 replace with --> _275 = 1024 - _184;

_276 replace with --> _276 = (long long unsigned int) _275;

_278 replace with --> _278 = _224 & 4294967288;

_279 replace with --> _279 = _278 + 8;

_281 replace with --> _281 = 1024 - _280;

_284 replace with --> _284 = prephitmp_865 + 18446744073709550728;

_286 replace with --> _286 = prephitmp_858 + 18446744073709551608;

_289 replace with --> _289 = prephitmp_552 + 18446744073709551488;

_290 replace with --> _290 = state_4(D)->h64[0];

_291 replace with --> _291 = _290 >> 32;

_292 replace with --> _292 = (unsigned int) _291;

_293 replace with --> _293 = _292 >> 24;

_294 replace with --> _294 = (unsigned char) _293;

_295 replace with --> _295 = state_4(D)->h64[0];

_296 replace with --> _296 = _295 >> 32;

_297 replace with --> _297 = (unsigned int) _296;

_298 replace with --> _298 = _297 >> 16;

_299 replace with --> _299 = (unsigned char) _298;

_300 replace with --> _300 = state_4(D)->h64[0];

_301 replace with --> _301 = _300 >> 32;

_302 replace with --> _302 = (unsigned int) _301;

_303 replace with --> _303 = _302 >> 8;

_304 replace with --> _304 = (unsigned char) _303;

_305 replace with --> _305 = state_4(D)->h64[0];

_306 replace with --> _306 = _305 >> 32;

_307 replace with --> _307 = (unsigned char) _306;

_308 replace with --> _308 = state_4(D)->h64[0];

_309 replace with --> _309 = (unsigned int) _308;

_310 replace with --> _310 = _309 >> 24;

_311 replace with --> _311 = (unsigned char) _310;

_312 replace with --> _312 = state_4(D)->h64[0];

_313 replace with --> _313 = (unsigned int) _312;

_314 replace with --> _314 = _313 >> 16;

_315 replace with --> _315 = (unsigned char) _314;

_316 replace with --> _316 = state_4(D)->h64[0];

_317 replace with --> _317 = (unsigned int) _316;

_318 replace with --> _318 = _317 >> 8;

_319 replace with --> _319 = (unsigned char) _318;

_320 replace with --> _320 = state_4(D)->h64[0];

_321 replace with --> _321 = (unsigned char) _320;

_322 replace with --> _322 = state_4(D)->h64[1];

_323 replace with --> _323 = _322 >> 32;

_324 replace with --> _324 = (unsigned int) _323;

_325 replace with --> _325 = _324 >> 24;

_326 replace with --> _326 = (unsigned char) _325;

_327 replace with --> _327 = state_4(D)->h64[1];

_328 replace with --> _328 = _327 >> 32;

_329 replace with --> _329 = (unsigned int) _328;

_330 replace with --> _330 = _329 >> 16;

_331 replace with --> _331 = (unsigned char) _330;

_332 replace with --> _332 = state_4(D)->h64[1];

_333 replace with --> _333 = _332 >> 32;

_334 replace with --> _334 = (unsigned int) _333;

_335 replace with --> _335 = _334 >> 8;

_336 replace with --> _336 = (unsigned char) _335;

_337 replace with --> _337 = state_4(D)->h64[1];

_338 replace with --> _338 = _337 >> 32;

_339 replace with --> _339 = (unsigned char) _338;

_340 replace with --> _340 = state_4(D)->h64[1];

_341 replace with --> _341 = (unsigned int) _340;

_342 replace with --> _342 = _341 >> 24;

_343 replace with --> _343 = (unsigned char) _342;

_344 replace with --> _344 = state_4(D)->h64[1];

_345 replace with --> _345 = (unsigned int) _344;

_346 replace with --> _346 = _345 >> 16;

_347 replace with --> _347 = (unsigned char) _346;

_348 replace with --> _348 = state_4(D)->h64[1];

_349 replace with --> _349 = (unsigned int) _348;

_350 replace with --> _350 = _349 >> 8;

_351 replace with --> _351 = (unsigned char) _350;

_352 replace with --> _352 = state_4(D)->h64[1];

_353 replace with --> _353 = (unsigned char) _352;

_354 replace with --> _354 = state_4(D)->h64[2];

_355 replace with --> _355 = _354 >> 32;

_356 replace with --> _356 = (unsigned int) _355;

_357 replace with --> _357 = _356 >> 24;

_358 replace with --> _358 = (unsigned char) _357;

_359 replace with --> _359 = state_4(D)->h64[2];

_360 replace with --> _360 = _359 >> 32;

_361 replace with --> _361 = (unsigned int) _360;

_362 replace with --> _362 = _361 >> 16;

_363 replace with --> _363 = (unsigned char) _362;

_364 replace with --> _364 = state_4(D)->h64[2];

_365 replace with --> _365 = _364 >> 32;

_366 replace with --> _366 = (unsigned int) _365;

_367 replace with --> _367 = _366 >> 8;

_368 replace with --> _368 = (unsigned char) _367;

_369 replace with --> _369 = state_4(D)->h64[2];

_370 replace with --> _370 = _369 >> 32;

_371 replace with --> _371 = (unsigned char) _370;

_372 replace with --> _372 = state_4(D)->h64[2];

_373 replace with --> _373 = (unsigned int) _372;

_374 replace with --> _374 = _373 >> 24;

_375 replace with --> _375 = (unsigned char) _374;

_376 replace with --> _376 = state_4(D)->h64[2];

_377 replace with --> _377 = (unsigned int) _376;

_378 replace with --> _378 = _377 >> 16;

_379 replace with --> _379 = (unsigned char) _378;

_380 replace with --> _380 = state_4(D)->h64[2];

_381 replace with --> _381 = (unsigned int) _380;

_382 replace with --> _382 = _381 >> 8;

_383 replace with --> _383 = (unsigned char) _382;

_384 replace with --> _384 = state_4(D)->h64[2];

_385 replace with --> _385 = (unsigned char) _384;

_386 replace with --> _386 = state_4(D)->h64[3];

_387 replace with --> _387 = _386 >> 32;

_388 replace with --> _388 = (unsigned int) _387;

_389 replace with --> _389 = _388 >> 24;

_390 replace with --> _390 = (unsigned char) _389;

_391 replace with --> _391 = state_4(D)->h64[3];

_392 replace with --> _392 = _391 >> 32;

_393 replace with --> _393 = (unsigned int) _392;

_394 replace with --> _394 = _393 >> 16;

_395 replace with --> _395 = (unsigned char) _394;

_396 replace with --> _396 = state_4(D)->h64[3];

_397 replace with --> _397 = _396 >> 32;

_398 replace with --> _398 = (unsigned int) _397;

_399 replace with --> _399 = _398 >> 8;

_400 replace with --> _400 = (unsigned char) _399;

_401 replace with --> _401 = state_4(D)->h64[3];

_402 replace with --> _402 = _401 >> 32;

_403 replace with --> _403 = (unsigned char) _402;

_404 replace with --> _404 = state_4(D)->h64[3];

_405 replace with --> _405 = (unsigned int) _404;

_406 replace with --> _406 = _405 >> 24;

_407 replace with --> _407 = (unsigned char) _406;

_408 replace with --> _408 = state_4(D)->h64[3];

_409 replace with --> _409 = (unsigned int) _408;

_410 replace with --> _410 = _409 >> 16;

_411 replace with --> _411 = (unsigned char) _410;

_412 replace with --> _412 = state_4(D)->h64[3];

_413 replace with --> _413 = (unsigned int) _412;

_414 replace with --> _414 = _413 >> 8;

_415 replace with --> _415 = (unsigned char) _414;

_416 replace with --> _416 = state_4(D)->h64[3];

_417 replace with --> _417 = (unsigned char) _416;

_418 replace with --> _418 = state_4(D)->h64[4];

_419 replace with --> _419 = _418 >> 32;

_420 replace with --> _420 = (unsigned int) _419;

_421 replace with --> _421 = _420 >> 24;

_422 replace with --> _422 = (unsigned char) _421;

_423 replace with --> _423 = state_4(D)->h64[4];

_424 replace with --> _424 = _423 >> 32;

_425 replace with --> _425 = (unsigned int) _424;

_426 replace with --> _426 = _425 >> 16;

_427 replace with --> _427 = (unsigned char) _426;

_428 replace with --> _428 = state_4(D)->h64[4];

_429 replace with --> _429 = _428 >> 32;

_430 replace with --> _430 = (unsigned int) _429;

_431 replace with --> _431 = _430 >> 8;

_432 replace with --> _432 = (unsigned char) _431;

_433 replace with --> _433 = state_4(D)->h64[4];

_434 replace with --> _434 = _433 >> 32;

_435 replace with --> _435 = (unsigned char) _434;

_436 replace with --> _436 = state_4(D)->h64[4];

_437 replace with --> _437 = (unsigned int) _436;

_438 replace with --> _438 = _437 >> 24;

_439 replace with --> _439 = (unsigned char) _438;

_440 replace with --> _440 = state_4(D)->h64[4];

_441 replace with --> _441 = (unsigned int) _440;

_442 replace with --> _442 = _441 >> 16;

_443 replace with --> _443 = (unsigned char) _442;

_444 replace with --> _444 = state_4(D)->h64[4];

_445 replace with --> _445 = (unsigned int) _444;

_446 replace with --> _446 = _445 >> 8;

_447 replace with --> _447 = (unsigned char) _446;

_448 replace with --> _448 = state_4(D)->h64[4];

_449 replace with --> _449 = (unsigned char) _448;

_450 replace with --> _450 = state_4(D)->h64[5];

_451 replace with --> _451 = _450 >> 32;

_452 replace with --> _452 = (unsigned int) _451;

_453 replace with --> _453 = _452 >> 24;

_454 replace with --> _454 = (unsigned char) _453;

_455 replace with --> _455 = state_4(D)->h64[5];

_456 replace with --> _456 = _455 >> 32;

_457 replace with --> _457 = (unsigned int) _456;

_458 replace with --> _458 = _457 >> 16;

_459 replace with --> _459 = (unsigned char) _458;

_460 replace with --> _460 = state_4(D)->h64[5];

_461 replace with --> _461 = _460 >> 32;

_462 replace with --> _462 = (unsigned int) _461;

_463 replace with --> _463 = _462 >> 8;

_464 replace with --> _464 = (unsigned char) _463;

_465 replace with --> _465 = state_4(D)->h64[5];

_466 replace with --> _466 = _465 >> 32;

_467 replace with --> _467 = (unsigned char) _466;

_468 replace with --> _468 = state_4(D)->h64[5];

_469 replace with --> _469 = (unsigned int) _468;

_470 replace with --> _470 = _469 >> 24;

_471 replace with --> _471 = (unsigned char) _470;

_472 replace with --> _472 = state_4(D)->h64[5];

_473 replace with --> _473 = (unsigned int) _472;

_474 replace with --> _474 = _473 >> 16;

_475 replace with --> _475 = (unsigned char) _474;

_476 replace with --> _476 = state_4(D)->h64[5];

_477 replace with --> _477 = (unsigned int) _476;

_478 replace with --> _478 = _477 >> 8;

_479 replace with --> _479 = (unsigned char) _478;

_480 replace with --> _480 = state_4(D)->h64[5];

_481 replace with --> _481 = (unsigned char) _480;

_482 replace with --> _482 = state_4(D)->hashbitlen;

_483 replace with --> _483 = state_4(D)->h64[6];

_484 replace with --> _484 = _483 >> 32;

_485 replace with --> _485 = (unsigned int) _484;

_486 replace with --> _486 = _485 >> 24;

_487 replace with --> _487 = (unsigned char) _486;

_488 replace with --> _488 = state_4(D)->h64[6];

_489 replace with --> _489 = _488 >> 32;

_490 replace with --> _490 = (unsigned int) _489;

_491 replace with --> _491 = _490 >> 16;

_492 replace with --> _492 = (unsigned char) _491;

_493 replace with --> _493 = state_4(D)->h64[6];

_494 replace with --> _494 = _493 >> 32;

_495 replace with --> _495 = (unsigned int) _494;

_496 replace with --> _496 = _495 >> 8;

_497 replace with --> _497 = (unsigned char) _496;

_498 replace with --> _498 = state_4(D)->h64[6];

_499 replace with --> _499 = _498 >> 32;

_500 replace with --> _500 = (unsigned char) _499;

_501 replace with --> _501 = state_4(D)->h64[6];

_502 replace with --> _502 = (unsigned int) _501;

_503 replace with --> _503 = _502 >> 24;

_504 replace with --> _504 = (unsigned char) _503;

_505 replace with --> _505 = state_4(D)->h64[6];

_506 replace with --> _506 = (unsigned int) _505;

_507 replace with --> _507 = _506 >> 16;

_508 replace with --> _508 = (unsigned char) _507;

_509 replace with --> _509 = state_4(D)->h64[6];

_510 replace with --> _510 = (unsigned int) _509;

_511 replace with --> _511 = _510 >> 8;

_512 replace with --> _512 = (unsigned char) _511;

_513 replace with --> _513 = state_4(D)->h64[6];

_514 replace with --> _514 = (unsigned char) _513;

_515 replace with --> _515 = state_4(D)->h64[7];

_516 replace with --> _516 = _515 >> 32;

_517 replace with --> _517 = (unsigned int) _516;

_518 replace with --> _518 = _517 >> 24;

_519 replace with --> _519 = (unsigned char) _518;

_520 replace with --> _520 = state_4(D)->h64[7];

_521 replace with --> _521 = _520 >> 32;

_522 replace with --> _522 = (unsigned int) _521;

_523 replace with --> _523 = _522 >> 16;

_524 replace with --> _524 = (unsigned char) _523;

_525 replace with --> _525 = state_4(D)->h64[7];

_526 replace with --> _526 = _525 >> 32;

_527 replace with --> _527 = (unsigned int) _526;

_528 replace with --> _528 = _527 >> 8;

_529 replace with --> _529 = (unsigned char) _528;

_530 replace with --> _530 = state_4(D)->h64[7];

_531 replace with --> _531 = _530 >> 32;

_532 replace with --> _532 = (unsigned char) _531;

_533 replace with --> _533 = state_4(D)->h64[7];

_534 replace with --> _534 = (unsigned int) _533;

_535 replace with --> _535 = _534 >> 24;

_536 replace with --> _536 = (unsigned char) _535;

_537 replace with --> _537 = state_4(D)->h64[7];

_538 replace with --> _538 = (unsigned int) _537;

_539 replace with --> _539 = _538 >> 16;

_540 replace with --> _540 = (unsigned char) _539;

_541 replace with --> _541 = state_4(D)->h64[7];

_542 replace with --> _542 = (unsigned int) _541;

_543 replace with --> _543 = _542 >> 8;

_544 replace with --> _544 = (unsigned char) _543;

_545 replace with --> _545 = state_4(D)->h64[7];

_546 replace with --> _546 = (unsigned char) _545;

_549 replace with --> _549 = state_4(D)->hashbitlen;

_557 replace with --> _557 = &state_4(D)->data64;

_561 replace with --> _561 = _272 + 1024;

_568 replace with --> _568 = _570 & _608;

_570 replace with --> _570 = _75 == 0;

_575 replace with --> _575 = _183 - _584;

_577 replace with --> _577 = low_14 + 4294966856;

_581 replace with --> _581 = 888 - _184;

_585 replace with --> _585 = (long long unsigned int) _900;

_592 replace with --> _592 = _280 != 1024;

_593 replace with --> _593 = _602 & _609;

_599 replace with --> _599 = _632 & _733;

_602 replace with --> _602 = _40 == 0;

_608 replace with --> _608 = _73 != 512;

_609 replace with --> _609 = _12 != 512;

_632 replace with --> _632 = _269 == 0;

_733 replace with --> _733 = _267 != 1024;

_749 replace with --> _749 = _11 + 4294967288;

_882 replace with --> _882 = _258 + 18446744073709551488;

_900 replace with --> _900 = 440 - _12;


Final (struct hashState * state, BitSequence * hashval)
{
  unsigned char msglen[16];
  BitSequence zz;
  BitSequence zo;
  BitSequence oz;
  BitSequence oo;
  u64 low;
  u64 high;
  unsigned char msglen[8];
  BitSequence zz;
  BitSequence zo;
  BitSequence oz;
  BitSequence oo;
  u32 low;
  u32 high;
  int pretmp_1;
  int _5;
  u32 pretmp_7;
  u32 prephitmp_8;
  u64 pretmp_9;
  int pretmp_10;
  unsigned int _11;
  int _12;
  unsigned int _13;
  unsigned int _18;
  unsigned char _19;
  unsigned int _20;
  unsigned char _21;
  unsigned int _22;
  unsigned char _23;
  unsigned char _24;
  unsigned int _25;
  unsigned char _26;
  unsigned int _27;
  unsigned char _28;
  unsigned int _29;
  unsigned char _30;
  unsigned char _31;
  unsigned int _32;
  unsigned int _33;
  u64 pretmp_34;
  unsigned int _38;
  int _39;
  long long unsigned int _40;
  unsigned int _42;
  int _43;
  unsigned int _44;
  unsigned int _45;
  unsigned int _47;
  int _48;
  unsigned char _49;
  signed char _50;
  int _51;
  int _52;
  int _53;
  signed char _54;
  signed char _55;
  int _57;
  signed char _58;
  signed char _59;
  unsigned char _60;
  unsigned int _61;
  u32 pretmp_62;
  unsigned char _63;
  unsigned int _64;
  unsigned int _66;
  _Bool _67;
  _Bool _68;
  _Bool _69;
  unsigned int _70;
  unsigned int _71;
  unsigned int _72;
  int _73;
  int _74;
  long long unsigned int _75;
  unsigned int _76;
  unsigned int _77;
  unsigned int _78;
  unsigned int _79;
  unsigned int _80;
  unsigned int _81;
  int _82;
  int _83;
  long long unsigned int _84;
  unsigned int _86;
  unsigned int _88;
  unsigned int _91;
  unsigned int _92;
  unsigned int _93;
  unsigned char _94;
  unsigned int _95;
  unsigned int _96;
  unsigned char _97;
  unsigned int _98;
  unsigned int _99;
  unsigned char _100;
  unsigned int _101;
  unsigned char _102;
  unsigned int _103;
  unsigned int _104;
  unsigned char _105;
  unsigned int _106;
  unsigned int _107;
  unsigned char _108;
  unsigned int _109;
  unsigned int _110;
  unsigned char _111;
  unsigned int _112;
  unsigned char _113;
  unsigned int _114;
  unsigned int _115;
  unsigned char _116;
  unsigned int _117;
  unsigned int _118;
  unsigned char _119;
  unsigned int _120;
  unsigned int _121;
  unsigned char _122;
  unsigned int _123;
  unsigned char _124;
  unsigned int _125;
  unsigned int _126;
  unsigned char _127;
  unsigned int _128;
  unsigned int _129;
  unsigned char _130;
  unsigned int _131;
  unsigned int _132;
  unsigned char _133;
  unsigned int _134;
  unsigned char _135;
  unsigned int _136;
  unsigned int _137;
  unsigned char _138;
  unsigned int _139;
  unsigned int _140;
  unsigned char _141;
  unsigned int _142;
  unsigned int _143;
  unsigned char _144;
  unsigned int _145;
  unsigned char _146;
  unsigned int _147;
  unsigned int _148;
  unsigned char _149;
  unsigned int _150;
  unsigned int _151;
  unsigned char _152;
  unsigned int _153;
  unsigned int _154;
  unsigned char _155;
  unsigned int _156;
  unsigned char _157;
  unsigned int _158;
  unsigned int _159;
  unsigned char _160;
  unsigned int _161;
  unsigned int _162;
  unsigned char _163;
  unsigned int _164;
  unsigned int _165;
  unsigned char _166;
  unsigned int _167;
  unsigned char _168;
  int _169;
  unsigned int _170;
  unsigned int _171;
  unsigned char _172;
  unsigned int _173;
  unsigned int _174;
  unsigned char _175;
  unsigned int _176;
  unsigned int _177;
  unsigned char _178;
  unsigned int _179;
  unsigned char _180;
  u64 pretmp_181;
  u64 pretmp_182;
  long long unsigned int _183;
  int _184;
  long long unsigned int _185;
  long long unsigned int _190;
  unsigned int _191;
  unsigned int _192;
  unsigned char _193;
  unsigned int _194;
  unsigned char _195;
  unsigned int _196;
  unsigned char _197;
  unsigned char _198;
  unsigned int _199;
  unsigned int _200;
  unsigned char _201;
  unsigned int _202;
  unsigned char _203;
  unsigned int _204;
  unsigned char _205;
  unsigned char _206;
  long long unsigned int _207;
  unsigned int _208;
  unsigned int _209;
  unsigned char _210;
  unsigned int _211;
  unsigned char _212;
  unsigned int _213;
  unsigned char _214;
  unsigned char _215;
  unsigned int _216;
  unsigned int _217;
  unsigned char _218;
  unsigned int _219;
  unsigned char _220;
  unsigned int _221;
  unsigned char _222;
  unsigned char _223;
  unsigned int _224;
  unsigned int _225;
  long long unsigned int _226;
  int prephitmp_227;
  _Bool _229;
  _Bool _230;
  int _231;
  long long unsigned int _232;
  long long unsigned int _233;
  long long unsigned int _235;
  int _236;
  long long unsigned int _237;
  long long unsigned int _238;
  long long unsigned int _240;
  int _241;
  unsigned char _242;
  signed char _243;
  int _244;
  int _245;
  int _246;
  signed char _247;
  signed char _248;
  int _250;
  signed char _251;
  signed char _252;
  unsigned char _253;
  unsigned int _254;
  unsigned char _256;
  long long unsigned int _257;
  long long unsigned int _258;
  _Bool _259;
  _Bool _260;
  _Bool _261;
  int _262;
  long long unsigned int _263;
  long long unsigned int _264;
  unsigned int _265;
  unsigned int _266;
  int _267;
  int _268;
  long long unsigned int _269;
  int _270;
  long long unsigned int _271;
  long long unsigned int _272;
  long long unsigned int _273;
  long long unsigned int _274;
  int _275;
  long long unsigned int _276;
  long long unsigned int _277;
  unsigned int _278;
  unsigned int _279;
  int _280;
  int _281;
  long long unsigned int _282;
  long long unsigned int _284;
  long long unsigned int _286;
  long long unsigned int _289;
  long long unsigned int _290;
  long long unsigned int _291;
  unsigned int _292;
  unsigned int _293;
  unsigned char _294;
  long long unsigned int _295;
  long long unsigned int _296;
  unsigned int _297;
  unsigned int _298;
  unsigned char _299;
  long long unsigned int _300;
  long long unsigned int _301;
  unsigned int _302;
  unsigned int _303;
  unsigned char _304;
  long long unsigned int _305;
  long long unsigned int _306;
  unsigned char _307;
  long long unsigned int _308;
  unsigned int _309;
  unsigned int _310;
  unsigned char _311;
  long long unsigned int _312;
  unsigned int _313;
  unsigned int _314;
  unsigned char _315;
  long long unsigned int _316;
  unsigned int _317;
  unsigned int _318;
  unsigned char _319;
  long long unsigned int _320;
  unsigned char _321;
  long long unsigned int _322;
  long long unsigned int _323;
  unsigned int _324;
  unsigned int _325;
  unsigned char _326;
  long long unsigned int _327;
  long long unsigned int _328;
  unsigned int _329;
  unsigned int _330;
  unsigned char _331;
  long long unsigned int _332;
  long long unsigned int _333;
  unsigned int _334;
  unsigned int _335;
  unsigned char _336;
  long long unsigned int _337;
  long long unsigned int _338;
  unsigned char _339;
  long long unsigned int _340;
  unsigned int _341;
  unsigned int _342;
  unsigned char _343;
  long long unsigned int _344;
  unsigned int _345;
  unsigned int _346;
  unsigned char _347;
  long long unsigned int _348;
  unsigned int _349;
  unsigned int _350;
  unsigned char _351;
  long long unsigned int _352;
  unsigned char _353;
  long long unsigned int _354;
  long long unsigned int _355;
  unsigned int _356;
  unsigned int _357;
  unsigned char _358;
  long long unsigned int _359;
  long long unsigned int _360;
  unsigned int _361;
  unsigned int _362;
  unsigned char _363;
  long long unsigned int _364;
  long long unsigned int _365;
  unsigned int _366;
  unsigned int _367;
  unsigned char _368;
  long long unsigned int _369;
  long long unsigned int _370;
  unsigned char _371;
  long long unsigned int _372;
  unsigned int _373;
  unsigned int _374;
  unsigned char _375;
  long long unsigned int _376;
  unsigned int _377;
  unsigned int _378;
  unsigned char _379;
  long long unsigned int _380;
  unsigned int _381;
  unsigned int _382;
  unsigned char _383;
  long long unsigned int _384;
  unsigned char _385;
  long long unsigned int _386;
  long long unsigned int _387;
  unsigned int _388;
  unsigned int _389;
  unsigned char _390;
  long long unsigned int _391;
  long long unsigned int _392;
  unsigned int _393;
  unsigned int _394;
  unsigned char _395;
  long long unsigned int _396;
  long long unsigned int _397;
  unsigned int _398;
  unsigned int _399;
  unsigned char _400;
  long long unsigned int _401;
  long long unsigned int _402;
  unsigned char _403;
  long long unsigned int _404;
  unsigned int _405;
  unsigned int _406;
  unsigned char _407;
  long long unsigned int _408;
  unsigned int _409;
  unsigned int _410;
  unsigned char _411;
  long long unsigned int _412;
  unsigned int _413;
  unsigned int _414;
  unsigned char _415;
  long long unsigned int _416;
  unsigned char _417;
  long long unsigned int _418;
  long long unsigned int _419;
  unsigned int _420;
  unsigned int _421;
  unsigned char _422;
  long long unsigned int _423;
  long long unsigned int _424;
  unsigned int _425;
  unsigned int _426;
  unsigned char _427;
  long long unsigned int _428;
  long long unsigned int _429;
  unsigned int _430;
  unsigned int _431;
  unsigned char _432;
  long long unsigned int _433;
  long long unsigned int _434;
  unsigned char _435;
  long long unsigned int _436;
  unsigned int _437;
  unsigned int _438;
  unsigned char _439;
  long long unsigned int _440;
  unsigned int _441;
  unsigned int _442;
  unsigned char _443;
  long long unsigned int _444;
  unsigned int _445;
  unsigned int _446;
  unsigned char _447;
  long long unsigned int _448;
  unsigned char _449;
  long long unsigned int _450;
  long long unsigned int _451;
  unsigned int _452;
  unsigned int _453;
  unsigned char _454;
  long long unsigned int _455;
  long long unsigned int _456;
  unsigned int _457;
  unsigned int _458;
  unsigned char _459;
  long long unsigned int _460;
  long long unsigned int _461;
  unsigned int _462;
  unsigned int _463;
  unsigned char _464;
  long long unsigned int _465;
  long long unsigned int _466;
  unsigned char _467;
  long long unsigned int _468;
  unsigned int _469;
  unsigned int _470;
  unsigned char _471;
  long long unsigned int _472;
  unsigned int _473;
  unsigned int _474;
  unsigned char _475;
  long long unsigned int _476;
  unsigned int _477;
  unsigned int _478;
  unsigned char _479;
  long long unsigned int _480;
  unsigned char _481;
  int _482;
  long long unsigned int _483;
  long long unsigned int _484;
  unsigned int _485;
  unsigned int _486;
  unsigned char _487;
  long long unsigned int _488;
  long long unsigned int _489;
  unsigned int _490;
  unsigned int _491;
  unsigned char _492;
  long long unsigned int _493;
  long long unsigned int _494;
  unsigned int _495;
  unsigned int _496;
  unsigned char _497;
  long long unsigned int _498;
  long long unsigned int _499;
  unsigned char _500;
  long long unsigned int _501;
  unsigned int _502;
  unsigned int _503;
  unsigned char _504;
  long long unsigned int _505;
  unsigned int _506;
  unsigned int _507;
  unsigned char _508;
  long long unsigned int _509;
  unsigned int _510;
  unsigned int _511;
  unsigned char _512;
  long long unsigned int _513;
  unsigned char _514;
  long long unsigned int _515;
  long long unsigned int _516;
  unsigned int _517;
  unsigned int _518;
  unsigned char _519;
  long long unsigned int _520;
  long long unsigned int _521;
  unsigned int _522;
  unsigned int _523;
  unsigned char _524;
  long long unsigned int _525;
  long long unsigned int _526;
  unsigned int _527;
  unsigned int _528;
  unsigned char _529;
  long long unsigned int _530;
  long long unsigned int _531;
  unsigned char _532;
  long long unsigned int _533;
  unsigned int _534;
  unsigned int _535;
  unsigned char _536;
  long long unsigned int _537;
  unsigned int _538;
  unsigned int _539;
  unsigned char _540;
  long long unsigned int _541;
  unsigned int _542;
  unsigned int _543;
  unsigned char _544;
  long long unsigned int _545;
  unsigned char _546;
  int _549;
  u64 prephitmp_552;
  u64 prephitmp_555;
  BitSequence[128] * _557;
  int patt_559;
  long long unsigned int _561;
  _Bool _568;
  _Bool _570;
  long long unsigned int _575;
  unsigned int _577;
  int _581;
  u32 pretmp_583;
  long long unsigned int _584;
  long long unsigned int _585;
  u32 prephitmp_586;
  _Bool _592;
  _Bool _593;
  _Bool _599;
  _Bool _602;
  u32 pretmp_605;
  u32 prephitmp_607;
  _Bool _608;
  _Bool _609;
  int prephitmp_613;
  _Bool _632;
  _Bool _733;
  u32 pretmp_743;
  u32 pretmp_748;
  unsigned int _749;
  int pretmp_853;
  int pretmp_854;
  u64 pretmp_855;
  int pretmp_856;
  int pretmp_857;
  u64 prephitmp_858;
  int pretmp_859;
  u32 pretmp_860;
  int pretmp_861;
  int prephitmp_862;
  u64 pretmp_863;
  u64 prephitmp_864;
  u64 prephitmp_865;
  u64 pretmp_866;
  u64 pretmp_867;
  u64 pretmp_868;
  long long unsigned int _882;
  int patt_885;
  int patt_886;
  int patt_887;
  unsigned int patt_888;
  unsigned int patt_889;
  int patt_891;
  int patt_892;
  int patt_893;
  int patt_894;
  unsigned int patt_895;
  unsigned int patt_896;
  int patt_897;
  int patt_898;
  int _900;
  u32 pretmp_904;
  u32 prephitmp_905;
  u32 pretmp_906;
  u32 prephitmp_907;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _5 = state_4(D)->hashbitlen;
  if (_5 <= 383)
    goto <bb 3>;
  else
    goto <bb 40>;
;;    succ:       3
;;                40

;;   basic block 3, loop depth 0
;;    pred:       2
  zz = 0;
  zo = 1;
  oz = 128;
  oo = 129;
  _11 = state_4(D)->t32[0];
  _12 = state_4(D)->datalen;
  _13 = (unsigned int) _12;
  low_14 = _11 + _13;
  high_15 = state_4(D)->t32[1];
  if (_13 > low_14)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  high_16 = high_15 + 1;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  # high_17 = PHI <high_15(3), high_16(4)>
  _18 = high_17 >> 24;
  _19 = (unsigned char) _18;
  msglen[0] = _19;
  _20 = high_17 >> 16;
  _21 = (unsigned char) _20;
  msglen[1] = _21;
  _22 = high_17 >> 8;
  _23 = (unsigned char) _22;
  msglen[2] = _23;
  _24 = (unsigned char) high_17;
  msglen[3] = _24;
  _25 = low_14 >> 24;
  _26 = (unsigned char) _25;
  msglen[4] = _26;
  _27 = low_14 >> 16;
  _28 = (unsigned char) _27;
  msglen[5] = _28;
  _29 = low_14 >> 8;
  _30 = (unsigned char) _29;
  msglen[6] = _30;
  _31 = (unsigned char) low_14;
  msglen[7] = _31;
  _32 = _13 & 7;
  if (_32 == 0)
    goto <bb 6>;
  else
    goto <bb 21>;
;;    succ:       6
;;                21

;;   basic block 6, loop depth 0
;;    pred:       5
  if (_12 == 440)
    goto <bb 7>;
  else
    goto <bb 10>;
;;    succ:       7
;;                10

;;   basic block 7, loop depth 0
;;    pred:       6
  _33 = _11 + 4294967288;
  state_4(D)->t32[0] = _33;
  if (_5 == 224)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8
;;                9

;;   basic block 8, loop depth 0
;;    pred:       7
  Update32.part.0 (state_4(D), &oz, 8);
  pretmp_605 = state_4(D)->t32[0];
  goto <bb 20>;
;;    succ:       20

;;   basic block 9, loop depth 0
;;    pred:       7
  Update32.part.0 (state_4(D), &oo, 8);
  pretmp_904 = state_4(D)->t32[0];
  goto <bb 20>;
;;    succ:       20

;;   basic block 10, loop depth 0
;;    pred:       6
  if (_12 <= 439)
    goto <bb 11>;
  else
    goto <bb 13>;
;;    succ:       11
;;                13

;;   basic block 11, loop depth 0
;;    pred:       10
  if (_12 == 0)
    goto <bb 12>;
  else
    goto <bb 82>;
;;    succ:       12
;;                82

;;   basic block 12, loop depth 0
;;    pred:       11
  state_4(D)->nullt = 1;
  goto <bb 82>;
;;    succ:       82

;;   basic block 13, loop depth 0
;;    pred:       10
  _38 = low_14 + 4294966784;
  state_4(D)->t32[0] = _38;
  _39 = 512 - _12;
  _40 = (long long unsigned int) _39;
  _609 = _12 != 512;
  _602 = _40 == 0;
  _593 = _602 & _609;
  if (_593 != 0)
    goto <bb 15>;
  else
    goto <bb 14>;
;;    succ:       15
;;                14

;;   basic block 14, loop depth 0
;;    pred:       13
  Update32.part.0 (state_4(D), &padding, _40);
  pretmp_906 = state_4(D)->t32[0];
;;    succ:       15

;;   basic block 15, loop depth 0
;;    pred:       13
;;                14
  # prephitmp_907 = PHI <_38(13), pretmp_906(14)>
  _42 = prephitmp_907 + 4294966856;
  state_4(D)->t32[0] = _42;
  Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], 440);
  state_4(D)->nullt = 1;
;;    succ:       16

;;   basic block 16, loop depth 0
;;    pred:       15
;;                82
  _43 = state_4(D)->hashbitlen;
  if (_43 == 224)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17
;;                18

;;   basic block 17, loop depth 0
;;    pred:       16
  Update32.part.0 (state_4(D), &zz, 8);
  goto <bb 19>;
;;    succ:       19

;;   basic block 18, loop depth 0
;;    pred:       16
  Update32.part.0 (state_4(D), &zo, 8);
;;    succ:       19

;;   basic block 19, loop depth 0
;;    pred:       17
;;                18
  _44 = state_4(D)->t32[0];
  _45 = _44 + 4294967288;
;;    succ:       20

;;   basic block 20, loop depth 0
;;    pred:       8
;;                9
;;                19
  # prephitmp_905 = PHI <pretmp_605(8), pretmp_904(9), _45(19)>
  _47 = prephitmp_905 + 4294967232;
  state_4(D)->t32[0] = _47;
  Update32.part.0 (state_4(D), &msglen, 64);
  goto <bb 37>;
;;    succ:       37

;;   basic block 21, loop depth 0
;;    pred:       5
  _48 = _12 / 8;
  _49 = state_4(D)->data32[_48];
  _50 = (signed char) _49;
  _51 = _12 % 8;
  _52 = 8 - _51;
  _53 = 255 << _52;
  _54 = (signed char) _53;
  _55 = _50 & _54;
  _57 = 128 >> _51;
  _58 = (signed char) _57;
  _59 = _55 ^ _58;
  _60 = (unsigned char) _59;
  state_4(D)->data32[_48] = _60;
  _61 = _13 + 4294966855;
  if (_61 <= 5)
    goto <bb 22>;
  else
    goto <bb 25>;
;;    succ:       22
;;                25

;;   basic block 22, loop depth 0
;;    pred:       21
  if (_5 == 224)
    goto <bb 24>;
  else
    goto <bb 23>;
;;    succ:       24
;;                23

;;   basic block 23, loop depth 0
;;    pred:       22
  _63 = _60 ^ 1;
  state_4(D)->data32[_48] = _63;
;;    succ:       24

;;   basic block 24, loop depth 0
;;    pred:       22
;;                23
  _64 = (unsigned int) _51;
  _749 = _11 + 4294967288;
  _66 = _64 + _749;
  state_4(D)->datalen = 448;
  goto <bb 36>;
;;    succ:       36

;;   basic block 25, loop depth 0
;;    pred:       21
  if (_12 <= 439)
    goto <bb 26>;
  else
    goto <bb 28>;
;;    succ:       26
;;                28

;;   basic block 26, loop depth 0
;;    pred:       25
  _70 = low_14 + 4294966856;
  state_4(D)->t32[0] = _70;
  _71 = _13 & 4294967288;
  _72 = _71 + 8;
  _73 = (int) _72;
  state_4(D)->datalen = _73;
  _74 = 440 - _73;
  _75 = (long long unsigned int) _74;
  _608 = _73 != 512;
  _570 = _75 == 0;
  _568 = _570 & _608;
  if (_568 != 0)
    goto <bb 33>;
  else
    goto <bb 27>;
;;    succ:       33
;;                27

;;   basic block 27, loop depth 0
;;    pred:       26
  Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], _75);
  pretmp_583 = state_4(D)->t32[0];
  pretmp_859 = state_4(D)->hashbitlen;
  goto <bb 33>;
;;    succ:       33

;;   basic block 28, loop depth 0
;;    pred:       25
  if (_12 > 504)
    goto <bb 29>;
  else
    goto <bb 30>;
;;    succ:       29
;;                30

;;   basic block 29, loop depth 0
;;    pred:       28
  _76 = low_14 + 4294966784;
  state_4(D)->t32[0] = _76;
  state_4(D)->datalen = 512;
  Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], 0);
  _77 = state_4(D)->t32[0];
  _78 = _77 + 4294966856;
  state_4(D)->t32[0] = _78;
  Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], 440);
  state_4(D)->nullt = 1;
  pretmp_743 = state_4(D)->t32[0];
  pretmp_10 = state_4(D)->hashbitlen;
  goto <bb 33>;
;;    succ:       33

;;   basic block 30, loop depth 0
;;    pred:       28
  _79 = low_14 + 4294966784;
  state_4(D)->t32[0] = _79;
  _80 = _13 & 4294967288;
  _81 = _80 + 8;
  _82 = (int) _81;
  state_4(D)->datalen = _82;
  _83 = 512 - _82;
  _84 = (long long unsigned int) _83;
  _259 = _82 != 512;
  _260 = _84 == 0;
  _261 = _259 & _260;
  if (_261 != 0)
    goto <bb 32>;
  else
    goto <bb 31>;
;;    succ:       32
;;                31

;;   basic block 31, loop depth 0
;;    pred:       30
  Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], _84);
  pretmp_860 = state_4(D)->t32[0];
;;    succ:       32

;;   basic block 32, loop depth 0
;;    pred:       30
;;                31
  # prephitmp_586 = PHI <_79(30), pretmp_860(31)>
  _86 = prephitmp_586 + 4294966856;
  state_4(D)->t32[0] = _86;
  Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], 440);
  state_4(D)->nullt = 1;
  pretmp_748 = state_4(D)->t32[0];
  pretmp_861 = state_4(D)->hashbitlen;
;;    succ:       33

;;   basic block 33, loop depth 0
;;    pred:       26
;;                29
;;                32
;;                27
  # prephitmp_607 = PHI <_70(26), pretmp_743(29), pretmp_748(32), pretmp_583(27)>
  # prephitmp_862 = PHI <_5(26), pretmp_10(29), pretmp_861(32), pretmp_859(27)>
  _88 = prephitmp_607 + 4294967288;
  state_4(D)->t32[0] = _88;
  if (prephitmp_862 == 224)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34
;;                35

;;   basic block 34, loop depth 0
;;    pred:       33
  Update32.part.0 (state_4(D), &zz, 8);
  pretmp_62 = state_4(D)->t32[0];
  goto <bb 36>;
;;    succ:       36

;;   basic block 35, loop depth 0
;;    pred:       33
  Update32.part.0 (state_4(D), &zo, 8);
  pretmp_7 = state_4(D)->t32[0];
;;    succ:       36

;;   basic block 36, loop depth 0
;;    pred:       24
;;                34
;;                35
  # prephitmp_8 = PHI <_66(24), pretmp_62(34), pretmp_7(35)>
  _91 = prephitmp_8 + 4294967232;
  state_4(D)->t32[0] = _91;
  Update32.part.0 (state_4(D), &msglen, 64);
;;    succ:       37

;;   basic block 37, loop depth 0
;;    pred:       20
;;                36
  _92 = state_4(D)->h32[0];
  _93 = _92 >> 24;
  _94 = (unsigned char) _93;
  *hashval_6(D) = _94;
  _95 = state_4(D)->h32[0];
  _96 = _95 >> 16;
  _97 = (unsigned char) _96;
  MEM[(BitSequence *)hashval_6(D) + 1B] = _97;
  _98 = state_4(D)->h32[0];
  _99 = _98 >> 8;
  _100 = (unsigned char) _99;
  MEM[(BitSequence *)hashval_6(D) + 2B] = _100;
  _101 = state_4(D)->h32[0];
  _102 = (unsigned char) _101;
  MEM[(BitSequence *)hashval_6(D) + 3B] = _102;
  _103 = state_4(D)->h32[1];
  _104 = _103 >> 24;
  _105 = (unsigned char) _104;
  MEM[(BitSequence *)hashval_6(D) + 4B] = _105;
  _106 = state_4(D)->h32[1];
  _107 = _106 >> 16;
  _108 = (unsigned char) _107;
  MEM[(BitSequence *)hashval_6(D) + 5B] = _108;
  _109 = state_4(D)->h32[1];
  _110 = _109 >> 8;
  _111 = (unsigned char) _110;
  MEM[(BitSequence *)hashval_6(D) + 6B] = _111;
  _112 = state_4(D)->h32[1];
  _113 = (unsigned char) _112;
  MEM[(BitSequence *)hashval_6(D) + 7B] = _113;
  _114 = state_4(D)->h32[2];
  _115 = _114 >> 24;
  _116 = (unsigned char) _115;
  MEM[(BitSequence *)hashval_6(D) + 8B] = _116;
  _117 = state_4(D)->h32[2];
  _118 = _117 >> 16;
  _119 = (unsigned char) _118;
  MEM[(BitSequence *)hashval_6(D) + 9B] = _119;
  _120 = state_4(D)->h32[2];
  _121 = _120 >> 8;
  _122 = (unsigned char) _121;
  MEM[(BitSequence *)hashval_6(D) + 10B] = _122;
  _123 = state_4(D)->h32[2];
  _124 = (unsigned char) _123;
  MEM[(BitSequence *)hashval_6(D) + 11B] = _124;
  _125 = state_4(D)->h32[3];
  _126 = _125 >> 24;
  _127 = (unsigned char) _126;
  MEM[(BitSequence *)hashval_6(D) + 12B] = _127;
  _128 = state_4(D)->h32[3];
  _129 = _128 >> 16;
  _130 = (unsigned char) _129;
  MEM[(BitSequence *)hashval_6(D) + 13B] = _130;
  _131 = state_4(D)->h32[3];
  _132 = _131 >> 8;
  _133 = (unsigned char) _132;
  MEM[(BitSequence *)hashval_6(D) + 14B] = _133;
  _134 = state_4(D)->h32[3];
  _135 = (unsigned char) _134;
  MEM[(BitSequence *)hashval_6(D) + 15B] = _135;
  _136 = state_4(D)->h32[4];
  _137 = _136 >> 24;
  _138 = (unsigned char) _137;
  MEM[(BitSequence *)hashval_6(D) + 16B] = _138;
  _139 = state_4(D)->h32[4];
  _140 = _139 >> 16;
  _141 = (unsigned char) _140;
  MEM[(BitSequence *)hashval_6(D) + 17B] = _141;
  _142 = state_4(D)->h32[4];
  _143 = _142 >> 8;
  _144 = (unsigned char) _143;
  MEM[(BitSequence *)hashval_6(D) + 18B] = _144;
  _145 = state_4(D)->h32[4];
  _146 = (unsigned char) _145;
  MEM[(BitSequence *)hashval_6(D) + 19B] = _146;
  _147 = state_4(D)->h32[5];
  _148 = _147 >> 24;
  _149 = (unsigned char) _148;
  MEM[(BitSequence *)hashval_6(D) + 20B] = _149;
  _150 = state_4(D)->h32[5];
  _151 = _150 >> 16;
  _152 = (unsigned char) _151;
  MEM[(BitSequence *)hashval_6(D) + 21B] = _152;
  _153 = state_4(D)->h32[5];
  _154 = _153 >> 8;
  _155 = (unsigned char) _154;
  MEM[(BitSequence *)hashval_6(D) + 22B] = _155;
  _156 = state_4(D)->h32[5];
  _157 = (unsigned char) _156;
  MEM[(BitSequence *)hashval_6(D) + 23B] = _157;
  _158 = state_4(D)->h32[6];
  _159 = _158 >> 24;
  _160 = (unsigned char) _159;
  MEM[(BitSequence *)hashval_6(D) + 24B] = _160;
  _161 = state_4(D)->h32[6];
  _162 = _161 >> 16;
  _163 = (unsigned char) _162;
  MEM[(BitSequence *)hashval_6(D) + 25B] = _163;
  _164 = state_4(D)->h32[6];
  _165 = _164 >> 8;
  _166 = (unsigned char) _165;
  MEM[(BitSequence *)hashval_6(D) + 26B] = _166;
  _167 = state_4(D)->h32[6];
  _168 = (unsigned char) _167;
  MEM[(BitSequence *)hashval_6(D) + 27B] = _168;
  _169 = state_4(D)->hashbitlen;
  if (_169 == 256)
    goto <bb 38>;
  else
    goto <bb 39>;
;;    succ:       38
;;                39

;;   basic block 38, loop depth 0
;;    pred:       37
  _170 = state_4(D)->h32[7];
  _171 = _170 >> 24;
  _172 = (unsigned char) _171;
  MEM[(BitSequence *)hashval_6(D) + 28B] = _172;
  _173 = state_4(D)->h32[7];
  _174 = _173 >> 16;
  _175 = (unsigned char) _174;
  MEM[(BitSequence *)hashval_6(D) + 29B] = _175;
  _176 = state_4(D)->h32[7];
  _177 = _176 >> 8;
  _178 = (unsigned char) _177;
  MEM[(BitSequence *)hashval_6(D) + 30B] = _178;
  _179 = state_4(D)->h32[7];
  _180 = (unsigned char) _179;
  MEM[(BitSequence *)hashval_6(D) + 31B] = _180;
;;    succ:       39

;;   basic block 39, loop depth 0
;;    pred:       37
;;                38
  msglen ={v} {CLOBBER};
  zz ={v} {CLOBBER};
  zo ={v} {CLOBBER};
  oz ={v} {CLOBBER};
  oo ={v} {CLOBBER};
  goto <bb 81>;
;;    succ:       81

;;   basic block 40, loop depth 0
;;    pred:       2
  zz = 0;
  zo = 1;
  oz = 128;
  oo = 129;
  _183 = state_4(D)->t64[0];
  _184 = state_4(D)->datalen;
  _185 = (long long unsigned int) _184;
  low_186 = _183 + _185;
  high_187 = state_4(D)->t64[1];
  if (_185 > low_186)
    goto <bb 41>;
  else
    goto <bb 42>;
;;    succ:       41
;;                42

;;   basic block 41, loop depth 0
;;    pred:       40
  high_188 = high_187 + 1;
;;    succ:       42

;;   basic block 42, loop depth 0
;;    pred:       40
;;                41
  # high_189 = PHI <high_187(40), high_188(41)>
  _190 = high_189 >> 32;
  _191 = (unsigned int) _190;
  _192 = _191 >> 24;
  _193 = (unsigned char) _192;
  msglen[0] = _193;
  _194 = _191 >> 16;
  _195 = (unsigned char) _194;
  msglen[1] = _195;
  _196 = _191 >> 8;
  _197 = (unsigned char) _196;
  msglen[2] = _197;
  _198 = (unsigned char) _190;
  msglen[3] = _198;
  _199 = (unsigned int) high_189;
  _200 = _199 >> 24;
  _201 = (unsigned char) _200;
  msglen[4] = _201;
  _202 = _199 >> 16;
  _203 = (unsigned char) _202;
  msglen[5] = _203;
  _204 = _199 >> 8;
  _205 = (unsigned char) _204;
  msglen[6] = _205;
  _206 = (unsigned char) high_189;
  msglen[7] = _206;
  _207 = low_186 >> 32;
  _208 = (unsigned int) _207;
  _209 = _208 >> 24;
  _210 = (unsigned char) _209;
  msglen[8] = _210;
  _211 = _208 >> 16;
  _212 = (unsigned char) _211;
  msglen[9] = _212;
  _213 = _208 >> 8;
  _214 = (unsigned char) _213;
  msglen[10] = _214;
  _215 = (unsigned char) _207;
  msglen[11] = _215;
  _216 = (unsigned int) low_186;
  _217 = _216 >> 24;
  _218 = (unsigned char) _217;
  msglen[12] = _218;
  _219 = _216 >> 16;
  _220 = (unsigned char) _219;
  msglen[13] = _220;
  _221 = _216 >> 8;
  _222 = (unsigned char) _221;
  msglen[14] = _222;
  _223 = (unsigned char) low_186;
  msglen[15] = _223;
  _224 = (unsigned int) _184;
  _225 = _224 & 7;
  if (_225 == 0)
    goto <bb 43>;
  else
    goto <bb 62>;
;;    succ:       43
;;                62

;;   basic block 43, loop depth 0
;;    pred:       42
  if (_184 == 888)
    goto <bb 44>;
  else
    goto <bb 47>;
;;    succ:       44
;;                47

;;   basic block 44, loop depth 0
;;    pred:       43
  _226 = _183 + 18446744073709551608;
  state_4(D)->t64[0] = _226;
  if (_5 == 384)
    goto <bb 45>;
  else
    goto <bb 46>;
;;    succ:       45
;;                46

;;   basic block 45, loop depth 0
;;    pred:       44
  Update64.part.1 (state_4(D), &oz, 8);
  pretmp_866 = state_4(D)->t64[0];
  goto <bb 59>;
;;    succ:       59

;;   basic block 46, loop depth 0
;;    pred:       44
  Update64.part.1 (state_4(D), &oo, 8);
  pretmp_182 = state_4(D)->t64[0];
  goto <bb 59>;
;;    succ:       59

;;   basic block 47, loop depth 0
;;    pred:       43
  if (_184 <= 887)
    goto <bb 48>;
  else
    goto <bb 50>;
;;    succ:       48
;;                50

;;   basic block 48, loop depth 0
;;    pred:       47
  if (_184 == 0)
    goto <bb 49>;
  else
    goto <bb 83>;
;;    succ:       49
;;                83

;;   basic block 49, loop depth 0
;;    pred:       48
  state_4(D)->nullt = 1;
  goto <bb 83>;
;;    succ:       83

;;   basic block 50, loop depth 0
;;    pred:       47
  _231 = 1024 - _184;
  _232 = (long long unsigned int) _231;
  _233 = _183 - _232;
  state_4(D)->t64[0] = _233;
  _67 = _184 != 1024;
  _68 = _232 == 0;
  _69 = _67 & _68;
  if (_69 != 0)
    goto <bb 52>;
  else
    goto <bb 51>;
;;    succ:       52
;;                51

;;   basic block 51, loop depth 0
;;    pred:       50
  Update64.part.1 (state_4(D), &padding, _232);
  pretmp_863 = state_4(D)->t64[0];
;;    succ:       52

;;   basic block 52, loop depth 0
;;    pred:       50
;;                51
  # prephitmp_864 = PHI <_233(50), pretmp_863(51)>
  _235 = prephitmp_864 + 18446744073709550728;
  state_4(D)->t64[0] = _235;
  Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], 888);
  state_4(D)->nullt = 1;
;;    succ:       53

;;   basic block 53, loop depth 0
;;    pred:       52
;;                83
  _236 = state_4(D)->hashbitlen;
  if (_236 == 384)
    goto <bb 54>;
  else
    goto <bb 55>;
;;    succ:       54
;;                55

;;   basic block 54, loop depth 0
;;    pred:       53
  Update64.part.1 (state_4(D), &zz, 8);
  goto <bb 58>;
;;    succ:       58

;;   basic block 55, loop depth 0
;;    pred:       53
  if (_236 <= 383)
    goto <bb 56>;
  else
    goto <bb 57>;
;;    succ:       56
;;                57

;;   basic block 56, loop depth 0
;;    pred:       55
  Update32.part.0 (state_4(D), &zo, 8);
  goto <bb 58>;
;;    succ:       58

;;   basic block 57, loop depth 0
;;    pred:       55
  Update64.part.1 (state_4(D), &zo, 8);
;;    succ:       58

;;   basic block 58, loop depth 0
;;    pred:       54
;;                57
;;                56
  _237 = state_4(D)->t64[0];
  _238 = _237 + 18446744073709551608;
;;    succ:       59

;;   basic block 59, loop depth 0
;;    pred:       45
;;                46
;;                58
  # prephitmp_555 = PHI <pretmp_866(45), pretmp_182(46), _238(58)>
  _240 = prephitmp_555 + 18446744073709551488;
  state_4(D)->t64[0] = _240;
  _549 = state_4(D)->hashbitlen;
  if (_549 <= 383)
    goto <bb 60>;
  else
    goto <bb 61>;
;;    succ:       60
;;                61

;;   basic block 60, loop depth 0
;;    pred:       59
;;                77
  Update32.part.0 (state_4(D), &msglen, 128);
  goto <bb 78>;
;;    succ:       78

;;   basic block 61, loop depth 0
;;    pred:       59
;;                77
;;                65
  Update64.part.1 (state_4(D), &msglen, 128);
  goto <bb 78>;
;;    succ:       78

;;   basic block 62, loop depth 0
;;    pred:       42
  _241 = _184 / 8;
  _242 = state_4(D)->data64[_241];
  _243 = (signed char) _242;
  _244 = _184 % 8;
  _245 = 8 - _244;
  _246 = 255 << _245;
  _247 = (signed char) _246;
  _248 = _243 & _247;
  _250 = 128 >> _244;
  _251 = (signed char) _250;
  _252 = _248 ^ _251;
  _253 = (unsigned char) _252;
  state_4(D)->data64[_241] = _253;
  _254 = _224 + 4294966407;
  if (_254 <= 5)
    goto <bb 63>;
  else
    goto <bb 66>;
;;    succ:       63
;;                66

;;   basic block 63, loop depth 0
;;    pred:       62
  if (_5 == 384)
    goto <bb 65>;
  else
    goto <bb 64>;
;;    succ:       65
;;                64

;;   basic block 64, loop depth 0
;;    pred:       63
  _256 = _253 ^ 1;
  state_4(D)->data64[_241] = _256;
;;    succ:       65

;;   basic block 65, loop depth 0
;;    pred:       63
;;                64
  _257 = (long long unsigned int) _245;
  _258 = _183 - _257;
  state_4(D)->datalen = 896;
  _882 = _258 + 18446744073709551488;
  state_4(D)->t64[0] = _882;
  goto <bb 61>;
;;    succ:       61

;;   basic block 66, loop depth 0
;;    pred:       62
  if (_184 <= 887)
    goto <bb 67>;
  else
    goto <bb 69>;
;;    succ:       67
;;                69

;;   basic block 67, loop depth 0
;;    pred:       66
  _262 = 888 - _184;
  _263 = (long long unsigned int) _262;
  _264 = _183 - _263;
  state_4(D)->t64[0] = _264;
  _265 = _224 & 4294967288;
  _266 = _265 + 8;
  _267 = (int) _266;
  state_4(D)->datalen = _267;
  _268 = 888 - _267;
  _269 = (long long unsigned int) _268;
  _733 = _267 != 1024;
  _632 = _269 == 0;
  _599 = _632 & _733;
  if (_599 != 0)
    goto <bb 74>;
  else
    goto <bb 68>;
;;    succ:       74
;;                68

;;   basic block 68, loop depth 0
;;    pred:       67
  Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], _269);
  pretmp_9 = state_4(D)->t64[0];
  pretmp_857 = state_4(D)->hashbitlen;
  goto <bb 74>;
;;    succ:       74

;;   basic block 69, loop depth 0
;;    pred:       66
  if (_184 > 1016)
    goto <bb 70>;
  else
    goto <bb 71>;
;;    succ:       70
;;                71

;;   basic block 70, loop depth 0
;;    pred:       69
  _270 = 1024 - _184;
  _271 = (long long unsigned int) _270;
  _272 = _183 - _271;
  state_4(D)->datalen = 1024;
  _557 = &state_4(D)->data64;
  _561 = _272 + 1024;
  state_4(D)->t64[0] = _561;
  compress64 (state_4(D), _557);
  state_4(D)->datalen = 0;
  _273 = state_4(D)->t64[0];
  _274 = _273 + 18446744073709550728;
  state_4(D)->t64[0] = _274;
  Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], 888);
  state_4(D)->nullt = 1;
  pretmp_855 = state_4(D)->t64[0];
  pretmp_854 = state_4(D)->hashbitlen;
  goto <bb 74>;
;;    succ:       74

;;   basic block 71, loop depth 0
;;    pred:       69
  _275 = 1024 - _184;
  _276 = (long long unsigned int) _275;
  _277 = _183 - _276;
  state_4(D)->t64[0] = _277;
  _278 = _224 & 4294967288;
  _279 = _278 + 8;
  _280 = (int) _279;
  state_4(D)->datalen = _280;
  _281 = 1024 - _280;
  _282 = (long long unsigned int) _281;
  _592 = _280 != 1024;
  _230 = _282 == 0;
  _229 = _230 & _592;
  if (_229 != 0)
    goto <bb 73>;
  else
    goto <bb 72>;
;;    succ:       73
;;                72

;;   basic block 72, loop depth 0
;;    pred:       71
  Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], _282);
  pretmp_34 = state_4(D)->t64[0];
;;    succ:       73

;;   basic block 73, loop depth 0
;;    pred:       71
;;                72
  # prephitmp_865 = PHI <_277(71), pretmp_34(72)>
  _284 = prephitmp_865 + 18446744073709550728;
  state_4(D)->t64[0] = _284;
  Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], 888);
  state_4(D)->nullt = 1;
  pretmp_181 = state_4(D)->t64[0];
  pretmp_1 = state_4(D)->hashbitlen;
;;    succ:       74

;;   basic block 74, loop depth 0
;;    pred:       67
;;                68
;;                70
;;                73
  # prephitmp_858 = PHI <_264(67), pretmp_9(68), pretmp_855(70), pretmp_181(73)>
  # prephitmp_613 = PHI <_5(67), pretmp_857(68), pretmp_854(70), pretmp_1(73)>
  _286 = prephitmp_858 + 18446744073709551608;
  state_4(D)->t64[0] = _286;
  if (prephitmp_613 == 384)
    goto <bb 75>;
  else
    goto <bb 76>;
;;    succ:       75
;;                76

;;   basic block 75, loop depth 0
;;    pred:       74
  Update64.part.1 (state_4(D), &zz, 8);
  pretmp_867 = state_4(D)->t64[0];
  pretmp_856 = state_4(D)->hashbitlen;
  goto <bb 77>;
;;    succ:       77

;;   basic block 76, loop depth 0
;;    pred:       74
  Update64.part.1 (state_4(D), &zo, 8);
  pretmp_868 = state_4(D)->t64[0];
  pretmp_853 = state_4(D)->hashbitlen;
;;    succ:       77

;;   basic block 77, loop depth 0
;;    pred:       76
;;                75
  # prephitmp_552 = PHI <pretmp_868(76), pretmp_867(75)>
  # prephitmp_227 = PHI <pretmp_853(76), pretmp_856(75)>
  _289 = prephitmp_552 + 18446744073709551488;
  state_4(D)->t64[0] = _289;
  if (prephitmp_227 <= 383)
    goto <bb 60>;
  else
    goto <bb 61>;
;;    succ:       60
;;                61

;;   basic block 78, loop depth 0
;;    pred:       61
;;                60
  _290 = state_4(D)->h64[0];
  _291 = _290 >> 32;
  _292 = (unsigned int) _291;
  _293 = _292 >> 24;
  _294 = (unsigned char) _293;
  *hashval_6(D) = _294;
  _295 = state_4(D)->h64[0];
  _296 = _295 >> 32;
  _297 = (unsigned int) _296;
  _298 = _297 >> 16;
  _299 = (unsigned char) _298;
  MEM[(BitSequence *)hashval_6(D) + 1B] = _299;
  _300 = state_4(D)->h64[0];
  _301 = _300 >> 32;
  _302 = (unsigned int) _301;
  _303 = _302 >> 8;
  _304 = (unsigned char) _303;
  MEM[(BitSequence *)hashval_6(D) + 2B] = _304;
  _305 = state_4(D)->h64[0];
  _306 = _305 >> 32;
  _307 = (unsigned char) _306;
  MEM[(BitSequence *)hashval_6(D) + 3B] = _307;
  _308 = state_4(D)->h64[0];
  _309 = (unsigned int) _308;
  _310 = _309 >> 24;
  _311 = (unsigned char) _310;
  MEM[(BitSequence *)hashval_6(D) + 4B] = _311;
  _312 = state_4(D)->h64[0];
  _313 = (unsigned int) _312;
  _314 = _313 >> 16;
  _315 = (unsigned char) _314;
  MEM[(BitSequence *)hashval_6(D) + 5B] = _315;
  _316 = state_4(D)->h64[0];
  _317 = (unsigned int) _316;
  _318 = _317 >> 8;
  _319 = (unsigned char) _318;
  MEM[(BitSequence *)hashval_6(D) + 6B] = _319;
  _320 = state_4(D)->h64[0];
  _321 = (unsigned char) _320;
  MEM[(BitSequence *)hashval_6(D) + 7B] = _321;
  _322 = state_4(D)->h64[1];
  _323 = _322 >> 32;
  _324 = (unsigned int) _323;
  _325 = _324 >> 24;
  _326 = (unsigned char) _325;
  MEM[(BitSequence *)hashval_6(D) + 8B] = _326;
  _327 = state_4(D)->h64[1];
  _328 = _327 >> 32;
  _329 = (unsigned int) _328;
  _330 = _329 >> 16;
  _331 = (unsigned char) _330;
  MEM[(BitSequence *)hashval_6(D) + 9B] = _331;
  _332 = state_4(D)->h64[1];
  _333 = _332 >> 32;
  _334 = (unsigned int) _333;
  _335 = _334 >> 8;
  _336 = (unsigned char) _335;
  MEM[(BitSequence *)hashval_6(D) + 10B] = _336;
  _337 = state_4(D)->h64[1];
  _338 = _337 >> 32;
  _339 = (unsigned char) _338;
  MEM[(BitSequence *)hashval_6(D) + 11B] = _339;
  _340 = state_4(D)->h64[1];
  _341 = (unsigned int) _340;
  _342 = _341 >> 24;
  _343 = (unsigned char) _342;
  MEM[(BitSequence *)hashval_6(D) + 12B] = _343;
  _344 = state_4(D)->h64[1];
  _345 = (unsigned int) _344;
  _346 = _345 >> 16;
  _347 = (unsigned char) _346;
  MEM[(BitSequence *)hashval_6(D) + 13B] = _347;
  _348 = state_4(D)->h64[1];
  _349 = (unsigned int) _348;
  _350 = _349 >> 8;
  _351 = (unsigned char) _350;
  MEM[(BitSequence *)hashval_6(D) + 14B] = _351;
  _352 = state_4(D)->h64[1];
  _353 = (unsigned char) _352;
  MEM[(BitSequence *)hashval_6(D) + 15B] = _353;
  _354 = state_4(D)->h64[2];
  _355 = _354 >> 32;
  _356 = (unsigned int) _355;
  _357 = _356 >> 24;
  _358 = (unsigned char) _357;
  MEM[(BitSequence *)hashval_6(D) + 16B] = _358;
  _359 = state_4(D)->h64[2];
  _360 = _359 >> 32;
  _361 = (unsigned int) _360;
  _362 = _361 >> 16;
  _363 = (unsigned char) _362;
  MEM[(BitSequence *)hashval_6(D) + 17B] = _363;
  _364 = state_4(D)->h64[2];
  _365 = _364 >> 32;
  _366 = (unsigned int) _365;
  _367 = _366 >> 8;
  _368 = (unsigned char) _367;
  MEM[(BitSequence *)hashval_6(D) + 18B] = _368;
  _369 = state_4(D)->h64[2];
  _370 = _369 >> 32;
  _371 = (unsigned char) _370;
  MEM[(BitSequence *)hashval_6(D) + 19B] = _371;
  _372 = state_4(D)->h64[2];
  _373 = (unsigned int) _372;
  _374 = _373 >> 24;
  _375 = (unsigned char) _374;
  MEM[(BitSequence *)hashval_6(D) + 20B] = _375;
  _376 = state_4(D)->h64[2];
  _377 = (unsigned int) _376;
  _378 = _377 >> 16;
  _379 = (unsigned char) _378;
  MEM[(BitSequence *)hashval_6(D) + 21B] = _379;
  _380 = state_4(D)->h64[2];
  _381 = (unsigned int) _380;
  _382 = _381 >> 8;
  _383 = (unsigned char) _382;
  MEM[(BitSequence *)hashval_6(D) + 22B] = _383;
  _384 = state_4(D)->h64[2];
  _385 = (unsigned char) _384;
  MEM[(BitSequence *)hashval_6(D) + 23B] = _385;
  _386 = state_4(D)->h64[3];
  _387 = _386 >> 32;
  _388 = (unsigned int) _387;
  _389 = _388 >> 24;
  _390 = (unsigned char) _389;
  MEM[(BitSequence *)hashval_6(D) + 24B] = _390;
  _391 = state_4(D)->h64[3];
  _392 = _391 >> 32;
  _393 = (unsigned int) _392;
  _394 = _393 >> 16;
  _395 = (unsigned char) _394;
  MEM[(BitSequence *)hashval_6(D) + 25B] = _395;
  _396 = state_4(D)->h64[3];
  _397 = _396 >> 32;
  _398 = (unsigned int) _397;
  _399 = _398 >> 8;
  _400 = (unsigned char) _399;
  MEM[(BitSequence *)hashval_6(D) + 26B] = _400;
  _401 = state_4(D)->h64[3];
  _402 = _401 >> 32;
  _403 = (unsigned char) _402;
  MEM[(BitSequence *)hashval_6(D) + 27B] = _403;
  _404 = state_4(D)->h64[3];
  _405 = (unsigned int) _404;
  _406 = _405 >> 24;
  _407 = (unsigned char) _406;
  MEM[(BitSequence *)hashval_6(D) + 28B] = _407;
  _408 = state_4(D)->h64[3];
  _409 = (unsigned int) _408;
  _410 = _409 >> 16;
  _411 = (unsigned char) _410;
  MEM[(BitSequence *)hashval_6(D) + 29B] = _411;
  _412 = state_4(D)->h64[3];
  _413 = (unsigned int) _412;
  _414 = _413 >> 8;
  _415 = (unsigned char) _414;
  MEM[(BitSequence *)hashval_6(D) + 30B] = _415;
  _416 = state_4(D)->h64[3];
  _417 = (unsigned char) _416;
  MEM[(BitSequence *)hashval_6(D) + 31B] = _417;
  _418 = state_4(D)->h64[4];
  _419 = _418 >> 32;
  _420 = (unsigned int) _419;
  _421 = _420 >> 24;
  _422 = (unsigned char) _421;
  MEM[(BitSequence *)hashval_6(D) + 32B] = _422;
  _423 = state_4(D)->h64[4];
  _424 = _423 >> 32;
  _425 = (unsigned int) _424;
  _426 = _425 >> 16;
  _427 = (unsigned char) _426;
  MEM[(BitSequence *)hashval_6(D) + 33B] = _427;
  _428 = state_4(D)->h64[4];
  _429 = _428 >> 32;
  _430 = (unsigned int) _429;
  _431 = _430 >> 8;
  _432 = (unsigned char) _431;
  MEM[(BitSequence *)hashval_6(D) + 34B] = _432;
  _433 = state_4(D)->h64[4];
  _434 = _433 >> 32;
  _435 = (unsigned char) _434;
  MEM[(BitSequence *)hashval_6(D) + 35B] = _435;
  _436 = state_4(D)->h64[4];
  _437 = (unsigned int) _436;
  _438 = _437 >> 24;
  _439 = (unsigned char) _438;
  MEM[(BitSequence *)hashval_6(D) + 36B] = _439;
  _440 = state_4(D)->h64[4];
  _441 = (unsigned int) _440;
  _442 = _441 >> 16;
  _443 = (unsigned char) _442;
  MEM[(BitSequence *)hashval_6(D) + 37B] = _443;
  _444 = state_4(D)->h64[4];
  _445 = (unsigned int) _444;
  _446 = _445 >> 8;
  _447 = (unsigned char) _446;
  MEM[(BitSequence *)hashval_6(D) + 38B] = _447;
  _448 = state_4(D)->h64[4];
  _449 = (unsigned char) _448;
  MEM[(BitSequence *)hashval_6(D) + 39B] = _449;
  _450 = state_4(D)->h64[5];
  _451 = _450 >> 32;
  _452 = (unsigned int) _451;
  _453 = _452 >> 24;
  _454 = (unsigned char) _453;
  MEM[(BitSequence *)hashval_6(D) + 40B] = _454;
  _455 = state_4(D)->h64[5];
  _456 = _455 >> 32;
  _457 = (unsigned int) _456;
  _458 = _457 >> 16;
  _459 = (unsigned char) _458;
  MEM[(BitSequence *)hashval_6(D) + 41B] = _459;
  _460 = state_4(D)->h64[5];
  _461 = _460 >> 32;
  _462 = (unsigned int) _461;
  _463 = _462 >> 8;
  _464 = (unsigned char) _463;
  MEM[(BitSequence *)hashval_6(D) + 42B] = _464;
  _465 = state_4(D)->h64[5];
  _466 = _465 >> 32;
  _467 = (unsigned char) _466;
  MEM[(BitSequence *)hashval_6(D) + 43B] = _467;
  _468 = state_4(D)->h64[5];
  _469 = (unsigned int) _468;
  _470 = _469 >> 24;
  _471 = (unsigned char) _470;
  MEM[(BitSequence *)hashval_6(D) + 44B] = _471;
  _472 = state_4(D)->h64[5];
  _473 = (unsigned int) _472;
  _474 = _473 >> 16;
  _475 = (unsigned char) _474;
  MEM[(BitSequence *)hashval_6(D) + 45B] = _475;
  _476 = state_4(D)->h64[5];
  _477 = (unsigned int) _476;
  _478 = _477 >> 8;
  _479 = (unsigned char) _478;
  MEM[(BitSequence *)hashval_6(D) + 46B] = _479;
  _480 = state_4(D)->h64[5];
  _481 = (unsigned char) _480;
  MEM[(BitSequence *)hashval_6(D) + 47B] = _481;
  _482 = state_4(D)->hashbitlen;
  if (_482 == 512)
    goto <bb 79>;
  else
    goto <bb 80>;
;;    succ:       79
;;                80

;;   basic block 79, loop depth 0
;;    pred:       78
  _483 = state_4(D)->h64[6];
  _484 = _483 >> 32;
  _485 = (unsigned int) _484;
  _486 = _485 >> 24;
  _487 = (unsigned char) _486;
  MEM[(BitSequence *)hashval_6(D) + 48B] = _487;
  _488 = state_4(D)->h64[6];
  _489 = _488 >> 32;
  _490 = (unsigned int) _489;
  _491 = _490 >> 16;
  _492 = (unsigned char) _491;
  MEM[(BitSequence *)hashval_6(D) + 49B] = _492;
  _493 = state_4(D)->h64[6];
  _494 = _493 >> 32;
  _495 = (unsigned int) _494;
  _496 = _495 >> 8;
  _497 = (unsigned char) _496;
  MEM[(BitSequence *)hashval_6(D) + 50B] = _497;
  _498 = state_4(D)->h64[6];
  _499 = _498 >> 32;
  _500 = (unsigned char) _499;
  MEM[(BitSequence *)hashval_6(D) + 51B] = _500;
  _501 = state_4(D)->h64[6];
  _502 = (unsigned int) _501;
  _503 = _502 >> 24;
  _504 = (unsigned char) _503;
  MEM[(BitSequence *)hashval_6(D) + 52B] = _504;
  _505 = state_4(D)->h64[6];
  _506 = (unsigned int) _505;
  _507 = _506 >> 16;
  _508 = (unsigned char) _507;
  MEM[(BitSequence *)hashval_6(D) + 53B] = _508;
  _509 = state_4(D)->h64[6];
  _510 = (unsigned int) _509;
  _511 = _510 >> 8;
  _512 = (unsigned char) _511;
  MEM[(BitSequence *)hashval_6(D) + 54B] = _512;
  _513 = state_4(D)->h64[6];
  _514 = (unsigned char) _513;
  MEM[(BitSequence *)hashval_6(D) + 55B] = _514;
  _515 = state_4(D)->h64[7];
  _516 = _515 >> 32;
  _517 = (unsigned int) _516;
  _518 = _517 >> 24;
  _519 = (unsigned char) _518;
  MEM[(BitSequence *)hashval_6(D) + 56B] = _519;
  _520 = state_4(D)->h64[7];
  _521 = _520 >> 32;
  _522 = (unsigned int) _521;
  _523 = _522 >> 16;
  _524 = (unsigned char) _523;
  MEM[(BitSequence *)hashval_6(D) + 57B] = _524;
  _525 = state_4(D)->h64[7];
  _526 = _525 >> 32;
  _527 = (unsigned int) _526;
  _528 = _527 >> 8;
  _529 = (unsigned char) _528;
  MEM[(BitSequence *)hashval_6(D) + 58B] = _529;
  _530 = state_4(D)->h64[7];
  _531 = _530 >> 32;
  _532 = (unsigned char) _531;
  MEM[(BitSequence *)hashval_6(D) + 59B] = _532;
  _533 = state_4(D)->h64[7];
  _534 = (unsigned int) _533;
  _535 = _534 >> 24;
  _536 = (unsigned char) _535;
  MEM[(BitSequence *)hashval_6(D) + 60B] = _536;
  _537 = state_4(D)->h64[7];
  _538 = (unsigned int) _537;
  _539 = _538 >> 16;
  _540 = (unsigned char) _539;
  MEM[(BitSequence *)hashval_6(D) + 61B] = _540;
  _541 = state_4(D)->h64[7];
  _542 = (unsigned int) _541;
  _543 = _542 >> 8;
  _544 = (unsigned char) _543;
  MEM[(BitSequence *)hashval_6(D) + 62B] = _544;
  _545 = state_4(D)->h64[7];
  _546 = (unsigned char) _545;
  MEM[(BitSequence *)hashval_6(D) + 63B] = _546;
;;    succ:       80

;;   basic block 80, loop depth 0
;;    pred:       78
;;                79
  msglen ={v} {CLOBBER};
  zz ={v} {CLOBBER};
  zo ={v} {CLOBBER};
  oz ={v} {CLOBBER};
  oo ={v} {CLOBBER};
;;    succ:       81

;;   basic block 81, loop depth 0
;;    pred:       39
;;                80
  return 0;
;;    succ:       EXIT

;;   basic block 82, loop depth 0
;;    pred:       12
;;                11
  _577 = low_14 + 4294966856;
  state_4(D)->t32[0] = _577;
  _900 = 440 - _12;
  _585 = (long long unsigned int) _900;
  Update32.part.0 (state_4(D), &padding, _585);
  goto <bb 16>;
;;    succ:       16

;;   basic block 83, loop depth 0
;;    pred:       49
;;                48
  _581 = 888 - _184;
  _584 = (long long unsigned int) _581;
  _575 = _183 - _584;
  state_4(D)->t64[0] = _575;
  Update64.part.1 (state_4(D), &padding, _584);
  goto <bb 53>;
;;    succ:       53

}


Partition 0: size 16 align 16
	msglen	msglen
Partition 4: size 1 align 1
	oo	oo
Partition 3: size 1 align 1
	oz	oz
Partition 2: size 1 align 1
	zo	zo
Partition 1: size 1 align 1
	zz	zz

;; Generating RTL for gimple basic block 2

;; _5 = state_4(D)->hashbitlen;

(insn 7 6 0 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) blake_ref.c:655 -1
     (nil))

;; if (_5 <= 383)

(insn 8 7 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 612 [ D.6033 ])
            (const_int 383 [0x17f]))) blake_ref.c:655 -1
     (nil))

(jump_insn 9 8 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:655 -1
     (int_list:REG_BR_PROB 6100 (nil)))

;; Generating RTL for gimple basic block 3

;; zz = 0;

(insn 11 10 0 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [0 zz+0 S1 A32])
        (const_int 0 [0])) blake_ref.c:410 -1
     (nil))

;; zo = 1;

(insn 12 11 0 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -19 [0xffffffffffffffed])) [0 zo+0 S1 A8])
        (const_int 1 [0x1])) blake_ref.c:410 -1
     (nil))

;; oz = 128;

(insn 13 12 0 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -18 [0xffffffffffffffee])) [0 oz+0 S1 A16])
        (const_int -128 [0xffffffffffffff80])) blake_ref.c:410 -1
     (nil))

;; oo = 129;

(insn 14 13 0 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -17 [0xffffffffffffffef])) [0 oo+0 S1 A8])
        (const_int -127 [0xffffffffffffff81])) blake_ref.c:410 -1
     (nil))

;; _11 = state_4(D)->t32[0];

(insn 15 14 0 (set (reg:SI 88 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) blake_ref.c:416 -1
     (nil))

;; _12 = state_4(D)->datalen;

(insn 16 15 0 (set (reg:SI 89 [ D.6033 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])) blake_ref.c:416 -1
     (nil))

;; _13 = (unsigned int) _12;

(insn 17 16 0 (set (reg:SI 90 [ D.6032 ])
        (reg:SI 89 [ D.6033 ])) blake_ref.c:416 -1
     (nil))

;; low_14 = _11 + _13;

(insn 18 17 0 (parallel [
            (set (reg/v:SI 91 [ low ])
                (plus:SI (reg:SI 88 [ D.6032 ])
                    (reg:SI 90 [ D.6032 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:416 -1
     (nil))

;; high_15 = state_4(D)->t32[1];

(insn 19 18 0 (set (reg/v:SI 92 [ high ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 52 [0x34])) [2 state_4(D)->t32+4 S4 A32])) blake_ref.c:417 -1
     (nil))

;; if (_13 > low_14)

(insn 20 19 21 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 90 [ D.6032 ])
            (reg/v:SI 91 [ low ]))) blake_ref.c:418 -1
     (nil))

(jump_insn 21 20 0 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:418 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 4

;; high_16 = high_15 + 1;

(insn 23 22 0 (parallel [
            (set (reg/v:SI 92 [ high ])
                (plus:SI (reg/v:SI 92 [ high ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:419 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 24 23 25 94 "" [0 uses])

(note 25 24 0 NOTE_INSN_BASIC_BLOCK)

;; msglen[0] = _19;

(insn 26 25 27 (parallel [
            (set (reg:SI 635 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 92 [ high ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 -1
     (nil))

(insn 27 26 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [0 msglen+0 S1 A128])
        (subreg:QI (reg:SI 635 [ D.6032 ]) 0)) blake_ref.c:420 -1
     (nil))

;; msglen[1] = _21;

(insn 28 27 29 (parallel [
            (set (reg:SI 636 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 92 [ high ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 -1
     (nil))

(insn 29 28 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -15 [0xfffffffffffffff1])) [0 msglen+1 S1 A8])
        (subreg:QI (reg:SI 636 [ D.6032 ]) 0)) blake_ref.c:420 -1
     (nil))

;; msglen[2] = _23;

(insn 30 29 31 (parallel [
            (set (reg:SI 637 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 92 [ high ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 -1
     (nil))

(insn 31 30 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -14 [0xfffffffffffffff2])) [0 msglen+2 S1 A16])
        (subreg:QI (reg:SI 637 [ D.6032 ]) 0)) blake_ref.c:420 -1
     (nil))

;; msglen[3] = _24;

(insn 32 31 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -13 [0xfffffffffffffff3])) [0 msglen+3 S1 A8])
        (subreg:QI (reg/v:SI 92 [ high ]) 0)) blake_ref.c:420 -1
     (nil))

;; msglen[4] = _26;

(insn 33 32 34 (parallel [
            (set (reg:SI 638 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 91 [ low ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 -1
     (nil))

(insn 34 33 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [0 msglen+4 S1 A32])
        (subreg:QI (reg:SI 638 [ D.6032 ]) 0)) blake_ref.c:421 -1
     (nil))

;; msglen[5] = _28;

(insn 35 34 36 (parallel [
            (set (reg:SI 639 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 91 [ low ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 -1
     (nil))

(insn 36 35 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -11 [0xfffffffffffffff5])) [0 msglen+5 S1 A8])
        (subreg:QI (reg:SI 639 [ D.6032 ]) 0)) blake_ref.c:421 -1
     (nil))

;; msglen[6] = _30;

(insn 37 36 38 (parallel [
            (set (reg:SI 640 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 91 [ low ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 -1
     (nil))

(insn 38 37 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 msglen+6 S1 A16])
        (subreg:QI (reg:SI 640 [ D.6032 ]) 0)) blake_ref.c:421 -1
     (nil))

;; msglen[7] = _31;

(insn 39 38 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 msglen+7 S1 A8])
        (subreg:QI (reg/v:SI 91 [ low ]) 0)) blake_ref.c:421 -1
     (nil))

;; if (_32 == 0)

(insn 40 39 41 (parallel [
            (set (reg:SI 641 [ D.6035 ])
                (and:SI (reg:SI 90 [ D.6032 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:423 -1
     (nil))

(insn 41 40 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 641 [ D.6035 ])
            (const_int 0 [0]))) blake_ref.c:423 -1
     (nil))

(jump_insn 42 41 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:423 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 6

;; if (_12 == 440)

(insn 44 43 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6033 ])
            (const_int 440 [0x1b8]))) blake_ref.c:426 -1
     (nil))

(jump_insn 45 44 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:426 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 7

;; state_4(D)->t32[0] = _33;

(insn 47 46 48 (parallel [
            (set (reg:SI 642)
                (plus:SI (reg:SI 88 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:428 -1
     (nil))

(insn 48 47 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 642)) blake_ref.c:428 -1
     (nil))

;; if (_5 == 224)

(insn 49 48 50 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 224 [0xe0]))) blake_ref.c:429 -1
     (nil))

(jump_insn 50 49 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:429 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 8

;; Update32.part.0 (state_4(D), &oz, 8);

(insn 52 51 53 (parallel [
            (set (reg:DI 643)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -18 [0xffffffffffffffee])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 53 52 54 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 54 53 55 (set (reg:DI 1 dx)
        (reg:DI 643)) -1
     (nil))

(insn 55 54 56 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 56 55 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _605 = state_4(D)->t32[0];

(insn 57 56 0 (set (reg:SI 115 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 9

;; 

(code_label 60 59 61 97 "" [0 uses])

(note 61 60 0 NOTE_INSN_BASIC_BLOCK)

;; Update32.part.0 (state_4(D), &oo, 8);

(insn 62 61 63 (parallel [
            (set (reg:DI 644)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -17 [0xffffffffffffffef])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 63 62 64 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 64 63 65 (set (reg:DI 1 dx)
        (reg:DI 644)) -1
     (nil))

(insn 65 64 66 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 66 65 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _904 = state_4(D)->t32[0];

(insn 67 66 0 (set (reg:SI 115 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 10

;; 

(code_label 70 69 71 96 "" [0 uses])

(note 71 70 0 NOTE_INSN_BASIC_BLOCK)

;; if (_12 <= 439)

(insn 72 71 73 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.6033 ])
            (const_int 439 [0x1b7]))) blake_ref.c:435 -1
     (nil))

(jump_insn 73 72 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:435 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 11

;; if (_12 == 0)

(insn 75 74 76 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6033 ])
            (const_int 0 [0]))) blake_ref.c:437 -1
     (nil))

(jump_insn 76 75 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:437 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 12

;; state_4(D)->nullt = 1;

(insn 78 77 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:438 -1
     (nil))

;; Generating RTL for gimple basic block 13

;; 

(code_label 81 80 82 99 "" [0 uses])

(note 82 81 0 NOTE_INSN_BASIC_BLOCK)

;; _38 = low_14 + 4294966784;

(insn 83 82 0 (parallel [
            (set (reg:SI 109 [ D.6032 ])
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:445 -1
     (nil))

;; state_4(D)->t32[0] = _38;

(insn 84 83 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 109 [ D.6032 ])) blake_ref.c:445 -1
     (nil))

;; _40 = (long long unsigned int) _39;

(insn 85 84 86 (set (reg:SI 646)
        (const_int 512 [0x200])) blake_ref.c:446 -1
     (nil))

(insn 86 85 87 (parallel [
            (set (reg:SI 645 [ D.6033 ])
                (minus:SI (reg:SI 646)
                    (reg:SI 89 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:446 -1
     (nil))

(insn 87 86 0 (set (reg:DI 111 [ D.6036 ])
        (sign_extend:DI (reg:SI 645 [ D.6033 ]))) blake_ref.c:446 -1
     (nil))

;; if (_593 != 0)

(insn 88 87 89 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 111 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(insn 89 88 90 (set (reg:QI 648 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(insn 90 89 91 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 648 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(jump_insn 91 90 92 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 1400 (nil)))

(insn 92 91 93 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6033 ])
            (const_int 512 [0x200]))) blake_ref.c:295 -1
     (nil))

(insn 93 92 94 (set (reg:QI 650 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(insn 94 93 95 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 650 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(jump_insn 95 94 96 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 8372 (nil)))

(code_label 96 95 0 102 "" [0 uses])

;; Generating RTL for gimple basic block 14

;; Update32.part.0 (state_4(D), &padding, _40);

(insn 98 97 99 (set (reg:DI 37 r8)
        (reg:DI 111 [ D.6036 ])) -1
     (nil))

(insn 99 98 100 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) -1
     (nil))

(insn 100 99 101 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 101 100 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _906 = state_4(D)->t32[0];

(insn 102 101 0 (set (reg:SI 109 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 15

;; 

(code_label 103 102 104 101 "" [0 uses])

(note 104 103 0 NOTE_INSN_BASIC_BLOCK)

;; state_4(D)->t32[0] = _42;

(insn 105 104 106 (parallel [
            (set (reg:SI 651)
                (plus:SI (reg:SI 109 [ D.6032 ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:447 -1
     (nil))

(insn 106 105 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 651)) blake_ref.c:447 -1
     (nil))

;; Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], 440);

(insn 107 106 108 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) -1
     (nil))

(insn 108 107 109 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))

(insn 109 108 110 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 110 109 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; state_4(D)->nullt = 1;

(insn 111 110 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:449 -1
     (nil))

;; Generating RTL for gimple basic block 16

;; if (_43 == 224)

(insn 113 112 114 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 224 [0xe0]))) blake_ref.c:451 -1
     (nil))

(jump_insn 114 113 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:451 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 17

;; Update32.part.0 (state_4(D), &zz, 8);

(insn 116 115 117 (parallel [
            (set (reg:DI 652)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 117 116 118 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 118 117 119 (set (reg:DI 1 dx)
        (reg:DI 652)) -1
     (nil))

(insn 119 118 120 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 120 119 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 18

;; 

(code_label 123 122 124 103 "" [0 uses])

(note 124 123 0 NOTE_INSN_BASIC_BLOCK)

;; Update32.part.0 (state_4(D), &zo, 8);

(insn 125 124 126 (parallel [
            (set (reg:DI 653)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 126 125 127 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 127 126 128 (set (reg:DI 1 dx)
        (reg:DI 653)) -1
     (nil))

(insn 128 127 129 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 129 128 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 19

;; 

(code_label 130 129 131 104 "" [0 uses])

(note 131 130 0 NOTE_INSN_BASIC_BLOCK)

;; _45 = _44 + 4294967288;

(insn 132 131 133 (set (reg:SI 654)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) blake_ref.c:455 -1
     (nil))

(insn 133 132 0 (parallel [
            (set (reg:SI 115 [ D.6032 ])
                (plus:SI (reg:SI 654)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:455 -1
     (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))

;; Generating RTL for gimple basic block 20

;; 

(code_label 134 133 135 98 "" [0 uses])

(note 135 134 0 NOTE_INSN_BASIC_BLOCK)

;; state_4(D)->t32[0] = _47;

(insn 136 135 137 (parallel [
            (set (reg:SI 655)
                (plus:SI (reg:SI 115 [ D.6032 ])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:457 -1
     (nil))

(insn 137 136 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 655)) blake_ref.c:457 -1
     (nil))

;; Update32.part.0 (state_4(D), &msglen, 64);

(insn 138 137 139 (parallel [
            (set (reg:DI 656)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 139 138 140 (set (reg:DI 37 r8)
        (const_int 64 [0x40])) -1
     (nil))

(insn 140 139 141 (set (reg:DI 1 dx)
        (reg:DI 656)) -1
     (nil))

(insn 141 140 142 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 142 141 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 21
Swap operands in stmt:
_55 = _50 & _54;
Cost left opnd=1, right opnd=2

;; 

(code_label 145 144 146 95 "" [0 uses])

(note 146 145 0 NOTE_INSN_BASIC_BLOCK)

;; _48 = _12 / 8;

(insn 147 146 148 (set (reg:SI 657)
        (reg:SI 89 [ D.6033 ])) blake_ref.c:464 -1
     (nil))

(insn 148 147 149 (parallel [
            (set (reg:SI 658)
                (plus:SI (reg:SI 657)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (nil))

(insn 149 148 150 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 657)
            (const_int 0 [0]))) blake_ref.c:464 -1
     (nil))

(insn 150 149 151 (set (reg:SI 657)
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 658)
            (reg:SI 657))) blake_ref.c:464 -1
     (nil))

(insn 151 150 152 (parallel [
            (set (reg:SI 659)
                (ashiftrt:SI (reg:SI 657)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (expr_list:REG_EQUAL (div:SI (reg:SI 89 [ D.6033 ])
            (const_int 8 [0x8]))
        (nil)))

(insn 152 151 0 (set (reg:SI 117 [ D.6033 ])
        (reg:SI 659)) blake_ref.c:464 -1
     (nil))

;; _51 = _12 % 8;

(insn 153 152 154 (parallel [
            (set (reg:SI 660)
                (ashiftrt:SI (reg:SI 89 [ D.6033 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (nil))

(insn 154 153 155 (parallel [
            (set (reg:SI 661)
                (lshiftrt:SI (reg:SI 660)
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (nil))

(insn 155 154 156 (parallel [
            (set (reg:SI 662)
                (plus:SI (reg:SI 89 [ D.6033 ])
                    (reg:SI 661)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (nil))

(insn 156 155 157 (parallel [
            (set (reg:SI 663)
                (and:SI (reg:SI 662)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (nil))

(insn 157 156 158 (parallel [
            (set (reg:SI 664)
                (minus:SI (reg:SI 663)
                    (reg:SI 661)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (nil))

(insn 158 157 0 (set (reg:SI 120 [ D.6033 ])
        (reg:SI 664)) blake_ref.c:464 -1
     (nil))
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223

;; _60 = (unsigned char) _59;

(insn 159 158 160 (set (reg:SI 666)
        (const_int 8 [0x8])) blake_ref.c:465 -1
     (nil))

(insn 160 159 161 (parallel [
            (set (reg:SI 665 [ D.6033 ])
                (minus:SI (reg:SI 666)
                    (reg:SI 120 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 -1
     (nil))

(insn 161 160 162 (set (reg:SI 668)
        (const_int 255 [0xff])) blake_ref.c:465 -1
     (nil))

(insn 162 161 163 (parallel [
            (set (reg:SI 667 [ D.6033 ])
                (ashift:SI (reg:SI 668)
                    (subreg:QI (reg:SI 665 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 -1
     (nil))

(insn 163 162 164 (set (reg:DI 669)
        (sign_extend:DI (reg:SI 117 [ D.6033 ]))) blake_ref.c:464 -1
     (nil))

(insn 164 163 165 (parallel [
            (set (reg:QI 670 [ D.6037 ])
                (and:QI (subreg:QI (reg:SI 667 [ D.6033 ]) 0)
                    (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                                (reg:DI 669))
                            (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 -1
     (nil))

(insn 165 164 166 (set (reg:SI 672)
        (const_int 128 [0x80])) blake_ref.c:465 -1
     (nil))

(insn 166 165 167 (parallel [
            (set (reg:SI 671 [ D.6033 ])
                (ashiftrt:SI (reg:SI 672)
                    (subreg:QI (reg:SI 120 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 -1
     (nil))

(insn 167 166 0 (parallel [
            (set (reg:QI 128 [ D.6034 ])
                (xor:QI (reg:QI 670 [ D.6037 ])
                    (subreg:QI (reg:SI 671 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 -1
     (nil))
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223

;; state_4(D)->data32[_48] = _60;

(insn 168 167 169 (set (reg:DI 673)
        (sign_extend:DI (reg:SI 117 [ D.6033 ]))) blake_ref.c:465 -1
     (nil))

(insn 169 168 0 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 673))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (reg:QI 128 [ D.6034 ])) blake_ref.c:465 -1
     (nil))

;; if (_61 <= 5)

(insn 170 169 171 (parallel [
            (set (reg:SI 674 [ D.6035 ])
                (plus:SI (reg:SI 90 [ D.6032 ])
                    (const_int -441 [0xfffffffffffffe47])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:467 -1
     (nil))

(insn 171 170 172 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 674 [ D.6035 ])
            (const_int 5 [0x5]))) blake_ref.c:467 -1
     (nil))

(jump_insn 172 171 0 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:467 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 22

;; if (_5 == 224)

(insn 174 173 175 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 224 [0xe0]))) blake_ref.c:469 -1
     (nil))

(jump_insn 175 174 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:469 -1
     (int_list:REG_BR_PROB 2800 (nil)))

;; Generating RTL for gimple basic block 23
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223

;; state_4(D)->data32[_48] = _63;

(insn 177 176 178 (set (reg:DI 675)
        (sign_extend:DI (reg:SI 117 [ D.6033 ]))) blake_ref.c:472 -1
     (nil))

(insn 178 177 179 (parallel [
            (set (reg:QI 676)
                (xor:QI (reg:QI 128 [ D.6034 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:472 -1
     (nil))

(insn 179 178 0 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 675))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (reg:QI 676)) blake_ref.c:472 -1
     (nil))

;; Generating RTL for gimple basic block 24
Swap operands in stmt:
_66 = _64 + _749;
Cost left opnd=0, right opnd=1

;; 

(code_label 180 179 181 107 "" [0 uses])

(note 181 180 0 NOTE_INSN_BASIC_BLOCK)

;; _66 = _749 + _64;

(insn 182 181 183 (parallel [
            (set (reg:SI 677 [ D.6032 ])
                (plus:SI (reg:SI 88 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:473 -1
     (nil))

(insn 183 182 0 (parallel [
            (set (reg:SI 87 [ D.6031 ])
                (plus:SI (reg:SI 677 [ D.6032 ])
                    (reg:SI 120 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:473 -1
     (nil))

;; state_4(D)->datalen = 448;

(insn 184 183 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 448 [0x1c0])) blake_ref.c:475 -1
     (nil))

;; Generating RTL for gimple basic block 25

;; 

(code_label 187 186 188 106 "" [0 uses])

(note 188 187 0 NOTE_INSN_BASIC_BLOCK)

;; if (_12 <= 439)

(insn 189 188 190 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.6033 ])
            (const_int 439 [0x1b7]))) blake_ref.c:478 -1
     (nil))

(jump_insn 190 189 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:478 -1
     (int_list:REG_BR_PROB 7100 (nil)))

;; Generating RTL for gimple basic block 26

;; _70 = low_14 + 4294966856;

(insn 192 191 0 (parallel [
            (set (reg:SI 609 [ D.6031 ])
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:480 -1
     (nil))

;; state_4(D)->t32[0] = _70;

(insn 193 192 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 609 [ D.6031 ])) blake_ref.c:480 -1
     (nil))

;; _73 = (int) _72;

(insn 194 193 195 (parallel [
            (set (reg:SI 678 [ D.6035 ])
                (and:SI (reg:SI 90 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:481 -1
     (nil))

(insn 195 194 0 (parallel [
            (set (reg:SI 137 [ D.6033 ])
                (plus:SI (reg:SI 678 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:481 -1
     (nil))

;; state_4(D)->datalen = _73;

(insn 196 195 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 137 [ D.6033 ])) blake_ref.c:481 -1
     (nil))

;; _75 = (long long unsigned int) _74;

(insn 197 196 198 (set (reg:SI 680)
        (const_int 440 [0x1b8])) blake_ref.c:482 -1
     (nil))

(insn 198 197 199 (parallel [
            (set (reg:SI 679 [ D.6033 ])
                (minus:SI (reg:SI 680)
                    (reg:SI 137 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:482 -1
     (nil))

(insn 199 198 0 (set (reg:DI 139 [ D.6036 ])
        (sign_extend:DI (reg:SI 679 [ D.6033 ]))) blake_ref.c:482 -1
     (nil))

;; if (_568 != 0)

(insn 200 199 201 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 139 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(insn 201 200 202 (set (reg:QI 682 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(insn 202 201 203 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 682 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(jump_insn 203 202 204 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 208)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 1400 (nil)))

(insn 204 203 205 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 137 [ D.6033 ])
            (const_int 512 [0x200]))) blake_ref.c:295 -1
     (nil))

(insn 205 204 206 (set (reg:QI 684 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(insn 206 205 207 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 684 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(jump_insn 207 206 208 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 8372 (nil)))

(code_label 208 207 0 111 "" [0 uses])

;; Generating RTL for gimple basic block 27

;; Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], _75);

(insn 210 209 211 (set (reg:DI 37 r8)
        (reg:DI 139 [ D.6036 ])) -1
     (nil))

(insn 211 210 212 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))

(insn 212 211 213 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 213 212 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _583 = state_4(D)->t32[0];

(insn 214 213 0 (set (reg:SI 609 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))

;; _859 = state_4(D)->hashbitlen;

(insn 215 214 0 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 28

;; 

(code_label 218 217 219 109 "" [0 uses])

(note 219 218 0 NOTE_INSN_BASIC_BLOCK)

;; if (_12 > 504)

(insn 220 219 221 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.6033 ])
            (const_int 504 [0x1f8]))) blake_ref.c:485 -1
     (nil))

(jump_insn 221 220 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:485 -1
     (int_list:REG_BR_PROB 7100 (nil)))

;; Generating RTL for gimple basic block 29

;; state_4(D)->t32[0] = _76;

(insn 223 222 224 (parallel [
            (set (reg:SI 685)
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:487 -1
     (nil))

(insn 224 223 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 685)) blake_ref.c:487 -1
     (nil))

;; state_4(D)->datalen = 512;

(insn 225 224 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 512 [0x200])) blake_ref.c:488 -1
     (nil))

;; Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], 0);

(insn 226 225 227 (set (reg:DI 37 r8)
        (const_int 0 [0])) -1
     (nil))

(insn 227 226 228 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))

(insn 228 227 229 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 229 228 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; state_4(D)->t32[0] = _78;

(insn 230 229 0 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                        (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:490 -1
     (nil))

;; Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], 440);

(insn 231 230 232 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) -1
     (nil))

(insn 232 231 233 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))

(insn 233 232 234 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 234 233 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; state_4(D)->nullt = 1;

(insn 235 234 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:492 -1
     (nil))

;; _743 = state_4(D)->t32[0];

(insn 236 235 0 (set (reg:SI 609 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))

;; _10 = state_4(D)->hashbitlen;

(insn 237 236 0 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 30

;; 

(code_label 240 239 241 112 "" [0 uses])

(note 241 240 0 NOTE_INSN_BASIC_BLOCK)

;; _79 = low_14 + 4294966784;

(insn 242 241 0 (parallel [
            (set (reg:SI 143 [ D.6032 ])
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:496 -1
     (nil))

;; state_4(D)->t32[0] = _79;

(insn 243 242 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 143 [ D.6032 ])) blake_ref.c:496 -1
     (nil))

;; _82 = (int) _81;

(insn 244 243 245 (parallel [
            (set (reg:SI 686 [ D.6035 ])
                (and:SI (reg:SI 90 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:498 -1
     (nil))

(insn 245 244 0 (parallel [
            (set (reg:SI 146 [ D.6033 ])
                (plus:SI (reg:SI 686 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:498 -1
     (nil))

;; state_4(D)->datalen = _82;

(insn 246 245 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 146 [ D.6033 ])) blake_ref.c:498 -1
     (nil))

;; _84 = (long long unsigned int) _83;

(insn 247 246 248 (set (reg:SI 688)
        (const_int 512 [0x200])) blake_ref.c:499 -1
     (nil))

(insn 248 247 249 (parallel [
            (set (reg:SI 687 [ D.6033 ])
                (minus:SI (reg:SI 688)
                    (reg:SI 146 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:499 -1
     (nil))

(insn 249 248 0 (set (reg:DI 148 [ D.6036 ])
        (sign_extend:DI (reg:SI 687 [ D.6033 ]))) blake_ref.c:499 -1
     (nil))

;; if (_261 != 0)

(insn 250 249 251 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 146 [ D.6033 ])
            (const_int 512 [0x200]))) blake_ref.c:295 -1
     (nil))

(insn 251 250 252 (set (reg:QI 690 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(insn 252 251 253 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 690 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(jump_insn 253 252 254 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 258)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 1400 (nil)))

(insn 254 253 255 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 148 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(insn 255 254 256 (set (reg:QI 692 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(insn 256 255 257 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 692 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(jump_insn 257 256 258 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 8372 (nil)))

(code_label 258 257 0 114 "" [0 uses])

;; Generating RTL for gimple basic block 31

;; Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], _84);

(insn 260 259 261 (set (reg:DI 37 r8)
        (reg:DI 148 [ D.6036 ])) -1
     (nil))

(insn 261 260 262 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))

(insn 262 261 263 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 263 262 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _860 = state_4(D)->t32[0];

(insn 264 263 0 (set (reg:SI 143 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 32

;; 

(code_label 265 264 266 113 "" [0 uses])

(note 266 265 0 NOTE_INSN_BASIC_BLOCK)

;; state_4(D)->t32[0] = _86;

(insn 267 266 268 (parallel [
            (set (reg:SI 693)
                (plus:SI (reg:SI 143 [ D.6032 ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:500 -1
     (nil))

(insn 268 267 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 693)) blake_ref.c:500 -1
     (nil))

;; Update32.part.0 (state_4(D), &MEM[(void *)&padding + 1B], 440);

(insn 269 268 270 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) -1
     (nil))

(insn 270 269 271 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))

(insn 271 270 272 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 272 271 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; state_4(D)->nullt = 1;

(insn 273 272 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:502 -1
     (nil))

;; _748 = state_4(D)->t32[0];

(insn 274 273 0 (set (reg:SI 609 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))

;; _861 = state_4(D)->hashbitlen;

(insn 275 274 0 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 33

;; 

(code_label 276 275 277 110 "" [0 uses])

(note 277 276 0 NOTE_INSN_BASIC_BLOCK)

;; state_4(D)->t32[0] = _88;

(insn 278 277 279 (parallel [
            (set (reg:SI 694)
                (plus:SI (reg:SI 609 [ D.6031 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:505 -1
     (nil))

(insn 279 278 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 694)) blake_ref.c:505 -1
     (nil))

;; if (_862 == 224)

(insn 280 279 281 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 224 [0xe0]))) blake_ref.c:506 -1
     (nil))

(jump_insn 281 280 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:506 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 34

;; Update32.part.0 (state_4(D), &zz, 8);

(insn 283 282 284 (parallel [
            (set (reg:DI 695)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 284 283 285 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 285 284 286 (set (reg:DI 1 dx)
        (reg:DI 695)) -1
     (nil))

(insn 286 285 287 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 287 286 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _62 = state_4(D)->t32[0];

(insn 288 287 0 (set (reg:SI 87 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 35

;; 

(code_label 291 290 292 115 "" [0 uses])

(note 292 291 0 NOTE_INSN_BASIC_BLOCK)

;; Update32.part.0 (state_4(D), &zo, 8);

(insn 293 292 294 (parallel [
            (set (reg:DI 696)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 294 293 295 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 295 294 296 (set (reg:DI 1 dx)
        (reg:DI 696)) -1
     (nil))

(insn 296 295 297 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 297 296 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _7 = state_4(D)->t32[0];

(insn 298 297 0 (set (reg:SI 87 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 36

;; 

(code_label 299 298 300 108 "" [0 uses])

(note 300 299 0 NOTE_INSN_BASIC_BLOCK)

;; state_4(D)->t32[0] = _91;

(insn 301 300 302 (parallel [
            (set (reg:SI 697)
                (plus:SI (reg:SI 87 [ D.6031 ])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:511 -1
     (nil))

(insn 302 301 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 697)) blake_ref.c:511 -1
     (nil))

;; Update32.part.0 (state_4(D), &msglen, 64);

(insn 303 302 304 (parallel [
            (set (reg:DI 698)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 304 303 305 (set (reg:DI 37 r8)
        (const_int 64 [0x40])) -1
     (nil))

(insn 305 304 306 (set (reg:DI 1 dx)
        (reg:DI 698)) -1
     (nil))

(insn 306 305 307 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 307 306 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 37

;; 

(code_label 308 307 309 105 "" [0 uses])

(note 309 308 0 NOTE_INSN_BASIC_BLOCK)

;; *hashval_6(D) = _94;

(insn 310 309 311 (set (reg:SI 700)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 -1
     (nil))

(insn 311 310 312 (parallel [
            (set (reg:SI 699 [ D.6032 ])
                (lshiftrt:SI (reg:SI 700)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:515 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
            (const_int 24 [0x18]))
        (nil)))

(insn 312 311 0 (set (mem:QI (reg/v/f:DI 634 [ hashval ]) [0 *hashval_6(D)+0 S1 A8])
        (subreg:QI (reg:SI 699 [ D.6032 ]) 0)) blake_ref.c:515 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 1B] = _97;

(insn 313 312 314 (set (reg:SI 702)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 -1
     (nil))

(insn 314 313 315 (parallel [
            (set (reg:SI 701 [ D.6032 ])
                (lshiftrt:SI (reg:SI 702)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:515 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
            (const_int 16 [0x10]))
        (nil)))

(insn 315 314 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 1 [0x1])) [0 MEM[(BitSequence *)hashval_6(D) + 1B]+0 S1 A8])
        (subreg:QI (reg:SI 701 [ D.6032 ]) 0)) blake_ref.c:515 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 2B] = _100;

(insn 316 315 317 (set (reg:SI 704)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 -1
     (nil))

(insn 317 316 318 (parallel [
            (set (reg:SI 703 [ D.6032 ])
                (lshiftrt:SI (reg:SI 704)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:515 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
            (const_int 8 [0x8]))
        (nil)))

(insn 318 317 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 2 [0x2])) [0 MEM[(BitSequence *)hashval_6(D) + 2B]+0 S1 A8])
        (subreg:QI (reg:SI 703 [ D.6032 ]) 0)) blake_ref.c:515 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 3B] = _102;

(insn 319 318 320 (set (reg:SI 705)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 -1
     (nil))

(insn 320 319 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 3 [0x3])) [0 MEM[(BitSequence *)hashval_6(D) + 3B]+0 S1 A8])
        (subreg:QI (reg:SI 705) 0)) blake_ref.c:515 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 4B] = _105;

(insn 321 320 322 (set (reg:SI 707)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 -1
     (nil))

(insn 322 321 323 (parallel [
            (set (reg:SI 706 [ D.6032 ])
                (lshiftrt:SI (reg:SI 707)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:516 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
            (const_int 24 [0x18]))
        (nil)))

(insn 323 322 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 4 [0x4])) [0 MEM[(BitSequence *)hashval_6(D) + 4B]+0 S1 A8])
        (subreg:QI (reg:SI 706 [ D.6032 ]) 0)) blake_ref.c:516 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 5B] = _108;

(insn 324 323 325 (set (reg:SI 709)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 -1
     (nil))

(insn 325 324 326 (parallel [
            (set (reg:SI 708 [ D.6032 ])
                (lshiftrt:SI (reg:SI 709)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:516 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 326 325 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 5 [0x5])) [0 MEM[(BitSequence *)hashval_6(D) + 5B]+0 S1 A8])
        (subreg:QI (reg:SI 708 [ D.6032 ]) 0)) blake_ref.c:516 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 6B] = _111;

(insn 327 326 328 (set (reg:SI 711)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 -1
     (nil))

(insn 328 327 329 (parallel [
            (set (reg:SI 710 [ D.6032 ])
                (lshiftrt:SI (reg:SI 711)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:516 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
            (const_int 8 [0x8]))
        (nil)))

(insn 329 328 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 6 [0x6])) [0 MEM[(BitSequence *)hashval_6(D) + 6B]+0 S1 A8])
        (subreg:QI (reg:SI 710 [ D.6032 ]) 0)) blake_ref.c:516 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 7B] = _113;

(insn 330 329 331 (set (reg:SI 712)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 -1
     (nil))

(insn 331 330 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 7 [0x7])) [0 MEM[(BitSequence *)hashval_6(D) + 7B]+0 S1 A8])
        (subreg:QI (reg:SI 712) 0)) blake_ref.c:516 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 8B] = _116;

(insn 332 331 333 (set (reg:SI 714)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 -1
     (nil))

(insn 333 332 334 (parallel [
            (set (reg:SI 713 [ D.6032 ])
                (lshiftrt:SI (reg:SI 714)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:517 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
            (const_int 24 [0x18]))
        (nil)))

(insn 334 333 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 8 [0x8])) [0 MEM[(BitSequence *)hashval_6(D) + 8B]+0 S1 A8])
        (subreg:QI (reg:SI 713 [ D.6032 ]) 0)) blake_ref.c:517 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 9B] = _119;

(insn 335 334 336 (set (reg:SI 716)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 -1
     (nil))

(insn 336 335 337 (parallel [
            (set (reg:SI 715 [ D.6032 ])
                (lshiftrt:SI (reg:SI 716)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:517 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
            (const_int 16 [0x10]))
        (nil)))

(insn 337 336 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 9 [0x9])) [0 MEM[(BitSequence *)hashval_6(D) + 9B]+0 S1 A8])
        (subreg:QI (reg:SI 715 [ D.6032 ]) 0)) blake_ref.c:517 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 10B] = _122;

(insn 338 337 339 (set (reg:SI 718)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 -1
     (nil))

(insn 339 338 340 (parallel [
            (set (reg:SI 717 [ D.6032 ])
                (lshiftrt:SI (reg:SI 718)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:517 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
            (const_int 8 [0x8]))
        (nil)))

(insn 340 339 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 10 [0xa])) [0 MEM[(BitSequence *)hashval_6(D) + 10B]+0 S1 A8])
        (subreg:QI (reg:SI 717 [ D.6032 ]) 0)) blake_ref.c:517 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 11B] = _124;

(insn 341 340 342 (set (reg:SI 719)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 -1
     (nil))

(insn 342 341 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 11 [0xb])) [0 MEM[(BitSequence *)hashval_6(D) + 11B]+0 S1 A8])
        (subreg:QI (reg:SI 719) 0)) blake_ref.c:517 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 12B] = _127;

(insn 343 342 344 (set (reg:SI 721)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 -1
     (nil))

(insn 344 343 345 (parallel [
            (set (reg:SI 720 [ D.6032 ])
                (lshiftrt:SI (reg:SI 721)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:518 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
            (const_int 24 [0x18]))
        (nil)))

(insn 345 344 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 12 [0xc])) [0 MEM[(BitSequence *)hashval_6(D) + 12B]+0 S1 A8])
        (subreg:QI (reg:SI 720 [ D.6032 ]) 0)) blake_ref.c:518 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 13B] = _130;

(insn 346 345 347 (set (reg:SI 723)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 -1
     (nil))

(insn 347 346 348 (parallel [
            (set (reg:SI 722 [ D.6032 ])
                (lshiftrt:SI (reg:SI 723)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:518 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 348 347 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 13 [0xd])) [0 MEM[(BitSequence *)hashval_6(D) + 13B]+0 S1 A8])
        (subreg:QI (reg:SI 722 [ D.6032 ]) 0)) blake_ref.c:518 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 14B] = _133;

(insn 349 348 350 (set (reg:SI 725)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 -1
     (nil))

(insn 350 349 351 (parallel [
            (set (reg:SI 724 [ D.6032 ])
                (lshiftrt:SI (reg:SI 725)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:518 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
            (const_int 8 [0x8]))
        (nil)))

(insn 351 350 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 14 [0xe])) [0 MEM[(BitSequence *)hashval_6(D) + 14B]+0 S1 A8])
        (subreg:QI (reg:SI 724 [ D.6032 ]) 0)) blake_ref.c:518 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 15B] = _135;

(insn 352 351 353 (set (reg:SI 726)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 -1
     (nil))

(insn 353 352 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 15 [0xf])) [0 MEM[(BitSequence *)hashval_6(D) + 15B]+0 S1 A8])
        (subreg:QI (reg:SI 726) 0)) blake_ref.c:518 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 16B] = _138;

(insn 354 353 355 (set (reg:SI 728)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 -1
     (nil))

(insn 355 354 356 (parallel [
            (set (reg:SI 727 [ D.6032 ])
                (lshiftrt:SI (reg:SI 728)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:519 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
            (const_int 24 [0x18]))
        (nil)))

(insn 356 355 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 16 [0x10])) [0 MEM[(BitSequence *)hashval_6(D) + 16B]+0 S1 A8])
        (subreg:QI (reg:SI 727 [ D.6032 ]) 0)) blake_ref.c:519 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 17B] = _141;

(insn 357 356 358 (set (reg:SI 730)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 -1
     (nil))

(insn 358 357 359 (parallel [
            (set (reg:SI 729 [ D.6032 ])
                (lshiftrt:SI (reg:SI 730)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:519 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
            (const_int 16 [0x10]))
        (nil)))

(insn 359 358 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 17 [0x11])) [0 MEM[(BitSequence *)hashval_6(D) + 17B]+0 S1 A8])
        (subreg:QI (reg:SI 729 [ D.6032 ]) 0)) blake_ref.c:519 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 18B] = _144;

(insn 360 359 361 (set (reg:SI 732)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 -1
     (nil))

(insn 361 360 362 (parallel [
            (set (reg:SI 731 [ D.6032 ])
                (lshiftrt:SI (reg:SI 732)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:519 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
            (const_int 8 [0x8]))
        (nil)))

(insn 362 361 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 18 [0x12])) [0 MEM[(BitSequence *)hashval_6(D) + 18B]+0 S1 A8])
        (subreg:QI (reg:SI 731 [ D.6032 ]) 0)) blake_ref.c:519 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 19B] = _146;

(insn 363 362 364 (set (reg:SI 733)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 -1
     (nil))

(insn 364 363 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 19 [0x13])) [0 MEM[(BitSequence *)hashval_6(D) + 19B]+0 S1 A8])
        (subreg:QI (reg:SI 733) 0)) blake_ref.c:519 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 20B] = _149;

(insn 365 364 366 (set (reg:SI 735)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 -1
     (nil))

(insn 366 365 367 (parallel [
            (set (reg:SI 734 [ D.6032 ])
                (lshiftrt:SI (reg:SI 735)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:520 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
            (const_int 24 [0x18]))
        (nil)))

(insn 367 366 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 20 [0x14])) [0 MEM[(BitSequence *)hashval_6(D) + 20B]+0 S1 A8])
        (subreg:QI (reg:SI 734 [ D.6032 ]) 0)) blake_ref.c:520 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 21B] = _152;

(insn 368 367 369 (set (reg:SI 737)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 -1
     (nil))

(insn 369 368 370 (parallel [
            (set (reg:SI 736 [ D.6032 ])
                (lshiftrt:SI (reg:SI 737)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:520 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 370 369 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 21 [0x15])) [0 MEM[(BitSequence *)hashval_6(D) + 21B]+0 S1 A8])
        (subreg:QI (reg:SI 736 [ D.6032 ]) 0)) blake_ref.c:520 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 22B] = _155;

(insn 371 370 372 (set (reg:SI 739)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 -1
     (nil))

(insn 372 371 373 (parallel [
            (set (reg:SI 738 [ D.6032 ])
                (lshiftrt:SI (reg:SI 739)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:520 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
            (const_int 8 [0x8]))
        (nil)))

(insn 373 372 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 22 [0x16])) [0 MEM[(BitSequence *)hashval_6(D) + 22B]+0 S1 A8])
        (subreg:QI (reg:SI 738 [ D.6032 ]) 0)) blake_ref.c:520 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 23B] = _157;

(insn 374 373 375 (set (reg:SI 740)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 -1
     (nil))

(insn 375 374 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 23 [0x17])) [0 MEM[(BitSequence *)hashval_6(D) + 23B]+0 S1 A8])
        (subreg:QI (reg:SI 740) 0)) blake_ref.c:520 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 24B] = _160;

(insn 376 375 377 (set (reg:SI 742)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 -1
     (nil))

(insn 377 376 378 (parallel [
            (set (reg:SI 741 [ D.6032 ])
                (lshiftrt:SI (reg:SI 742)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:521 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
            (const_int 24 [0x18]))
        (nil)))

(insn 378 377 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 24 [0x18])) [0 MEM[(BitSequence *)hashval_6(D) + 24B]+0 S1 A8])
        (subreg:QI (reg:SI 741 [ D.6032 ]) 0)) blake_ref.c:521 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 25B] = _163;

(insn 379 378 380 (set (reg:SI 744)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 -1
     (nil))

(insn 380 379 381 (parallel [
            (set (reg:SI 743 [ D.6032 ])
                (lshiftrt:SI (reg:SI 744)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:521 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
            (const_int 16 [0x10]))
        (nil)))

(insn 381 380 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 25 [0x19])) [0 MEM[(BitSequence *)hashval_6(D) + 25B]+0 S1 A8])
        (subreg:QI (reg:SI 743 [ D.6032 ]) 0)) blake_ref.c:521 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 26B] = _166;

(insn 382 381 383 (set (reg:SI 746)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 -1
     (nil))

(insn 383 382 384 (parallel [
            (set (reg:SI 745 [ D.6032 ])
                (lshiftrt:SI (reg:SI 746)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:521 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
            (const_int 8 [0x8]))
        (nil)))

(insn 384 383 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 26 [0x1a])) [0 MEM[(BitSequence *)hashval_6(D) + 26B]+0 S1 A8])
        (subreg:QI (reg:SI 745 [ D.6032 ]) 0)) blake_ref.c:521 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 27B] = _168;

(insn 385 384 386 (set (reg:SI 747)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 -1
     (nil))

(insn 386 385 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 27 [0x1b])) [0 MEM[(BitSequence *)hashval_6(D) + 27B]+0 S1 A8])
        (subreg:QI (reg:SI 747) 0)) blake_ref.c:521 -1
     (nil))

;; if (_169 == 256)

(insn 387 386 388 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 256 [0x100]))) blake_ref.c:523 -1
     (nil))

(jump_insn 388 387 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:523 -1
     (int_list:REG_BR_PROB 6218 (nil)))

;; Generating RTL for gimple basic block 38

;; MEM[(BitSequence *)hashval_6(D) + 28B] = _172;

(insn 390 389 391 (set (reg:SI 749)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 -1
     (nil))

(insn 391 390 392 (parallel [
            (set (reg:SI 748 [ D.6032 ])
                (lshiftrt:SI (reg:SI 749)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:524 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])
            (const_int 24 [0x18]))
        (nil)))

(insn 392 391 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 28 [0x1c])) [0 MEM[(BitSequence *)hashval_6(D) + 28B]+0 S1 A8])
        (subreg:QI (reg:SI 748 [ D.6032 ]) 0)) blake_ref.c:524 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 29B] = _175;

(insn 393 392 394 (set (reg:SI 751)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 -1
     (nil))

(insn 394 393 395 (parallel [
            (set (reg:SI 750 [ D.6032 ])
                (lshiftrt:SI (reg:SI 751)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:524 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 395 394 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 29 [0x1d])) [0 MEM[(BitSequence *)hashval_6(D) + 29B]+0 S1 A8])
        (subreg:QI (reg:SI 750 [ D.6032 ]) 0)) blake_ref.c:524 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 30B] = _178;

(insn 396 395 397 (set (reg:SI 753)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 -1
     (nil))

(insn 397 396 398 (parallel [
            (set (reg:SI 752 [ D.6032 ])
                (lshiftrt:SI (reg:SI 753)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:524 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])
            (const_int 8 [0x8]))
        (nil)))

(insn 398 397 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 30 [0x1e])) [0 MEM[(BitSequence *)hashval_6(D) + 30B]+0 S1 A8])
        (subreg:QI (reg:SI 752 [ D.6032 ]) 0)) blake_ref.c:524 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 31B] = _180;

(insn 399 398 400 (set (reg:SI 754)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 -1
     (nil))

(insn 400 399 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 31 [0x1f])) [0 MEM[(BitSequence *)hashval_6(D) + 31B]+0 S1 A8])
        (subreg:QI (reg:SI 754) 0)) blake_ref.c:524 -1
     (nil))

;; Generating RTL for gimple basic block 39

;; 

(code_label 401 400 402 116 "" [0 uses])

(note 402 401 0 NOTE_INSN_BASIC_BLOCK)

;; msglen ={v} {CLOBBER};

(nil)

;; zz ={v} {CLOBBER};

(nil)

;; zo ={v} {CLOBBER};

(nil)

;; oz ={v} {CLOBBER};

(nil)

;; oo ={v} {CLOBBER};

(nil)

;; Generating RTL for gimple basic block 40

;; 

(code_label 405 404 406 93 "" [0 uses])

(note 406 405 0 NOTE_INSN_BASIC_BLOCK)

;; zz = 0;

(insn 407 406 0 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [0 zz+0 S1 A32])
        (const_int 0 [0])) blake_ref.c:535 -1
     (nil))

;; zo = 1;

(insn 408 407 0 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -19 [0xffffffffffffffed])) [0 zo+0 S1 A8])
        (const_int 1 [0x1])) blake_ref.c:535 -1
     (nil))

;; oz = 128;

(insn 409 408 0 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -18 [0xffffffffffffffee])) [0 oz+0 S1 A16])
        (const_int -128 [0xffffffffffffff80])) blake_ref.c:535 -1
     (nil))

;; oo = 129;

(insn 410 409 0 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -17 [0xffffffffffffffef])) [0 oo+0 S1 A8])
        (const_int -127 [0xffffffffffffff81])) blake_ref.c:535 -1
     (nil))

;; _183 = state_4(D)->t64[0];

(insn 411 410 0 (set (reg:DI 241 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) blake_ref.c:539 -1
     (nil))

;; _184 = state_4(D)->datalen;

(insn 412 411 0 (set (reg:SI 242 [ D.6033 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])) blake_ref.c:539 -1
     (nil))

;; _185 = (long long unsigned int) _184;

(insn 413 412 0 (set (reg:DI 243 [ D.6036 ])
        (sign_extend:DI (reg:SI 242 [ D.6033 ]))) blake_ref.c:539 -1
     (nil))

;; low_186 = _183 + _185;

(insn 414 413 0 (parallel [
            (set (reg/v:DI 244 [ low ])
                (plus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 243 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:539 -1
     (nil))

;; high_187 = state_4(D)->t64[1];

(insn 415 414 0 (set (reg/v:DI 245 [ high ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 208 [0xd0])) [3 state_4(D)->t64+8 S8 A64])) blake_ref.c:540 -1
     (nil))

;; if (_185 > low_186)

(insn 416 415 417 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 243 [ D.6036 ])
            (reg/v:DI 244 [ low ]))) blake_ref.c:541 -1
     (nil))

(jump_insn 417 416 0 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:541 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 41

;; high_188 = high_187 + 1;

(insn 419 418 0 (parallel [
            (set (reg/v:DI 245 [ high ])
                (plus:DI (reg/v:DI 245 [ high ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:542 -1
     (nil))

;; Generating RTL for gimple basic block 42

;; 

(code_label 420 419 421 118 "" [0 uses])

(note 421 420 0 NOTE_INSN_BASIC_BLOCK)

;; _190 = high_189 >> 32;

(insn 422 421 0 (parallel [
            (set (reg:DI 246 [ D.6036 ])
                (lshiftrt:DI (reg/v:DI 245 [ high ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))

;; _191 = (unsigned int) _190;

(insn 423 422 0 (set (reg:SI 247 [ D.6032 ])
        (subreg:SI (reg:DI 246 [ D.6036 ]) 0)) blake_ref.c:543 -1
     (nil))

;; msglen[0] = _193;

(insn 424 423 425 (parallel [
            (set (reg:SI 755 [ D.6032 ])
                (lshiftrt:SI (reg:SI 247 [ D.6032 ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))

(insn 425 424 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [0 msglen+0 S1 A128])
        (subreg:QI (reg:SI 755 [ D.6032 ]) 0)) blake_ref.c:543 -1
     (nil))

;; msglen[1] = _195;

(insn 426 425 427 (parallel [
            (set (reg:SI 756 [ D.6032 ])
                (lshiftrt:SI (reg:SI 247 [ D.6032 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))

(insn 427 426 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -15 [0xfffffffffffffff1])) [0 msglen+1 S1 A8])
        (subreg:QI (reg:SI 756 [ D.6032 ]) 0)) blake_ref.c:543 -1
     (nil))

;; msglen[2] = _197;

(insn 428 427 429 (parallel [
            (set (reg:SI 757 [ D.6032 ])
                (lshiftrt:SI (reg:SI 247 [ D.6032 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))

(insn 429 428 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -14 [0xfffffffffffffff2])) [0 msglen+2 S1 A16])
        (subreg:QI (reg:SI 757 [ D.6032 ]) 0)) blake_ref.c:543 -1
     (nil))

;; msglen[3] = _198;

(insn 430 429 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -13 [0xfffffffffffffff3])) [0 msglen+3 S1 A8])
        (subreg:QI (reg:DI 246 [ D.6036 ]) 0)) blake_ref.c:543 -1
     (nil))

;; _199 = (unsigned int) high_189;

(insn 431 430 0 (set (reg:SI 255 [ D.6032 ])
        (subreg:SI (reg/v:DI 245 [ high ]) 0)) blake_ref.c:543 -1
     (nil))

;; msglen[4] = _201;

(insn 432 431 433 (parallel [
            (set (reg:SI 758 [ D.6032 ])
                (lshiftrt:SI (reg:SI 255 [ D.6032 ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))

(insn 433 432 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [0 msglen+4 S1 A32])
        (subreg:QI (reg:SI 758 [ D.6032 ]) 0)) blake_ref.c:543 -1
     (nil))

;; msglen[5] = _203;

(insn 434 433 435 (parallel [
            (set (reg:SI 759 [ D.6032 ])
                (lshiftrt:SI (reg:SI 255 [ D.6032 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))

(insn 435 434 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -11 [0xfffffffffffffff5])) [0 msglen+5 S1 A8])
        (subreg:QI (reg:SI 759 [ D.6032 ]) 0)) blake_ref.c:543 -1
     (nil))

;; msglen[6] = _205;

(insn 436 435 437 (parallel [
            (set (reg:SI 760 [ D.6032 ])
                (lshiftrt:SI (reg:SI 255 [ D.6032 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))

(insn 437 436 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 msglen+6 S1 A16])
        (subreg:QI (reg:SI 760 [ D.6032 ]) 0)) blake_ref.c:543 -1
     (nil))

;; msglen[7] = _206;

(insn 438 437 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 msglen+7 S1 A8])
        (subreg:QI (reg/v:DI 245 [ high ]) 0)) blake_ref.c:543 -1
     (nil))

;; _207 = low_186 >> 32;

(insn 439 438 0 (parallel [
            (set (reg:DI 263 [ D.6036 ])
                (lshiftrt:DI (reg/v:DI 244 [ low ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))

;; _208 = (unsigned int) _207;

(insn 440 439 0 (set (reg:SI 264 [ D.6032 ])
        (subreg:SI (reg:DI 263 [ D.6036 ]) 0)) blake_ref.c:544 -1
     (nil))

;; msglen[8] = _210;

(insn 441 440 442 (parallel [
            (set (reg:SI 761 [ D.6032 ])
                (lshiftrt:SI (reg:SI 264 [ D.6032 ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))

(insn 442 441 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 msglen+8 S1 A64])
        (subreg:QI (reg:SI 761 [ D.6032 ]) 0)) blake_ref.c:544 -1
     (nil))

;; msglen[9] = _212;

(insn 443 442 444 (parallel [
            (set (reg:SI 762 [ D.6032 ])
                (lshiftrt:SI (reg:SI 264 [ D.6032 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))

(insn 444 443 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -7 [0xfffffffffffffff9])) [0 msglen+9 S1 A8])
        (subreg:QI (reg:SI 762 [ D.6032 ]) 0)) blake_ref.c:544 -1
     (nil))

;; msglen[10] = _214;

(insn 445 444 446 (parallel [
            (set (reg:SI 763 [ D.6032 ])
                (lshiftrt:SI (reg:SI 264 [ D.6032 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))

(insn 446 445 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -6 [0xfffffffffffffffa])) [0 msglen+10 S1 A16])
        (subreg:QI (reg:SI 763 [ D.6032 ]) 0)) blake_ref.c:544 -1
     (nil))

;; msglen[11] = _215;

(insn 447 446 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -5 [0xfffffffffffffffb])) [0 msglen+11 S1 A8])
        (subreg:QI (reg:DI 263 [ D.6036 ]) 0)) blake_ref.c:544 -1
     (nil))

;; _216 = (unsigned int) low_186;

(insn 448 447 0 (set (reg:SI 272 [ D.6032 ])
        (subreg:SI (reg/v:DI 244 [ low ]) 0)) blake_ref.c:544 -1
     (nil))

;; msglen[12] = _218;

(insn 449 448 450 (parallel [
            (set (reg:SI 764 [ D.6032 ])
                (lshiftrt:SI (reg:SI 272 [ D.6032 ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))

(insn 450 449 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 msglen+12 S1 A32])
        (subreg:QI (reg:SI 764 [ D.6032 ]) 0)) blake_ref.c:544 -1
     (nil))

;; msglen[13] = _220;

(insn 451 450 452 (parallel [
            (set (reg:SI 765 [ D.6032 ])
                (lshiftrt:SI (reg:SI 272 [ D.6032 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))

(insn 452 451 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -3 [0xfffffffffffffffd])) [0 msglen+13 S1 A8])
        (subreg:QI (reg:SI 765 [ D.6032 ]) 0)) blake_ref.c:544 -1
     (nil))

;; msglen[14] = _222;

(insn 453 452 454 (parallel [
            (set (reg:SI 766 [ D.6032 ])
                (lshiftrt:SI (reg:SI 272 [ D.6032 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))

(insn 454 453 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -2 [0xfffffffffffffffe])) [0 msglen+14 S1 A16])
        (subreg:QI (reg:SI 766 [ D.6032 ]) 0)) blake_ref.c:544 -1
     (nil))

;; msglen[15] = _223;

(insn 455 454 0 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 msglen+15 S1 A8])
        (subreg:QI (reg/v:DI 244 [ low ]) 0)) blake_ref.c:544 -1
     (nil))

;; _224 = (unsigned int) _184;

(insn 456 455 0 (set (reg:SI 280 [ D.6035 ])
        (reg:SI 242 [ D.6033 ])) blake_ref.c:546 -1
     (nil))

;; if (_225 == 0)

(insn 457 456 458 (parallel [
            (set (reg:SI 767 [ D.6035 ])
                (and:SI (reg:SI 280 [ D.6035 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:546 -1
     (nil))

(insn 458 457 459 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 767 [ D.6035 ])
            (const_int 0 [0]))) blake_ref.c:546 -1
     (nil))

(jump_insn 459 458 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:546 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 43

;; if (_184 == 888)

(insn 461 460 462 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 242 [ D.6033 ])
            (const_int 888 [0x378]))) blake_ref.c:549 -1
     (nil))

(jump_insn 462 461 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:549 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 44

;; state_4(D)->t64[0] = _226;

(insn 464 463 465 (parallel [
            (set (reg:DI 768)
                (plus:DI (reg:DI 241 [ D.6036 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:551 -1
     (nil))

(insn 465 464 0 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 768)) blake_ref.c:551 -1
     (nil))

;; if (_5 == 384)

(insn 466 465 467 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:552 -1
     (nil))

(jump_insn 467 466 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:552 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 45

;; Update64.part.1 (state_4(D), &oz, 8);

(insn 469 468 470 (parallel [
            (set (reg:DI 769)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -18 [0xffffffffffffffee])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 470 469 471 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 471 470 472 (set (reg:DI 1 dx)
        (reg:DI 769)) -1
     (nil))

(insn 472 471 473 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 473 472 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _866 = state_4(D)->t64[0];

(insn 474 473 0 (set (reg:DI 292 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 46

;; 

(code_label 477 476 478 121 "" [0 uses])

(note 478 477 0 NOTE_INSN_BASIC_BLOCK)

;; Update64.part.1 (state_4(D), &oo, 8);

(insn 479 478 480 (parallel [
            (set (reg:DI 770)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -17 [0xffffffffffffffef])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 480 479 481 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 481 480 482 (set (reg:DI 1 dx)
        (reg:DI 770)) -1
     (nil))

(insn 482 481 483 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 483 482 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _182 = state_4(D)->t64[0];

(insn 484 483 0 (set (reg:DI 292 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 47

;; 

(code_label 487 486 488 120 "" [0 uses])

(note 488 487 0 NOTE_INSN_BASIC_BLOCK)

;; if (_184 <= 887)

(insn 489 488 490 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 242 [ D.6033 ])
            (const_int 887 [0x377]))) blake_ref.c:558 -1
     (nil))

(jump_insn 490 489 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:558 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 48

;; if (_184 == 0)

(insn 492 491 493 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 242 [ D.6033 ])
            (const_int 0 [0]))) blake_ref.c:560 -1
     (nil))

(jump_insn 493 492 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:560 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 49

;; state_4(D)->nullt = 1;

(insn 495 494 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:561 -1
     (nil))

;; Generating RTL for gimple basic block 50

;; 

(code_label 498 497 499 123 "" [0 uses])

(note 499 498 0 NOTE_INSN_BASIC_BLOCK)

;; _232 = (long long unsigned int) _231;

(insn 500 499 501 (set (reg:SI 772)
        (const_int 1024 [0x400])) blake_ref.c:568 -1
     (nil))

(insn 501 500 502 (parallel [
            (set (reg:SI 771 [ D.6033 ])
                (minus:SI (reg:SI 772)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:568 -1
     (nil))

(insn 502 501 0 (set (reg:DI 287 [ D.6036 ])
        (sign_extend:DI (reg:SI 771 [ D.6033 ]))) blake_ref.c:568 -1
     (nil))

;; _233 = _183 - _232;

(insn 503 502 0 (parallel [
            (set (reg:DI 288 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 287 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:568 -1
     (nil))

;; state_4(D)->t64[0] = _233;

(insn 504 503 0 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 288 [ D.6036 ])) blake_ref.c:568 -1
     (nil))

;; if (_69 != 0)

(insn 505 504 506 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 242 [ D.6033 ])
            (const_int 1024 [0x400]))) blake_ref.c:351 -1
     (nil))

(insn 506 505 507 (set (reg:QI 774 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(insn 507 506 508 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 774 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(jump_insn 508 507 509 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 513)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 1400 (nil)))

(insn 509 508 510 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 287 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(insn 510 509 511 (set (reg:QI 776 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(insn 511 510 512 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 776 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(jump_insn 512 511 513 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 8372 (nil)))

(code_label 513 512 0 126 "" [0 uses])

;; Generating RTL for gimple basic block 51

;; Update64.part.1 (state_4(D), &padding, _232);

(insn 515 514 516 (set (reg:DI 37 r8)
        (reg:DI 287 [ D.6036 ])) -1
     (nil))

(insn 516 515 517 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) -1
     (nil))

(insn 517 516 518 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 518 517 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _863 = state_4(D)->t64[0];

(insn 519 518 0 (set (reg:DI 288 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 52

;; 

(code_label 520 519 521 125 "" [0 uses])

(note 521 520 0 NOTE_INSN_BASIC_BLOCK)

;; state_4(D)->t64[0] = _235;

(insn 522 521 523 (parallel [
            (set (reg:DI 777)
                (plus:DI (reg:DI 288 [ D.6036 ])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:570 -1
     (nil))

(insn 523 522 0 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 777)) blake_ref.c:570 -1
     (nil))

;; Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], 888);

(insn 524 523 525 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) -1
     (nil))

(insn 525 524 526 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))

(insn 526 525 527 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 527 526 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; state_4(D)->nullt = 1;

(insn 528 527 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:572 -1
     (nil))

;; Generating RTL for gimple basic block 53

;; _236 = state_4(D)->hashbitlen;

(insn 530 529 0 (set (reg:SI 290 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) blake_ref.c:574 -1
     (nil))

;; if (_236 == 384)

(insn 531 530 532 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 290 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:574 -1
     (nil))

(jump_insn 532 531 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:574 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 54

;; Update64.part.1 (state_4(D), &zz, 8);

(insn 534 533 535 (parallel [
            (set (reg:DI 778)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 535 534 536 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 536 535 537 (set (reg:DI 1 dx)
        (reg:DI 778)) -1
     (nil))

(insn 537 536 538 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 538 537 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 55

;; 

(code_label 541 540 542 127 "" [0 uses])

(note 542 541 0 NOTE_INSN_BASIC_BLOCK)

;; if (_236 <= 383)

(insn 543 542 544 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 290 [ D.6033 ])
            (const_int 383 [0x17f]))) blake_ref.c:399 -1
     (nil))

(jump_insn 544 543 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:399 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 56

;; Update32.part.0 (state_4(D), &zo, 8);

(insn 546 545 547 (parallel [
            (set (reg:DI 779)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 547 546 548 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 548 547 549 (set (reg:DI 1 dx)
        (reg:DI 779)) -1
     (nil))

(insn 549 548 550 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 550 549 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 57

;; 

(code_label 553 552 554 129 "" [0 uses])

(note 554 553 0 NOTE_INSN_BASIC_BLOCK)

;; Update64.part.1 (state_4(D), &zo, 8);

(insn 555 554 556 (parallel [
            (set (reg:DI 780)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 556 555 557 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 557 556 558 (set (reg:DI 1 dx)
        (reg:DI 780)) -1
     (nil))

(insn 558 557 559 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 559 558 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 58

;; 

(code_label 560 559 561 128 "" [0 uses])

(note 561 560 0 NOTE_INSN_BASIC_BLOCK)

;; _238 = _237 + 18446744073709551608;

(insn 562 561 563 (set (reg:DI 781)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) blake_ref.c:578 -1
     (nil))

(insn 563 562 0 (parallel [
            (set (reg:DI 292 [ D.6036 ])
                (plus:DI (reg:DI 781)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:578 -1
     (expr_list:REG_EQUAL (plus:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))

;; Generating RTL for gimple basic block 59

;; 

(code_label 564 563 565 122 "" [0 uses])

(note 565 564 0 NOTE_INSN_BASIC_BLOCK)

;; state_4(D)->t64[0] = _240;

(insn 566 565 567 (parallel [
            (set (reg:DI 782)
                (plus:DI (reg:DI 292 [ D.6036 ])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:580 -1
     (nil))

(insn 567 566 0 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 782)) blake_ref.c:580 -1
     (nil))

;; if (_549 <= 383)

(insn 568 567 569 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:399 -1
     (nil))

(jump_insn 569 568 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:399 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 60

;; Update32.part.0 (state_4(D), &msglen, 128);

(insn 571 570 572 (parallel [
            (set (reg:DI 783)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 572 571 573 (set (reg:DI 37 r8)
        (const_int 128 [0x80])) -1
     (nil))

(insn 573 572 574 (set (reg:DI 1 dx)
        (reg:DI 783)) -1
     (nil))

(insn 574 573 575 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 575 574 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 61

;; 

(code_label 578 577 579 130 "" [0 uses])

(note 579 578 0 NOTE_INSN_BASIC_BLOCK)

;; Update64.part.1 (state_4(D), &msglen, 128);

(insn 580 579 581 (parallel [
            (set (reg:DI 784)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 581 580 582 (set (reg:DI 37 r8)
        (const_int 128 [0x80])) -1
     (nil))

(insn 582 581 583 (set (reg:DI 1 dx)
        (reg:DI 784)) -1
     (nil))

(insn 583 582 584 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 584 583 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 62

;; 

(code_label 587 586 588 119 "" [0 uses])

(note 588 587 0 NOTE_INSN_BASIC_BLOCK)

;; _241 = _184 / 8;

(insn 589 588 590 (set (reg:SI 785)
        (reg:SI 242 [ D.6033 ])) blake_ref.c:587 -1
     (nil))

(insn 590 589 591 (parallel [
            (set (reg:SI 786)
                (plus:SI (reg:SI 785)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))

(insn 591 590 592 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 785)
            (const_int 0 [0]))) blake_ref.c:587 -1
     (nil))

(insn 592 591 593 (set (reg:SI 785)
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 786)
            (reg:SI 785))) blake_ref.c:587 -1
     (nil))

(insn 593 592 594 (parallel [
            (set (reg:SI 787)
                (ashiftrt:SI (reg:SI 785)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (expr_list:REG_EQUAL (div:SI (reg:SI 242 [ D.6033 ])
            (const_int 8 [0x8]))
        (nil)))

(insn 594 593 0 (set (reg:SI 294 [ D.6033 ])
        (reg:SI 787)) blake_ref.c:587 -1
     (nil))

;; _244 = _184 % 8;

(insn 595 594 596 (parallel [
            (set (reg:SI 788)
                (ashiftrt:SI (reg:SI 242 [ D.6033 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))

(insn 596 595 597 (parallel [
            (set (reg:SI 789)
                (lshiftrt:SI (reg:SI 788)
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))

(insn 597 596 598 (parallel [
            (set (reg:SI 790)
                (plus:SI (reg:SI 242 [ D.6033 ])
                    (reg:SI 789)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))

(insn 598 597 599 (parallel [
            (set (reg:SI 791)
                (and:SI (reg:SI 790)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))

(insn 599 598 600 (parallel [
            (set (reg:SI 792)
                (minus:SI (reg:SI 791)
                    (reg:SI 789)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))

(insn 600 599 0 (set (reg:SI 297 [ D.6033 ])
        (reg:SI 792)) blake_ref.c:587 -1
     (nil))

;; _245 = 8 - _244;

(insn 601 600 602 (set (reg:SI 793)
        (const_int 8 [0x8])) blake_ref.c:587 -1
     (nil))

(insn 602 601 0 (parallel [
            (set (reg:SI 298 [ D.6033 ])
                (minus:SI (reg:SI 793)
                    (reg:SI 297 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223

;; _253 = (unsigned char) _252;

(insn 603 602 604 (set (reg:DI 794)
        (sign_extend:DI (reg:SI 294 [ D.6033 ]))) blake_ref.c:587 -1
     (nil))

(insn 604 603 605 (set (reg:SI 796)
        (const_int 255 [0xff])) blake_ref.c:588 -1
     (nil))

(insn 605 604 606 (parallel [
            (set (reg:SI 795 [ D.6033 ])
                (ashift:SI (reg:SI 796)
                    (subreg:QI (reg:SI 298 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 -1
     (nil))

(insn 606 605 607 (parallel [
            (set (reg:QI 797 [ D.6037 ])
                (and:QI (subreg:QI (reg:SI 795 [ D.6033 ]) 0)
                    (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                                (reg:DI 794))
                            (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 -1
     (nil))

(insn 607 606 608 (set (reg:SI 799)
        (const_int 128 [0x80])) blake_ref.c:588 -1
     (nil))

(insn 608 607 609 (parallel [
            (set (reg:SI 798 [ D.6033 ])
                (ashiftrt:SI (reg:SI 799)
                    (subreg:QI (reg:SI 297 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 -1
     (nil))

(insn 609 608 0 (parallel [
            (set (reg:QI 305 [ D.6034 ])
                (xor:QI (reg:QI 797 [ D.6037 ])
                    (subreg:QI (reg:SI 798 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 -1
     (nil))
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223

;; state_4(D)->data64[_241] = _253;

(insn 610 609 611 (set (reg:DI 800)
        (sign_extend:DI (reg:SI 294 [ D.6033 ]))) blake_ref.c:588 -1
     (nil))

(insn 611 610 0 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 800))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (reg:QI 305 [ D.6034 ])) blake_ref.c:588 -1
     (nil))

;; if (_254 <= 5)

(insn 612 611 613 (parallel [
            (set (reg:SI 801 [ D.6035 ])
                (plus:SI (reg:SI 280 [ D.6035 ])
                    (const_int -889 [0xfffffffffffffc87])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:590 -1
     (nil))

(insn 613 612 614 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 801 [ D.6035 ])
            (const_int 5 [0x5]))) blake_ref.c:590 -1
     (nil))

(jump_insn 614 613 0 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:590 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 63

;; if (_5 == 384)

(insn 616 615 617 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:592 -1
     (nil))

(jump_insn 617 616 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:592 -1
     (int_list:REG_BR_PROB 2800 (nil)))

;; Generating RTL for gimple basic block 64
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:114, generic-match.c:6949
Applying pattern match.pd:49, generic-match.c:3223

;; state_4(D)->data64[_241] = _256;

(insn 619 618 620 (set (reg:DI 802)
        (sign_extend:DI (reg:SI 294 [ D.6033 ]))) blake_ref.c:595 -1
     (nil))

(insn 620 619 621 (parallel [
            (set (reg:QI 803)
                (xor:QI (reg:QI 305 [ D.6034 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:595 -1
     (nil))

(insn 621 620 0 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 802))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (reg:QI 803)) blake_ref.c:595 -1
     (nil))

;; Generating RTL for gimple basic block 65

;; 

(code_label 622 621 623 133 "" [0 uses])

(note 623 622 0 NOTE_INSN_BASIC_BLOCK)

;; state_4(D)->datalen = 896;

(insn 624 623 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 896 [0x380])) blake_ref.c:598 -1
     (nil))

;; state_4(D)->t64[0] = _882;

(insn 625 624 626 (set (reg:DI 804 [ D.6036 ])
        (sign_extend:DI (reg:SI 298 [ D.6033 ]))) blake_ref.c:634 -1
     (nil))

(insn 626 625 627 (parallel [
            (set (reg:DI 805 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 804 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 -1
     (nil))

(insn 627 626 628 (parallel [
            (set (reg:DI 806)
                (plus:DI (reg:DI 805 [ D.6036 ])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 -1
     (nil))

(insn 628 627 0 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 806)) blake_ref.c:634 -1
     (nil))

;; Generating RTL for gimple basic block 66

;; 

(code_label 631 630 632 132 "" [0 uses])

(note 632 631 0 NOTE_INSN_BASIC_BLOCK)

;; if (_184 <= 887)

(insn 633 632 634 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 242 [ D.6033 ])
            (const_int 887 [0x377]))) blake_ref.c:601 -1
     (nil))

(jump_insn 634 633 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:601 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 67

;; _264 = _183 - _263;

(insn 636 635 637 (set (reg:SI 808)
        (const_int 888 [0x378])) blake_ref.c:603 -1
     (nil))

(insn 637 636 638 (parallel [
            (set (reg:SI 807 [ D.6033 ])
                (minus:SI (reg:SI 808)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:603 -1
     (nil))

(insn 638 637 639 (set (reg:DI 809 [ D.6036 ])
        (sign_extend:DI (reg:SI 807 [ D.6033 ]))) blake_ref.c:603 -1
     (nil))

(insn 639 638 0 (parallel [
            (set (reg:DI 616 [ D.6039 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 809 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:603 -1
     (nil))

;; state_4(D)->t64[0] = _264;

(insn 640 639 0 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 616 [ D.6039 ])) blake_ref.c:603 -1
     (nil))

;; _267 = (int) _266;

(insn 641 640 642 (parallel [
            (set (reg:SI 810 [ D.6035 ])
                (and:SI (reg:SI 280 [ D.6035 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:604 -1
     (nil))

(insn 642 641 0 (parallel [
            (set (reg:SI 317 [ D.6033 ])
                (plus:SI (reg:SI 810 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:604 -1
     (nil))

;; state_4(D)->datalen = _267;

(insn 643 642 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 317 [ D.6033 ])) blake_ref.c:604 -1
     (nil))

;; _269 = (long long unsigned int) _268;

(insn 644 643 645 (set (reg:SI 812)
        (const_int 888 [0x378])) blake_ref.c:605 -1
     (nil))

(insn 645 644 646 (parallel [
            (set (reg:SI 811 [ D.6033 ])
                (minus:SI (reg:SI 812)
                    (reg:SI 317 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:605 -1
     (nil))

(insn 646 645 0 (set (reg:DI 319 [ D.6036 ])
        (sign_extend:DI (reg:SI 811 [ D.6033 ]))) blake_ref.c:605 -1
     (nil))

;; if (_599 != 0)

(insn 647 646 648 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 319 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(insn 648 647 649 (set (reg:QI 814 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(insn 649 648 650 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 814 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(jump_insn 650 649 651 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 655)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 1400 (nil)))

(insn 651 650 652 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 317 [ D.6033 ])
            (const_int 1024 [0x400]))) blake_ref.c:351 -1
     (nil))

(insn 652 651 653 (set (reg:QI 816 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(insn 653 652 654 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 816 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(jump_insn 654 653 655 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 8372 (nil)))

(code_label 655 654 0 136 "" [0 uses])

;; Generating RTL for gimple basic block 68

;; Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], _269);

(insn 657 656 658 (set (reg:DI 37 r8)
        (reg:DI 319 [ D.6036 ])) -1
     (nil))

(insn 658 657 659 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))

(insn 659 658 660 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 660 659 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _9 = state_4(D)->t64[0];

(insn 661 660 0 (set (reg:DI 616 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))

;; _857 = state_4(D)->hashbitlen;

(insn 662 661 0 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 69

;; 

(code_label 665 664 666 134 "" [0 uses])

(note 666 665 0 NOTE_INSN_BASIC_BLOCK)

;; if (_184 > 1016)

(insn 667 666 668 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 242 [ D.6033 ])
            (const_int 1016 [0x3f8]))) blake_ref.c:608 -1
     (nil))

(jump_insn 668 667 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:608 -1
     (int_list:REG_BR_PROB 7100 (nil)))

;; Generating RTL for gimple basic block 70

;; state_4(D)->datalen = 1024;

(insn 670 669 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 1024 [0x400])) blake_ref.c:611 -1
     (nil))

;; state_4(D)->t64[0] = _561;

(insn 671 670 672 (set (reg:SI 818)
        (const_int 1024 [0x400])) blake_ref.c:362 -1
     (nil))

(insn 672 671 673 (parallel [
            (set (reg:SI 817 [ D.6033 ])
                (minus:SI (reg:SI 818)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 -1
     (nil))

(insn 673 672 674 (set (reg:DI 819 [ D.6036 ])
        (sign_extend:DI (reg:SI 817 [ D.6033 ]))) blake_ref.c:362 -1
     (nil))

(insn 674 673 675 (parallel [
            (set (reg:DI 820 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 819 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 -1
     (nil))

(insn 675 674 676 (parallel [
            (set (reg:DI 821)
                (plus:DI (reg:DI 820 [ D.6036 ])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 -1
     (nil))

(insn 676 675 0 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 821)) blake_ref.c:362 -1
     (nil))

;; compress64 (state_4(D), _557);

(insn 677 676 678 (parallel [
            (set (reg:DI 822 [ D.6040 ])
                (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 -1
     (nil))

(insn 678 677 679 (set (reg:DI 1 dx)
        (reg:DI 822 [ D.6040 ])) blake_ref.c:364 -1
     (nil))

(insn 679 678 680 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) blake_ref.c:364 -1
     (nil))

(call_insn 680 679 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:364 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))

;; state_4(D)->datalen = 0;

(insn 681 680 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:391 -1
     (nil))

;; state_4(D)->t64[0] = _274;

(insn 682 681 0 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                        (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:613 -1
     (nil))

;; Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], 888);

(insn 683 682 684 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) -1
     (nil))

(insn 684 683 685 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))

(insn 685 684 686 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 686 685 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; state_4(D)->nullt = 1;

(insn 687 686 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:615 -1
     (nil))

;; _855 = state_4(D)->t64[0];

(insn 688 687 0 (set (reg:DI 616 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))

;; _854 = state_4(D)->hashbitlen;

(insn 689 688 0 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 71

;; 

(code_label 692 691 693 137 "" [0 uses])

(note 693 692 0 NOTE_INSN_BASIC_BLOCK)

;; _277 = _183 - _276;

(insn 694 693 695 (set (reg:SI 824)
        (const_int 1024 [0x400])) blake_ref.c:619 -1
     (nil))

(insn 695 694 696 (parallel [
            (set (reg:SI 823 [ D.6033 ])
                (minus:SI (reg:SI 824)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:619 -1
     (nil))

(insn 696 695 697 (set (reg:DI 825 [ D.6036 ])
        (sign_extend:DI (reg:SI 823 [ D.6033 ]))) blake_ref.c:619 -1
     (nil))

(insn 697 696 0 (parallel [
            (set (reg:DI 327 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 825 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:619 -1
     (nil))

;; state_4(D)->t64[0] = _277;

(insn 698 697 0 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 327 [ D.6036 ])) blake_ref.c:619 -1
     (nil))

;; _280 = (int) _279;

(insn 699 698 700 (parallel [
            (set (reg:SI 826 [ D.6035 ])
                (and:SI (reg:SI 280 [ D.6035 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:621 -1
     (nil))

(insn 700 699 0 (parallel [
            (set (reg:SI 330 [ D.6033 ])
                (plus:SI (reg:SI 826 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:621 -1
     (nil))

;; state_4(D)->datalen = _280;

(insn 701 700 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 330 [ D.6033 ])) blake_ref.c:621 -1
     (nil))

;; _282 = (long long unsigned int) _281;

(insn 702 701 703 (set (reg:SI 828)
        (const_int 1024 [0x400])) blake_ref.c:622 -1
     (nil))

(insn 703 702 704 (parallel [
            (set (reg:SI 827 [ D.6033 ])
                (minus:SI (reg:SI 828)
                    (reg:SI 330 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:622 -1
     (nil))

(insn 704 703 0 (set (reg:DI 332 [ D.6036 ])
        (sign_extend:DI (reg:SI 827 [ D.6033 ]))) blake_ref.c:622 -1
     (nil))

;; if (_229 != 0)

(insn 705 704 706 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 332 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(insn 706 705 707 (set (reg:QI 830 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(insn 707 706 708 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 830 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(jump_insn 708 707 709 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 713)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 1400 (nil)))

(insn 709 708 710 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 330 [ D.6033 ])
            (const_int 1024 [0x400]))) blake_ref.c:351 -1
     (nil))

(insn 710 709 711 (set (reg:QI 832 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(insn 711 710 712 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 832 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(jump_insn 712 711 713 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 8372 (nil)))

(code_label 713 712 0 139 "" [0 uses])

;; Generating RTL for gimple basic block 72

;; Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], _282);

(insn 715 714 716 (set (reg:DI 37 r8)
        (reg:DI 332 [ D.6036 ])) -1
     (nil))

(insn 716 715 717 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))

(insn 717 716 718 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 718 717 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _34 = state_4(D)->t64[0];

(insn 719 718 0 (set (reg:DI 327 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 73

;; 

(code_label 720 719 721 138 "" [0 uses])

(note 721 720 0 NOTE_INSN_BASIC_BLOCK)

;; state_4(D)->t64[0] = _284;

(insn 722 721 723 (parallel [
            (set (reg:DI 833)
                (plus:DI (reg:DI 327 [ D.6036 ])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:623 -1
     (nil))

(insn 723 722 0 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 833)) blake_ref.c:623 -1
     (nil))

;; Update64.part.1 (state_4(D), &MEM[(void *)&padding + 1B], 888);

(insn 724 723 725 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) -1
     (nil))

(insn 725 724 726 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))

(insn 726 725 727 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 727 726 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; state_4(D)->nullt = 1;

(insn 728 727 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:625 -1
     (nil))

;; _181 = state_4(D)->t64[0];

(insn 729 728 0 (set (reg:DI 616 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))

;; _1 = state_4(D)->hashbitlen;

(insn 730 729 0 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 74

;; 

(code_label 731 730 732 135 "" [0 uses])

(note 732 731 0 NOTE_INSN_BASIC_BLOCK)

;; state_4(D)->t64[0] = _286;

(insn 733 732 734 (parallel [
            (set (reg:DI 834)
                (plus:DI (reg:DI 616 [ D.6039 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:628 -1
     (nil))

(insn 734 733 0 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 834)) blake_ref.c:628 -1
     (nil))

;; if (_613 == 384)

(insn 735 734 736 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:629 -1
     (nil))

(jump_insn 736 735 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:629 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 75

;; Update64.part.1 (state_4(D), &zz, 8);

(insn 738 737 739 (parallel [
            (set (reg:DI 835)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 739 738 740 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 740 739 741 (set (reg:DI 1 dx)
        (reg:DI 835)) -1
     (nil))

(insn 741 740 742 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 742 741 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _867 = state_4(D)->t64[0];

(insn 743 742 0 (set (reg:DI 594 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))

;; _856 = state_4(D)->hashbitlen;

(insn 744 743 0 (set (reg:SI 283 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 76

;; 

(code_label 747 746 748 140 "" [0 uses])

(note 748 747 0 NOTE_INSN_BASIC_BLOCK)

;; Update64.part.1 (state_4(D), &zo, 8);

(insn 749 748 750 (parallel [
            (set (reg:DI 836)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 750 749 751 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))

(insn 751 750 752 (set (reg:DI 1 dx)
        (reg:DI 836)) -1
     (nil))

(insn 752 751 753 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 753 752 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; _868 = state_4(D)->t64[0];

(insn 754 753 0 (set (reg:DI 594 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))

;; _853 = state_4(D)->hashbitlen;

(insn 755 754 0 (set (reg:SI 283 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))

;; Generating RTL for gimple basic block 77

;; 

(code_label 756 755 757 141 "" [0 uses])

(note 757 756 0 NOTE_INSN_BASIC_BLOCK)

;; state_4(D)->t64[0] = _289;

(insn 758 757 759 (parallel [
            (set (reg:DI 837)
                (plus:DI (reg:DI 594 [ D.6039 ])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 -1
     (nil))

(insn 759 758 0 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 837)) blake_ref.c:634 -1
     (nil))

;; if (_227 <= 383)

(insn 761 759 762 77 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 283 [ D.6033 ])
            (const_int 383 [0x17f]))) blake_ref.c:399 -1
     (nil))

(jump_insn 762 761 765 77 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 760)
            (pc))) blake_ref.c:399 -1
     (int_list:REG_BR_PROB 10000 (nil)))

(note 765 762 763 85 [bb 85] NOTE_INSN_BASIC_BLOCK)

(jump_insn 763 765 764 85 (set (pc)
        (label_ref 578)) blake_ref.c:399 -1
     (nil))

(barrier 764 763 0)

;; Generating RTL for gimple basic block 78

;; 

(code_label 766 764 767 131 "" [0 uses])

(note 767 766 0 NOTE_INSN_BASIC_BLOCK)

;; *hashval_6(D) = _294;

(insn 768 767 769 (set (reg:DI 839)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))

(insn 769 768 770 (parallel [
            (set (reg:DI 838 [ D.6036 ])
                (lshiftrt:DI (reg:DI 839)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 770 769 771 (parallel [
            (set (reg:SI 840 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 838 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (nil))

(insn 771 770 0 (set (mem:QI (reg/v/f:DI 634 [ hashval ]) [0 *hashval_6(D)+0 S1 A8])
        (subreg:QI (reg:SI 840 [ D.6032 ]) 0)) blake_ref.c:638 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 1B] = _299;

(insn 772 771 773 (set (reg:DI 842)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))

(insn 773 772 774 (parallel [
            (set (reg:DI 841 [ D.6036 ])
                (lshiftrt:DI (reg:DI 842)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 774 773 775 (parallel [
            (set (reg:SI 843 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 841 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (nil))

(insn 775 774 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 1 [0x1])) [0 MEM[(BitSequence *)hashval_6(D) + 1B]+0 S1 A8])
        (subreg:QI (reg:SI 843 [ D.6032 ]) 0)) blake_ref.c:638 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 2B] = _304;

(insn 776 775 777 (set (reg:DI 845)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))

(insn 777 776 778 (parallel [
            (set (reg:DI 844 [ D.6036 ])
                (lshiftrt:DI (reg:DI 845)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 778 777 779 (parallel [
            (set (reg:SI 846 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 844 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (nil))

(insn 779 778 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 2 [0x2])) [0 MEM[(BitSequence *)hashval_6(D) + 2B]+0 S1 A8])
        (subreg:QI (reg:SI 846 [ D.6032 ]) 0)) blake_ref.c:638 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 3B] = _307;

(insn 780 779 781 (set (reg:DI 848)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))

(insn 781 780 782 (parallel [
            (set (reg:DI 847 [ D.6036 ])
                (lshiftrt:DI (reg:DI 848)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 782 781 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 3 [0x3])) [0 MEM[(BitSequence *)hashval_6(D) + 3B]+0 S1 A8])
        (subreg:QI (reg:DI 847 [ D.6036 ]) 0)) blake_ref.c:638 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 4B] = _311;

(insn 783 782 784 (set (reg:DI 849)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))

(insn 784 783 785 (parallel [
            (set (reg:SI 850 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 849) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (nil))

(insn 785 784 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 4 [0x4])) [0 MEM[(BitSequence *)hashval_6(D) + 4B]+0 S1 A8])
        (subreg:QI (reg:SI 850 [ D.6032 ]) 0)) blake_ref.c:638 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 5B] = _315;

(insn 786 785 787 (set (reg:DI 851)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))

(insn 787 786 788 (parallel [
            (set (reg:SI 852 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 851) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (nil))

(insn 788 787 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 5 [0x5])) [0 MEM[(BitSequence *)hashval_6(D) + 5B]+0 S1 A8])
        (subreg:QI (reg:SI 852 [ D.6032 ]) 0)) blake_ref.c:638 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 6B] = _319;

(insn 789 788 790 (set (reg:DI 853)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))

(insn 790 789 791 (parallel [
            (set (reg:SI 854 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 853) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (nil))

(insn 791 790 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 6 [0x6])) [0 MEM[(BitSequence *)hashval_6(D) + 6B]+0 S1 A8])
        (subreg:QI (reg:SI 854 [ D.6032 ]) 0)) blake_ref.c:638 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 7B] = _321;

(insn 792 791 793 (set (reg:DI 855)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))

(insn 793 792 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 7 [0x7])) [0 MEM[(BitSequence *)hashval_6(D) + 7B]+0 S1 A8])
        (subreg:QI (reg:DI 855) 0)) blake_ref.c:638 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 8B] = _326;

(insn 794 793 795 (set (reg:DI 857)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))

(insn 795 794 796 (parallel [
            (set (reg:DI 856 [ D.6036 ])
                (lshiftrt:DI (reg:DI 857)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 796 795 797 (parallel [
            (set (reg:SI 858 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 856 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (nil))

(insn 797 796 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 8 [0x8])) [0 MEM[(BitSequence *)hashval_6(D) + 8B]+0 S1 A8])
        (subreg:QI (reg:SI 858 [ D.6032 ]) 0)) blake_ref.c:639 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 9B] = _331;

(insn 798 797 799 (set (reg:DI 860)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))

(insn 799 798 800 (parallel [
            (set (reg:DI 859 [ D.6036 ])
                (lshiftrt:DI (reg:DI 860)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 800 799 801 (parallel [
            (set (reg:SI 861 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 859 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (nil))

(insn 801 800 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 9 [0x9])) [0 MEM[(BitSequence *)hashval_6(D) + 9B]+0 S1 A8])
        (subreg:QI (reg:SI 861 [ D.6032 ]) 0)) blake_ref.c:639 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 10B] = _336;

(insn 802 801 803 (set (reg:DI 863)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))

(insn 803 802 804 (parallel [
            (set (reg:DI 862 [ D.6036 ])
                (lshiftrt:DI (reg:DI 863)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 804 803 805 (parallel [
            (set (reg:SI 864 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 862 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (nil))

(insn 805 804 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 10 [0xa])) [0 MEM[(BitSequence *)hashval_6(D) + 10B]+0 S1 A8])
        (subreg:QI (reg:SI 864 [ D.6032 ]) 0)) blake_ref.c:639 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 11B] = _339;

(insn 806 805 807 (set (reg:DI 866)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))

(insn 807 806 808 (parallel [
            (set (reg:DI 865 [ D.6036 ])
                (lshiftrt:DI (reg:DI 866)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 808 807 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 11 [0xb])) [0 MEM[(BitSequence *)hashval_6(D) + 11B]+0 S1 A8])
        (subreg:QI (reg:DI 865 [ D.6036 ]) 0)) blake_ref.c:639 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 12B] = _343;

(insn 809 808 810 (set (reg:DI 867)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))

(insn 810 809 811 (parallel [
            (set (reg:SI 868 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 867) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (nil))

(insn 811 810 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 12 [0xc])) [0 MEM[(BitSequence *)hashval_6(D) + 12B]+0 S1 A8])
        (subreg:QI (reg:SI 868 [ D.6032 ]) 0)) blake_ref.c:639 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 13B] = _347;

(insn 812 811 813 (set (reg:DI 869)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))

(insn 813 812 814 (parallel [
            (set (reg:SI 870 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 869) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (nil))

(insn 814 813 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 13 [0xd])) [0 MEM[(BitSequence *)hashval_6(D) + 13B]+0 S1 A8])
        (subreg:QI (reg:SI 870 [ D.6032 ]) 0)) blake_ref.c:639 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 14B] = _351;

(insn 815 814 816 (set (reg:DI 871)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))

(insn 816 815 817 (parallel [
            (set (reg:SI 872 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 871) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (nil))

(insn 817 816 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 14 [0xe])) [0 MEM[(BitSequence *)hashval_6(D) + 14B]+0 S1 A8])
        (subreg:QI (reg:SI 872 [ D.6032 ]) 0)) blake_ref.c:639 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 15B] = _353;

(insn 818 817 819 (set (reg:DI 873)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))

(insn 819 818 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 15 [0xf])) [0 MEM[(BitSequence *)hashval_6(D) + 15B]+0 S1 A8])
        (subreg:QI (reg:DI 873) 0)) blake_ref.c:639 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 16B] = _358;

(insn 820 819 821 (set (reg:DI 875)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))

(insn 821 820 822 (parallel [
            (set (reg:DI 874 [ D.6036 ])
                (lshiftrt:DI (reg:DI 875)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 822 821 823 (parallel [
            (set (reg:SI 876 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 874 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (nil))

(insn 823 822 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 16 [0x10])) [0 MEM[(BitSequence *)hashval_6(D) + 16B]+0 S1 A8])
        (subreg:QI (reg:SI 876 [ D.6032 ]) 0)) blake_ref.c:640 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 17B] = _363;

(insn 824 823 825 (set (reg:DI 878)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))

(insn 825 824 826 (parallel [
            (set (reg:DI 877 [ D.6036 ])
                (lshiftrt:DI (reg:DI 878)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 826 825 827 (parallel [
            (set (reg:SI 879 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 877 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (nil))

(insn 827 826 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 17 [0x11])) [0 MEM[(BitSequence *)hashval_6(D) + 17B]+0 S1 A8])
        (subreg:QI (reg:SI 879 [ D.6032 ]) 0)) blake_ref.c:640 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 18B] = _368;

(insn 828 827 829 (set (reg:DI 881)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))

(insn 829 828 830 (parallel [
            (set (reg:DI 880 [ D.6036 ])
                (lshiftrt:DI (reg:DI 881)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 830 829 831 (parallel [
            (set (reg:SI 882 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 880 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (nil))

(insn 831 830 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 18 [0x12])) [0 MEM[(BitSequence *)hashval_6(D) + 18B]+0 S1 A8])
        (subreg:QI (reg:SI 882 [ D.6032 ]) 0)) blake_ref.c:640 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 19B] = _371;

(insn 832 831 833 (set (reg:DI 884)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))

(insn 833 832 834 (parallel [
            (set (reg:DI 883 [ D.6036 ])
                (lshiftrt:DI (reg:DI 884)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 834 833 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 19 [0x13])) [0 MEM[(BitSequence *)hashval_6(D) + 19B]+0 S1 A8])
        (subreg:QI (reg:DI 883 [ D.6036 ]) 0)) blake_ref.c:640 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 20B] = _375;

(insn 835 834 836 (set (reg:DI 885)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))

(insn 836 835 837 (parallel [
            (set (reg:SI 886 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 885) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (nil))

(insn 837 836 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 20 [0x14])) [0 MEM[(BitSequence *)hashval_6(D) + 20B]+0 S1 A8])
        (subreg:QI (reg:SI 886 [ D.6032 ]) 0)) blake_ref.c:640 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 21B] = _379;

(insn 838 837 839 (set (reg:DI 887)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))

(insn 839 838 840 (parallel [
            (set (reg:SI 888 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 887) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (nil))

(insn 840 839 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 21 [0x15])) [0 MEM[(BitSequence *)hashval_6(D) + 21B]+0 S1 A8])
        (subreg:QI (reg:SI 888 [ D.6032 ]) 0)) blake_ref.c:640 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 22B] = _383;

(insn 841 840 842 (set (reg:DI 889)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))

(insn 842 841 843 (parallel [
            (set (reg:SI 890 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 889) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (nil))

(insn 843 842 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 22 [0x16])) [0 MEM[(BitSequence *)hashval_6(D) + 22B]+0 S1 A8])
        (subreg:QI (reg:SI 890 [ D.6032 ]) 0)) blake_ref.c:640 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 23B] = _385;

(insn 844 843 845 (set (reg:DI 891)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))

(insn 845 844 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 23 [0x17])) [0 MEM[(BitSequence *)hashval_6(D) + 23B]+0 S1 A8])
        (subreg:QI (reg:DI 891) 0)) blake_ref.c:640 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 24B] = _390;

(insn 846 845 847 (set (reg:DI 893)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))

(insn 847 846 848 (parallel [
            (set (reg:DI 892 [ D.6036 ])
                (lshiftrt:DI (reg:DI 893)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 848 847 849 (parallel [
            (set (reg:SI 894 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 892 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (nil))

(insn 849 848 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 24 [0x18])) [0 MEM[(BitSequence *)hashval_6(D) + 24B]+0 S1 A8])
        (subreg:QI (reg:SI 894 [ D.6032 ]) 0)) blake_ref.c:641 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 25B] = _395;

(insn 850 849 851 (set (reg:DI 896)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))

(insn 851 850 852 (parallel [
            (set (reg:DI 895 [ D.6036 ])
                (lshiftrt:DI (reg:DI 896)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 852 851 853 (parallel [
            (set (reg:SI 897 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 895 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (nil))

(insn 853 852 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 25 [0x19])) [0 MEM[(BitSequence *)hashval_6(D) + 25B]+0 S1 A8])
        (subreg:QI (reg:SI 897 [ D.6032 ]) 0)) blake_ref.c:641 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 26B] = _400;

(insn 854 853 855 (set (reg:DI 899)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))

(insn 855 854 856 (parallel [
            (set (reg:DI 898 [ D.6036 ])
                (lshiftrt:DI (reg:DI 899)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 856 855 857 (parallel [
            (set (reg:SI 900 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 898 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (nil))

(insn 857 856 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 26 [0x1a])) [0 MEM[(BitSequence *)hashval_6(D) + 26B]+0 S1 A8])
        (subreg:QI (reg:SI 900 [ D.6032 ]) 0)) blake_ref.c:641 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 27B] = _403;

(insn 858 857 859 (set (reg:DI 902)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))

(insn 859 858 860 (parallel [
            (set (reg:DI 901 [ D.6036 ])
                (lshiftrt:DI (reg:DI 902)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 860 859 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 27 [0x1b])) [0 MEM[(BitSequence *)hashval_6(D) + 27B]+0 S1 A8])
        (subreg:QI (reg:DI 901 [ D.6036 ]) 0)) blake_ref.c:641 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 28B] = _407;

(insn 861 860 862 (set (reg:DI 903)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))

(insn 862 861 863 (parallel [
            (set (reg:SI 904 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 903) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (nil))

(insn 863 862 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 28 [0x1c])) [0 MEM[(BitSequence *)hashval_6(D) + 28B]+0 S1 A8])
        (subreg:QI (reg:SI 904 [ D.6032 ]) 0)) blake_ref.c:641 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 29B] = _411;

(insn 864 863 865 (set (reg:DI 905)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))

(insn 865 864 866 (parallel [
            (set (reg:SI 906 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 905) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (nil))

(insn 866 865 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 29 [0x1d])) [0 MEM[(BitSequence *)hashval_6(D) + 29B]+0 S1 A8])
        (subreg:QI (reg:SI 906 [ D.6032 ]) 0)) blake_ref.c:641 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 30B] = _415;

(insn 867 866 868 (set (reg:DI 907)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))

(insn 868 867 869 (parallel [
            (set (reg:SI 908 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 907) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (nil))

(insn 869 868 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 30 [0x1e])) [0 MEM[(BitSequence *)hashval_6(D) + 30B]+0 S1 A8])
        (subreg:QI (reg:SI 908 [ D.6032 ]) 0)) blake_ref.c:641 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 31B] = _417;

(insn 870 869 871 (set (reg:DI 909)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))

(insn 871 870 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 31 [0x1f])) [0 MEM[(BitSequence *)hashval_6(D) + 31B]+0 S1 A8])
        (subreg:QI (reg:DI 909) 0)) blake_ref.c:641 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 32B] = _422;

(insn 872 871 873 (set (reg:DI 911)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))

(insn 873 872 874 (parallel [
            (set (reg:DI 910 [ D.6036 ])
                (lshiftrt:DI (reg:DI 911)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 874 873 875 (parallel [
            (set (reg:SI 912 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 910 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (nil))

(insn 875 874 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 32 [0x20])) [0 MEM[(BitSequence *)hashval_6(D) + 32B]+0 S1 A8])
        (subreg:QI (reg:SI 912 [ D.6032 ]) 0)) blake_ref.c:642 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 33B] = _427;

(insn 876 875 877 (set (reg:DI 914)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))

(insn 877 876 878 (parallel [
            (set (reg:DI 913 [ D.6036 ])
                (lshiftrt:DI (reg:DI 914)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 878 877 879 (parallel [
            (set (reg:SI 915 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 913 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (nil))

(insn 879 878 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 33 [0x21])) [0 MEM[(BitSequence *)hashval_6(D) + 33B]+0 S1 A8])
        (subreg:QI (reg:SI 915 [ D.6032 ]) 0)) blake_ref.c:642 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 34B] = _432;

(insn 880 879 881 (set (reg:DI 917)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))

(insn 881 880 882 (parallel [
            (set (reg:DI 916 [ D.6036 ])
                (lshiftrt:DI (reg:DI 917)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 882 881 883 (parallel [
            (set (reg:SI 918 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 916 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (nil))

(insn 883 882 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 34 [0x22])) [0 MEM[(BitSequence *)hashval_6(D) + 34B]+0 S1 A8])
        (subreg:QI (reg:SI 918 [ D.6032 ]) 0)) blake_ref.c:642 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 35B] = _435;

(insn 884 883 885 (set (reg:DI 920)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))

(insn 885 884 886 (parallel [
            (set (reg:DI 919 [ D.6036 ])
                (lshiftrt:DI (reg:DI 920)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 886 885 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 35 [0x23])) [0 MEM[(BitSequence *)hashval_6(D) + 35B]+0 S1 A8])
        (subreg:QI (reg:DI 919 [ D.6036 ]) 0)) blake_ref.c:642 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 36B] = _439;

(insn 887 886 888 (set (reg:DI 921)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))

(insn 888 887 889 (parallel [
            (set (reg:SI 922 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 921) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (nil))

(insn 889 888 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 36 [0x24])) [0 MEM[(BitSequence *)hashval_6(D) + 36B]+0 S1 A8])
        (subreg:QI (reg:SI 922 [ D.6032 ]) 0)) blake_ref.c:642 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 37B] = _443;

(insn 890 889 891 (set (reg:DI 923)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))

(insn 891 890 892 (parallel [
            (set (reg:SI 924 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 923) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (nil))

(insn 892 891 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 37 [0x25])) [0 MEM[(BitSequence *)hashval_6(D) + 37B]+0 S1 A8])
        (subreg:QI (reg:SI 924 [ D.6032 ]) 0)) blake_ref.c:642 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 38B] = _447;

(insn 893 892 894 (set (reg:DI 925)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))

(insn 894 893 895 (parallel [
            (set (reg:SI 926 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 925) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (nil))

(insn 895 894 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 38 [0x26])) [0 MEM[(BitSequence *)hashval_6(D) + 38B]+0 S1 A8])
        (subreg:QI (reg:SI 926 [ D.6032 ]) 0)) blake_ref.c:642 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 39B] = _449;

(insn 896 895 897 (set (reg:DI 927)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))

(insn 897 896 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 39 [0x27])) [0 MEM[(BitSequence *)hashval_6(D) + 39B]+0 S1 A8])
        (subreg:QI (reg:DI 927) 0)) blake_ref.c:642 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 40B] = _454;

(insn 898 897 899 (set (reg:DI 929)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))

(insn 899 898 900 (parallel [
            (set (reg:DI 928 [ D.6036 ])
                (lshiftrt:DI (reg:DI 929)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 900 899 901 (parallel [
            (set (reg:SI 930 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 928 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (nil))

(insn 901 900 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 40 [0x28])) [0 MEM[(BitSequence *)hashval_6(D) + 40B]+0 S1 A8])
        (subreg:QI (reg:SI 930 [ D.6032 ]) 0)) blake_ref.c:643 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 41B] = _459;

(insn 902 901 903 (set (reg:DI 932)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))

(insn 903 902 904 (parallel [
            (set (reg:DI 931 [ D.6036 ])
                (lshiftrt:DI (reg:DI 932)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 904 903 905 (parallel [
            (set (reg:SI 933 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 931 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (nil))

(insn 905 904 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 41 [0x29])) [0 MEM[(BitSequence *)hashval_6(D) + 41B]+0 S1 A8])
        (subreg:QI (reg:SI 933 [ D.6032 ]) 0)) blake_ref.c:643 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 42B] = _464;

(insn 906 905 907 (set (reg:DI 935)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))

(insn 907 906 908 (parallel [
            (set (reg:DI 934 [ D.6036 ])
                (lshiftrt:DI (reg:DI 935)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 908 907 909 (parallel [
            (set (reg:SI 936 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 934 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (nil))

(insn 909 908 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 42 [0x2a])) [0 MEM[(BitSequence *)hashval_6(D) + 42B]+0 S1 A8])
        (subreg:QI (reg:SI 936 [ D.6032 ]) 0)) blake_ref.c:643 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 43B] = _467;

(insn 910 909 911 (set (reg:DI 938)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))

(insn 911 910 912 (parallel [
            (set (reg:DI 937 [ D.6036 ])
                (lshiftrt:DI (reg:DI 938)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 912 911 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 43 [0x2b])) [0 MEM[(BitSequence *)hashval_6(D) + 43B]+0 S1 A8])
        (subreg:QI (reg:DI 937 [ D.6036 ]) 0)) blake_ref.c:643 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 44B] = _471;

(insn 913 912 914 (set (reg:DI 939)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))

(insn 914 913 915 (parallel [
            (set (reg:SI 940 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 939) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (nil))

(insn 915 914 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 44 [0x2c])) [0 MEM[(BitSequence *)hashval_6(D) + 44B]+0 S1 A8])
        (subreg:QI (reg:SI 940 [ D.6032 ]) 0)) blake_ref.c:643 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 45B] = _475;

(insn 916 915 917 (set (reg:DI 941)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))

(insn 917 916 918 (parallel [
            (set (reg:SI 942 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 941) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (nil))

(insn 918 917 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 45 [0x2d])) [0 MEM[(BitSequence *)hashval_6(D) + 45B]+0 S1 A8])
        (subreg:QI (reg:SI 942 [ D.6032 ]) 0)) blake_ref.c:643 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 46B] = _479;

(insn 919 918 920 (set (reg:DI 943)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))

(insn 920 919 921 (parallel [
            (set (reg:SI 944 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 943) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (nil))

(insn 921 920 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 46 [0x2e])) [0 MEM[(BitSequence *)hashval_6(D) + 46B]+0 S1 A8])
        (subreg:QI (reg:SI 944 [ D.6032 ]) 0)) blake_ref.c:643 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 47B] = _481;

(insn 922 921 923 (set (reg:DI 945)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))

(insn 923 922 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 47 [0x2f])) [0 MEM[(BitSequence *)hashval_6(D) + 47B]+0 S1 A8])
        (subreg:QI (reg:DI 945) 0)) blake_ref.c:643 -1
     (nil))

;; if (_482 == 512)

(insn 924 923 925 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 512 [0x200]))) blake_ref.c:645 -1
     (nil))

(jump_insn 925 924 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:645 -1
     (int_list:REG_BR_PROB 6218 (nil)))

;; Generating RTL for gimple basic block 79

;; MEM[(BitSequence *)hashval_6(D) + 48B] = _487;

(insn 927 926 928 (set (reg:DI 947)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))

(insn 928 927 929 (parallel [
            (set (reg:DI 946 [ D.6036 ])
                (lshiftrt:DI (reg:DI 947)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 929 928 930 (parallel [
            (set (reg:SI 948 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 946 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (nil))

(insn 930 929 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 48 [0x30])) [0 MEM[(BitSequence *)hashval_6(D) + 48B]+0 S1 A8])
        (subreg:QI (reg:SI 948 [ D.6032 ]) 0)) blake_ref.c:646 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 49B] = _492;

(insn 931 930 932 (set (reg:DI 950)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))

(insn 932 931 933 (parallel [
            (set (reg:DI 949 [ D.6036 ])
                (lshiftrt:DI (reg:DI 950)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 933 932 934 (parallel [
            (set (reg:SI 951 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 949 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (nil))

(insn 934 933 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 49 [0x31])) [0 MEM[(BitSequence *)hashval_6(D) + 49B]+0 S1 A8])
        (subreg:QI (reg:SI 951 [ D.6032 ]) 0)) blake_ref.c:646 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 50B] = _497;

(insn 935 934 936 (set (reg:DI 953)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))

(insn 936 935 937 (parallel [
            (set (reg:DI 952 [ D.6036 ])
                (lshiftrt:DI (reg:DI 953)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 937 936 938 (parallel [
            (set (reg:SI 954 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 952 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (nil))

(insn 938 937 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 50 [0x32])) [0 MEM[(BitSequence *)hashval_6(D) + 50B]+0 S1 A8])
        (subreg:QI (reg:SI 954 [ D.6032 ]) 0)) blake_ref.c:646 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 51B] = _500;

(insn 939 938 940 (set (reg:DI 956)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))

(insn 940 939 941 (parallel [
            (set (reg:DI 955 [ D.6036 ])
                (lshiftrt:DI (reg:DI 956)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 941 940 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 51 [0x33])) [0 MEM[(BitSequence *)hashval_6(D) + 51B]+0 S1 A8])
        (subreg:QI (reg:DI 955 [ D.6036 ]) 0)) blake_ref.c:646 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 52B] = _504;

(insn 942 941 943 (set (reg:DI 957)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))

(insn 943 942 944 (parallel [
            (set (reg:SI 958 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 957) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (nil))

(insn 944 943 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 52 [0x34])) [0 MEM[(BitSequence *)hashval_6(D) + 52B]+0 S1 A8])
        (subreg:QI (reg:SI 958 [ D.6032 ]) 0)) blake_ref.c:646 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 53B] = _508;

(insn 945 944 946 (set (reg:DI 959)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))

(insn 946 945 947 (parallel [
            (set (reg:SI 960 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 959) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (nil))

(insn 947 946 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 53 [0x35])) [0 MEM[(BitSequence *)hashval_6(D) + 53B]+0 S1 A8])
        (subreg:QI (reg:SI 960 [ D.6032 ]) 0)) blake_ref.c:646 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 54B] = _512;

(insn 948 947 949 (set (reg:DI 961)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))

(insn 949 948 950 (parallel [
            (set (reg:SI 962 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 961) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (nil))

(insn 950 949 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 54 [0x36])) [0 MEM[(BitSequence *)hashval_6(D) + 54B]+0 S1 A8])
        (subreg:QI (reg:SI 962 [ D.6032 ]) 0)) blake_ref.c:646 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 55B] = _514;

(insn 951 950 952 (set (reg:DI 963)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))

(insn 952 951 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 55 [0x37])) [0 MEM[(BitSequence *)hashval_6(D) + 55B]+0 S1 A8])
        (subreg:QI (reg:DI 963) 0)) blake_ref.c:646 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 56B] = _519;

(insn 953 952 954 (set (reg:DI 965)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))

(insn 954 953 955 (parallel [
            (set (reg:DI 964 [ D.6036 ])
                (lshiftrt:DI (reg:DI 965)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 955 954 956 (parallel [
            (set (reg:SI 966 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 964 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (nil))

(insn 956 955 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 56 [0x38])) [0 MEM[(BitSequence *)hashval_6(D) + 56B]+0 S1 A8])
        (subreg:QI (reg:SI 966 [ D.6032 ]) 0)) blake_ref.c:647 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 57B] = _524;

(insn 957 956 958 (set (reg:DI 968)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))

(insn 958 957 959 (parallel [
            (set (reg:DI 967 [ D.6036 ])
                (lshiftrt:DI (reg:DI 968)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 959 958 960 (parallel [
            (set (reg:SI 969 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 967 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (nil))

(insn 960 959 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 57 [0x39])) [0 MEM[(BitSequence *)hashval_6(D) + 57B]+0 S1 A8])
        (subreg:QI (reg:SI 969 [ D.6032 ]) 0)) blake_ref.c:647 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 58B] = _529;

(insn 961 960 962 (set (reg:DI 971)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))

(insn 962 961 963 (parallel [
            (set (reg:DI 970 [ D.6036 ])
                (lshiftrt:DI (reg:DI 971)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 963 962 964 (parallel [
            (set (reg:SI 972 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 970 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (nil))

(insn 964 963 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 58 [0x3a])) [0 MEM[(BitSequence *)hashval_6(D) + 58B]+0 S1 A8])
        (subreg:QI (reg:SI 972 [ D.6032 ]) 0)) blake_ref.c:647 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 59B] = _532;

(insn 965 964 966 (set (reg:DI 974)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))

(insn 966 965 967 (parallel [
            (set (reg:DI 973 [ D.6036 ])
                (lshiftrt:DI (reg:DI 974)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])
            (const_int 32 [0x20]))
        (nil)))

(insn 967 966 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 59 [0x3b])) [0 MEM[(BitSequence *)hashval_6(D) + 59B]+0 S1 A8])
        (subreg:QI (reg:DI 973 [ D.6036 ]) 0)) blake_ref.c:647 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 60B] = _536;

(insn 968 967 969 (set (reg:DI 975)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))

(insn 969 968 970 (parallel [
            (set (reg:SI 976 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 975) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (nil))

(insn 970 969 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 60 [0x3c])) [0 MEM[(BitSequence *)hashval_6(D) + 60B]+0 S1 A8])
        (subreg:QI (reg:SI 976 [ D.6032 ]) 0)) blake_ref.c:647 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 61B] = _540;

(insn 971 970 972 (set (reg:DI 977)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))

(insn 972 971 973 (parallel [
            (set (reg:SI 978 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 977) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (nil))

(insn 973 972 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 61 [0x3d])) [0 MEM[(BitSequence *)hashval_6(D) + 61B]+0 S1 A8])
        (subreg:QI (reg:SI 978 [ D.6032 ]) 0)) blake_ref.c:647 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 62B] = _544;

(insn 974 973 975 (set (reg:DI 979)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))

(insn 975 974 976 (parallel [
            (set (reg:SI 980 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 979) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (nil))

(insn 976 975 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 62 [0x3e])) [0 MEM[(BitSequence *)hashval_6(D) + 62B]+0 S1 A8])
        (subreg:QI (reg:SI 980 [ D.6032 ]) 0)) blake_ref.c:647 -1
     (nil))

;; MEM[(BitSequence *)hashval_6(D) + 63B] = _546;

(insn 977 976 978 (set (reg:DI 981)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))

(insn 978 977 0 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 63 [0x3f])) [0 MEM[(BitSequence *)hashval_6(D) + 63B]+0 S1 A8])
        (subreg:QI (reg:DI 981) 0)) blake_ref.c:647 -1
     (nil))

;; Generating RTL for gimple basic block 80

;; 

(code_label 979 978 980 143 "" [0 uses])

(note 980 979 0 NOTE_INSN_BASIC_BLOCK)

;; msglen ={v} {CLOBBER};

(nil)

;; zz ={v} {CLOBBER};

(nil)

;; zo ={v} {CLOBBER};

(nil)

;; oz ={v} {CLOBBER};

(nil)

;; oo ={v} {CLOBBER};

(nil)

;; Generating RTL for gimple basic block 81

;; 

(code_label 981 980 982 117 "" [0 uses])

(note 982 981 0 NOTE_INSN_BASIC_BLOCK)

;; return 0;

(insn 983 982 984 (set (reg:SI 632 [ <retval> ])
        (const_int 0 [0])) -1
     (nil))

(jump_insn 984 983 985 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 985 984 0)

;; Generating RTL for gimple basic block 82

;; 

(code_label 986 985 987 100 "" [0 uses])

(note 987 986 0 NOTE_INSN_BASIC_BLOCK)

;; state_4(D)->t32[0] = _577;

(insn 988 987 989 (parallel [
            (set (reg:SI 983)
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:440 -1
     (nil))

(insn 989 988 0 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 983)) blake_ref.c:440 -1
     (nil))

;; Update32.part.0 (state_4(D), &padding, _585);

(insn 990 989 991 (set (reg:SI 985)
        (const_int 440 [0x1b8])) -1
     (nil))

(insn 991 990 992 (parallel [
            (set (reg:SI 984 [ D.6033 ])
                (minus:SI (reg:SI 985)
                    (reg:SI 89 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 992 991 993 (set (reg:DI 986 [ D.6036 ])
        (sign_extend:DI (reg:SI 984 [ D.6033 ]))) -1
     (nil))

(insn 993 992 994 (set (reg:DI 37 r8)
        (reg:DI 986 [ D.6036 ])) -1
     (nil))

(insn 994 993 995 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) -1
     (nil))

(insn 995 994 996 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 996 995 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 83

;; 

(code_label 1000 999 1001 124 "" [0 uses])

(note 1001 1000 0 NOTE_INSN_BASIC_BLOCK)

;; _584 = (long long unsigned int) _581;

(insn 1002 1001 1003 (set (reg:SI 988)
        (const_int 888 [0x378])) blake_ref.c:563 -1
     (nil))

(insn 1003 1002 1004 (parallel [
            (set (reg:SI 987 [ D.6033 ])
                (minus:SI (reg:SI 988)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:563 -1
     (nil))

(insn 1004 1003 0 (set (reg:DI 603 [ D.6036 ])
        (sign_extend:DI (reg:SI 987 [ D.6033 ]))) blake_ref.c:563 -1
     (nil))

;; state_4(D)->t64[0] = _575;

(insn 1005 1004 1006 (parallel [
            (set (reg:DI 989)
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 603 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:563 -1
     (nil))

(insn 1006 1005 0 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 989)) blake_ref.c:563 -1
     (nil))

;; Update64.part.1 (state_4(D), &padding, _584);

(insn 1007 1006 1008 (set (reg:DI 37 r8)
        (reg:DI 603 [ D.6036 ])) -1
     (nil))

(insn 1008 1007 1009 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) -1
     (nil))

(insn 1009 1008 1010 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))

(call_insn 1010 1009 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
Purged non-fallthru edges from bb 88
Purged non-fallthru edges from bb 90
Purged non-fallthru edges from bb 92
Purged non-fallthru edges from bb 94
Purged non-fallthru edges from bb 96
Purged non-fallthru edges from bb 98


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 14->16 redirected to 17
Forwarding edge 15->16 to 17 failed.
Deleted label in block 16.
Edge 29->31 redirected to 32
Forwarding edge 30->31 to 32 failed.
Deleted label in block 31.
Edge 35->37 redirected to 38
Forwarding edge 36->37 to 38 failed.
Deleted label in block 37.
Edge 44->46 redirected to 95
Merging block 46 into block 45...
Merged blocks 45 and 46.
Merged 45 and 46 without moving.
Edge 57->59 redirected to 60
Forwarding edge 58->59 to 60 failed.
Deleted label in block 59.
Edge 76->78 redirected to 79
Forwarding edge 77->78 to 79 failed.
Deleted label in block 78.
Edge 82->84 redirected to 85
Forwarding edge 83->84 to 85 failed.
Deleted label in block 84.
Forwarding edge 90->91 to 70 failed.
Edge 92->94 redirected to 95
Merging block 94 into block 93...
Merged blocks 93 and 94.
Merged 93 and 94 without moving.


try_optimize_cfg iteration 2

Forwarding edge 15->16 to 17 failed.
Forwarding edge 30->31 to 32 failed.
Forwarding edge 36->37 to 38 failed.
Forwarding edge 58->59 to 60 failed.
Forwarding edge 77->78 to 79 failed.
Forwarding edge 83->84 to 85 failed.
Forwarding edge 90->91 to 70 failed.


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 633 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:653 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 81 virtual-incoming-args) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 634 [ hashval ])
        (reg:DI 1 dx [ hashval ])) blake_ref.c:653 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 8 [0x8])) [4 hashval+0 S8 A64])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) blake_ref.c:655 -1
     (nil))
(insn 8 7 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 612 [ D.6033 ])
            (const_int 383 [0x17f]))) blake_ref.c:655 -1
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 405)
            (pc))) blake_ref.c:655 -1
     (int_list:REG_BR_PROB 6100 (nil))
 -> 405)
;;  succ:       4 [39.0%]  (FALLTHRU)
;;              47 [61.0%] 

;; basic block 4, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [39.0%]  (FALLTHRU)
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [0 zz+0 S1 A32])
        (const_int 0 [0])) blake_ref.c:410 -1
     (nil))
(insn 12 11 13 4 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -19 [0xffffffffffffffed])) [0 zo+0 S1 A8])
        (const_int 1 [0x1])) blake_ref.c:410 -1
     (nil))
(insn 13 12 14 4 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -18 [0xffffffffffffffee])) [0 oz+0 S1 A16])
        (const_int -128 [0xffffffffffffff80])) blake_ref.c:410 -1
     (nil))
(insn 14 13 15 4 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -17 [0xffffffffffffffef])) [0 oo+0 S1 A8])
        (const_int -127 [0xffffffffffffff81])) blake_ref.c:410 -1
     (nil))
(insn 15 14 16 4 (set (reg:SI 88 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) blake_ref.c:416 -1
     (nil))
(insn 16 15 17 4 (set (reg:SI 89 [ D.6033 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])) blake_ref.c:416 -1
     (nil))
(insn 17 16 18 4 (set (reg:SI 90 [ D.6032 ])
        (reg:SI 89 [ D.6033 ])) blake_ref.c:416 -1
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg/v:SI 91 [ low ])
                (plus:SI (reg:SI 88 [ D.6032 ])
                    (reg:SI 90 [ D.6032 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:416 -1
     (nil))
(insn 19 18 20 4 (set (reg/v:SI 92 [ high ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 52 [0x34])) [2 state_4(D)->t32+4 S4 A32])) blake_ref.c:417 -1
     (nil))
(insn 20 19 21 4 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 90 [ D.6032 ])
            (reg/v:SI 91 [ low ]))) blake_ref.c:418 -1
     (nil))
(jump_insn 21 20 22 4 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) blake_ref.c:418 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 24)
;;  succ:       5 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 

;; basic block 5, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [50.0%]  (FALLTHRU)
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (parallel [
            (set (reg/v:SI 92 [ high ])
                (plus:SI (reg/v:SI 92 [ high ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:419 -1
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [50.0%] 
;;              5 [100.0%]  (FALLTHRU)
(code_label 24 23 25 6 94 "" [1 uses])
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 6 (parallel [
            (set (reg:SI 635 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 92 [ high ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 -1
     (nil))
(insn 27 26 28 6 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [0 msglen+0 S1 A128])
        (subreg:QI (reg:SI 635 [ D.6032 ]) 0)) blake_ref.c:420 -1
     (nil))
(insn 28 27 29 6 (parallel [
            (set (reg:SI 636 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 92 [ high ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 -1
     (nil))
(insn 29 28 30 6 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -15 [0xfffffffffffffff1])) [0 msglen+1 S1 A8])
        (subreg:QI (reg:SI 636 [ D.6032 ]) 0)) blake_ref.c:420 -1
     (nil))
(insn 30 29 31 6 (parallel [
            (set (reg:SI 637 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 92 [ high ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 -1
     (nil))
(insn 31 30 32 6 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -14 [0xfffffffffffffff2])) [0 msglen+2 S1 A16])
        (subreg:QI (reg:SI 637 [ D.6032 ]) 0)) blake_ref.c:420 -1
     (nil))
(insn 32 31 33 6 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -13 [0xfffffffffffffff3])) [0 msglen+3 S1 A8])
        (subreg:QI (reg/v:SI 92 [ high ]) 0)) blake_ref.c:420 -1
     (nil))
(insn 33 32 34 6 (parallel [
            (set (reg:SI 638 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 91 [ low ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 -1
     (nil))
(insn 34 33 35 6 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [0 msglen+4 S1 A32])
        (subreg:QI (reg:SI 638 [ D.6032 ]) 0)) blake_ref.c:421 -1
     (nil))
(insn 35 34 36 6 (parallel [
            (set (reg:SI 639 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 91 [ low ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 -1
     (nil))
(insn 36 35 37 6 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -11 [0xfffffffffffffff5])) [0 msglen+5 S1 A8])
        (subreg:QI (reg:SI 639 [ D.6032 ]) 0)) blake_ref.c:421 -1
     (nil))
(insn 37 36 38 6 (parallel [
            (set (reg:SI 640 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 91 [ low ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 -1
     (nil))
(insn 38 37 39 6 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 msglen+6 S1 A16])
        (subreg:QI (reg:SI 640 [ D.6032 ]) 0)) blake_ref.c:421 -1
     (nil))
(insn 39 38 40 6 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 msglen+7 S1 A8])
        (subreg:QI (reg/v:SI 91 [ low ]) 0)) blake_ref.c:421 -1
     (nil))
(insn 40 39 41 6 (parallel [
            (set (reg:SI 641 [ D.6035 ])
                (and:SI (reg:SI 90 [ D.6032 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:423 -1
     (nil))
(insn 41 40 42 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 641 [ D.6035 ])
            (const_int 0 [0]))) blake_ref.c:423 -1
     (nil))
(jump_insn 42 41 43 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 145)
            (pc))) blake_ref.c:423 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 145)
;;  succ:       7 [50.0%]  (FALLTHRU)
;;              24 [50.0%] 

;; basic block 7, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 [50.0%]  (FALLTHRU)
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6033 ])
            (const_int 440 [0x1b8]))) blake_ref.c:426 -1
     (nil))
(jump_insn 45 44 46 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) blake_ref.c:426 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 70)
;;  succ:       8 [28.0%]  (FALLTHRU)
;;              11 [72.0%] 

;; basic block 8, loop depth 0, count 0, freq 546, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [28.0%]  (FALLTHRU)
(note 46 45 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 8 (parallel [
            (set (reg:SI 642)
                (plus:SI (reg:SI 88 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:428 -1
     (nil))
(insn 48 47 49 8 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 642)) blake_ref.c:428 -1
     (nil))
(insn 49 48 50 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 224 [0xe0]))) blake_ref.c:429 -1
     (nil))
(jump_insn 50 49 51 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) blake_ref.c:429 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 60)
;;  succ:       9 [28.0%]  (FALLTHRU)
;;              10 [72.0%] 

;; basic block 9, loop depth 0, count 0, freq 153, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [28.0%]  (FALLTHRU)
(note 51 50 52 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 9 (parallel [
            (set (reg:DI 643)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -18 [0xffffffffffffffee])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 53 52 54 9 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 54 53 55 9 (set (reg:DI 1 dx)
        (reg:DI 643)) -1
     (nil))
(insn 55 54 56 9 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 56 55 57 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 57 56 58 9 (set (reg:SI 115 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))
(jump_insn 58 57 59 9 (set (pc)
        (label_ref 134)) -1
     (nil)
 -> 134)
;;  succ:       23 [100.0%] 

(barrier 59 58 60)
;; basic block 10, loop depth 0, count 0, freq 393, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [72.0%] 
(code_label 60 59 61 10 97 "" [1 uses])
(note 61 60 62 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 10 (parallel [
            (set (reg:DI 644)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -17 [0xffffffffffffffef])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 63 62 64 10 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 64 63 65 10 (set (reg:DI 1 dx)
        (reg:DI 644)) -1
     (nil))
(insn 65 64 66 10 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 66 65 67 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 67 66 68 10 (set (reg:SI 115 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))
(jump_insn 68 67 69 10 (set (pc)
        (label_ref 134)) -1
     (nil)
 -> 134)
;;  succ:       23 [100.0%] 

(barrier 69 68 70)
;; basic block 11, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [72.0%] 
(code_label 70 69 71 11 96 "" [1 uses])
(note 71 70 72 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.6033 ])
            (const_int 439 [0x1b7]))) blake_ref.c:435 -1
     (nil))
(jump_insn 73 72 74 11 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) blake_ref.c:435 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 81)
;;  succ:       12 [50.0%]  (FALLTHRU)
;;              14 [50.0%] 

;; basic block 12, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 [50.0%]  (FALLTHRU)
(note 74 73 75 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6033 ])
            (const_int 0 [0]))) blake_ref.c:437 -1
     (nil))
(jump_insn 76 75 77 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 986)
            (pc))) blake_ref.c:437 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 986)
;;  succ:       13 [50.0%]  (FALLTHRU)
;;              96 [50.0%] 

;; basic block 13, loop depth 0, count 0, freq 351, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       12 [50.0%]  (FALLTHRU)
(note 77 76 78 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 13 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:438 -1
     (nil))
(jump_insn 79 78 80 13 (set (pc)
        (label_ref 986)) blake_ref.c:438 -1
     (nil)
 -> 986)
;;  succ:       96 [100.0%] 

(barrier 80 79 81)
;; basic block 14, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 [50.0%] 
(code_label 81 80 82 14 99 "" [1 uses])
(note 82 81 83 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 14 (parallel [
            (set (reg:SI 109 [ D.6032 ])
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:445 -1
     (nil))
(insn 84 83 85 14 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 109 [ D.6032 ])) blake_ref.c:445 -1
     (nil))
(insn 85 84 86 14 (set (reg:SI 646)
        (const_int 512 [0x200])) blake_ref.c:446 -1
     (nil))
(insn 86 85 87 14 (parallel [
            (set (reg:SI 645 [ D.6033 ])
                (minus:SI (reg:SI 646)
                    (reg:SI 89 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:446 -1
     (nil))
(insn 87 86 88 14 (set (reg:DI 111 [ D.6036 ])
        (sign_extend:DI (reg:SI 645 [ D.6033 ]))) blake_ref.c:446 -1
     (nil))
(insn 88 87 89 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 111 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(insn 89 88 90 14 (set (reg:QI 648 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(insn 90 89 91 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 648 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(jump_insn 91 90 1018 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1030)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1030)
;;  succ:       17 [14.0%] 
;;              15 [86.0%]  (FALLTHRU)

;; basic block 15, loop depth 0, count 0, freq 604, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 [86.0%]  (FALLTHRU)
(note 1018 91 92 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 92 1018 93 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6033 ])
            (const_int 512 [0x200]))) blake_ref.c:295 -1
     (nil))
(insn 93 92 94 15 (set (reg:QI 650 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(insn 94 93 95 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 650 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(jump_insn 95 94 1019 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 8372 (nil))
 -> 103)
;;  succ:       18 [83.7%] 
;;              16 [16.3%]  (FALLTHRU)

;; basic block 16, loop depth 0, count 0, freq 98, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 [16.3%]  (FALLTHRU)
(note 1019 95 1030 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
;;  succ:       17 [100.0%]  (FALLTHRU)

;; basic block 17, loop depth 0, count 0, freq 343, maybe hot
;; Invalid sum of incoming frequencies 196, should be 343
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL)
;;  pred:       16 [100.0%]  (FALLTHRU)
;;              14 [14.0%] 
(code_label 1030 1019 97 17 146 "" [1 uses])
(note 97 1030 98 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 17 (set (reg:DI 37 r8)
        (reg:DI 111 [ D.6036 ])) -1
     (nil))
(insn 99 98 100 17 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) -1
     (nil))
(insn 100 99 101 17 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 101 100 102 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 102 101 103 17 (set (reg:SI 109 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)

;; basic block 18, loop depth 0, count 0, freq 702, maybe hot
;; Invalid sum of incoming frequencies 849, should be 702
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL)
;;  pred:       17 [100.0%]  (FALLTHRU)
;;              15 [83.7%] 
(code_label 103 102 104 18 101 "" [1 uses])
(note 104 103 105 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 18 (parallel [
            (set (reg:SI 651)
                (plus:SI (reg:SI 109 [ D.6032 ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:447 -1
     (nil))
(insn 106 105 107 18 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 651)) blake_ref.c:447 -1
     (nil))
(insn 107 106 108 18 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) -1
     (nil))
(insn 108 107 109 18 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))
(insn 109 108 110 18 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 110 109 111 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 111 110 997 18 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:449 -1
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)

;; basic block 19, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL)
;;  pred:       18 [100.0%]  (FALLTHRU)
;;              96 [100.0%] 
(code_label 997 111 112 19 144 "" [1 uses])
(note 112 997 113 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 224 [0xe0]))) blake_ref.c:451 -1
     (nil))
(jump_insn 114 113 115 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 123)
            (pc))) blake_ref.c:451 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 123)
;;  succ:       20 [28.0%]  (FALLTHRU)
;;              21 [72.0%] 

;; basic block 20, loop depth 0, count 0, freq 393, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL)
;;  pred:       19 [28.0%]  (FALLTHRU)
(note 115 114 116 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 20 (parallel [
            (set (reg:DI 652)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 117 116 118 20 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 118 117 119 20 (set (reg:DI 1 dx)
        (reg:DI 652)) -1
     (nil))
(insn 119 118 120 20 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 120 119 121 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 121 120 122 20 (set (pc)
        (label_ref 130)) -1
     (nil)
 -> 130)
;;  succ:       22 [100.0%] 

(barrier 122 121 123)
;; basic block 21, loop depth 0, count 0, freq 1011, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL)
;;  pred:       19 [72.0%] 
(code_label 123 122 124 21 103 "" [1 uses])
(note 124 123 125 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 21 (parallel [
            (set (reg:DI 653)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 126 125 127 21 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 127 126 128 21 (set (reg:DI 1 dx)
        (reg:DI 653)) -1
     (nil))
(insn 128 127 129 21 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 129 128 130 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       22 [100.0%]  (FALLTHRU)

;; basic block 22, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL)
;;  pred:       20 [100.0%] 
;;              21 [100.0%]  (FALLTHRU)
(code_label 130 129 131 22 104 "" [1 uses])
(note 131 130 132 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 133 22 (set (reg:SI 654)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) blake_ref.c:455 -1
     (nil))
(insn 133 132 134 22 (parallel [
            (set (reg:SI 115 [ D.6032 ])
                (plus:SI (reg:SI 654)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:455 -1
     (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
;;  succ:       23 [100.0%]  (FALLTHRU)

;; basic block 23, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 [100.0%] 
;;              10 [100.0%] 
;;              22 [100.0%]  (FALLTHRU)
(code_label 134 133 135 23 98 "" [2 uses])
(note 135 134 136 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 23 (parallel [
            (set (reg:SI 655)
                (plus:SI (reg:SI 115 [ D.6032 ])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:457 -1
     (nil))
(insn 137 136 138 23 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 655)) blake_ref.c:457 -1
     (nil))
(insn 138 137 139 23 (parallel [
            (set (reg:DI 656)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 139 138 140 23 (set (reg:DI 37 r8)
        (const_int 64 [0x40])) -1
     (nil))
(insn 140 139 141 23 (set (reg:DI 1 dx)
        (reg:DI 656)) -1
     (nil))
(insn 141 140 142 23 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 142 141 143 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 143 142 144 23 (set (pc)
        (label_ref 308)) -1
     (nil)
 -> 308)
;;  succ:       44 [100.0%] 

(barrier 144 143 145)
;; basic block 24, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 [50.0%] 
(code_label 145 144 146 24 95 "" [1 uses])
(note 146 145 147 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 147 146 148 24 (set (reg:SI 657)
        (reg:SI 89 [ D.6033 ])) blake_ref.c:464 -1
     (nil))
(insn 148 147 149 24 (parallel [
            (set (reg:SI 658)
                (plus:SI (reg:SI 657)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (nil))
(insn 149 148 150 24 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 657)
            (const_int 0 [0]))) blake_ref.c:464 -1
     (nil))
(insn 150 149 151 24 (set (reg:SI 657)
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 658)
            (reg:SI 657))) blake_ref.c:464 -1
     (nil))
(insn 151 150 152 24 (parallel [
            (set (reg:SI 659)
                (ashiftrt:SI (reg:SI 657)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (expr_list:REG_EQUAL (div:SI (reg:SI 89 [ D.6033 ])
            (const_int 8 [0x8]))
        (nil)))
(insn 152 151 153 24 (set (reg:SI 117 [ D.6033 ])
        (reg:SI 659)) blake_ref.c:464 -1
     (nil))
(insn 153 152 154 24 (parallel [
            (set (reg:SI 660)
                (ashiftrt:SI (reg:SI 89 [ D.6033 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (nil))
(insn 154 153 155 24 (parallel [
            (set (reg:SI 661)
                (lshiftrt:SI (reg:SI 660)
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (nil))
(insn 155 154 156 24 (parallel [
            (set (reg:SI 662)
                (plus:SI (reg:SI 89 [ D.6033 ])
                    (reg:SI 661)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (nil))
(insn 156 155 157 24 (parallel [
            (set (reg:SI 663)
                (and:SI (reg:SI 662)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (nil))
(insn 157 156 158 24 (parallel [
            (set (reg:SI 664)
                (minus:SI (reg:SI 663)
                    (reg:SI 661)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 -1
     (nil))
(insn 158 157 159 24 (set (reg:SI 120 [ D.6033 ])
        (reg:SI 664)) blake_ref.c:464 -1
     (nil))
(insn 159 158 160 24 (set (reg:SI 666)
        (const_int 8 [0x8])) blake_ref.c:465 -1
     (nil))
(insn 160 159 161 24 (parallel [
            (set (reg:SI 665 [ D.6033 ])
                (minus:SI (reg:SI 666)
                    (reg:SI 120 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 -1
     (nil))
(insn 161 160 162 24 (set (reg:SI 668)
        (const_int 255 [0xff])) blake_ref.c:465 -1
     (nil))
(insn 162 161 163 24 (parallel [
            (set (reg:SI 667 [ D.6033 ])
                (ashift:SI (reg:SI 668)
                    (subreg:QI (reg:SI 665 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 -1
     (nil))
(insn 163 162 164 24 (set (reg:DI 669)
        (sign_extend:DI (reg:SI 117 [ D.6033 ]))) blake_ref.c:464 -1
     (nil))
(insn 164 163 165 24 (parallel [
            (set (reg:QI 670 [ D.6037 ])
                (and:QI (subreg:QI (reg:SI 667 [ D.6033 ]) 0)
                    (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                                (reg:DI 669))
                            (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 -1
     (nil))
(insn 165 164 166 24 (set (reg:SI 672)
        (const_int 128 [0x80])) blake_ref.c:465 -1
     (nil))
(insn 166 165 167 24 (parallel [
            (set (reg:SI 671 [ D.6033 ])
                (ashiftrt:SI (reg:SI 672)
                    (subreg:QI (reg:SI 120 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 -1
     (nil))
(insn 167 166 168 24 (parallel [
            (set (reg:QI 128 [ D.6034 ])
                (xor:QI (reg:QI 670 [ D.6037 ])
                    (subreg:QI (reg:SI 671 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 -1
     (nil))
(insn 168 167 169 24 (set (reg:DI 673)
        (sign_extend:DI (reg:SI 117 [ D.6033 ]))) blake_ref.c:465 -1
     (nil))
(insn 169 168 170 24 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 673))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (reg:QI 128 [ D.6034 ])) blake_ref.c:465 -1
     (nil))
(insn 170 169 171 24 (parallel [
            (set (reg:SI 674 [ D.6035 ])
                (plus:SI (reg:SI 90 [ D.6032 ])
                    (const_int -441 [0xfffffffffffffe47])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:467 -1
     (nil))
(insn 171 170 172 24 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 674 [ D.6035 ])
            (const_int 5 [0x5]))) blake_ref.c:467 -1
     (nil))
(jump_insn 172 171 173 24 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 187)
            (pc))) blake_ref.c:467 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 187)
;;  succ:       25 [50.0%]  (FALLTHRU)
;;              28 [50.0%] 

;; basic block 25, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL)
;;  pred:       24 [50.0%]  (FALLTHRU)
(note 173 172 174 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 224 [0xe0]))) blake_ref.c:469 -1
     (nil))
(jump_insn 175 174 176 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 180)
            (pc))) blake_ref.c:469 -1
     (int_list:REG_BR_PROB 2800 (nil))
 -> 180)
;;  succ:       27 [28.0%] 
;;              26 [72.0%]  (FALLTHRU)

;; basic block 26, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL)
;;  pred:       25 [72.0%]  (FALLTHRU)
(note 176 175 177 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 26 (set (reg:DI 675)
        (sign_extend:DI (reg:SI 117 [ D.6033 ]))) blake_ref.c:472 -1
     (nil))
(insn 178 177 179 26 (parallel [
            (set (reg:QI 676)
                (xor:QI (reg:QI 128 [ D.6034 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:472 -1
     (nil))
(insn 179 178 180 26 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 675))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (reg:QI 676)) blake_ref.c:472 -1
     (nil))
;;  succ:       27 [100.0%]  (FALLTHRU)

;; basic block 27, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL)
;;  pred:       25 [28.0%] 
;;              26 [100.0%]  (FALLTHRU)
(code_label 180 179 181 27 107 "" [1 uses])
(note 181 180 182 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 182 181 183 27 (parallel [
            (set (reg:SI 677 [ D.6032 ])
                (plus:SI (reg:SI 88 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:473 -1
     (nil))
(insn 183 182 184 27 (parallel [
            (set (reg:SI 87 [ D.6031 ])
                (plus:SI (reg:SI 677 [ D.6032 ])
                    (reg:SI 120 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:473 -1
     (nil))
(insn 184 183 185 27 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 448 [0x1c0])) blake_ref.c:475 -1
     (nil))
(jump_insn 185 184 186 27 (set (pc)
        (label_ref 299)) blake_ref.c:475 -1
     (nil)
 -> 299)
;;  succ:       43 [100.0%] 

(barrier 186 185 187)
;; basic block 28, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL)
;;  pred:       24 [50.0%] 
(code_label 187 186 188 28 106 "" [1 uses])
(note 188 187 189 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 189 188 190 28 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.6033 ])
            (const_int 439 [0x1b7]))) blake_ref.c:478 -1
     (nil))
(jump_insn 190 189 191 28 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 218)
            (pc))) blake_ref.c:478 -1
     (int_list:REG_BR_PROB 7100 (nil))
 -> 218)
;;  succ:       29 [29.0%]  (FALLTHRU)
;;              33 [71.0%] 

;; basic block 29, loop depth 0, count 0, freq 283, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 [29.0%]  (FALLTHRU)
(note 191 190 192 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 29 (parallel [
            (set (reg:SI 609 [ D.6031 ])
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:480 -1
     (nil))
(insn 193 192 194 29 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 609 [ D.6031 ])) blake_ref.c:480 -1
     (nil))
(insn 194 193 195 29 (parallel [
            (set (reg:SI 678 [ D.6035 ])
                (and:SI (reg:SI 90 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:481 -1
     (nil))
(insn 195 194 196 29 (parallel [
            (set (reg:SI 137 [ D.6033 ])
                (plus:SI (reg:SI 678 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:481 -1
     (nil))
(insn 196 195 197 29 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 137 [ D.6033 ])) blake_ref.c:481 -1
     (nil))
(insn 197 196 198 29 (set (reg:SI 680)
        (const_int 440 [0x1b8])) blake_ref.c:482 -1
     (nil))
(insn 198 197 199 29 (parallel [
            (set (reg:SI 679 [ D.6033 ])
                (minus:SI (reg:SI 680)
                    (reg:SI 137 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:482 -1
     (nil))
(insn 199 198 200 29 (set (reg:DI 139 [ D.6036 ])
        (sign_extend:DI (reg:SI 679 [ D.6033 ]))) blake_ref.c:482 -1
     (nil))
(insn 200 199 201 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 139 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(insn 201 200 202 29 (set (reg:QI 682 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(insn 202 201 203 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 682 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(jump_insn 203 202 1020 29 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1031)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1031)
;;  succ:       32 [14.0%] 
;;              30 [86.0%]  (FALLTHRU)

;; basic block 30, loop depth 0, count 0, freq 243, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 [86.0%]  (FALLTHRU)
(note 1020 203 204 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 204 1020 205 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 137 [ D.6033 ])
            (const_int 512 [0x200]))) blake_ref.c:295 -1
     (nil))
(insn 205 204 206 30 (set (reg:QI 684 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(insn 206 205 207 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 684 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(jump_insn 207 206 1021 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 276)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 8372 (nil))
 -> 276)
;;  succ:       40 [83.7%] 
;;              31 [16.3%]  (FALLTHRU)

;; basic block 31, loop depth 0, count 0, freq 40, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 [16.3%]  (FALLTHRU)
(note 1021 207 1031 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
;;  succ:       32 [100.0%]  (FALLTHRU)

;; basic block 32, loop depth 0, count 0, freq 61, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL)
;;  pred:       31 [100.0%]  (FALLTHRU)
;;              29 [14.0%] 
(code_label 1031 1021 209 32 147 "" [1 uses])
(note 209 1031 210 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 32 (set (reg:DI 37 r8)
        (reg:DI 139 [ D.6036 ])) -1
     (nil))
(insn 211 210 212 32 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))
(insn 212 211 213 32 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 213 212 214 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 214 213 215 32 (set (reg:SI 609 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))
(insn 215 214 216 32 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))
(jump_insn 216 215 217 32 (set (pc)
        (label_ref 276)) -1
     (nil)
 -> 276)
;;  succ:       40 [100.0%] 

(barrier 217 216 218)
;; basic block 33, loop depth 0, count 0, freq 692, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL)
;;  pred:       28 [71.0%] 
(code_label 218 217 219 33 109 "" [1 uses])
(note 219 218 220 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 220 219 221 33 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.6033 ])
            (const_int 504 [0x1f8]))) blake_ref.c:485 -1
     (nil))
(jump_insn 221 220 222 33 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 240)
            (pc))) blake_ref.c:485 -1
     (int_list:REG_BR_PROB 7100 (nil))
 -> 240)
;;  succ:       34 [29.0%]  (FALLTHRU)
;;              35 [71.0%] 

;; basic block 34, loop depth 0, count 0, freq 201, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL)
;;  pred:       33 [29.0%]  (FALLTHRU)
(note 222 221 223 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 223 222 224 34 (parallel [
            (set (reg:SI 685)
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:487 -1
     (nil))
(insn 224 223 225 34 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 685)) blake_ref.c:487 -1
     (nil))
(insn 225 224 226 34 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 512 [0x200])) blake_ref.c:488 -1
     (nil))
(insn 226 225 227 34 (set (reg:DI 37 r8)
        (const_int 0 [0])) -1
     (nil))
(insn 227 226 228 34 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))
(insn 228 227 229 34 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 229 228 230 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 230 229 231 34 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                        (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:490 -1
     (nil))
(insn 231 230 232 34 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) -1
     (nil))
(insn 232 231 233 34 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))
(insn 233 232 234 34 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 234 233 235 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 235 234 236 34 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:492 -1
     (nil))
(insn 236 235 237 34 (set (reg:SI 609 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))
(insn 237 236 238 34 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))
(jump_insn 238 237 239 34 (set (pc)
        (label_ref 276)) -1
     (nil)
 -> 276)
;;  succ:       40 [100.0%] 

(barrier 239 238 240)
;; basic block 35, loop depth 0, count 0, freq 491, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 [71.0%] 
(code_label 240 239 241 35 112 "" [1 uses])
(note 241 240 242 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 35 (parallel [
            (set (reg:SI 143 [ D.6032 ])
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:496 -1
     (nil))
(insn 243 242 244 35 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 143 [ D.6032 ])) blake_ref.c:496 -1
     (nil))
(insn 244 243 245 35 (parallel [
            (set (reg:SI 686 [ D.6035 ])
                (and:SI (reg:SI 90 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:498 -1
     (nil))
(insn 245 244 246 35 (parallel [
            (set (reg:SI 146 [ D.6033 ])
                (plus:SI (reg:SI 686 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:498 -1
     (nil))
(insn 246 245 247 35 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 146 [ D.6033 ])) blake_ref.c:498 -1
     (nil))
(insn 247 246 248 35 (set (reg:SI 688)
        (const_int 512 [0x200])) blake_ref.c:499 -1
     (nil))
(insn 248 247 249 35 (parallel [
            (set (reg:SI 687 [ D.6033 ])
                (minus:SI (reg:SI 688)
                    (reg:SI 146 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:499 -1
     (nil))
(insn 249 248 250 35 (set (reg:DI 148 [ D.6036 ])
        (sign_extend:DI (reg:SI 687 [ D.6033 ]))) blake_ref.c:499 -1
     (nil))
(insn 250 249 251 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 146 [ D.6033 ])
            (const_int 512 [0x200]))) blake_ref.c:295 -1
     (nil))
(insn 251 250 252 35 (set (reg:QI 690 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(insn 252 251 253 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 690 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(jump_insn 253 252 1022 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1032)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1032)
;;  succ:       38 [14.0%] 
;;              36 [86.0%]  (FALLTHRU)

;; basic block 36, loop depth 0, count 0, freq 422, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 [86.0%]  (FALLTHRU)
(note 1022 253 254 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 254 1022 255 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 148 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(insn 255 254 256 36 (set (reg:QI 692 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(insn 256 255 257 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 692 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(jump_insn 257 256 1023 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 8372 (nil))
 -> 265)
;;  succ:       39 [83.7%] 
;;              37 [16.3%]  (FALLTHRU)

;; basic block 37, loop depth 0, count 0, freq 69, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 [16.3%]  (FALLTHRU)
(note 1023 257 1032 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
;;  succ:       38 [100.0%]  (FALLTHRU)

;; basic block 38, loop depth 0, count 0, freq 240, maybe hot
;; Invalid sum of incoming frequencies 138, should be 240
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL)
;;  pred:       37 [100.0%]  (FALLTHRU)
;;              35 [14.0%] 
(code_label 1032 1023 259 38 148 "" [1 uses])
(note 259 1032 260 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 38 (set (reg:DI 37 r8)
        (reg:DI 148 [ D.6036 ])) -1
     (nil))
(insn 261 260 262 38 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))
(insn 262 261 263 38 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 263 262 264 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 264 263 265 38 (set (reg:SI 143 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))
;;  succ:       39 [100.0%]  (FALLTHRU)

;; basic block 39, loop depth 0, count 0, freq 491, maybe hot
;; Invalid sum of incoming frequencies 593, should be 491
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL)
;;  pred:       38 [100.0%]  (FALLTHRU)
;;              36 [83.7%] 
(code_label 265 264 266 39 113 "" [1 uses])
(note 266 265 267 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 39 (parallel [
            (set (reg:SI 693)
                (plus:SI (reg:SI 143 [ D.6032 ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:500 -1
     (nil))
(insn 268 267 269 39 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 693)) blake_ref.c:500 -1
     (nil))
(insn 269 268 270 39 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) -1
     (nil))
(insn 270 269 271 39 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))
(insn 271 270 272 39 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 272 271 273 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 273 272 274 39 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:502 -1
     (nil))
(insn 274 273 275 39 (set (reg:SI 609 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))
(insn 275 274 276 39 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))
;;  succ:       40 [100.0%]  (FALLTHRU)

;; basic block 40, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL)
;;  pred:       32 [100.0%] 
;;              34 [100.0%] 
;;              39 [100.0%]  (FALLTHRU)
;;              30 [83.7%] 
(code_label 276 275 277 40 110 "" [3 uses])
(note 277 276 278 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 278 277 279 40 (parallel [
            (set (reg:SI 694)
                (plus:SI (reg:SI 609 [ D.6031 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:505 -1
     (nil))
(insn 279 278 280 40 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 694)) blake_ref.c:505 -1
     (nil))
(insn 280 279 281 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 224 [0xe0]))) blake_ref.c:506 -1
     (nil))
(jump_insn 281 280 282 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 291)
            (pc))) blake_ref.c:506 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 291)
;;  succ:       41 [28.0%]  (FALLTHRU)
;;              42 [72.0%] 

;; basic block 41, loop depth 0, count 0, freq 273, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL)
;;  pred:       40 [28.0%]  (FALLTHRU)
(note 282 281 283 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 283 282 284 41 (parallel [
            (set (reg:DI 695)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 284 283 285 41 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 285 284 286 41 (set (reg:DI 1 dx)
        (reg:DI 695)) -1
     (nil))
(insn 286 285 287 41 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 287 286 288 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 288 287 289 41 (set (reg:SI 87 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))
(jump_insn 289 288 290 41 (set (pc)
        (label_ref 299)) -1
     (nil)
 -> 299)
;;  succ:       43 [100.0%] 

(barrier 290 289 291)
;; basic block 42, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL)
;;  pred:       40 [72.0%] 
(code_label 291 290 292 42 115 "" [1 uses])
(note 292 291 293 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 293 292 294 42 (parallel [
            (set (reg:DI 696)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 294 293 295 42 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 295 294 296 42 (set (reg:DI 1 dx)
        (reg:DI 696)) -1
     (nil))
(insn 296 295 297 42 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 297 296 298 42 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 298 297 299 42 (set (reg:SI 87 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) -1
     (nil))
;;  succ:       43 [100.0%]  (FALLTHRU)

;; basic block 43, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL)
;;  pred:       27 [100.0%] 
;;              41 [100.0%] 
;;              42 [100.0%]  (FALLTHRU)
(code_label 299 298 300 43 108 "" [2 uses])
(note 300 299 301 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 301 300 302 43 (parallel [
            (set (reg:SI 697)
                (plus:SI (reg:SI 87 [ D.6031 ])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:511 -1
     (nil))
(insn 302 301 303 43 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 697)) blake_ref.c:511 -1
     (nil))
(insn 303 302 304 43 (parallel [
            (set (reg:DI 698)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 304 303 305 43 (set (reg:DI 37 r8)
        (const_int 64 [0x40])) -1
     (nil))
(insn 305 304 306 43 (set (reg:DI 1 dx)
        (reg:DI 698)) -1
     (nil))
(insn 306 305 307 43 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 307 306 308 43 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       44 [100.0%]  (FALLTHRU)

;; basic block 44, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 [100.0%] 
;;              43 [100.0%]  (FALLTHRU)
(code_label 308 307 309 44 105 "" [1 uses])
(note 309 308 310 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 310 309 311 44 (set (reg:SI 700)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 -1
     (nil))
(insn 311 310 312 44 (parallel [
            (set (reg:SI 699 [ D.6032 ])
                (lshiftrt:SI (reg:SI 700)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:515 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 312 311 313 44 (set (mem:QI (reg/v/f:DI 634 [ hashval ]) [0 *hashval_6(D)+0 S1 A8])
        (subreg:QI (reg:SI 699 [ D.6032 ]) 0)) blake_ref.c:515 -1
     (nil))
(insn 313 312 314 44 (set (reg:SI 702)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 -1
     (nil))
(insn 314 313 315 44 (parallel [
            (set (reg:SI 701 [ D.6032 ])
                (lshiftrt:SI (reg:SI 702)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:515 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 315 314 316 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 1 [0x1])) [0 MEM[(BitSequence *)hashval_6(D) + 1B]+0 S1 A8])
        (subreg:QI (reg:SI 701 [ D.6032 ]) 0)) blake_ref.c:515 -1
     (nil))
(insn 316 315 317 44 (set (reg:SI 704)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 -1
     (nil))
(insn 317 316 318 44 (parallel [
            (set (reg:SI 703 [ D.6032 ])
                (lshiftrt:SI (reg:SI 704)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:515 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 318 317 319 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 2 [0x2])) [0 MEM[(BitSequence *)hashval_6(D) + 2B]+0 S1 A8])
        (subreg:QI (reg:SI 703 [ D.6032 ]) 0)) blake_ref.c:515 -1
     (nil))
(insn 319 318 320 44 (set (reg:SI 705)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 -1
     (nil))
(insn 320 319 321 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 3 [0x3])) [0 MEM[(BitSequence *)hashval_6(D) + 3B]+0 S1 A8])
        (subreg:QI (reg:SI 705) 0)) blake_ref.c:515 -1
     (nil))
(insn 321 320 322 44 (set (reg:SI 707)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 -1
     (nil))
(insn 322 321 323 44 (parallel [
            (set (reg:SI 706 [ D.6032 ])
                (lshiftrt:SI (reg:SI 707)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:516 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
            (const_int 24 [0x18]))
        (nil)))
(insn 323 322 324 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 4 [0x4])) [0 MEM[(BitSequence *)hashval_6(D) + 4B]+0 S1 A8])
        (subreg:QI (reg:SI 706 [ D.6032 ]) 0)) blake_ref.c:516 -1
     (nil))
(insn 324 323 325 44 (set (reg:SI 709)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 -1
     (nil))
(insn 325 324 326 44 (parallel [
            (set (reg:SI 708 [ D.6032 ])
                (lshiftrt:SI (reg:SI 709)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:516 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
            (const_int 16 [0x10]))
        (nil)))
(insn 326 325 327 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 5 [0x5])) [0 MEM[(BitSequence *)hashval_6(D) + 5B]+0 S1 A8])
        (subreg:QI (reg:SI 708 [ D.6032 ]) 0)) blake_ref.c:516 -1
     (nil))
(insn 327 326 328 44 (set (reg:SI 711)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 -1
     (nil))
(insn 328 327 329 44 (parallel [
            (set (reg:SI 710 [ D.6032 ])
                (lshiftrt:SI (reg:SI 711)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:516 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 329 328 330 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 6 [0x6])) [0 MEM[(BitSequence *)hashval_6(D) + 6B]+0 S1 A8])
        (subreg:QI (reg:SI 710 [ D.6032 ]) 0)) blake_ref.c:516 -1
     (nil))
(insn 330 329 331 44 (set (reg:SI 712)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 -1
     (nil))
(insn 331 330 332 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 7 [0x7])) [0 MEM[(BitSequence *)hashval_6(D) + 7B]+0 S1 A8])
        (subreg:QI (reg:SI 712) 0)) blake_ref.c:516 -1
     (nil))
(insn 332 331 333 44 (set (reg:SI 714)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 -1
     (nil))
(insn 333 332 334 44 (parallel [
            (set (reg:SI 713 [ D.6032 ])
                (lshiftrt:SI (reg:SI 714)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:517 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 334 333 335 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 8 [0x8])) [0 MEM[(BitSequence *)hashval_6(D) + 8B]+0 S1 A8])
        (subreg:QI (reg:SI 713 [ D.6032 ]) 0)) blake_ref.c:517 -1
     (nil))
(insn 335 334 336 44 (set (reg:SI 716)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 -1
     (nil))
(insn 336 335 337 44 (parallel [
            (set (reg:SI 715 [ D.6032 ])
                (lshiftrt:SI (reg:SI 716)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:517 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 337 336 338 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 9 [0x9])) [0 MEM[(BitSequence *)hashval_6(D) + 9B]+0 S1 A8])
        (subreg:QI (reg:SI 715 [ D.6032 ]) 0)) blake_ref.c:517 -1
     (nil))
(insn 338 337 339 44 (set (reg:SI 718)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 -1
     (nil))
(insn 339 338 340 44 (parallel [
            (set (reg:SI 717 [ D.6032 ])
                (lshiftrt:SI (reg:SI 718)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:517 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 340 339 341 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 10 [0xa])) [0 MEM[(BitSequence *)hashval_6(D) + 10B]+0 S1 A8])
        (subreg:QI (reg:SI 717 [ D.6032 ]) 0)) blake_ref.c:517 -1
     (nil))
(insn 341 340 342 44 (set (reg:SI 719)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 -1
     (nil))
(insn 342 341 343 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 11 [0xb])) [0 MEM[(BitSequence *)hashval_6(D) + 11B]+0 S1 A8])
        (subreg:QI (reg:SI 719) 0)) blake_ref.c:517 -1
     (nil))
(insn 343 342 344 44 (set (reg:SI 721)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 -1
     (nil))
(insn 344 343 345 44 (parallel [
            (set (reg:SI 720 [ D.6032 ])
                (lshiftrt:SI (reg:SI 721)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:518 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
            (const_int 24 [0x18]))
        (nil)))
(insn 345 344 346 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 12 [0xc])) [0 MEM[(BitSequence *)hashval_6(D) + 12B]+0 S1 A8])
        (subreg:QI (reg:SI 720 [ D.6032 ]) 0)) blake_ref.c:518 -1
     (nil))
(insn 346 345 347 44 (set (reg:SI 723)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 -1
     (nil))
(insn 347 346 348 44 (parallel [
            (set (reg:SI 722 [ D.6032 ])
                (lshiftrt:SI (reg:SI 723)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:518 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
            (const_int 16 [0x10]))
        (nil)))
(insn 348 347 349 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 13 [0xd])) [0 MEM[(BitSequence *)hashval_6(D) + 13B]+0 S1 A8])
        (subreg:QI (reg:SI 722 [ D.6032 ]) 0)) blake_ref.c:518 -1
     (nil))
(insn 349 348 350 44 (set (reg:SI 725)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 -1
     (nil))
(insn 350 349 351 44 (parallel [
            (set (reg:SI 724 [ D.6032 ])
                (lshiftrt:SI (reg:SI 725)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:518 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 351 350 352 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 14 [0xe])) [0 MEM[(BitSequence *)hashval_6(D) + 14B]+0 S1 A8])
        (subreg:QI (reg:SI 724 [ D.6032 ]) 0)) blake_ref.c:518 -1
     (nil))
(insn 352 351 353 44 (set (reg:SI 726)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 -1
     (nil))
(insn 353 352 354 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 15 [0xf])) [0 MEM[(BitSequence *)hashval_6(D) + 15B]+0 S1 A8])
        (subreg:QI (reg:SI 726) 0)) blake_ref.c:518 -1
     (nil))
(insn 354 353 355 44 (set (reg:SI 728)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 -1
     (nil))
(insn 355 354 356 44 (parallel [
            (set (reg:SI 727 [ D.6032 ])
                (lshiftrt:SI (reg:SI 728)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:519 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 356 355 357 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 16 [0x10])) [0 MEM[(BitSequence *)hashval_6(D) + 16B]+0 S1 A8])
        (subreg:QI (reg:SI 727 [ D.6032 ]) 0)) blake_ref.c:519 -1
     (nil))
(insn 357 356 358 44 (set (reg:SI 730)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 -1
     (nil))
(insn 358 357 359 44 (parallel [
            (set (reg:SI 729 [ D.6032 ])
                (lshiftrt:SI (reg:SI 730)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:519 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 359 358 360 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 17 [0x11])) [0 MEM[(BitSequence *)hashval_6(D) + 17B]+0 S1 A8])
        (subreg:QI (reg:SI 729 [ D.6032 ]) 0)) blake_ref.c:519 -1
     (nil))
(insn 360 359 361 44 (set (reg:SI 732)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 -1
     (nil))
(insn 361 360 362 44 (parallel [
            (set (reg:SI 731 [ D.6032 ])
                (lshiftrt:SI (reg:SI 732)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:519 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 362 361 363 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 18 [0x12])) [0 MEM[(BitSequence *)hashval_6(D) + 18B]+0 S1 A8])
        (subreg:QI (reg:SI 731 [ D.6032 ]) 0)) blake_ref.c:519 -1
     (nil))
(insn 363 362 364 44 (set (reg:SI 733)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 -1
     (nil))
(insn 364 363 365 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 19 [0x13])) [0 MEM[(BitSequence *)hashval_6(D) + 19B]+0 S1 A8])
        (subreg:QI (reg:SI 733) 0)) blake_ref.c:519 -1
     (nil))
(insn 365 364 366 44 (set (reg:SI 735)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 -1
     (nil))
(insn 366 365 367 44 (parallel [
            (set (reg:SI 734 [ D.6032 ])
                (lshiftrt:SI (reg:SI 735)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:520 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
            (const_int 24 [0x18]))
        (nil)))
(insn 367 366 368 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 20 [0x14])) [0 MEM[(BitSequence *)hashval_6(D) + 20B]+0 S1 A8])
        (subreg:QI (reg:SI 734 [ D.6032 ]) 0)) blake_ref.c:520 -1
     (nil))
(insn 368 367 369 44 (set (reg:SI 737)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 -1
     (nil))
(insn 369 368 370 44 (parallel [
            (set (reg:SI 736 [ D.6032 ])
                (lshiftrt:SI (reg:SI 737)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:520 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
            (const_int 16 [0x10]))
        (nil)))
(insn 370 369 371 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 21 [0x15])) [0 MEM[(BitSequence *)hashval_6(D) + 21B]+0 S1 A8])
        (subreg:QI (reg:SI 736 [ D.6032 ]) 0)) blake_ref.c:520 -1
     (nil))
(insn 371 370 372 44 (set (reg:SI 739)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 -1
     (nil))
(insn 372 371 373 44 (parallel [
            (set (reg:SI 738 [ D.6032 ])
                (lshiftrt:SI (reg:SI 739)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:520 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 373 372 374 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 22 [0x16])) [0 MEM[(BitSequence *)hashval_6(D) + 22B]+0 S1 A8])
        (subreg:QI (reg:SI 738 [ D.6032 ]) 0)) blake_ref.c:520 -1
     (nil))
(insn 374 373 375 44 (set (reg:SI 740)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 -1
     (nil))
(insn 375 374 376 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 23 [0x17])) [0 MEM[(BitSequence *)hashval_6(D) + 23B]+0 S1 A8])
        (subreg:QI (reg:SI 740) 0)) blake_ref.c:520 -1
     (nil))
(insn 376 375 377 44 (set (reg:SI 742)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 -1
     (nil))
(insn 377 376 378 44 (parallel [
            (set (reg:SI 741 [ D.6032 ])
                (lshiftrt:SI (reg:SI 742)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:521 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 378 377 379 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 24 [0x18])) [0 MEM[(BitSequence *)hashval_6(D) + 24B]+0 S1 A8])
        (subreg:QI (reg:SI 741 [ D.6032 ]) 0)) blake_ref.c:521 -1
     (nil))
(insn 379 378 380 44 (set (reg:SI 744)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 -1
     (nil))
(insn 380 379 381 44 (parallel [
            (set (reg:SI 743 [ D.6032 ])
                (lshiftrt:SI (reg:SI 744)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:521 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 381 380 382 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 25 [0x19])) [0 MEM[(BitSequence *)hashval_6(D) + 25B]+0 S1 A8])
        (subreg:QI (reg:SI 743 [ D.6032 ]) 0)) blake_ref.c:521 -1
     (nil))
(insn 382 381 383 44 (set (reg:SI 746)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 -1
     (nil))
(insn 383 382 384 44 (parallel [
            (set (reg:SI 745 [ D.6032 ])
                (lshiftrt:SI (reg:SI 746)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:521 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 384 383 385 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 26 [0x1a])) [0 MEM[(BitSequence *)hashval_6(D) + 26B]+0 S1 A8])
        (subreg:QI (reg:SI 745 [ D.6032 ]) 0)) blake_ref.c:521 -1
     (nil))
(insn 385 384 386 44 (set (reg:SI 747)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 -1
     (nil))
(insn 386 385 387 44 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 27 [0x1b])) [0 MEM[(BitSequence *)hashval_6(D) + 27B]+0 S1 A8])
        (subreg:QI (reg:SI 747) 0)) blake_ref.c:521 -1
     (nil))
(insn 387 386 388 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 256 [0x100]))) blake_ref.c:523 -1
     (nil))
(jump_insn 388 387 389 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 981)
            (pc))) blake_ref.c:523 612 {*jcc_1}
     (int_list:REG_BR_PROB 6218 (nil))
 -> 981)
;;  succ:       45 [37.8%]  (FALLTHRU)
;;              95 [62.2%] 

;; basic block 45, loop depth 0, count 0, freq 1475, maybe hot
;;  prev block 44, next block 47, flags: (NEW, REACHABLE, RTL)
;;  pred:       44 [37.8%]  (FALLTHRU)
(note 389 388 390 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 390 389 391 45 (set (reg:SI 749)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 -1
     (nil))
(insn 391 390 392 45 (parallel [
            (set (reg:SI 748 [ D.6032 ])
                (lshiftrt:SI (reg:SI 749)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:524 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])
            (const_int 24 [0x18]))
        (nil)))
(insn 392 391 393 45 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 28 [0x1c])) [0 MEM[(BitSequence *)hashval_6(D) + 28B]+0 S1 A8])
        (subreg:QI (reg:SI 748 [ D.6032 ]) 0)) blake_ref.c:524 -1
     (nil))
(insn 393 392 394 45 (set (reg:SI 751)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 -1
     (nil))
(insn 394 393 395 45 (parallel [
            (set (reg:SI 750 [ D.6032 ])
                (lshiftrt:SI (reg:SI 751)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:524 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])
            (const_int 16 [0x10]))
        (nil)))
(insn 395 394 396 45 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 29 [0x1d])) [0 MEM[(BitSequence *)hashval_6(D) + 29B]+0 S1 A8])
        (subreg:QI (reg:SI 750 [ D.6032 ]) 0)) blake_ref.c:524 -1
     (nil))
(insn 396 395 397 45 (set (reg:SI 753)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 -1
     (nil))
(insn 397 396 398 45 (parallel [
            (set (reg:SI 752 [ D.6032 ])
                (lshiftrt:SI (reg:SI 753)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:524 -1
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 398 397 399 45 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 30 [0x1e])) [0 MEM[(BitSequence *)hashval_6(D) + 30B]+0 S1 A8])
        (subreg:QI (reg:SI 752 [ D.6032 ]) 0)) blake_ref.c:524 -1
     (nil))
(insn 399 398 400 45 (set (reg:SI 754)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 -1
     (nil))
(insn 400 399 403 45 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 31 [0x1f])) [0 MEM[(BitSequence *)hashval_6(D) + 31B]+0 S1 A8])
        (subreg:QI (reg:SI 754) 0)) blake_ref.c:524 -1
     (nil))
(jump_insn 403 400 404 45 (set (pc)
        (label_ref 981)) blake_ref.c:656 -1
     (nil)
 -> 981)
;;  succ:       95 [100.0%] 

(barrier 404 403 405)
;; basic block 47, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 45, next block 48, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [61.0%] 
(code_label 405 404 406 47 93 "" [1 uses])
(note 406 405 407 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 408 47 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [0 zz+0 S1 A32])
        (const_int 0 [0])) blake_ref.c:535 -1
     (nil))
(insn 408 407 409 47 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -19 [0xffffffffffffffed])) [0 zo+0 S1 A8])
        (const_int 1 [0x1])) blake_ref.c:535 -1
     (nil))
(insn 409 408 410 47 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -18 [0xffffffffffffffee])) [0 oz+0 S1 A16])
        (const_int -128 [0xffffffffffffff80])) blake_ref.c:535 -1
     (nil))
(insn 410 409 411 47 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -17 [0xffffffffffffffef])) [0 oo+0 S1 A8])
        (const_int -127 [0xffffffffffffff81])) blake_ref.c:535 -1
     (nil))
(insn 411 410 412 47 (set (reg:DI 241 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) blake_ref.c:539 -1
     (nil))
(insn 412 411 413 47 (set (reg:SI 242 [ D.6033 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])) blake_ref.c:539 -1
     (nil))
(insn 413 412 414 47 (set (reg:DI 243 [ D.6036 ])
        (sign_extend:DI (reg:SI 242 [ D.6033 ]))) blake_ref.c:539 -1
     (nil))
(insn 414 413 415 47 (parallel [
            (set (reg/v:DI 244 [ low ])
                (plus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 243 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:539 -1
     (nil))
(insn 415 414 416 47 (set (reg/v:DI 245 [ high ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 208 [0xd0])) [3 state_4(D)->t64+8 S8 A64])) blake_ref.c:540 -1
     (nil))
(insn 416 415 417 47 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 243 [ D.6036 ])
            (reg/v:DI 244 [ low ]))) blake_ref.c:541 -1
     (nil))
(jump_insn 417 416 418 47 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 420)
            (pc))) blake_ref.c:541 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 420)
;;  succ:       48 [50.0%]  (FALLTHRU)
;;              49 [50.0%] 

;; basic block 48, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL)
;;  pred:       47 [50.0%]  (FALLTHRU)
(note 418 417 419 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 419 418 420 48 (parallel [
            (set (reg/v:DI 245 [ high ])
                (plus:DI (reg/v:DI 245 [ high ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:542 -1
     (nil))
;;  succ:       49 [100.0%]  (FALLTHRU)

;; basic block 49, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL)
;;  pred:       47 [50.0%] 
;;              48 [100.0%]  (FALLTHRU)
(code_label 420 419 421 49 118 "" [1 uses])
(note 421 420 422 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 422 421 423 49 (parallel [
            (set (reg:DI 246 [ D.6036 ])
                (lshiftrt:DI (reg/v:DI 245 [ high ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))
(insn 423 422 424 49 (set (reg:SI 247 [ D.6032 ])
        (subreg:SI (reg:DI 246 [ D.6036 ]) 0)) blake_ref.c:543 -1
     (nil))
(insn 424 423 425 49 (parallel [
            (set (reg:SI 755 [ D.6032 ])
                (lshiftrt:SI (reg:SI 247 [ D.6032 ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))
(insn 425 424 426 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [0 msglen+0 S1 A128])
        (subreg:QI (reg:SI 755 [ D.6032 ]) 0)) blake_ref.c:543 -1
     (nil))
(insn 426 425 427 49 (parallel [
            (set (reg:SI 756 [ D.6032 ])
                (lshiftrt:SI (reg:SI 247 [ D.6032 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))
(insn 427 426 428 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -15 [0xfffffffffffffff1])) [0 msglen+1 S1 A8])
        (subreg:QI (reg:SI 756 [ D.6032 ]) 0)) blake_ref.c:543 -1
     (nil))
(insn 428 427 429 49 (parallel [
            (set (reg:SI 757 [ D.6032 ])
                (lshiftrt:SI (reg:SI 247 [ D.6032 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))
(insn 429 428 430 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -14 [0xfffffffffffffff2])) [0 msglen+2 S1 A16])
        (subreg:QI (reg:SI 757 [ D.6032 ]) 0)) blake_ref.c:543 -1
     (nil))
(insn 430 429 431 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -13 [0xfffffffffffffff3])) [0 msglen+3 S1 A8])
        (subreg:QI (reg:DI 246 [ D.6036 ]) 0)) blake_ref.c:543 -1
     (nil))
(insn 431 430 432 49 (set (reg:SI 255 [ D.6032 ])
        (subreg:SI (reg/v:DI 245 [ high ]) 0)) blake_ref.c:543 -1
     (nil))
(insn 432 431 433 49 (parallel [
            (set (reg:SI 758 [ D.6032 ])
                (lshiftrt:SI (reg:SI 255 [ D.6032 ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))
(insn 433 432 434 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [0 msglen+4 S1 A32])
        (subreg:QI (reg:SI 758 [ D.6032 ]) 0)) blake_ref.c:543 -1
     (nil))
(insn 434 433 435 49 (parallel [
            (set (reg:SI 759 [ D.6032 ])
                (lshiftrt:SI (reg:SI 255 [ D.6032 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))
(insn 435 434 436 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -11 [0xfffffffffffffff5])) [0 msglen+5 S1 A8])
        (subreg:QI (reg:SI 759 [ D.6032 ]) 0)) blake_ref.c:543 -1
     (nil))
(insn 436 435 437 49 (parallel [
            (set (reg:SI 760 [ D.6032 ])
                (lshiftrt:SI (reg:SI 255 [ D.6032 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 -1
     (nil))
(insn 437 436 438 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 msglen+6 S1 A16])
        (subreg:QI (reg:SI 760 [ D.6032 ]) 0)) blake_ref.c:543 -1
     (nil))
(insn 438 437 439 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 msglen+7 S1 A8])
        (subreg:QI (reg/v:DI 245 [ high ]) 0)) blake_ref.c:543 -1
     (nil))
(insn 439 438 440 49 (parallel [
            (set (reg:DI 263 [ D.6036 ])
                (lshiftrt:DI (reg/v:DI 244 [ low ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))
(insn 440 439 441 49 (set (reg:SI 264 [ D.6032 ])
        (subreg:SI (reg:DI 263 [ D.6036 ]) 0)) blake_ref.c:544 -1
     (nil))
(insn 441 440 442 49 (parallel [
            (set (reg:SI 761 [ D.6032 ])
                (lshiftrt:SI (reg:SI 264 [ D.6032 ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))
(insn 442 441 443 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 msglen+8 S1 A64])
        (subreg:QI (reg:SI 761 [ D.6032 ]) 0)) blake_ref.c:544 -1
     (nil))
(insn 443 442 444 49 (parallel [
            (set (reg:SI 762 [ D.6032 ])
                (lshiftrt:SI (reg:SI 264 [ D.6032 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))
(insn 444 443 445 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -7 [0xfffffffffffffff9])) [0 msglen+9 S1 A8])
        (subreg:QI (reg:SI 762 [ D.6032 ]) 0)) blake_ref.c:544 -1
     (nil))
(insn 445 444 446 49 (parallel [
            (set (reg:SI 763 [ D.6032 ])
                (lshiftrt:SI (reg:SI 264 [ D.6032 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))
(insn 446 445 447 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -6 [0xfffffffffffffffa])) [0 msglen+10 S1 A16])
        (subreg:QI (reg:SI 763 [ D.6032 ]) 0)) blake_ref.c:544 -1
     (nil))
(insn 447 446 448 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -5 [0xfffffffffffffffb])) [0 msglen+11 S1 A8])
        (subreg:QI (reg:DI 263 [ D.6036 ]) 0)) blake_ref.c:544 -1
     (nil))
(insn 448 447 449 49 (set (reg:SI 272 [ D.6032 ])
        (subreg:SI (reg/v:DI 244 [ low ]) 0)) blake_ref.c:544 -1
     (nil))
(insn 449 448 450 49 (parallel [
            (set (reg:SI 764 [ D.6032 ])
                (lshiftrt:SI (reg:SI 272 [ D.6032 ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))
(insn 450 449 451 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 msglen+12 S1 A32])
        (subreg:QI (reg:SI 764 [ D.6032 ]) 0)) blake_ref.c:544 -1
     (nil))
(insn 451 450 452 49 (parallel [
            (set (reg:SI 765 [ D.6032 ])
                (lshiftrt:SI (reg:SI 272 [ D.6032 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))
(insn 452 451 453 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -3 [0xfffffffffffffffd])) [0 msglen+13 S1 A8])
        (subreg:QI (reg:SI 765 [ D.6032 ]) 0)) blake_ref.c:544 -1
     (nil))
(insn 453 452 454 49 (parallel [
            (set (reg:SI 766 [ D.6032 ])
                (lshiftrt:SI (reg:SI 272 [ D.6032 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 -1
     (nil))
(insn 454 453 455 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -2 [0xfffffffffffffffe])) [0 msglen+14 S1 A16])
        (subreg:QI (reg:SI 766 [ D.6032 ]) 0)) blake_ref.c:544 -1
     (nil))
(insn 455 454 456 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 msglen+15 S1 A8])
        (subreg:QI (reg/v:DI 244 [ low ]) 0)) blake_ref.c:544 -1
     (nil))
(insn 456 455 457 49 (set (reg:SI 280 [ D.6035 ])
        (reg:SI 242 [ D.6033 ])) blake_ref.c:546 -1
     (nil))
(insn 457 456 458 49 (parallel [
            (set (reg:SI 767 [ D.6035 ])
                (and:SI (reg:SI 280 [ D.6035 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:546 -1
     (nil))
(insn 458 457 459 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 767 [ D.6035 ])
            (const_int 0 [0]))) blake_ref.c:546 -1
     (nil))
(jump_insn 459 458 460 49 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 587)
            (pc))) blake_ref.c:546 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 587)
;;  succ:       50 [50.0%]  (FALLTHRU)
;;              71 [50.0%] 

;; basic block 50, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL)
;;  pred:       49 [50.0%]  (FALLTHRU)
(note 460 459 461 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 461 460 462 50 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 242 [ D.6033 ])
            (const_int 888 [0x378]))) blake_ref.c:549 -1
     (nil))
(jump_insn 462 461 463 50 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 487)
            (pc))) blake_ref.c:549 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 487)
;;  succ:       51 [28.0%]  (FALLTHRU)
;;              54 [72.0%] 

;; basic block 51, loop depth 0, count 0, freq 854, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL)
;;  pred:       50 [28.0%]  (FALLTHRU)
(note 463 462 464 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 464 463 465 51 (parallel [
            (set (reg:DI 768)
                (plus:DI (reg:DI 241 [ D.6036 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:551 -1
     (nil))
(insn 465 464 466 51 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 768)) blake_ref.c:551 -1
     (nil))
(insn 466 465 467 51 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:552 -1
     (nil))
(jump_insn 467 466 468 51 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 477)
            (pc))) blake_ref.c:552 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 477)
;;  succ:       52 [28.0%]  (FALLTHRU)
;;              53 [72.0%] 

;; basic block 52, loop depth 0, count 0, freq 239, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL)
;;  pred:       51 [28.0%]  (FALLTHRU)
(note 468 467 469 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 469 468 470 52 (parallel [
            (set (reg:DI 769)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -18 [0xffffffffffffffee])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 470 469 471 52 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 471 470 472 52 (set (reg:DI 1 dx)
        (reg:DI 769)) -1
     (nil))
(insn 472 471 473 52 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 473 472 474 52 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 474 473 475 52 (set (reg:DI 292 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))
(jump_insn 475 474 476 52 (set (pc)
        (label_ref 564)) -1
     (nil)
 -> 564)
;;  succ:       68 [100.0%] 

(barrier 476 475 477)
;; basic block 53, loop depth 0, count 0, freq 615, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL)
;;  pred:       51 [72.0%] 
(code_label 477 476 478 53 121 "" [1 uses])
(note 478 477 479 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 479 478 480 53 (parallel [
            (set (reg:DI 770)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -17 [0xffffffffffffffef])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 480 479 481 53 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 481 480 482 53 (set (reg:DI 1 dx)
        (reg:DI 770)) -1
     (nil))
(insn 482 481 483 53 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 483 482 484 53 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 484 483 485 53 (set (reg:DI 292 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))
(jump_insn 485 484 486 53 (set (pc)
        (label_ref 564)) -1
     (nil)
 -> 564)
;;  succ:       68 [100.0%] 

(barrier 486 485 487)
;; basic block 54, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL)
;;  pred:       50 [72.0%] 
(code_label 487 486 488 54 120 "" [1 uses])
(note 488 487 489 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 489 488 490 54 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 242 [ D.6033 ])
            (const_int 887 [0x377]))) blake_ref.c:558 -1
     (nil))
(jump_insn 490 489 491 54 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) blake_ref.c:558 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 498)
;;  succ:       55 [50.0%]  (FALLTHRU)
;;              57 [50.0%] 

;; basic block 55, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL)
;;  pred:       54 [50.0%]  (FALLTHRU)
(note 491 490 492 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 492 491 493 55 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 242 [ D.6033 ])
            (const_int 0 [0]))) blake_ref.c:560 -1
     (nil))
(jump_insn 493 492 494 55 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1000)
            (pc))) blake_ref.c:560 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 1000)
;;  succ:       56 [50.0%]  (FALLTHRU)
;;              97 [50.0%] 

;; basic block 56, loop depth 0, count 0, freq 549, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL)
;;  pred:       55 [50.0%]  (FALLTHRU)
(note 494 493 495 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 495 494 496 56 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:561 -1
     (nil))
(jump_insn 496 495 497 56 (set (pc)
        (label_ref 1000)) blake_ref.c:561 -1
     (nil)
 -> 1000)
;;  succ:       97 [100.0%] 

(barrier 497 496 498)
;; basic block 57, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54 [50.0%] 
(code_label 498 497 499 57 123 "" [1 uses])
(note 499 498 500 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 500 499 501 57 (set (reg:SI 772)
        (const_int 1024 [0x400])) blake_ref.c:568 -1
     (nil))
(insn 501 500 502 57 (parallel [
            (set (reg:SI 771 [ D.6033 ])
                (minus:SI (reg:SI 772)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:568 -1
     (nil))
(insn 502 501 503 57 (set (reg:DI 287 [ D.6036 ])
        (sign_extend:DI (reg:SI 771 [ D.6033 ]))) blake_ref.c:568 -1
     (nil))
(insn 503 502 504 57 (parallel [
            (set (reg:DI 288 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 287 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:568 -1
     (nil))
(insn 504 503 505 57 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 288 [ D.6036 ])) blake_ref.c:568 -1
     (nil))
(insn 505 504 506 57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 242 [ D.6033 ])
            (const_int 1024 [0x400]))) blake_ref.c:351 -1
     (nil))
(insn 506 505 507 57 (set (reg:QI 774 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(insn 507 506 508 57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 774 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(jump_insn 508 507 1024 57 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1033)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1033)
;;  succ:       60 [14.0%] 
;;              58 [86.0%]  (FALLTHRU)

;; basic block 58, loop depth 0, count 0, freq 944, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57 [86.0%]  (FALLTHRU)
(note 1024 508 509 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 509 1024 510 58 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 287 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(insn 510 509 511 58 (set (reg:QI 776 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(insn 511 510 512 58 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 776 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(jump_insn 512 511 1025 58 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 520)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 8372 (nil))
 -> 520)
;;  succ:       61 [83.7%] 
;;              59 [16.3%]  (FALLTHRU)

;; basic block 59, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       58 [16.3%]  (FALLTHRU)
(note 1025 512 1033 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
;;  succ:       60 [100.0%]  (FALLTHRU)

;; basic block 60, loop depth 0, count 0, freq 537, maybe hot
;; Invalid sum of incoming frequencies 308, should be 537
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL)
;;  pred:       59 [100.0%]  (FALLTHRU)
;;              57 [14.0%] 
(code_label 1033 1025 514 60 149 "" [1 uses])
(note 514 1033 515 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 515 514 516 60 (set (reg:DI 37 r8)
        (reg:DI 287 [ D.6036 ])) -1
     (nil))
(insn 516 515 517 60 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) -1
     (nil))
(insn 517 516 518 60 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 518 517 519 60 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 519 518 520 60 (set (reg:DI 288 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))
;;  succ:       61 [100.0%]  (FALLTHRU)

;; basic block 61, loop depth 0, count 0, freq 1098, maybe hot
;; Invalid sum of incoming frequencies 1327, should be 1098
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL)
;;  pred:       60 [100.0%]  (FALLTHRU)
;;              58 [83.7%] 
(code_label 520 519 521 61 125 "" [1 uses])
(note 521 520 522 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 522 521 523 61 (parallel [
            (set (reg:DI 777)
                (plus:DI (reg:DI 288 [ D.6036 ])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:570 -1
     (nil))
(insn 523 522 524 61 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 777)) blake_ref.c:570 -1
     (nil))
(insn 524 523 525 61 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) -1
     (nil))
(insn 525 524 526 61 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))
(insn 526 525 527 61 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 527 526 528 61 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 528 527 1011 61 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:572 -1
     (nil))
;;  succ:       62 [100.0%]  (FALLTHRU)

;; basic block 62, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL)
;;  pred:       61 [100.0%]  (FALLTHRU)
;;              97 [100.0%] 
(code_label 1011 528 529 62 145 "" [1 uses])
(note 529 1011 530 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 530 529 531 62 (set (reg:SI 290 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) blake_ref.c:574 -1
     (nil))
(insn 531 530 532 62 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 290 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:574 -1
     (nil))
(jump_insn 532 531 533 62 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 541)
            (pc))) blake_ref.c:574 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 541)
;;  succ:       63 [28.0%]  (FALLTHRU)
;;              64 [72.0%] 

;; basic block 63, loop depth 0, count 0, freq 615, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL)
;;  pred:       62 [28.0%]  (FALLTHRU)
(note 533 532 534 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 534 533 535 63 (parallel [
            (set (reg:DI 778)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 535 534 536 63 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 536 535 537 63 (set (reg:DI 1 dx)
        (reg:DI 778)) -1
     (nil))
(insn 537 536 538 63 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 538 537 539 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 539 538 540 63 (set (pc)
        (label_ref 560)) -1
     (nil)
 -> 560)
;;  succ:       67 [100.0%] 

(barrier 540 539 541)
;; basic block 64, loop depth 0, count 0, freq 1581, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL)
;;  pred:       62 [72.0%] 
(code_label 541 540 542 64 127 "" [1 uses])
(note 542 541 543 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 543 542 544 64 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 290 [ D.6033 ])
            (const_int 383 [0x17f]))) blake_ref.c:399 -1
     (nil))
(jump_insn 544 543 545 64 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 553)
            (pc))) blake_ref.c:399 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 553)
;;  succ:       65 [50.0%]  (FALLTHRU)
;;              66 [50.0%] 

;; basic block 65, loop depth 0, count 0, freq 791, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL)
;;  pred:       64 [50.0%]  (FALLTHRU)
(note 545 544 546 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 546 545 547 65 (parallel [
            (set (reg:DI 779)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 547 546 548 65 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 548 547 549 65 (set (reg:DI 1 dx)
        (reg:DI 779)) -1
     (nil))
(insn 549 548 550 65 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 550 549 551 65 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 551 550 552 65 (set (pc)
        (label_ref 560)) -1
     (nil)
 -> 560)
;;  succ:       67 [100.0%] 

(barrier 552 551 553)
;; basic block 66, loop depth 0, count 0, freq 791, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL)
;;  pred:       64 [50.0%] 
(code_label 553 552 554 66 129 "" [1 uses])
(note 554 553 555 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 555 554 556 66 (parallel [
            (set (reg:DI 780)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 556 555 557 66 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 557 556 558 66 (set (reg:DI 1 dx)
        (reg:DI 780)) -1
     (nil))
(insn 558 557 559 66 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 559 558 560 66 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       67 [100.0%]  (FALLTHRU)

;; basic block 67, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL)
;;  pred:       63 [100.0%] 
;;              66 [100.0%]  (FALLTHRU)
;;              65 [100.0%] 
(code_label 560 559 561 67 128 "" [2 uses])
(note 561 560 562 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 562 561 563 67 (set (reg:DI 781)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) blake_ref.c:578 -1
     (nil))
(insn 563 562 564 67 (parallel [
            (set (reg:DI 292 [ D.6036 ])
                (plus:DI (reg:DI 781)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:578 -1
     (expr_list:REG_EQUAL (plus:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
;;  succ:       68 [100.0%]  (FALLTHRU)

;; basic block 68, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL)
;;  pred:       52 [100.0%] 
;;              53 [100.0%] 
;;              67 [100.0%]  (FALLTHRU)
(code_label 564 563 565 68 122 "" [2 uses])
(note 565 564 566 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 566 565 567 68 (parallel [
            (set (reg:DI 782)
                (plus:DI (reg:DI 292 [ D.6036 ])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:580 -1
     (nil))
(insn 567 566 568 68 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 782)) blake_ref.c:580 -1
     (nil))
(insn 568 567 569 68 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:399 -1
     (nil))
(jump_insn 569 568 760 68 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 578)
            (pc))) blake_ref.c:399 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 578)
;;  succ:       69 [50.0%]  (FALLTHRU)
;;              70 [50.0%] 

;; basic block 69, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL)
;;  pred:       68 [50.0%]  (FALLTHRU)
;;              90 [100.0%] 
(code_label 760 569 570 69 142 "" [1 uses])
(note 570 760 571 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 571 570 572 69 (parallel [
            (set (reg:DI 783)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 572 571 573 69 (set (reg:DI 37 r8)
        (const_int 128 [0x80])) -1
     (nil))
(insn 573 572 574 69 (set (reg:DI 1 dx)
        (reg:DI 783)) -1
     (nil))
(insn 574 573 575 69 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 575 574 576 69 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 576 575 577 69 (set (pc)
        (label_ref 766)) -1
     (nil)
 -> 766)
;;  succ:       92 [100.0%] 

(barrier 577 576 578)
;; basic block 70, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL)
;;  pred:       68 [50.0%] 
;;              74 [100.0%] 
;;              91 [100.0%] 
(code_label 578 577 579 70 130 "" [3 uses])
(note 579 578 580 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 580 579 581 70 (parallel [
            (set (reg:DI 784)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 581 580 582 70 (set (reg:DI 37 r8)
        (const_int 128 [0x80])) -1
     (nil))
(insn 582 581 583 70 (set (reg:DI 1 dx)
        (reg:DI 784)) -1
     (nil))
(insn 583 582 584 70 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 584 583 585 70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 585 584 586 70 (set (pc)
        (label_ref 766)) -1
     (nil)
 -> 766)
;;  succ:       92 [100.0%] 

(barrier 586 585 587)
;; basic block 71, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL)
;;  pred:       49 [50.0%] 
(code_label 587 586 588 71 119 "" [1 uses])
(note 588 587 589 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 589 588 590 71 (set (reg:SI 785)
        (reg:SI 242 [ D.6033 ])) blake_ref.c:587 -1
     (nil))
(insn 590 589 591 71 (parallel [
            (set (reg:SI 786)
                (plus:SI (reg:SI 785)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))
(insn 591 590 592 71 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 785)
            (const_int 0 [0]))) blake_ref.c:587 -1
     (nil))
(insn 592 591 593 71 (set (reg:SI 785)
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 786)
            (reg:SI 785))) blake_ref.c:587 -1
     (nil))
(insn 593 592 594 71 (parallel [
            (set (reg:SI 787)
                (ashiftrt:SI (reg:SI 785)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (expr_list:REG_EQUAL (div:SI (reg:SI 242 [ D.6033 ])
            (const_int 8 [0x8]))
        (nil)))
(insn 594 593 595 71 (set (reg:SI 294 [ D.6033 ])
        (reg:SI 787)) blake_ref.c:587 -1
     (nil))
(insn 595 594 596 71 (parallel [
            (set (reg:SI 788)
                (ashiftrt:SI (reg:SI 242 [ D.6033 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))
(insn 596 595 597 71 (parallel [
            (set (reg:SI 789)
                (lshiftrt:SI (reg:SI 788)
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))
(insn 597 596 598 71 (parallel [
            (set (reg:SI 790)
                (plus:SI (reg:SI 242 [ D.6033 ])
                    (reg:SI 789)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))
(insn 598 597 599 71 (parallel [
            (set (reg:SI 791)
                (and:SI (reg:SI 790)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))
(insn 599 598 600 71 (parallel [
            (set (reg:SI 792)
                (minus:SI (reg:SI 791)
                    (reg:SI 789)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))
(insn 600 599 601 71 (set (reg:SI 297 [ D.6033 ])
        (reg:SI 792)) blake_ref.c:587 -1
     (nil))
(insn 601 600 602 71 (set (reg:SI 793)
        (const_int 8 [0x8])) blake_ref.c:587 -1
     (nil))
(insn 602 601 603 71 (parallel [
            (set (reg:SI 298 [ D.6033 ])
                (minus:SI (reg:SI 793)
                    (reg:SI 297 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 -1
     (nil))
(insn 603 602 604 71 (set (reg:DI 794)
        (sign_extend:DI (reg:SI 294 [ D.6033 ]))) blake_ref.c:587 -1
     (nil))
(insn 604 603 605 71 (set (reg:SI 796)
        (const_int 255 [0xff])) blake_ref.c:588 -1
     (nil))
(insn 605 604 606 71 (parallel [
            (set (reg:SI 795 [ D.6033 ])
                (ashift:SI (reg:SI 796)
                    (subreg:QI (reg:SI 298 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 -1
     (nil))
(insn 606 605 607 71 (parallel [
            (set (reg:QI 797 [ D.6037 ])
                (and:QI (subreg:QI (reg:SI 795 [ D.6033 ]) 0)
                    (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                                (reg:DI 794))
                            (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 -1
     (nil))
(insn 607 606 608 71 (set (reg:SI 799)
        (const_int 128 [0x80])) blake_ref.c:588 -1
     (nil))
(insn 608 607 609 71 (parallel [
            (set (reg:SI 798 [ D.6033 ])
                (ashiftrt:SI (reg:SI 799)
                    (subreg:QI (reg:SI 297 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 -1
     (nil))
(insn 609 608 610 71 (parallel [
            (set (reg:QI 305 [ D.6034 ])
                (xor:QI (reg:QI 797 [ D.6037 ])
                    (subreg:QI (reg:SI 798 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 -1
     (nil))
(insn 610 609 611 71 (set (reg:DI 800)
        (sign_extend:DI (reg:SI 294 [ D.6033 ]))) blake_ref.c:588 -1
     (nil))
(insn 611 610 612 71 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 800))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (reg:QI 305 [ D.6034 ])) blake_ref.c:588 -1
     (nil))
(insn 612 611 613 71 (parallel [
            (set (reg:SI 801 [ D.6035 ])
                (plus:SI (reg:SI 280 [ D.6035 ])
                    (const_int -889 [0xfffffffffffffc87])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:590 -1
     (nil))
(insn 613 612 614 71 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 801 [ D.6035 ])
            (const_int 5 [0x5]))) blake_ref.c:590 -1
     (nil))
(jump_insn 614 613 615 71 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 631)
            (pc))) blake_ref.c:590 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 631)
;;  succ:       72 [50.0%]  (FALLTHRU)
;;              75 [50.0%] 

;; basic block 72, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL)
;;  pred:       71 [50.0%]  (FALLTHRU)
(note 615 614 616 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 616 615 617 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:592 -1
     (nil))
(jump_insn 617 616 618 72 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 622)
            (pc))) blake_ref.c:592 -1
     (int_list:REG_BR_PROB 2800 (nil))
 -> 622)
;;  succ:       74 [28.0%] 
;;              73 [72.0%]  (FALLTHRU)

;; basic block 73, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL)
;;  pred:       72 [72.0%]  (FALLTHRU)
(note 618 617 619 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 619 618 620 73 (set (reg:DI 802)
        (sign_extend:DI (reg:SI 294 [ D.6033 ]))) blake_ref.c:595 -1
     (nil))
(insn 620 619 621 73 (parallel [
            (set (reg:QI 803)
                (xor:QI (reg:QI 305 [ D.6034 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:595 -1
     (nil))
(insn 621 620 622 73 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 802))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (reg:QI 803)) blake_ref.c:595 -1
     (nil))
;;  succ:       74 [100.0%]  (FALLTHRU)

;; basic block 74, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL)
;;  pred:       72 [28.0%] 
;;              73 [100.0%]  (FALLTHRU)
(code_label 622 621 623 74 133 "" [1 uses])
(note 623 622 624 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 624 623 625 74 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 896 [0x380])) blake_ref.c:598 -1
     (nil))
(insn 625 624 626 74 (set (reg:DI 804 [ D.6036 ])
        (sign_extend:DI (reg:SI 298 [ D.6033 ]))) blake_ref.c:634 -1
     (nil))
(insn 626 625 627 74 (parallel [
            (set (reg:DI 805 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 804 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 -1
     (nil))
(insn 627 626 628 74 (parallel [
            (set (reg:DI 806)
                (plus:DI (reg:DI 805 [ D.6036 ])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 -1
     (nil))
(insn 628 627 629 74 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 806)) blake_ref.c:634 -1
     (nil))
(jump_insn 629 628 630 74 (set (pc)
        (label_ref 578)) blake_ref.c:634 -1
     (nil)
 -> 578)
;;  succ:       70 [100.0%] 

(barrier 630 629 631)
;; basic block 75, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL)
;;  pred:       71 [50.0%] 
(code_label 631 630 632 75 132 "" [1 uses])
(note 632 631 633 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 633 632 634 75 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 242 [ D.6033 ])
            (const_int 887 [0x377]))) blake_ref.c:601 -1
     (nil))
(jump_insn 634 633 635 75 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 665)
            (pc))) blake_ref.c:601 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 665)
;;  succ:       76 [50.0%]  (FALLTHRU)
;;              80 [50.0%] 

;; basic block 76, loop depth 0, count 0, freq 762, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75 [50.0%]  (FALLTHRU)
(note 635 634 636 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 636 635 637 76 (set (reg:SI 808)
        (const_int 888 [0x378])) blake_ref.c:603 -1
     (nil))
(insn 637 636 638 76 (parallel [
            (set (reg:SI 807 [ D.6033 ])
                (minus:SI (reg:SI 808)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:603 -1
     (nil))
(insn 638 637 639 76 (set (reg:DI 809 [ D.6036 ])
        (sign_extend:DI (reg:SI 807 [ D.6033 ]))) blake_ref.c:603 -1
     (nil))
(insn 639 638 640 76 (parallel [
            (set (reg:DI 616 [ D.6039 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 809 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:603 -1
     (nil))
(insn 640 639 641 76 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 616 [ D.6039 ])) blake_ref.c:603 -1
     (nil))
(insn 641 640 642 76 (parallel [
            (set (reg:SI 810 [ D.6035 ])
                (and:SI (reg:SI 280 [ D.6035 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:604 -1
     (nil))
(insn 642 641 643 76 (parallel [
            (set (reg:SI 317 [ D.6033 ])
                (plus:SI (reg:SI 810 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:604 -1
     (nil))
(insn 643 642 644 76 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 317 [ D.6033 ])) blake_ref.c:604 -1
     (nil))
(insn 644 643 645 76 (set (reg:SI 812)
        (const_int 888 [0x378])) blake_ref.c:605 -1
     (nil))
(insn 645 644 646 76 (parallel [
            (set (reg:SI 811 [ D.6033 ])
                (minus:SI (reg:SI 812)
                    (reg:SI 317 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:605 -1
     (nil))
(insn 646 645 647 76 (set (reg:DI 319 [ D.6036 ])
        (sign_extend:DI (reg:SI 811 [ D.6033 ]))) blake_ref.c:605 -1
     (nil))
(insn 647 646 648 76 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 319 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(insn 648 647 649 76 (set (reg:QI 814 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(insn 649 648 650 76 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 814 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(jump_insn 650 649 1026 76 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1034)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1034)
;;  succ:       79 [14.0%] 
;;              77 [86.0%]  (FALLTHRU)

;; basic block 77, loop depth 0, count 0, freq 655, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76 [86.0%]  (FALLTHRU)
(note 1026 650 651 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 651 1026 652 77 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 317 [ D.6033 ])
            (const_int 1024 [0x400]))) blake_ref.c:351 -1
     (nil))
(insn 652 651 653 77 (set (reg:QI 816 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(insn 653 652 654 77 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 816 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(jump_insn 654 653 1027 77 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 731)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 8372 (nil))
 -> 731)
;;  succ:       87 [83.7%] 
;;              78 [16.3%]  (FALLTHRU)

;; basic block 78, loop depth 0, count 0, freq 107, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       77 [16.3%]  (FALLTHRU)
(note 1027 654 1034 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
;;  succ:       79 [100.0%]  (FALLTHRU)

;; basic block 79, loop depth 0, count 0, freq 373, maybe hot
;; Invalid sum of incoming frequencies 214, should be 373
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL)
;;  pred:       78 [100.0%]  (FALLTHRU)
;;              76 [14.0%] 
(code_label 1034 1027 656 79 150 "" [1 uses])
(note 656 1034 657 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 657 656 658 79 (set (reg:DI 37 r8)
        (reg:DI 319 [ D.6036 ])) -1
     (nil))
(insn 658 657 659 79 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))
(insn 659 658 660 79 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 660 659 661 79 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 661 660 662 79 (set (reg:DI 616 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))
(insn 662 661 663 79 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))
(jump_insn 663 662 664 79 (set (pc)
        (label_ref 731)) -1
     (nil)
 -> 731)
;;  succ:       87 [100.0%] 

(barrier 664 663 665)
;; basic block 80, loop depth 0, count 0, freq 762, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL)
;;  pred:       75 [50.0%] 
(code_label 665 664 666 80 134 "" [1 uses])
(note 666 665 667 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 667 666 668 80 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 242 [ D.6033 ])
            (const_int 1016 [0x3f8]))) blake_ref.c:608 -1
     (nil))
(jump_insn 668 667 669 80 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 692)
            (pc))) blake_ref.c:608 -1
     (int_list:REG_BR_PROB 7100 (nil))
 -> 692)
;;  succ:       81 [29.0%]  (FALLTHRU)
;;              82 [71.0%] 

;; basic block 81, loop depth 0, count 0, freq 2457, maybe hot
;; Invalid sum of incoming frequencies 221, should be 2457
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL)
;;  pred:       80 [29.0%]  (FALLTHRU)
(note 669 668 670 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 670 669 671 81 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 1024 [0x400])) blake_ref.c:611 -1
     (nil))
(insn 671 670 672 81 (set (reg:SI 818)
        (const_int 1024 [0x400])) blake_ref.c:362 -1
     (nil))
(insn 672 671 673 81 (parallel [
            (set (reg:SI 817 [ D.6033 ])
                (minus:SI (reg:SI 818)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 -1
     (nil))
(insn 673 672 674 81 (set (reg:DI 819 [ D.6036 ])
        (sign_extend:DI (reg:SI 817 [ D.6033 ]))) blake_ref.c:362 -1
     (nil))
(insn 674 673 675 81 (parallel [
            (set (reg:DI 820 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 819 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 -1
     (nil))
(insn 675 674 676 81 (parallel [
            (set (reg:DI 821)
                (plus:DI (reg:DI 820 [ D.6036 ])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 -1
     (nil))
(insn 676 675 677 81 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 821)) blake_ref.c:362 -1
     (nil))
(insn 677 676 678 81 (parallel [
            (set (reg:DI 822 [ D.6040 ])
                (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 -1
     (nil))
(insn 678 677 679 81 (set (reg:DI 1 dx)
        (reg:DI 822 [ D.6040 ])) blake_ref.c:364 -1
     (nil))
(insn 679 678 680 81 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) blake_ref.c:364 -1
     (nil))
(call_insn 680 679 681 81 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:364 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 681 680 682 81 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:391 -1
     (nil))
(insn 682 681 683 81 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                        (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:613 -1
     (nil))
(insn 683 682 684 81 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) -1
     (nil))
(insn 684 683 685 81 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))
(insn 685 684 686 81 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 686 685 687 81 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 687 686 688 81 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:615 -1
     (nil))
(insn 688 687 689 81 (set (reg:DI 616 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))
(insn 689 688 690 81 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))
(jump_insn 690 689 691 81 (set (pc)
        (label_ref 731)) -1
     (nil)
 -> 731)
;;  succ:       87 [100.0%] 

(barrier 691 690 692)
;; basic block 82, loop depth 0, count 0, freq 541, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80 [71.0%] 
(code_label 692 691 693 82 137 "" [1 uses])
(note 693 692 694 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 694 693 695 82 (set (reg:SI 824)
        (const_int 1024 [0x400])) blake_ref.c:619 -1
     (nil))
(insn 695 694 696 82 (parallel [
            (set (reg:SI 823 [ D.6033 ])
                (minus:SI (reg:SI 824)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:619 -1
     (nil))
(insn 696 695 697 82 (set (reg:DI 825 [ D.6036 ])
        (sign_extend:DI (reg:SI 823 [ D.6033 ]))) blake_ref.c:619 -1
     (nil))
(insn 697 696 698 82 (parallel [
            (set (reg:DI 327 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 825 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:619 -1
     (nil))
(insn 698 697 699 82 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 327 [ D.6036 ])) blake_ref.c:619 -1
     (nil))
(insn 699 698 700 82 (parallel [
            (set (reg:SI 826 [ D.6035 ])
                (and:SI (reg:SI 280 [ D.6035 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:621 -1
     (nil))
(insn 700 699 701 82 (parallel [
            (set (reg:SI 330 [ D.6033 ])
                (plus:SI (reg:SI 826 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:621 -1
     (nil))
(insn 701 700 702 82 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 330 [ D.6033 ])) blake_ref.c:621 -1
     (nil))
(insn 702 701 703 82 (set (reg:SI 828)
        (const_int 1024 [0x400])) blake_ref.c:622 -1
     (nil))
(insn 703 702 704 82 (parallel [
            (set (reg:SI 827 [ D.6033 ])
                (minus:SI (reg:SI 828)
                    (reg:SI 330 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:622 -1
     (nil))
(insn 704 703 705 82 (set (reg:DI 332 [ D.6036 ])
        (sign_extend:DI (reg:SI 827 [ D.6033 ]))) blake_ref.c:622 -1
     (nil))
(insn 705 704 706 82 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 332 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(insn 706 705 707 82 (set (reg:QI 830 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(insn 707 706 708 82 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 830 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(jump_insn 708 707 1028 82 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1035)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1035)
;;  succ:       85 [14.0%] 
;;              83 [86.0%]  (FALLTHRU)

;; basic block 83, loop depth 0, count 0, freq 465, maybe hot
;;  prev block 82, next block 84, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       82 [86.0%]  (FALLTHRU)
(note 1028 708 709 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 709 1028 710 83 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 330 [ D.6033 ])
            (const_int 1024 [0x400]))) blake_ref.c:351 -1
     (nil))
(insn 710 709 711 83 (set (reg:QI 832 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(insn 711 710 712 83 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 832 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(jump_insn 712 711 1029 83 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 720)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 8372 (nil))
 -> 720)
;;  succ:       86 [83.7%] 
;;              84 [16.3%]  (FALLTHRU)

;; basic block 84, loop depth 0, count 0, freq 76, maybe hot
;;  prev block 83, next block 85, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83 [16.3%]  (FALLTHRU)
(note 1029 712 1035 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
;;  succ:       85 [100.0%]  (FALLTHRU)

;; basic block 85, loop depth 0, count 0, freq 265, maybe hot
;; Invalid sum of incoming frequencies 152, should be 265
;;  prev block 84, next block 86, flags: (NEW, REACHABLE, RTL)
;;  pred:       84 [100.0%]  (FALLTHRU)
;;              82 [14.0%] 
(code_label 1035 1029 714 85 151 "" [1 uses])
(note 714 1035 715 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 715 714 716 85 (set (reg:DI 37 r8)
        (reg:DI 332 [ D.6036 ])) -1
     (nil))
(insn 716 715 717 85 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))
(insn 717 716 718 85 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 718 717 719 85 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 719 718 720 85 (set (reg:DI 327 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))
;;  succ:       86 [100.0%]  (FALLTHRU)

;; basic block 86, loop depth 0, count 0, freq 541, maybe hot
;; Invalid sum of incoming frequencies 654, should be 541
;;  prev block 85, next block 87, flags: (NEW, REACHABLE, RTL)
;;  pred:       85 [100.0%]  (FALLTHRU)
;;              83 [83.7%] 
(code_label 720 719 721 86 138 "" [1 uses])
(note 721 720 722 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 722 721 723 86 (parallel [
            (set (reg:DI 833)
                (plus:DI (reg:DI 327 [ D.6036 ])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:623 -1
     (nil))
(insn 723 722 724 86 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 833)) blake_ref.c:623 -1
     (nil))
(insn 724 723 725 86 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) -1
     (nil))
(insn 725 724 726 86 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) -1
     (nil))
(insn 726 725 727 86 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 727 726 728 86 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 728 727 729 86 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:625 -1
     (nil))
(insn 729 728 730 86 (set (reg:DI 616 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))
(insn 730 729 731 86 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))
;;  succ:       87 [100.0%]  (FALLTHRU)

;; basic block 87, loop depth 0, count 0, freq 1525, maybe hot
;; Invalid sum of incoming frequencies 3919, should be 1525
;;  prev block 86, next block 88, flags: (NEW, REACHABLE, RTL)
;;  pred:       86 [100.0%]  (FALLTHRU)
;;              79 [100.0%] 
;;              81 [100.0%] 
;;              77 [83.7%] 
(code_label 731 730 732 87 135 "" [3 uses])
(note 732 731 733 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 733 732 734 87 (parallel [
            (set (reg:DI 834)
                (plus:DI (reg:DI 616 [ D.6039 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:628 -1
     (nil))
(insn 734 733 735 87 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 834)) blake_ref.c:628 -1
     (nil))
(insn 735 734 736 87 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:629 -1
     (nil))
(jump_insn 736 735 737 87 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 747)
            (pc))) blake_ref.c:629 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 747)
;;  succ:       88 [28.0%]  (FALLTHRU)
;;              89 [72.0%] 

;; basic block 88, loop depth 0, count 0, freq 427, maybe hot
;;  prev block 87, next block 89, flags: (NEW, REACHABLE, RTL)
;;  pred:       87 [28.0%]  (FALLTHRU)
(note 737 736 738 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 738 737 739 88 (parallel [
            (set (reg:DI 835)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 739 738 740 88 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 740 739 741 88 (set (reg:DI 1 dx)
        (reg:DI 835)) -1
     (nil))
(insn 741 740 742 88 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 742 741 743 88 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 743 742 744 88 (set (reg:DI 594 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))
(insn 744 743 745 88 (set (reg:SI 283 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))
(jump_insn 745 744 746 88 (set (pc)
        (label_ref 756)) -1
     (nil)
 -> 756)
;;  succ:       90 [100.0%] 

(barrier 746 745 747)
;; basic block 89, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 88, next block 90, flags: (NEW, REACHABLE, RTL)
;;  pred:       87 [72.0%] 
(code_label 747 746 748 89 140 "" [1 uses])
(note 748 747 749 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 749 748 750 89 (parallel [
            (set (reg:DI 836)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 750 749 751 89 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) -1
     (nil))
(insn 751 750 752 89 (set (reg:DI 1 dx)
        (reg:DI 836)) -1
     (nil))
(insn 752 751 753 89 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 753 752 754 89 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 754 753 755 89 (set (reg:DI 594 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) -1
     (nil))
(insn 755 754 756 89 (set (reg:SI 283 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) -1
     (nil))
;;  succ:       90 [100.0%]  (FALLTHRU)

;; basic block 90, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 89, next block 91, flags: (NEW, REACHABLE, RTL)
;;  pred:       89 [100.0%]  (FALLTHRU)
;;              88 [100.0%] 
(code_label 756 755 757 90 141 "" [1 uses])
(note 757 756 758 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 758 757 759 90 (parallel [
            (set (reg:DI 837)
                (plus:DI (reg:DI 594 [ D.6039 ])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 -1
     (nil))
(insn 759 758 761 90 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 837)) blake_ref.c:634 -1
     (nil))
(insn 761 759 762 90 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 283 [ D.6033 ])
            (const_int 383 [0x17f]))) blake_ref.c:399 -1
     (nil))
(jump_insn 762 761 765 90 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 760)
            (pc))) blake_ref.c:399 -1
     (int_list:REG_BR_PROB 10000 (nil))
 -> 760)
;;  succ:       69 [100.0%] 
;;              91 (FALLTHRU)

;; basic block 91, loop depth 0, count 0, freq 0
;;  prev block 90, next block 92, flags: (NEW, REACHABLE, RTL)
;;  pred:       90 (FALLTHRU)
(note 765 762 763 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(jump_insn 763 765 764 91 (set (pc)
        (label_ref 578)) blake_ref.c:399 -1
     (nil)
 -> 578)
;;  succ:       70 [100.0%] 

(barrier 764 763 766)
;; basic block 92, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 91, next block 93, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70 [100.0%] 
;;              69 [100.0%] 
(code_label 766 764 767 92 131 "" [2 uses])
(note 767 766 768 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(insn 768 767 769 92 (set (reg:DI 839)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))
(insn 769 768 770 92 (parallel [
            (set (reg:DI 838 [ D.6036 ])
                (lshiftrt:DI (reg:DI 839)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 770 769 771 92 (parallel [
            (set (reg:SI 840 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 838 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (nil))
(insn 771 770 772 92 (set (mem:QI (reg/v/f:DI 634 [ hashval ]) [0 *hashval_6(D)+0 S1 A8])
        (subreg:QI (reg:SI 840 [ D.6032 ]) 0)) blake_ref.c:638 -1
     (nil))
(insn 772 771 773 92 (set (reg:DI 842)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))
(insn 773 772 774 92 (parallel [
            (set (reg:DI 841 [ D.6036 ])
                (lshiftrt:DI (reg:DI 842)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 774 773 775 92 (parallel [
            (set (reg:SI 843 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 841 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (nil))
(insn 775 774 776 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 1 [0x1])) [0 MEM[(BitSequence *)hashval_6(D) + 1B]+0 S1 A8])
        (subreg:QI (reg:SI 843 [ D.6032 ]) 0)) blake_ref.c:638 -1
     (nil))
(insn 776 775 777 92 (set (reg:DI 845)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))
(insn 777 776 778 92 (parallel [
            (set (reg:DI 844 [ D.6036 ])
                (lshiftrt:DI (reg:DI 845)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 778 777 779 92 (parallel [
            (set (reg:SI 846 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 844 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (nil))
(insn 779 778 780 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 2 [0x2])) [0 MEM[(BitSequence *)hashval_6(D) + 2B]+0 S1 A8])
        (subreg:QI (reg:SI 846 [ D.6032 ]) 0)) blake_ref.c:638 -1
     (nil))
(insn 780 779 781 92 (set (reg:DI 848)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))
(insn 781 780 782 92 (parallel [
            (set (reg:DI 847 [ D.6036 ])
                (lshiftrt:DI (reg:DI 848)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 782 781 783 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 3 [0x3])) [0 MEM[(BitSequence *)hashval_6(D) + 3B]+0 S1 A8])
        (subreg:QI (reg:DI 847 [ D.6036 ]) 0)) blake_ref.c:638 -1
     (nil))
(insn 783 782 784 92 (set (reg:DI 849)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))
(insn 784 783 785 92 (parallel [
            (set (reg:SI 850 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 849) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (nil))
(insn 785 784 786 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 4 [0x4])) [0 MEM[(BitSequence *)hashval_6(D) + 4B]+0 S1 A8])
        (subreg:QI (reg:SI 850 [ D.6032 ]) 0)) blake_ref.c:638 -1
     (nil))
(insn 786 785 787 92 (set (reg:DI 851)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))
(insn 787 786 788 92 (parallel [
            (set (reg:SI 852 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 851) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (nil))
(insn 788 787 789 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 5 [0x5])) [0 MEM[(BitSequence *)hashval_6(D) + 5B]+0 S1 A8])
        (subreg:QI (reg:SI 852 [ D.6032 ]) 0)) blake_ref.c:638 -1
     (nil))
(insn 789 788 790 92 (set (reg:DI 853)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))
(insn 790 789 791 92 (parallel [
            (set (reg:SI 854 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 853) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 -1
     (nil))
(insn 791 790 792 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 6 [0x6])) [0 MEM[(BitSequence *)hashval_6(D) + 6B]+0 S1 A8])
        (subreg:QI (reg:SI 854 [ D.6032 ]) 0)) blake_ref.c:638 -1
     (nil))
(insn 792 791 793 92 (set (reg:DI 855)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 -1
     (nil))
(insn 793 792 794 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 7 [0x7])) [0 MEM[(BitSequence *)hashval_6(D) + 7B]+0 S1 A8])
        (subreg:QI (reg:DI 855) 0)) blake_ref.c:638 -1
     (nil))
(insn 794 793 795 92 (set (reg:DI 857)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))
(insn 795 794 796 92 (parallel [
            (set (reg:DI 856 [ D.6036 ])
                (lshiftrt:DI (reg:DI 857)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 796 795 797 92 (parallel [
            (set (reg:SI 858 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 856 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (nil))
(insn 797 796 798 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 8 [0x8])) [0 MEM[(BitSequence *)hashval_6(D) + 8B]+0 S1 A8])
        (subreg:QI (reg:SI 858 [ D.6032 ]) 0)) blake_ref.c:639 -1
     (nil))
(insn 798 797 799 92 (set (reg:DI 860)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))
(insn 799 798 800 92 (parallel [
            (set (reg:DI 859 [ D.6036 ])
                (lshiftrt:DI (reg:DI 860)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 800 799 801 92 (parallel [
            (set (reg:SI 861 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 859 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (nil))
(insn 801 800 802 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 9 [0x9])) [0 MEM[(BitSequence *)hashval_6(D) + 9B]+0 S1 A8])
        (subreg:QI (reg:SI 861 [ D.6032 ]) 0)) blake_ref.c:639 -1
     (nil))
(insn 802 801 803 92 (set (reg:DI 863)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))
(insn 803 802 804 92 (parallel [
            (set (reg:DI 862 [ D.6036 ])
                (lshiftrt:DI (reg:DI 863)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 804 803 805 92 (parallel [
            (set (reg:SI 864 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 862 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (nil))
(insn 805 804 806 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 10 [0xa])) [0 MEM[(BitSequence *)hashval_6(D) + 10B]+0 S1 A8])
        (subreg:QI (reg:SI 864 [ D.6032 ]) 0)) blake_ref.c:639 -1
     (nil))
(insn 806 805 807 92 (set (reg:DI 866)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))
(insn 807 806 808 92 (parallel [
            (set (reg:DI 865 [ D.6036 ])
                (lshiftrt:DI (reg:DI 866)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 808 807 809 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 11 [0xb])) [0 MEM[(BitSequence *)hashval_6(D) + 11B]+0 S1 A8])
        (subreg:QI (reg:DI 865 [ D.6036 ]) 0)) blake_ref.c:639 -1
     (nil))
(insn 809 808 810 92 (set (reg:DI 867)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))
(insn 810 809 811 92 (parallel [
            (set (reg:SI 868 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 867) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (nil))
(insn 811 810 812 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 12 [0xc])) [0 MEM[(BitSequence *)hashval_6(D) + 12B]+0 S1 A8])
        (subreg:QI (reg:SI 868 [ D.6032 ]) 0)) blake_ref.c:639 -1
     (nil))
(insn 812 811 813 92 (set (reg:DI 869)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))
(insn 813 812 814 92 (parallel [
            (set (reg:SI 870 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 869) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (nil))
(insn 814 813 815 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 13 [0xd])) [0 MEM[(BitSequence *)hashval_6(D) + 13B]+0 S1 A8])
        (subreg:QI (reg:SI 870 [ D.6032 ]) 0)) blake_ref.c:639 -1
     (nil))
(insn 815 814 816 92 (set (reg:DI 871)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))
(insn 816 815 817 92 (parallel [
            (set (reg:SI 872 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 871) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 -1
     (nil))
(insn 817 816 818 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 14 [0xe])) [0 MEM[(BitSequence *)hashval_6(D) + 14B]+0 S1 A8])
        (subreg:QI (reg:SI 872 [ D.6032 ]) 0)) blake_ref.c:639 -1
     (nil))
(insn 818 817 819 92 (set (reg:DI 873)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 -1
     (nil))
(insn 819 818 820 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 15 [0xf])) [0 MEM[(BitSequence *)hashval_6(D) + 15B]+0 S1 A8])
        (subreg:QI (reg:DI 873) 0)) blake_ref.c:639 -1
     (nil))
(insn 820 819 821 92 (set (reg:DI 875)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))
(insn 821 820 822 92 (parallel [
            (set (reg:DI 874 [ D.6036 ])
                (lshiftrt:DI (reg:DI 875)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 822 821 823 92 (parallel [
            (set (reg:SI 876 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 874 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (nil))
(insn 823 822 824 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 16 [0x10])) [0 MEM[(BitSequence *)hashval_6(D) + 16B]+0 S1 A8])
        (subreg:QI (reg:SI 876 [ D.6032 ]) 0)) blake_ref.c:640 -1
     (nil))
(insn 824 823 825 92 (set (reg:DI 878)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))
(insn 825 824 826 92 (parallel [
            (set (reg:DI 877 [ D.6036 ])
                (lshiftrt:DI (reg:DI 878)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 826 825 827 92 (parallel [
            (set (reg:SI 879 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 877 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (nil))
(insn 827 826 828 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 17 [0x11])) [0 MEM[(BitSequence *)hashval_6(D) + 17B]+0 S1 A8])
        (subreg:QI (reg:SI 879 [ D.6032 ]) 0)) blake_ref.c:640 -1
     (nil))
(insn 828 827 829 92 (set (reg:DI 881)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))
(insn 829 828 830 92 (parallel [
            (set (reg:DI 880 [ D.6036 ])
                (lshiftrt:DI (reg:DI 881)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 830 829 831 92 (parallel [
            (set (reg:SI 882 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 880 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (nil))
(insn 831 830 832 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 18 [0x12])) [0 MEM[(BitSequence *)hashval_6(D) + 18B]+0 S1 A8])
        (subreg:QI (reg:SI 882 [ D.6032 ]) 0)) blake_ref.c:640 -1
     (nil))
(insn 832 831 833 92 (set (reg:DI 884)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))
(insn 833 832 834 92 (parallel [
            (set (reg:DI 883 [ D.6036 ])
                (lshiftrt:DI (reg:DI 884)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 834 833 835 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 19 [0x13])) [0 MEM[(BitSequence *)hashval_6(D) + 19B]+0 S1 A8])
        (subreg:QI (reg:DI 883 [ D.6036 ]) 0)) blake_ref.c:640 -1
     (nil))
(insn 835 834 836 92 (set (reg:DI 885)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))
(insn 836 835 837 92 (parallel [
            (set (reg:SI 886 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 885) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (nil))
(insn 837 836 838 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 20 [0x14])) [0 MEM[(BitSequence *)hashval_6(D) + 20B]+0 S1 A8])
        (subreg:QI (reg:SI 886 [ D.6032 ]) 0)) blake_ref.c:640 -1
     (nil))
(insn 838 837 839 92 (set (reg:DI 887)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))
(insn 839 838 840 92 (parallel [
            (set (reg:SI 888 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 887) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (nil))
(insn 840 839 841 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 21 [0x15])) [0 MEM[(BitSequence *)hashval_6(D) + 21B]+0 S1 A8])
        (subreg:QI (reg:SI 888 [ D.6032 ]) 0)) blake_ref.c:640 -1
     (nil))
(insn 841 840 842 92 (set (reg:DI 889)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))
(insn 842 841 843 92 (parallel [
            (set (reg:SI 890 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 889) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 -1
     (nil))
(insn 843 842 844 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 22 [0x16])) [0 MEM[(BitSequence *)hashval_6(D) + 22B]+0 S1 A8])
        (subreg:QI (reg:SI 890 [ D.6032 ]) 0)) blake_ref.c:640 -1
     (nil))
(insn 844 843 845 92 (set (reg:DI 891)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 -1
     (nil))
(insn 845 844 846 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 23 [0x17])) [0 MEM[(BitSequence *)hashval_6(D) + 23B]+0 S1 A8])
        (subreg:QI (reg:DI 891) 0)) blake_ref.c:640 -1
     (nil))
(insn 846 845 847 92 (set (reg:DI 893)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))
(insn 847 846 848 92 (parallel [
            (set (reg:DI 892 [ D.6036 ])
                (lshiftrt:DI (reg:DI 893)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 848 847 849 92 (parallel [
            (set (reg:SI 894 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 892 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (nil))
(insn 849 848 850 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 24 [0x18])) [0 MEM[(BitSequence *)hashval_6(D) + 24B]+0 S1 A8])
        (subreg:QI (reg:SI 894 [ D.6032 ]) 0)) blake_ref.c:641 -1
     (nil))
(insn 850 849 851 92 (set (reg:DI 896)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))
(insn 851 850 852 92 (parallel [
            (set (reg:DI 895 [ D.6036 ])
                (lshiftrt:DI (reg:DI 896)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 852 851 853 92 (parallel [
            (set (reg:SI 897 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 895 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (nil))
(insn 853 852 854 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 25 [0x19])) [0 MEM[(BitSequence *)hashval_6(D) + 25B]+0 S1 A8])
        (subreg:QI (reg:SI 897 [ D.6032 ]) 0)) blake_ref.c:641 -1
     (nil))
(insn 854 853 855 92 (set (reg:DI 899)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))
(insn 855 854 856 92 (parallel [
            (set (reg:DI 898 [ D.6036 ])
                (lshiftrt:DI (reg:DI 899)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 856 855 857 92 (parallel [
            (set (reg:SI 900 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 898 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (nil))
(insn 857 856 858 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 26 [0x1a])) [0 MEM[(BitSequence *)hashval_6(D) + 26B]+0 S1 A8])
        (subreg:QI (reg:SI 900 [ D.6032 ]) 0)) blake_ref.c:641 -1
     (nil))
(insn 858 857 859 92 (set (reg:DI 902)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))
(insn 859 858 860 92 (parallel [
            (set (reg:DI 901 [ D.6036 ])
                (lshiftrt:DI (reg:DI 902)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 860 859 861 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 27 [0x1b])) [0 MEM[(BitSequence *)hashval_6(D) + 27B]+0 S1 A8])
        (subreg:QI (reg:DI 901 [ D.6036 ]) 0)) blake_ref.c:641 -1
     (nil))
(insn 861 860 862 92 (set (reg:DI 903)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))
(insn 862 861 863 92 (parallel [
            (set (reg:SI 904 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 903) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (nil))
(insn 863 862 864 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 28 [0x1c])) [0 MEM[(BitSequence *)hashval_6(D) + 28B]+0 S1 A8])
        (subreg:QI (reg:SI 904 [ D.6032 ]) 0)) blake_ref.c:641 -1
     (nil))
(insn 864 863 865 92 (set (reg:DI 905)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))
(insn 865 864 866 92 (parallel [
            (set (reg:SI 906 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 905) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (nil))
(insn 866 865 867 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 29 [0x1d])) [0 MEM[(BitSequence *)hashval_6(D) + 29B]+0 S1 A8])
        (subreg:QI (reg:SI 906 [ D.6032 ]) 0)) blake_ref.c:641 -1
     (nil))
(insn 867 866 868 92 (set (reg:DI 907)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))
(insn 868 867 869 92 (parallel [
            (set (reg:SI 908 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 907) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 -1
     (nil))
(insn 869 868 870 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 30 [0x1e])) [0 MEM[(BitSequence *)hashval_6(D) + 30B]+0 S1 A8])
        (subreg:QI (reg:SI 908 [ D.6032 ]) 0)) blake_ref.c:641 -1
     (nil))
(insn 870 869 871 92 (set (reg:DI 909)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 -1
     (nil))
(insn 871 870 872 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 31 [0x1f])) [0 MEM[(BitSequence *)hashval_6(D) + 31B]+0 S1 A8])
        (subreg:QI (reg:DI 909) 0)) blake_ref.c:641 -1
     (nil))
(insn 872 871 873 92 (set (reg:DI 911)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))
(insn 873 872 874 92 (parallel [
            (set (reg:DI 910 [ D.6036 ])
                (lshiftrt:DI (reg:DI 911)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 874 873 875 92 (parallel [
            (set (reg:SI 912 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 910 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (nil))
(insn 875 874 876 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 32 [0x20])) [0 MEM[(BitSequence *)hashval_6(D) + 32B]+0 S1 A8])
        (subreg:QI (reg:SI 912 [ D.6032 ]) 0)) blake_ref.c:642 -1
     (nil))
(insn 876 875 877 92 (set (reg:DI 914)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))
(insn 877 876 878 92 (parallel [
            (set (reg:DI 913 [ D.6036 ])
                (lshiftrt:DI (reg:DI 914)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 878 877 879 92 (parallel [
            (set (reg:SI 915 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 913 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (nil))
(insn 879 878 880 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 33 [0x21])) [0 MEM[(BitSequence *)hashval_6(D) + 33B]+0 S1 A8])
        (subreg:QI (reg:SI 915 [ D.6032 ]) 0)) blake_ref.c:642 -1
     (nil))
(insn 880 879 881 92 (set (reg:DI 917)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))
(insn 881 880 882 92 (parallel [
            (set (reg:DI 916 [ D.6036 ])
                (lshiftrt:DI (reg:DI 917)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 882 881 883 92 (parallel [
            (set (reg:SI 918 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 916 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (nil))
(insn 883 882 884 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 34 [0x22])) [0 MEM[(BitSequence *)hashval_6(D) + 34B]+0 S1 A8])
        (subreg:QI (reg:SI 918 [ D.6032 ]) 0)) blake_ref.c:642 -1
     (nil))
(insn 884 883 885 92 (set (reg:DI 920)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))
(insn 885 884 886 92 (parallel [
            (set (reg:DI 919 [ D.6036 ])
                (lshiftrt:DI (reg:DI 920)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 886 885 887 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 35 [0x23])) [0 MEM[(BitSequence *)hashval_6(D) + 35B]+0 S1 A8])
        (subreg:QI (reg:DI 919 [ D.6036 ]) 0)) blake_ref.c:642 -1
     (nil))
(insn 887 886 888 92 (set (reg:DI 921)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))
(insn 888 887 889 92 (parallel [
            (set (reg:SI 922 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 921) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (nil))
(insn 889 888 890 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 36 [0x24])) [0 MEM[(BitSequence *)hashval_6(D) + 36B]+0 S1 A8])
        (subreg:QI (reg:SI 922 [ D.6032 ]) 0)) blake_ref.c:642 -1
     (nil))
(insn 890 889 891 92 (set (reg:DI 923)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))
(insn 891 890 892 92 (parallel [
            (set (reg:SI 924 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 923) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (nil))
(insn 892 891 893 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 37 [0x25])) [0 MEM[(BitSequence *)hashval_6(D) + 37B]+0 S1 A8])
        (subreg:QI (reg:SI 924 [ D.6032 ]) 0)) blake_ref.c:642 -1
     (nil))
(insn 893 892 894 92 (set (reg:DI 925)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))
(insn 894 893 895 92 (parallel [
            (set (reg:SI 926 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 925) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 -1
     (nil))
(insn 895 894 896 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 38 [0x26])) [0 MEM[(BitSequence *)hashval_6(D) + 38B]+0 S1 A8])
        (subreg:QI (reg:SI 926 [ D.6032 ]) 0)) blake_ref.c:642 -1
     (nil))
(insn 896 895 897 92 (set (reg:DI 927)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 -1
     (nil))
(insn 897 896 898 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 39 [0x27])) [0 MEM[(BitSequence *)hashval_6(D) + 39B]+0 S1 A8])
        (subreg:QI (reg:DI 927) 0)) blake_ref.c:642 -1
     (nil))
(insn 898 897 899 92 (set (reg:DI 929)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))
(insn 899 898 900 92 (parallel [
            (set (reg:DI 928 [ D.6036 ])
                (lshiftrt:DI (reg:DI 929)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 900 899 901 92 (parallel [
            (set (reg:SI 930 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 928 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (nil))
(insn 901 900 902 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 40 [0x28])) [0 MEM[(BitSequence *)hashval_6(D) + 40B]+0 S1 A8])
        (subreg:QI (reg:SI 930 [ D.6032 ]) 0)) blake_ref.c:643 -1
     (nil))
(insn 902 901 903 92 (set (reg:DI 932)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))
(insn 903 902 904 92 (parallel [
            (set (reg:DI 931 [ D.6036 ])
                (lshiftrt:DI (reg:DI 932)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 904 903 905 92 (parallel [
            (set (reg:SI 933 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 931 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (nil))
(insn 905 904 906 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 41 [0x29])) [0 MEM[(BitSequence *)hashval_6(D) + 41B]+0 S1 A8])
        (subreg:QI (reg:SI 933 [ D.6032 ]) 0)) blake_ref.c:643 -1
     (nil))
(insn 906 905 907 92 (set (reg:DI 935)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))
(insn 907 906 908 92 (parallel [
            (set (reg:DI 934 [ D.6036 ])
                (lshiftrt:DI (reg:DI 935)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 908 907 909 92 (parallel [
            (set (reg:SI 936 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 934 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (nil))
(insn 909 908 910 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 42 [0x2a])) [0 MEM[(BitSequence *)hashval_6(D) + 42B]+0 S1 A8])
        (subreg:QI (reg:SI 936 [ D.6032 ]) 0)) blake_ref.c:643 -1
     (nil))
(insn 910 909 911 92 (set (reg:DI 938)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))
(insn 911 910 912 92 (parallel [
            (set (reg:DI 937 [ D.6036 ])
                (lshiftrt:DI (reg:DI 938)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 912 911 913 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 43 [0x2b])) [0 MEM[(BitSequence *)hashval_6(D) + 43B]+0 S1 A8])
        (subreg:QI (reg:DI 937 [ D.6036 ]) 0)) blake_ref.c:643 -1
     (nil))
(insn 913 912 914 92 (set (reg:DI 939)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))
(insn 914 913 915 92 (parallel [
            (set (reg:SI 940 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 939) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (nil))
(insn 915 914 916 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 44 [0x2c])) [0 MEM[(BitSequence *)hashval_6(D) + 44B]+0 S1 A8])
        (subreg:QI (reg:SI 940 [ D.6032 ]) 0)) blake_ref.c:643 -1
     (nil))
(insn 916 915 917 92 (set (reg:DI 941)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))
(insn 917 916 918 92 (parallel [
            (set (reg:SI 942 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 941) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (nil))
(insn 918 917 919 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 45 [0x2d])) [0 MEM[(BitSequence *)hashval_6(D) + 45B]+0 S1 A8])
        (subreg:QI (reg:SI 942 [ D.6032 ]) 0)) blake_ref.c:643 -1
     (nil))
(insn 919 918 920 92 (set (reg:DI 943)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))
(insn 920 919 921 92 (parallel [
            (set (reg:SI 944 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 943) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 -1
     (nil))
(insn 921 920 922 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 46 [0x2e])) [0 MEM[(BitSequence *)hashval_6(D) + 46B]+0 S1 A8])
        (subreg:QI (reg:SI 944 [ D.6032 ]) 0)) blake_ref.c:643 -1
     (nil))
(insn 922 921 923 92 (set (reg:DI 945)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 -1
     (nil))
(insn 923 922 924 92 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 47 [0x2f])) [0 MEM[(BitSequence *)hashval_6(D) + 47B]+0 S1 A8])
        (subreg:QI (reg:DI 945) 0)) blake_ref.c:643 -1
     (nil))
(insn 924 923 925 92 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 512 [0x200]))) blake_ref.c:645 -1
     (nil))
(jump_insn 925 924 926 92 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 981)
            (pc))) blake_ref.c:645 612 {*jcc_1}
     (int_list:REG_BR_PROB 6218 (nil))
 -> 981)
;;  succ:       93 [37.8%]  (FALLTHRU)
;;              95 [62.2%] 

;; basic block 93, loop depth 0, count 0, freq 2307, maybe hot
;;  prev block 92, next block 95, flags: (NEW, REACHABLE, RTL)
;;  pred:       92 [37.8%]  (FALLTHRU)
(note 926 925 927 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 927 926 928 93 (set (reg:DI 947)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))
(insn 928 927 929 93 (parallel [
            (set (reg:DI 946 [ D.6036 ])
                (lshiftrt:DI (reg:DI 947)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 929 928 930 93 (parallel [
            (set (reg:SI 948 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 946 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (nil))
(insn 930 929 931 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 48 [0x30])) [0 MEM[(BitSequence *)hashval_6(D) + 48B]+0 S1 A8])
        (subreg:QI (reg:SI 948 [ D.6032 ]) 0)) blake_ref.c:646 -1
     (nil))
(insn 931 930 932 93 (set (reg:DI 950)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))
(insn 932 931 933 93 (parallel [
            (set (reg:DI 949 [ D.6036 ])
                (lshiftrt:DI (reg:DI 950)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 933 932 934 93 (parallel [
            (set (reg:SI 951 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 949 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (nil))
(insn 934 933 935 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 49 [0x31])) [0 MEM[(BitSequence *)hashval_6(D) + 49B]+0 S1 A8])
        (subreg:QI (reg:SI 951 [ D.6032 ]) 0)) blake_ref.c:646 -1
     (nil))
(insn 935 934 936 93 (set (reg:DI 953)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))
(insn 936 935 937 93 (parallel [
            (set (reg:DI 952 [ D.6036 ])
                (lshiftrt:DI (reg:DI 953)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 937 936 938 93 (parallel [
            (set (reg:SI 954 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 952 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (nil))
(insn 938 937 939 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 50 [0x32])) [0 MEM[(BitSequence *)hashval_6(D) + 50B]+0 S1 A8])
        (subreg:QI (reg:SI 954 [ D.6032 ]) 0)) blake_ref.c:646 -1
     (nil))
(insn 939 938 940 93 (set (reg:DI 956)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))
(insn 940 939 941 93 (parallel [
            (set (reg:DI 955 [ D.6036 ])
                (lshiftrt:DI (reg:DI 956)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 941 940 942 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 51 [0x33])) [0 MEM[(BitSequence *)hashval_6(D) + 51B]+0 S1 A8])
        (subreg:QI (reg:DI 955 [ D.6036 ]) 0)) blake_ref.c:646 -1
     (nil))
(insn 942 941 943 93 (set (reg:DI 957)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))
(insn 943 942 944 93 (parallel [
            (set (reg:SI 958 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 957) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (nil))
(insn 944 943 945 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 52 [0x34])) [0 MEM[(BitSequence *)hashval_6(D) + 52B]+0 S1 A8])
        (subreg:QI (reg:SI 958 [ D.6032 ]) 0)) blake_ref.c:646 -1
     (nil))
(insn 945 944 946 93 (set (reg:DI 959)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))
(insn 946 945 947 93 (parallel [
            (set (reg:SI 960 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 959) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (nil))
(insn 947 946 948 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 53 [0x35])) [0 MEM[(BitSequence *)hashval_6(D) + 53B]+0 S1 A8])
        (subreg:QI (reg:SI 960 [ D.6032 ]) 0)) blake_ref.c:646 -1
     (nil))
(insn 948 947 949 93 (set (reg:DI 961)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))
(insn 949 948 950 93 (parallel [
            (set (reg:SI 962 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 961) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 -1
     (nil))
(insn 950 949 951 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 54 [0x36])) [0 MEM[(BitSequence *)hashval_6(D) + 54B]+0 S1 A8])
        (subreg:QI (reg:SI 962 [ D.6032 ]) 0)) blake_ref.c:646 -1
     (nil))
(insn 951 950 952 93 (set (reg:DI 963)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 -1
     (nil))
(insn 952 951 953 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 55 [0x37])) [0 MEM[(BitSequence *)hashval_6(D) + 55B]+0 S1 A8])
        (subreg:QI (reg:DI 963) 0)) blake_ref.c:646 -1
     (nil))
(insn 953 952 954 93 (set (reg:DI 965)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))
(insn 954 953 955 93 (parallel [
            (set (reg:DI 964 [ D.6036 ])
                (lshiftrt:DI (reg:DI 965)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 955 954 956 93 (parallel [
            (set (reg:SI 966 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 964 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (nil))
(insn 956 955 957 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 56 [0x38])) [0 MEM[(BitSequence *)hashval_6(D) + 56B]+0 S1 A8])
        (subreg:QI (reg:SI 966 [ D.6032 ]) 0)) blake_ref.c:647 -1
     (nil))
(insn 957 956 958 93 (set (reg:DI 968)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))
(insn 958 957 959 93 (parallel [
            (set (reg:DI 967 [ D.6036 ])
                (lshiftrt:DI (reg:DI 968)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 959 958 960 93 (parallel [
            (set (reg:SI 969 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 967 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (nil))
(insn 960 959 961 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 57 [0x39])) [0 MEM[(BitSequence *)hashval_6(D) + 57B]+0 S1 A8])
        (subreg:QI (reg:SI 969 [ D.6032 ]) 0)) blake_ref.c:647 -1
     (nil))
(insn 961 960 962 93 (set (reg:DI 971)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))
(insn 962 961 963 93 (parallel [
            (set (reg:DI 970 [ D.6036 ])
                (lshiftrt:DI (reg:DI 971)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 963 962 964 93 (parallel [
            (set (reg:SI 972 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 970 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (nil))
(insn 964 963 965 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 58 [0x3a])) [0 MEM[(BitSequence *)hashval_6(D) + 58B]+0 S1 A8])
        (subreg:QI (reg:SI 972 [ D.6032 ]) 0)) blake_ref.c:647 -1
     (nil))
(insn 965 964 966 93 (set (reg:DI 974)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))
(insn 966 965 967 93 (parallel [
            (set (reg:DI 973 [ D.6036 ])
                (lshiftrt:DI (reg:DI 974)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 967 966 968 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 59 [0x3b])) [0 MEM[(BitSequence *)hashval_6(D) + 59B]+0 S1 A8])
        (subreg:QI (reg:DI 973 [ D.6036 ]) 0)) blake_ref.c:647 -1
     (nil))
(insn 968 967 969 93 (set (reg:DI 975)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))
(insn 969 968 970 93 (parallel [
            (set (reg:SI 976 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 975) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (nil))
(insn 970 969 971 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 60 [0x3c])) [0 MEM[(BitSequence *)hashval_6(D) + 60B]+0 S1 A8])
        (subreg:QI (reg:SI 976 [ D.6032 ]) 0)) blake_ref.c:647 -1
     (nil))
(insn 971 970 972 93 (set (reg:DI 977)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))
(insn 972 971 973 93 (parallel [
            (set (reg:SI 978 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 977) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (nil))
(insn 973 972 974 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 61 [0x3d])) [0 MEM[(BitSequence *)hashval_6(D) + 61B]+0 S1 A8])
        (subreg:QI (reg:SI 978 [ D.6032 ]) 0)) blake_ref.c:647 -1
     (nil))
(insn 974 973 975 93 (set (reg:DI 979)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))
(insn 975 974 976 93 (parallel [
            (set (reg:SI 980 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 979) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 -1
     (nil))
(insn 976 975 977 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 62 [0x3e])) [0 MEM[(BitSequence *)hashval_6(D) + 62B]+0 S1 A8])
        (subreg:QI (reg:SI 980 [ D.6032 ]) 0)) blake_ref.c:647 -1
     (nil))
(insn 977 976 978 93 (set (reg:DI 981)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 -1
     (nil))
(insn 978 977 981 93 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 63 [0x3f])) [0 MEM[(BitSequence *)hashval_6(D) + 63B]+0 S1 A8])
        (subreg:QI (reg:DI 981) 0)) blake_ref.c:647 -1
     (nil))
;;  succ:       95 [100.0%]  (FALLTHRU)

;; basic block 95, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 93, next block 96, flags: (NEW, REACHABLE, RTL)
;;  pred:       45 [100.0%] 
;;              93 [100.0%]  (FALLTHRU)
;;              44 [62.2%] 
;;              92 [62.2%] 
(code_label 981 978 982 95 117 "" [3 uses])
(note 982 981 983 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn 983 982 984 95 (set (reg:SI 632 [ <retval> ])
        (const_int 0 [0])) -1
     (nil))
(jump_insn 984 983 985 95 (set (pc)
        (label_ref 1014)) -1
     (nil)
 -> 1014)
;;  succ:       98 [100.0%] 

(barrier 985 984 986)
;; basic block 96, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 95, next block 97, flags: (NEW, REACHABLE, RTL)
;;  pred:       13 [100.0%] 
;;              12 [50.0%] 
(code_label 986 985 987 96 100 "" [2 uses])
(note 987 986 988 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 988 987 989 96 (parallel [
            (set (reg:SI 983)
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:440 -1
     (nil))
(insn 989 988 990 96 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 983)) blake_ref.c:440 -1
     (nil))
(insn 990 989 991 96 (set (reg:SI 985)
        (const_int 440 [0x1b8])) -1
     (nil))
(insn 991 990 992 96 (parallel [
            (set (reg:SI 984 [ D.6033 ])
                (minus:SI (reg:SI 985)
                    (reg:SI 89 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 992 991 993 96 (set (reg:DI 986 [ D.6036 ])
        (sign_extend:DI (reg:SI 984 [ D.6033 ]))) -1
     (nil))
(insn 993 992 994 96 (set (reg:DI 37 r8)
        (reg:DI 986 [ D.6036 ])) -1
     (nil))
(insn 994 993 995 96 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) -1
     (nil))
(insn 995 994 996 96 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 996 995 998 96 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 998 996 999 96 (set (pc)
        (label_ref 997)) -1
     (nil)
 -> 997)
;;  succ:       19 [100.0%] 

(barrier 999 998 1000)
;; basic block 97, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 96, next block 98, flags: (NEW, REACHABLE, RTL)
;;  pred:       56 [100.0%] 
;;              55 [50.0%] 
(code_label 1000 999 1001 97 124 "" [2 uses])
(note 1001 1000 1002 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 1002 1001 1003 97 (set (reg:SI 988)
        (const_int 888 [0x378])) blake_ref.c:563 -1
     (nil))
(insn 1003 1002 1004 97 (parallel [
            (set (reg:SI 987 [ D.6033 ])
                (minus:SI (reg:SI 988)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:563 -1
     (nil))
(insn 1004 1003 1005 97 (set (reg:DI 603 [ D.6036 ])
        (sign_extend:DI (reg:SI 987 [ D.6033 ]))) blake_ref.c:563 -1
     (nil))
(insn 1005 1004 1006 97 (parallel [
            (set (reg:DI 989)
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 603 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:563 -1
     (nil))
(insn 1006 1005 1007 97 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 989)) blake_ref.c:563 -1
     (nil))
(insn 1007 1006 1008 97 (set (reg:DI 37 r8)
        (reg:DI 603 [ D.6036 ])) -1
     (nil))
(insn 1008 1007 1009 97 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) -1
     (nil))
(insn 1009 1008 1010 97 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) -1
     (nil))
(call_insn 1010 1009 1012 97 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1012 1010 1013 97 (set (pc)
        (label_ref 1011)) -1
     (nil)
 -> 1011)
;;  succ:       62 [100.0%] 

(barrier 1013 1012 1014)
;; basic block 98, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 97, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       95 [100.0%] 
(code_label 1014 1013 1017 98 92 "" [1 uses])
(note 1017 1014 1015 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 1015 1017 1016 98 (set (reg/i:SI 0 ax)
        (reg:SI 632 [ <retval> ])) blake_ref.c:659 -1
     (nil))
(insn 1016 1015 0 98 (use (reg/i:SI 0 ax)) blake_ref.c:659 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function Hash (Hash, funcdef_no=21, decl_uid=3197, cgraph_uid=21, symbol_order=29)

Hash (int hashbitlen, const BitSequence * data, DataLength databitlen, BitSequence * hashval)
{
  struct hashState state;
  HashReturn ret;
  HashReturn _1;
  unsigned int _26;
  unsigned int _27;
  unsigned int _67;
  unsigned int _68;
  unsigned int _69;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _69 = (unsigned int) hashbitlen_4(D);
  _26 = _69 + 4294967072;
  _68 = _26 & 4294967263;
  if (_68 == 0)
    goto <bb 3>;
  else
    goto <bb 7>;
;;    succ:       3
;;                7

;;   basic block 3, loop depth 0
;;    pred:       2
  if (hashbitlen_4(D) == 224)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  MEM[(char * {ref-all})&state + 16B] = MEM[(char * {ref-all})&IV224];
  goto <bb 6>;
;;    succ:       6

;;   basic block 5, loop depth 0
;;    pred:       3
  MEM[(char * {ref-all})&state + 16B] = MEM[(char * {ref-all})&IV256];
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  state.t32[0] = 0;
  state.t32[1] = 0;
  __builtin_memset (&MEM[(void *)&state + 56B], 0, 64);
  MEM[(unsigned int *)&state + 120B] = { 0, 0, 0, 0 };
  goto <bb 12>;
;;    succ:       12

;;   basic block 7, loop depth 0
;;    pred:       2
  _27 = _69 + 4294966912;
  _67 = _27 & 4294967167;
  if (_67 == 0)
    goto <bb 8>;
  else
    goto <bb 18>;
;;    succ:       8
;;                18

;;   basic block 8, loop depth 0
;;    pred:       7
  if (hashbitlen_4(D) == 384)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  MEM[(char * {ref-all})&state + 136B] = MEM[(char * {ref-all})&IV384];
  goto <bb 11>;
;;    succ:       11

;;   basic block 10, loop depth 0
;;    pred:       8
  MEM[(char * {ref-all})&state + 136B] = MEM[(char * {ref-all})&IV512];
;;    succ:       11

;;   basic block 11, loop depth 0
;;    pred:       9
;;                10
  state.t64[0] = 0;
  state.t64[1] = 0;
  __builtin_memset (&MEM[(void *)&state + 216B], 0, 64);
  state.salt64[0] = 0;
  state.salt64[1] = 0;
  state.salt64[2] = 0;
  state.salt64[3] = 0;
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       6
;;                11
  state.hashbitlen = hashbitlen_4(D);
  state.datalen = 0;
  state.init = 1;
  state.nullt = 0;
  if (hashbitlen_4(D) <= 383)
    goto <bb 13>;
  else
    goto <bb 15>;
;;    succ:       13
;;                15

;;   basic block 13, loop depth 0
;;    pred:       12
  if (databitlen_8(D) == 0)
    goto <bb 17>;
  else
    goto <bb 14>;
;;    succ:       17
;;                14

;;   basic block 14, loop depth 0
;;    pred:       13
  Update32.part.0 (&state, data_7(D), databitlen_8(D));
  goto <bb 17>;
;;    succ:       17

;;   basic block 15, loop depth 0
;;    pred:       12
  if (databitlen_8(D) == 0)
    goto <bb 17>;
  else
    goto <bb 16>;
;;    succ:       17
;;                16

;;   basic block 16, loop depth 0
;;    pred:       15
  Update64.part.1 (&state, data_7(D), databitlen_8(D));
;;    succ:       17

;;   basic block 17, loop depth 0
;;    pred:       14
;;                15
;;                16
;;                13
  ret_13 = Final (&state, hashval_11(D));
;;    succ:       18

;;   basic block 18, loop depth 0
;;    pred:       7
;;                17
  # _1 = PHI <2(7), ret_13(17)>
  state ={v} {CLOBBER};
  return _1;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 4 (hashbitlen_4(D) - 4 )
Partition 7 (data_7(D) - 7 )
Partition 8 (databitlen_8(D) - 8 )
Partition 11 (hashval_11(D) - 11 )
Partition 13 (ret_13 - 13 )
Partition 26 (_26 - 26 )
Partition 27 (_27 - 27 )
Partition 67 (_67 - 67 )
Partition 68 (_68 - 68 )
Partition 69 (_69 - 69 )


Partition map 

Partition 0 (hashbitlen_4(D) - 4 )
Partition 1 (data_7(D) - 7 )
Partition 2 (databitlen_8(D) - 8 )
Partition 3 (hashval_11(D) - 11 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (hashbitlen_4(D) - 4 )
Partition 1 (data_7(D) - 7 )
Partition 2 (databitlen_8(D) - 8 )
Partition 3 (hashval_11(D) - 11 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (hashbitlen_4(D) - 4 )
Partition 2 (data_7(D) - 7 )
Partition 3 (databitlen_8(D) - 8 )
Partition 4 (hashval_11(D) - 11 )
Partition 5 (ret_13 - 13 )
Partition 6 (_26 - 26 )
Partition 7 (_27 - 27 )
Partition 8 (_67 - 67 )
Partition 9 (_68 - 68 )
Partition 10 (_69 - 69 )


Replacing Expressions
_26 replace with --> _26 = _69 + 4294967072;

_27 replace with --> _27 = _69 + 4294966912;

_67 replace with --> _67 = _27 & 4294967167;

_68 replace with --> _68 = _26 & 4294967263;


Hash (int hashbitlen, const BitSequence * data, DataLength databitlen, BitSequence * hashval)
{
  struct hashState state;
  HashReturn ret;
  HashReturn _1;
  unsigned int _26;
  unsigned int _27;
  unsigned int _67;
  unsigned int _68;
  unsigned int _69;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _69 = (unsigned int) hashbitlen_4(D);
  _26 = _69 + 4294967072;
  _68 = _26 & 4294967263;
  if (_68 == 0)
    goto <bb 3>;
  else
    goto <bb 7>;
;;    succ:       3
;;                7

;;   basic block 3, loop depth 0
;;    pred:       2
  if (hashbitlen_4(D) == 224)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  MEM[(char * {ref-all})&state + 16B] = MEM[(char * {ref-all})&IV224];
  goto <bb 6>;
;;    succ:       6

;;   basic block 5, loop depth 0
;;    pred:       3
  MEM[(char * {ref-all})&state + 16B] = MEM[(char * {ref-all})&IV256];
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  state.t32[0] = 0;
  state.t32[1] = 0;
  __builtin_memset (&MEM[(void *)&state + 56B], 0, 64);
  MEM[(unsigned int *)&state + 120B] = { 0, 0, 0, 0 };
  goto <bb 12>;
;;    succ:       12

;;   basic block 7, loop depth 0
;;    pred:       2
  _27 = _69 + 4294966912;
  _67 = _27 & 4294967167;
  if (_67 == 0)
    goto <bb 8>;
  else
    goto <bb 18>;
;;    succ:       8
;;                18

;;   basic block 8, loop depth 0
;;    pred:       7
  if (hashbitlen_4(D) == 384)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  MEM[(char * {ref-all})&state + 136B] = MEM[(char * {ref-all})&IV384];
  goto <bb 11>;
;;    succ:       11

;;   basic block 10, loop depth 0
;;    pred:       8
  MEM[(char * {ref-all})&state + 136B] = MEM[(char * {ref-all})&IV512];
;;    succ:       11

;;   basic block 11, loop depth 0
;;    pred:       9
;;                10
  state.t64[0] = 0;
  state.t64[1] = 0;
  __builtin_memset (&MEM[(void *)&state + 216B], 0, 64);
  state.salt64[0] = 0;
  state.salt64[1] = 0;
  state.salt64[2] = 0;
  state.salt64[3] = 0;
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       6
;;                11
  state.hashbitlen = hashbitlen_4(D);
  state.datalen = 0;
  state.init = 1;
  state.nullt = 0;
  if (hashbitlen_4(D) <= 383)
    goto <bb 13>;
  else
    goto <bb 15>;
;;    succ:       13
;;                15

;;   basic block 13, loop depth 0
;;    pred:       12
  if (databitlen_8(D) == 0)
    goto <bb 17>;
  else
    goto <bb 14>;
;;    succ:       17
;;                14

;;   basic block 14, loop depth 0
;;    pred:       13
  Update32.part.0 (&state, data_7(D), databitlen_8(D));
  goto <bb 17>;
;;    succ:       17

;;   basic block 15, loop depth 0
;;    pred:       12
  if (databitlen_8(D) == 0)
    goto <bb 17>;
  else
    goto <bb 16>;
;;    succ:       17
;;                16

;;   basic block 16, loop depth 0
;;    pred:       15
  Update64.part.1 (&state, data_7(D), databitlen_8(D));
;;    succ:       17

;;   basic block 17, loop depth 0
;;    pred:       14
;;                15
;;                16
;;                13
  ret_13 = Final (&state, hashval_11(D));
;;    succ:       18

;;   basic block 18, loop depth 0
;;    pred:       7
;;                17
  # _1 = PHI <2(7), ret_13(17)>
  state ={v} {CLOBBER};
  return _1;
;;    succ:       EXIT

}


Partition 0: size 376 align 16
	state
Inserting a value copy on edge BB7->BB18 : PART.0 = 2
Inserting a partition copy on edge BB17->BB18 :PART.0 = PART.5

;; Generating RTL for gimple basic block 2

;; _69 = (unsigned int) hashbitlen_4(D);

(insn 11 10 0 (set (reg:SI 93 [ D.6062 ])
        (reg/v:SI 95 [ hashbitlen ])) blake_ref.c:207 -1
     (nil))

;; if (_68 == 0)

(insn 12 11 13 (parallel [
            (set (reg:SI 99 [ D.6062 ])
                (plus:SI (reg:SI 93 [ D.6062 ])
                    (const_int -224 [0xffffffffffffff20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 -1
     (nil))

(insn 13 12 14 (parallel [
            (set (reg:SI 100 [ D.6062 ])
                (and:SI (reg:SI 99 [ D.6062 ])
                    (const_int -33 [0xffffffffffffffdf])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 -1
     (nil))

(insn 14 13 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ D.6062 ])
            (const_int 0 [0]))) blake_ref.c:207 -1
     (nil))

(jump_insn 15 14 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:207 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 3

;; if (hashbitlen_4(D) == 224)

(insn 17 16 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 95 [ hashbitlen ])
            (const_int 224 [0xe0]))) blake_ref.c:210 -1
     (nil))

(jump_insn 18 17 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:210 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 4

;; MEM[(char * {ref-all})&state + 16B] = MEM[(char * {ref-all})&IV224];

(insn 20 19 21 (set (reg/f:DI 101)
        (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)) blake_ref.c:211 -1
     (nil))

(insn 21 20 22 (set (reg:DI 102)
        (mem/u/c:DI (reg/f:DI 101) [0 MEM[(char * {ref-all})&IV224]+0 S8 A256])) blake_ref.c:211 -1
     (nil))

(insn 22 21 23 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -368 [0xfffffffffffffe90])) [0 MEM[(char * {ref-all})&state + 16B]+0 S8 A128])
        (reg:DI 102)) blake_ref.c:211 -1
     (nil))

(insn 23 22 24 (set (reg:DI 103)
        (mem/u/c:DI (plus:DI (reg/f:DI 101)
                (const_int 8 [0x8])) [0 MEM[(char * {ref-all})&IV224]+8 S8 A64])) blake_ref.c:211 -1
     (nil))

(insn 24 23 25 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -360 [0xfffffffffffffe98])) [0 MEM[(char * {ref-all})&state + 16B]+8 S8 A64])
        (reg:DI 103)) blake_ref.c:211 -1
     (nil))

(insn 25 24 26 (set (reg:DI 104)
        (mem/u/c:DI (plus:DI (reg/f:DI 101)
                (const_int 16 [0x10])) [0 MEM[(char * {ref-all})&IV224]+16 S8 A128])) blake_ref.c:211 -1
     (nil))

(insn 26 25 27 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -352 [0xfffffffffffffea0])) [0 MEM[(char * {ref-all})&state + 16B]+16 S8 A128])
        (reg:DI 104)) blake_ref.c:211 -1
     (nil))

(insn 27 26 28 (set (reg:DI 105)
        (mem/u/c:DI (plus:DI (reg/f:DI 101)
                (const_int 24 [0x18])) [0 MEM[(char * {ref-all})&IV224]+24 S8 A64])) blake_ref.c:211 -1
     (nil))

(insn 28 27 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -344 [0xfffffffffffffea8])) [0 MEM[(char * {ref-all})&state + 16B]+24 S8 A64])
        (reg:DI 105)) blake_ref.c:211 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 31 30 32 197 "" [0 uses])

(note 32 31 0 NOTE_INSN_BASIC_BLOCK)

;; MEM[(char * {ref-all})&state + 16B] = MEM[(char * {ref-all})&IV256];

(insn 33 32 34 (set (reg/f:DI 106)
        (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)) blake_ref.c:213 -1
     (nil))

(insn 34 33 35 (set (reg:DI 107)
        (mem/u/c:DI (reg/f:DI 106) [0 MEM[(char * {ref-all})&IV256]+0 S8 A256])) blake_ref.c:213 -1
     (nil))

(insn 35 34 36 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -368 [0xfffffffffffffe90])) [0 MEM[(char * {ref-all})&state + 16B]+0 S8 A128])
        (reg:DI 107)) blake_ref.c:213 -1
     (nil))

(insn 36 35 37 (set (reg:DI 108)
        (mem/u/c:DI (plus:DI (reg/f:DI 106)
                (const_int 8 [0x8])) [0 MEM[(char * {ref-all})&IV256]+8 S8 A64])) blake_ref.c:213 -1
     (nil))

(insn 37 36 38 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -360 [0xfffffffffffffe98])) [0 MEM[(char * {ref-all})&state + 16B]+8 S8 A64])
        (reg:DI 108)) blake_ref.c:213 -1
     (nil))

(insn 38 37 39 (set (reg:DI 109)
        (mem/u/c:DI (plus:DI (reg/f:DI 106)
                (const_int 16 [0x10])) [0 MEM[(char * {ref-all})&IV256]+16 S8 A128])) blake_ref.c:213 -1
     (nil))

(insn 39 38 40 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -352 [0xfffffffffffffea0])) [0 MEM[(char * {ref-all})&state + 16B]+16 S8 A128])
        (reg:DI 109)) blake_ref.c:213 -1
     (nil))

(insn 40 39 41 (set (reg:DI 110)
        (mem/u/c:DI (plus:DI (reg/f:DI 106)
                (const_int 24 [0x18])) [0 MEM[(char * {ref-all})&IV256]+24 S8 A64])) blake_ref.c:213 -1
     (nil))

(insn 41 40 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -344 [0xfffffffffffffea8])) [0 MEM[(char * {ref-all})&state + 16B]+24 S8 A64])
        (reg:DI 110)) blake_ref.c:213 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 42 41 43 198 "" [0 uses])

(note 43 42 0 NOTE_INSN_BASIC_BLOCK)

;; state.t32[0] = 0;

(insn 44 43 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -336 [0xfffffffffffffeb0])) [2 state.t32+0 S4 A128])
        (const_int 0 [0])) blake_ref.c:215 -1
     (nil))

;; state.t32[1] = 0;

(insn 45 44 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -332 [0xfffffffffffffeb4])) [2 state.t32+4 S4 A32])
        (const_int 0 [0])) blake_ref.c:216 -1
     (nil))

;; __builtin_memset (&MEM[(void *)&state + 56B], 0, 64);

(insn 46 45 47 (parallel [
            (set (reg:DI 111)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 47 46 48 (parallel [
            (set (reg:DI 112)
                (plus:DI (reg:DI 111)
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 48 47 49 (set (reg:DI 113 [ D.6063 ])
        (reg:DI 112)) -1
     (nil))

(insn 49 48 50 (set (reg/f:DI 114)
        (reg:DI 113 [ D.6063 ])) -1
     (nil))

(insn 50 49 51 (set (reg:DI 115)
        (const_int 0 [0])) -1
     (nil))

(insn 51 50 52 (set (reg:DI 116)
        (const_int 8 [0x8])) -1
     (nil))

(insn 52 51 0 (parallel [
            (set (reg:DI 116)
                (const_int 0 [0]))
            (set (reg/f:DI 114)
                (plus:DI (ashift:DI (reg:DI 116)
                        (const_int 3 [0x3]))
                    (reg/f:DI 114)))
            (set (mem/c:BLK (reg/f:DI 114) [0 MEM[(void *)&state + 56B]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 115))
            (use (reg:DI 116))
        ]) -1
     (nil))

;; MEM[(unsigned int *)&state + 120B] = { 0, 0, 0, 0 };

(insn 53 52 54 (set (reg:V4SI 117)
        (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])) blake_ref.c:221 -1
     (nil))

(insn 54 53 0 (set (mem/c:V16QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -264 [0xfffffffffffffef8])) [2 MEM[(unsigned int *)&state + 120B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 117) 0)
            ] UNSPEC_STOREU)) blake_ref.c:221 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; 

(code_label 57 56 58 196 "" [0 uses])

(note 58 57 0 NOTE_INSN_BASIC_BLOCK)

;; if (_67 == 0)

(insn 59 58 60 (parallel [
            (set (reg:SI 118 [ D.6062 ])
                (plus:SI (reg:SI 93 [ D.6062 ])
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 -1
     (nil))

(insn 60 59 61 (parallel [
            (set (reg:SI 119 [ D.6062 ])
                (and:SI (reg:SI 118 [ D.6062 ])
                    (const_int -129 [0xffffffffffffff7f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 -1
     (nil))

(insn 61 60 62 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 119 [ D.6062 ])
            (const_int 0 [0]))) blake_ref.c:227 -1
     (nil))

(jump_insn 62 61 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:227 -1
     (int_list:REG_BR_PROB 6700 (nil)))

;; Generating RTL for gimple basic block 8

;; if (hashbitlen_4(D) == 384)

(insn 64 63 65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 95 [ hashbitlen ])
            (const_int 384 [0x180]))) blake_ref.c:230 -1
     (nil))

(jump_insn 65 64 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:230 -1
     (int_list:REG_BR_PROB 7200 (nil)))

;; Generating RTL for gimple basic block 9

;; MEM[(char * {ref-all})&state + 136B] = MEM[(char * {ref-all})&IV384];

(insn 67 66 68 (set (reg/f:DI 120)
        (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)) blake_ref.c:231 -1
     (nil))

(insn 68 67 69 (set (reg:DI 121)
        (mem/u/c:DI (reg/f:DI 120) [0 MEM[(char * {ref-all})&IV384]+0 S8 A256])) blake_ref.c:231 -1
     (nil))

(insn 69 68 70 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -248 [0xffffffffffffff08])) [0 MEM[(char * {ref-all})&state + 136B]+0 S8 A64])
        (reg:DI 121)) blake_ref.c:231 -1
     (nil))

(insn 70 69 71 (set (reg:DI 122)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 8 [0x8])) [0 MEM[(char * {ref-all})&IV384]+8 S8 A64])) blake_ref.c:231 -1
     (nil))

(insn 71 70 72 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -240 [0xffffffffffffff10])) [0 MEM[(char * {ref-all})&state + 136B]+8 S8 A64])
        (reg:DI 122)) blake_ref.c:231 -1
     (nil))

(insn 72 71 73 (set (reg:DI 123)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 16 [0x10])) [0 MEM[(char * {ref-all})&IV384]+16 S8 A128])) blake_ref.c:231 -1
     (nil))

(insn 73 72 74 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -232 [0xffffffffffffff18])) [0 MEM[(char * {ref-all})&state + 136B]+16 S8 A64])
        (reg:DI 123)) blake_ref.c:231 -1
     (nil))

(insn 74 73 75 (set (reg:DI 124)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 24 [0x18])) [0 MEM[(char * {ref-all})&IV384]+24 S8 A64])) blake_ref.c:231 -1
     (nil))

(insn 75 74 76 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -224 [0xffffffffffffff20])) [0 MEM[(char * {ref-all})&state + 136B]+24 S8 A64])
        (reg:DI 124)) blake_ref.c:231 -1
     (nil))

(insn 76 75 77 (set (reg:DI 125)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 32 [0x20])) [0 MEM[(char * {ref-all})&IV384]+32 S8 A256])) blake_ref.c:231 -1
     (nil))

(insn 77 76 78 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -216 [0xffffffffffffff28])) [0 MEM[(char * {ref-all})&state + 136B]+32 S8 A64])
        (reg:DI 125)) blake_ref.c:231 -1
     (nil))

(insn 78 77 79 (set (reg:DI 126)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 40 [0x28])) [0 MEM[(char * {ref-all})&IV384]+40 S8 A64])) blake_ref.c:231 -1
     (nil))

(insn 79 78 80 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -208 [0xffffffffffffff30])) [0 MEM[(char * {ref-all})&state + 136B]+40 S8 A64])
        (reg:DI 126)) blake_ref.c:231 -1
     (nil))

(insn 80 79 81 (set (reg:DI 127)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 48 [0x30])) [0 MEM[(char * {ref-all})&IV384]+48 S8 A128])) blake_ref.c:231 -1
     (nil))

(insn 81 80 82 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 MEM[(char * {ref-all})&state + 136B]+48 S8 A64])
        (reg:DI 127)) blake_ref.c:231 -1
     (nil))

(insn 82 81 83 (set (reg:DI 128)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 56 [0x38])) [0 MEM[(char * {ref-all})&IV384]+56 S8 A64])) blake_ref.c:231 -1
     (nil))

(insn 83 82 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -192 [0xffffffffffffff40])) [0 MEM[(char * {ref-all})&state + 136B]+56 S8 A64])
        (reg:DI 128)) blake_ref.c:231 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; 

(code_label 86 85 87 201 "" [0 uses])

(note 87 86 0 NOTE_INSN_BASIC_BLOCK)

;; MEM[(char * {ref-all})&state + 136B] = MEM[(char * {ref-all})&IV512];

(insn 88 87 89 (set (reg/f:DI 129)
        (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)) blake_ref.c:233 -1
     (nil))

(insn 89 88 90 (set (reg:DI 130)
        (mem/u/c:DI (reg/f:DI 129) [0 MEM[(char * {ref-all})&IV512]+0 S8 A256])) blake_ref.c:233 -1
     (nil))

(insn 90 89 91 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -248 [0xffffffffffffff08])) [0 MEM[(char * {ref-all})&state + 136B]+0 S8 A64])
        (reg:DI 130)) blake_ref.c:233 -1
     (nil))

(insn 91 90 92 (set (reg:DI 131)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 8 [0x8])) [0 MEM[(char * {ref-all})&IV512]+8 S8 A64])) blake_ref.c:233 -1
     (nil))

(insn 92 91 93 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -240 [0xffffffffffffff10])) [0 MEM[(char * {ref-all})&state + 136B]+8 S8 A64])
        (reg:DI 131)) blake_ref.c:233 -1
     (nil))

(insn 93 92 94 (set (reg:DI 132)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 16 [0x10])) [0 MEM[(char * {ref-all})&IV512]+16 S8 A128])) blake_ref.c:233 -1
     (nil))

(insn 94 93 95 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -232 [0xffffffffffffff18])) [0 MEM[(char * {ref-all})&state + 136B]+16 S8 A64])
        (reg:DI 132)) blake_ref.c:233 -1
     (nil))

(insn 95 94 96 (set (reg:DI 133)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 24 [0x18])) [0 MEM[(char * {ref-all})&IV512]+24 S8 A64])) blake_ref.c:233 -1
     (nil))

(insn 96 95 97 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -224 [0xffffffffffffff20])) [0 MEM[(char * {ref-all})&state + 136B]+24 S8 A64])
        (reg:DI 133)) blake_ref.c:233 -1
     (nil))

(insn 97 96 98 (set (reg:DI 134)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 32 [0x20])) [0 MEM[(char * {ref-all})&IV512]+32 S8 A256])) blake_ref.c:233 -1
     (nil))

(insn 98 97 99 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -216 [0xffffffffffffff28])) [0 MEM[(char * {ref-all})&state + 136B]+32 S8 A64])
        (reg:DI 134)) blake_ref.c:233 -1
     (nil))

(insn 99 98 100 (set (reg:DI 135)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 40 [0x28])) [0 MEM[(char * {ref-all})&IV512]+40 S8 A64])) blake_ref.c:233 -1
     (nil))

(insn 100 99 101 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -208 [0xffffffffffffff30])) [0 MEM[(char * {ref-all})&state + 136B]+40 S8 A64])
        (reg:DI 135)) blake_ref.c:233 -1
     (nil))

(insn 101 100 102 (set (reg:DI 136)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 48 [0x30])) [0 MEM[(char * {ref-all})&IV512]+48 S8 A128])) blake_ref.c:233 -1
     (nil))

(insn 102 101 103 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 MEM[(char * {ref-all})&state + 136B]+48 S8 A64])
        (reg:DI 136)) blake_ref.c:233 -1
     (nil))

(insn 103 102 104 (set (reg:DI 137)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 56 [0x38])) [0 MEM[(char * {ref-all})&IV512]+56 S8 A64])) blake_ref.c:233 -1
     (nil))

(insn 104 103 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -192 [0xffffffffffffff40])) [0 MEM[(char * {ref-all})&state + 136B]+56 S8 A64])
        (reg:DI 137)) blake_ref.c:233 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; 

(code_label 105 104 106 202 "" [0 uses])

(note 106 105 0 NOTE_INSN_BASIC_BLOCK)

;; state.t64[0] = 0;

(insn 107 106 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -184 [0xffffffffffffff48])) [3 state.t64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:235 -1
     (nil))

;; state.t64[1] = 0;

(insn 108 107 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -176 [0xffffffffffffff50])) [3 state.t64+8 S8 A128])
        (const_int 0 [0])) blake_ref.c:236 -1
     (nil))

;; __builtin_memset (&MEM[(void *)&state + 216B], 0, 64);

(insn 109 108 110 (parallel [
            (set (reg:DI 138)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 110 109 111 (parallel [
            (set (reg:DI 139)
                (plus:DI (reg:DI 138)
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 111 110 112 (set (reg:DI 140 [ D.6064 ])
        (reg:DI 139)) -1
     (nil))

(insn 112 111 113 (set (reg/f:DI 141)
        (reg:DI 140 [ D.6064 ])) -1
     (nil))

(insn 113 112 114 (set (reg:DI 142)
        (const_int 0 [0])) -1
     (nil))

(insn 114 113 115 (set (reg:DI 143)
        (const_int 8 [0x8])) -1
     (nil))

(insn 115 114 0 (parallel [
            (set (reg:DI 143)
                (const_int 0 [0]))
            (set (reg/f:DI 141)
                (plus:DI (ashift:DI (reg:DI 143)
                        (const_int 3 [0x3]))
                    (reg/f:DI 141)))
            (set (mem/c:BLK (reg/f:DI 141) [0 MEM[(void *)&state + 216B]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 142))
            (use (reg:DI 143))
        ]) -1
     (nil))

;; state.salt64[0] = 0;

(insn 116 115 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [3 state.salt64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:241 -1
     (nil))

;; state.salt64[1] = 0;

(insn 117 116 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [3 state.salt64+8 S8 A128])
        (const_int 0 [0])) blake_ref.c:242 -1
     (nil))

;; state.salt64[2] = 0;

(insn 118 117 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [3 state.salt64+16 S8 A64])
        (const_int 0 [0])) blake_ref.c:243 -1
     (nil))

;; state.salt64[3] = 0;

(insn 119 118 0 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 state.salt64+24 S8 A128])
        (const_int 0 [0])) blake_ref.c:244 -1
     (nil))

;; Generating RTL for gimple basic block 12

;; 

(code_label 120 119 121 199 "" [0 uses])

(note 121 120 0 NOTE_INSN_BASIC_BLOCK)

;; state.hashbitlen = hashbitlen_4(D);

(insn 122 121 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -384 [0xfffffffffffffe80])) [2 state.hashbitlen+0 S4 A128])
        (reg/v:SI 95 [ hashbitlen ])) blake_ref.c:251 -1
     (nil))

;; state.datalen = 0;

(insn 123 122 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -380 [0xfffffffffffffe84])) [2 state.datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:252 -1
     (nil))

;; state.init = 1;

(insn 124 123 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -376 [0xfffffffffffffe88])) [2 state.init+0 S4 A64])
        (const_int 1 [0x1])) blake_ref.c:253 -1
     (nil))

;; state.nullt = 0;

(insn 125 124 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -372 [0xfffffffffffffe8c])) [2 state.nullt+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:254 -1
     (nil))

;; if (hashbitlen_4(D) <= 383)

(insn 126 125 127 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 95 [ hashbitlen ])
            (const_int 383 [0x17f]))) blake_ref.c:399 -1
     (nil))

(jump_insn 127 126 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:399 -1
     (int_list:REG_BR_PROB 5000 (nil)))

;; Generating RTL for gimple basic block 13

;; if (databitlen_8(D) == 0)

(insn 129 128 130 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 97 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))

(jump_insn 130 129 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 7929 (nil)))

;; Generating RTL for gimple basic block 14

;; Update32.part.0 (&state, data_7(D), databitlen_8(D));

(insn 132 131 133 (parallel [
            (set (reg:DI 144)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 133 132 134 (set (reg:DI 37 r8)
        (reg/v:DI 97 [ databitlen ])) -1
     (nil))

(insn 134 133 135 (set (reg:DI 1 dx)
        (reg/v/f:DI 96 [ data ])) -1
     (nil))

(insn 135 134 136 (set (reg:DI 2 cx)
        (reg:DI 144)) -1
     (nil))

(call_insn 136 135 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 15

;; 

(code_label 139 138 140 203 "" [0 uses])

(note 140 139 0 NOTE_INSN_BASIC_BLOCK)

;; if (databitlen_8(D) == 0)

(insn 141 140 142 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 97 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))

(jump_insn 142 141 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 7100 (nil)))

;; Generating RTL for gimple basic block 16

;; Update64.part.1 (&state, data_7(D), databitlen_8(D));

(insn 144 143 145 (parallel [
            (set (reg:DI 145)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))

(insn 145 144 146 (set (reg:DI 37 r8)
        (reg/v:DI 97 [ databitlen ])) -1
     (nil))

(insn 146 145 147 (set (reg:DI 1 dx)
        (reg/v/f:DI 96 [ data ])) -1
     (nil))

(insn 147 146 148 (set (reg:DI 2 cx)
        (reg:DI 145)) -1
     (nil))

(call_insn 148 147 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))

;; Generating RTL for gimple basic block 17

;; 

(code_label 149 148 150 204 "" [0 uses])

(note 150 149 0 NOTE_INSN_BASIC_BLOCK)

;; ret_13 = Final (&state, hashval_11(D));

(insn 151 150 152 (parallel [
            (set (reg:DI 146)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:673 -1
     (nil))

(insn 152 151 153 (set (reg:DI 1 dx)
        (reg/v/f:DI 98 [ hashval ])) blake_ref.c:673 -1
     (nil))

(insn 153 152 154 (set (reg:DI 2 cx)
        (reg:DI 146)) blake_ref.c:673 -1
     (nil))

(call_insn 154 153 155 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>) [0 Final S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:673 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))

(insn 155 154 0 (set (reg/v:SI 88 [ ret ])
        (reg:SI 0 ax)) blake_ref.c:673 -1
     (nil))

;; Generating RTL for gimple basic block 18

;; 

(code_label 156 155 157 200 "" [0 uses])

(note 157 156 0 NOTE_INSN_BASIC_BLOCK)

;; state ={v} {CLOBBER};

(nil)

;; return _1;

(insn 158 157 159 (set (reg:SI 94 [ <retval> ])
        (reg:SI 87 [ D.6061 ])) -1
     (nil))

(jump_insn 159 158 160 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 160 159 0)
Edge 7->18 redirected to 21


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 159.
Merging block 21 into block 20...
Merged blocks 20 and 21.
Merged 20 and 21 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v:SI 95 [ hashbitlen ])
        (reg:SI 2 cx [ hashbitlen ])) blake_ref.c:662 -1
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 81 virtual-incoming-args) [2 hashbitlen+0 S4 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 96 [ data ])
        (reg:DI 1 dx [ data ])) blake_ref.c:662 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 8 [0x8])) [4 data+0 S8 A64])
        (nil)))
(insn 4 3 5 2 (set (reg/v:DI 97 [ databitlen ])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:662 -1
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 98 [ hashval ])
        (reg:DI 38 r9 [ hashval ])) blake_ref.c:662 -1
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 24 [0x18])) [4 hashval+0 S8 A64])
        (nil)))
(note 6 5 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 6 12 2 (set (reg:SI 93 [ D.6062 ])
        (reg/v:SI 95 [ hashbitlen ])) blake_ref.c:207 -1
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 99 [ D.6062 ])
                (plus:SI (reg:SI 93 [ D.6062 ])
                    (const_int -224 [0xffffffffffffff20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 -1
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 100 [ D.6062 ])
                (and:SI (reg:SI 99 [ D.6062 ])
                    (const_int -33 [0xffffffffffffffdf])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 -1
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ D.6062 ])
            (const_int 0 [0]))) blake_ref.c:207 -1
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) blake_ref.c:207 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 57)
;;  succ:       4 [50.0%]  (FALLTHRU)
;;              8 [50.0%] 

;; basic block 4, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 95 [ hashbitlen ])
            (const_int 224 [0xe0]))) blake_ref.c:210 -1
     (nil))
(jump_insn 18 17 19 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) blake_ref.c:210 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 31)
;;  succ:       5 [28.0%]  (FALLTHRU)
;;              6 [72.0%] 

;; basic block 5, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [28.0%]  (FALLTHRU)
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg/f:DI 101)
        (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)) blake_ref.c:211 -1
     (nil))
(insn 21 20 22 5 (set (reg:DI 102)
        (mem/u/c:DI (reg/f:DI 101) [0 MEM[(char * {ref-all})&IV224]+0 S8 A256])) blake_ref.c:211 -1
     (nil))
(insn 22 21 23 5 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -368 [0xfffffffffffffe90])) [0 MEM[(char * {ref-all})&state + 16B]+0 S8 A128])
        (reg:DI 102)) blake_ref.c:211 -1
     (nil))
(insn 23 22 24 5 (set (reg:DI 103)
        (mem/u/c:DI (plus:DI (reg/f:DI 101)
                (const_int 8 [0x8])) [0 MEM[(char * {ref-all})&IV224]+8 S8 A64])) blake_ref.c:211 -1
     (nil))
(insn 24 23 25 5 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -360 [0xfffffffffffffe98])) [0 MEM[(char * {ref-all})&state + 16B]+8 S8 A64])
        (reg:DI 103)) blake_ref.c:211 -1
     (nil))
(insn 25 24 26 5 (set (reg:DI 104)
        (mem/u/c:DI (plus:DI (reg/f:DI 101)
                (const_int 16 [0x10])) [0 MEM[(char * {ref-all})&IV224]+16 S8 A128])) blake_ref.c:211 -1
     (nil))
(insn 26 25 27 5 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -352 [0xfffffffffffffea0])) [0 MEM[(char * {ref-all})&state + 16B]+16 S8 A128])
        (reg:DI 104)) blake_ref.c:211 -1
     (nil))
(insn 27 26 28 5 (set (reg:DI 105)
        (mem/u/c:DI (plus:DI (reg/f:DI 101)
                (const_int 24 [0x18])) [0 MEM[(char * {ref-all})&IV224]+24 S8 A64])) blake_ref.c:211 -1
     (nil))
(insn 28 27 29 5 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -344 [0xfffffffffffffea8])) [0 MEM[(char * {ref-all})&state + 16B]+24 S8 A64])
        (reg:DI 105)) blake_ref.c:211 -1
     (nil))
(jump_insn 29 28 30 5 (set (pc)
        (label_ref 42)) blake_ref.c:211 -1
     (nil)
 -> 42)
;;  succ:       7 [100.0%] 

(barrier 30 29 31)
;; basic block 6, loop depth 0, count 0, freq 111, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [72.0%] 
(code_label 31 30 32 6 197 "" [1 uses])
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 6 (set (reg/f:DI 106)
        (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)) blake_ref.c:213 -1
     (nil))
(insn 34 33 35 6 (set (reg:DI 107)
        (mem/u/c:DI (reg/f:DI 106) [0 MEM[(char * {ref-all})&IV256]+0 S8 A256])) blake_ref.c:213 -1
     (nil))
(insn 35 34 36 6 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -368 [0xfffffffffffffe90])) [0 MEM[(char * {ref-all})&state + 16B]+0 S8 A128])
        (reg:DI 107)) blake_ref.c:213 -1
     (nil))
(insn 36 35 37 6 (set (reg:DI 108)
        (mem/u/c:DI (plus:DI (reg/f:DI 106)
                (const_int 8 [0x8])) [0 MEM[(char * {ref-all})&IV256]+8 S8 A64])) blake_ref.c:213 -1
     (nil))
(insn 37 36 38 6 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -360 [0xfffffffffffffe98])) [0 MEM[(char * {ref-all})&state + 16B]+8 S8 A64])
        (reg:DI 108)) blake_ref.c:213 -1
     (nil))
(insn 38 37 39 6 (set (reg:DI 109)
        (mem/u/c:DI (plus:DI (reg/f:DI 106)
                (const_int 16 [0x10])) [0 MEM[(char * {ref-all})&IV256]+16 S8 A128])) blake_ref.c:213 -1
     (nil))
(insn 39 38 40 6 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -352 [0xfffffffffffffea0])) [0 MEM[(char * {ref-all})&state + 16B]+16 S8 A128])
        (reg:DI 109)) blake_ref.c:213 -1
     (nil))
(insn 40 39 41 6 (set (reg:DI 110)
        (mem/u/c:DI (plus:DI (reg/f:DI 106)
                (const_int 24 [0x18])) [0 MEM[(char * {ref-all})&IV256]+24 S8 A64])) blake_ref.c:213 -1
     (nil))
(insn 41 40 42 6 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -344 [0xfffffffffffffea8])) [0 MEM[(char * {ref-all})&state + 16B]+24 S8 A64])
        (reg:DI 110)) blake_ref.c:213 -1
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 [100.0%] 
;;              6 [100.0%]  (FALLTHRU)
(code_label 42 41 43 7 198 "" [1 uses])
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -336 [0xfffffffffffffeb0])) [2 state.t32+0 S4 A128])
        (const_int 0 [0])) blake_ref.c:215 -1
     (nil))
(insn 45 44 46 7 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -332 [0xfffffffffffffeb4])) [2 state.t32+4 S4 A32])
        (const_int 0 [0])) blake_ref.c:216 -1
     (nil))
(insn 46 45 47 7 (parallel [
            (set (reg:DI 111)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 47 46 48 7 (parallel [
            (set (reg:DI 112)
                (plus:DI (reg:DI 111)
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 48 47 49 7 (set (reg:DI 113 [ D.6063 ])
        (reg:DI 112)) -1
     (nil))
(insn 49 48 50 7 (set (reg/f:DI 114)
        (reg:DI 113 [ D.6063 ])) -1
     (nil))
(insn 50 49 51 7 (set (reg:DI 115)
        (const_int 0 [0])) -1
     (nil))
(insn 51 50 52 7 (set (reg:DI 116)
        (const_int 8 [0x8])) -1
     (nil))
(insn 52 51 53 7 (parallel [
            (set (reg:DI 116)
                (const_int 0 [0]))
            (set (reg/f:DI 114)
                (plus:DI (ashift:DI (reg:DI 116)
                        (const_int 3 [0x3]))
                    (reg/f:DI 114)))
            (set (mem/c:BLK (reg/f:DI 114) [0 MEM[(void *)&state + 56B]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 115))
            (use (reg:DI 116))
        ]) -1
     (nil))
(insn 53 52 54 7 (set (reg:V4SI 117)
        (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])) blake_ref.c:221 -1
     (nil))
(insn 54 53 55 7 (set (mem/c:V16QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -264 [0xfffffffffffffef8])) [2 MEM[(unsigned int *)&state + 120B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 117) 0)
            ] UNSPEC_STOREU)) blake_ref.c:221 -1
     (nil))
(jump_insn 55 54 56 7 (set (pc)
        (label_ref 120)) blake_ref.c:221 -1
     (nil)
 -> 120)
;;  succ:       13 [100.0%] 

(barrier 56 55 57)
;; basic block 8, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
(code_label 57 56 58 8 196 "" [1 uses])
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 8 (parallel [
            (set (reg:SI 118 [ D.6062 ])
                (plus:SI (reg:SI 93 [ D.6062 ])
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 -1
     (nil))
(insn 60 59 61 8 (parallel [
            (set (reg:SI 119 [ D.6062 ])
                (and:SI (reg:SI 118 [ D.6062 ])
                    (const_int -129 [0xffffffffffffff7f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 -1
     (nil))
(insn 61 60 62 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 119 [ D.6062 ])
            (const_int 0 [0]))) blake_ref.c:227 -1
     (nil))
(jump_insn 62 61 63 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 168)
            (pc))) blake_ref.c:227 612 {*jcc_1}
     (int_list:REG_BR_PROB 6700 (nil))
 -> 168)
;;  succ:       9 [33.0%]  (FALLTHRU)
;;              19 [67.0%] 

;; basic block 9, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [33.0%]  (FALLTHRU)
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 95 [ hashbitlen ])
            (const_int 384 [0x180]))) blake_ref.c:230 -1
     (nil))
(jump_insn 65 64 66 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) blake_ref.c:230 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 86)
;;  succ:       10 [28.0%]  (FALLTHRU)
;;              11 [72.0%] 

;; basic block 10, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 [28.0%]  (FALLTHRU)
(note 66 65 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 10 (set (reg/f:DI 120)
        (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)) blake_ref.c:231 -1
     (nil))
(insn 68 67 69 10 (set (reg:DI 121)
        (mem/u/c:DI (reg/f:DI 120) [0 MEM[(char * {ref-all})&IV384]+0 S8 A256])) blake_ref.c:231 -1
     (nil))
(insn 69 68 70 10 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -248 [0xffffffffffffff08])) [0 MEM[(char * {ref-all})&state + 136B]+0 S8 A64])
        (reg:DI 121)) blake_ref.c:231 -1
     (nil))
(insn 70 69 71 10 (set (reg:DI 122)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 8 [0x8])) [0 MEM[(char * {ref-all})&IV384]+8 S8 A64])) blake_ref.c:231 -1
     (nil))
(insn 71 70 72 10 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -240 [0xffffffffffffff10])) [0 MEM[(char * {ref-all})&state + 136B]+8 S8 A64])
        (reg:DI 122)) blake_ref.c:231 -1
     (nil))
(insn 72 71 73 10 (set (reg:DI 123)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 16 [0x10])) [0 MEM[(char * {ref-all})&IV384]+16 S8 A128])) blake_ref.c:231 -1
     (nil))
(insn 73 72 74 10 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -232 [0xffffffffffffff18])) [0 MEM[(char * {ref-all})&state + 136B]+16 S8 A64])
        (reg:DI 123)) blake_ref.c:231 -1
     (nil))
(insn 74 73 75 10 (set (reg:DI 124)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 24 [0x18])) [0 MEM[(char * {ref-all})&IV384]+24 S8 A64])) blake_ref.c:231 -1
     (nil))
(insn 75 74 76 10 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -224 [0xffffffffffffff20])) [0 MEM[(char * {ref-all})&state + 136B]+24 S8 A64])
        (reg:DI 124)) blake_ref.c:231 -1
     (nil))
(insn 76 75 77 10 (set (reg:DI 125)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 32 [0x20])) [0 MEM[(char * {ref-all})&IV384]+32 S8 A256])) blake_ref.c:231 -1
     (nil))
(insn 77 76 78 10 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -216 [0xffffffffffffff28])) [0 MEM[(char * {ref-all})&state + 136B]+32 S8 A64])
        (reg:DI 125)) blake_ref.c:231 -1
     (nil))
(insn 78 77 79 10 (set (reg:DI 126)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 40 [0x28])) [0 MEM[(char * {ref-all})&IV384]+40 S8 A64])) blake_ref.c:231 -1
     (nil))
(insn 79 78 80 10 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -208 [0xffffffffffffff30])) [0 MEM[(char * {ref-all})&state + 136B]+40 S8 A64])
        (reg:DI 126)) blake_ref.c:231 -1
     (nil))
(insn 80 79 81 10 (set (reg:DI 127)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 48 [0x30])) [0 MEM[(char * {ref-all})&IV384]+48 S8 A128])) blake_ref.c:231 -1
     (nil))
(insn 81 80 82 10 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 MEM[(char * {ref-all})&state + 136B]+48 S8 A64])
        (reg:DI 127)) blake_ref.c:231 -1
     (nil))
(insn 82 81 83 10 (set (reg:DI 128)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 56 [0x38])) [0 MEM[(char * {ref-all})&IV384]+56 S8 A64])) blake_ref.c:231 -1
     (nil))
(insn 83 82 84 10 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -192 [0xffffffffffffff40])) [0 MEM[(char * {ref-all})&state + 136B]+56 S8 A64])
        (reg:DI 128)) blake_ref.c:231 -1
     (nil))
(jump_insn 84 83 85 10 (set (pc)
        (label_ref 105)) blake_ref.c:231 -1
     (nil)
 -> 105)
;;  succ:       12 [100.0%] 

(barrier 85 84 86)
;; basic block 11, loop depth 0, count 0, freq 37, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 [72.0%] 
(code_label 86 85 87 11 201 "" [1 uses])
(note 87 86 88 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 11 (set (reg/f:DI 129)
        (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)) blake_ref.c:233 -1
     (nil))
(insn 89 88 90 11 (set (reg:DI 130)
        (mem/u/c:DI (reg/f:DI 129) [0 MEM[(char * {ref-all})&IV512]+0 S8 A256])) blake_ref.c:233 -1
     (nil))
(insn 90 89 91 11 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -248 [0xffffffffffffff08])) [0 MEM[(char * {ref-all})&state + 136B]+0 S8 A64])
        (reg:DI 130)) blake_ref.c:233 -1
     (nil))
(insn 91 90 92 11 (set (reg:DI 131)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 8 [0x8])) [0 MEM[(char * {ref-all})&IV512]+8 S8 A64])) blake_ref.c:233 -1
     (nil))
(insn 92 91 93 11 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -240 [0xffffffffffffff10])) [0 MEM[(char * {ref-all})&state + 136B]+8 S8 A64])
        (reg:DI 131)) blake_ref.c:233 -1
     (nil))
(insn 93 92 94 11 (set (reg:DI 132)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 16 [0x10])) [0 MEM[(char * {ref-all})&IV512]+16 S8 A128])) blake_ref.c:233 -1
     (nil))
(insn 94 93 95 11 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -232 [0xffffffffffffff18])) [0 MEM[(char * {ref-all})&state + 136B]+16 S8 A64])
        (reg:DI 132)) blake_ref.c:233 -1
     (nil))
(insn 95 94 96 11 (set (reg:DI 133)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 24 [0x18])) [0 MEM[(char * {ref-all})&IV512]+24 S8 A64])) blake_ref.c:233 -1
     (nil))
(insn 96 95 97 11 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -224 [0xffffffffffffff20])) [0 MEM[(char * {ref-all})&state + 136B]+24 S8 A64])
        (reg:DI 133)) blake_ref.c:233 -1
     (nil))
(insn 97 96 98 11 (set (reg:DI 134)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 32 [0x20])) [0 MEM[(char * {ref-all})&IV512]+32 S8 A256])) blake_ref.c:233 -1
     (nil))
(insn 98 97 99 11 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -216 [0xffffffffffffff28])) [0 MEM[(char * {ref-all})&state + 136B]+32 S8 A64])
        (reg:DI 134)) blake_ref.c:233 -1
     (nil))
(insn 99 98 100 11 (set (reg:DI 135)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 40 [0x28])) [0 MEM[(char * {ref-all})&IV512]+40 S8 A64])) blake_ref.c:233 -1
     (nil))
(insn 100 99 101 11 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -208 [0xffffffffffffff30])) [0 MEM[(char * {ref-all})&state + 136B]+40 S8 A64])
        (reg:DI 135)) blake_ref.c:233 -1
     (nil))
(insn 101 100 102 11 (set (reg:DI 136)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 48 [0x30])) [0 MEM[(char * {ref-all})&IV512]+48 S8 A128])) blake_ref.c:233 -1
     (nil))
(insn 102 101 103 11 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 MEM[(char * {ref-all})&state + 136B]+48 S8 A64])
        (reg:DI 136)) blake_ref.c:233 -1
     (nil))
(insn 103 102 104 11 (set (reg:DI 137)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 56 [0x38])) [0 MEM[(char * {ref-all})&IV512]+56 S8 A64])) blake_ref.c:233 -1
     (nil))
(insn 104 103 105 11 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -192 [0xffffffffffffff40])) [0 MEM[(char * {ref-all})&state + 136B]+56 S8 A64])
        (reg:DI 137)) blake_ref.c:233 -1
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)

;; basic block 12, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       10 [100.0%] 
;;              11 [100.0%]  (FALLTHRU)
(code_label 105 104 106 12 202 "" [1 uses])
(note 106 105 107 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 12 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -184 [0xffffffffffffff48])) [3 state.t64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:235 -1
     (nil))
(insn 108 107 109 12 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -176 [0xffffffffffffff50])) [3 state.t64+8 S8 A128])
        (const_int 0 [0])) blake_ref.c:236 -1
     (nil))
(insn 109 108 110 12 (parallel [
            (set (reg:DI 138)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 110 109 111 12 (parallel [
            (set (reg:DI 139)
                (plus:DI (reg:DI 138)
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 111 110 112 12 (set (reg:DI 140 [ D.6064 ])
        (reg:DI 139)) -1
     (nil))
(insn 112 111 113 12 (set (reg/f:DI 141)
        (reg:DI 140 [ D.6064 ])) -1
     (nil))
(insn 113 112 114 12 (set (reg:DI 142)
        (const_int 0 [0])) -1
     (nil))
(insn 114 113 115 12 (set (reg:DI 143)
        (const_int 8 [0x8])) -1
     (nil))
(insn 115 114 116 12 (parallel [
            (set (reg:DI 143)
                (const_int 0 [0]))
            (set (reg/f:DI 141)
                (plus:DI (ashift:DI (reg:DI 143)
                        (const_int 3 [0x3]))
                    (reg/f:DI 141)))
            (set (mem/c:BLK (reg/f:DI 141) [0 MEM[(void *)&state + 216B]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 142))
            (use (reg:DI 143))
        ]) -1
     (nil))
(insn 116 115 117 12 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [3 state.salt64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:241 -1
     (nil))
(insn 117 116 118 12 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [3 state.salt64+8 S8 A128])
        (const_int 0 [0])) blake_ref.c:242 -1
     (nil))
(insn 118 117 119 12 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [3 state.salt64+16 S8 A64])
        (const_int 0 [0])) blake_ref.c:243 -1
     (nil))
(insn 119 118 120 12 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 state.salt64+24 S8 A128])
        (const_int 0 [0])) blake_ref.c:244 -1
     (nil))
;;  succ:       13 [100.0%]  (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 205, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [100.0%] 
;;              12 [100.0%]  (FALLTHRU)
(code_label 120 119 121 13 199 "" [1 uses])
(note 121 120 122 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 13 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -384 [0xfffffffffffffe80])) [2 state.hashbitlen+0 S4 A128])
        (reg/v:SI 95 [ hashbitlen ])) blake_ref.c:251 -1
     (nil))
(insn 123 122 124 13 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -380 [0xfffffffffffffe84])) [2 state.datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:252 -1
     (nil))
(insn 124 123 125 13 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -376 [0xfffffffffffffe88])) [2 state.init+0 S4 A64])
        (const_int 1 [0x1])) blake_ref.c:253 -1
     (nil))
(insn 125 124 126 13 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -372 [0xfffffffffffffe8c])) [2 state.nullt+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:254 -1
     (nil))
(insn 126 125 127 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 95 [ hashbitlen ])
            (const_int 383 [0x17f]))) blake_ref.c:399 -1
     (nil))
(jump_insn 127 126 128 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 139)
            (pc))) blake_ref.c:399 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 139)
;;  succ:       14 [50.0%]  (FALLTHRU)
;;              16 [50.0%] 

;; basic block 14, loop depth 0, count 0, freq 60, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       13 [50.0%]  (FALLTHRU)
(note 128 127 129 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 97 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:295 -1
     (nil))
(jump_insn 130 129 131 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 149)
            (pc))) blake_ref.c:295 -1
     (int_list:REG_BR_PROB 7929 (nil))
 -> 149)
;;  succ:       18 [79.3%] 
;;              15 [20.7%]  (FALLTHRU)

;; basic block 15, loop depth 0, count 0, freq 26, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       14 [20.7%]  (FALLTHRU)
(note 131 130 132 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 133 15 (parallel [
            (set (reg:DI 144)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 133 132 134 15 (set (reg:DI 37 r8)
        (reg/v:DI 97 [ databitlen ])) -1
     (nil))
(insn 134 133 135 15 (set (reg:DI 1 dx)
        (reg/v/f:DI 96 [ data ])) -1
     (nil))
(insn 135 134 136 15 (set (reg:DI 2 cx)
        (reg:DI 144)) -1
     (nil))
(call_insn 136 135 137 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 137 136 138 15 (set (pc)
        (label_ref 149)) -1
     (nil)
 -> 149)
;;  succ:       18 [100.0%] 

(barrier 138 137 139)
;; basic block 16, loop depth 0, count 0, freq 60, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL)
;;  pred:       13 [50.0%] 
(code_label 139 138 140 16 203 "" [1 uses])
(note 140 139 141 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 97 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:351 -1
     (nil))
(jump_insn 142 141 143 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 149)
            (pc))) blake_ref.c:351 -1
     (int_list:REG_BR_PROB 7100 (nil))
 -> 149)
;;  succ:       18 [71.0%] 
;;              17 [29.0%]  (FALLTHRU)

;; basic block 17, loop depth 0, count 0, freq 34, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL)
;;  pred:       16 [29.0%]  (FALLTHRU)
(note 143 142 144 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 17 (parallel [
            (set (reg:DI 145)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 145 144 146 17 (set (reg:DI 37 r8)
        (reg/v:DI 97 [ databitlen ])) -1
     (nil))
(insn 146 145 147 17 (set (reg:DI 1 dx)
        (reg/v/f:DI 96 [ data ])) -1
     (nil))
(insn 147 146 148 17 (set (reg:DI 2 cx)
        (reg:DI 145)) -1
     (nil))
(call_insn 148 147 149 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       18 [100.0%]  (FALLTHRU)

;; basic block 18, loop depth 0, count 0, freq 120, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL)
;;  pred:       15 [100.0%] 
;;              16 [71.0%] 
;;              17 [100.0%]  (FALLTHRU)
;;              14 [79.3%] 
(code_label 149 148 150 18 204 "" [3 uses])
(note 150 149 151 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 18 (parallel [
            (set (reg:DI 146)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:673 -1
     (nil))
(insn 152 151 153 18 (set (reg:DI 1 dx)
        (reg/v/f:DI 98 [ hashval ])) blake_ref.c:673 -1
     (nil))
(insn 153 152 154 18 (set (reg:DI 2 cx)
        (reg:DI 146)) blake_ref.c:673 -1
     (nil))
(call_insn 154 153 155 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>) [0 Final S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:673 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 155 154 8 18 (set (reg/v:SI 88 [ ret ])
        (reg:SI 0 ax)) blake_ref.c:673 -1
     (nil))
(insn 8 155 165 18 (set (reg:SI 87 [ D.6061 ])
        (reg/v:SI 88 [ ret ])) blake_ref.c:675 -1
     (nil))
(jump_insn 165 8 166 18 (set (pc)
        (label_ref 156)) blake_ref.c:675 -1
     (nil)
 -> 156)
;;  succ:       20 [100.0%] 

(barrier 166 165 168)
;; basic block 19, loop depth 0, count 0, freq 103, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 [67.0%] 
(code_label 168 166 167 19 205 "" [1 uses])
(note 167 168 7 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 7 167 156 19 (set (reg:SI 87 [ D.6061 ])
        (const_int 2 [0x2])) blake_ref.c:249 -1
     (nil))
;;  succ:       20 [100.0%]  (FALLTHRU)

;; basic block 20, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 19, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       19 [100.0%]  (FALLTHRU)
;;              18 [100.0%] 
(code_label 156 7 157 20 200 "" [1 uses])
(note 157 156 158 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 158 157 162 20 (set (reg:SI 94 [ <retval> ])
        (reg:SI 87 [ D.6061 ])) -1
     (nil))
(insn 162 158 163 20 (set (reg/i:SI 0 ax)
        (reg:SI 94 [ <retval> ])) blake_ref.c:677 -1
     (nil))
(insn 163 162 0 20 (use (reg/i:SI 0 ax)) blake_ref.c:677 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)

