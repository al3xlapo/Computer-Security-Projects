
;; Function compress32 (compress32, funcdef_no=11, decl_uid=3211, cgraph_uid=11, symbol_order=19)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-64, prev_offset=0)
Changing pseudo 356 in operand 0 of insn 28 on equiv [argp:DI+0x90]
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) 0 {*bswapsi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 66:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=532 from oldreg=297, assigning class GENERAL_REGS to r532
   66: r532:SI=bswap(r532:SI)
      REG_DEAD r359:SI
      REG_EQUAL bswap([r357:DI+0x4])
    Inserting insn reload before:
  448: r532:SI=r359:SI
    Inserting insn reload after:
  449: r297:SI=r532:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 69:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=533 from oldreg=301, assigning class GENERAL_REGS to r533
   69: r533:SI=bswap(r533:SI)
      REG_DEAD r360:SI
      REG_EQUAL bswap([r357:DI+0x8])
    Inserting insn reload before:
  450: r533:SI=r360:SI
    Inserting insn reload after:
  451: r301:SI=r533:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 451:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 70:  (0) m  (1) re {*movsi_internal}
      Creating newreg=534 from oldreg=301, assigning class GENERAL_REGS to r534
   70: [frame:DI+0x8]=r534:SI
    Inserting insn reload before:
  452: r534:SI=r301:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 72:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=535 from oldreg=305, assigning class GENERAL_REGS to r535
   72: r535:SI=bswap(r535:SI)
      REG_DEAD r361:SI
      REG_EQUAL bswap([r357:DI+0xc])
    Inserting insn reload before:
  453: r535:SI=r361:SI
    Inserting insn reload after:
  454: r305:SI=r535:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 454:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
      Creating newreg=536 from oldreg=305, assigning class GENERAL_REGS to r536
   73: [frame:DI+0xc]=r536:SI
    Inserting insn reload before:
  455: r536:SI=r305:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 75:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=537 from oldreg=309, assigning class GENERAL_REGS to r537
   75: r537:SI=bswap(r537:SI)
      REG_DEAD r362:SI
      REG_EQUAL bswap([r357:DI+0x10])
    Inserting insn reload before:
  456: r537:SI=r362:SI
    Inserting insn reload after:
  457: r309:SI=r537:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 457:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 76:  (0) m  (1) re {*movsi_internal}
      Creating newreg=538 from oldreg=309, assigning class GENERAL_REGS to r538
   76: [frame:DI+0x10]=r538:SI
    Inserting insn reload before:
  458: r538:SI=r309:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 78:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=539 from oldreg=313, assigning class GENERAL_REGS to r539
   78: r539:SI=bswap(r539:SI)
      REG_DEAD r363:SI
      REG_EQUAL bswap([r357:DI+0x14])
    Inserting insn reload before:
  459: r539:SI=r363:SI
    Inserting insn reload after:
  460: r313:SI=r539:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 460:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 79:  (0) m  (1) re {*movsi_internal}
      Creating newreg=540 from oldreg=313, assigning class GENERAL_REGS to r540
   79: [frame:DI+0x14]=r540:SI
    Inserting insn reload before:
  461: r540:SI=r313:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 81:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=541 from oldreg=317, assigning class GENERAL_REGS to r541
   81: r541:SI=bswap(r541:SI)
      REG_DEAD r364:SI
      REG_EQUAL bswap([r357:DI+0x18])
    Inserting insn reload before:
  462: r541:SI=r364:SI
    Inserting insn reload after:
  463: r317:SI=r541:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 463:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 82:  (0) m  (1) re {*movsi_internal}
      Creating newreg=542 from oldreg=317, assigning class GENERAL_REGS to r542
   82: [frame:DI+0x18]=r542:SI
    Inserting insn reload before:
  464: r542:SI=r317:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 84:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=543 from oldreg=321, assigning class GENERAL_REGS to r543
   84: r543:SI=bswap(r543:SI)
      REG_DEAD r365:SI
      REG_EQUAL bswap([r357:DI+0x1c])
    Inserting insn reload before:
  465: r543:SI=r365:SI
    Inserting insn reload after:
  466: r321:SI=r543:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 466:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 85:  (0) m  (1) re {*movsi_internal}
      Creating newreg=544 from oldreg=321, assigning class GENERAL_REGS to r544
   85: [frame:DI+0x1c]=r544:SI
    Inserting insn reload before:
  467: r544:SI=r321:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 87:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=545 from oldreg=325, assigning class GENERAL_REGS to r545
   87: r545:SI=bswap(r545:SI)
      REG_DEAD r366:SI
      REG_EQUAL bswap([r357:DI+0x20])
    Inserting insn reload before:
  468: r545:SI=r366:SI
    Inserting insn reload after:
  469: r325:SI=r545:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 469:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 88:  (0) m  (1) re {*movsi_internal}
      Creating newreg=546 from oldreg=325, assigning class GENERAL_REGS to r546
   88: [frame:DI+0x20]=r546:SI
    Inserting insn reload before:
  470: r546:SI=r325:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 90:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=547 from oldreg=329, assigning class GENERAL_REGS to r547
   90: r547:SI=bswap(r547:SI)
      REG_DEAD r367:SI
      REG_EQUAL bswap([r357:DI+0x24])
    Inserting insn reload before:
  471: r547:SI=r367:SI
    Inserting insn reload after:
  472: r329:SI=r547:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 472:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 91:  (0) m  (1) re {*movsi_internal}
      Creating newreg=548 from oldreg=329, assigning class GENERAL_REGS to r548
   91: [frame:DI+0x24]=r548:SI
    Inserting insn reload before:
  473: r548:SI=r329:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 473:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 93:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=549 from oldreg=333, assigning class GENERAL_REGS to r549
   93: r549:SI=bswap(r549:SI)
      REG_DEAD r368:SI
      REG_EQUAL bswap([r357:DI+0x28])
    Inserting insn reload before:
  474: r549:SI=r368:SI
    Inserting insn reload after:
  475: r333:SI=r549:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 475:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 94:  (0) m  (1) re {*movsi_internal}
      Creating newreg=550 from oldreg=333, assigning class GENERAL_REGS to r550
   94: [frame:DI+0x28]=r550:SI
    Inserting insn reload before:
  476: r550:SI=r333:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 96:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=551 from oldreg=337, assigning class GENERAL_REGS to r551
   96: r551:SI=bswap(r551:SI)
      REG_DEAD r369:SI
      REG_EQUAL bswap([r357:DI+0x2c])
    Inserting insn reload before:
  477: r551:SI=r369:SI
    Inserting insn reload after:
  478: r337:SI=r551:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 478:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 97:  (0) m  (1) re {*movsi_internal}
      Creating newreg=552 from oldreg=337, assigning class GENERAL_REGS to r552
   97: [frame:DI+0x2c]=r552:SI
    Inserting insn reload before:
  479: r552:SI=r337:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 99:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=553 from oldreg=341, assigning class GENERAL_REGS to r553
   99: r553:SI=bswap(r553:SI)
      REG_DEAD r370:SI
      REG_EQUAL bswap([r357:DI+0x30])
    Inserting insn reload before:
  480: r553:SI=r370:SI
    Inserting insn reload after:
  481: r341:SI=r553:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 481:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 100:  (0) m  (1) re {*movsi_internal}
      Creating newreg=554 from oldreg=341, assigning class GENERAL_REGS to r554
  100: [frame:DI+0x30]=r554:SI
    Inserting insn reload before:
  482: r554:SI=r341:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 102:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=555 from oldreg=345, assigning class GENERAL_REGS to r555
  102: r555:SI=bswap(r555:SI)
      REG_DEAD r371:SI
      REG_EQUAL bswap([r357:DI+0x34])
    Inserting insn reload before:
  483: r555:SI=r371:SI
    Inserting insn reload after:
  484: r345:SI=r555:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 484:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 103:  (0) m  (1) re {*movsi_internal}
      Creating newreg=556 from oldreg=345, assigning class GENERAL_REGS to r556
  103: [frame:DI+0x34]=r556:SI
    Inserting insn reload before:
  485: r556:SI=r345:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 105:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=557 from oldreg=349, assigning class GENERAL_REGS to r557
  105: r557:SI=bswap(r557:SI)
      REG_DEAD r372:SI
      REG_EQUAL bswap([r357:DI+0x38])
    Inserting insn reload before:
  486: r557:SI=r372:SI
    Inserting insn reload after:
  487: r349:SI=r557:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 487:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 106:  (0) m  (1) re {*movsi_internal}
      Creating newreg=558 from oldreg=349, assigning class GENERAL_REGS to r558
  106: [frame:DI+0x38]=r558:SI
    Inserting insn reload before:
  488: r558:SI=r349:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 108:  (0) =r  (1) 0 {*bswapsi2}
      Creating newreg=559 from oldreg=353, assigning class GENERAL_REGS to r559
  108: r559:SI=bswap(r559:SI)
      REG_DEAD r373:SI
    Inserting insn reload before:
  489: r559:SI=r373:SI
    Inserting insn reload after:
  490: r353:SI=r559:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 490:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 109:  (0) m  (1) re {*movsi_internal}
      Creating newreg=560 from oldreg=353, assigning class GENERAL_REGS to r560
  109: [frame:DI+0x3c]=r560:SI
    Inserting insn reload before:
  491: r560:SI=r353:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =r  (1) g {*movsi_internal}
Changing address in insn 110 r356:DI+0x10 -- no change
Changing pseudo 356 in address of insn 110 on equiv [argp:DI+0x90]
      Creating newreg=561, assigning class GENERAL_REGS to address r561
	   Change to class INDEX_REGS for r561
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=562 from oldreg=128, assigning class GENERAL_REGS to r562
  110: r562:SI=[r561:DI+0x10]
    Inserting insn reload before:
  492: r561:DI=[argp:DI+0x90]
    Inserting insn reload after:
  493: r128:SI=r562:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 493:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 492:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 111 r356:DI+0x14 -- no change
Changing pseudo 356 in address of insn 111 on equiv [argp:DI+0x90]
      Creating newreg=563, assigning class GENERAL_REGS to address r563
	   Change to class INDEX_REGS for r563
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=564 from oldreg=129, assigning class GENERAL_REGS to r564
  111: r564:SI=[r563:DI+0x14]
    Inserting insn reload before:
  494: r563:DI=[argp:DI+0x90]
    Inserting insn reload after:
  495: r129:SI=r564:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 495:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 494:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 112 r356:DI+0x18 -- no change
Changing pseudo 356 in address of insn 112 on equiv [argp:DI+0x90]
      Creating newreg=565, assigning class GENERAL_REGS to address r565
	   Change to class INDEX_REGS for r565
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=566 from oldreg=130, assigning class GENERAL_REGS to r566
  112: r566:SI=[r565:DI+0x18]
    Inserting insn reload before:
  496: r565:DI=[argp:DI+0x90]
    Inserting insn reload after:
  497: r130:SI=r566:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 497:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 496:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 113 r356:DI+0x1c -- no change
Changing pseudo 356 in address of insn 113 on equiv [argp:DI+0x90]
      Creating newreg=567, assigning class GENERAL_REGS to address r567
	   Change to class INDEX_REGS for r567
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=568 from oldreg=131, assigning class GENERAL_REGS to r568
  113: r568:SI=[r567:DI+0x1c]
    Inserting insn reload before:
  498: r567:DI=[argp:DI+0x90]
    Inserting insn reload after:
  499: r131:SI=r568:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 499:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 498:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 114 r356:DI+0x20 -- no change
Changing pseudo 356 in address of insn 114 on equiv [argp:DI+0x90]
      Creating newreg=569, assigning class GENERAL_REGS to address r569
	   Change to class INDEX_REGS for r569
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=570 from oldreg=132, assigning class GENERAL_REGS to r570
  114: r570:SI=[r569:DI+0x20]
    Inserting insn reload before:
  500: r569:DI=[argp:DI+0x90]
    Inserting insn reload after:
  501: r132:SI=r570:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 501:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 500:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 115 r356:DI+0x24 -- no change
Changing pseudo 356 in address of insn 115 on equiv [argp:DI+0x90]
      Creating newreg=571, assigning class GENERAL_REGS to address r571
	   Change to class INDEX_REGS for r571
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=572 from oldreg=133, assigning class GENERAL_REGS to r572
  115: r572:SI=[r571:DI+0x24]
    Inserting insn reload before:
  502: r571:DI=[argp:DI+0x90]
    Inserting insn reload after:
  503: r133:SI=r572:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 503:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 502:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 116 r356:DI+0x28 -- no change
Changing pseudo 356 in address of insn 116 on equiv [argp:DI+0x90]
      Creating newreg=573, assigning class GENERAL_REGS to address r573
	   Change to class INDEX_REGS for r573
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=574 from oldreg=134, assigning class GENERAL_REGS to r574
  116: r574:SI=[r573:DI+0x28]
    Inserting insn reload before:
  504: r573:DI=[argp:DI+0x90]
    Inserting insn reload after:
  505: r134:SI=r574:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 505:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 504:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 117 r356:DI+0x2c -- no change
Changing pseudo 356 in address of insn 117 on equiv [argp:DI+0x90]
      Creating newreg=575, assigning class GENERAL_REGS to address r575
	   Change to class INDEX_REGS for r575
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=576 from oldreg=135, assigning class GENERAL_REGS to r576
  117: r576:SI=[r575:DI+0x2c]
    Inserting insn reload before:
  506: r575:DI=[argp:DI+0x90]
    Inserting insn reload after:
  507: r135:SI=r576:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 507:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 506:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 118 r356:DI+0x78 -- no change
Changing pseudo 356 in address of insn 118 on equiv [argp:DI+0x90]
      Creating newreg=577, assigning class GENERAL_REGS to address r577
	   Change to class INDEX_REGS for r577
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=578 from oldreg=136, assigning class GENERAL_REGS to r578
  118: r578:SI=[r577:DI+0x78]
    Inserting insn reload before:
  508: r577:DI=[argp:DI+0x90]
    Inserting insn reload after:
  509: r136:SI=r578:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 509:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 508:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 119:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=579 from oldreg=254, assigning class GENERAL_REGS to r579
  119: {r579:SI=r579:SI^0x243f6a88;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  510: r579:SI=r136:SI
    Inserting insn reload after:
  511: r254:SI=r579:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (0) =r  (1) g {*movsi_internal}
Changing address in insn 120 r356:DI+0x7c -- no change
Changing pseudo 356 in address of insn 120 on equiv [argp:DI+0x90]
      Creating newreg=580, assigning class GENERAL_REGS to address r580
	   Change to class INDEX_REGS for r580
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=581 from oldreg=137, assigning class GENERAL_REGS to r581
  120: r581:SI=[r580:DI+0x7c]
    Inserting insn reload before:
  512: r580:DI=[argp:DI+0x90]
    Inserting insn reload after:
  513: r137:SI=r581:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 513:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 512:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=0,overall=15,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=1,overall=15,losers=2,rld_nregs=2
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=582 from oldreg=274, assigning class GENERAL_REGS to r582
  121: {r582:SI=r582:SI^0xffffffff85a308d3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  514: r582:SI=r137:SI
    Inserting insn reload after:
  515: r274:SI=r582:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 515:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (0) =r  (1) g {*movsi_internal}
Changing address in insn 122 r356:DI+0x80 -- no change
Changing pseudo 356 in address of insn 122 on equiv [argp:DI+0x90]
      Creating newreg=583, assigning class GENERAL_REGS to address r583
	   Change to class INDEX_REGS for r583
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=584 from oldreg=138, assigning class GENERAL_REGS to r584
  122: r584:SI=[r583:DI+0x80]
    Inserting insn reload before:
  516: r583:DI=[argp:DI+0x90]
    Inserting insn reload after:
  517: r138:SI=r584:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 517:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 516:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=0,overall=15,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=1,overall=15,losers=2,rld_nregs=2
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=585 from oldreg=220, assigning class GENERAL_REGS to r585
  123: {r585:SI=r585:SI^0x13198a2e;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  518: r585:SI=r138:SI
    Inserting insn reload after:
  519: r220:SI=r585:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 519:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =r  (1) g {*movsi_internal}
Changing address in insn 124 r356:DI+0x84 -- no change
Changing pseudo 356 in address of insn 124 on equiv [argp:DI+0x90]
      Creating newreg=586, assigning class GENERAL_REGS to address r586
	   Change to class INDEX_REGS for r586
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=587 from oldreg=139, assigning class GENERAL_REGS to r587
  124: r587:SI=[r586:DI+0x84]
    Inserting insn reload before:
  520: r586:DI=[argp:DI+0x90]
    Inserting insn reload after:
  521: r139:SI=r587:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 521:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 520:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=0,overall=15,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=1,overall=15,losers=2,rld_nregs=2
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=588 from oldreg=206, assigning class GENERAL_REGS to r588
  125: {r588:SI=r588:SI^0x3707344;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  522: r588:SI=r139:SI
    Inserting insn reload after:
  523: r206:SI=r588:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 523:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =r  (1) g {*movsi_internal}
Changing address in insn 126 r356:DI+0xc -- no change
Changing pseudo 356 in address of insn 126 on equiv [argp:DI+0x90]
      Creating newreg=589, assigning class GENERAL_REGS to address r589
	   Change to class INDEX_REGS for r589
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) ?mr {*cmpsi_ccno_1}
  126: flags:CCZ=cmp([r589:DI+0xc],0)
    Inserting insn reload before:
  524: r589:DI=[argp:DI+0x90]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 524:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 129 r356:DI+0x30 -- no change
Changing pseudo 356 in address of insn 129 on equiv [argp:DI+0x90]
      Creating newreg=590, assigning class GENERAL_REGS to address r590
	   Change to class INDEX_REGS for r590
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
  129: r141:SI=[r590:DI+0x30]
      REG_EQUIV [r356:DI+0x30]
    Inserting insn reload before:
  525: r590:DI=[argp:DI+0x90]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 525:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=591 from oldreg=235, assigning class GENERAL_REGS to r591
  130: {r591:SI=r591:SI^0xffffffffa4093822;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  526: r591:SI=r141:SI
    Inserting insn reload after:
  527: r235:SI=r591:SI

            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=592 from oldreg=252, assigning class GENERAL_REGS to r592
  131: {r592:SI=r592:SI^0x299f31d0;clobber flags:CC;}
      REG_DEAD r141:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  528: r592:SI=r141:SI
    Inserting insn reload after:
  529: r252:SI=r592:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 529:  (0) m  (1) re {*movsi_internal}
Changing address in insn 132 r356:DI+0x34 -- no change
Changing pseudo 356 in address of insn 132 on equiv [argp:DI+0x90]
      Creating newreg=593, assigning class GENERAL_REGS to address r593
	   Change to class INDEX_REGS for r593
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
  132: r142:SI=[r593:DI+0x34]
      REG_EQUIV [r356:DI+0x34]
    Inserting insn reload before:
  530: r593:DI=[argp:DI+0x90]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 530:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=594 from oldreg=273, assigning class GENERAL_REGS to r594
  133: {r594:SI=r594:SI^0x82efa98;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  531: r594:SI=r142:SI
    Inserting insn reload after:
  532: r273:SI=r594:SI

            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=595 from oldreg=219, assigning class GENERAL_REGS to r595
  134: {r595:SI=r595:SI^0xffffffffec4e6c89;clobber flags:CC;}
      REG_DEAD r142:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  533: r595:SI=r142:SI
    Inserting insn reload after:
  534: r219:SI=r595:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 534:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 137:  (0) r  (1) i {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=4,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
      Creating newreg=596 from oldreg=128, assigning class GENERAL_REGS to r596
   35: r217:SI=r596:SI
    Inserting insn reload before:
  535: r596:SI=r128:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 535:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=4,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
      Creating newreg=597 from oldreg=129, assigning class GENERAL_REGS to r597
   36: r233:SI=r597:SI
    Inserting insn reload before:
  536: r597:SI=r129:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 536:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=4,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
      Creating newreg=598 from oldreg=134, assigning class GENERAL_REGS to r598
   41: r238:SI=r598:SI
    Inserting insn reload before:
  537: r598:SI=r134:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=4,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
      Creating newreg=599 from oldreg=135, assigning class GENERAL_REGS to r599
   42: r256:SI=r599:SI
    Inserting insn reload before:
  538: r599:SI=r135:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 426:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 428:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 436:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=600 from oldreg=296, assigning class GENERAL_REGS to r600
      Making reload reg 600 for reg 296 optional
  139: {r374:SI=r526:SI^r600:SI;clobber flags:CC;}
      REG_DEAD r526:SI
      REG_DEAD r296:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  539: r600:SI=r296:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 539:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) r  (2) le {*addsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=601 from oldreg=217, assigning class GENERAL_REGS to r601
      Making reload reg 601 for reg 217 optional
  141: {r144:SI=r375:SI+r601:SI;clobber flags:CC;}
      REG_DEAD r375:SI
      REG_DEAD r217:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  540: r601:SI=r217:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 540:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 142
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=602 from oldreg=376, assigning class GENERAL_REGS to r602
  142: {r602:SI=r602:SI^r144:SI;clobber flags:CC;}
      REG_DEAD r518:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  541: r602:SI=r518:SI
    Inserting insn reload after:
  542: r376:SI=r602:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =rm  (1) 0  (2) cI {*rotlsi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 144
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 145
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 147
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 152:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=603 from oldreg=155, assigning class GENERAL_REGS to r603
  152: {r603:SI=r147:SI+r154:SI;clobber flags:CC;}
      REG_DEAD r147:SI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  543: r155:SI=r603:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 543:  (0) m  (1) re {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=604 from oldreg=155, assigning class GENERAL_REGS to r604
      Making reload reg 604 for reg 155 optional
  153: {r381:SI=r149:SI^r604:SI;clobber flags:CC;}
      REG_DEAD r149:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  544: r604:SI=r155:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 154:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
      Creating newreg=605 from oldreg=157, assigning class GENERAL_REGS to r605
  154: {r605:SI=r605:SI>->0x7;clobber flags:CC;}
      REG_DEAD r381:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  545: r605:SI=r381:SI
    Inserting insn reload after:
  546: r157:SI=r605:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 546:  (0) m  (1) re {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=606 from oldreg=304, assigning class GENERAL_REGS to r606
      Making reload reg 606 for reg 304 optional
  155: {r382:SI=r529:SI^r606:SI;clobber flags:CC;}
      REG_DEAD r529:SI
      REG_DEAD r304:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  547: r606:SI=r304:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*addsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=607 from oldreg=233, assigning class GENERAL_REGS to r607
      Making reload reg 607 for reg 233 optional
  157: {r160:SI=r383:SI+r607:SI;clobber flags:CC;}
      REG_DEAD r383:SI
      REG_DEAD r233:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  548: r607:SI=r233:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 548:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 158
	 Choosing alt 0 in insn 158:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =rm  (1) 0  (2) cI {*rotlsi3_1}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 160
	 Choosing alt 0 in insn 160:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=608 from oldreg=163, assigning class GENERAL_REGS to r608
  160: {r608:SI=r608:SI+r162:SI;clobber flags:CC;}
      REG_DEAD r274:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  549: r608:SI=r274:SI
    Inserting insn reload after:
  550: r163:SI=r608:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 549:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 161
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=609 from oldreg=385, assigning class GENERAL_REGS to r609
  161: {r609:SI=r609:SI^r163:SI;clobber flags:CC;}
      REG_DEAD r517:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  551: r609:SI=r517:SI
    Inserting insn reload after:
  552: r385:SI=r609:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 163
	 Choosing alt 0 in insn 163:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=610 from oldreg=305, assigning class GENERAL_REGS to r610
      Making reload reg 610 for reg 305 optional
  163: {r386:SI=r530:SI^r610:SI;clobber flags:CC;}
      REG_DEAD r530:SI
      REG_DEAD r305:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  553: r610:SI=r305:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=611 from oldreg=171, assigning class GENERAL_REGS to r611
  168: {r611:SI=r163:SI+r170:SI;clobber flags:CC;}
      REG_DEAD r163:SI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  554: r171:SI=r611:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 554:  (0) m  (1) re {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=612 from oldreg=171, assigning class GENERAL_REGS to r612
      Making reload reg 612 for reg 171 optional
  169: {r389:SI=r165:SI^r612:SI;clobber flags:CC;}
      REG_DEAD r165:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  555: r612:SI=r171:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 555:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 171:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=613 from oldreg=390, assigning class GENERAL_REGS to r613
      Creating newreg=614 from oldreg=312, assigning class GENERAL_REGS to r614
      Making reload reg 614 for reg 312 optional
  171: {r613:SI=r613:SI^r614:SI;clobber flags:CC;}
      REG_DEAD r312:SI
      REG_DEAD r309:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  556: r613:SI=r309:SI
  558: r614:SI=r312:SI
    Inserting insn reload after:
  557: r390:SI=r613:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 172:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=615 from oldreg=238, assigning class GENERAL_REGS to r615
      Making reload reg 615 for reg 238 optional
  172: {r391:SI=r390:SI+r615:SI;clobber flags:CC;}
      REG_DEAD r390:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  559: r615:SI=r238:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=616 from oldreg=519, assigning class GENERAL_REGS to r616
      Making reload reg 616 for reg 519 optional
  173: {r176:SI=r391:SI+r616:SI;clobber flags:CC;}
      REG_DEAD r519:SI
      REG_DEAD r391:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  560: r616:SI=r519:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 174
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=617 from oldreg=392, assigning class GENERAL_REGS to r617
  174: {r617:SI=r617:SI^r176:SI;clobber flags:CC;}
      REG_DEAD r523:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  561: r617:SI=r523:SI
    Inserting insn reload after:
  562: r392:SI=r617:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =rm  (1) 0  (2) cI {*rotlsi3_1}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 176
	 Choosing alt 0 in insn 176:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=618 from oldreg=179, assigning class GENERAL_REGS to r618
  176: {r618:SI=r618:SI+r178:SI;clobber flags:CC;}
      REG_DEAD r220:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  563: r618:SI=r220:SI
    Inserting insn reload after:
  564: r179:SI=r618:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 563:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 177
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=619 from oldreg=393, assigning class GENERAL_REGS to r619
  177: {r619:SI=r619:SI^r179:SI;clobber flags:CC;}
      REG_DEAD r238:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  565: r619:SI=r238:SI
    Inserting insn reload after:
  566: r393:SI=r619:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=620 from oldreg=394, assigning class GENERAL_REGS to r620
      Creating newreg=621 from oldreg=531, assigning class GENERAL_REGS to r621
      Making reload reg 621 for reg 531 optional
  179: {r620:SI=r620:SI^r621:SI;clobber flags:CC;}
      REG_DEAD r531:SI
      REG_DEAD r313:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  567: r620:SI=r313:SI
  569: r621:SI=r531:SI
    Inserting insn reload after:
  568: r394:SI=r620:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 569:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 182:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=622 from oldreg=397, assigning class GENERAL_REGS to r622
  185: {r622:SI=r622:SI^r187:SI;clobber flags:CC;}
      REG_DEAD r181:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  570: r622:SI=r181:SI
    Inserting insn reload after:
  571: r397:SI=r622:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=623 from oldreg=398, assigning class GENERAL_REGS to r623
      Creating newreg=624 from oldreg=320, assigning class GENERAL_REGS to r624
      Making reload reg 624 for reg 320 optional
  187: {r623:SI=r623:SI^r624:SI;clobber flags:CC;}
      REG_DEAD r320:SI
      REG_DEAD r317:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  572: r623:SI=r317:SI
  574: r624:SI=r320:SI
    Inserting insn reload after:
  573: r398:SI=r623:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 572:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 574:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 188:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=625 from oldreg=256, assigning class GENERAL_REGS to r625
      Making reload reg 625 for reg 256 optional
  188: {r399:SI=r398:SI+r625:SI;clobber flags:CC;}
      REG_DEAD r398:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  575: r625:SI=r256:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 575:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=626 from oldreg=522, assigning class GENERAL_REGS to r626
      Making reload reg 626 for reg 522 optional
  189: {r192:SI=r399:SI+r626:SI;clobber flags:CC;}
      REG_DEAD r522:SI
      REG_DEAD r399:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  576: r626:SI=r522:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=627 from oldreg=400, assigning class GENERAL_REGS to r627
  190: {r627:SI=r627:SI^r192:SI;clobber flags:CC;}
      REG_DEAD r219:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  577: r627:SI=r219:SI
    Inserting insn reload after:
  578: r400:SI=r627:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =rm  (1) 0  (2) cI {*rotlsi3_1}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 192
	 Choosing alt 0 in insn 192:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=628 from oldreg=195, assigning class GENERAL_REGS to r628
  192: {r628:SI=r628:SI+r194:SI;clobber flags:CC;}
      REG_DEAD r206:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  579: r628:SI=r206:SI
    Inserting insn reload after:
  580: r195:SI=r628:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 193
	 Choosing alt 0 in insn 193:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=629 from oldreg=401, assigning class GENERAL_REGS to r629
  193: {r629:SI=r629:SI^r195:SI;clobber flags:CC;}
      REG_DEAD r256:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  581: r629:SI=r256:SI
    Inserting insn reload after:
  582: r401:SI=r629:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 581:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=630 from oldreg=402, assigning class GENERAL_REGS to r630
      Creating newreg=631 from oldreg=322, assigning class GENERAL_REGS to r631
      Making reload reg 631 for reg 322 optional
  195: {r630:SI=r630:SI^r631:SI;clobber flags:CC;}
      REG_DEAD r322:SI
      REG_DEAD r321:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  583: r630:SI=r321:SI
  585: r631:SI=r322:SI
    Inserting insn reload after:
  584: r402:SI=r630:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 583:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 585:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 196
	 Choosing alt 0 in insn 196:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=632 from oldreg=406, assigning class GENERAL_REGS to r632
      Creating newreg=633 from oldreg=328, assigning class GENERAL_REGS to r633
      Making reload reg 633 for reg 328 optional
  203: {r632:SI=r632:SI^r633:SI;clobber flags:CC;}
      REG_DEAD r328:SI
      REG_DEAD r325:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  586: r632:SI=r325:SI
  588: r633:SI=r328:SI
    Inserting insn reload after:
  587: r406:SI=r632:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 588:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 204
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 206:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =rm  (1) 0  (2) cI {*rotlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 209:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=634 from oldreg=410, assigning class GENERAL_REGS to r634
      Creating newreg=635 from oldreg=330, assigning class GENERAL_REGS to r635
      Making reload reg 635 for reg 330 optional
  211: {r634:SI=r634:SI^r635:SI;clobber flags:CC;}
      REG_DEAD r330:SI
      REG_DEAD r329:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  589: r634:SI=r329:SI
  591: r635:SI=r330:SI
    Inserting insn reload after:
  590: r410:SI=r634:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 212
	 Choosing alt 0 in insn 212:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 213:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=636 from oldreg=217, assigning class GENERAL_REGS to r636
  213: {r636:SI=r411:SI+r214:SI;clobber flags:CC;}
      REG_DEAD r411:SI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  592: r217:SI=r636:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 592:  (0) m  (1) re {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=637 from oldreg=217, assigning class GENERAL_REGS to r637
      Making reload reg 637 for reg 217 optional
  214: {r412:SI=r211:SI^r637:SI;clobber flags:CC;}
      REG_DEAD r211:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  593: r637:SI=r217:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 593:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 215:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
      Creating newreg=638 from oldreg=219, assigning class GENERAL_REGS to r638
  215: {r638:SI=r638:SI>->0x8;clobber flags:CC;}
      REG_DEAD r412:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  594: r638:SI=r412:SI
    Inserting insn reload after:
  595: r219:SI=r638:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 595:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=13,losers=2 -- refuse
	 Choosing alt 0 in insn 216:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=639 from oldreg=220, assigning class GENERAL_REGS to r639
      Creating newreg=640 from oldreg=219, assigning class GENERAL_REGS to r640
      Making reload reg 640 for reg 219 optional
  216: {r639:SI=r639:SI+r640:SI;clobber flags:CC;}
      REG_DEAD r212:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  596: r639:SI=r212:SI
  598: r640:SI=r219:SI
    Inserting insn reload after:
  597: r220:SI=r639:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 597:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 598:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 217:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=641 from oldreg=220, assigning class GENERAL_REGS to r641
      Making reload reg 641 for reg 220 optional
  217: {r413:SI=r214:SI^r641:SI;clobber flags:CC;}
      REG_DEAD r214:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  599: r641:SI=r220:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 218:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
      Creating newreg=642 from oldreg=517, assigning class GENERAL_REGS to r642
  218: {r642:SI=r642:SI>->0x7;clobber flags:CC;}
      REG_DEAD r413:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  600: r642:SI=r413:SI
    Inserting insn reload after:
  601: r517:SI=r642:SI

            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 219:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=643 from oldreg=414, assigning class GENERAL_REGS to r643
      Creating newreg=644 from oldreg=336, assigning class GENERAL_REGS to r644
      Making reload reg 644 for reg 336 optional
  219: {r643:SI=r643:SI^r644:SI;clobber flags:CC;}
      REG_DEAD r336:SI
      REG_DEAD r333:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  602: r643:SI=r333:SI
  604: r644:SI=r336:SI
    Inserting insn reload after:
  603: r414:SI=r643:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 604:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 220
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 222:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =rm  (1) 0  (2) cI {*rotlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 225:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=645 from oldreg=418, assigning class GENERAL_REGS to r645
      Creating newreg=646 from oldreg=338, assigning class GENERAL_REGS to r646
      Making reload reg 646 for reg 338 optional
  227: {r645:SI=r645:SI^r646:SI;clobber flags:CC;}
      REG_DEAD r338:SI
      REG_DEAD r337:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  605: r645:SI=r337:SI
  607: r646:SI=r338:SI
    Inserting insn reload after:
  606: r418:SI=r645:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 605:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 228
	 Choosing alt 0 in insn 228:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 229:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=647 from oldreg=233, assigning class GENERAL_REGS to r647
  229: {r647:SI=r419:SI+r230:SI;clobber flags:CC;}
      REG_DEAD r419:SI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  608: r233:SI=r647:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 608:  (0) m  (1) re {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 230:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=648 from oldreg=233, assigning class GENERAL_REGS to r648
      Making reload reg 648 for reg 233 optional
  230: {r420:SI=r227:SI^r648:SI;clobber flags:CC;}
      REG_DEAD r227:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  609: r648:SI=r233:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 609:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 231:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
      Creating newreg=649 from oldreg=518, assigning class GENERAL_REGS to r649
  231: {r649:SI=r649:SI>->0x8;clobber flags:CC;}
      REG_DEAD r420:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  610: r649:SI=r420:SI
    Inserting insn reload after:
  611: r518:SI=r649:SI

            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 232:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=650 from oldreg=206, assigning class GENERAL_REGS to r650
  232: {r650:SI=r228:SI+r518:SI;clobber flags:CC;}
      REG_DEAD r228:SI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  612: r206:SI=r650:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 612:  (0) m  (1) re {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 233:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=651 from oldreg=206, assigning class GENERAL_REGS to r651
      Making reload reg 651 for reg 206 optional
  233: {r421:SI=r230:SI^r651:SI;clobber flags:CC;}
      REG_DEAD r230:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  613: r651:SI=r206:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 234:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
      Creating newreg=652 from oldreg=238, assigning class GENERAL_REGS to r652
  234: {r652:SI=r652:SI>->0x7;clobber flags:CC;}
      REG_DEAD r421:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  614: r652:SI=r421:SI
    Inserting insn reload after:
  615: r238:SI=r652:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 615:  (0) m  (1) re {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=653 from oldreg=422, assigning class GENERAL_REGS to r653
      Creating newreg=654 from oldreg=344, assigning class GENERAL_REGS to r654
      Making reload reg 654 for reg 344 optional
  235: {r653:SI=r653:SI^r654:SI;clobber flags:CC;}
      REG_DEAD r344:SI
      REG_DEAD r341:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  616: r653:SI=r341:SI
  618: r654:SI=r344:SI
    Inserting insn reload after:
  617: r422:SI=r653:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 616:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 618:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 238:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =rm  (1) 0  (2) cI {*rotlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=6,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 240:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=655 from oldreg=155, assigning class GENERAL_REGS to r655
  240: {r244:SI=r655:SI+r243:SI;clobber flags:CC;}
      REG_DEAD r155:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  619: r655:SI=r155:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 241:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=656 from oldreg=426, assigning class GENERAL_REGS to r656
      Creating newreg=657 from oldreg=346, assigning class GENERAL_REGS to r657
      Making reload reg 657 for reg 346 optional
  243: {r656:SI=r656:SI^r657:SI;clobber flags:CC;}
      REG_DEAD r346:SI
      REG_DEAD r345:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  620: r656:SI=r345:SI
  622: r657:SI=r346:SI
    Inserting insn reload after:
  621: r426:SI=r656:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 244
	 Choosing alt 0 in insn 244:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 245:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=658 from oldreg=519, assigning class GENERAL_REGS to r658
  245: {r658:SI=r427:SI+r247:SI;clobber flags:CC;}
      REG_DEAD r427:SI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  623: r519:SI=r658:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 623:  (0) m  (1) re {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=659 from oldreg=519, assigning class GENERAL_REGS to r659
      Making reload reg 659 for reg 519 optional
  246: {r428:SI=r243:SI^r659:SI;clobber flags:CC;}
      REG_DEAD r243:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  624: r659:SI=r519:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 624:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 249:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            0 Non pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 250:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
      Creating newreg=660 from oldreg=256, assigning class GENERAL_REGS to r660
  250: {r660:SI=r660:SI>->0x7;clobber flags:CC;}
      REG_DEAD r429:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  625: r660:SI=r429:SI
    Inserting insn reload after:
  626: r256:SI=r660:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 626:  (0) m  (1) re {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=661 from oldreg=430, assigning class GENERAL_REGS to r661
      Creating newreg=662 from oldreg=352, assigning class GENERAL_REGS to r662
      Making reload reg 662 for reg 352 optional
  251: {r661:SI=r661:SI^r662:SI;clobber flags:CC;}
      REG_DEAD r352:SI
      REG_DEAD r349:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  627: r661:SI=r349:SI
  629: r662:SI=r352:SI
    Inserting insn reload after:
  628: r430:SI=r661:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 629:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 252
	 Choosing alt 0 in insn 252:  (0) =r  (1) %0  (2) rme {*addsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 253:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=663 from oldreg=157, assigning class GENERAL_REGS to r663
      Making reload reg 663 for reg 157 optional
  253: {r260:SI=r431:SI+r663:SI;clobber flags:CC;}
      REG_DEAD r431:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  630: r663:SI=r157:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 630:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=664 from oldreg=432, assigning class GENERAL_REGS to r664
  254: {r664:SI=r664:SI^r260:SI;clobber flags:CC;}
      REG_DEAD r186:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  631: r664:SI=r186:SI
    Inserting insn reload after:
  632: r432:SI=r664:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =rm  (1) 0  (2) cI {*rotlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=6,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 256:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=665 from oldreg=171, assigning class GENERAL_REGS to r665
  256: {r264:SI=r665:SI+r262:SI;clobber flags:CC;}
      REG_DEAD r171:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  633: r665:SI=r171:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 257:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=666 from oldreg=433, assigning class GENERAL_REGS to r666
  257: {r666:SI=r666:SI^r264:SI;clobber flags:CC;}
      REG_DEAD r157:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  634: r666:SI=r157:SI
    Inserting insn reload after:
  635: r433:SI=r666:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 634:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 259:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=667 from oldreg=434, assigning class GENERAL_REGS to r667
      Creating newreg=668 from oldreg=354, assigning class GENERAL_REGS to r668
      Making reload reg 668 for reg 354 optional
  259: {r667:SI=r667:SI^r668:SI;clobber flags:CC;}
      REG_DEAD r354:SI
      REG_DEAD r353:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  636: r667:SI=r353:SI
  638: r668:SI=r354:SI
    Inserting insn reload after:
  637: r434:SI=r667:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 636:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 638:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 260
	 Choosing alt 0 in insn 260:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 261:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=669 from oldreg=522, assigning class GENERAL_REGS to r669
  261: {r669:SI=r435:SI+r266:SI;clobber flags:CC;}
      REG_DEAD r435:SI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  639: r522:SI=r669:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 639:  (0) m  (1) re {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 262:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=670 from oldreg=522, assigning class GENERAL_REGS to r670
      Making reload reg 670 for reg 522 optional
  262: {r436:SI=r262:SI^r670:SI;clobber flags:CC;}
      REG_DEAD r262:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  640: r670:SI=r522:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 640:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 264:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=671 from oldreg=274, assigning class GENERAL_REGS to r671
  264: {r671:SI=r264:SI+r523:SI;clobber flags:CC;}
      REG_DEAD r264:SI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  641: r274:SI=r671:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 641:  (0) m  (1) re {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 265:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=672 from oldreg=274, assigning class GENERAL_REGS to r672
      Making reload reg 672 for reg 274 optional
  265: {r437:SI=r266:SI^r672:SI;clobber flags:CC;}
      REG_DEAD r266:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  642: r672:SI=r274:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 642:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =rm  (1) 0  (2) cI {*rotrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 268:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 269:  (0) rm  (1) 0  (2) re {*addsi_2}
      Creating newreg=673 from oldreg=113, assigning class GENERAL_REGS to r673
      Making reload reg 673 for reg 113 optional
  269: {flags:CCZ=cmp(r673:SI-0x1,0);r673:SI=r673:SI-0x1;}
    Inserting insn reload before:
  643: r673:SI=r113:SI
    Inserting insn reload after:
  644: r113:SI=r673:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 644:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 643:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =r  (1) qm {zero_extendqidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 277:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 279:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=674 from oldreg=296, assigning class GENERAL_REGS to r674
  279: r674:SI=[r440:DI*0x4+r439:DI]
      REG_EQUAL [r440:DI*0x4+`c32']
    Inserting insn reload after:
  645: r296:SI=r674:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 645:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =r  (1) qm {zero_extendqidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 291:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=675 from oldreg=304, assigning class GENERAL_REGS to r675
  291: r675:SI=[r446:DI*0x4+r439:DI]
      REG_EQUAL [r446:DI*0x4+`c32']
    Inserting insn reload after:
  646: r304:SI=r675:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 646:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 293:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=676 from oldreg=305, assigning class GENERAL_REGS to r676
  293: r676:SI=[r446:DI*0x4+frame:DI]
      REG_DEAD r446:DI
    Inserting insn reload after:
  647: r305:SI=r676:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 647:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 299:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=677 from oldreg=309, assigning class GENERAL_REGS to r677
  299: r677:SI=[r450:DI*0x4+frame:DI]
    Inserting insn reload after:
  648: r309:SI=r677:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 648:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 303:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=678 from oldreg=312, assigning class GENERAL_REGS to r678
  303: r678:SI=[r452:DI*0x4+r439:DI]
      REG_EQUAL [r452:DI*0x4+`c32']
    Inserting insn reload after:
  649: r312:SI=r678:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 649:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 305:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=679 from oldreg=313, assigning class GENERAL_REGS to r679
  305: r679:SI=[r452:DI*0x4+frame:DI]
      REG_DEAD r452:DI
    Inserting insn reload after:
  650: r313:SI=r679:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 650:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 308:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=680 from oldreg=531, assigning class GENERAL_REGS to r680
  308: r680:SI=[r450:DI*0x4+r439:DI]
      REG_DEAD r450:DI
      REG_EQUAL [r450:DI*0x4+`c32']
    Inserting insn reload after:
  651: r531:SI=r680:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 651:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 311:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=681 from oldreg=317, assigning class GENERAL_REGS to r681
  311: r681:SI=[r456:DI*0x4+frame:DI]
    Inserting insn reload after:
  652: r317:SI=r681:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 652:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 315:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=682 from oldreg=320, assigning class GENERAL_REGS to r682
  315: r682:SI=[r458:DI*0x4+r439:DI]
      REG_EQUAL [r458:DI*0x4+`c32']
    Inserting insn reload after:
  653: r320:SI=r682:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 653:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 317:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=683 from oldreg=321, assigning class GENERAL_REGS to r683
  317: r683:SI=[r458:DI*0x4+frame:DI]
      REG_DEAD r458:DI
    Inserting insn reload after:
  654: r321:SI=r683:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 654:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 320:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=684 from oldreg=322, assigning class GENERAL_REGS to r684
  320: r684:SI=[r456:DI*0x4+r439:DI]
      REG_DEAD r456:DI
      REG_EQUAL [r456:DI*0x4+`c32']
    Inserting insn reload after:
  655: r322:SI=r684:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 655:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 323:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=685 from oldreg=325, assigning class GENERAL_REGS to r685
  323: r685:SI=[r462:DI*0x4+frame:DI]
    Inserting insn reload after:
  656: r325:SI=r685:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 656:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 327:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=686 from oldreg=328, assigning class GENERAL_REGS to r686
  327: r686:SI=[r464:DI*0x4+r439:DI]
      REG_EQUAL [r464:DI*0x4+`c32']
    Inserting insn reload after:
  657: r328:SI=r686:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 657:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=687 from oldreg=329, assigning class GENERAL_REGS to r687
  329: r687:SI=[r464:DI*0x4+frame:DI]
      REG_DEAD r464:DI
    Inserting insn reload after:
  658: r329:SI=r687:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 658:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 332:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=688 from oldreg=330, assigning class GENERAL_REGS to r688
  332: r688:SI=[r462:DI*0x4+r439:DI]
      REG_DEAD r462:DI
      REG_EQUAL [r462:DI*0x4+`c32']
    Inserting insn reload after:
  659: r330:SI=r688:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 659:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 335:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=689 from oldreg=333, assigning class GENERAL_REGS to r689
  335: r689:SI=[r468:DI*0x4+frame:DI]
    Inserting insn reload after:
  660: r333:SI=r689:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 660:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 339:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=690 from oldreg=336, assigning class GENERAL_REGS to r690
  339: r690:SI=[r470:DI*0x4+r439:DI]
      REG_EQUAL [r470:DI*0x4+`c32']
    Inserting insn reload after:
  661: r336:SI=r690:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 661:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 341:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=691 from oldreg=337, assigning class GENERAL_REGS to r691
  341: r691:SI=[r470:DI*0x4+frame:DI]
      REG_DEAD r470:DI
    Inserting insn reload after:
  662: r337:SI=r691:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 662:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 344:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=692 from oldreg=338, assigning class GENERAL_REGS to r692
  344: r692:SI=[r468:DI*0x4+r439:DI]
      REG_DEAD r468:DI
      REG_EQUAL [r468:DI*0x4+`c32']
    Inserting insn reload after:
  663: r338:SI=r692:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 663:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 347:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=693 from oldreg=341, assigning class GENERAL_REGS to r693
  347: r693:SI=[r474:DI*0x4+frame:DI]
    Inserting insn reload after:
  664: r341:SI=r693:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 664:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 351:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=694 from oldreg=344, assigning class GENERAL_REGS to r694
  351: r694:SI=[r476:DI*0x4+r439:DI]
      REG_EQUAL [r476:DI*0x4+`c32']
    Inserting insn reload after:
  665: r344:SI=r694:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 665:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 353:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=695 from oldreg=345, assigning class GENERAL_REGS to r695
  353: r695:SI=[r476:DI*0x4+frame:DI]
      REG_DEAD r476:DI
    Inserting insn reload after:
  666: r345:SI=r695:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 666:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 356:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=696 from oldreg=346, assigning class GENERAL_REGS to r696
  356: r696:SI=[r474:DI*0x4+r439:DI]
      REG_DEAD r474:DI
      REG_EQUAL [r474:DI*0x4+`c32']
    Inserting insn reload after:
  667: r346:SI=r696:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 667:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 359:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=697 from oldreg=349, assigning class GENERAL_REGS to r697
  359: r697:SI=[r480:DI*0x4+frame:DI]
    Inserting insn reload after:
  668: r349:SI=r697:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 668:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 363:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=698 from oldreg=352, assigning class GENERAL_REGS to r698
  363: r698:SI=[r482:DI*0x4+r439:DI]
      REG_EQUAL [r482:DI*0x4+`c32']
    Inserting insn reload after:
  669: r352:SI=r698:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 669:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 365:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=699 from oldreg=353, assigning class GENERAL_REGS to r699
  365: r699:SI=[r482:DI*0x4+frame:DI]
      REG_DEAD r482:DI
    Inserting insn reload after:
  670: r353:SI=r699:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 670:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 368:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=700 from oldreg=354, assigning class GENERAL_REGS to r700
  368: r700:SI=[r480:DI*0x4+r439:DI]
      REG_DEAD r480:DI
      REG_DEAD r439:DI
      REG_EQUAL [r480:DI*0x4+`c32']
    Inserting insn reload after:
  671: r354:SI=r700:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 671:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 442:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=24,losers=4,rld_nregs=2
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
          alt=3,overall=24,losers=4,rld_nregs=2
            1 Spill pseudo into memory: reject+=3
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=26,losers=4 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=6: Bad operand -- refuse
	 Choosing alt 0 in insn 375:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=701 from oldreg=487, assigning class SSE_REGS to r701
      Creating newreg=702 from oldreg=270, assigning class SSE_REGS to r702
  375: r701:V2SI=vec_concat(r701:V2SI#0,r702:SI)
      REG_DEAD r270:SI
      REG_DEAD r250:SI
    Inserting insn reload before:
  672: clobber r701:V2SI
  673: r701:V2SI#0=r250:SI
  675: r702:SI=r270:SI
    Inserting insn reload after:
  674: r487:V2SI=r701:V2SI

            0 Non input pseudo reload: reject++
          alt=0,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            alt=7,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=8,overall=11,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=14,losers=2 -- refuse
      Creating newreg=703, assigning class NO_REGS to secondary r703
  673: r703:SI=r250:SI
    Inserting the sec. move after:
  676: r701:V2SI#0=r703:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 676:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            alt=7,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=8,overall=11,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=14,losers=2 -- refuse
      Creating newreg=704, assigning class NO_REGS to secondary r704
  675: r704:SI=r270:SI
    Inserting the sec. move after:
  677: r702:SI=r704:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 677:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
	 Choosing alt 0 in insn 376:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=705 from oldreg=488, assigning class SSE_REGS to r705
      Creating newreg=706 from oldreg=233, assigning class SSE_REGS to r706
  376: r705:V2SI=vec_concat(r705:V2SI#0,r706:SI)
      REG_DEAD r233:SI
      REG_DEAD r217:SI
    Inserting insn reload before:
  678: clobber r705:V2SI
  679: r705:V2SI#0=r217:SI
  681: r706:SI=r233:SI
    Inserting insn reload after:
  680: r488:V2SI=r705:V2SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 679:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 681:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            2 Spill vector pseudo: reject+=2
            alt=3,overall=17,losers=2 -- refuse
	 Choosing alt 0 in insn 377:  (0) =x  (1) 0  (2) x {*vec_concatv4si}
      Creating newreg=707 from oldreg=486, assigning class SSE_REGS to r707
  377: r707:V4SI=vec_concat(r707:V4SI#0,r487:V2SI)
      REG_DEAD r488:V2SI
      REG_DEAD r487:V2SI
    Inserting insn reload before:
  682: clobber r707:V4SI
  683: r707:V4SI#0=r488:V2SI
    Inserting insn reload after:
  684: r486:V4SI=r707:V4SI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=19,losers=3,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=13,losers=2,rld_nregs=1
            Staticly defined alt reject+=606
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=600
            Staticly defined alt reject+=600
            0 Non input pseudo reload: reject++
            alt=6,overall=1213,losers=2 -- refuse
            Staticly defined alt reject+=606
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=606
            0 Non input pseudo reload: reject++
            alt=8,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=606
            0 Non input pseudo reload: reject++
            alt=9,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=606
            alt=10: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=12,overall=1,losers=0,rld_nregs=0
	 Choosing alt 12 in insn 683:  (0) v  (1) v {*movv2si_internal}
          alt=0,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
	 Choosing alt 0 in insn 378:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=708 from oldreg=490, assigning class SSE_REGS to r708
      Creating newreg=709 from oldreg=206, assigning class SSE_REGS to r709
  378: r708:V2SI=vec_concat(r708:V2SI#0,r709:SI)
      REG_DEAD r220:SI
      REG_DEAD r206:SI
    Inserting insn reload before:
  685: clobber r708:V2SI
  686: r708:V2SI#0=r220:SI
  688: r709:SI=r206:SI
    Inserting insn reload after:
  687: r490:V2SI=r708:V2SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 686:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 688:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=18,losers=3,rld_nregs=2
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
          alt=3,overall=18,losers=3,rld_nregs=2
            1 Spill pseudo into memory: reject+=3
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=26,losers=4 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=6: Bad operand -- refuse
	 Choosing alt 0 in insn 379:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=710 from oldreg=491, assigning class SSE_REGS to r710
      Creating newreg=711 from oldreg=274, assigning class SSE_REGS to r711
  379: r710:V2SI=vec_concat(r710:V2SI#0,r711:SI)
      REG_DEAD r274:SI
      REG_DEAD r254:SI
    Inserting insn reload before:
  689: clobber r710:V2SI
  690: r710:V2SI#0=r254:SI
  692: r711:SI=r274:SI
    Inserting insn reload after:
  691: r491:V2SI=r710:V2SI

            0 Non input pseudo reload: reject++
          alt=0,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            alt=7,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=8,overall=11,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=14,losers=2 -- refuse
      Creating newreg=712, assigning class NO_REGS to secondary r712
  690: r712:SI=r254:SI
    Inserting the sec. move after:
  693: r710:V2SI#0=r712:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 693:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 692:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =x  (1) 0  (2) x {*vec_concatv4si}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 381
	 Choosing alt 0 in insn 381:  (0) =x  (1) %0  (2) xm {*xorv4si3}
          alt=0,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
	 Choosing alt 0 in insn 382:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=713 from oldreg=494, assigning class SSE_REGS to r713
      Creating newreg=714 from oldreg=139, assigning class SSE_REGS to r714
  382: r713:V2SI=vec_concat(r713:V2SI#0,r714:SI)
      REG_DEAD r139:SI
      REG_DEAD r138:SI
    Inserting insn reload before:
  694: clobber r713:V2SI
  695: r713:V2SI#0=r138:SI
  697: r714:SI=r139:SI
    Inserting insn reload after:
  696: r494:V2SI=r713:V2SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 695:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 697:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
	 Choosing alt 0 in insn 383:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=715 from oldreg=495, assigning class SSE_REGS to r715
      Creating newreg=716 from oldreg=137, assigning class SSE_REGS to r716
  383: r715:V2SI=vec_concat(r715:V2SI#0,r716:SI)
      REG_DEAD r137:SI
      REG_DEAD r136:SI
    Inserting insn reload before:
  698: clobber r715:V2SI
  699: r715:V2SI#0=r136:SI
  701: r716:SI=r137:SI
    Inserting insn reload after:
  700: r495:V2SI=r715:V2SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 699:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 701:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =x  (1) 0  (2) x {*vec_concatv4si}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
	 Choosing alt 0 in insn 385:  (0) =x  (1) %0  (2) xm {*xorv4si3}
          alt=0,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
	 Choosing alt 0 in insn 386:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=717 from oldreg=498, assigning class SSE_REGS to r717
      Creating newreg=718 from oldreg=131, assigning class SSE_REGS to r718
  386: r717:V2SI=vec_concat(r717:V2SI#0,r718:SI)
      REG_DEAD r131:SI
      REG_DEAD r130:SI
    Inserting insn reload before:
  702: clobber r717:V2SI
  703: r717:V2SI#0=r130:SI
  705: r718:SI=r131:SI
    Inserting insn reload after:
  704: r498:V2SI=r717:V2SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 703:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 705:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
	 Choosing alt 0 in insn 387:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=719 from oldreg=499, assigning class SSE_REGS to r719
      Creating newreg=720 from oldreg=129, assigning class SSE_REGS to r720
  387: r719:V2SI=vec_concat(r719:V2SI#0,r720:SI)
      REG_DEAD r129:SI
      REG_DEAD r128:SI
    Inserting insn reload before:
  706: clobber r719:V2SI
  707: r719:V2SI#0=r128:SI
  709: r720:SI=r129:SI
    Inserting insn reload after:
  708: r499:V2SI=r719:V2SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 707:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 709:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =x  (1) 0  (2) x {*vec_concatv4si}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 389:  (0) =x  (1) %0  (2) xm {*xorv4si3}
Changing address in insn 390 r356:DI+0x10 -- no change
Changing pseudo 356 in address of insn 390 on equiv [argp:DI+0x90]
      Creating newreg=721, assigning class GENERAL_REGS to address r721
	   Change to class INDEX_REGS for r721
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =m  (1) v {sse2_storedquv16qi}
  390: [r721:DI+0x10]=unspec[r500:V4SI#0] 104
      REG_DEAD r500:V4SI
    Inserting insn reload before:
  710: r721:DI=[argp:DI+0x90]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 710:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=18,losers=3,rld_nregs=2
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
          alt=3,overall=18,losers=3,rld_nregs=2
            1 Spill pseudo into memory: reject+=3
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=26,losers=4 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=6: Bad operand -- refuse
	 Choosing alt 0 in insn 392:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=722 from oldreg=502, assigning class SSE_REGS to r722
      Creating newreg=723 from oldreg=219, assigning class SSE_REGS to r723
  392: r722:V2SI=vec_concat(r722:V2SI#0,r723:SI)
      REG_DEAD r273:SI
      REG_DEAD r219:SI
    Inserting insn reload before:
  711: clobber r722:V2SI
  712: r722:V2SI#0=r273:SI
  714: r723:SI=r219:SI
    Inserting insn reload after:
  713: r502:V2SI=r722:V2SI

            0 Non input pseudo reload: reject++
          alt=0,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            alt=7,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=8,overall=11,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=14,losers=2 -- refuse
      Creating newreg=724, assigning class NO_REGS to secondary r724
  712: r724:SI=r273:SI
    Inserting the sec. move after:
  715: r722:V2SI#0=r724:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 715:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 714:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=18,losers=3,rld_nregs=2
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
          alt=3,overall=18,losers=3,rld_nregs=2
            1 Spill pseudo into memory: reject+=3
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=26,losers=4 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=6: Bad operand -- refuse
	 Choosing alt 0 in insn 393:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=725 from oldreg=503, assigning class SSE_REGS to r725
      Creating newreg=726 from oldreg=252, assigning class SSE_REGS to r726
  393: r725:V2SI=vec_concat(r725:V2SI#0,r726:SI)
      REG_DEAD r252:SI
      REG_DEAD r235:SI
    Inserting insn reload before:
  716: clobber r725:V2SI
  717: r725:V2SI#0=r235:SI
  719: r726:SI=r252:SI
    Inserting insn reload after:
  718: r503:V2SI=r725:V2SI

            0 Non input pseudo reload: reject++
          alt=0,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            alt=7,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=8,overall=11,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=14,losers=2 -- refuse
      Creating newreg=727, assigning class NO_REGS to secondary r727
  717: r727:SI=r235:SI
    Inserting the sec. move after:
  720: r725:V2SI#0=r727:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 720:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 719:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =x  (1) 0  (2) x {*vec_concatv4si}
          alt=0,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
	 Choosing alt 0 in insn 395:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=728 from oldreg=505, assigning class SSE_REGS to r728
      Creating newreg=729 from oldreg=256, assigning class SSE_REGS to r729
  395: r728:V2SI=vec_concat(r728:V2SI#0,r729:SI)
      REG_DEAD r256:SI
      REG_DEAD r238:SI
    Inserting insn reload before:
  721: clobber r728:V2SI
  722: r728:V2SI#0=r238:SI
  724: r729:SI=r256:SI
    Inserting insn reload after:
  723: r505:V2SI=r728:V2SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 722:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 724:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=24,losers=4,rld_nregs=2
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
          alt=3,overall=24,losers=4,rld_nregs=2
            1 Spill pseudo into memory: reject+=3
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=26,losers=4 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=6: Bad operand -- refuse
	 Choosing alt 0 in insn 396:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=730 from oldreg=506, assigning class SSE_REGS to r730
      Creating newreg=731 from oldreg=222, assigning class SSE_REGS to r731
  396: r730:V2SI=vec_concat(r730:V2SI#0,r731:SI)
      REG_DEAD r276:SI
      REG_DEAD r222:SI
    Inserting insn reload before:
  725: clobber r730:V2SI
  726: r730:V2SI#0=r276:SI
  728: r731:SI=r222:SI
    Inserting insn reload after:
  727: r506:V2SI=r730:V2SI

            0 Non input pseudo reload: reject++
          alt=0,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            alt=7,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=8,overall=11,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=14,losers=2 -- refuse
      Creating newreg=732, assigning class NO_REGS to secondary r732
  726: r732:SI=r276:SI
    Inserting the sec. move after:
  729: r730:V2SI#0=r732:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 729:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            alt=7,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=8,overall=11,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=14,losers=2 -- refuse
      Creating newreg=733, assigning class NO_REGS to secondary r733
  728: r733:SI=r222:SI
    Inserting the sec. move after:
  730: r731:SI=r733:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 730:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =x  (1) 0  (2) x {*vec_concatv4si}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 398:  (0) =x  (1) %0  (2) xm {*xorv4si3}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 402:  (0) =x  (1) %0  (2) xm {*xorv4si3}
          alt=0,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
	 Choosing alt 0 in insn 403:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=734 from oldreg=513, assigning class SSE_REGS to r734
      Creating newreg=735 from oldreg=135, assigning class SSE_REGS to r735
  403: r734:V2SI=vec_concat(r734:V2SI#0,r735:SI)
      REG_DEAD r135:SI
      REG_DEAD r134:SI
    Inserting insn reload before:
  731: clobber r734:V2SI
  732: r734:V2SI#0=r134:SI
  734: r735:SI=r135:SI
    Inserting insn reload after:
  733: r513:V2SI=r734:V2SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 732:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 734:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=12,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
	 Choosing alt 0 in insn 404:  (0) =x  (1) 0  (2) x {*vec_concatv2si}
      Creating newreg=736 from oldreg=514, assigning class SSE_REGS to r736
      Creating newreg=737 from oldreg=133, assigning class SSE_REGS to r737
  404: r736:V2SI=vec_concat(r736:V2SI#0,r737:SI)
      REG_DEAD r133:SI
      REG_DEAD r132:SI
    Inserting insn reload before:
  735: clobber r736:V2SI
  736: r736:V2SI#0=r132:SI
  738: r737:SI=r133:SI
    Inserting insn reload after:
  737: r514:V2SI=r736:V2SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 736:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=6: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=7,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=3,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 738:  (0) *v  (1) m {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =x  (1) 0  (2) x {*vec_concatv4si}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 406:  (0) =x  (1) %0  (2) xm {*xorv4si3}
Changing address in insn 407 r356:DI+0x20 -- no change
Changing pseudo 356 in address of insn 407 on equiv [argp:DI+0x90]
      Creating newreg=738, assigning class GENERAL_REGS to address r738
	   Change to class INDEX_REGS for r738
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =m  (1) v {sse2_storedquv16qi}
  407: [r738:DI+0x20]=unspec[r515:V4SI#0] 104
      REG_DEAD r515:V4SI
      REG_DEAD r356:DI
    Inserting insn reload before:
  739: r738:DI=[argp:DI+0x90]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 739:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 8
   Insn 413: point = 0
   Insn 412: point = 0
   Insn 407: point = 0
   Insn 739: point = 1
   Insn 406: point = 2
   Insn 405: point = 4
   Insn 737: point = 6
	Hard reg 24 is preferable by r736 with profit 66
   Insn 404: point = 8
   Insn 738: point = 9
   Insn 736: point = 11
   Insn 735: point = 13
   Insn 733: point = 14
	Hard reg 22 is preferable by r734 with profit 66
   Insn 403: point = 16
   Insn 734: point = 17
   Insn 732: point = 19
   Insn 731: point = 21
   Insn 402: point = 22
   Insn 398: point = 24
   Insn 397: point = 26
   Insn 727: point = 28
	Hard reg 22 is preferable by r730 with profit 66
   Insn 396: point = 30
   Insn 730: point = 31
	   Creating copy r731<-r733@66
   Insn 728: point = 33
	Hard reg 43 is preferable by r733 with profit 66
   Insn 729: point = 35
   Insn 726: point = 37
	Hard reg 37 is preferable by r732 with profit 66
   Insn 725: point = 39
   Insn 723: point = 40
	Hard reg 23 is preferable by r728 with profit 66
   Insn 395: point = 42
   Insn 724: point = 43
   Insn 722: point = 45
   Insn 721: point = 47
   Insn 394: point = 48
   Insn 718: point = 50
	Hard reg 21 is preferable by r725 with profit 66
   Insn 393: point = 52
   Insn 719: point = 53
   Insn 720: point = 55
   Insn 717: point = 57
	Hard reg 6 is preferable by r727 with profit 66
   Insn 716: point = 59
   Insn 713: point = 60
	Hard reg 22 is preferable by r722 with profit 66
   Insn 392: point = 62
   Insn 714: point = 63
   Insn 715: point = 65
   Insn 712: point = 67
	Hard reg 3 is preferable by r724 with profit 66
   Insn 711: point = 69
   Insn 390: point = 70
   Insn 710: point = 71
   Insn 389: point = 72
   Insn 388: point = 74
   Insn 708: point = 76
	Hard reg 22 is preferable by r719 with profit 66
   Insn 387: point = 78
   Insn 709: point = 79
   Insn 707: point = 81
   Insn 706: point = 83
   Insn 704: point = 84
	Hard reg 23 is preferable by r717 with profit 66
   Insn 386: point = 86
   Insn 705: point = 87
   Insn 703: point = 89
   Insn 702: point = 91
   Insn 385: point = 92
   Insn 384: point = 94
   Insn 700: point = 96
	Hard reg 24 is preferable by r715 with profit 66
   Insn 383: point = 98
   Insn 701: point = 99
   Insn 699: point = 101
   Insn 698: point = 103
   Insn 696: point = 104
	Hard reg 22 is preferable by r713 with profit 66
   Insn 382: point = 106
   Insn 697: point = 107
   Insn 695: point = 109
   Insn 694: point = 111
   Insn 381: point = 112
   Insn 380: point = 114
   Insn 691: point = 116
	Hard reg 21 is preferable by r710 with profit 66
   Insn 379: point = 118
   Insn 692: point = 119
   Insn 693: point = 121
   Insn 690: point = 123
	Hard reg 38 is preferable by r712 with profit 66
   Insn 689: point = 125
   Insn 687: point = 126
	Hard reg 23 is preferable by r708 with profit 66
   Insn 378: point = 128
   Insn 688: point = 129
   Insn 686: point = 131
   Insn 685: point = 133
   Insn 684: point = 134
	Hard reg 22 is preferable by r707 with profit 66
   Insn 377: point = 136
   Insn 683: point = 138
   Insn 682: point = 139
   Insn 680: point = 140
	Hard reg 21 is preferable by r705 with profit 66
   Insn 376: point = 142
   Insn 681: point = 143
   Insn 679: point = 145
   Insn 678: point = 147
   Insn 674: point = 148
	Hard reg 22 is preferable by r701 with profit 66
   Insn 375: point = 150
   Insn 677: point = 151
	   Creating copy r702<-r704@66
   Insn 675: point = 153
	Hard reg 44 is preferable by r704 with profit 66
   Insn 676: point = 155
   Insn 673: point = 157
	Hard reg 42 is preferable by r703 with profit 66
   Insn 672: point = 159
   Insn 446: point = 160
   Insn 445: point = 162
   Insn 444: point = 164
   Insn 443: point = 166
   Insn 442: point = 168
   Insn 441: point = 170
   Insn 440: point = 172
   Insn 439: point = 174
  r356 is removed as live at bb8 start
  BB 6
   Insn 270: point = 177
   Insn 644: point = 177
   Insn 269: point = 179
   Insn 643: point = 179
   Insn 268: point = 181
   Insn 266: point = 181
   Insn 265: point = 183
   Insn 642: point = 185
   Insn 641: point = 186
   Insn 264: point = 188
   Insn 263: point = 190
   Insn 262: point = 192
   Insn 640: point = 194
   Insn 639: point = 195
   Insn 261: point = 197
   Insn 260: point = 199
   Insn 637: point = 201
	Hard reg 1 is preferable by r667 with profit 933
   Insn 259: point = 203
   Insn 638: point = 204
   Insn 636: point = 206
   Insn 258: point = 208
   Insn 635: point = 210
	Hard reg 37 is preferable by r666 with profit 933
   Insn 257: point = 212
   Insn 634: point = 212
   Insn 256: point = 214
   Insn 633: point = 216
   Insn 255: point = 218
   Insn 632: point = 220
	Hard reg 3 is preferable by r664 with profit 933
   Insn 254: point = 222
   Insn 631: point = 222
	Hard reg 3 is preferable by r664 with profit 933
	Hard reg 37 is preferable by r664 with profit 933
   Insn 253: point = 224
   Insn 630: point = 226
   Insn 252: point = 227
   Insn 628: point = 229
	Hard reg 0 is preferable by r661 with profit 933
   Insn 251: point = 231
   Insn 629: point = 232
   Insn 627: point = 234
   Insn 626: point = 236
   Insn 250: point = 238
   Insn 625: point = 238
	Hard reg 40 is preferable by r660 with profit 933
   Insn 249: point = 240
   Insn 248: point = 242
   Insn 247: point = 244
   Insn 246: point = 246
   Insn 624: point = 248
   Insn 623: point = 249
   Insn 245: point = 251
   Insn 244: point = 253
   Insn 621: point = 255
	Hard reg 1 is preferable by r656 with profit 933
   Insn 243: point = 257
   Insn 622: point = 258
   Insn 620: point = 260
   Insn 242: point = 262
   Insn 241: point = 264
   Insn 240: point = 266
   Insn 619: point = 268
   Insn 239: point = 270
   Insn 238: point = 272
   Insn 237: point = 274
   Insn 236: point = 276
   Insn 617: point = 278
	Hard reg 0 is preferable by r653 with profit 933
   Insn 235: point = 280
   Insn 618: point = 281
   Insn 616: point = 283
   Insn 615: point = 285
   Insn 234: point = 287
   Insn 614: point = 287
	Hard reg 3 is preferable by r652 with profit 933
   Insn 233: point = 289
   Insn 613: point = 291
   Insn 612: point = 292
   Insn 232: point = 294
   Insn 611: point = 296
	Hard reg 6 is preferable by r649 with profit 933
   Insn 231: point = 298
   Insn 610: point = 298
	Hard reg 6 is preferable by r649 with profit 933
	Hard reg 2 is preferable by r649 with profit 933
   Insn 230: point = 300
   Insn 609: point = 302
   Insn 608: point = 303
   Insn 229: point = 305
   Insn 228: point = 307
   Insn 606: point = 309
	Hard reg 1 is preferable by r645 with profit 933
   Insn 227: point = 311
   Insn 607: point = 312
   Insn 605: point = 314
   Insn 226: point = 316
   Insn 225: point = 318
   Insn 224: point = 320
   Insn 223: point = 322
   Insn 222: point = 324
   Insn 221: point = 326
   Insn 220: point = 328
   Insn 603: point = 330
	Hard reg 1 is preferable by r643 with profit 933
   Insn 219: point = 332
   Insn 604: point = 333
   Insn 602: point = 335
   Insn 601: point = 337
	Hard reg 43 is preferable by r642 with profit 933
   Insn 218: point = 339
   Insn 600: point = 339
	Hard reg 43 is preferable by r642 with profit 933
	Hard reg 6 is preferable by r642 with profit 933
   Insn 217: point = 341
   Insn 599: point = 343
   Insn 597: point = 344
   Insn 216: point = 346
   Insn 598: point = 347
   Insn 596: point = 348
	Hard reg 43 is preferable by r639 with profit 933
   Insn 595: point = 350
   Insn 215: point = 352
   Insn 594: point = 352
	Hard reg 41 is preferable by r638 with profit 933
   Insn 214: point = 354
   Insn 593: point = 356
   Insn 592: point = 357
   Insn 213: point = 359
   Insn 212: point = 361
   Insn 590: point = 363
	Hard reg 44 is preferable by r634 with profit 933
   Insn 211: point = 365
   Insn 591: point = 366
   Insn 589: point = 368
   Insn 210: point = 370
   Insn 209: point = 372
   Insn 208: point = 374
   Insn 207: point = 376
   Insn 206: point = 378
   Insn 205: point = 380
   Insn 204: point = 382
   Insn 587: point = 384
	Hard reg 44 is preferable by r632 with profit 933
   Insn 203: point = 386
   Insn 588: point = 387
   Insn 586: point = 389
   Insn 202: point = 391
   Insn 201: point = 393
   Insn 200: point = 395
   Insn 199: point = 397
   Insn 198: point = 399
   Insn 197: point = 401
   Insn 196: point = 403
   Insn 584: point = 405
	Hard reg 44 is preferable by r630 with profit 933
   Insn 195: point = 407
   Insn 585: point = 408
   Insn 583: point = 410
   Insn 194: point = 412
   Insn 582: point = 414
	Hard reg 40 is preferable by r629 with profit 933
   Insn 193: point = 416
   Insn 581: point = 416
   Insn 580: point = 418
	Hard reg 42 is preferable by r628 with profit 933
   Insn 192: point = 420
   Insn 579: point = 420
   Insn 191: point = 422
   Insn 578: point = 424
	Hard reg 41 is preferable by r627 with profit 933
   Insn 190: point = 426
   Insn 577: point = 426
   Insn 189: point = 428
   Insn 576: point = 430
   Insn 188: point = 432
   Insn 575: point = 434
   Insn 573: point = 435
	Hard reg 39 is preferable by r623 with profit 933
   Insn 187: point = 437
   Insn 574: point = 438
   Insn 572: point = 440
   Insn 186: point = 442
   Insn 571: point = 444
	Hard reg 3 is preferable by r622 with profit 933
   Insn 185: point = 446
   Insn 570: point = 446
	Hard reg 3 is preferable by r622 with profit 933
	Hard reg 40 is preferable by r622 with profit 933
   Insn 184: point = 448
   Insn 183: point = 450
   Insn 182: point = 452
   Insn 181: point = 454
   Insn 180: point = 456
   Insn 568: point = 458
	Hard reg 38 is preferable by r620 with profit 933
   Insn 179: point = 460
   Insn 569: point = 461
   Insn 567: point = 463
   Insn 178: point = 465
   Insn 566: point = 467
	Hard reg 40 is preferable by r619 with profit 933
   Insn 177: point = 469
   Insn 565: point = 469
   Insn 564: point = 471
	Hard reg 43 is preferable by r618 with profit 933
   Insn 176: point = 473
   Insn 563: point = 473
   Insn 175: point = 475
   Insn 562: point = 477
	Hard reg 37 is preferable by r617 with profit 933
   Insn 174: point = 479
   Insn 561: point = 479
	Hard reg 37 is preferable by r617 with profit 933
	Hard reg 3 is preferable by r617 with profit 933
   Insn 173: point = 481
   Insn 560: point = 483
   Insn 172: point = 485
   Insn 559: point = 487
   Insn 557: point = 488
	Hard reg 39 is preferable by r613 with profit 933
   Insn 171: point = 490
   Insn 558: point = 491
   Insn 556: point = 493
   Insn 170: point = 495
   Insn 169: point = 497
   Insn 555: point = 499
   Insn 554: point = 500
   Insn 168: point = 502
   Insn 167: point = 504
   Insn 166: point = 506
   Insn 165: point = 508
   Insn 164: point = 510
   Insn 163: point = 512
   Insn 553: point = 514
   Insn 162: point = 516
   Insn 552: point = 518
	Hard reg 6 is preferable by r609 with profit 933
   Insn 161: point = 520
   Insn 551: point = 520
	Hard reg 6 is preferable by r609 with profit 933
	Hard reg 43 is preferable by r609 with profit 933
   Insn 550: point = 522
	Hard reg 37 is preferable by r608 with profit 933
   Insn 160: point = 524
   Insn 549: point = 524
   Insn 159: point = 526
   Insn 158: point = 528
   Insn 157: point = 530
   Insn 548: point = 532
   Insn 156: point = 534
   Insn 155: point = 536
   Insn 547: point = 538
   Insn 546: point = 540
   Insn 154: point = 542
   Insn 545: point = 542
	Hard reg 37 is preferable by r605 with profit 933
   Insn 153: point = 544
   Insn 544: point = 546
   Insn 543: point = 547
   Insn 152: point = 549
   Insn 151: point = 551
   Insn 150: point = 553
   Insn 149: point = 555
   Insn 148: point = 557
   Insn 147: point = 559
   Insn 146: point = 561
   Insn 145: point = 563
   Insn 144: point = 565
   Insn 143: point = 567
   Insn 542: point = 569
	Hard reg 2 is preferable by r602 with profit 933
   Insn 142: point = 571
   Insn 541: point = 571
	Hard reg 2 is preferable by r602 with profit 933
	Hard reg 6 is preferable by r602 with profit 933
   Insn 141: point = 573
   Insn 540: point = 575
   Insn 140: point = 577
   Insn 139: point = 579
   Insn 539: point = 581
  BB 7
   Insn 422: point = 584
   Insn 671: point = 584
   Insn 368: point = 586
   Insn 670: point = 588
   Insn 365: point = 590
   Insn 669: point = 592
   Insn 363: point = 594
   Insn 362: point = 595
   Insn 668: point = 596
   Insn 359: point = 598
   Insn 358: point = 599
   Insn 667: point = 600
   Insn 356: point = 602
   Insn 666: point = 604
   Insn 353: point = 606
   Insn 665: point = 608
   Insn 351: point = 610
   Insn 350: point = 611
   Insn 664: point = 612
   Insn 347: point = 614
   Insn 346: point = 615
   Insn 663: point = 616
   Insn 344: point = 618
   Insn 662: point = 620
   Insn 341: point = 622
   Insn 661: point = 624
   Insn 339: point = 626
   Insn 338: point = 627
   Insn 660: point = 628
   Insn 335: point = 630
   Insn 334: point = 631
   Insn 659: point = 632
   Insn 332: point = 634
   Insn 658: point = 636
   Insn 329: point = 638
   Insn 657: point = 640
   Insn 327: point = 642
   Insn 326: point = 643
   Insn 656: point = 644
   Insn 323: point = 646
   Insn 322: point = 647
   Insn 655: point = 648
   Insn 320: point = 650
   Insn 654: point = 652
   Insn 317: point = 654
   Insn 653: point = 656
   Insn 315: point = 658
   Insn 314: point = 659
   Insn 652: point = 660
   Insn 311: point = 662
   Insn 310: point = 663
   Insn 651: point = 664
   Insn 308: point = 666
   Insn 650: point = 668
   Insn 305: point = 670
   Insn 649: point = 672
   Insn 303: point = 674
   Insn 302: point = 675
   Insn 648: point = 676
   Insn 299: point = 678
   Insn 298: point = 679
   Insn 296: point = 680
   Insn 647: point = 682
   Insn 293: point = 684
   Insn 646: point = 686
   Insn 291: point = 688
   Insn 290: point = 689
   Insn 287: point = 690
   Insn 286: point = 691
   Insn 284: point = 692
   Insn 281: point = 694
   Insn 645: point = 696
   Insn 279: point = 698
   Insn 278: point = 699
   Insn 277: point = 700
   Insn 275: point = 701
   Insn 274: point = 702
  BB 5
   Insn 438: point = 704
   Insn 437: point = 706
   Insn 436: point = 708
   Insn 435: point = 710
   Insn 434: point = 712
   Insn 433: point = 714
   Insn 432: point = 716
   Insn 431: point = 718
   Insn 430: point = 720
   Insn 429: point = 722
   Insn 428: point = 724
   Insn 427: point = 726
   Insn 426: point = 728
   Insn 425: point = 730
   Insn 424: point = 732
   Insn 59: point = 734
   Insn 58: point = 735
   Insn 57: point = 736
   Insn 56: point = 737
   Insn 55: point = 738
   Insn 54: point = 739
   Insn 53: point = 740
   Insn 52: point = 741
   Insn 51: point = 742
   Insn 50: point = 743
   Insn 49: point = 744
   Insn 48: point = 745
   Insn 47: point = 746
   Insn 46: point = 747
   Insn 45: point = 748
   Insn 44: point = 749
   Insn 43: point = 750
   Insn 42: point = 751
   Insn 538: point = 753
   Insn 41: point = 754
   Insn 537: point = 756
   Insn 40: point = 757
   Insn 39: point = 758
   Insn 38: point = 759
   Insn 37: point = 760
   Insn 36: point = 761
   Insn 536: point = 763
   Insn 35: point = 764
   Insn 535: point = 766
   Insn 137: point = 767
  BB 3
   Insn 420: point = 769
   Insn 534: point = 769
   Insn 134: point = 771
   Insn 533: point = 771
	Hard reg 44 is preferable by r595 with profit 33
   Insn 532: point = 773
	Hard reg 3 is preferable by r594 with profit 33
   Insn 133: point = 775
   Insn 531: point = 775
   Insn 132: point = 776
   Insn 530: point = 778
   Insn 529: point = 779
   Insn 131: point = 781
   Insn 528: point = 781
	Hard reg 37 is preferable by r592 with profit 33
   Insn 527: point = 783
	Hard reg 6 is preferable by r591 with profit 33
   Insn 130: point = 785
   Insn 526: point = 785
   Insn 129: point = 786
   Insn 525: point = 788
  BB 4
   Insn 34: point = 790
   Insn 33: point = 791
   Insn 32: point = 792
   Insn 31: point = 793
  BB 2
   Insn 127: point = 795
   Insn 126: point = 795
   Insn 524: point = 796
   Insn 523: point = 797
   Insn 125: point = 799
   Insn 522: point = 799
   Insn 521: point = 800
   Insn 124: point = 802
   Insn 520: point = 804
   Insn 519: point = 805
   Insn 123: point = 807
   Insn 518: point = 807
   Insn 517: point = 808
   Insn 122: point = 810
   Insn 516: point = 812
   Insn 515: point = 813
   Insn 121: point = 815
   Insn 514: point = 815
   Insn 513: point = 816
   Insn 120: point = 818
   Insn 512: point = 820
   Insn 511: point = 821
	Hard reg 38 is preferable by r579 with profit 66
   Insn 119: point = 823
   Insn 510: point = 823
   Insn 509: point = 824
   Insn 118: point = 826
   Insn 508: point = 828
   Insn 507: point = 829
   Insn 117: point = 831
   Insn 506: point = 833
   Insn 505: point = 834
   Insn 116: point = 836
   Insn 504: point = 838
   Insn 503: point = 839
   Insn 115: point = 841
   Insn 502: point = 843
   Insn 501: point = 844
   Insn 114: point = 846
   Insn 500: point = 848
   Insn 499: point = 849
   Insn 113: point = 851
   Insn 498: point = 853
   Insn 497: point = 854
   Insn 112: point = 856
   Insn 496: point = 858
   Insn 495: point = 859
   Insn 111: point = 861
   Insn 494: point = 863
   Insn 493: point = 864
   Insn 110: point = 866
   Insn 492: point = 868
   Insn 109: point = 869
   Insn 491: point = 870
   Insn 490: point = 871
   Insn 108: point = 873
   Insn 489: point = 873
	Hard reg 44 is preferable by r559 with profit 66
   Insn 107: point = 875
   Insn 106: point = 877
   Insn 488: point = 878
   Insn 487: point = 879
   Insn 105: point = 881
   Insn 486: point = 881
	Hard reg 44 is preferable by r557 with profit 66
   Insn 104: point = 883
   Insn 103: point = 884
   Insn 485: point = 885
   Insn 484: point = 886
   Insn 102: point = 888
   Insn 483: point = 888
	Hard reg 42 is preferable by r555 with profit 66
   Insn 101: point = 890
   Insn 100: point = 891
   Insn 482: point = 892
   Insn 481: point = 893
   Insn 99: point = 895
   Insn 480: point = 895
	Hard reg 42 is preferable by r553 with profit 66
   Insn 98: point = 897
   Insn 97: point = 898
   Insn 479: point = 899
   Insn 478: point = 900
   Insn 96: point = 902
   Insn 477: point = 902
	Hard reg 0 is preferable by r551 with profit 66
   Insn 95: point = 904
   Insn 94: point = 905
   Insn 476: point = 906
   Insn 475: point = 907
   Insn 93: point = 909
   Insn 474: point = 909
	Hard reg 0 is preferable by r549 with profit 66
   Insn 92: point = 911
   Insn 91: point = 912
   Insn 473: point = 913
   Insn 472: point = 914
   Insn 90: point = 916
   Insn 471: point = 916
	Hard reg 0 is preferable by r547 with profit 66
   Insn 89: point = 918
   Insn 88: point = 919
   Insn 470: point = 920
   Insn 469: point = 921
   Insn 87: point = 923
   Insn 468: point = 923
	Hard reg 0 is preferable by r545 with profit 66
   Insn 86: point = 925
   Insn 85: point = 926
   Insn 467: point = 927
   Insn 466: point = 928
   Insn 84: point = 930
   Insn 465: point = 930
	Hard reg 3 is preferable by r543 with profit 66
   Insn 83: point = 932
   Insn 82: point = 933
   Insn 464: point = 934
   Insn 463: point = 935
   Insn 81: point = 937
   Insn 462: point = 937
	Hard reg 3 is preferable by r541 with profit 66
   Insn 80: point = 939
   Insn 79: point = 940
   Insn 461: point = 941
   Insn 460: point = 942
   Insn 78: point = 944
   Insn 459: point = 944
	Hard reg 0 is preferable by r539 with profit 66
   Insn 77: point = 946
   Insn 76: point = 947
   Insn 458: point = 948
   Insn 457: point = 949
   Insn 75: point = 951
   Insn 456: point = 951
	Hard reg 0 is preferable by r537 with profit 66
   Insn 74: point = 953
   Insn 73: point = 954
   Insn 455: point = 955
   Insn 454: point = 956
   Insn 72: point = 958
   Insn 453: point = 958
	Hard reg 0 is preferable by r535 with profit 66
   Insn 71: point = 960
   Insn 70: point = 961
   Insn 452: point = 962
   Insn 451: point = 963
   Insn 69: point = 965
   Insn 450: point = 965
	Hard reg 38 is preferable by r533 with profit 66
   Insn 68: point = 967
   Insn 67: point = 968
   Insn 449: point = 968
	Hard reg 5 is preferable by r532 with profit 66
   Insn 66: point = 970
   Insn 448: point = 970
	Hard reg 5 is preferable by r532 with profit 66
	Hard reg 6 is preferable by r532 with profit 66
   Insn 65: point = 972
   Insn 64: point = 973
   Insn 63: point = 973
   Insn 62: point = 975
   Insn 29: point = 976
   Insn 28: point = 977
  r356 is added to live at bb2 start
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 11 (  1.2)
Global pseudo live data have been updated:

BB 2:
    killed: 2:

      128  129  130  131  132  133  134  135  136  137  138
      139  206  220  254  274  293  297  301  305  309  313
      317  321  325  329  333  337  341  345  349  353  357
      358  359  360  361  362  363  364  365  366  367  368
      369  370  371  372  373  532  533  534  535  536  537
      538  539  540  541  542  543  544  545  546  547  548
      549  550  551  552  553  554  555  556  557  558  559
      560  561  562  563  564  565  566  567  568  569  570
      571  572  573  574  575  576  577  578  579  580  581
      582  583  584  585  586  587  588  589
    liveout: 2:

        6    7   16   20  128  129  130  131  132  133  134
      135  136  137  138  139  206  220  254  274  293  297
      301  305  309  313  317  321  325  329  333  337  341
      345  349  353

BB 3:
    killed: 3:

      141  142  219  235  252  273  590  591  592  593  594
      595
    livein: 3:

      128  129  130  131  132  133  134  135  136  137  138
      139  206  220  254  274  293  297  301  305  309  313
      317  321  325  329  333  337  341  345  349  353
    liveout: 3:

        6    7   16   20  128  129  130  131  132  133  134
      135  136  137  138  139  206  219  220  235  252  254
      273  274  293  297  301  305  309  313  317  321  325
      329  333  337  341  345  349  353

BB 4:
    killed: 4:

      219  235  252  273
    livein: 4:

      128  129  130  131  132  133  134  135  136  137  138
      139  206  220  254  274  293  297  301  305  309  313
      317  321  325  329  333  337  341  345  349  353
    liveout: 4:

        6    7   16   20  128  129  130  131  132  133  134
      135  136  137  138  139  206  219  220  235  252  254
      273  274  293  297  301  305  309  313  317  321  325
      329  333  337  341  345  349  353

BB 5:
    gen: 5:

      128  129  130  131  132  133  134  135  235  252  254
      273  293  297  301
    killed: 5:

      113  217  222  233  238  250  256  270  276  281  296
      298  304  306  312  314  320  322  328  330  336  338
      344  346  352  354  517  518  519  520  521  522  523
      524  525  526  527  528  529  530  531  596  597  598
      599
    livein: 5:

      128  129  130  131  132  133  134  135  136  137  138
      139  206  219  220  235  252  254  273  274  293  297
      301  305  309  313  317  321  325  329  333  337  341
      345  349  353
    liveout: 5:

        6    7   16   20  113  128  129  130  131  132  133
      134  135  136  137  138  139  206  217  219  220  233
      238  256  274  296  304  305  309  312  313  317  320
      321  322  325  328  329  330  333  336  337  338  341
      344  345  346  349  352  353  354  517  518  519  520
      521  522  523  524  525  526  527  528  529  530  531

BB 6:
    gen: 6:

      113  206  217  219  220  233  238  256  274  296  304
      305  309  312  313  317  320  321  322  325  328  329
      330  333  336  337  338  341  344  345  346  349  352
      353  354  517  518  519  520  521  522  523  524  525
      526  527  528  529  530  531
    killed: 6:

      113  144  146  147  149  152  154  155  157  160  162
      163  165  168  170  171  173  176  178  179  181  184
      186  187  189  192  194  195  197  200  202  203  205
      206  209  211  212  214  217  219  220  225  227  228
      230  233  238  241  243  244  247  256  260  262  264
      266  274  374  375  376  377  378  379  380  381  382
      383  384  385  386  387  388  389  390  391  392  393
      394  395  396  397  398  399  400  401  402  403  404
      405  406  407  408  409  410  411  412  413  414  415
      416  417  418  419  420  421  422  423  424  425  426
      427  428  429  430  431  432  433  434  435  436  437
      517  518  519  520  521  522  523  524  600  601  602
      603  604  605  606  607  608  609  610  611  612  613
      614  615  616  617  618  619  620  621  622  623  624
      625  626  627  628  629  630  631  632  633  634  635
      636  637  638  639  640  641  642  643  644  645  646
      647  648  649  650  651  652  653  654  655  656  657
      658  659  660  661  662  663  664  665  666  667  668
      669  670  671  672  673
    livein: 6:

      113  128  129  130  131  132  133  134  135  136  137
      138  139  206  217  219  220  233  238  256  274  296
      304  305  309  312  313  317  320  321  322  325  328
      329  330  333  336  337  338  341  344  345  346  349
      352  353  354  517  518  519  520  521  522  523  524
      525  526  527  528  529  530  531
    liveout: 6:

        6    7   16   20  113  128  129  130  131  132  133
      134  135  136  137  138  139  206  217  219  220  233
      238  256  274  517  518  519  520  521  522  523  524
      525

BB 7:
    gen: 7:

      525
    killed: 7:

      296  304  305  309  312  313  317  320  321  322  325
      328  329  330  333  336  337  338  341  344  345  346
      349  352  353  354  438  439  440  444  446  450  452
      456  458  462  464  468  470  474  476  480  482  526
      527  528  529  530  531  674  675  676  677  678  679
      680  681  682  683  684  685  686  687  688  689  690
      691  692  693  694  695  696  697  698  699  700
    livein: 7:

      113  128  129  130  131  132  133  134  135  136  137
      138  139  206  217  219  220  233  238  256  274  517
      518  519  520  521  522  523  524  525
    liveout: 7:

        6    7   16   20  113  128  129  130  131  132  133
      134  135  136  137  138  139  206  217  219  220  233
      238  256  274  296  304  305  309  312  313  317  320
      321  322  325  328  329  330  333  336  337  338  341
      344  345  346  349  352  353  354  517  518  519  520
      521  522  523  524  525  526  527  528  529  530  531

BB 8:
    gen: 8:

      128  129  130  131  132  133  134  135  136  137  138
      139  206  217  219  220  233  238  256  274  517  518
      519  520  521  522  523  524
    killed: 8:

      222  235  250  252  254  270  273  276  486  487  488
      489  490  491  492  493  494  495  496  497  498  499
      500  501  502  503  504  505  506  507  511  512  513
      514  515  701  702  703  704  705  706  707  708  709
      710  711  712  713  714  715  716  717  718  719  720
      721  722  723  724  725  726  727  728  729  730  731
      732  733  734  735  736  737  738
    livein: 8:

      128  129  130  131  132  133  134  135  136  137  138
      139  206  217  219  220  233  238  256  274  517  518
      519  520  521  522  523  524
    liveout: 8:

        0    6    7   16   20
 r113: [180..750] [177..177]
 r128: [82..864]
 r129: [80..859]
 r130: [90..854]
 r131: [88..849]
 r132: [12..844]
 r133: [10..839]
 r134: [20..834]
 r135: [18..829]
 r136: [102..824]
 r137: [100..816]
 r138: [110..808]
 r139: [108..800]
 r141: [782..786]
 r142: [772..776]
 r144: [558..573]
 r146: [554..567]
 r147: [550..565]
 r149: [545..561]
 r152: [383..555]
 r154: [325..551]
 r155: [269..547]
 r157: [213..540]
 r160: [511..530]
 r162: [507..526]
 r163: [503..522]
 r165: [498..516]
 r168: [329..508]
 r170: [273..504]
 r171: [217..500]
 r173: [373..495]
 r176: [457..481]
 r178: [453..475]
 r179: [449..471]
 r181: [447..465]
 r184: [277..454]
 r186: [223..450]
 r187: [375..448]
 r189: [319..442]
 r192: [404..428]
 r194: [400..422]
 r195: [396..418]
 r197: [394..412]
 r200: [228..401]
 r202: [379..397]
 r203: [321..395]
 r205: [265..391]
 r206: [421..797] [130..292]
 r209: [362..380]
 r211: [355..376]
 r212: [349..374]
 r214: [342..370]
 r217: [576..764] [146..357]
 r219: [790..793] [427..769] [64..350]
 r220: [474..805] [132..344]
 r222: [733..757] [34..174]
 r225: [308..326]
 r227: [301..322]
 r228: [295..320]
 r230: [290..316]
 r233: [533..761] [144..303]
 r235: [790..790] [731..783] [58..172]
 r238: [470..754] [46..285]
 r241: [254..274]
 r243: [247..270]
 r244: [243..266]
 r247: [241..262]
 r250: [729..760] [158..170]
 r252: [790..791] [705..779] [54..168]
 r254: [727..821] [124..166]
 r256: [417..751] [44..236]
 r260: [200..224]
 r262: [193..218]
 r264: [189..214]
 r266: [184..208]
 r270: [725..759] [154..164]
 r273: [790..792] [723..773] [68..162]
 r274: [525..813] [120..186]
 r276: [721..758] [38..160]
 r281: [719..767]
 r293: [717..973]
 r296: [704..734] [582..696]
 r297: [707..968]
 r298: [715..735]
 r301: [713..963]
 r304: [704..736] [539..686]
 r305: [704..956] [515..682]
 r306: [711..737]
 r309: [704..949] [494..676]
 r312: [704..738] [492..672]
 r313: [704..942] [464..668]
 r314: [709..739]
 r317: [704..935] [441..660]
 r320: [704..740] [439..656]
 r321: [704..928] [411..652]
 r322: [704..741] [409..648]
 r325: [704..921] [390..644]
 r328: [704..742] [388..640]
 r329: [704..914] [369..636]
 r330: [704..743] [367..632]
 r333: [704..907] [336..628]
 r336: [704..744] [334..624]
 r337: [704..900] [315..620]
 r338: [704..745] [313..616]
 r341: [704..893] [284..612]
 r344: [704..746] [282..608]
 r345: [704..886] [261..604]
 r346: [704..747] [259..600]
 r349: [704..879] [235..596]
 r352: [704..748] [233..592]
 r353: [704..871] [207..588]
 r354: [704..749] [205..584]
 r356: [177..977]
 r357: [876..976]
 r358: [974..975]
 r359: [971..972]
 r360: [966..967]
 r361: [959..960]
 r362: [952..953]
 r363: [945..946]
 r364: [938..939]
 r365: [931..932]
 r366: [924..925]
 r367: [917..918]
 r368: [910..911]
 r369: [903..904]
 r370: [896..897]
 r371: [889..890]
 r372: [882..883]
 r373: [874..875]
 r374: [578..579]
 r375: [574..577]
 r376: [568..569]
 r377: [562..563]
 r378: [558..559]
 r379: [556..557]
 r380: [552..553]
 r381: [543..544]
 r382: [535..536]
 r383: [531..534]
 r384: [527..528]
 r385: [517..518]
 r386: [511..512]
 r387: [509..510]
 r388: [505..506]
 r389: [496..497]
 r390: [486..488]
 r391: [482..485]
 r392: [476..477]
 r393: [466..467]
 r394: [457..458]
 r395: [455..456]
 r396: [451..452]
 r397: [443..444]
 r398: [433..435]
 r399: [429..432]
 r400: [423..424]
 r401: [413..414]
 r402: [404..405]
 r403: [402..403]
 r404: [398..399]
 r405: [392..393]
 r406: [383..384]
 r407: [381..382]
 r408: [377..378]
 r409: [371..372]
 r410: [362..363]
 r411: [360..361]
 r412: [353..354]
 r413: [340..341]
 r414: [329..330]
 r415: [327..328]
 r416: [323..324]
 r417: [317..318]
 r418: [308..309]
 r419: [306..307]
 r420: [299..300]
 r421: [288..289]
 r422: [277..278]
 r423: [275..276]
 r424: [271..272]
 r425: [263..264]
 r426: [254..255]
 r427: [252..253]
 r428: [245..246]
 r429: [239..240]
 r430: [228..229]
 r431: [225..227]
 r432: [219..220]
 r433: [209..210]
 r434: [200..201]
 r435: [198..199]
 r436: [191..192]
 r437: [182..183]
 r438: [693..702]
 r439: [587..700]
 r440: [695..699]
 r444: [681..691]
 r446: [685..689]
 r450: [667..679]
 r452: [671..675]
 r456: [651..663]
 r458: [655..659]
 r462: [635..647]
 r464: [639..643]
 r468: [619..631]
 r470: [623..627]
 r474: [603..615]
 r476: [607..611]
 r480: [587..599]
 r482: [591..595]
 r486: [113..134]
 r487: [137..148]
 r488: [138..140]
 r489: [113..114]
 r490: [115..126]
 r491: [115..116]
 r492: [93..112]
 r493: [23..94]
 r494: [95..104]
 r495: [95..96]
 r496: [73..92]
 r497: [73..74]
 r498: [75..84]
 r499: [75..76]
 r500: [70..72]
 r501: [25..48]
 r502: [49..60]
 r503: [49..50]
 r504: [25..26]
 r505: [27..40]
 r506: [27..28]
 r507: [23..24]
 r511: [3..22]
 r512: [3..4]
 r513: [5..14]
 r514: [5..6]
 r515: [0..2]
 r517: [521..732] [175..337]
 r518: [572..730] [173..296]
 r519: [484..728] [171..249]
 r520: [529..704] [169..244]
 r521: [566..726] [167..242]
 r522: [431..724] [165..195]
 r523: [480..722] [163..190]
 r524: [564..720] [161..181]
 r525: [177..718]
 r526: [704..716] [580..701]
 r527: [704..706] [560..694]
 r528: [704..714] [560..692]
 r529: [704..712] [537..690]
 r530: [704..710] [513..680]
 r531: [704..708] [462..664]
 r532: [969..970]
 r533: [964..965]
 r534: [961..962]
 r535: [957..958]
 r536: [954..955]
 r537: [950..951]
 r538: [947..948]
 r539: [943..944]
 r540: [940..941]
 r541: [936..937]
 r542: [933..934]
 r543: [929..930]
 r544: [926..927]
 r545: [922..923]
 r546: [919..920]
 r547: [915..916]
 r548: [912..913]
 r549: [908..909]
 r550: [905..906]
 r551: [901..902]
 r552: [898..899]
 r553: [894..895]
 r554: [891..892]
 r555: [887..888]
 r556: [884..885]
 r557: [880..881]
 r558: [877..878]
 r559: [872..873]
 r560: [869..870]
 r561: [867..868]
 r562: [865..866]
 r563: [862..863]
 r564: [860..861]
 r565: [857..858]
 r566: [855..856]
 r567: [852..853]
 r568: [850..851]
 r569: [847..848]
 r570: [845..846]
 r571: [842..843]
 r572: [840..841]
 r573: [837..838]
 r574: [835..836]
 r575: [832..833]
 r576: [830..831]
 r577: [827..828]
 r578: [825..826]
 r579: [822..823]
 r580: [819..820]
 r581: [817..818]
 r582: [814..815]
 r583: [811..812]
 r584: [809..810]
 r585: [806..807]
 r586: [803..804]
 r587: [801..802]
 r588: [798..799]
 r589: [795..796]
 r590: [787..788]
 r591: [784..785]
 r592: [780..781]
 r593: [777..778]
 r594: [774..775]
 r595: [770..771]
 r596: [765..766]
 r597: [762..763]
 r598: [755..756]
 r599: [752..753]
 r600: [580..581]
 r601: [574..575]
 r602: [570..571]
 r603: [548..549]
 r604: [545..546]
 r605: [541..542]
 r606: [537..538]
 r607: [531..532]
 r608: [523..524]
 r609: [519..520]
 r610: [513..514]
 r611: [501..502]
 r612: [498..499]
 r613: [489..493]
 r614: [490..491]
 r615: [486..487]
 r616: [482..483]
 r617: [478..479]
 r618: [472..473]
 r619: [468..469]
 r620: [459..463]
 r621: [460..461]
 r622: [445..446]
 r623: [436..440]
 r624: [437..438]
 r625: [433..434]
 r626: [429..430]
 r627: [425..426]
 r628: [419..420]
 r629: [415..416]
 r630: [406..410]
 r631: [407..408]
 r632: [385..389]
 r633: [386..387]
 r634: [364..368]
 r635: [365..366]
 r636: [358..359]
 r637: [355..356]
 r638: [351..352]
 r639: [345..348]
 r640: [346..347]
 r641: [342..343]
 r642: [338..339]
 r643: [331..335]
 r644: [332..333]
 r645: [310..314]
 r646: [311..312]
 r647: [304..305]
 r648: [301..302]
 r649: [297..298]
 r650: [293..294]
 r651: [290..291]
 r652: [286..287]
 r653: [279..283]
 r654: [280..281]
 r655: [267..268]
 r656: [256..260]
 r657: [257..258]
 r658: [250..251]
 r659: [247..248]
 r660: [237..238]
 r661: [230..234]
 r662: [231..232]
 r663: [225..226]
 r664: [221..222]
 r665: [215..216]
 r666: [211..212]
 r667: [202..206]
 r668: [203..204]
 r669: [196..197]
 r670: [193..194]
 r671: [187..188]
 r672: [184..185]
 r673: [178..179]
 r674: [697..698]
 r675: [687..688]
 r676: [683..684]
 r677: [677..678]
 r678: [673..674]
 r679: [669..670]
 r680: [665..666]
 r681: [661..662]
 r682: [657..658]
 r683: [653..654]
 r684: [649..650]
 r685: [645..646]
 r686: [641..642]
 r687: [637..638]
 r688: [633..634]
 r689: [629..630]
 r690: [625..626]
 r691: [621..622]
 r692: [617..618]
 r693: [613..614]
 r694: [609..610]
 r695: [605..606]
 r696: [601..602]
 r697: [597..598]
 r698: [593..594]
 r699: [589..590]
 r700: [585..586]
 r701: [159..159] [149..155]
 r702: [150..151]
 r703: [156..157]
 r704: [152..153]
 r705: [147..147] [141..145]
 r706: [142..143]
 r707: [135..139]
 r708: [133..133] [127..131]
 r709: [128..129]
 r710: [125..125] [117..121]
 r711: [118..119]
 r712: [122..123]
 r713: [111..111] [105..109]
 r714: [106..107]
 r715: [103..103] [97..101]
 r716: [98..99]
 r717: [91..91] [85..89]
 r718: [86..87]
 r719: [83..83] [77..81]
 r720: [78..79]
 r721: [70..71]
 r722: [69..69] [61..65]
 r723: [62..63]
 r724: [66..67]
 r725: [59..59] [51..55]
 r726: [52..53]
 r727: [56..57]
 r728: [47..47] [41..45]
 r729: [42..43]
 r730: [39..39] [29..35]
 r731: [30..31]
 r732: [36..37]
 r733: [32..33]
 r734: [21..21] [15..19]
 r735: [16..17]
 r736: [13..13] [7..11]
 r737: [8..9]
 r738: [0..1]
Compressing live ranges: from 978 to 828 - 84%
Ranges after the compression:
 r113: [159..653] [156..156]
 r128: [73..733]
 r129: [71..729]
 r130: [80..725]
 r131: [78..721]
 r132: [10..717]
 r133: [8..713]
 r134: [17..709]
 r135: [15..705]
 r136: [91..701]
 r137: [89..695]
 r138: [98..689]
 r139: [96..683]
 r141: [672..675]
 r142: [664..667]
 r144: [511..526]
 r146: [507..520]
 r147: [503..518]
 r149: [499..514]
 r152: [345..508]
 r154: [293..504]
 r155: [241..500]
 r157: [189..494]
 r160: [465..484]
 r162: [461..480]
 r163: [457..476]
 r165: [453..470]
 r168: [297..462]
 r170: [245..458]
 r171: [193..454]
 r173: [335..450]
 r176: [415..438]
 r178: [411..432]
 r179: [407..428]
 r181: [405..422]
 r184: [249..412]
 r186: [199..408]
 r187: [337..406]
 r189: [287..400]
 r192: [365..388]
 r194: [361..382]
 r195: [357..378]
 r197: [355..372]
 r200: [203..362]
 r202: [341..358]
 r203: [289..356]
 r205: [237..352]
 r206: [381..681] [116..262]
 r209: [325..342]
 r211: [319..338]
 r212: [313..336]
 r214: [309..332]
 r217: [529..659] [127..320]
 r219: [678..679] [387..661] [57..314]
 r220: [431..687] [118..310]
 r222: [652..657] [30..154]
 r225: [277..294]
 r227: [271..290]
 r228: [265..288]
 r230: [261..284]
 r233: [487..657] [125..272]
 r235: [678..678] [650..673] [52..152]
 r238: [427..655] [41..256]
 r241: [227..246]
 r243: [221..242]
 r244: [217..238]
 r247: [215..234]
 r250: [648..657] [138..150]
 r252: [678..679] [624..669] [48..148]
 r254: [646..699] [111..146]
 r256: [377..653] [39..210]
 r260: [177..200]
 r262: [171..194]
 r264: [167..190]
 r266: [163..184]
 r270: [644..657] [134..144]
 r273: [678..679] [642..665] [61..142]
 r274: [479..693] [107..164]
 r276: [640..657] [34..140]
 r281: [638..661]
 r293: [636..825]
 r296: [623..653] [535..620]
 r297: [626..821]
 r298: [634..653]
 r301: [632..817]
 r304: [623..653] [493..614]
 r305: [623..811] [469..610]
 r306: [630..653]
 r309: [623..805] [449..606]
 r312: [623..653] [447..604]
 r313: [623..799] [421..600]
 r314: [628..653]
 r317: [623..793] [399..594]
 r320: [623..653] [397..592]
 r321: [623..787] [371..588]
 r322: [623..653] [369..584]
 r325: [623..781] [351..582]
 r328: [623..653] [349..580]
 r329: [623..775] [331..576]
 r330: [623..653] [329..572]
 r333: [623..769] [303..570]
 r336: [623..653] [301..568]
 r337: [623..763] [283..564]
 r338: [623..653] [281..560]
 r341: [623..757] [255..558]
 r344: [623..653] [253..556]
 r345: [623..751] [233..552]
 r346: [623..653] [231..548]
 r349: [623..745] [209..546]
 r352: [623..653] [207..544]
 r353: [623..739] [183..540]
 r354: [623..653] [181..536]
 r356: [156..827]
 r357: [744..827]
 r358: [826..827]
 r359: [824..825]
 r360: [820..821]
 r361: [814..815]
 r362: [808..809]
 r363: [802..803]
 r364: [796..797]
 r365: [790..791]
 r366: [784..785]
 r367: [778..779]
 r368: [772..773]
 r369: [766..767]
 r370: [760..761]
 r371: [754..755]
 r372: [748..749]
 r373: [742..743]
 r374: [531..532]
 r375: [527..530]
 r376: [521..522]
 r377: [515..516]
 r378: [511..512]
 r379: [509..510]
 r380: [505..506]
 r381: [497..498]
 r382: [489..490]
 r383: [485..488]
 r384: [481..482]
 r385: [471..472]
 r386: [465..466]
 r387: [463..464]
 r388: [459..460]
 r389: [451..452]
 r390: [443..444]
 r391: [439..442]
 r392: [433..434]
 r393: [423..424]
 r394: [415..416]
 r395: [413..414]
 r396: [409..410]
 r397: [401..402]
 r398: [393..394]
 r399: [389..392]
 r400: [383..384]
 r401: [373..374]
 r402: [365..366]
 r403: [363..364]
 r404: [359..360]
 r405: [353..354]
 r406: [345..346]
 r407: [343..344]
 r408: [339..340]
 r409: [333..334]
 r410: [325..326]
 r411: [323..324]
 r412: [317..318]
 r413: [307..308]
 r414: [297..298]
 r415: [295..296]
 r416: [291..292]
 r417: [285..286]
 r418: [277..278]
 r419: [275..276]
 r420: [269..270]
 r421: [259..260]
 r422: [249..250]
 r423: [247..248]
 r424: [243..244]
 r425: [235..236]
 r426: [227..228]
 r427: [225..226]
 r428: [219..220]
 r429: [213..214]
 r430: [203..204]
 r431: [201..202]
 r432: [195..196]
 r433: [185..186]
 r434: [177..178]
 r435: [175..176]
 r436: [169..170]
 r437: [161..162]
 r438: [617..622]
 r439: [539..622]
 r440: [619..622]
 r444: [609..616]
 r446: [613..616]
 r450: [599..608]
 r452: [603..606]
 r456: [587..596]
 r458: [591..594]
 r462: [575..584]
 r464: [579..582]
 r468: [563..572]
 r470: [567..570]
 r474: [551..560]
 r476: [555..558]
 r480: [539..548]
 r482: [543..546]
 r486: [101..120]
 r487: [121..129]
 r488: [121..122]
 r489: [101..102]
 r490: [103..113]
 r491: [103..104]
 r492: [83..100]
 r493: [20..84]
 r494: [85..93]
 r495: [85..86]
 r496: [65..82]
 r497: [65..66]
 r498: [67..75]
 r499: [67..68]
 r500: [63..64]
 r501: [22..43]
 r502: [44..54]
 r503: [44..45]
 r504: [22..23]
 r505: [24..36]
 r506: [24..25]
 r507: [20..21]
 r511: [2..19]
 r512: [2..3]
 r513: [4..12]
 r514: [4..5]
 r515: [0..1]
 r517: [475..651] [155..304]
 r518: [525..649] [153..266]
 r519: [441..647] [151..222]
 r520: [483..623] [149..218]
 r521: [519..645] [147..216]
 r522: [391..643] [145..172]
 r523: [437..641] [143..168]
 r524: [517..639] [141..160]
 r525: [156..637]
 r526: [533..635]
 r527: [623..625] [513..618]
 r528: [623..633] [513..616]
 r529: [623..631] [491..616]
 r530: [623..629] [467..608]
 r531: [623..627] [419..596]
 r532: [822..823]
 r533: [818..819]
 r534: [816..817]
 r535: [812..813]
 r536: [810..811]
 r537: [806..807]
 r538: [804..805]
 r539: [800..801]
 r540: [798..799]
 r541: [794..795]
 r542: [792..793]
 r543: [788..789]
 r544: [786..787]
 r545: [782..783]
 r546: [780..781]
 r547: [776..777]
 r548: [774..775]
 r549: [770..771]
 r550: [768..769]
 r551: [764..765]
 r552: [762..763]
 r553: [758..759]
 r554: [756..757]
 r555: [752..753]
 r556: [750..751]
 r557: [746..747]
 r558: [744..745]
 r559: [740..741]
 r560: [738..739]
 r561: [736..737]
 r562: [734..735]
 r563: [732..733]
 r564: [730..731]
 r565: [728..729]
 r566: [726..727]
 r567: [724..725]
 r568: [722..723]
 r569: [720..721]
 r570: [718..719]
 r571: [716..717]
 r572: [714..715]
 r573: [712..713]
 r574: [710..711]
 r575: [708..709]
 r576: [706..707]
 r577: [704..705]
 r578: [702..703]
 r579: [700..701]
 r580: [698..699]
 r581: [696..697]
 r582: [694..695]
 r583: [692..693]
 r584: [690..691]
 r585: [688..689]
 r586: [686..687]
 r587: [684..685]
 r588: [682..683]
 r589: [680..681]
 r590: [676..677]
 r591: [674..675]
 r592: [670..671]
 r593: [668..669]
 r594: [666..667]
 r595: [662..663]
 r596: [660..661]
 r597: [658..659]
 r598: [656..657]
 r599: [654..655]
 r600: [533..534]
 r601: [527..528]
 r602: [523..524]
 r603: [501..502]
 r604: [499..500]
 r605: [495..496]
 r606: [491..492]
 r607: [485..486]
 r608: [477..478]
 r609: [473..474]
 r610: [467..468]
 r611: [455..456]
 r612: [453..454]
 r613: [445..448]
 r614: [445..446]
 r615: [443..444]
 r616: [439..440]
 r617: [435..436]
 r618: [429..430]
 r619: [425..426]
 r620: [417..420]
 r621: [417..418]
 r622: [403..404]
 r623: [395..398]
 r624: [395..396]
 r625: [393..394]
 r626: [389..390]
 r627: [385..386]
 r628: [379..380]
 r629: [375..376]
 r630: [367..370]
 r631: [367..368]
 r632: [347..350]
 r633: [347..348]
 r634: [327..330]
 r635: [327..328]
 r636: [321..322]
 r637: [319..320]
 r638: [315..316]
 r639: [311..312]
 r640: [311..312]
 r641: [309..310]
 r642: [305..306]
 r643: [299..302]
 r644: [299..300]
 r645: [279..282]
 r646: [279..280]
 r647: [273..274]
 r648: [271..272]
 r649: [267..268]
 r650: [263..264]
 r651: [261..262]
 r652: [257..258]
 r653: [251..254]
 r654: [251..252]
 r655: [239..240]
 r656: [229..232]
 r657: [229..230]
 r658: [223..224]
 r659: [221..222]
 r660: [211..212]
 r661: [205..208]
 r662: [205..206]
 r663: [201..202]
 r664: [197..198]
 r665: [191..192]
 r666: [187..188]
 r667: [179..182]
 r668: [179..180]
 r669: [173..174]
 r670: [171..172]
 r671: [165..166]
 r672: [163..164]
 r673: [157..158]
 r674: [621..622]
 r675: [615..616]
 r676: [611..612]
 r677: [607..608]
 r678: [605..606]
 r679: [601..602]
 r680: [597..598]
 r681: [595..596]
 r682: [593..594]
 r683: [589..590]
 r684: [585..586]
 r685: [583..584]
 r686: [581..582]
 r687: [577..578]
 r688: [573..574]
 r689: [571..572]
 r690: [569..570]
 r691: [565..566]
 r692: [561..562]
 r693: [559..560]
 r694: [557..558]
 r695: [553..554]
 r696: [549..550]
 r697: [547..548]
 r698: [545..546]
 r699: [541..542]
 r700: [537..538]
 r701: [139..139] [130..135]
 r702: [130..131]
 r703: [136..137]
 r704: [132..133]
 r705: [128..128] [123..126]
 r706: [123..124]
 r707: [121..122]
 r708: [119..119] [114..117]
 r709: [114..115]
 r710: [112..112] [105..108]
 r711: [105..106]
 r712: [109..110]
 r713: [99..99] [94..97]
 r714: [94..95]
 r715: [92..92] [87..90]
 r716: [87..88]
 r717: [81..81] [76..79]
 r718: [76..77]
 r719: [74..74] [69..72]
 r720: [69..70]
 r721: [63..64]
 r722: [62..62] [55..58]
 r723: [55..56]
 r724: [59..60]
 r725: [53..53] [46..49]
 r726: [46..47]
 r727: [50..51]
 r728: [42..42] [37..40]
 r729: [37..38]
 r730: [35..35] [26..31]
 r731: [26..27]
 r732: [32..33]
 r733: [28..29]
 r734: [18..18] [13..16]
 r735: [13..14]
 r736: [11..11] [6..9]
 r737: [6..7]
 r738: [0..1]
Live info was changed -- recalculate it

********** Pseudo live ranges #2: **********

  BB 8
   Insn 413: point = 0
   Insn 412: point = 0
   Insn 407: point = 0
   Insn 739: point = 1
   Insn 406: point = 2
   Insn 405: point = 4
   Insn 737: point = 6
	Hard reg 24 is preferable by r736 with profit 66
   Insn 404: point = 8
   Insn 738: point = 9
   Insn 736: point = 11
   Insn 735: point = 13
   Insn 733: point = 14
	Hard reg 22 is preferable by r734 with profit 66
   Insn 403: point = 16
   Insn 734: point = 17
   Insn 732: point = 19
   Insn 731: point = 21
   Insn 402: point = 22
   Insn 398: point = 24
   Insn 397: point = 26
   Insn 727: point = 28
	Hard reg 22 is preferable by r730 with profit 66
   Insn 396: point = 30
   Insn 730: point = 31
	   Creating copy r731<-r733@66
   Insn 728: point = 33
	Hard reg 43 is preferable by r733 with profit 66
   Insn 729: point = 35
   Insn 726: point = 37
	Hard reg 37 is preferable by r732 with profit 66
   Insn 725: point = 39
   Insn 723: point = 40
	Hard reg 23 is preferable by r728 with profit 66
   Insn 395: point = 42
   Insn 724: point = 43
   Insn 722: point = 45
   Insn 721: point = 47
   Insn 394: point = 48
   Insn 718: point = 50
	Hard reg 21 is preferable by r725 with profit 66
   Insn 393: point = 52
   Insn 719: point = 53
   Insn 720: point = 55
   Insn 717: point = 57
	Hard reg 6 is preferable by r727 with profit 66
   Insn 716: point = 59
   Insn 713: point = 60
	Hard reg 22 is preferable by r722 with profit 66
   Insn 392: point = 62
   Insn 714: point = 63
   Insn 715: point = 65
   Insn 712: point = 67
	Hard reg 3 is preferable by r724 with profit 66
   Insn 711: point = 69
   Insn 390: point = 70
   Insn 710: point = 71
   Insn 389: point = 72
   Insn 388: point = 74
   Insn 708: point = 76
	Hard reg 22 is preferable by r719 with profit 66
   Insn 387: point = 78
   Insn 709: point = 79
   Insn 707: point = 81
   Insn 706: point = 83
   Insn 704: point = 84
	Hard reg 23 is preferable by r717 with profit 66
   Insn 386: point = 86
   Insn 705: point = 87
   Insn 703: point = 89
   Insn 702: point = 91
   Insn 385: point = 92
   Insn 384: point = 94
   Insn 700: point = 96
	Hard reg 24 is preferable by r715 with profit 66
   Insn 383: point = 98
   Insn 701: point = 99
   Insn 699: point = 101
   Insn 698: point = 103
   Insn 696: point = 104
	Hard reg 22 is preferable by r713 with profit 66
   Insn 382: point = 106
   Insn 697: point = 107
   Insn 695: point = 109
   Insn 694: point = 111
   Insn 381: point = 112
   Insn 380: point = 114
   Insn 691: point = 116
	Hard reg 21 is preferable by r710 with profit 66
   Insn 379: point = 118
   Insn 692: point = 119
   Insn 693: point = 121
   Insn 690: point = 123
	Hard reg 38 is preferable by r712 with profit 66
   Insn 689: point = 125
   Insn 687: point = 126
	Hard reg 23 is preferable by r708 with profit 66
   Insn 378: point = 128
   Insn 688: point = 129
   Insn 686: point = 131
   Insn 685: point = 133
   Insn 684: point = 134
	Hard reg 22 is preferable by r707 with profit 66
   Insn 377: point = 136
   Insn 683: point = 138
   Insn 682: point = 139
   Insn 680: point = 140
	Hard reg 21 is preferable by r705 with profit 66
   Insn 376: point = 142
   Insn 681: point = 143
   Insn 679: point = 145
   Insn 678: point = 147
   Insn 674: point = 148
	Hard reg 22 is preferable by r701 with profit 66
   Insn 375: point = 150
   Insn 677: point = 151
	   Creating copy r702<-r704@66
   Insn 675: point = 153
	Hard reg 44 is preferable by r704 with profit 66
   Insn 676: point = 155
   Insn 673: point = 157
	Hard reg 42 is preferable by r703 with profit 66
   Insn 672: point = 159
   Insn 446: point = 160
   Insn 445: point = 162
   Insn 444: point = 164
   Insn 443: point = 166
   Insn 442: point = 168
   Insn 441: point = 170
   Insn 440: point = 172
   Insn 439: point = 174
  BB 6
   Insn 270: point = 177
   Insn 644: point = 177
   Insn 269: point = 179
   Insn 643: point = 179
   Insn 268: point = 181
   Insn 266: point = 181
   Insn 265: point = 183
   Insn 642: point = 185
   Insn 641: point = 186
   Insn 264: point = 188
   Insn 263: point = 190
   Insn 262: point = 192
   Insn 640: point = 194
   Insn 639: point = 195
   Insn 261: point = 197
   Insn 260: point = 199
   Insn 637: point = 201
	Hard reg 1 is preferable by r667 with profit 933
   Insn 259: point = 203
   Insn 638: point = 204
   Insn 636: point = 206
   Insn 258: point = 208
   Insn 635: point = 210
	Hard reg 37 is preferable by r666 with profit 933
   Insn 257: point = 212
   Insn 634: point = 212
   Insn 256: point = 214
   Insn 633: point = 216
   Insn 255: point = 218
   Insn 632: point = 220
	Hard reg 3 is preferable by r664 with profit 933
   Insn 254: point = 222
   Insn 631: point = 222
	Hard reg 3 is preferable by r664 with profit 933
	Hard reg 37 is preferable by r664 with profit 933
   Insn 253: point = 224
   Insn 630: point = 226
   Insn 252: point = 227
   Insn 628: point = 229
	Hard reg 0 is preferable by r661 with profit 933
   Insn 251: point = 231
   Insn 629: point = 232
   Insn 627: point = 234
   Insn 626: point = 236
   Insn 250: point = 238
   Insn 625: point = 238
	Hard reg 40 is preferable by r660 with profit 933
   Insn 249: point = 240
   Insn 248: point = 242
   Insn 247: point = 244
   Insn 246: point = 246
   Insn 624: point = 248
   Insn 623: point = 249
   Insn 245: point = 251
   Insn 244: point = 253
   Insn 621: point = 255
	Hard reg 1 is preferable by r656 with profit 933
   Insn 243: point = 257
   Insn 622: point = 258
   Insn 620: point = 260
   Insn 242: point = 262
   Insn 241: point = 264
   Insn 240: point = 266
   Insn 619: point = 268
   Insn 239: point = 270
   Insn 238: point = 272
   Insn 237: point = 274
   Insn 236: point = 276
   Insn 617: point = 278
	Hard reg 0 is preferable by r653 with profit 933
   Insn 235: point = 280
   Insn 618: point = 281
   Insn 616: point = 283
   Insn 615: point = 285
   Insn 234: point = 287
   Insn 614: point = 287
	Hard reg 3 is preferable by r652 with profit 933
   Insn 233: point = 289
   Insn 613: point = 291
   Insn 612: point = 292
   Insn 232: point = 294
   Insn 611: point = 296
	Hard reg 6 is preferable by r649 with profit 933
   Insn 231: point = 298
   Insn 610: point = 298
	Hard reg 6 is preferable by r649 with profit 933
	Hard reg 2 is preferable by r649 with profit 933
   Insn 230: point = 300
   Insn 609: point = 302
   Insn 608: point = 303
   Insn 229: point = 305
   Insn 228: point = 307
   Insn 606: point = 309
	Hard reg 1 is preferable by r645 with profit 933
   Insn 227: point = 311
   Insn 607: point = 312
   Insn 605: point = 314
   Insn 226: point = 316
   Insn 225: point = 318
   Insn 224: point = 320
   Insn 223: point = 322
   Insn 222: point = 324
   Insn 221: point = 326
   Insn 220: point = 328
   Insn 603: point = 330
	Hard reg 1 is preferable by r643 with profit 933
   Insn 219: point = 332
   Insn 604: point = 333
   Insn 602: point = 335
   Insn 601: point = 337
	Hard reg 43 is preferable by r642 with profit 933
   Insn 218: point = 339
   Insn 600: point = 339
	Hard reg 43 is preferable by r642 with profit 933
	Hard reg 6 is preferable by r642 with profit 933
   Insn 217: point = 341
   Insn 599: point = 343
   Insn 597: point = 344
   Insn 216: point = 346
   Insn 598: point = 347
   Insn 596: point = 348
	Hard reg 43 is preferable by r639 with profit 933
   Insn 595: point = 350
   Insn 215: point = 352
   Insn 594: point = 352
	Hard reg 41 is preferable by r638 with profit 933
   Insn 214: point = 354
   Insn 593: point = 356
   Insn 592: point = 357
   Insn 213: point = 359
   Insn 212: point = 361
   Insn 590: point = 363
	Hard reg 44 is preferable by r634 with profit 933
   Insn 211: point = 365
   Insn 591: point = 366
   Insn 589: point = 368
   Insn 210: point = 370
   Insn 209: point = 372
   Insn 208: point = 374
   Insn 207: point = 376
   Insn 206: point = 378
   Insn 205: point = 380
   Insn 204: point = 382
   Insn 587: point = 384
	Hard reg 44 is preferable by r632 with profit 933
   Insn 203: point = 386
   Insn 588: point = 387
   Insn 586: point = 389
   Insn 202: point = 391
   Insn 201: point = 393
   Insn 200: point = 395
   Insn 199: point = 397
   Insn 198: point = 399
   Insn 197: point = 401
   Insn 196: point = 403
   Insn 584: point = 405
	Hard reg 44 is preferable by r630 with profit 933
   Insn 195: point = 407
   Insn 585: point = 408
   Insn 583: point = 410
   Insn 194: point = 412
   Insn 582: point = 414
	Hard reg 40 is preferable by r629 with profit 933
   Insn 193: point = 416
   Insn 581: point = 416
   Insn 580: point = 418
	Hard reg 42 is preferable by r628 with profit 933
   Insn 192: point = 420
   Insn 579: point = 420
   Insn 191: point = 422
   Insn 578: point = 424
	Hard reg 41 is preferable by r627 with profit 933
   Insn 190: point = 426
   Insn 577: point = 426
   Insn 189: point = 428
   Insn 576: point = 430
   Insn 188: point = 432
   Insn 575: point = 434
   Insn 573: point = 435
	Hard reg 39 is preferable by r623 with profit 933
   Insn 187: point = 437
   Insn 574: point = 438
   Insn 572: point = 440
   Insn 186: point = 442
   Insn 571: point = 444
	Hard reg 3 is preferable by r622 with profit 933
   Insn 185: point = 446
   Insn 570: point = 446
	Hard reg 3 is preferable by r622 with profit 933
	Hard reg 40 is preferable by r622 with profit 933
   Insn 184: point = 448
   Insn 183: point = 450
   Insn 182: point = 452
   Insn 181: point = 454
   Insn 180: point = 456
   Insn 568: point = 458
	Hard reg 38 is preferable by r620 with profit 933
   Insn 179: point = 460
   Insn 569: point = 461
   Insn 567: point = 463
   Insn 178: point = 465
   Insn 566: point = 467
	Hard reg 40 is preferable by r619 with profit 933
   Insn 177: point = 469
   Insn 565: point = 469
   Insn 564: point = 471
	Hard reg 43 is preferable by r618 with profit 933
   Insn 176: point = 473
   Insn 563: point = 473
   Insn 175: point = 475
   Insn 562: point = 477
	Hard reg 37 is preferable by r617 with profit 933
   Insn 174: point = 479
   Insn 561: point = 479
	Hard reg 37 is preferable by r617 with profit 933
	Hard reg 3 is preferable by r617 with profit 933
   Insn 173: point = 481
   Insn 560: point = 483
   Insn 172: point = 485
   Insn 559: point = 487
   Insn 557: point = 488
	Hard reg 39 is preferable by r613 with profit 933
   Insn 171: point = 490
   Insn 558: point = 491
   Insn 556: point = 493
   Insn 170: point = 495
   Insn 169: point = 497
   Insn 555: point = 499
   Insn 554: point = 500
   Insn 168: point = 502
   Insn 167: point = 504
   Insn 166: point = 506
   Insn 165: point = 508
   Insn 164: point = 510
   Insn 163: point = 512
   Insn 553: point = 514
   Insn 162: point = 516
   Insn 552: point = 518
	Hard reg 6 is preferable by r609 with profit 933
   Insn 161: point = 520
   Insn 551: point = 520
	Hard reg 6 is preferable by r609 with profit 933
	Hard reg 43 is preferable by r609 with profit 933
   Insn 550: point = 522
	Hard reg 37 is preferable by r608 with profit 933
   Insn 160: point = 524
   Insn 549: point = 524
   Insn 159: point = 526
   Insn 158: point = 528
   Insn 157: point = 530
   Insn 548: point = 532
   Insn 156: point = 534
   Insn 155: point = 536
   Insn 547: point = 538
   Insn 546: point = 540
   Insn 154: point = 542
   Insn 545: point = 542
	Hard reg 37 is preferable by r605 with profit 933
   Insn 153: point = 544
   Insn 544: point = 546
   Insn 543: point = 547
   Insn 152: point = 549
   Insn 151: point = 551
   Insn 150: point = 553
   Insn 149: point = 555
   Insn 148: point = 557
   Insn 147: point = 559
   Insn 146: point = 561
   Insn 145: point = 563
   Insn 144: point = 565
   Insn 143: point = 567
   Insn 542: point = 569
	Hard reg 2 is preferable by r602 with profit 933
   Insn 142: point = 571
   Insn 541: point = 571
	Hard reg 2 is preferable by r602 with profit 933
	Hard reg 6 is preferable by r602 with profit 933
   Insn 141: point = 573
   Insn 540: point = 575
   Insn 140: point = 577
   Insn 139: point = 579
   Insn 539: point = 581
  BB 7
   Insn 422: point = 584
   Insn 671: point = 584
   Insn 368: point = 586
   Insn 670: point = 588
   Insn 365: point = 590
   Insn 669: point = 592
   Insn 363: point = 594
   Insn 362: point = 595
   Insn 668: point = 596
   Insn 359: point = 598
   Insn 358: point = 599
   Insn 667: point = 600
   Insn 356: point = 602
   Insn 666: point = 604
   Insn 353: point = 606
   Insn 665: point = 608
   Insn 351: point = 610
   Insn 350: point = 611
   Insn 664: point = 612
   Insn 347: point = 614
   Insn 346: point = 615
   Insn 663: point = 616
   Insn 344: point = 618
   Insn 662: point = 620
   Insn 341: point = 622
   Insn 661: point = 624
   Insn 339: point = 626
   Insn 338: point = 627
   Insn 660: point = 628
   Insn 335: point = 630
   Insn 334: point = 631
   Insn 659: point = 632
   Insn 332: point = 634
   Insn 658: point = 636
   Insn 329: point = 638
   Insn 657: point = 640
   Insn 327: point = 642
   Insn 326: point = 643
   Insn 656: point = 644
   Insn 323: point = 646
   Insn 322: point = 647
   Insn 655: point = 648
   Insn 320: point = 650
   Insn 654: point = 652
   Insn 317: point = 654
   Insn 653: point = 656
   Insn 315: point = 658
   Insn 314: point = 659
   Insn 652: point = 660
   Insn 311: point = 662
   Insn 310: point = 663
   Insn 651: point = 664
   Insn 308: point = 666
   Insn 650: point = 668
   Insn 305: point = 670
   Insn 649: point = 672
   Insn 303: point = 674
   Insn 302: point = 675
   Insn 648: point = 676
   Insn 299: point = 678
   Insn 298: point = 679
   Insn 296: point = 680
   Insn 647: point = 682
   Insn 293: point = 684
   Insn 646: point = 686
   Insn 291: point = 688
   Insn 290: point = 689
   Insn 287: point = 690
   Insn 286: point = 691
   Insn 284: point = 692
   Insn 281: point = 694
   Insn 645: point = 696
   Insn 279: point = 698
   Insn 278: point = 699
   Insn 277: point = 700
   Insn 275: point = 701
   Insn 274: point = 702
  BB 5
   Insn 438: point = 704
   Insn 437: point = 706
   Insn 436: point = 708
   Insn 435: point = 710
   Insn 434: point = 712
   Insn 433: point = 714
   Insn 432: point = 716
   Insn 431: point = 718
   Insn 430: point = 720
   Insn 429: point = 722
   Insn 428: point = 724
   Insn 427: point = 726
   Insn 426: point = 728
   Insn 425: point = 730
   Insn 424: point = 732
   Insn 59: point = 734
   Insn 58: point = 735
   Insn 57: point = 736
   Insn 56: point = 737
   Insn 55: point = 738
   Insn 54: point = 739
   Insn 53: point = 740
   Insn 52: point = 741
   Insn 51: point = 742
   Insn 50: point = 743
   Insn 49: point = 744
   Insn 48: point = 745
   Insn 47: point = 746
   Insn 46: point = 747
   Insn 45: point = 748
   Insn 44: point = 749
   Insn 43: point = 750
   Insn 42: point = 751
   Insn 538: point = 753
   Insn 41: point = 754
   Insn 537: point = 756
   Insn 40: point = 757
   Insn 39: point = 758
   Insn 38: point = 759
   Insn 37: point = 760
   Insn 36: point = 761
   Insn 536: point = 763
   Insn 35: point = 764
   Insn 535: point = 766
   Insn 137: point = 767
  BB 3
   Insn 420: point = 769
   Insn 534: point = 769
   Insn 134: point = 771
   Insn 533: point = 771
	Hard reg 44 is preferable by r595 with profit 33
   Insn 532: point = 773
	Hard reg 3 is preferable by r594 with profit 33
   Insn 133: point = 775
   Insn 531: point = 775
   Insn 132: point = 776
   Insn 530: point = 778
   Insn 529: point = 779
   Insn 131: point = 781
   Insn 528: point = 781
	Hard reg 37 is preferable by r592 with profit 33
   Insn 527: point = 783
	Hard reg 6 is preferable by r591 with profit 33
   Insn 130: point = 785
   Insn 526: point = 785
   Insn 129: point = 786
   Insn 525: point = 788
  BB 4
   Insn 34: point = 790
   Insn 33: point = 791
   Insn 32: point = 792
   Insn 31: point = 793
  BB 2
   Insn 127: point = 795
   Insn 126: point = 795
   Insn 524: point = 796
   Insn 523: point = 797
   Insn 125: point = 799
   Insn 522: point = 799
   Insn 521: point = 800
   Insn 124: point = 802
   Insn 520: point = 804
   Insn 519: point = 805
   Insn 123: point = 807
   Insn 518: point = 807
   Insn 517: point = 808
   Insn 122: point = 810
   Insn 516: point = 812
   Insn 515: point = 813
   Insn 121: point = 815
   Insn 514: point = 815
   Insn 513: point = 816
   Insn 120: point = 818
   Insn 512: point = 820
   Insn 511: point = 821
	Hard reg 38 is preferable by r579 with profit 66
   Insn 119: point = 823
   Insn 510: point = 823
   Insn 509: point = 824
   Insn 118: point = 826
   Insn 508: point = 828
   Insn 507: point = 829
   Insn 117: point = 831
   Insn 506: point = 833
   Insn 505: point = 834
   Insn 116: point = 836
   Insn 504: point = 838
   Insn 503: point = 839
   Insn 115: point = 841
   Insn 502: point = 843
   Insn 501: point = 844
   Insn 114: point = 846
   Insn 500: point = 848
   Insn 499: point = 849
   Insn 113: point = 851
   Insn 498: point = 853
   Insn 497: point = 854
   Insn 112: point = 856
   Insn 496: point = 858
   Insn 495: point = 859
   Insn 111: point = 861
   Insn 494: point = 863
   Insn 493: point = 864
   Insn 110: point = 866
   Insn 492: point = 868
   Insn 109: point = 869
   Insn 491: point = 870
   Insn 490: point = 871
   Insn 108: point = 873
   Insn 489: point = 873
	Hard reg 44 is preferable by r559 with profit 66
   Insn 107: point = 875
   Insn 106: point = 877
   Insn 488: point = 878
   Insn 487: point = 879
   Insn 105: point = 881
   Insn 486: point = 881
	Hard reg 44 is preferable by r557 with profit 66
   Insn 104: point = 883
   Insn 103: point = 884
   Insn 485: point = 885
   Insn 484: point = 886
   Insn 102: point = 888
   Insn 483: point = 888
	Hard reg 42 is preferable by r555 with profit 66
   Insn 101: point = 890
   Insn 100: point = 891
   Insn 482: point = 892
   Insn 481: point = 893
   Insn 99: point = 895
   Insn 480: point = 895
	Hard reg 42 is preferable by r553 with profit 66
   Insn 98: point = 897
   Insn 97: point = 898
   Insn 479: point = 899
   Insn 478: point = 900
   Insn 96: point = 902
   Insn 477: point = 902
	Hard reg 0 is preferable by r551 with profit 66
   Insn 95: point = 904
   Insn 94: point = 905
   Insn 476: point = 906
   Insn 475: point = 907
   Insn 93: point = 909
   Insn 474: point = 909
	Hard reg 0 is preferable by r549 with profit 66
   Insn 92: point = 911
   Insn 91: point = 912
   Insn 473: point = 913
   Insn 472: point = 914
   Insn 90: point = 916
   Insn 471: point = 916
	Hard reg 0 is preferable by r547 with profit 66
   Insn 89: point = 918
   Insn 88: point = 919
   Insn 470: point = 920
   Insn 469: point = 921
   Insn 87: point = 923
   Insn 468: point = 923
	Hard reg 0 is preferable by r545 with profit 66
   Insn 86: point = 925
   Insn 85: point = 926
   Insn 467: point = 927
   Insn 466: point = 928
   Insn 84: point = 930
   Insn 465: point = 930
	Hard reg 3 is preferable by r543 with profit 66
   Insn 83: point = 932
   Insn 82: point = 933
   Insn 464: point = 934
   Insn 463: point = 935
   Insn 81: point = 937
   Insn 462: point = 937
	Hard reg 3 is preferable by r541 with profit 66
   Insn 80: point = 939
   Insn 79: point = 940
   Insn 461: point = 941
   Insn 460: point = 942
   Insn 78: point = 944
   Insn 459: point = 944
	Hard reg 0 is preferable by r539 with profit 66
   Insn 77: point = 946
   Insn 76: point = 947
   Insn 458: point = 948
   Insn 457: point = 949
   Insn 75: point = 951
   Insn 456: point = 951
	Hard reg 0 is preferable by r537 with profit 66
   Insn 74: point = 953
   Insn 73: point = 954
   Insn 455: point = 955
   Insn 454: point = 956
   Insn 72: point = 958
   Insn 453: point = 958
	Hard reg 0 is preferable by r535 with profit 66
   Insn 71: point = 960
   Insn 70: point = 961
   Insn 452: point = 962
   Insn 451: point = 963
   Insn 69: point = 965
   Insn 450: point = 965
	Hard reg 38 is preferable by r533 with profit 66
   Insn 68: point = 967
   Insn 67: point = 968
   Insn 449: point = 968
	Hard reg 5 is preferable by r532 with profit 66
   Insn 66: point = 970
   Insn 448: point = 970
	Hard reg 5 is preferable by r532 with profit 66
	Hard reg 6 is preferable by r532 with profit 66
   Insn 65: point = 972
   Insn 64: point = 973
   Insn 63: point = 973
   Insn 62: point = 975
   Insn 29: point = 976
   Insn 28: point = 977
 r113: [180..750] [177..177]
 r128: [82..864]
 r129: [80..859]
 r130: [90..854]
 r131: [88..849]
 r132: [12..844]
 r133: [10..839]
 r134: [20..834]
 r135: [18..829]
 r136: [102..824]
 r137: [100..816]
 r138: [110..808]
 r139: [108..800]
 r141: [782..786]
 r142: [772..776]
 r144: [558..573]
 r146: [554..567]
 r147: [550..565]
 r149: [545..561]
 r152: [383..555]
 r154: [325..551]
 r155: [269..547]
 r157: [213..540]
 r160: [511..530]
 r162: [507..526]
 r163: [503..522]
 r165: [498..516]
 r168: [329..508]
 r170: [273..504]
 r171: [217..500]
 r173: [373..495]
 r176: [457..481]
 r178: [453..475]
 r179: [449..471]
 r181: [447..465]
 r184: [277..454]
 r186: [223..450]
 r187: [375..448]
 r189: [319..442]
 r192: [404..428]
 r194: [400..422]
 r195: [396..418]
 r197: [394..412]
 r200: [228..401]
 r202: [379..397]
 r203: [321..395]
 r205: [265..391]
 r206: [421..797] [130..292]
 r209: [362..380]
 r211: [355..376]
 r212: [349..374]
 r214: [342..370]
 r217: [576..764] [146..357]
 r219: [790..793] [427..769] [64..350]
 r220: [474..805] [132..344]
 r222: [733..757] [34..174]
 r225: [308..326]
 r227: [301..322]
 r228: [295..320]
 r230: [290..316]
 r233: [533..761] [144..303]
 r235: [790..790] [731..783] [58..172]
 r238: [470..754] [46..285]
 r241: [254..274]
 r243: [247..270]
 r244: [243..266]
 r247: [241..262]
 r250: [729..760] [158..170]
 r252: [790..791] [705..779] [54..168]
 r254: [727..821] [124..166]
 r256: [417..751] [44..236]
 r260: [200..224]
 r262: [193..218]
 r264: [189..214]
 r266: [184..208]
 r270: [725..759] [154..164]
 r273: [790..792] [723..773] [68..162]
 r274: [525..813] [120..186]
 r276: [721..758] [38..160]
 r281: [719..767]
 r293: [717..973]
 r296: [704..734] [582..696]
 r297: [707..968]
 r298: [715..735]
 r301: [713..963]
 r304: [704..736] [539..686]
 r305: [704..956] [515..682]
 r306: [711..737]
 r309: [704..949] [494..676]
 r312: [704..738] [492..672]
 r313: [704..942] [464..668]
 r314: [709..739]
 r317: [704..935] [441..660]
 r320: [704..740] [439..656]
 r321: [704..928] [411..652]
 r322: [704..741] [409..648]
 r325: [704..921] [390..644]
 r328: [704..742] [388..640]
 r329: [704..914] [369..636]
 r330: [704..743] [367..632]
 r333: [704..907] [336..628]
 r336: [704..744] [334..624]
 r337: [704..900] [315..620]
 r338: [704..745] [313..616]
 r341: [704..893] [284..612]
 r344: [704..746] [282..608]
 r345: [704..886] [261..604]
 r346: [704..747] [259..600]
 r349: [704..879] [235..596]
 r352: [704..748] [233..592]
 r353: [704..871] [207..588]
 r354: [704..749] [205..584]
 r357: [876..976]
 r358: [974..975]
 r359: [971..972]
 r360: [966..967]
 r361: [959..960]
 r362: [952..953]
 r363: [945..946]
 r364: [938..939]
 r365: [931..932]
 r366: [924..925]
 r367: [917..918]
 r368: [910..911]
 r369: [903..904]
 r370: [896..897]
 r371: [889..890]
 r372: [882..883]
 r373: [874..875]
 r374: [578..579]
 r375: [574..577]
 r376: [568..569]
 r377: [562..563]
 r378: [558..559]
 r379: [556..557]
 r380: [552..553]
 r381: [543..544]
 r382: [535..536]
 r383: [531..534]
 r384: [527..528]
 r385: [517..518]
 r386: [511..512]
 r387: [509..510]
 r388: [505..506]
 r389: [496..497]
 r390: [486..488]
 r391: [482..485]
 r392: [476..477]
 r393: [466..467]
 r394: [457..458]
 r395: [455..456]
 r396: [451..452]
 r397: [443..444]
 r398: [433..435]
 r399: [429..432]
 r400: [423..424]
 r401: [413..414]
 r402: [404..405]
 r403: [402..403]
 r404: [398..399]
 r405: [392..393]
 r406: [383..384]
 r407: [381..382]
 r408: [377..378]
 r409: [371..372]
 r410: [362..363]
 r411: [360..361]
 r412: [353..354]
 r413: [340..341]
 r414: [329..330]
 r415: [327..328]
 r416: [323..324]
 r417: [317..318]
 r418: [308..309]
 r419: [306..307]
 r420: [299..300]
 r421: [288..289]
 r422: [277..278]
 r423: [275..276]
 r424: [271..272]
 r425: [263..264]
 r426: [254..255]
 r427: [252..253]
 r428: [245..246]
 r429: [239..240]
 r430: [228..229]
 r431: [225..227]
 r432: [219..220]
 r433: [209..210]
 r434: [200..201]
 r435: [198..199]
 r436: [191..192]
 r437: [182..183]
 r438: [693..702]
 r439: [587..700]
 r440: [695..699]
 r444: [681..691]
 r446: [685..689]
 r450: [667..679]
 r452: [671..675]
 r456: [651..663]
 r458: [655..659]
 r462: [635..647]
 r464: [639..643]
 r468: [619..631]
 r470: [623..627]
 r474: [603..615]
 r476: [607..611]
 r480: [587..599]
 r482: [591..595]
 r486: [113..134]
 r487: [137..148]
 r488: [138..140]
 r489: [113..114]
 r490: [115..126]
 r491: [115..116]
 r492: [93..112]
 r493: [23..94]
 r494: [95..104]
 r495: [95..96]
 r496: [73..92]
 r497: [73..74]
 r498: [75..84]
 r499: [75..76]
 r500: [70..72]
 r501: [25..48]
 r502: [49..60]
 r503: [49..50]
 r504: [25..26]
 r505: [27..40]
 r506: [27..28]
 r507: [23..24]
 r511: [3..22]
 r512: [3..4]
 r513: [5..14]
 r514: [5..6]
 r515: [0..2]
 r517: [521..732] [175..337]
 r518: [572..730] [173..296]
 r519: [484..728] [171..249]
 r520: [529..704] [169..244]
 r521: [566..726] [167..242]
 r522: [431..724] [165..195]
 r523: [480..722] [163..190]
 r524: [564..720] [161..181]
 r525: [177..718]
 r526: [704..716] [580..701]
 r527: [704..706] [560..694]
 r528: [704..714] [560..692]
 r529: [704..712] [537..690]
 r530: [704..710] [513..680]
 r531: [704..708] [462..664]
 r532: [969..970]
 r533: [964..965]
 r534: [961..962]
 r535: [957..958]
 r536: [954..955]
 r537: [950..951]
 r538: [947..948]
 r539: [943..944]
 r540: [940..941]
 r541: [936..937]
 r542: [933..934]
 r543: [929..930]
 r544: [926..927]
 r545: [922..923]
 r546: [919..920]
 r547: [915..916]
 r548: [912..913]
 r549: [908..909]
 r550: [905..906]
 r551: [901..902]
 r552: [898..899]
 r553: [894..895]
 r554: [891..892]
 r555: [887..888]
 r556: [884..885]
 r557: [880..881]
 r558: [877..878]
 r559: [872..873]
 r560: [869..870]
 r561: [867..868]
 r562: [865..866]
 r563: [862..863]
 r564: [860..861]
 r565: [857..858]
 r566: [855..856]
 r567: [852..853]
 r568: [850..851]
 r569: [847..848]
 r570: [845..846]
 r571: [842..843]
 r572: [840..841]
 r573: [837..838]
 r574: [835..836]
 r575: [832..833]
 r576: [830..831]
 r577: [827..828]
 r578: [825..826]
 r579: [822..823]
 r580: [819..820]
 r581: [817..818]
 r582: [814..815]
 r583: [811..812]
 r584: [809..810]
 r585: [806..807]
 r586: [803..804]
 r587: [801..802]
 r588: [798..799]
 r589: [795..796]
 r590: [787..788]
 r591: [784..785]
 r592: [780..781]
 r593: [777..778]
 r594: [774..775]
 r595: [770..771]
 r596: [765..766]
 r597: [762..763]
 r598: [755..756]
 r599: [752..753]
 r600: [580..581]
 r601: [574..575]
 r602: [570..571]
 r603: [548..549]
 r604: [545..546]
 r605: [541..542]
 r606: [537..538]
 r607: [531..532]
 r608: [523..524]
 r609: [519..520]
 r610: [513..514]
 r611: [501..502]
 r612: [498..499]
 r613: [489..493]
 r614: [490..491]
 r615: [486..487]
 r616: [482..483]
 r617: [478..479]
 r618: [472..473]
 r619: [468..469]
 r620: [459..463]
 r621: [460..461]
 r622: [445..446]
 r623: [436..440]
 r624: [437..438]
 r625: [433..434]
 r626: [429..430]
 r627: [425..426]
 r628: [419..420]
 r629: [415..416]
 r630: [406..410]
 r631: [407..408]
 r632: [385..389]
 r633: [386..387]
 r634: [364..368]
 r635: [365..366]
 r636: [358..359]
 r637: [355..356]
 r638: [351..352]
 r639: [345..348]
 r640: [346..347]
 r641: [342..343]
 r642: [338..339]
 r643: [331..335]
 r644: [332..333]
 r645: [310..314]
 r646: [311..312]
 r647: [304..305]
 r648: [301..302]
 r649: [297..298]
 r650: [293..294]
 r651: [290..291]
 r652: [286..287]
 r653: [279..283]
 r654: [280..281]
 r655: [267..268]
 r656: [256..260]
 r657: [257..258]
 r658: [250..251]
 r659: [247..248]
 r660: [237..238]
 r661: [230..234]
 r662: [231..232]
 r663: [225..226]
 r664: [221..222]
 r665: [215..216]
 r666: [211..212]
 r667: [202..206]
 r668: [203..204]
 r669: [196..197]
 r670: [193..194]
 r671: [187..188]
 r672: [184..185]
 r673: [178..179]
 r674: [697..698]
 r675: [687..688]
 r676: [683..684]
 r677: [677..678]
 r678: [673..674]
 r679: [669..670]
 r680: [665..666]
 r681: [661..662]
 r682: [657..658]
 r683: [653..654]
 r684: [649..650]
 r685: [645..646]
 r686: [641..642]
 r687: [637..638]
 r688: [633..634]
 r689: [629..630]
 r690: [625..626]
 r691: [621..622]
 r692: [617..618]
 r693: [613..614]
 r694: [609..610]
 r695: [605..606]
 r696: [601..602]
 r697: [597..598]
 r698: [593..594]
 r699: [589..590]
 r700: [585..586]
 r701: [159..159] [149..155]
 r702: [150..151]
 r703: [156..157]
 r704: [152..153]
 r705: [147..147] [141..145]
 r706: [142..143]
 r707: [135..139]
 r708: [133..133] [127..131]
 r709: [128..129]
 r710: [125..125] [117..121]
 r711: [118..119]
 r712: [122..123]
 r713: [111..111] [105..109]
 r714: [106..107]
 r715: [103..103] [97..101]
 r716: [98..99]
 r717: [91..91] [85..89]
 r718: [86..87]
 r719: [83..83] [77..81]
 r720: [78..79]
 r721: [70..71]
 r722: [69..69] [61..65]
 r723: [62..63]
 r724: [66..67]
 r725: [59..59] [51..55]
 r726: [52..53]
 r727: [56..57]
 r728: [47..47] [41..45]
 r729: [42..43]
 r730: [39..39] [29..35]
 r731: [30..31]
 r732: [36..37]
 r733: [32..33]
 r734: [21..21] [15..19]
 r735: [16..17]
 r736: [13..13] [7..11]
 r737: [8..9]
 r738: [0..1]
Compressing live ranges: from 977 to 828 - 84%
Ranges after the compression:
 r113: [159..653] [156..156]
 r128: [73..733]
 r129: [71..729]
 r130: [80..725]
 r131: [78..721]
 r132: [10..717]
 r133: [8..713]
 r134: [17..709]
 r135: [15..705]
 r136: [91..701]
 r137: [89..695]
 r138: [98..689]
 r139: [96..683]
 r141: [672..675]
 r142: [664..667]
 r144: [511..526]
 r146: [507..520]
 r147: [503..518]
 r149: [499..514]
 r152: [345..508]
 r154: [293..504]
 r155: [241..500]
 r157: [189..494]
 r160: [465..484]
 r162: [461..480]
 r163: [457..476]
 r165: [453..470]
 r168: [297..462]
 r170: [245..458]
 r171: [193..454]
 r173: [335..450]
 r176: [415..438]
 r178: [411..432]
 r179: [407..428]
 r181: [405..422]
 r184: [249..412]
 r186: [199..408]
 r187: [337..406]
 r189: [287..400]
 r192: [365..388]
 r194: [361..382]
 r195: [357..378]
 r197: [355..372]
 r200: [203..362]
 r202: [341..358]
 r203: [289..356]
 r205: [237..352]
 r206: [381..681] [116..262]
 r209: [325..342]
 r211: [319..338]
 r212: [313..336]
 r214: [309..332]
 r217: [529..659] [127..320]
 r219: [678..679] [387..661] [57..314]
 r220: [431..687] [118..310]
 r222: [652..657] [30..154]
 r225: [277..294]
 r227: [271..290]
 r228: [265..288]
 r230: [261..284]
 r233: [487..657] [125..272]
 r235: [678..678] [650..673] [52..152]
 r238: [427..655] [41..256]
 r241: [227..246]
 r243: [221..242]
 r244: [217..238]
 r247: [215..234]
 r250: [648..657] [138..150]
 r252: [678..679] [624..669] [48..148]
 r254: [646..699] [111..146]
 r256: [377..653] [39..210]
 r260: [177..200]
 r262: [171..194]
 r264: [167..190]
 r266: [163..184]
 r270: [644..657] [134..144]
 r273: [678..679] [642..665] [61..142]
 r274: [479..693] [107..164]
 r276: [640..657] [34..140]
 r281: [638..661]
 r293: [636..825]
 r296: [623..653] [535..620]
 r297: [626..821]
 r298: [634..653]
 r301: [632..817]
 r304: [623..653] [493..614]
 r305: [623..811] [469..610]
 r306: [630..653]
 r309: [623..805] [449..606]
 r312: [623..653] [447..604]
 r313: [623..799] [421..600]
 r314: [628..653]
 r317: [623..793] [399..594]
 r320: [623..653] [397..592]
 r321: [623..787] [371..588]
 r322: [623..653] [369..584]
 r325: [623..781] [351..582]
 r328: [623..653] [349..580]
 r329: [623..775] [331..576]
 r330: [623..653] [329..572]
 r333: [623..769] [303..570]
 r336: [623..653] [301..568]
 r337: [623..763] [283..564]
 r338: [623..653] [281..560]
 r341: [623..757] [255..558]
 r344: [623..653] [253..556]
 r345: [623..751] [233..552]
 r346: [623..653] [231..548]
 r349: [623..745] [209..546]
 r352: [623..653] [207..544]
 r353: [623..739] [183..540]
 r354: [623..653] [181..536]
 r357: [744..827]
 r358: [826..827]
 r359: [824..825]
 r360: [820..821]
 r361: [814..815]
 r362: [808..809]
 r363: [802..803]
 r364: [796..797]
 r365: [790..791]
 r366: [784..785]
 r367: [778..779]
 r368: [772..773]
 r369: [766..767]
 r370: [760..761]
 r371: [754..755]
 r372: [748..749]
 r373: [742..743]
 r374: [531..532]
 r375: [527..530]
 r376: [521..522]
 r377: [515..516]
 r378: [511..512]
 r379: [509..510]
 r380: [505..506]
 r381: [497..498]
 r382: [489..490]
 r383: [485..488]
 r384: [481..482]
 r385: [471..472]
 r386: [465..466]
 r387: [463..464]
 r388: [459..460]
 r389: [451..452]
 r390: [443..444]
 r391: [439..442]
 r392: [433..434]
 r393: [423..424]
 r394: [415..416]
 r395: [413..414]
 r396: [409..410]
 r397: [401..402]
 r398: [393..394]
 r399: [389..392]
 r400: [383..384]
 r401: [373..374]
 r402: [365..366]
 r403: [363..364]
 r404: [359..360]
 r405: [353..354]
 r406: [345..346]
 r407: [343..344]
 r408: [339..340]
 r409: [333..334]
 r410: [325..326]
 r411: [323..324]
 r412: [317..318]
 r413: [307..308]
 r414: [297..298]
 r415: [295..296]
 r416: [291..292]
 r417: [285..286]
 r418: [277..278]
 r419: [275..276]
 r420: [269..270]
 r421: [259..260]
 r422: [249..250]
 r423: [247..248]
 r424: [243..244]
 r425: [235..236]
 r426: [227..228]
 r427: [225..226]
 r428: [219..220]
 r429: [213..214]
 r430: [203..204]
 r431: [201..202]
 r432: [195..196]
 r433: [185..186]
 r434: [177..178]
 r435: [175..176]
 r436: [169..170]
 r437: [161..162]
 r438: [617..622]
 r439: [539..622]
 r440: [619..622]
 r444: [609..616]
 r446: [613..616]
 r450: [599..608]
 r452: [603..606]
 r456: [587..596]
 r458: [591..594]
 r462: [575..584]
 r464: [579..582]
 r468: [563..572]
 r470: [567..570]
 r474: [551..560]
 r476: [555..558]
 r480: [539..548]
 r482: [543..546]
 r486: [101..120]
 r487: [121..129]
 r488: [121..122]
 r489: [101..102]
 r490: [103..113]
 r491: [103..104]
 r492: [83..100]
 r493: [20..84]
 r494: [85..93]
 r495: [85..86]
 r496: [65..82]
 r497: [65..66]
 r498: [67..75]
 r499: [67..68]
 r500: [63..64]
 r501: [22..43]
 r502: [44..54]
 r503: [44..45]
 r504: [22..23]
 r505: [24..36]
 r506: [24..25]
 r507: [20..21]
 r511: [2..19]
 r512: [2..3]
 r513: [4..12]
 r514: [4..5]
 r515: [0..1]
 r517: [475..651] [155..304]
 r518: [525..649] [153..266]
 r519: [441..647] [151..222]
 r520: [483..623] [149..218]
 r521: [519..645] [147..216]
 r522: [391..643] [145..172]
 r523: [437..641] [143..168]
 r524: [517..639] [141..160]
 r525: [156..637]
 r526: [533..635]
 r527: [623..625] [513..618]
 r528: [623..633] [513..616]
 r529: [623..631] [491..616]
 r530: [623..629] [467..608]
 r531: [623..627] [419..596]
 r532: [822..823]
 r533: [818..819]
 r534: [816..817]
 r535: [812..813]
 r536: [810..811]
 r537: [806..807]
 r538: [804..805]
 r539: [800..801]
 r540: [798..799]
 r541: [794..795]
 r542: [792..793]
 r543: [788..789]
 r544: [786..787]
 r545: [782..783]
 r546: [780..781]
 r547: [776..777]
 r548: [774..775]
 r549: [770..771]
 r550: [768..769]
 r551: [764..765]
 r552: [762..763]
 r553: [758..759]
 r554: [756..757]
 r555: [752..753]
 r556: [750..751]
 r557: [746..747]
 r558: [744..745]
 r559: [740..741]
 r560: [738..739]
 r561: [736..737]
 r562: [734..735]
 r563: [732..733]
 r564: [730..731]
 r565: [728..729]
 r566: [726..727]
 r567: [724..725]
 r568: [722..723]
 r569: [720..721]
 r570: [718..719]
 r571: [716..717]
 r572: [714..715]
 r573: [712..713]
 r574: [710..711]
 r575: [708..709]
 r576: [706..707]
 r577: [704..705]
 r578: [702..703]
 r579: [700..701]
 r580: [698..699]
 r581: [696..697]
 r582: [694..695]
 r583: [692..693]
 r584: [690..691]
 r585: [688..689]
 r586: [686..687]
 r587: [684..685]
 r588: [682..683]
 r589: [680..681]
 r590: [676..677]
 r591: [674..675]
 r592: [670..671]
 r593: [668..669]
 r594: [666..667]
 r595: [662..663]
 r596: [660..661]
 r597: [658..659]
 r598: [656..657]
 r599: [654..655]
 r600: [533..534]
 r601: [527..528]
 r602: [523..524]
 r603: [501..502]
 r604: [499..500]
 r605: [495..496]
 r606: [491..492]
 r607: [485..486]
 r608: [477..478]
 r609: [473..474]
 r610: [467..468]
 r611: [455..456]
 r612: [453..454]
 r613: [445..448]
 r614: [445..446]
 r615: [443..444]
 r616: [439..440]
 r617: [435..436]
 r618: [429..430]
 r619: [425..426]
 r620: [417..420]
 r621: [417..418]
 r622: [403..404]
 r623: [395..398]
 r624: [395..396]
 r625: [393..394]
 r626: [389..390]
 r627: [385..386]
 r628: [379..380]
 r629: [375..376]
 r630: [367..370]
 r631: [367..368]
 r632: [347..350]
 r633: [347..348]
 r634: [327..330]
 r635: [327..328]
 r636: [321..322]
 r637: [319..320]
 r638: [315..316]
 r639: [311..312]
 r640: [311..312]
 r641: [309..310]
 r642: [305..306]
 r643: [299..302]
 r644: [299..300]
 r645: [279..282]
 r646: [279..280]
 r647: [273..274]
 r648: [271..272]
 r649: [267..268]
 r650: [263..264]
 r651: [261..262]
 r652: [257..258]
 r653: [251..254]
 r654: [251..252]
 r655: [239..240]
 r656: [229..232]
 r657: [229..230]
 r658: [223..224]
 r659: [221..222]
 r660: [211..212]
 r661: [205..208]
 r662: [205..206]
 r663: [201..202]
 r664: [197..198]
 r665: [191..192]
 r666: [187..188]
 r667: [179..182]
 r668: [179..180]
 r669: [173..174]
 r670: [171..172]
 r671: [165..166]
 r672: [163..164]
 r673: [157..158]
 r674: [621..622]
 r675: [615..616]
 r676: [611..612]
 r677: [607..608]
 r678: [605..606]
 r679: [601..602]
 r680: [597..598]
 r681: [595..596]
 r682: [593..594]
 r683: [589..590]
 r684: [585..586]
 r685: [583..584]
 r686: [581..582]
 r687: [577..578]
 r688: [573..574]
 r689: [571..572]
 r690: [569..570]
 r691: [565..566]
 r692: [561..562]
 r693: [559..560]
 r694: [557..558]
 r695: [553..554]
 r696: [549..550]
 r697: [547..548]
 r698: [545..546]
 r699: [541..542]
 r700: [537..538]
 r701: [139..139] [130..135]
 r702: [130..131]
 r703: [136..137]
 r704: [132..133]
 r705: [128..128] [123..126]
 r706: [123..124]
 r707: [121..122]
 r708: [119..119] [114..117]
 r709: [114..115]
 r710: [112..112] [105..108]
 r711: [105..106]
 r712: [109..110]
 r713: [99..99] [94..97]
 r714: [94..95]
 r715: [92..92] [87..90]
 r716: [87..88]
 r717: [81..81] [76..79]
 r718: [76..77]
 r719: [74..74] [69..72]
 r720: [69..70]
 r721: [63..64]
 r722: [62..62] [55..58]
 r723: [55..56]
 r724: [59..60]
 r725: [53..53] [46..49]
 r726: [46..47]
 r727: [50..51]
 r728: [42..42] [37..40]
 r729: [37..38]
 r730: [35..35] [26..31]
 r731: [26..27]
 r732: [32..33]
 r733: [28..29]
 r734: [18..18] [13..16]
 r735: [13..14]
 r736: [11..11] [6..9]
 r737: [6..7]
 r738: [0..1]

********** Inheritance #1: **********

EBB 2 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=739 from oldreg=139, assigning class GENERAL_REGS to inheritance r739
    Original reg change 139->739 (bb2):
  521: r739:SI=r587:SI
      REG_DEAD r587:SI
    Add original<-inheritance after:
  740: r139:SI=r739:SI

    Inheritance reuse change 139->739 (bb2):
  522: r588:SI=r739:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=740 from oldreg=138, assigning class GENERAL_REGS to inheritance r740
    Original reg change 138->740 (bb2):
  517: r740:SI=r584:SI
      REG_DEAD r584:SI
    Add original<-inheritance after:
  741: r138:SI=r740:SI

    Inheritance reuse change 138->740 (bb2):
  518: r585:SI=r740:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=741 from oldreg=137, assigning class GENERAL_REGS to inheritance r741
    Original reg change 137->741 (bb2):
  513: r741:SI=r581:SI
      REG_DEAD r581:SI
    Add original<-inheritance after:
  742: r137:SI=r741:SI

    Inheritance reuse change 137->741 (bb2):
  514: r582:SI=r741:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=742 from oldreg=136, assigning class GENERAL_REGS to inheritance r742
    Original reg change 136->742 (bb2):
  509: r742:SI=r578:SI
      REG_DEAD r578:SI
    Add original<-inheritance after:
  743: r136:SI=r742:SI

    Inheritance reuse change 136->742 (bb2):
  510: r579:SI=r742:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=743 from oldreg=353, assigning class GENERAL_REGS to inheritance r743
    Original reg change 353->743 (bb2):
  490: r743:SI=r559:SI
      REG_DEAD r559:SI
    Add original<-inheritance after:
  744: r353:SI=r743:SI

    Inheritance reuse change 353->743 (bb2):
  491: r560:SI=r743:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=744 from oldreg=349, assigning class GENERAL_REGS to inheritance r744
    Original reg change 349->744 (bb2):
  487: r744:SI=r557:SI
      REG_DEAD r557:SI
    Add original<-inheritance after:
  745: r349:SI=r744:SI

    Inheritance reuse change 349->744 (bb2):
  488: r558:SI=r744:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=745 from oldreg=345, assigning class GENERAL_REGS to inheritance r745
    Original reg change 345->745 (bb2):
  484: r745:SI=r555:SI
      REG_DEAD r555:SI
    Add original<-inheritance after:
  746: r345:SI=r745:SI

    Inheritance reuse change 345->745 (bb2):
  485: r556:SI=r745:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=746 from oldreg=341, assigning class GENERAL_REGS to inheritance r746
    Original reg change 341->746 (bb2):
  481: r746:SI=r553:SI
      REG_DEAD r553:SI
    Add original<-inheritance after:
  747: r341:SI=r746:SI

    Inheritance reuse change 341->746 (bb2):
  482: r554:SI=r746:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=747 from oldreg=337, assigning class GENERAL_REGS to inheritance r747
    Original reg change 337->747 (bb2):
  478: r747:SI=r551:SI
      REG_DEAD r551:SI
    Add original<-inheritance after:
  748: r337:SI=r747:SI

    Inheritance reuse change 337->747 (bb2):
  479: r552:SI=r747:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=748 from oldreg=333, assigning class GENERAL_REGS to inheritance r748
    Original reg change 333->748 (bb2):
  475: r748:SI=r549:SI
      REG_DEAD r549:SI
    Add original<-inheritance after:
  749: r333:SI=r748:SI

    Inheritance reuse change 333->748 (bb2):
  476: r550:SI=r748:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=749 from oldreg=329, assigning class GENERAL_REGS to inheritance r749
    Original reg change 329->749 (bb2):
  472: r749:SI=r547:SI
      REG_DEAD r547:SI
    Add original<-inheritance after:
  750: r329:SI=r749:SI

    Inheritance reuse change 329->749 (bb2):
  473: r548:SI=r749:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=750 from oldreg=325, assigning class GENERAL_REGS to inheritance r750
    Original reg change 325->750 (bb2):
  469: r750:SI=r545:SI
      REG_DEAD r545:SI
    Add original<-inheritance after:
  751: r325:SI=r750:SI

    Inheritance reuse change 325->750 (bb2):
  470: r546:SI=r750:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=751 from oldreg=321, assigning class GENERAL_REGS to inheritance r751
    Original reg change 321->751 (bb2):
  466: r751:SI=r543:SI
      REG_DEAD r543:SI
    Add original<-inheritance after:
  752: r321:SI=r751:SI

    Inheritance reuse change 321->751 (bb2):
  467: r544:SI=r751:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=752 from oldreg=317, assigning class GENERAL_REGS to inheritance r752
    Original reg change 317->752 (bb2):
  463: r752:SI=r541:SI
      REG_DEAD r541:SI
    Add original<-inheritance after:
  753: r317:SI=r752:SI

    Inheritance reuse change 317->752 (bb2):
  464: r542:SI=r752:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=753 from oldreg=313, assigning class GENERAL_REGS to inheritance r753
    Original reg change 313->753 (bb2):
  460: r753:SI=r539:SI
      REG_DEAD r539:SI
    Add original<-inheritance after:
  754: r313:SI=r753:SI

    Inheritance reuse change 313->753 (bb2):
  461: r540:SI=r753:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=754 from oldreg=309, assigning class GENERAL_REGS to inheritance r754
    Original reg change 309->754 (bb2):
  457: r754:SI=r537:SI
      REG_DEAD r537:SI
    Add original<-inheritance after:
  755: r309:SI=r754:SI

    Inheritance reuse change 309->754 (bb2):
  458: r538:SI=r754:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=755 from oldreg=305, assigning class GENERAL_REGS to inheritance r755
    Original reg change 305->755 (bb2):
  454: r755:SI=r535:SI
      REG_DEAD r535:SI
    Add original<-inheritance after:
  756: r305:SI=r755:SI

    Inheritance reuse change 305->755 (bb2):
  455: r536:SI=r755:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=756 from oldreg=301, assigning class GENERAL_REGS to inheritance r756
    Original reg change 301->756 (bb2):
  451: r756:SI=r533:SI
      REG_DEAD r533:SI
    Add original<-inheritance after:
  757: r301:SI=r756:SI

    Inheritance reuse change 301->756 (bb2):
  452: r534:SI=r756:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 4
EBB 5
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=757 from oldreg=298, assigning class GENERAL_REGS to inheritance r757
    Original reg change 298->757 (bb5):
   58: r757:SI=0x243f6a88
      REG_EQUAL 0x243f6a88
    Add original<-inheritance after:
  758: r298:SI=r757:SI

    Inheritance reuse change 298->757 (bb5):
  433: r528:SI=r757:SI
      REG_DEAD r757:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   758: r298:SI=r757:SI
deleting insn with uid = 758.
EBB 6 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=758 from oldreg=274, assigning class GENERAL_REGS to inheritance r758
    Original reg change 274->758 (bb6):
  641: r758:SI=r671:SI
      REG_DEAD r671:SI
    Add original<-inheritance after:
  759: r274:SI=r758:SI

    Inheritance reuse change 274->758 (bb6):
  642: r672:SI=r758:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=759 from oldreg=522, assigning class GENERAL_REGS to inheritance r759
    Original reg change 522->759 (bb6):
  639: r759:SI=r669:SI
      REG_DEAD r669:SI
    Add original<-inheritance after:
  760: r522:SI=r759:SI

    Inheritance reuse change 522->759 (bb6):
  640: r670:SI=r759:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=760 from oldreg=157, assigning class GENERAL_REGS to inheritance r760
    Original reg change 157->760 (bb6):
  630: r663:SI=r760:SI
    Add inheritance<-original before:
  761: r760:SI=r157:SI

    Inheritance reuse change 157->760 (bb6):
  634: r666:SI=r760:SI
      REG_DEAD r760:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=761 from oldreg=519, assigning class GENERAL_REGS to inheritance r761
    Original reg change 519->761 (bb6):
  623: r761:SI=r658:SI
      REG_DEAD r658:SI
    Add original<-inheritance after:
  762: r519:SI=r761:SI

    Inheritance reuse change 519->761 (bb6):
  624: r659:SI=r761:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=762 from oldreg=206, assigning class GENERAL_REGS to inheritance r762
    Original reg change 206->762 (bb6):
  612: r762:SI=r650:SI
      REG_DEAD r650:SI
    Add original<-inheritance after:
  763: r206:SI=r762:SI

    Inheritance reuse change 206->762 (bb6):
  613: r651:SI=r762:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=763 from oldreg=233, assigning class GENERAL_REGS to inheritance r763
    Original reg change 233->763 (bb6):
  608: r763:SI=r647:SI
      REG_DEAD r647:SI
    Add original<-inheritance after:
  764: r233:SI=r763:SI

    Inheritance reuse change 233->763 (bb6):
  609: r648:SI=r763:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=764 from oldreg=220, assigning class GENERAL_REGS to inheritance r764
    Original reg change 220->764 (bb6):
  597: r764:SI=r639:SI
      REG_DEAD r639:SI
    Add original<-inheritance after:
  765: r220:SI=r764:SI

    Inheritance reuse change 220->764 (bb6):
  599: r641:SI=r764:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=765 from oldreg=219, assigning class GENERAL_REGS to inheritance r765
    Original reg change 219->765 (bb6):
  595: r765:SI=r638:SI
      REG_DEAD r638:SI
    Add original<-inheritance after:
  766: r219:SI=r765:SI

    Inheritance reuse change 219->765 (bb6):
  598: r640:SI=r765:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=766 from oldreg=217, assigning class GENERAL_REGS to inheritance r766
    Original reg change 217->766 (bb6):
  592: r766:SI=r636:SI
      REG_DEAD r636:SI
    Add original<-inheritance after:
  767: r217:SI=r766:SI

    Inheritance reuse change 217->766 (bb6):
  593: r637:SI=r766:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=767 from oldreg=256, assigning class GENERAL_REGS to inheritance r767
    Original reg change 256->767 (bb6):
  575: r625:SI=r767:SI
    Add inheritance<-original before:
  768: r767:SI=r256:SI

    Inheritance reuse change 256->767 (bb6):
  581: r629:SI=r767:SI
      REG_DEAD r767:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=768 from oldreg=238, assigning class GENERAL_REGS to inheritance r768
    Original reg change 238->768 (bb6):
  559: r615:SI=r768:SI
    Add inheritance<-original before:
  769: r768:SI=r238:SI

    Inheritance reuse change 238->768 (bb6):
  565: r619:SI=r768:SI
      REG_DEAD r768:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=769 from oldreg=171, assigning class GENERAL_REGS to inheritance r769
    Original reg change 171->769 (bb6):
  555: r612:SI=r769:SI
    Add inheritance<-original before:
  770: r769:SI=r171:SI

    Inheritance reuse change 171->769 (bb6):
  633: r665:SI=r769:SI
      REG_DEAD r769:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=770 from oldreg=171, assigning class GENERAL_REGS to inheritance r770
    Original reg change 171->770 (bb6):
  554: r770:SI=r611:SI
      REG_DEAD r611:SI
    Add original<-inheritance after:
  771: r171:SI=r770:SI

    Inheritance reuse change 171->770 (bb6):
  770: r769:SI=r770:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=771 from oldreg=157, assigning class GENERAL_REGS to inheritance r771
    Original reg change 157->771 (bb6):
  546: r771:SI=r605:SI
      REG_DEAD r605:SI
    Add original<-inheritance after:
  772: r157:SI=r771:SI

    Inheritance reuse change 157->771 (bb6):
  761: r760:SI=r771:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=772 from oldreg=155, assigning class GENERAL_REGS to inheritance r772
    Original reg change 155->772 (bb6):
  544: r604:SI=r772:SI
    Add inheritance<-original before:
  773: r772:SI=r155:SI

    Inheritance reuse change 155->772 (bb6):
  619: r655:SI=r772:SI
      REG_DEAD r772:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=773 from oldreg=155, assigning class GENERAL_REGS to inheritance r773
    Original reg change 155->773 (bb6):
  543: r773:SI=r603:SI
      REG_DEAD r603:SI
    Add original<-inheritance after:
  774: r155:SI=r773:SI

    Inheritance reuse change 155->773 (bb6):
  773: r772:SI=r773:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   771: r171:SI=r770:SI
deleting insn with uid = 771.
	    Removing dead insn:
   772: r157:SI=r771:SI
deleting insn with uid = 772.
	    Removing dead insn:
   774: r155:SI=r773:SI
deleting insn with uid = 774.
EBB 8
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for insn 726(SSE_REGS)<-252(GENERAL_REGS) as secondary mem is needed
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

********** Pseudo live ranges #3: **********

  BB 8
   Insn 413: point = 0
   Insn 412: point = 0
   Insn 407: point = 0
   Insn 739: point = 1
   Insn 406: point = 2
   Insn 405: point = 4
   Insn 737: point = 6
	Hard reg 24 is preferable by r736 with profit 66
   Insn 404: point = 8
   Insn 738: point = 9
   Insn 736: point = 11
   Insn 735: point = 13
   Insn 733: point = 14
	Hard reg 22 is preferable by r734 with profit 66
   Insn 403: point = 16
   Insn 734: point = 17
   Insn 732: point = 19
   Insn 731: point = 21
   Insn 402: point = 22
   Insn 398: point = 24
   Insn 397: point = 26
   Insn 727: point = 28
	Hard reg 22 is preferable by r730 with profit 66
   Insn 396: point = 30
   Insn 730: point = 31
	   Creating copy r731<-r733@66
   Insn 728: point = 33
	Hard reg 43 is preferable by r733 with profit 66
   Insn 729: point = 35
   Insn 726: point = 37
	Hard reg 37 is preferable by r732 with profit 66
   Insn 725: point = 39
   Insn 723: point = 40
	Hard reg 23 is preferable by r728 with profit 66
   Insn 395: point = 42
   Insn 724: point = 43
   Insn 722: point = 45
   Insn 721: point = 47
   Insn 394: point = 48
   Insn 718: point = 50
	Hard reg 21 is preferable by r725 with profit 66
   Insn 393: point = 52
   Insn 719: point = 53
   Insn 720: point = 55
   Insn 717: point = 57
	Hard reg 6 is preferable by r727 with profit 66
   Insn 716: point = 59
   Insn 713: point = 60
	Hard reg 22 is preferable by r722 with profit 66
   Insn 392: point = 62
   Insn 714: point = 63
   Insn 715: point = 65
   Insn 712: point = 67
	Hard reg 3 is preferable by r724 with profit 66
   Insn 711: point = 69
   Insn 390: point = 70
   Insn 710: point = 71
   Insn 389: point = 72
   Insn 388: point = 74
   Insn 708: point = 76
	Hard reg 22 is preferable by r719 with profit 66
   Insn 387: point = 78
   Insn 709: point = 79
   Insn 707: point = 81
   Insn 706: point = 83
   Insn 704: point = 84
	Hard reg 23 is preferable by r717 with profit 66
   Insn 386: point = 86
   Insn 705: point = 87
   Insn 703: point = 89
   Insn 702: point = 91
   Insn 385: point = 92
   Insn 384: point = 94
   Insn 700: point = 96
	Hard reg 24 is preferable by r715 with profit 66
   Insn 383: point = 98
   Insn 701: point = 99
   Insn 699: point = 101
   Insn 698: point = 103
   Insn 696: point = 104
	Hard reg 22 is preferable by r713 with profit 66
   Insn 382: point = 106
   Insn 697: point = 107
   Insn 695: point = 109
   Insn 694: point = 111
   Insn 381: point = 112
   Insn 380: point = 114
   Insn 691: point = 116
	Hard reg 21 is preferable by r710 with profit 66
   Insn 379: point = 118
   Insn 692: point = 119
   Insn 693: point = 121
   Insn 690: point = 123
	Hard reg 38 is preferable by r712 with profit 66
   Insn 689: point = 125
   Insn 687: point = 126
	Hard reg 23 is preferable by r708 with profit 66
   Insn 378: point = 128
   Insn 688: point = 129
   Insn 686: point = 131
   Insn 685: point = 133
   Insn 684: point = 134
	Hard reg 22 is preferable by r707 with profit 66
   Insn 377: point = 136
   Insn 683: point = 138
   Insn 682: point = 139
   Insn 680: point = 140
	Hard reg 21 is preferable by r705 with profit 66
   Insn 376: point = 142
   Insn 681: point = 143
   Insn 679: point = 145
   Insn 678: point = 147
   Insn 674: point = 148
	Hard reg 22 is preferable by r701 with profit 66
   Insn 375: point = 150
   Insn 677: point = 151
	   Creating copy r702<-r704@66
   Insn 675: point = 153
	Hard reg 44 is preferable by r704 with profit 66
   Insn 676: point = 155
   Insn 673: point = 157
	Hard reg 42 is preferable by r703 with profit 66
   Insn 672: point = 159
   Insn 446: point = 160
   Insn 445: point = 162
   Insn 444: point = 164
   Insn 443: point = 166
   Insn 442: point = 168
   Insn 441: point = 170
   Insn 440: point = 172
   Insn 439: point = 174
  BB 6
   Insn 270: point = 177
   Insn 644: point = 177
   Insn 269: point = 179
   Insn 643: point = 179
   Insn 268: point = 181
   Insn 266: point = 181
   Insn 265: point = 183
   Insn 642: point = 185
	   Creating copy r672<-r758@933
   Insn 759: point = 187
   Insn 641: point = 188
	   Creating copy r671->r758@933
   Insn 264: point = 190
   Insn 263: point = 192
   Insn 262: point = 194
   Insn 640: point = 196
	   Creating copy r670<-r759@933
   Insn 760: point = 198
   Insn 639: point = 199
	   Creating copy r669->r759@933
   Insn 261: point = 201
   Insn 260: point = 203
   Insn 637: point = 205
	Hard reg 1 is preferable by r667 with profit 933
   Insn 259: point = 207
   Insn 638: point = 208
   Insn 636: point = 210
   Insn 258: point = 212
   Insn 635: point = 214
	Hard reg 37 is preferable by r666 with profit 933
   Insn 257: point = 216
   Insn 634: point = 216
	   Creating copy r666<-r760@933
   Insn 256: point = 218
   Insn 633: point = 220
	   Creating copy r665<-r769@933
   Insn 255: point = 222
   Insn 632: point = 224
	Hard reg 3 is preferable by r664 with profit 933
   Insn 254: point = 226
   Insn 631: point = 226
	Hard reg 3 is preferable by r664 with profit 933
	Hard reg 37 is preferable by r664 with profit 933
   Insn 253: point = 228
   Insn 630: point = 230
	   Creating copy r663<-r760@933
   Insn 761: point = 231
	   Creating copy r760<-r771@933
   Insn 252: point = 233
   Insn 628: point = 235
	Hard reg 0 is preferable by r661 with profit 933
   Insn 251: point = 237
   Insn 629: point = 238
   Insn 627: point = 240
   Insn 626: point = 242
   Insn 250: point = 244
   Insn 625: point = 244
	Hard reg 40 is preferable by r660 with profit 933
   Insn 249: point = 246
   Insn 248: point = 248
   Insn 247: point = 250
   Insn 246: point = 252
   Insn 624: point = 254
	   Creating copy r659<-r761@933
   Insn 762: point = 256
   Insn 623: point = 257
	   Creating copy r658->r761@933
   Insn 245: point = 259
   Insn 244: point = 261
   Insn 621: point = 263
	Hard reg 1 is preferable by r656 with profit 933
   Insn 243: point = 265
   Insn 622: point = 266
   Insn 620: point = 268
   Insn 242: point = 270
   Insn 241: point = 272
   Insn 240: point = 274
   Insn 619: point = 276
	   Creating copy r655<-r772@933
   Insn 239: point = 278
   Insn 238: point = 280
   Insn 237: point = 282
   Insn 236: point = 284
   Insn 617: point = 286
	Hard reg 0 is preferable by r653 with profit 933
   Insn 235: point = 288
   Insn 618: point = 289
   Insn 616: point = 291
   Insn 615: point = 293
   Insn 234: point = 295
   Insn 614: point = 295
	Hard reg 3 is preferable by r652 with profit 933
   Insn 233: point = 297
   Insn 613: point = 299
	   Creating copy r651<-r762@933
   Insn 763: point = 301
   Insn 612: point = 302
	   Creating copy r650->r762@933
   Insn 232: point = 304
   Insn 611: point = 306
	Hard reg 6 is preferable by r649 with profit 933
   Insn 231: point = 308
   Insn 610: point = 308
	Hard reg 6 is preferable by r649 with profit 933
	Hard reg 2 is preferable by r649 with profit 933
   Insn 230: point = 310
   Insn 609: point = 312
	   Creating copy r648<-r763@933
   Insn 764: point = 314
   Insn 608: point = 315
	   Creating copy r647->r763@933
   Insn 229: point = 317
   Insn 228: point = 319
   Insn 606: point = 321
	Hard reg 1 is preferable by r645 with profit 933
   Insn 227: point = 323
   Insn 607: point = 324
   Insn 605: point = 326
   Insn 226: point = 328
   Insn 225: point = 330
   Insn 224: point = 332
   Insn 223: point = 334
   Insn 222: point = 336
   Insn 221: point = 338
   Insn 220: point = 340
   Insn 603: point = 342
	Hard reg 1 is preferable by r643 with profit 933
   Insn 219: point = 344
   Insn 604: point = 345
   Insn 602: point = 347
   Insn 601: point = 349
	Hard reg 43 is preferable by r642 with profit 933
   Insn 218: point = 351
   Insn 600: point = 351
	Hard reg 43 is preferable by r642 with profit 933
	Hard reg 6 is preferable by r642 with profit 933
   Insn 217: point = 353
   Insn 599: point = 355
	   Creating copy r641<-r764@933
   Insn 765: point = 357
   Insn 597: point = 358
	   Creating copy r639->r764@933
   Insn 216: point = 360
   Insn 598: point = 361
	   Creating copy r640<-r765@933
   Insn 596: point = 363
	Hard reg 43 is preferable by r639 with profit 933
   Insn 766: point = 365
   Insn 595: point = 366
	   Creating copy r638->r765@933
   Insn 215: point = 368
   Insn 594: point = 368
	Hard reg 41 is preferable by r638 with profit 933
   Insn 214: point = 370
   Insn 593: point = 372
	   Creating copy r637<-r766@933
   Insn 767: point = 374
   Insn 592: point = 375
	   Creating copy r636->r766@933
   Insn 213: point = 377
   Insn 212: point = 379
   Insn 590: point = 381
	Hard reg 44 is preferable by r634 with profit 933
   Insn 211: point = 383
   Insn 591: point = 384
   Insn 589: point = 386
   Insn 210: point = 388
   Insn 209: point = 390
   Insn 208: point = 392
   Insn 207: point = 394
   Insn 206: point = 396
   Insn 205: point = 398
   Insn 204: point = 400
   Insn 587: point = 402
	Hard reg 44 is preferable by r632 with profit 933
   Insn 203: point = 404
   Insn 588: point = 405
   Insn 586: point = 407
   Insn 202: point = 409
   Insn 201: point = 411
   Insn 200: point = 413
   Insn 199: point = 415
   Insn 198: point = 417
   Insn 197: point = 419
   Insn 196: point = 421
   Insn 584: point = 423
	Hard reg 44 is preferable by r630 with profit 933
   Insn 195: point = 425
   Insn 585: point = 426
   Insn 583: point = 428
   Insn 194: point = 430
   Insn 582: point = 432
	Hard reg 40 is preferable by r629 with profit 933
   Insn 193: point = 434
   Insn 581: point = 434
	   Creating copy r629<-r767@933
   Insn 580: point = 436
	Hard reg 42 is preferable by r628 with profit 933
   Insn 192: point = 438
   Insn 579: point = 438
   Insn 191: point = 440
   Insn 578: point = 442
	Hard reg 41 is preferable by r627 with profit 933
   Insn 190: point = 444
   Insn 577: point = 444
   Insn 189: point = 446
   Insn 576: point = 448
   Insn 188: point = 450
   Insn 575: point = 452
	   Creating copy r625<-r767@933
   Insn 768: point = 453
   Insn 573: point = 455
	Hard reg 39 is preferable by r623 with profit 933
   Insn 187: point = 457
   Insn 574: point = 458
   Insn 572: point = 460
   Insn 186: point = 462
   Insn 571: point = 464
	Hard reg 3 is preferable by r622 with profit 933
   Insn 185: point = 466
   Insn 570: point = 466
	Hard reg 3 is preferable by r622 with profit 933
	Hard reg 40 is preferable by r622 with profit 933
   Insn 184: point = 468
   Insn 183: point = 470
   Insn 182: point = 472
   Insn 181: point = 474
   Insn 180: point = 476
   Insn 568: point = 478
	Hard reg 38 is preferable by r620 with profit 933
   Insn 179: point = 480
   Insn 569: point = 481
   Insn 567: point = 483
   Insn 178: point = 485
   Insn 566: point = 487
	Hard reg 40 is preferable by r619 with profit 933
   Insn 177: point = 489
   Insn 565: point = 489
	   Creating copy r619<-r768@933
   Insn 564: point = 491
	Hard reg 43 is preferable by r618 with profit 933
   Insn 176: point = 493
   Insn 563: point = 493
   Insn 175: point = 495
   Insn 562: point = 497
	Hard reg 37 is preferable by r617 with profit 933
   Insn 174: point = 499
   Insn 561: point = 499
	Hard reg 37 is preferable by r617 with profit 933
	Hard reg 3 is preferable by r617 with profit 933
   Insn 173: point = 501
   Insn 560: point = 503
   Insn 172: point = 505
   Insn 559: point = 507
	   Creating copy r615<-r768@933
   Insn 769: point = 508
   Insn 557: point = 510
	Hard reg 39 is preferable by r613 with profit 933
   Insn 171: point = 512
   Insn 558: point = 513
   Insn 556: point = 515
   Insn 170: point = 517
   Insn 169: point = 519
   Insn 555: point = 521
	   Creating copy r612<-r769@933
   Insn 770: point = 522
	   Creating copy r769<-r770@933
   Insn 554: point = 524
	   Creating copy r611->r770@933
   Insn 168: point = 526
   Insn 167: point = 528
   Insn 166: point = 530
   Insn 165: point = 532
   Insn 164: point = 534
   Insn 163: point = 536
   Insn 553: point = 538
   Insn 162: point = 540
   Insn 552: point = 542
	Hard reg 6 is preferable by r609 with profit 933
   Insn 161: point = 544
   Insn 551: point = 544
	Hard reg 6 is preferable by r609 with profit 933
	Hard reg 43 is preferable by r609 with profit 933
   Insn 550: point = 546
	Hard reg 37 is preferable by r608 with profit 933
   Insn 160: point = 548
   Insn 549: point = 548
   Insn 159: point = 550
   Insn 158: point = 552
   Insn 157: point = 554
   Insn 548: point = 556
   Insn 156: point = 558
   Insn 155: point = 560
   Insn 547: point = 562
   Insn 546: point = 564
	   Creating copy r605->r771@933
   Insn 154: point = 566
   Insn 545: point = 566
	Hard reg 37 is preferable by r605 with profit 933
   Insn 153: point = 568
   Insn 544: point = 570
	   Creating copy r604<-r772@933
   Insn 773: point = 571
	   Creating copy r772<-r773@933
   Insn 543: point = 573
	   Creating copy r603->r773@933
   Insn 152: point = 575
   Insn 151: point = 577
   Insn 150: point = 579
   Insn 149: point = 581
   Insn 148: point = 583
   Insn 147: point = 585
   Insn 146: point = 587
   Insn 145: point = 589
   Insn 144: point = 591
   Insn 143: point = 593
   Insn 542: point = 595
	Hard reg 2 is preferable by r602 with profit 933
   Insn 142: point = 597
   Insn 541: point = 597
	Hard reg 2 is preferable by r602 with profit 933
	Hard reg 6 is preferable by r602 with profit 933
   Insn 141: point = 599
   Insn 540: point = 601
   Insn 140: point = 603
   Insn 139: point = 605
   Insn 539: point = 607
  BB 7
   Insn 422: point = 610
   Insn 671: point = 610
   Insn 368: point = 612
   Insn 670: point = 614
   Insn 365: point = 616
   Insn 669: point = 618
   Insn 363: point = 620
   Insn 362: point = 621
   Insn 668: point = 622
   Insn 359: point = 624
   Insn 358: point = 625
   Insn 667: point = 626
   Insn 356: point = 628
   Insn 666: point = 630
   Insn 353: point = 632
   Insn 665: point = 634
   Insn 351: point = 636
   Insn 350: point = 637
   Insn 664: point = 638
   Insn 347: point = 640
   Insn 346: point = 641
   Insn 663: point = 642
   Insn 344: point = 644
   Insn 662: point = 646
   Insn 341: point = 648
   Insn 661: point = 650
   Insn 339: point = 652
   Insn 338: point = 653
   Insn 660: point = 654
   Insn 335: point = 656
   Insn 334: point = 657
   Insn 659: point = 658
   Insn 332: point = 660
   Insn 658: point = 662
   Insn 329: point = 664
   Insn 657: point = 666
   Insn 327: point = 668
   Insn 326: point = 669
   Insn 656: point = 670
   Insn 323: point = 672
   Insn 322: point = 673
   Insn 655: point = 674
   Insn 320: point = 676
   Insn 654: point = 678
   Insn 317: point = 680
   Insn 653: point = 682
   Insn 315: point = 684
   Insn 314: point = 685
   Insn 652: point = 686
   Insn 311: point = 688
   Insn 310: point = 689
   Insn 651: point = 690
   Insn 308: point = 692
   Insn 650: point = 694
   Insn 305: point = 696
   Insn 649: point = 698
   Insn 303: point = 700
   Insn 302: point = 701
   Insn 648: point = 702
   Insn 299: point = 704
   Insn 298: point = 705
   Insn 296: point = 706
   Insn 647: point = 708
   Insn 293: point = 710
   Insn 646: point = 712
   Insn 291: point = 714
   Insn 290: point = 715
   Insn 287: point = 716
   Insn 286: point = 717
   Insn 284: point = 718
   Insn 281: point = 720
   Insn 645: point = 722
   Insn 279: point = 724
   Insn 278: point = 725
   Insn 277: point = 726
   Insn 275: point = 727
   Insn 274: point = 728
  BB 5
   Insn 438: point = 730
   Insn 437: point = 732
   Insn 436: point = 734
   Insn 435: point = 736
   Insn 434: point = 738
   Insn 433: point = 740
	Hard reg 41 is preferable by r757 with profit 67
   Insn 432: point = 742
   Insn 431: point = 744
   Insn 430: point = 746
   Insn 429: point = 748
   Insn 428: point = 750
   Insn 427: point = 752
   Insn 426: point = 754
   Insn 425: point = 756
   Insn 424: point = 758
   Insn 59: point = 760
   Insn 58: point = 761
   Insn 57: point = 762
   Insn 56: point = 763
   Insn 55: point = 764
   Insn 54: point = 765
   Insn 53: point = 766
   Insn 52: point = 767
   Insn 51: point = 768
   Insn 50: point = 769
   Insn 49: point = 770
   Insn 48: point = 771
   Insn 47: point = 772
   Insn 46: point = 773
   Insn 45: point = 774
   Insn 44: point = 775
   Insn 43: point = 776
   Insn 42: point = 777
   Insn 538: point = 779
   Insn 41: point = 780
   Insn 537: point = 782
   Insn 40: point = 783
   Insn 39: point = 784
   Insn 38: point = 785
   Insn 37: point = 786
   Insn 36: point = 787
   Insn 536: point = 789
   Insn 35: point = 790
   Insn 535: point = 792
   Insn 137: point = 793
  BB 3
   Insn 420: point = 795
   Insn 534: point = 795
   Insn 134: point = 797
   Insn 533: point = 797
	Hard reg 44 is preferable by r595 with profit 33
   Insn 532: point = 799
	Hard reg 3 is preferable by r594 with profit 33
   Insn 133: point = 801
   Insn 531: point = 801
   Insn 132: point = 802
   Insn 530: point = 804
   Insn 529: point = 805
   Insn 131: point = 807
   Insn 528: point = 807
	Hard reg 37 is preferable by r592 with profit 33
   Insn 527: point = 809
	Hard reg 6 is preferable by r591 with profit 33
   Insn 130: point = 811
   Insn 526: point = 811
   Insn 129: point = 812
   Insn 525: point = 814
  BB 4
   Insn 34: point = 816
   Insn 33: point = 817
   Insn 32: point = 818
   Insn 31: point = 819
  BB 2
   Insn 127: point = 821
   Insn 126: point = 821
   Insn 524: point = 822
   Insn 523: point = 823
   Insn 125: point = 825
   Insn 522: point = 825
	   Creating copy r588<-r739@66
   Insn 740: point = 827
   Insn 521: point = 828
	   Creating copy r587->r739@66
   Insn 124: point = 830
   Insn 520: point = 832
   Insn 519: point = 833
   Insn 123: point = 835
   Insn 518: point = 835
	   Creating copy r585<-r740@66
   Insn 741: point = 837
   Insn 517: point = 838
	   Creating copy r584->r740@66
   Insn 122: point = 840
   Insn 516: point = 842
   Insn 515: point = 843
   Insn 121: point = 845
   Insn 514: point = 845
	   Creating copy r582<-r741@66
   Insn 742: point = 847
   Insn 513: point = 848
	   Creating copy r581->r741@66
   Insn 120: point = 850
   Insn 512: point = 852
   Insn 511: point = 853
	Hard reg 38 is preferable by r579 with profit 66
   Insn 119: point = 855
   Insn 510: point = 855
	   Creating copy r579<-r742@66
   Insn 743: point = 857
   Insn 509: point = 858
	   Creating copy r578->r742@66
   Insn 118: point = 860
   Insn 508: point = 862
   Insn 507: point = 863
   Insn 117: point = 865
   Insn 506: point = 867
   Insn 505: point = 868
   Insn 116: point = 870
   Insn 504: point = 872
   Insn 503: point = 873
   Insn 115: point = 875
   Insn 502: point = 877
   Insn 501: point = 878
   Insn 114: point = 880
   Insn 500: point = 882
   Insn 499: point = 883
   Insn 113: point = 885
   Insn 498: point = 887
   Insn 497: point = 888
   Insn 112: point = 890
   Insn 496: point = 892
   Insn 495: point = 893
   Insn 111: point = 895
   Insn 494: point = 897
   Insn 493: point = 898
   Insn 110: point = 900
   Insn 492: point = 902
   Insn 109: point = 903
   Insn 491: point = 904
	   Creating copy r560<-r743@66
   Insn 744: point = 906
   Insn 490: point = 907
	   Creating copy r559->r743@66
   Insn 108: point = 909
   Insn 489: point = 909
	Hard reg 44 is preferable by r559 with profit 66
   Insn 107: point = 911
   Insn 106: point = 913
   Insn 488: point = 914
	   Creating copy r558<-r744@66
   Insn 745: point = 916
   Insn 487: point = 917
	   Creating copy r557->r744@66
   Insn 105: point = 919
   Insn 486: point = 919
	Hard reg 44 is preferable by r557 with profit 66
   Insn 104: point = 921
   Insn 103: point = 922
   Insn 485: point = 923
	   Creating copy r556<-r745@66
   Insn 746: point = 925
   Insn 484: point = 926
	   Creating copy r555->r745@66
   Insn 102: point = 928
   Insn 483: point = 928
	Hard reg 42 is preferable by r555 with profit 66
   Insn 101: point = 930
   Insn 100: point = 931
   Insn 482: point = 932
	   Creating copy r554<-r746@66
   Insn 747: point = 934
   Insn 481: point = 935
	   Creating copy r553->r746@66
   Insn 99: point = 937
   Insn 480: point = 937
	Hard reg 42 is preferable by r553 with profit 66
   Insn 98: point = 939
   Insn 97: point = 940
   Insn 479: point = 941
	   Creating copy r552<-r747@66
   Insn 748: point = 943
   Insn 478: point = 944
	   Creating copy r551->r747@66
   Insn 96: point = 946
   Insn 477: point = 946
	Hard reg 0 is preferable by r551 with profit 66
   Insn 95: point = 948
   Insn 94: point = 949
   Insn 476: point = 950
	   Creating copy r550<-r748@66
   Insn 749: point = 952
   Insn 475: point = 953
	   Creating copy r549->r748@66
   Insn 93: point = 955
   Insn 474: point = 955
	Hard reg 0 is preferable by r549 with profit 66
   Insn 92: point = 957
   Insn 91: point = 958
   Insn 473: point = 959
	   Creating copy r548<-r749@66
   Insn 750: point = 961
   Insn 472: point = 962
	   Creating copy r547->r749@66
   Insn 90: point = 964
   Insn 471: point = 964
	Hard reg 0 is preferable by r547 with profit 66
   Insn 89: point = 966
   Insn 88: point = 967
   Insn 470: point = 968
	   Creating copy r546<-r750@66
   Insn 751: point = 970
   Insn 469: point = 971
	   Creating copy r545->r750@66
   Insn 87: point = 973
   Insn 468: point = 973
	Hard reg 0 is preferable by r545 with profit 66
   Insn 86: point = 975
   Insn 85: point = 976
   Insn 467: point = 977
	   Creating copy r544<-r751@66
   Insn 752: point = 979
   Insn 466: point = 980
	   Creating copy r543->r751@66
   Insn 84: point = 982
   Insn 465: point = 982
	Hard reg 3 is preferable by r543 with profit 66
   Insn 83: point = 984
   Insn 82: point = 985
   Insn 464: point = 986
	   Creating copy r542<-r752@66
   Insn 753: point = 988
   Insn 463: point = 989
	   Creating copy r541->r752@66
   Insn 81: point = 991
   Insn 462: point = 991
	Hard reg 3 is preferable by r541 with profit 66
   Insn 80: point = 993
   Insn 79: point = 994
   Insn 461: point = 995
	   Creating copy r540<-r753@66
   Insn 754: point = 997
   Insn 460: point = 998
	   Creating copy r539->r753@66
   Insn 78: point = 1000
   Insn 459: point = 1000
	Hard reg 0 is preferable by r539 with profit 66
   Insn 77: point = 1002
   Insn 76: point = 1003
   Insn 458: point = 1004
	   Creating copy r538<-r754@66
   Insn 755: point = 1006
   Insn 457: point = 1007
	   Creating copy r537->r754@66
   Insn 75: point = 1009
   Insn 456: point = 1009
	Hard reg 0 is preferable by r537 with profit 66
   Insn 74: point = 1011
   Insn 73: point = 1012
   Insn 455: point = 1013
	   Creating copy r536<-r755@66
   Insn 756: point = 1015
   Insn 454: point = 1016
	   Creating copy r535->r755@66
   Insn 72: point = 1018
   Insn 453: point = 1018
	Hard reg 0 is preferable by r535 with profit 66
   Insn 71: point = 1020
   Insn 70: point = 1021
   Insn 452: point = 1022
	   Creating copy r534<-r756@66
   Insn 757: point = 1024
   Insn 451: point = 1025
	   Creating copy r533->r756@66
   Insn 69: point = 1027
   Insn 450: point = 1027
	Hard reg 38 is preferable by r533 with profit 66
   Insn 68: point = 1029
   Insn 67: point = 1030
   Insn 449: point = 1030
	Hard reg 5 is preferable by r532 with profit 66
   Insn 66: point = 1032
   Insn 448: point = 1032
	Hard reg 5 is preferable by r532 with profit 66
	Hard reg 6 is preferable by r532 with profit 66
   Insn 65: point = 1034
   Insn 64: point = 1035
   Insn 63: point = 1035
   Insn 62: point = 1037
   Insn 29: point = 1038
   Insn 28: point = 1039
 r113: [180..776] [177..177]
 r128: [82..898]
 r129: [80..893]
 r130: [90..888]
 r131: [88..883]
 r132: [12..878]
 r133: [10..873]
 r134: [20..868]
 r135: [18..863]
 r136: [102..857]
 r137: [100..847]
 r138: [110..837]
 r139: [108..827]
 r141: [808..812]
 r142: [798..802]
 r144: [584..599]
 r146: [580..593]
 r147: [576..591]
 r149: [569..587]
 r152: [401..581]
 r154: [337..577]
 r160: [535..554]
 r162: [531..550]
 r163: [527..546]
 r165: [520..540]
 r168: [341..532]
 r170: [281..528]
 r173: [391..517]
 r176: [477..501]
 r178: [473..495]
 r179: [469..491]
 r181: [467..485]
 r184: [285..474]
 r186: [227..470]
 r187: [393..468]
 r189: [331..462]
 r192: [422..446]
 r194: [418..440]
 r195: [414..436]
 r197: [412..430]
 r200: [234..419]
 r202: [397..415]
 r203: [333..413]
 r205: [273..409]
 r206: [439..823] [130..301]
 r209: [380..398]
 r211: [371..394]
 r212: [364..392]
 r214: [354..388]
 r217: [602..790] [146..374]
 r219: [816..819] [445..795] [64..365]
 r220: [494..833] [132..357]
 r222: [759..783] [34..174]
 r225: [320..338]
 r227: [311..334]
 r228: [305..332]
 r230: [298..328]
 r233: [557..787] [144..314]
 r235: [816..816] [757..809] [58..172]
 r238: [509..780] [46..293]
 r241: [262..282]
 r243: [253..278]
 r244: [249..274]
 r247: [247..270]
 r250: [755..786] [158..170]
 r252: [816..817] [731..805] [54..168]
 r254: [753..853] [124..166]
 r256: [454..777] [44..242]
 r260: [204..228]
 r262: [195..222]
 r264: [191..218]
 r266: [184..212]
 r270: [751..785] [154..164]
 r273: [816..818] [749..799] [68..162]
 r274: [549..843] [120..187]
 r276: [747..784] [38..160]
 r281: [745..793]
 r293: [743..1035]
 r296: [730..760] [608..722]
 r297: [733..1030]
 r301: [739..1024]
 r304: [730..762] [563..712]
 r305: [730..1015] [539..708]
 r306: [737..763]
 r309: [730..1006] [516..702]
 r312: [730..764] [514..698]
 r313: [730..997] [484..694]
 r314: [735..765]
 r317: [730..988] [461..686]
 r320: [730..766] [459..682]
 r321: [730..979] [429..678]
 r322: [730..767] [427..674]
 r325: [730..970] [408..670]
 r328: [730..768] [406..666]
 r329: [730..961] [387..662]
 r330: [730..769] [385..658]
 r333: [730..952] [348..654]
 r336: [730..770] [346..650]
 r337: [730..943] [327..646]
 r338: [730..771] [325..642]
 r341: [730..934] [292..638]
 r344: [730..772] [290..634]
 r345: [730..925] [269..630]
 r346: [730..773] [267..626]
 r349: [730..916] [241..622]
 r352: [730..774] [239..618]
 r353: [730..906] [211..614]
 r354: [730..775] [209..610]
 r357: [912..1038]
 r358: [1036..1037]
 r359: [1033..1034]
 r360: [1028..1029]
 r361: [1019..1020]
 r362: [1010..1011]
 r363: [1001..1002]
 r364: [992..993]
 r365: [983..984]
 r366: [974..975]
 r367: [965..966]
 r368: [956..957]
 r369: [947..948]
 r370: [938..939]
 r371: [929..930]
 r372: [920..921]
 r373: [910..911]
 r374: [604..605]
 r375: [600..603]
 r376: [594..595]
 r377: [588..589]
 r378: [584..585]
 r379: [582..583]
 r380: [578..579]
 r381: [567..568]
 r382: [559..560]
 r383: [555..558]
 r384: [551..552]
 r385: [541..542]
 r386: [535..536]
 r387: [533..534]
 r388: [529..530]
 r389: [518..519]
 r390: [506..510]
 r391: [502..505]
 r392: [496..497]
 r393: [486..487]
 r394: [477..478]
 r395: [475..476]
 r396: [471..472]
 r397: [463..464]
 r398: [451..455]
 r399: [447..450]
 r400: [441..442]
 r401: [431..432]
 r402: [422..423]
 r403: [420..421]
 r404: [416..417]
 r405: [410..411]
 r406: [401..402]
 r407: [399..400]
 r408: [395..396]
 r409: [389..390]
 r410: [380..381]
 r411: [378..379]
 r412: [369..370]
 r413: [352..353]
 r414: [341..342]
 r415: [339..340]
 r416: [335..336]
 r417: [329..330]
 r418: [320..321]
 r419: [318..319]
 r420: [309..310]
 r421: [296..297]
 r422: [285..286]
 r423: [283..284]
 r424: [279..280]
 r425: [271..272]
 r426: [262..263]
 r427: [260..261]
 r428: [251..252]
 r429: [245..246]
 r430: [234..235]
 r431: [229..233]
 r432: [223..224]
 r433: [213..214]
 r434: [204..205]
 r435: [202..203]
 r436: [193..194]
 r437: [182..183]
 r438: [719..728]
 r439: [613..726]
 r440: [721..725]
 r444: [707..717]
 r446: [711..715]
 r450: [693..705]
 r452: [697..701]
 r456: [677..689]
 r458: [681..685]
 r462: [661..673]
 r464: [665..669]
 r468: [645..657]
 r470: [649..653]
 r474: [629..641]
 r476: [633..637]
 r480: [613..625]
 r482: [617..621]
 r486: [113..134]
 r487: [137..148]
 r488: [138..140]
 r489: [113..114]
 r490: [115..126]
 r491: [115..116]
 r492: [93..112]
 r493: [23..94]
 r494: [95..104]
 r495: [95..96]
 r496: [73..92]
 r497: [73..74]
 r498: [75..84]
 r499: [75..76]
 r500: [70..72]
 r501: [25..48]
 r502: [49..60]
 r503: [49..50]
 r504: [25..26]
 r505: [27..40]
 r506: [27..28]
 r507: [23..24]
 r511: [3..22]
 r512: [3..4]
 r513: [5..14]
 r514: [5..6]
 r515: [0..2]
 r517: [545..758] [175..349]
 r518: [598..756] [173..306]
 r519: [504..754] [171..256]
 r520: [553..730] [169..250]
 r521: [592..752] [167..248]
 r522: [449..750] [165..198]
 r523: [500..748] [163..192]
 r524: [590..746] [161..181]
 r525: [177..744]
 r526: [730..742] [606..727]
 r527: [730..732] [586..720]
 r528: [730..740] [586..718]
 r529: [730..738] [561..716]
 r530: [730..736] [537..706]
 r531: [730..734] [482..690]
 r532: [1031..1032]
 r533: [1026..1027]
 r534: [1021..1022]
 r535: [1017..1018]
 r536: [1012..1013]
 r537: [1008..1009]
 r538: [1003..1004]
 r539: [999..1000]
 r540: [994..995]
 r541: [990..991]
 r542: [985..986]
 r543: [981..982]
 r544: [976..977]
 r545: [972..973]
 r546: [967..968]
 r547: [963..964]
 r548: [958..959]
 r549: [954..955]
 r550: [949..950]
 r551: [945..946]
 r552: [940..941]
 r553: [936..937]
 r554: [931..932]
 r555: [927..928]
 r556: [922..923]
 r557: [918..919]
 r558: [913..914]
 r559: [908..909]
 r560: [903..904]
 r561: [901..902]
 r562: [899..900]
 r563: [896..897]
 r564: [894..895]
 r565: [891..892]
 r566: [889..890]
 r567: [886..887]
 r568: [884..885]
 r569: [881..882]
 r570: [879..880]
 r571: [876..877]
 r572: [874..875]
 r573: [871..872]
 r574: [869..870]
 r575: [866..867]
 r576: [864..865]
 r577: [861..862]
 r578: [859..860]
 r579: [854..855]
 r580: [851..852]
 r581: [849..850]
 r582: [844..845]
 r583: [841..842]
 r584: [839..840]
 r585: [834..835]
 r586: [831..832]
 r587: [829..830]
 r588: [824..825]
 r589: [821..822]
 r590: [813..814]
 r591: [810..811]
 r592: [806..807]
 r593: [803..804]
 r594: [800..801]
 r595: [796..797]
 r596: [791..792]
 r597: [788..789]
 r598: [781..782]
 r599: [778..779]
 r600: [606..607]
 r601: [600..601]
 r602: [596..597]
 r603: [574..575]
 r604: [569..570]
 r605: [565..566]
 r606: [561..562]
 r607: [555..556]
 r608: [547..548]
 r609: [543..544]
 r610: [537..538]
 r611: [525..526]
 r612: [520..521]
 r613: [511..515]
 r614: [512..513]
 r615: [506..507]
 r616: [502..503]
 r617: [498..499]
 r618: [492..493]
 r619: [488..489]
 r620: [479..483]
 r621: [480..481]
 r622: [465..466]
 r623: [456..460]
 r624: [457..458]
 r625: [451..452]
 r626: [447..448]
 r627: [443..444]
 r628: [437..438]
 r629: [433..434]
 r630: [424..428]
 r631: [425..426]
 r632: [403..407]
 r633: [404..405]
 r634: [382..386]
 r635: [383..384]
 r636: [376..377]
 r637: [371..372]
 r638: [367..368]
 r639: [359..363]
 r640: [360..361]
 r641: [354..355]
 r642: [350..351]
 r643: [343..347]
 r644: [344..345]
 r645: [322..326]
 r646: [323..324]
 r647: [316..317]
 r648: [311..312]
 r649: [307..308]
 r650: [303..304]
 r651: [298..299]
 r652: [294..295]
 r653: [287..291]
 r654: [288..289]
 r655: [275..276]
 r656: [264..268]
 r657: [265..266]
 r658: [258..259]
 r659: [253..254]
 r660: [243..244]
 r661: [236..240]
 r662: [237..238]
 r663: [229..230]
 r664: [225..226]
 r665: [219..220]
 r666: [215..216]
 r667: [206..210]
 r668: [207..208]
 r669: [200..201]
 r670: [195..196]
 r671: [189..190]
 r672: [184..185]
 r673: [178..179]
 r674: [723..724]
 r675: [713..714]
 r676: [709..710]
 r677: [703..704]
 r678: [699..700]
 r679: [695..696]
 r680: [691..692]
 r681: [687..688]
 r682: [683..684]
 r683: [679..680]
 r684: [675..676]
 r685: [671..672]
 r686: [667..668]
 r687: [663..664]
 r688: [659..660]
 r689: [655..656]
 r690: [651..652]
 r691: [647..648]
 r692: [643..644]
 r693: [639..640]
 r694: [635..636]
 r695: [631..632]
 r696: [627..628]
 r697: [623..624]
 r698: [619..620]
 r699: [615..616]
 r700: [611..612]
 r701: [159..159] [149..155]
 r702: [150..151]
 r703: [156..157]
 r704: [152..153]
 r705: [147..147] [141..145]
 r706: [142..143]
 r707: [135..139]
 r708: [133..133] [127..131]
 r709: [128..129]
 r710: [125..125] [117..121]
 r711: [118..119]
 r712: [122..123]
 r713: [111..111] [105..109]
 r714: [106..107]
 r715: [103..103] [97..101]
 r716: [98..99]
 r717: [91..91] [85..89]
 r718: [86..87]
 r719: [83..83] [77..81]
 r720: [78..79]
 r721: [70..71]
 r722: [69..69] [61..65]
 r723: [62..63]
 r724: [66..67]
 r725: [59..59] [51..55]
 r726: [52..53]
 r727: [56..57]
 r728: [47..47] [41..45]
 r729: [42..43]
 r730: [39..39] [29..35]
 r731: [30..31]
 r732: [36..37]
 r733: [32..33]
 r734: [21..21] [15..19]
 r735: [16..17]
 r736: [13..13] [7..11]
 r737: [8..9]
 r738: [0..1]
 r739: [826..828]
 r740: [836..838]
 r741: [846..848]
 r742: [856..858]
 r743: [905..907]
 r744: [915..917]
 r745: [924..926]
 r746: [933..935]
 r747: [942..944]
 r748: [951..953]
 r749: [960..962]
 r750: [969..971]
 r751: [978..980]
 r752: [987..989]
 r753: [996..998]
 r754: [1005..1007]
 r755: [1014..1016]
 r756: [1023..1025]
 r757: [741..761]
 r758: [186..188]
 r759: [197..199]
 r760: [217..231]
 r761: [255..257]
 r762: [300..302]
 r763: [313..315]
 r764: [356..358]
 r765: [362..366]
 r766: [373..375]
 r767: [435..453]
 r768: [490..508]
 r769: [221..522]
 r770: [523..524]
 r771: [232..564]
 r772: [277..571]
 r773: [572..573]
Compressing live ranges: from 1039 to 890 - 85%
Ranges after the compression:
 r113: [159..679] [156..156]
 r128: [73..767]
 r129: [71..763]
 r130: [80..759]
 r131: [78..755]
 r132: [10..751]
 r133: [8..747]
 r134: [17..743]
 r135: [15..739]
 r136: [91..735]
 r137: [89..727]
 r138: [98..719]
 r139: [96..711]
 r141: [698..701]
 r142: [690..693]
 r144: [537..552]
 r146: [533..546]
 r147: [529..544]
 r149: [523..540]
 r152: [363..534]
 r154: [305..530]
 r160: [489..508]
 r162: [485..504]
 r163: [481..500]
 r165: [475..494]
 r168: [309..486]
 r170: [253..482]
 r173: [353..472]
 r176: [435..458]
 r178: [431..452]
 r179: [427..448]
 r181: [425..442]
 r184: [257..432]
 r186: [203..428]
 r187: [355..426]
 r189: [299..420]
 r192: [383..406]
 r194: [379..400]
 r195: [375..396]
 r197: [373..390]
 r200: [209..380]
 r202: [359..376]
 r203: [301..374]
 r205: [245..370]
 r206: [399..707] [116..272]
 r209: [343..360]
 r211: [335..356]
 r212: [329..354]
 r214: [321..350]
 r217: [555..685] [127..338]
 r219: [704..705] [405..687] [57..330]
 r220: [451..715] [118..324]
 r222: [678..683] [30..154]
 r225: [289..306]
 r227: [281..302]
 r228: [275..300]
 r230: [269..296]
 r233: [511..683] [125..284]
 r235: [704..704] [676..699] [52..152]
 r238: [465..681] [41..264]
 r241: [235..254]
 r243: [227..250]
 r244: [223..246]
 r247: [221..242]
 r250: [674..683] [138..150]
 r252: [704..705] [650..695] [48..148]
 r254: [672..731] [111..146]
 r256: [413..679] [39..216]
 r260: [181..204]
 r262: [173..198]
 r264: [169..194]
 r266: [163..188]
 r270: [670..683] [134..144]
 r273: [704..705] [668..691] [61..142]
 r274: [503..723] [107..166]
 r276: [666..683] [34..140]
 r281: [664..687]
 r293: [662..887]
 r296: [649..679] [561..646]
 r297: [652..883]
 r301: [658..879]
 r304: [649..679] [517..640]
 r305: [649..871] [493..636]
 r306: [656..679]
 r309: [649..863] [471..632]
 r312: [649..679] [469..630]
 r313: [649..855] [441..626]
 r314: [654..679]
 r317: [649..847] [419..620]
 r320: [649..679] [417..618]
 r321: [649..839] [389..614]
 r322: [649..679] [387..610]
 r325: [649..831] [369..608]
 r328: [649..679] [367..606]
 r329: [649..823] [349..602]
 r330: [649..679] [347..598]
 r333: [649..815] [315..596]
 r336: [649..679] [313..594]
 r337: [649..807] [295..590]
 r338: [649..679] [293..586]
 r341: [649..799] [263..584]
 r344: [649..679] [261..582]
 r345: [649..791] [241..578]
 r346: [649..679] [239..574]
 r349: [649..783] [215..572]
 r352: [649..679] [213..570]
 r353: [649..775] [187..566]
 r354: [649..679] [185..562]
 r357: [780..889]
 r358: [888..889]
 r359: [886..887]
 r360: [882..883]
 r361: [874..875]
 r362: [866..867]
 r363: [858..859]
 r364: [850..851]
 r365: [842..843]
 r366: [834..835]
 r367: [826..827]
 r368: [818..819]
 r369: [810..811]
 r370: [802..803]
 r371: [794..795]
 r372: [786..787]
 r373: [778..779]
 r374: [557..558]
 r375: [553..556]
 r376: [547..548]
 r377: [541..542]
 r378: [537..538]
 r379: [535..536]
 r380: [531..532]
 r381: [521..522]
 r382: [513..514]
 r383: [509..512]
 r384: [505..506]
 r385: [495..496]
 r386: [489..490]
 r387: [487..488]
 r388: [483..484]
 r389: [473..474]
 r390: [463..466]
 r391: [459..462]
 r392: [453..454]
 r393: [443..444]
 r394: [435..436]
 r395: [433..434]
 r396: [429..430]
 r397: [421..422]
 r398: [411..414]
 r399: [407..410]
 r400: [401..402]
 r401: [391..392]
 r402: [383..384]
 r403: [381..382]
 r404: [377..378]
 r405: [371..372]
 r406: [363..364]
 r407: [361..362]
 r408: [357..358]
 r409: [351..352]
 r410: [343..344]
 r411: [341..342]
 r412: [333..334]
 r413: [319..320]
 r414: [309..310]
 r415: [307..308]
 r416: [303..304]
 r417: [297..298]
 r418: [289..290]
 r419: [287..288]
 r420: [279..280]
 r421: [267..268]
 r422: [257..258]
 r423: [255..256]
 r424: [251..252]
 r425: [243..244]
 r426: [235..236]
 r427: [233..234]
 r428: [225..226]
 r429: [219..220]
 r430: [209..210]
 r431: [205..208]
 r432: [199..200]
 r433: [189..190]
 r434: [181..182]
 r435: [179..180]
 r436: [171..172]
 r437: [161..162]
 r438: [643..648]
 r439: [565..648]
 r440: [645..648]
 r444: [635..642]
 r446: [639..642]
 r450: [625..634]
 r452: [629..632]
 r456: [613..622]
 r458: [617..620]
 r462: [601..610]
 r464: [605..608]
 r468: [589..598]
 r470: [593..596]
 r474: [577..586]
 r476: [581..584]
 r480: [565..574]
 r482: [569..572]
 r486: [101..120]
 r487: [121..129]
 r488: [121..122]
 r489: [101..102]
 r490: [103..113]
 r491: [103..104]
 r492: [83..100]
 r493: [20..84]
 r494: [85..93]
 r495: [85..86]
 r496: [65..82]
 r497: [65..66]
 r498: [67..75]
 r499: [67..68]
 r500: [63..64]
 r501: [22..43]
 r502: [44..54]
 r503: [44..45]
 r504: [22..23]
 r505: [24..36]
 r506: [24..25]
 r507: [20..21]
 r511: [2..19]
 r512: [2..3]
 r513: [4..12]
 r514: [4..5]
 r515: [0..1]
 r517: [499..677] [155..316]
 r518: [551..675] [153..276]
 r519: [461..673] [151..230]
 r520: [507..649] [149..224]
 r521: [545..671] [147..222]
 r522: [409..669] [145..176]
 r523: [457..667] [143..170]
 r524: [543..665] [141..160]
 r525: [156..663]
 r526: [559..661]
 r527: [649..651] [539..644]
 r528: [649..659] [539..642]
 r529: [649..657] [515..642]
 r530: [649..655] [491..634]
 r531: [649..653] [439..622]
 r532: [884..885]
 r533: [880..881]
 r534: [876..877]
 r535: [872..873]
 r536: [868..869]
 r537: [864..865]
 r538: [860..861]
 r539: [856..857]
 r540: [852..853]
 r541: [848..849]
 r542: [844..845]
 r543: [840..841]
 r544: [836..837]
 r545: [832..833]
 r546: [828..829]
 r547: [824..825]
 r548: [820..821]
 r549: [816..817]
 r550: [812..813]
 r551: [808..809]
 r552: [804..805]
 r553: [800..801]
 r554: [796..797]
 r555: [792..793]
 r556: [788..789]
 r557: [784..785]
 r558: [780..781]
 r559: [776..777]
 r560: [772..773]
 r561: [770..771]
 r562: [768..769]
 r563: [766..767]
 r564: [764..765]
 r565: [762..763]
 r566: [760..761]
 r567: [758..759]
 r568: [756..757]
 r569: [754..755]
 r570: [752..753]
 r571: [750..751]
 r572: [748..749]
 r573: [746..747]
 r574: [744..745]
 r575: [742..743]
 r576: [740..741]
 r577: [738..739]
 r578: [736..737]
 r579: [732..733]
 r580: [730..731]
 r581: [728..729]
 r582: [724..725]
 r583: [722..723]
 r584: [720..721]
 r585: [716..717]
 r586: [714..715]
 r587: [712..713]
 r588: [708..709]
 r589: [706..707]
 r590: [702..703]
 r591: [700..701]
 r592: [696..697]
 r593: [694..695]
 r594: [692..693]
 r595: [688..689]
 r596: [686..687]
 r597: [684..685]
 r598: [682..683]
 r599: [680..681]
 r600: [559..560]
 r601: [553..554]
 r602: [549..550]
 r603: [527..528]
 r604: [523..524]
 r605: [519..520]
 r606: [515..516]
 r607: [509..510]
 r608: [501..502]
 r609: [497..498]
 r610: [491..492]
 r611: [479..480]
 r612: [475..476]
 r613: [467..470]
 r614: [467..468]
 r615: [463..464]
 r616: [459..460]
 r617: [455..456]
 r618: [449..450]
 r619: [445..446]
 r620: [437..440]
 r621: [437..438]
 r622: [423..424]
 r623: [415..418]
 r624: [415..416]
 r625: [411..412]
 r626: [407..408]
 r627: [403..404]
 r628: [397..398]
 r629: [393..394]
 r630: [385..388]
 r631: [385..386]
 r632: [365..368]
 r633: [365..366]
 r634: [345..348]
 r635: [345..346]
 r636: [339..340]
 r637: [335..336]
 r638: [331..332]
 r639: [325..328]
 r640: [325..326]
 r641: [321..322]
 r642: [317..318]
 r643: [311..314]
 r644: [311..312]
 r645: [291..294]
 r646: [291..292]
 r647: [285..286]
 r648: [281..282]
 r649: [277..278]
 r650: [273..274]
 r651: [269..270]
 r652: [265..266]
 r653: [259..262]
 r654: [259..260]
 r655: [247..248]
 r656: [237..240]
 r657: [237..238]
 r658: [231..232]
 r659: [227..228]
 r660: [217..218]
 r661: [211..214]
 r662: [211..212]
 r663: [205..206]
 r664: [201..202]
 r665: [195..196]
 r666: [191..192]
 r667: [183..186]
 r668: [183..184]
 r669: [177..178]
 r670: [173..174]
 r671: [167..168]
 r672: [163..164]
 r673: [157..158]
 r674: [647..648]
 r675: [641..642]
 r676: [637..638]
 r677: [633..634]
 r678: [631..632]
 r679: [627..628]
 r680: [623..624]
 r681: [621..622]
 r682: [619..620]
 r683: [615..616]
 r684: [611..612]
 r685: [609..610]
 r686: [607..608]
 r687: [603..604]
 r688: [599..600]
 r689: [597..598]
 r690: [595..596]
 r691: [591..592]
 r692: [587..588]
 r693: [585..586]
 r694: [583..584]
 r695: [579..580]
 r696: [575..576]
 r697: [573..574]
 r698: [571..572]
 r699: [567..568]
 r700: [563..564]
 r701: [139..139] [130..135]
 r702: [130..131]
 r703: [136..137]
 r704: [132..133]
 r705: [128..128] [123..126]
 r706: [123..124]
 r707: [121..122]
 r708: [119..119] [114..117]
 r709: [114..115]
 r710: [112..112] [105..108]
 r711: [105..106]
 r712: [109..110]
 r713: [99..99] [94..97]
 r714: [94..95]
 r715: [92..92] [87..90]
 r716: [87..88]
 r717: [81..81] [76..79]
 r718: [76..77]
 r719: [74..74] [69..72]
 r720: [69..70]
 r721: [63..64]
 r722: [62..62] [55..58]
 r723: [55..56]
 r724: [59..60]
 r725: [53..53] [46..49]
 r726: [46..47]
 r727: [50..51]
 r728: [42..42] [37..40]
 r729: [37..38]
 r730: [35..35] [26..31]
 r731: [26..27]
 r732: [32..33]
 r733: [28..29]
 r734: [18..18] [13..16]
 r735: [13..14]
 r736: [11..11] [6..9]
 r737: [6..7]
 r738: [0..1]
 r739: [710..711]
 r740: [718..719]
 r741: [726..727]
 r742: [734..735]
 r743: [774..775]
 r744: [782..783]
 r745: [790..791]
 r746: [798..799]
 r747: [806..807]
 r748: [814..815]
 r749: [822..823]
 r750: [830..831]
 r751: [838..839]
 r752: [846..847]
 r753: [854..855]
 r754: [862..863]
 r755: [870..871]
 r756: [878..879]
 r757: [660..679]
 r758: [165..166]
 r759: [175..176]
 r760: [193..206]
 r761: [229..230]
 r762: [271..272]
 r763: [283..284]
 r764: [323..324]
 r765: [327..330]
 r766: [337..338]
 r767: [395..412]
 r768: [447..464]
 r769: [197..476]
 r770: [477..478]
 r771: [207..518]
 r772: [249..524]
 r773: [525..526]

********** Assignment #1: **********

	 Assigning to 605 (cl=GENERAL_REGS, orig=157, freq=2799, tfirst=605, tfreq=4665)...
	   Assign 37 to reload r605 (freq=2799)
	Hard reg 37 is preferable by r771 with profit 933
	Hard reg 37 is preferable by r760 with profit 466
	Hard reg 37 is preferable by r663 with profit 233
	Hard reg 37 is preferable by r666 with profit 1166
	 Assigning to 663 (cl=GENERAL_REGS, orig=157, freq=1866, tfirst=605, tfreq=4665)...
	   Assign 0 to optional reload r663 (freq=1866)
	Hard reg 0 is preferable by r760 with profit 933
	Hard reg 37 is preferable by r760 with profit 466
	Hard reg 37 is preferable by r771 with profit 933
	Hard reg 0 is preferable by r771 with profit 466
	Hard reg 37 is preferable by r666 with profit 1166
	Hard reg 0 is preferable by r666 with profit 466
	 Assigning to 666 (cl=GENERAL_REGS, orig=433, freq=2799, tfirst=605, tfreq=4665)...
	   Assign 37 to reload r666 (freq=2799)
	Hard reg 37 is preferable by r760 with profit 1399
	Hard reg 0 is preferable by r760 with profit 933
	Hard reg 37 is preferable by r771 with profit 1399
	Hard reg 0 is preferable by r771 with profit 466
	 Assigning to 760 (cl=GENERAL_REGS, orig=157, freq=2799, tfirst=605, tfreq=4665)...
	   Assign 1 to inheritance r760 (freq=2799)
	Hard reg 37 is preferable by r771 with profit 1399
	Hard reg 1 is preferable by r771 with profit 933
	 Assigning to 771 (cl=GENERAL_REGS, orig=157, freq=1866, tfirst=605, tfreq=4665)...
	 Assigning to 615 (cl=GENERAL_REGS, orig=238, freq=1866, tfirst=615, tfreq=3732)...
	   Assign 43 to optional reload r615 (freq=1866)
	Hard reg 43 is preferable by r768 with profit 933
	Hard reg 40 is preferable by r619 with profit 933
	Hard reg 43 is preferable by r619 with profit 466
	 Assigning to 619 (cl=GENERAL_REGS, orig=393, freq=2799, tfirst=615, tfreq=3732)...
	   Assign 40 to reload r619 (freq=2799)
	Hard reg 43 is preferable by r768 with profit 933
	Hard reg 40 is preferable by r768 with profit 933
	 Assigning to 768 (cl=GENERAL_REGS, orig=238, freq=2799, tfirst=615, tfreq=3732)...
	   Assign 40 to inheritance r768 (freq=2799)
	 Assigning to 625 (cl=GENERAL_REGS, orig=256, freq=1866, tfirst=625, tfreq=3732)...
	   Assign 44 to optional reload r625 (freq=1866)
	Hard reg 44 is preferable by r767 with profit 933
	Hard reg 40 is preferable by r629 with profit 933
	Hard reg 44 is preferable by r629 with profit 466
	 Assigning to 629 (cl=GENERAL_REGS, orig=401, freq=2799, tfirst=625, tfreq=3732)...
	   Assign 40 to reload r629 (freq=2799)
	Hard reg 44 is preferable by r767 with profit 933
	Hard reg 40 is preferable by r767 with profit 933
	 Assigning to 767 (cl=GENERAL_REGS, orig=256, freq=2799, tfirst=625, tfreq=3732)...
	   Assign 44 to inheritance r767 (freq=2799)
	 Assigning to 638 (cl=GENERAL_REGS, orig=219, freq=2799, tfirst=638, tfreq=3732)...
	   Assign 41 to reload r638 (freq=2799)
	Hard reg 41 is preferable by r765 with profit 933
	Hard reg 41 is preferable by r640 with profit 466
	 Assigning to 640 (cl=GENERAL_REGS, orig=219, freq=1866, tfirst=638, tfreq=3732)...
	   Assign 41 to optional reload r640 (freq=1866)
	Hard reg 41 is preferable by r765 with profit 1866
	 Assigning to 765 (cl=GENERAL_REGS, orig=219, freq=2799, tfirst=638, tfreq=3732)...
	   Assign 41 to inheritance r765 (freq=2799)
	 Assigning to 639 (cl=GENERAL_REGS, orig=220, freq=2799, tfirst=639, tfreq=3732)...
	   Assign 43 to reload r639 (freq=2799)
	Hard reg 43 is preferable by r764 with profit 933
	Hard reg 43 is preferable by r641 with profit 466
	 Assigning to 641 (cl=GENERAL_REGS, orig=220, freq=1866, tfirst=639, tfreq=3732)...
	   Assign 43 to optional reload r641 (freq=1866)
	Hard reg 43 is preferable by r764 with profit 1866
	 Assigning to 764 (cl=GENERAL_REGS, orig=220, freq=2799, tfirst=639, tfreq=3732)...
	   Assign 43 to inheritance r764 (freq=2799)
	 Assigning to 602 (cl=GENERAL_REGS, orig=376, freq=2799, tfirst=602, tfreq=2799)...
	   Assign 2 to reload r602 (freq=2799)
	 Assigning to 603 (cl=GENERAL_REGS, orig=155, freq=1866, tfirst=603, tfreq=2799)...
	   Assign 38 to reload r603 (freq=1866)
	Hard reg 38 is preferable by r773 with profit 933
	Hard reg 38 is preferable by r772 with profit 466
	Hard reg 38 is preferable by r604 with profit 233
	Hard reg 38 is preferable by r655 with profit 233
	 Assigning to 604 (cl=GENERAL_REGS, orig=155, freq=1866, tfirst=603, tfreq=2799)...
	   Assign 38 to optional reload r604 (freq=1866)
	Hard reg 38 is preferable by r772 with profit 1399
	Hard reg 38 is preferable by r773 with profit 1399
	Hard reg 38 is preferable by r655 with profit 699
	 Assigning to 655 (cl=GENERAL_REGS, orig=155, freq=1866, tfirst=603, tfreq=2799)...
	   Assign 38 to reload r655 (freq=1866)
	Hard reg 38 is preferable by r772 with profit 2332
	Hard reg 38 is preferable by r773 with profit 1865
	 Assigning to 772 (cl=GENERAL_REGS, orig=155, freq=2799, tfirst=603, tfreq=2799)...
	 Assigning to 773 (cl=GENERAL_REGS, orig=155, freq=1866, tfirst=603, tfreq=2799)...
	   Assign 38 to inheritance r773 (freq=1866)
	Hard reg 38 is preferable by r772 with profit 3265
	 Assigning to 608 (cl=GENERAL_REGS, orig=163, freq=2799, tfirst=608, tfreq=2799)...
	   Assign 44 to reload r608 (freq=2799)
	 Assigning to 609 (cl=GENERAL_REGS, orig=385, freq=2799, tfirst=609, tfreq=2799)...
	   Assign 43 to reload r609 (freq=2799)
	 Assigning to 611 (cl=GENERAL_REGS, orig=171, freq=1866, tfirst=611, tfreq=2799)...
	   Assign 43 to reload r611 (freq=1866)
	Hard reg 43 is preferable by r770 with profit 933
	Hard reg 43 is preferable by r769 with profit 466
	Hard reg 43 is preferable by r612 with profit 233
	Hard reg 43 is preferable by r665 with profit 233
	 Assigning to 612 (cl=GENERAL_REGS, orig=171, freq=1866, tfirst=611, tfreq=2799)...
	   Assign 43 to optional reload r612 (freq=1866)
	Hard reg 43 is preferable by r769 with profit 1399
	Hard reg 43 is preferable by r770 with profit 1399
	Hard reg 43 is preferable by r665 with profit 699
	 Assigning to 665 (cl=GENERAL_REGS, orig=171, freq=1866, tfirst=611, tfreq=2799)...
	   Assign 0 to reload r665 (freq=1866)
	Hard reg 43 is preferable by r769 with profit 1399
	Hard reg 0 is preferable by r769 with profit 933
	Hard reg 43 is preferable by r770 with profit 1399
	Hard reg 0 is preferable by r770 with profit 466
	 Assigning to 769 (cl=GENERAL_REGS, orig=171, freq=2799, tfirst=611, tfreq=2799)...
	 Assigning to 770 (cl=GENERAL_REGS, orig=171, freq=1866, tfirst=611, tfreq=2799)...
	   Assign 43 to inheritance r770 (freq=1866)
	Hard reg 43 is preferable by r769 with profit 2332
	Hard reg 0 is preferable by r769 with profit 933
	 Assigning to 613 (cl=GENERAL_REGS, orig=390, freq=2799, tfirst=613, tfreq=2799)...
	   Assign 39 to reload r613 (freq=2799)
	 Assigning to 617 (cl=GENERAL_REGS, orig=392, freq=2799, tfirst=617, tfreq=2799)...
	   Assign 3 to reload r617 (freq=2799)
	 Assigning to 618 (cl=GENERAL_REGS, orig=179, freq=2799, tfirst=618, tfreq=2799)...
	   Assign 3 to reload r618 (freq=2799)
	 Assigning to 620 (cl=GENERAL_REGS, orig=394, freq=2799, tfirst=620, tfreq=2799)...
	   Assign 3 to reload r620 (freq=2799)
	 Assigning to 622 (cl=GENERAL_REGS, orig=397, freq=2799, tfirst=622, tfreq=2799)...
	   Assign 3 to reload r622 (freq=2799)
	 Assigning to 623 (cl=GENERAL_REGS, orig=398, freq=2799, tfirst=623, tfreq=2799)...
	   Assign 39 to reload r623 (freq=2799)
	 Assigning to 627 (cl=GENERAL_REGS, orig=400, freq=2799, tfirst=627, tfreq=2799)...
	   Assign 41 to reload r627 (freq=2799)
	 Assigning to 628 (cl=GENERAL_REGS, orig=195, freq=2799, tfirst=628, tfreq=2799)...
	   Assign 42 to reload r628 (freq=2799)
	 Assigning to 630 (cl=GENERAL_REGS, orig=402, freq=2799, tfirst=630, tfreq=2799)...
	   Assign 44 to reload r630 (freq=2799)
	 Assigning to 632 (cl=GENERAL_REGS, orig=406, freq=2799, tfirst=632, tfreq=2799)...
	   Assign 44 to reload r632 (freq=2799)
	 Assigning to 634 (cl=GENERAL_REGS, orig=410, freq=2799, tfirst=634, tfreq=2799)...
	   Assign 44 to reload r634 (freq=2799)
	 Assigning to 636 (cl=GENERAL_REGS, orig=217, freq=1866, tfirst=636, tfreq=2799)...
	   Assign 44 to reload r636 (freq=1866)
	Hard reg 44 is preferable by r766 with profit 933
	Hard reg 44 is preferable by r637 with profit 466
	 Assigning to 637 (cl=GENERAL_REGS, orig=217, freq=1866, tfirst=636, tfreq=2799)...
	   Assign 44 to optional reload r637 (freq=1866)
	Hard reg 44 is preferable by r766 with profit 1866
	 Assigning to 766 (cl=GENERAL_REGS, orig=217, freq=2799, tfirst=636, tfreq=2799)...
	   Assign 44 to inheritance r766 (freq=2799)
	 Assigning to 642 (cl=GENERAL_REGS, orig=222, freq=2799, tfirst=642, tfreq=2799)...
	   Assign 6 to reload r642 (freq=2799)
	 Assigning to 643 (cl=GENERAL_REGS, orig=414, freq=2799, tfirst=643, tfreq=2799)...
	   Assign 1 to reload r643 (freq=2799)
	 Assigning to 645 (cl=GENERAL_REGS, orig=418, freq=2799, tfirst=645, tfreq=2799)...
	   Assign 1 to reload r645 (freq=2799)
	 Assigning to 647 (cl=GENERAL_REGS, orig=233, freq=1866, tfirst=647, tfreq=2799)...
	   Assign 44 to reload r647 (freq=1866)
	Hard reg 44 is preferable by r763 with profit 933
	Hard reg 44 is preferable by r648 with profit 466
	 Assigning to 648 (cl=GENERAL_REGS, orig=233, freq=1866, tfirst=647, tfreq=2799)...
	   Assign 44 to optional reload r648 (freq=1866)
	Hard reg 44 is preferable by r763 with profit 1866
	 Assigning to 763 (cl=GENERAL_REGS, orig=233, freq=2799, tfirst=647, tfreq=2799)...
	   Assign 44 to inheritance r763 (freq=2799)
	 Assigning to 649 (cl=GENERAL_REGS, orig=235, freq=2799, tfirst=649, tfreq=2799)...
	   Assign 2 to reload r649 (freq=2799)
	 Assigning to 650 (cl=GENERAL_REGS, orig=206, freq=1866, tfirst=650, tfreq=2799)...
	   Assign 2 to reload r650 (freq=1866)
	Hard reg 2 is preferable by r762 with profit 933
	Hard reg 2 is preferable by r651 with profit 466
	 Assigning to 651 (cl=GENERAL_REGS, orig=206, freq=1866, tfirst=650, tfreq=2799)...
	   Assign 2 to optional reload r651 (freq=1866)
	Hard reg 2 is preferable by r762 with profit 1866
	 Assigning to 762 (cl=GENERAL_REGS, orig=206, freq=2799, tfirst=650, tfreq=2799)...
	   Assign 2 to inheritance r762 (freq=2799)
	 Assigning to 652 (cl=GENERAL_REGS, orig=238, freq=2799, tfirst=652, tfreq=2799)...
	   Assign 3 to reload r652 (freq=2799)
	 Assigning to 653 (cl=GENERAL_REGS, orig=422, freq=2799, tfirst=653, tfreq=2799)...
	   Assign 0 to reload r653 (freq=2799)
	 Assigning to 656 (cl=GENERAL_REGS, orig=426, freq=2799, tfirst=656, tfreq=2799)...
	   Assign 1 to reload r656 (freq=2799)
	 Assigning to 658 (cl=GENERAL_REGS, orig=250, freq=1866, tfirst=658, tfreq=2799)...
	   Assign 3 to reload r658 (freq=1866)
	Hard reg 3 is preferable by r761 with profit 933
	Hard reg 3 is preferable by r659 with profit 466
	 Assigning to 659 (cl=GENERAL_REGS, orig=250, freq=1866, tfirst=658, tfreq=2799)...
	   Assign 3 to optional reload r659 (freq=1866)
	Hard reg 3 is preferable by r761 with profit 1866
	 Assigning to 761 (cl=GENERAL_REGS, orig=250, freq=2799, tfirst=658, tfreq=2799)...
	   Assign 3 to inheritance r761 (freq=2799)
	 Assigning to 660 (cl=GENERAL_REGS, orig=256, freq=2799, tfirst=660, tfreq=2799)...
	   Assign 40 to reload r660 (freq=2799)
	 Assigning to 661 (cl=GENERAL_REGS, orig=430, freq=2799, tfirst=661, tfreq=2799)...
	   Assign 0 to reload r661 (freq=2799)
	 Assigning to 664 (cl=GENERAL_REGS, orig=432, freq=2799, tfirst=664, tfreq=2799)...
	   Assign 3 to reload r664 (freq=2799)
	 Assigning to 667 (cl=GENERAL_REGS, orig=434, freq=2799, tfirst=667, tfreq=2799)...
	   Assign 1 to reload r667 (freq=2799)
	 Assigning to 669 (cl=GENERAL_REGS, orig=270, freq=1866, tfirst=669, tfreq=2799)...
	   Assign 1 to reload r669 (freq=1866)
	Hard reg 1 is preferable by r759 with profit 933
	Hard reg 1 is preferable by r670 with profit 466
	 Assigning to 670 (cl=GENERAL_REGS, orig=270, freq=1866, tfirst=669, tfreq=2799)...
	   Assign 1 to optional reload r670 (freq=1866)
	Hard reg 1 is preferable by r759 with profit 1866
	 Assigning to 759 (cl=GENERAL_REGS, orig=270, freq=2799, tfirst=669, tfreq=2799)...
	   Assign 1 to inheritance r759 (freq=2799)
	 Assigning to 671 (cl=GENERAL_REGS, orig=274, freq=1866, tfirst=671, tfreq=2799)...
	   Assign 0 to reload r671 (freq=1866)
	Hard reg 0 is preferable by r758 with profit 933
	Hard reg 0 is preferable by r672 with profit 466
	 Assigning to 672 (cl=GENERAL_REGS, orig=274, freq=1866, tfirst=671, tfreq=2799)...
	   Assign 0 to optional reload r672 (freq=1866)
	Hard reg 0 is preferable by r758 with profit 1866
	 Assigning to 758 (cl=GENERAL_REGS, orig=274, freq=2799, tfirst=671, tfreq=2799)...
	   Assign 0 to inheritance r758 (freq=2799)
	 Assigning to 673 (cl=GENERAL_REGS, orig=113, freq=2799, tfirst=673, tfreq=2799)...
	   Assign 0 to optional reload r673 (freq=2799)
	 Assigning to 600 (cl=GENERAL_REGS, orig=296, freq=1866, tfirst=600, tfreq=1866)...
	   Assign 2 to optional reload r600 (freq=1866)
	 Assigning to 601 (cl=GENERAL_REGS, orig=217, freq=1866, tfirst=601, tfreq=1866)...
	   Assign 2 to optional reload r601 (freq=1866)
	 Assigning to 606 (cl=GENERAL_REGS, orig=304, freq=1866, tfirst=606, tfreq=1866)...
	   Assign 40 to optional reload r606 (freq=1866)
	 Assigning to 607 (cl=GENERAL_REGS, orig=233, freq=1866, tfirst=607, tfreq=1866)...
	   Assign 40 to optional reload r607 (freq=1866)
	 Assigning to 610 (cl=GENERAL_REGS, orig=305, freq=1866, tfirst=610, tfreq=1866)...
	   Assign 43 to optional reload r610 (freq=1866)
	 Assigning to 614 (cl=GENERAL_REGS, orig=312, freq=1866, tfirst=614, tfreq=1866)...
	   Assign 40 to optional reload r614 (freq=1866)
	 Assigning to 616 (cl=GENERAL_REGS, orig=250, freq=1866, tfirst=616, tfreq=1866)...
	   Assign 44 to optional reload r616 (freq=1866)
	 Assigning to 621 (cl=GENERAL_REGS, orig=314, freq=1866, tfirst=621, tfreq=1866)...
	   Assign 44 to optional reload r621 (freq=1866)
	 Assigning to 624 (cl=GENERAL_REGS, orig=320, freq=1866, tfirst=624, tfreq=1866)...
	   Assign 40 to optional reload r624 (freq=1866)
	 Assigning to 626 (cl=GENERAL_REGS, orig=270, freq=1866, tfirst=626, tfreq=1866)...
	   Assign 40 to optional reload r626 (freq=1866)
	 Assigning to 631 (cl=GENERAL_REGS, orig=322, freq=1866, tfirst=631, tfreq=1866)...
	 Assigning to 633 (cl=GENERAL_REGS, orig=328, freq=1866, tfirst=633, tfreq=1866)...
	 Assigning to 635 (cl=GENERAL_REGS, orig=330, freq=1866, tfirst=635, tfreq=1866)...
	 Assigning to 644 (cl=GENERAL_REGS, orig=336, freq=1866, tfirst=644, tfreq=1866)...
	   Assign 44 to optional reload r644 (freq=1866)
	 Assigning to 646 (cl=GENERAL_REGS, orig=338, freq=1866, tfirst=646, tfreq=1866)...
	   Assign 44 to optional reload r646 (freq=1866)
	 Assigning to 654 (cl=GENERAL_REGS, orig=344, freq=1866, tfirst=654, tfreq=1866)...
	   Assign 3 to optional reload r654 (freq=1866)
	 Assigning to 657 (cl=GENERAL_REGS, orig=346, freq=1866, tfirst=657, tfreq=1866)...
	   Assign 3 to optional reload r657 (freq=1866)
	 Assigning to 662 (cl=GENERAL_REGS, orig=352, freq=1866, tfirst=662, tfreq=1866)...
	   Assign 2 to optional reload r662 (freq=1866)
	 Assigning to 668 (cl=GENERAL_REGS, orig=354, freq=1866, tfirst=668, tfreq=1866)...
	   Assign 2 to optional reload r668 (freq=1866)
	 Assigning to 674 (cl=GENERAL_REGS, orig=296, freq=1742, tfirst=674, tfreq=1742)...
	   Assign 39 to reload r674 (freq=1742)
	 Assigning to 675 (cl=GENERAL_REGS, orig=304, freq=1742, tfirst=675, tfreq=1742)...
	   Assign 44 to reload r675 (freq=1742)
	 Assigning to 676 (cl=GENERAL_REGS, orig=305, freq=1742, tfirst=676, tfreq=1742)...
	   Assign 44 to reload r676 (freq=1742)
	 Assigning to 677 (cl=GENERAL_REGS, orig=309, freq=1742, tfirst=677, tfreq=1742)...
	   Assign 44 to reload r677 (freq=1742)
	 Assigning to 678 (cl=GENERAL_REGS, orig=312, freq=1742, tfirst=678, tfreq=1742)...
	 Trying 0: spill 530(freq=1871) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)	 Now best 0(cost=-8581, bad_spills=0, insn_pseudos=0)

	 Trying 1: spill 527(freq=1871) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)
	 Trying 2: spill 439(freq=14807) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)
	 Trying 37: spill 524(freq=2932) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)
	 Trying 38: spill 521(freq=2932) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)
	 Trying 39: spill 529(freq=1871) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)
	 Trying 40: spill 526(freq=1871) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)
	 Trying 3: spill 523(freq=2932) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)
	 Trying 4: spill 525(freq=14936) assign 771(cost=-1866) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)
	 Trying 5: spill 520(freq=2932) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)
	 Trying 6: spill 518(freq=2932) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)
	 Trying 41: spill 528(freq=1871) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)
	 Trying 42: spill 450(freq=2613)
	 Trying 43: spill 517(freq=2932) assign 682(cost=-1742) assign 686(cost=-1742) assign 690(cost=-1742) assign 694(cost=-1742) assign 698(cost=-1742)
	 Trying 44: spill 452(freq=2613)
      Spill r530(hr=0, freq=1871) for r678
	   Assign 0 to reload r678 (freq=1742)
	 Assigning to 679 (cl=GENERAL_REGS, orig=313, freq=1742, tfirst=679, tfreq=1742)...
	   Assign 0 to reload r679 (freq=1742)
	 Assigning to 680 (cl=GENERAL_REGS, orig=314, freq=1742, tfirst=680, tfreq=1742)...
	   Assign 0 to reload r680 (freq=1742)
	 Assigning to 681 (cl=GENERAL_REGS, orig=317, freq=1742, tfirst=681, tfreq=1742)...
	   Assign 0 to reload r681 (freq=1742)
	 Assigning to 682 (cl=GENERAL_REGS, orig=320, freq=1742, tfirst=682, tfreq=1742)...
	   Assign 0 to reload r682 (freq=1742)
	 Assigning to 683 (cl=GENERAL_REGS, orig=321, freq=1742, tfirst=683, tfreq=1742)...
	   Assign 0 to reload r683 (freq=1742)
	 Assigning to 684 (cl=GENERAL_REGS, orig=322, freq=1742, tfirst=684, tfreq=1742)...
	   Assign 0 to reload r684 (freq=1742)
	 Assigning to 685 (cl=GENERAL_REGS, orig=325, freq=1742, tfirst=685, tfreq=1742)...
	   Assign 0 to reload r685 (freq=1742)
	 Assigning to 686 (cl=GENERAL_REGS, orig=328, freq=1742, tfirst=686, tfreq=1742)...
	   Assign 0 to reload r686 (freq=1742)
	 Assigning to 687 (cl=GENERAL_REGS, orig=329, freq=1742, tfirst=687, tfreq=1742)...
	   Assign 0 to reload r687 (freq=1742)
	 Assigning to 688 (cl=GENERAL_REGS, orig=330, freq=1742, tfirst=688, tfreq=1742)...
	   Assign 0 to reload r688 (freq=1742)
	 Assigning to 689 (cl=GENERAL_REGS, orig=333, freq=1742, tfirst=689, tfreq=1742)...
	   Assign 0 to reload r689 (freq=1742)
	 Assigning to 690 (cl=GENERAL_REGS, orig=336, freq=1742, tfirst=690, tfreq=1742)...
	   Assign 0 to reload r690 (freq=1742)
	 Assigning to 691 (cl=GENERAL_REGS, orig=337, freq=1742, tfirst=691, tfreq=1742)...
	   Assign 0 to reload r691 (freq=1742)
	 Assigning to 692 (cl=GENERAL_REGS, orig=338, freq=1742, tfirst=692, tfreq=1742)...
	   Assign 0 to reload r692 (freq=1742)
	 Assigning to 693 (cl=GENERAL_REGS, orig=341, freq=1742, tfirst=693, tfreq=1742)...
	   Assign 0 to reload r693 (freq=1742)
	 Assigning to 694 (cl=GENERAL_REGS, orig=344, freq=1742, tfirst=694, tfreq=1742)...
	   Assign 0 to reload r694 (freq=1742)
	 Assigning to 695 (cl=GENERAL_REGS, orig=345, freq=1742, tfirst=695, tfreq=1742)...
	   Assign 0 to reload r695 (freq=1742)
	 Assigning to 696 (cl=GENERAL_REGS, orig=346, freq=1742, tfirst=696, tfreq=1742)...
	   Assign 0 to reload r696 (freq=1742)
	 Assigning to 697 (cl=GENERAL_REGS, orig=349, freq=1742, tfirst=697, tfreq=1742)...
	   Assign 0 to reload r697 (freq=1742)
	 Assigning to 698 (cl=GENERAL_REGS, orig=352, freq=1742, tfirst=698, tfreq=1742)...
	   Assign 0 to reload r698 (freq=1742)
	 Assigning to 699 (cl=GENERAL_REGS, orig=353, freq=1742, tfirst=699, tfreq=1742)...
	   Assign 0 to reload r699 (freq=1742)
	 Assigning to 700 (cl=GENERAL_REGS, orig=354, freq=1742, tfirst=700, tfreq=1742)...
	   Assign 0 to reload r700 (freq=1742)
	 Assigning to 533 (cl=GENERAL_REGS, orig=301, freq=198, tfirst=533, tfreq=264)...
	   Assign 38 to reload r533 (freq=198)
	Hard reg 38 is preferable by r756 with profit 66
	Hard reg 38 is preferable by r534 with profit 33
	 Assigning to 534 (cl=GENERAL_REGS, orig=301, freq=132, tfirst=533, tfreq=264)...
	   Assign 38 to reload r534 (freq=132)
	Hard reg 38 is preferable by r756 with profit 132
	 Assigning to 756 (cl=GENERAL_REGS, orig=301, freq=198, tfirst=533, tfreq=264)...
	   Assign 38 to inheritance r756 (freq=198)
	 Assigning to 535 (cl=GENERAL_REGS, orig=305, freq=198, tfirst=535, tfreq=264)...
	   Assign 0 to reload r535 (freq=198)
	Hard reg 0 is preferable by r755 with profit 66
	Hard reg 0 is preferable by r536 with profit 33
	 Assigning to 536 (cl=GENERAL_REGS, orig=305, freq=132, tfirst=535, tfreq=264)...
	   Assign 0 to reload r536 (freq=132)
	Hard reg 0 is preferable by r755 with profit 132
	 Assigning to 755 (cl=GENERAL_REGS, orig=305, freq=198, tfirst=535, tfreq=264)...
	   Assign 0 to inheritance r755 (freq=198)
	 Assigning to 537 (cl=GENERAL_REGS, orig=309, freq=198, tfirst=537, tfreq=264)...
	   Assign 0 to reload r537 (freq=198)
	Hard reg 0 is preferable by r754 with profit 66
	Hard reg 0 is preferable by r538 with profit 33
	 Assigning to 538 (cl=GENERAL_REGS, orig=309, freq=132, tfirst=537, tfreq=264)...
	   Assign 0 to reload r538 (freq=132)
	Hard reg 0 is preferable by r754 with profit 132
	 Assigning to 754 (cl=GENERAL_REGS, orig=309, freq=198, tfirst=537, tfreq=264)...
	   Assign 0 to inheritance r754 (freq=198)
	 Assigning to 539 (cl=GENERAL_REGS, orig=313, freq=198, tfirst=539, tfreq=264)...
	   Assign 0 to reload r539 (freq=198)
	Hard reg 0 is preferable by r753 with profit 66
	Hard reg 0 is preferable by r540 with profit 33
	 Assigning to 540 (cl=GENERAL_REGS, orig=313, freq=132, tfirst=539, tfreq=264)...
	   Assign 0 to reload r540 (freq=132)
	Hard reg 0 is preferable by r753 with profit 132
	 Assigning to 753 (cl=GENERAL_REGS, orig=313, freq=198, tfirst=539, tfreq=264)...
	   Assign 0 to inheritance r753 (freq=198)
	 Assigning to 541 (cl=GENERAL_REGS, orig=317, freq=198, tfirst=541, tfreq=264)...
	   Assign 3 to reload r541 (freq=198)
	Hard reg 3 is preferable by r752 with profit 66
	Hard reg 3 is preferable by r542 with profit 33
	 Assigning to 542 (cl=GENERAL_REGS, orig=317, freq=132, tfirst=541, tfreq=264)...
	   Assign 3 to reload r542 (freq=132)
	Hard reg 3 is preferable by r752 with profit 132
	 Assigning to 752 (cl=GENERAL_REGS, orig=317, freq=198, tfirst=541, tfreq=264)...
	   Assign 3 to inheritance r752 (freq=198)
	 Assigning to 543 (cl=GENERAL_REGS, orig=321, freq=198, tfirst=543, tfreq=264)...
	   Assign 3 to reload r543 (freq=198)
	Hard reg 3 is preferable by r751 with profit 66
	Hard reg 3 is preferable by r544 with profit 33
	 Assigning to 544 (cl=GENERAL_REGS, orig=321, freq=132, tfirst=543, tfreq=264)...
	   Assign 3 to reload r544 (freq=132)
	Hard reg 3 is preferable by r751 with profit 132
	 Assigning to 751 (cl=GENERAL_REGS, orig=321, freq=198, tfirst=543, tfreq=264)...
	   Assign 3 to inheritance r751 (freq=198)
	 Assigning to 545 (cl=GENERAL_REGS, orig=325, freq=198, tfirst=545, tfreq=264)...
	   Assign 0 to reload r545 (freq=198)
	Hard reg 0 is preferable by r750 with profit 66
	Hard reg 0 is preferable by r546 with profit 33
	 Assigning to 546 (cl=GENERAL_REGS, orig=325, freq=132, tfirst=545, tfreq=264)...
	   Assign 0 to reload r546 (freq=132)
	Hard reg 0 is preferable by r750 with profit 132
	 Assigning to 750 (cl=GENERAL_REGS, orig=325, freq=198, tfirst=545, tfreq=264)...
	   Assign 0 to inheritance r750 (freq=198)
	 Assigning to 547 (cl=GENERAL_REGS, orig=329, freq=198, tfirst=547, tfreq=264)...
	   Assign 0 to reload r547 (freq=198)
	Hard reg 0 is preferable by r749 with profit 66
	Hard reg 0 is preferable by r548 with profit 33
	 Assigning to 548 (cl=GENERAL_REGS, orig=329, freq=132, tfirst=547, tfreq=264)...
	   Assign 0 to reload r548 (freq=132)
	Hard reg 0 is preferable by r749 with profit 132
	 Assigning to 749 (cl=GENERAL_REGS, orig=329, freq=198, tfirst=547, tfreq=264)...
	   Assign 0 to inheritance r749 (freq=198)
	 Assigning to 549 (cl=GENERAL_REGS, orig=333, freq=198, tfirst=549, tfreq=264)...
	   Assign 0 to reload r549 (freq=198)
	Hard reg 0 is preferable by r748 with profit 66
	Hard reg 0 is preferable by r550 with profit 33
	 Assigning to 550 (cl=GENERAL_REGS, orig=333, freq=132, tfirst=549, tfreq=264)...
	   Assign 0 to reload r550 (freq=132)
	Hard reg 0 is preferable by r748 with profit 132
	 Assigning to 748 (cl=GENERAL_REGS, orig=333, freq=198, tfirst=549, tfreq=264)...
	   Assign 0 to inheritance r748 (freq=198)
	 Assigning to 551 (cl=GENERAL_REGS, orig=337, freq=198, tfirst=551, tfreq=264)...
	   Assign 0 to reload r551 (freq=198)
	Hard reg 0 is preferable by r747 with profit 66
	Hard reg 0 is preferable by r552 with profit 33
	 Assigning to 552 (cl=GENERAL_REGS, orig=337, freq=132, tfirst=551, tfreq=264)...
	   Assign 0 to reload r552 (freq=132)
	Hard reg 0 is preferable by r747 with profit 132
	 Assigning to 747 (cl=GENERAL_REGS, orig=337, freq=198, tfirst=551, tfreq=264)...
	   Assign 0 to inheritance r747 (freq=198)
	 Assigning to 553 (cl=GENERAL_REGS, orig=341, freq=198, tfirst=553, tfreq=264)...
	   Assign 42 to reload r553 (freq=198)
	Hard reg 42 is preferable by r746 with profit 66
	Hard reg 42 is preferable by r554 with profit 33
	 Assigning to 554 (cl=GENERAL_REGS, orig=341, freq=132, tfirst=553, tfreq=264)...
	   Assign 42 to reload r554 (freq=132)
	Hard reg 42 is preferable by r746 with profit 132
	 Assigning to 746 (cl=GENERAL_REGS, orig=341, freq=198, tfirst=553, tfreq=264)...
	   Assign 42 to inheritance r746 (freq=198)
	 Assigning to 555 (cl=GENERAL_REGS, orig=345, freq=198, tfirst=555, tfreq=264)...
	   Assign 42 to reload r555 (freq=198)
	Hard reg 42 is preferable by r745 with profit 66
	Hard reg 42 is preferable by r556 with profit 33
	 Assigning to 556 (cl=GENERAL_REGS, orig=345, freq=132, tfirst=555, tfreq=264)...
	   Assign 42 to reload r556 (freq=132)
	Hard reg 42 is preferable by r745 with profit 132
	 Assigning to 745 (cl=GENERAL_REGS, orig=345, freq=198, tfirst=555, tfreq=264)...
	   Assign 42 to inheritance r745 (freq=198)
	 Assigning to 557 (cl=GENERAL_REGS, orig=349, freq=198, tfirst=557, tfreq=264)...
	   Assign 44 to reload r557 (freq=198)
	Hard reg 44 is preferable by r744 with profit 66
	Hard reg 44 is preferable by r558 with profit 33
	 Assigning to 558 (cl=GENERAL_REGS, orig=349, freq=132, tfirst=557, tfreq=264)...
	   Assign 44 to reload r558 (freq=132)
	Hard reg 44 is preferable by r744 with profit 132
	 Assigning to 744 (cl=GENERAL_REGS, orig=349, freq=198, tfirst=557, tfreq=264)...
	   Assign 44 to inheritance r744 (freq=198)
	 Assigning to 559 (cl=GENERAL_REGS, orig=353, freq=198, tfirst=559, tfreq=264)...
	   Assign 44 to reload r559 (freq=198)
	Hard reg 44 is preferable by r743 with profit 66
	Hard reg 44 is preferable by r560 with profit 33
	 Assigning to 560 (cl=GENERAL_REGS, orig=353, freq=132, tfirst=559, tfreq=264)...
	   Assign 44 to reload r560 (freq=132)
	Hard reg 44 is preferable by r743 with profit 132
	 Assigning to 743 (cl=GENERAL_REGS, orig=353, freq=198, tfirst=559, tfreq=264)...
	   Assign 44 to inheritance r743 (freq=198)
	 Assigning to 578 (cl=GENERAL_REGS, orig=136, freq=132, tfirst=578, tfreq=264)...
	   Assign 0 to reload r578 (freq=132)
	Hard reg 0 is preferable by r742 with profit 66
	Hard reg 38 is preferable by r579 with profit 66
	Hard reg 0 is preferable by r579 with profit 33
	 Assigning to 579 (cl=GENERAL_REGS, orig=254, freq=198, tfirst=578, tfreq=264)...
	   Assign 38 to reload r579 (freq=198)
	Hard reg 0 is preferable by r742 with profit 66
	Hard reg 38 is preferable by r742 with profit 66
	 Assigning to 742 (cl=GENERAL_REGS, orig=136, freq=198, tfirst=578, tfreq=264)...
	   Assign 0 to inheritance r742 (freq=198)
	 Assigning to 581 (cl=GENERAL_REGS, orig=137, freq=132, tfirst=581, tfreq=264)...
	   Assign 0 to reload r581 (freq=132)
	Hard reg 0 is preferable by r741 with profit 66
	Hard reg 0 is preferable by r582 with profit 33
	 Assigning to 582 (cl=GENERAL_REGS, orig=274, freq=198, tfirst=581, tfreq=264)...
	   Assign 0 to reload r582 (freq=198)
	Hard reg 0 is preferable by r741 with profit 132
	 Assigning to 741 (cl=GENERAL_REGS, orig=137, freq=198, tfirst=581, tfreq=264)...
	   Assign 0 to inheritance r741 (freq=198)
	 Assigning to 584 (cl=GENERAL_REGS, orig=138, freq=132, tfirst=584, tfreq=264)...
	   Assign 0 to reload r584 (freq=132)
	Hard reg 0 is preferable by r740 with profit 66
	Hard reg 0 is preferable by r585 with profit 33
	 Assigning to 585 (cl=GENERAL_REGS, orig=220, freq=198, tfirst=584, tfreq=264)...
	   Assign 0 to reload r585 (freq=198)
	Hard reg 0 is preferable by r740 with profit 132
	 Assigning to 740 (cl=GENERAL_REGS, orig=138, freq=198, tfirst=584, tfreq=264)...
	   Assign 0 to inheritance r740 (freq=198)
	 Assigning to 587 (cl=GENERAL_REGS, orig=139, freq=132, tfirst=587, tfreq=264)...
	   Assign 0 to reload r587 (freq=132)
	Hard reg 0 is preferable by r739 with profit 66
	Hard reg 0 is preferable by r588 with profit 33
	 Assigning to 588 (cl=GENERAL_REGS, orig=206, freq=198, tfirst=587, tfreq=264)...
	   Assign 0 to reload r588 (freq=198)
	Hard reg 0 is preferable by r739 with profit 132
	 Assigning to 739 (cl=GENERAL_REGS, orig=139, freq=198, tfirst=587, tfreq=264)...
	   Assign 0 to inheritance r739 (freq=198)
	 Assigning to 532 (cl=GENERAL_REGS, orig=297, freq=198, tfirst=532, tfreq=198)...
	   Assign 5 to reload r532 (freq=198)
	 Assigning to 596 (cl=GENERAL_REGS, orig=128, freq=134, tfirst=596, tfreq=134)...
	   Assign 0 to reload r596 (freq=134)
	 Assigning to 597 (cl=GENERAL_REGS, orig=129, freq=134, tfirst=597, tfreq=134)...
	   Assign 0 to reload r597 (freq=134)
	 Assigning to 598 (cl=GENERAL_REGS, orig=134, freq=134, tfirst=598, tfreq=134)...
	   Assign 0 to reload r598 (freq=134)
	 Assigning to 599 (cl=GENERAL_REGS, orig=135, freq=134, tfirst=599, tfreq=134)...
	   Assign 0 to reload r599 (freq=134)
	 Assigning to 757 (cl=GENERAL_REGS, orig=298, freq=134, tfirst=757, tfreq=134)...
	   Assign 41 to inheritance r757 (freq=134)
	 Assigning to 561 (cl=INDEX_REGS, orig=561, freq=132, tfirst=561, tfreq=132)...
	   Assign 0 to reload r561 (freq=132)
	 Assigning to 562 (cl=GENERAL_REGS, orig=128, freq=132, tfirst=562, tfreq=132)...
	   Assign 0 to reload r562 (freq=132)
	 Assigning to 563 (cl=INDEX_REGS, orig=563, freq=132, tfirst=563, tfreq=132)...
	   Assign 0 to reload r563 (freq=132)
	 Assigning to 564 (cl=GENERAL_REGS, orig=129, freq=132, tfirst=564, tfreq=132)...
	   Assign 0 to reload r564 (freq=132)
	 Assigning to 565 (cl=INDEX_REGS, orig=565, freq=132, tfirst=565, tfreq=132)...
	   Assign 0 to reload r565 (freq=132)
	 Assigning to 566 (cl=GENERAL_REGS, orig=130, freq=132, tfirst=566, tfreq=132)...
	   Assign 0 to reload r566 (freq=132)
	 Assigning to 567 (cl=INDEX_REGS, orig=567, freq=132, tfirst=567, tfreq=132)...
	   Assign 0 to reload r567 (freq=132)
	 Assigning to 568 (cl=GENERAL_REGS, orig=131, freq=132, tfirst=568, tfreq=132)...
	   Assign 0 to reload r568 (freq=132)
	 Assigning to 569 (cl=INDEX_REGS, orig=569, freq=132, tfirst=569, tfreq=132)...
	   Assign 0 to reload r569 (freq=132)
	 Assigning to 570 (cl=GENERAL_REGS, orig=132, freq=132, tfirst=570, tfreq=132)...
	   Assign 0 to reload r570 (freq=132)
	 Assigning to 571 (cl=INDEX_REGS, orig=571, freq=132, tfirst=571, tfreq=132)...
	   Assign 0 to reload r571 (freq=132)
	 Assigning to 572 (cl=GENERAL_REGS, orig=133, freq=132, tfirst=572, tfreq=132)...
	   Assign 0 to reload r572 (freq=132)
	 Assigning to 573 (cl=INDEX_REGS, orig=573, freq=132, tfirst=573, tfreq=132)...
	   Assign 0 to reload r573 (freq=132)
	 Assigning to 574 (cl=GENERAL_REGS, orig=134, freq=132, tfirst=574, tfreq=132)...
	   Assign 0 to reload r574 (freq=132)
	 Assigning to 575 (cl=INDEX_REGS, orig=575, freq=132, tfirst=575, tfreq=132)...
	   Assign 0 to reload r575 (freq=132)
	 Assigning to 576 (cl=GENERAL_REGS, orig=135, freq=132, tfirst=576, tfreq=132)...
	   Assign 0 to reload r576 (freq=132)
	 Assigning to 577 (cl=INDEX_REGS, orig=577, freq=132, tfirst=577, tfreq=132)...
	   Assign 0 to reload r577 (freq=132)
	 Assigning to 580 (cl=INDEX_REGS, orig=580, freq=132, tfirst=580, tfreq=132)...
	   Assign 0 to reload r580 (freq=132)
	 Assigning to 583 (cl=INDEX_REGS, orig=583, freq=132, tfirst=583, tfreq=132)...
	   Assign 0 to reload r583 (freq=132)
	 Assigning to 586 (cl=INDEX_REGS, orig=586, freq=132, tfirst=586, tfreq=132)...
	   Assign 0 to reload r586 (freq=132)
	 Assigning to 589 (cl=INDEX_REGS, orig=589, freq=132, tfirst=589, tfreq=132)...
	   Assign 0 to reload r589 (freq=132)
	 Assigning to 721 (cl=INDEX_REGS, orig=721, freq=132, tfirst=721, tfreq=132)...
	   Assign 0 to reload r721 (freq=132)
	 Assigning to 738 (cl=INDEX_REGS, orig=738, freq=132, tfirst=738, tfreq=132)...
	   Assign 0 to reload r738 (freq=132)
	 Assigning to 591 (cl=GENERAL_REGS, orig=235, freq=99, tfirst=591, tfreq=99)...
	   Assign 6 to reload r591 (freq=99)
	 Assigning to 592 (cl=GENERAL_REGS, orig=252, freq=99, tfirst=592, tfreq=99)...
	   Assign 37 to reload r592 (freq=99)
	 Assigning to 594 (cl=GENERAL_REGS, orig=273, freq=99, tfirst=594, tfreq=99)...
	   Assign 3 to reload r594 (freq=99)
	 Assigning to 595 (cl=GENERAL_REGS, orig=219, freq=99, tfirst=595, tfreq=99)...
	   Assign 44 to reload r595 (freq=99)
	 Assigning to 590 (cl=INDEX_REGS, orig=590, freq=66, tfirst=590, tfreq=66)...
	   Assign 0 to reload r590 (freq=66)
	 Assigning to 593 (cl=INDEX_REGS, orig=593, freq=66, tfirst=593, tfreq=66)...
	   Assign 0 to reload r593 (freq=66)
	 Assigning to 707 (cl=SSE_REGS, orig=486, freq=330, tfirst=707, tfreq=330)...
	   Assign 25 to reload r707 (freq=330)
	 Assigning to 701 (cl=SSE_REGS, orig=487, freq=264, tfirst=701, tfreq=264)...
	   Assign 22 to reload r701 (freq=264)
	 Assigning to 705 (cl=SSE_REGS, orig=488, freq=264, tfirst=705, tfreq=264)...
	   Assign 21 to reload r705 (freq=264)
	 Assigning to 708 (cl=SSE_REGS, orig=490, freq=264, tfirst=708, tfreq=264)...
	   Assign 23 to reload r708 (freq=264)
	 Assigning to 710 (cl=SSE_REGS, orig=491, freq=264, tfirst=710, tfreq=264)...
	   Assign 21 to reload r710 (freq=264)
	 Assigning to 713 (cl=SSE_REGS, orig=494, freq=264, tfirst=713, tfreq=264)...
	   Assign 22 to reload r713 (freq=264)
	 Assigning to 715 (cl=SSE_REGS, orig=495, freq=264, tfirst=715, tfreq=264)...
	   Assign 24 to reload r715 (freq=264)
	 Assigning to 717 (cl=SSE_REGS, orig=498, freq=264, tfirst=717, tfreq=264)...
	   Assign 23 to reload r717 (freq=264)
	 Assigning to 719 (cl=SSE_REGS, orig=499, freq=264, tfirst=719, tfreq=264)...
	   Assign 22 to reload r719 (freq=264)
	 Assigning to 722 (cl=SSE_REGS, orig=502, freq=264, tfirst=722, tfreq=264)...
	   Assign 22 to reload r722 (freq=264)
	 Assigning to 725 (cl=SSE_REGS, orig=503, freq=264, tfirst=725, tfreq=264)...
	   Assign 21 to reload r725 (freq=264)
	 Assigning to 728 (cl=SSE_REGS, orig=505, freq=264, tfirst=728, tfreq=264)...
	   Assign 23 to reload r728 (freq=264)
	 Assigning to 730 (cl=SSE_REGS, orig=506, freq=264, tfirst=730, tfreq=264)...
	   Assign 22 to reload r730 (freq=264)
	 Assigning to 734 (cl=SSE_REGS, orig=513, freq=264, tfirst=734, tfreq=264)...
	   Assign 22 to reload r734 (freq=264)
	 Assigning to 736 (cl=SSE_REGS, orig=514, freq=264, tfirst=736, tfreq=264)...
	   Assign 24 to reload r736 (freq=264)
	 Assigning to 702 (cl=SSE_REGS, orig=270, freq=132, tfirst=702, tfreq=132)...
	   Assign 26 to reload r702 (freq=132)
	Hard reg 44 is preferable by r704 with profit 66
	Hard reg 26 is preferable by r704 with profit 66
	 Assigning to 706 (cl=SSE_REGS, orig=233, freq=132, tfirst=706, tfreq=132)...
	   Assign 26 to reload r706 (freq=132)
	 Assigning to 709 (cl=SSE_REGS, orig=206, freq=132, tfirst=709, tfreq=132)...
	   Assign 26 to reload r709 (freq=132)
	 Assigning to 711 (cl=SSE_REGS, orig=274, freq=132, tfirst=711, tfreq=132)...
	   Assign 25 to reload r711 (freq=132)
	 Assigning to 714 (cl=SSE_REGS, orig=139, freq=132, tfirst=714, tfreq=132)...
	   Assign 26 to reload r714 (freq=132)
	 Assigning to 716 (cl=SSE_REGS, orig=137, freq=132, tfirst=716, tfreq=132)...
	   Assign 25 to reload r716 (freq=132)
	 Assigning to 718 (cl=SSE_REGS, orig=131, freq=132, tfirst=718, tfreq=132)...
	   Assign 26 to reload r718 (freq=132)
	 Assigning to 720 (cl=SSE_REGS, orig=129, freq=132, tfirst=720, tfreq=132)...
	   Assign 25 to reload r720 (freq=132)
	 Assigning to 723 (cl=SSE_REGS, orig=219, freq=132, tfirst=723, tfreq=132)...
	   Assign 26 to reload r723 (freq=132)
	 Assigning to 726 (cl=SSE_REGS, orig=252, freq=132, tfirst=726, tfreq=132)...
	   Assign 25 to reload r726 (freq=132)
	 Assigning to 729 (cl=SSE_REGS, orig=256, freq=132, tfirst=729, tfreq=132)...
	   Assign 26 to reload r729 (freq=132)
	 Assigning to 731 (cl=SSE_REGS, orig=222, freq=132, tfirst=731, tfreq=132)...
	   Assign 25 to reload r731 (freq=132)
	Hard reg 43 is preferable by r733 with profit 66
	Hard reg 25 is preferable by r733 with profit 66
	 Assigning to 735 (cl=SSE_REGS, orig=135, freq=132, tfirst=735, tfreq=132)...
	   Assign 26 to reload r735 (freq=132)
	 Assigning to 737 (cl=SSE_REGS, orig=133, freq=132, tfirst=737, tfreq=132)...
	   Assign 25 to reload r737 (freq=132)
  Reassigning non-reload pseudos
	   Assign 2 to r252 (freq=265)
	   Assign 39 to r301 (freq=133)

********** Undoing inheritance #1: **********

Inherit 32 out of 35 (91.43%)
   Insn after restoring regs:
  633: r665:SI=r171:SI
      REG_DEAD r171:SI
   Insn after restoring regs:
  761: r760:SI=r157:SI
      REG_DEAD r157:SI
   Insn after restoring regs:
  619: r655:SI=r155:SI
      REG_DEAD r155:SI
    Change reload insn:
  555: r612:SI=r770:SI
   Insn after restoring regs:
  770: r171:SI=r770:SI
      REG_DEAD r770:SI
   Insn after restoring regs:
  546: r157:SI=r605:SI
      REG_DEAD r605:SI
    Change reload insn:
  544: r604:SI=r773:SI
   Insn after restoring regs:
  773: r155:SI=r773:SI
      REG_DEAD r773:SI
Keep optional reload reg 604
Keep optional reload reg 612
Keep optional reload reg 615
Keep optional reload reg 625
Keep optional reload reg 637
Keep optional reload reg 640
Keep optional reload reg 641
Keep optional reload reg 648
Keep optional reload reg 651
Keep optional reload reg 659
Keep optional reload reg 663
Keep optional reload reg 670
Keep optional reload reg 672
Remove optional reload reg 600
  Restoring original insn:
  139: {r374:SI=r526:SI^r296:SI;clobber flags:CC;}
      REG_DEAD r296:SI
      REG_DEAD r526:SI
      REG_UNUSED flags:CC
  Deleting move 539
  539: r600:SI=r296:SI
      REG_DEAD r296:SI
deleting insn with uid = 539.
Remove optional reload reg 601
  Restoring original insn:
  141: {r144:SI=r375:SI+r217:SI;clobber flags:CC;}
      REG_DEAD r217:SI
      REG_DEAD r375:SI
      REG_UNUSED flags:CC
  Deleting move 540
  540: r601:SI=r217:SI
      REG_DEAD r217:SI
deleting insn with uid = 540.
Remove optional reload reg 606
  Restoring original insn:
  155: {r382:SI=r529:SI^r304:SI;clobber flags:CC;}
      REG_DEAD r304:SI
      REG_DEAD r529:SI
      REG_UNUSED flags:CC
  Deleting move 547
  547: r606:SI=r304:SI
      REG_DEAD r304:SI
deleting insn with uid = 547.
Remove optional reload reg 607
  Restoring original insn:
  157: {r160:SI=r383:SI+r233:SI;clobber flags:CC;}
      REG_DEAD r233:SI
      REG_DEAD r383:SI
      REG_UNUSED flags:CC
  Deleting move 548
  548: r607:SI=r233:SI
      REG_DEAD r233:SI
deleting insn with uid = 548.
Remove optional reload reg 610
  Restoring original insn:
  163: {r386:SI=r530:SI^r305:SI;clobber flags:CC;}
      REG_DEAD r305:SI
      REG_DEAD r530:SI
      REG_UNUSED flags:CC
  Deleting move 553
  553: r610:SI=r305:SI
      REG_DEAD r305:SI
deleting insn with uid = 553.
Remove optional reload reg 614
  Restoring original insn:
  171: {r613:SI=r613:SI^r312:SI;clobber flags:CC;}
      REG_DEAD r312:SI
      REG_UNUSED flags:CC
  Deleting move 558
  558: r614:SI=r312:SI
      REG_DEAD r312:SI
deleting insn with uid = 558.
Remove optional reload reg 616
  Restoring original insn:
  173: {r176:SI=r391:SI+r519:SI;clobber flags:CC;}
      REG_DEAD r519:SI
      REG_DEAD r391:SI
      REG_UNUSED flags:CC
  Deleting move 560
  560: r616:SI=r519:SI
      REG_DEAD r519:SI
deleting insn with uid = 560.
Remove optional reload reg 621
  Restoring original insn:
  179: {r620:SI=r620:SI^r531:SI;clobber flags:CC;}
      REG_DEAD r531:SI
      REG_UNUSED flags:CC
  Deleting move 569
  569: r621:SI=r531:SI
      REG_DEAD r531:SI
deleting insn with uid = 569.
Remove optional reload reg 624
  Restoring original insn:
  187: {r623:SI=r623:SI^r320:SI;clobber flags:CC;}
      REG_DEAD r320:SI
      REG_UNUSED flags:CC
  Deleting move 574
  574: r624:SI=r320:SI
      REG_DEAD r320:SI
deleting insn with uid = 574.
Remove optional reload reg 626
  Restoring original insn:
  189: {r192:SI=r399:SI+r522:SI;clobber flags:CC;}
      REG_DEAD r522:SI
      REG_DEAD r399:SI
      REG_UNUSED flags:CC
  Deleting move 576
  576: r626:SI=r522:SI
      REG_DEAD r522:SI
deleting insn with uid = 576.
Remove optional reload reg 631
  Restoring original insn:
  195: {r630:SI=r630:SI^r322:SI;clobber flags:CC;}
      REG_DEAD r322:SI
      REG_UNUSED flags:CC
  Deleting move 585
  585: r631:SI=r322:SI
      REG_DEAD r322:SI
deleting insn with uid = 585.
Remove optional reload reg 633
  Restoring original insn:
  203: {r632:SI=r632:SI^r328:SI;clobber flags:CC;}
      REG_DEAD r328:SI
      REG_UNUSED flags:CC
  Deleting move 588
  588: r633:SI=r328:SI
      REG_DEAD r328:SI
deleting insn with uid = 588.
Remove optional reload reg 635
  Restoring original insn:
  211: {r634:SI=r634:SI^r330:SI;clobber flags:CC;}
      REG_DEAD r330:SI
      REG_UNUSED flags:CC
  Deleting move 591
  591: r635:SI=r330:SI
      REG_DEAD r330:SI
deleting insn with uid = 591.
Remove optional reload reg 644
  Restoring original insn:
  219: {r643:SI=r643:SI^r336:SI;clobber flags:CC;}
      REG_DEAD r336:SI
      REG_UNUSED flags:CC
  Deleting move 604
  604: r644:SI=r336:SI
      REG_DEAD r336:SI
deleting insn with uid = 604.
Remove optional reload reg 646
  Restoring original insn:
  227: {r645:SI=r645:SI^r338:SI;clobber flags:CC;}
      REG_DEAD r338:SI
      REG_UNUSED flags:CC
  Deleting move 607
  607: r646:SI=r338:SI
      REG_DEAD r338:SI
deleting insn with uid = 607.
Remove optional reload reg 654
  Restoring original insn:
  235: {r653:SI=r653:SI^r344:SI;clobber flags:CC;}
      REG_DEAD r344:SI
      REG_UNUSED flags:CC
  Deleting move 618
  618: r654:SI=r344:SI
      REG_DEAD r344:SI
deleting insn with uid = 618.
Remove optional reload reg 657
  Restoring original insn:
  243: {r656:SI=r656:SI^r346:SI;clobber flags:CC;}
      REG_DEAD r346:SI
      REG_UNUSED flags:CC
  Deleting move 622
  622: r657:SI=r346:SI
      REG_DEAD r346:SI
deleting insn with uid = 622.
Remove optional reload reg 662
  Restoring original insn:
  251: {r661:SI=r661:SI^r352:SI;clobber flags:CC;}
      REG_DEAD r352:SI
      REG_UNUSED flags:CC
  Deleting move 629
  629: r662:SI=r352:SI
      REG_DEAD r352:SI
deleting insn with uid = 629.
Remove optional reload reg 668
  Restoring original insn:
  259: {r667:SI=r667:SI^r354:SI;clobber flags:CC;}
      REG_DEAD r354:SI
      REG_UNUSED flags:CC
  Deleting move 638
  638: r668:SI=r354:SI
      REG_DEAD r354:SI
deleting insn with uid = 638.
Remove optional reload reg 673
  Restoring original insn:
  269: {flags:CCZ=cmp(r113:SI-0x1,0);r113:SI=r113:SI-0x1;}
  Deleting move 643
  643: r673:SI=r113:SI
      REG_DEAD r113:SI
deleting insn with uid = 643.
  Deleting move 644
  644: r113:SI=r673:SI
      REG_DEAD r673:SI
deleting insn with uid = 644.

********** Pseudo live ranges #4: **********

  BB 8
   Insn 413: point = 0
   Insn 412: point = 0
   Insn 407: point = 0
   Insn 739: point = 1
   Insn 406: point = 2
   Insn 405: point = 4
   Insn 737: point = 6
	Hard reg 24 is preferable by r736 with profit 66
   Insn 404: point = 8
   Insn 738: point = 9
   Insn 736: point = 11
   Insn 735: point = 13
   Insn 733: point = 14
	Hard reg 22 is preferable by r734 with profit 66
   Insn 403: point = 16
   Insn 734: point = 17
   Insn 732: point = 19
   Insn 731: point = 21
   Insn 402: point = 22
   Insn 398: point = 24
   Insn 397: point = 26
   Insn 727: point = 28
	Hard reg 22 is preferable by r730 with profit 66
   Insn 396: point = 30
   Insn 730: point = 31
	   Creating copy r731<-r733@66
   Insn 728: point = 33
	Hard reg 43 is preferable by r733 with profit 66
   Insn 729: point = 35
   Insn 726: point = 37
	Hard reg 37 is preferable by r732 with profit 66
   Insn 725: point = 39
   Insn 723: point = 40
	Hard reg 23 is preferable by r728 with profit 66
   Insn 395: point = 42
   Insn 724: point = 43
   Insn 722: point = 45
   Insn 721: point = 47
   Insn 394: point = 48
   Insn 718: point = 50
	Hard reg 21 is preferable by r725 with profit 66
   Insn 393: point = 52
   Insn 719: point = 53
	Hard reg 2 is preferable by r726 with profit 66
   Insn 720: point = 55
   Insn 717: point = 57
	Hard reg 6 is preferable by r727 with profit 66
   Insn 716: point = 59
   Insn 713: point = 60
	Hard reg 22 is preferable by r722 with profit 66
   Insn 392: point = 62
   Insn 714: point = 63
   Insn 715: point = 65
   Insn 712: point = 67
	Hard reg 3 is preferable by r724 with profit 66
   Insn 711: point = 69
   Insn 390: point = 70
   Insn 710: point = 71
   Insn 389: point = 72
   Insn 388: point = 74
   Insn 708: point = 76
	Hard reg 22 is preferable by r719 with profit 66
   Insn 387: point = 78
   Insn 709: point = 79
   Insn 707: point = 81
   Insn 706: point = 83
   Insn 704: point = 84
	Hard reg 23 is preferable by r717 with profit 66
   Insn 386: point = 86
   Insn 705: point = 87
   Insn 703: point = 89
   Insn 702: point = 91
   Insn 385: point = 92
   Insn 384: point = 94
   Insn 700: point = 96
	Hard reg 24 is preferable by r715 with profit 66
   Insn 383: point = 98
   Insn 701: point = 99
   Insn 699: point = 101
   Insn 698: point = 103
   Insn 696: point = 104
	Hard reg 22 is preferable by r713 with profit 66
   Insn 382: point = 106
   Insn 697: point = 107
   Insn 695: point = 109
   Insn 694: point = 111
   Insn 381: point = 112
   Insn 380: point = 114
   Insn 691: point = 116
	Hard reg 21 is preferable by r710 with profit 66
   Insn 379: point = 118
   Insn 692: point = 119
   Insn 693: point = 121
   Insn 690: point = 123
	Hard reg 38 is preferable by r712 with profit 66
   Insn 689: point = 125
   Insn 687: point = 126
	Hard reg 23 is preferable by r708 with profit 66
   Insn 378: point = 128
   Insn 688: point = 129
   Insn 686: point = 131
   Insn 685: point = 133
   Insn 684: point = 134
	Hard reg 22 is preferable by r707 with profit 66
   Insn 377: point = 136
   Insn 683: point = 138
   Insn 682: point = 139
   Insn 680: point = 140
	Hard reg 21 is preferable by r705 with profit 66
   Insn 376: point = 142
   Insn 681: point = 143
   Insn 679: point = 145
   Insn 678: point = 147
   Insn 674: point = 148
	Hard reg 22 is preferable by r701 with profit 66
   Insn 375: point = 150
   Insn 677: point = 151
	   Creating copy r702<-r704@66
   Insn 675: point = 153
	Hard reg 44 is preferable by r704 with profit 66
   Insn 676: point = 155
   Insn 673: point = 157
	Hard reg 42 is preferable by r703 with profit 66
   Insn 672: point = 159
   Insn 446: point = 160
   Insn 445: point = 162
   Insn 444: point = 164
   Insn 443: point = 166
   Insn 442: point = 168
   Insn 441: point = 170
   Insn 440: point = 172
   Insn 439: point = 174
  BB 6
   Insn 270: point = 177
   Insn 269: point = 177
   Insn 268: point = 177
   Insn 266: point = 177
   Insn 265: point = 179
   Insn 642: point = 181
	   Creating copy r672<-r758@933
   Insn 759: point = 183
   Insn 641: point = 184
	   Creating copy r671->r758@933
   Insn 264: point = 186
   Insn 263: point = 188
   Insn 262: point = 190
   Insn 640: point = 192
	   Creating copy r670<-r759@933
   Insn 760: point = 194
   Insn 639: point = 195
	   Creating copy r669->r759@933
   Insn 261: point = 197
   Insn 260: point = 199
   Insn 637: point = 201
	Hard reg 1 is preferable by r667 with profit 933
   Insn 259: point = 203
   Insn 636: point = 204
   Insn 258: point = 206
   Insn 635: point = 208
	Hard reg 37 is preferable by r666 with profit 933
   Insn 257: point = 210
   Insn 634: point = 210
	   Creating copy r666<-r760@933
   Insn 256: point = 212
   Insn 633: point = 214
   Insn 255: point = 216
   Insn 632: point = 218
	Hard reg 3 is preferable by r664 with profit 933
   Insn 254: point = 220
   Insn 631: point = 220
	Hard reg 3 is preferable by r664 with profit 933
	Hard reg 37 is preferable by r664 with profit 933
   Insn 253: point = 222
   Insn 630: point = 224
	   Creating copy r663<-r760@933
   Insn 761: point = 225
   Insn 252: point = 227
   Insn 628: point = 229
	Hard reg 0 is preferable by r661 with profit 933
   Insn 251: point = 231
   Insn 627: point = 232
   Insn 626: point = 234
   Insn 250: point = 236
   Insn 625: point = 236
	Hard reg 40 is preferable by r660 with profit 933
   Insn 249: point = 238
   Insn 248: point = 240
   Insn 247: point = 242
   Insn 246: point = 244
   Insn 624: point = 246
	   Creating copy r659<-r761@933
   Insn 762: point = 248
   Insn 623: point = 249
	   Creating copy r658->r761@933
   Insn 245: point = 251
   Insn 244: point = 253
   Insn 621: point = 255
	Hard reg 1 is preferable by r656 with profit 933
   Insn 243: point = 257
   Insn 620: point = 258
   Insn 242: point = 260
   Insn 241: point = 262
   Insn 240: point = 264
   Insn 619: point = 266
   Insn 239: point = 268
   Insn 238: point = 270
   Insn 237: point = 272
   Insn 236: point = 274
   Insn 617: point = 276
	Hard reg 0 is preferable by r653 with profit 933
   Insn 235: point = 278
   Insn 616: point = 279
   Insn 615: point = 281
   Insn 234: point = 283
   Insn 614: point = 283
	Hard reg 3 is preferable by r652 with profit 933
   Insn 233: point = 285
   Insn 613: point = 287
	   Creating copy r651<-r762@933
   Insn 763: point = 289
   Insn 612: point = 290
	   Creating copy r650->r762@933
   Insn 232: point = 292
   Insn 611: point = 294
	Hard reg 6 is preferable by r649 with profit 933
   Insn 231: point = 296
   Insn 610: point = 296
	Hard reg 6 is preferable by r649 with profit 933
	Hard reg 2 is preferable by r649 with profit 933
   Insn 230: point = 298
   Insn 609: point = 300
	   Creating copy r648<-r763@933
   Insn 764: point = 302
   Insn 608: point = 303
	   Creating copy r647->r763@933
   Insn 229: point = 305
   Insn 228: point = 307
   Insn 606: point = 309
	Hard reg 1 is preferable by r645 with profit 933
   Insn 227: point = 311
   Insn 605: point = 312
   Insn 226: point = 314
   Insn 225: point = 316
   Insn 224: point = 318
   Insn 223: point = 320
   Insn 222: point = 322
   Insn 221: point = 324
   Insn 220: point = 326
   Insn 603: point = 328
	Hard reg 1 is preferable by r643 with profit 933
   Insn 219: point = 330
   Insn 602: point = 331
   Insn 601: point = 333
	Hard reg 43 is preferable by r642 with profit 933
   Insn 218: point = 335
   Insn 600: point = 335
	Hard reg 43 is preferable by r642 with profit 933
	Hard reg 6 is preferable by r642 with profit 933
   Insn 217: point = 337
   Insn 599: point = 339
	   Creating copy r641<-r764@933
   Insn 765: point = 341
   Insn 597: point = 342
	   Creating copy r639->r764@933
   Insn 216: point = 344
   Insn 598: point = 345
	   Creating copy r640<-r765@933
   Insn 596: point = 347
	Hard reg 43 is preferable by r639 with profit 933
   Insn 766: point = 349
   Insn 595: point = 350
	   Creating copy r638->r765@933
   Insn 215: point = 352
   Insn 594: point = 352
	Hard reg 41 is preferable by r638 with profit 933
   Insn 214: point = 354
   Insn 593: point = 356
	   Creating copy r637<-r766@933
   Insn 767: point = 358
   Insn 592: point = 359
	   Creating copy r636->r766@933
   Insn 213: point = 361
   Insn 212: point = 363
   Insn 590: point = 365
	Hard reg 44 is preferable by r634 with profit 933
   Insn 211: point = 367
   Insn 589: point = 368
   Insn 210: point = 370
   Insn 209: point = 372
   Insn 208: point = 374
   Insn 207: point = 376
   Insn 206: point = 378
   Insn 205: point = 380
   Insn 204: point = 382
   Insn 587: point = 384
	Hard reg 44 is preferable by r632 with profit 933
   Insn 203: point = 386
   Insn 586: point = 387
   Insn 202: point = 389
   Insn 201: point = 391
   Insn 200: point = 393
   Insn 199: point = 395
   Insn 198: point = 397
   Insn 197: point = 399
   Insn 196: point = 401
   Insn 584: point = 403
	Hard reg 44 is preferable by r630 with profit 933
   Insn 195: point = 405
   Insn 583: point = 406
   Insn 194: point = 408
   Insn 582: point = 410
	Hard reg 40 is preferable by r629 with profit 933
   Insn 193: point = 412
   Insn 581: point = 412
	   Creating copy r629<-r767@933
   Insn 580: point = 414
	Hard reg 42 is preferable by r628 with profit 933
   Insn 192: point = 416
   Insn 579: point = 416
   Insn 191: point = 418
   Insn 578: point = 420
	Hard reg 41 is preferable by r627 with profit 933
   Insn 190: point = 422
   Insn 577: point = 422
   Insn 189: point = 424
   Insn 188: point = 426
   Insn 575: point = 428
	   Creating copy r625<-r767@933
   Insn 768: point = 429
   Insn 573: point = 431
	Hard reg 39 is preferable by r623 with profit 933
   Insn 187: point = 433
   Insn 572: point = 434
   Insn 186: point = 436
   Insn 571: point = 438
	Hard reg 3 is preferable by r622 with profit 933
   Insn 185: point = 440
   Insn 570: point = 440
	Hard reg 3 is preferable by r622 with profit 933
	Hard reg 40 is preferable by r622 with profit 933
   Insn 184: point = 442
   Insn 183: point = 444
   Insn 182: point = 446
   Insn 181: point = 448
   Insn 180: point = 450
   Insn 568: point = 452
	Hard reg 38 is preferable by r620 with profit 933
   Insn 179: point = 454
   Insn 567: point = 455
   Insn 178: point = 457
   Insn 566: point = 459
	Hard reg 40 is preferable by r619 with profit 933
   Insn 177: point = 461
   Insn 565: point = 461
	   Creating copy r619<-r768@933
   Insn 564: point = 463
	Hard reg 43 is preferable by r618 with profit 933
   Insn 176: point = 465
   Insn 563: point = 465
   Insn 175: point = 467
   Insn 562: point = 469
	Hard reg 37 is preferable by r617 with profit 933
   Insn 174: point = 471
   Insn 561: point = 471
	Hard reg 37 is preferable by r617 with profit 933
	Hard reg 3 is preferable by r617 with profit 933
   Insn 173: point = 473
   Insn 172: point = 475
   Insn 559: point = 477
	   Creating copy r615<-r768@933
   Insn 769: point = 478
   Insn 557: point = 480
	Hard reg 39 is preferable by r613 with profit 933
   Insn 171: point = 482
   Insn 556: point = 483
   Insn 170: point = 485
   Insn 169: point = 487
   Insn 555: point = 489
	   Creating copy r612<-r770@933
   Insn 770: point = 491
   Insn 554: point = 492
	   Creating copy r611->r770@933
   Insn 168: point = 494
   Insn 167: point = 496
   Insn 166: point = 498
   Insn 165: point = 500
   Insn 164: point = 502
   Insn 163: point = 504
   Insn 162: point = 506
   Insn 552: point = 508
	Hard reg 6 is preferable by r609 with profit 933
   Insn 161: point = 510
   Insn 551: point = 510
	Hard reg 6 is preferable by r609 with profit 933
	Hard reg 43 is preferable by r609 with profit 933
   Insn 550: point = 512
	Hard reg 37 is preferable by r608 with profit 933
   Insn 160: point = 514
   Insn 549: point = 514
   Insn 159: point = 516
   Insn 158: point = 518
   Insn 157: point = 520
   Insn 156: point = 522
   Insn 155: point = 524
   Insn 546: point = 526
   Insn 154: point = 528
   Insn 545: point = 528
	Hard reg 37 is preferable by r605 with profit 933
   Insn 153: point = 530
   Insn 544: point = 532
	   Creating copy r604<-r773@933
   Insn 773: point = 534
   Insn 543: point = 535
	   Creating copy r603->r773@933
   Insn 152: point = 537
   Insn 151: point = 539
   Insn 150: point = 541
   Insn 149: point = 543
   Insn 148: point = 545
   Insn 147: point = 547
   Insn 146: point = 549
   Insn 145: point = 551
   Insn 144: point = 553
   Insn 143: point = 555
   Insn 542: point = 557
	Hard reg 2 is preferable by r602 with profit 933
   Insn 142: point = 559
   Insn 541: point = 559
	Hard reg 2 is preferable by r602 with profit 933
	Hard reg 6 is preferable by r602 with profit 933
   Insn 141: point = 561
   Insn 140: point = 563
   Insn 139: point = 565
  BB 7
   Insn 422: point = 568
   Insn 671: point = 568
   Insn 368: point = 570
   Insn 670: point = 572
   Insn 365: point = 574
   Insn 669: point = 576
   Insn 363: point = 578
   Insn 362: point = 579
   Insn 668: point = 580
   Insn 359: point = 582
   Insn 358: point = 583
   Insn 667: point = 584
   Insn 356: point = 586
   Insn 666: point = 588
   Insn 353: point = 590
   Insn 665: point = 592
   Insn 351: point = 594
   Insn 350: point = 595
   Insn 664: point = 596
   Insn 347: point = 598
   Insn 346: point = 599
   Insn 663: point = 600
   Insn 344: point = 602
   Insn 662: point = 604
   Insn 341: point = 606
   Insn 661: point = 608
   Insn 339: point = 610
   Insn 338: point = 611
   Insn 660: point = 612
   Insn 335: point = 614
   Insn 334: point = 615
   Insn 659: point = 616
   Insn 332: point = 618
   Insn 658: point = 620
   Insn 329: point = 622
   Insn 657: point = 624
   Insn 327: point = 626
   Insn 326: point = 627
   Insn 656: point = 628
   Insn 323: point = 630
   Insn 322: point = 631
   Insn 655: point = 632
   Insn 320: point = 634
   Insn 654: point = 636
   Insn 317: point = 638
   Insn 653: point = 640
   Insn 315: point = 642
   Insn 314: point = 643
   Insn 652: point = 644
   Insn 311: point = 646
   Insn 310: point = 647
   Insn 651: point = 648
   Insn 308: point = 650
   Insn 650: point = 652
   Insn 305: point = 654
   Insn 649: point = 656
   Insn 303: point = 658
   Insn 302: point = 659
   Insn 648: point = 660
   Insn 299: point = 662
   Insn 298: point = 663
   Insn 296: point = 664
   Insn 647: point = 666
   Insn 293: point = 668
   Insn 646: point = 670
   Insn 291: point = 672
   Insn 290: point = 673
   Insn 287: point = 674
   Insn 286: point = 675
   Insn 284: point = 676
   Insn 281: point = 678
   Insn 645: point = 680
   Insn 279: point = 682
   Insn 278: point = 683
   Insn 277: point = 684
   Insn 275: point = 685
   Insn 274: point = 686
  BB 5
   Insn 438: point = 688
   Insn 437: point = 690
   Insn 436: point = 692
   Insn 435: point = 694
   Insn 434: point = 696
   Insn 433: point = 698
	Hard reg 41 is preferable by r757 with profit 67
   Insn 432: point = 700
   Insn 431: point = 702
   Insn 430: point = 704
   Insn 429: point = 706
   Insn 428: point = 708
   Insn 427: point = 710
   Insn 426: point = 712
   Insn 425: point = 714
   Insn 424: point = 716
   Insn 59: point = 718
   Insn 58: point = 719
   Insn 57: point = 720
   Insn 56: point = 721
   Insn 55: point = 722
   Insn 54: point = 723
   Insn 53: point = 724
   Insn 52: point = 725
   Insn 51: point = 726
   Insn 50: point = 727
   Insn 49: point = 728
   Insn 48: point = 729
   Insn 47: point = 730
   Insn 46: point = 731
   Insn 45: point = 732
   Insn 44: point = 733
   Insn 43: point = 734
   Insn 42: point = 735
   Insn 538: point = 737
   Insn 41: point = 738
   Insn 537: point = 740
   Insn 40: point = 741
   Insn 39: point = 742
   Insn 38: point = 743
   Insn 37: point = 744
   Insn 36: point = 745
   Insn 536: point = 747
   Insn 35: point = 748
   Insn 535: point = 750
   Insn 137: point = 751
  BB 3
   Insn 420: point = 753
   Insn 534: point = 753
   Insn 134: point = 755
   Insn 533: point = 755
	Hard reg 44 is preferable by r595 with profit 33
   Insn 532: point = 757
	Hard reg 3 is preferable by r594 with profit 33
   Insn 133: point = 759
   Insn 531: point = 759
   Insn 132: point = 760
   Insn 530: point = 762
   Insn 529: point = 763
	Hard reg 2 is preferable by r592 with profit 33
   Insn 131: point = 765
   Insn 528: point = 765
	Hard reg 2 is preferable by r592 with profit 33
	Hard reg 37 is preferable by r592 with profit 33
   Insn 527: point = 767
	Hard reg 6 is preferable by r591 with profit 33
   Insn 130: point = 769
   Insn 526: point = 769
   Insn 129: point = 770
   Insn 525: point = 772
  BB 4
   Insn 34: point = 774
   Insn 33: point = 775
   Insn 32: point = 776
   Insn 31: point = 777
  BB 2
   Insn 127: point = 779
   Insn 126: point = 779
   Insn 524: point = 780
   Insn 523: point = 781
   Insn 125: point = 783
   Insn 522: point = 783
	   Creating copy r588<-r739@66
   Insn 740: point = 785
   Insn 521: point = 786
	   Creating copy r587->r739@66
   Insn 124: point = 788
   Insn 520: point = 790
   Insn 519: point = 791
   Insn 123: point = 793
   Insn 518: point = 793
	   Creating copy r585<-r740@66
   Insn 741: point = 795
   Insn 517: point = 796
	   Creating copy r584->r740@66
   Insn 122: point = 798
   Insn 516: point = 800
   Insn 515: point = 801
   Insn 121: point = 803
   Insn 514: point = 803
	   Creating copy r582<-r741@66
   Insn 742: point = 805
   Insn 513: point = 806
	   Creating copy r581->r741@66
   Insn 120: point = 808
   Insn 512: point = 810
   Insn 511: point = 811
	Hard reg 38 is preferable by r579 with profit 66
   Insn 119: point = 813
   Insn 510: point = 813
	   Creating copy r579<-r742@66
   Insn 743: point = 815
   Insn 509: point = 816
	   Creating copy r578->r742@66
   Insn 118: point = 818
   Insn 508: point = 820
   Insn 507: point = 821
   Insn 117: point = 823
   Insn 506: point = 825
   Insn 505: point = 826
   Insn 116: point = 828
   Insn 504: point = 830
   Insn 503: point = 831
   Insn 115: point = 833
   Insn 502: point = 835
   Insn 501: point = 836
   Insn 114: point = 838
   Insn 500: point = 840
   Insn 499: point = 841
   Insn 113: point = 843
   Insn 498: point = 845
   Insn 497: point = 846
   Insn 112: point = 848
   Insn 496: point = 850
   Insn 495: point = 851
   Insn 111: point = 853
   Insn 494: point = 855
   Insn 493: point = 856
   Insn 110: point = 858
   Insn 492: point = 860
   Insn 109: point = 861
   Insn 491: point = 862
	   Creating copy r560<-r743@66
   Insn 744: point = 864
   Insn 490: point = 865
	   Creating copy r559->r743@66
   Insn 108: point = 867
   Insn 489: point = 867
	Hard reg 44 is preferable by r559 with profit 66
   Insn 107: point = 869
   Insn 106: point = 871
   Insn 488: point = 872
	   Creating copy r558<-r744@66
   Insn 745: point = 874
   Insn 487: point = 875
	   Creating copy r557->r744@66
   Insn 105: point = 877
   Insn 486: point = 877
	Hard reg 44 is preferable by r557 with profit 66
   Insn 104: point = 879
   Insn 103: point = 880
   Insn 485: point = 881
	   Creating copy r556<-r745@66
   Insn 746: point = 883
   Insn 484: point = 884
	   Creating copy r555->r745@66
   Insn 102: point = 886
   Insn 483: point = 886
	Hard reg 42 is preferable by r555 with profit 66
   Insn 101: point = 888
   Insn 100: point = 889
   Insn 482: point = 890
	   Creating copy r554<-r746@66
   Insn 747: point = 892
   Insn 481: point = 893
	   Creating copy r553->r746@66
   Insn 99: point = 895
   Insn 480: point = 895
	Hard reg 42 is preferable by r553 with profit 66
   Insn 98: point = 897
   Insn 97: point = 898
   Insn 479: point = 899
	   Creating copy r552<-r747@66
   Insn 748: point = 901
   Insn 478: point = 902
	   Creating copy r551->r747@66
   Insn 96: point = 904
   Insn 477: point = 904
	Hard reg 0 is preferable by r551 with profit 66
   Insn 95: point = 906
   Insn 94: point = 907
   Insn 476: point = 908
	   Creating copy r550<-r748@66
   Insn 749: point = 910
   Insn 475: point = 911
	   Creating copy r549->r748@66
   Insn 93: point = 913
   Insn 474: point = 913
	Hard reg 0 is preferable by r549 with profit 66
   Insn 92: point = 915
   Insn 91: point = 916
   Insn 473: point = 917
	   Creating copy r548<-r749@66
   Insn 750: point = 919
   Insn 472: point = 920
	   Creating copy r547->r749@66
   Insn 90: point = 922
   Insn 471: point = 922
	Hard reg 0 is preferable by r547 with profit 66
   Insn 89: point = 924
   Insn 88: point = 925
   Insn 470: point = 926
	   Creating copy r546<-r750@66
   Insn 751: point = 928
   Insn 469: point = 929
	   Creating copy r545->r750@66
   Insn 87: point = 931
   Insn 468: point = 931
	Hard reg 0 is preferable by r545 with profit 66
   Insn 86: point = 933
   Insn 85: point = 934
   Insn 467: point = 935
	   Creating copy r544<-r751@66
   Insn 752: point = 937
   Insn 466: point = 938
	   Creating copy r543->r751@66
   Insn 84: point = 940
   Insn 465: point = 940
	Hard reg 3 is preferable by r543 with profit 66
   Insn 83: point = 942
   Insn 82: point = 943
   Insn 464: point = 944
	   Creating copy r542<-r752@66
   Insn 753: point = 946
   Insn 463: point = 947
	   Creating copy r541->r752@66
   Insn 81: point = 949
   Insn 462: point = 949
	Hard reg 3 is preferable by r541 with profit 66
   Insn 80: point = 951
   Insn 79: point = 952
   Insn 461: point = 953
	   Creating copy r540<-r753@66
   Insn 754: point = 955
   Insn 460: point = 956
	   Creating copy r539->r753@66
   Insn 78: point = 958
   Insn 459: point = 958
	Hard reg 0 is preferable by r539 with profit 66
   Insn 77: point = 960
   Insn 76: point = 961
   Insn 458: point = 962
	   Creating copy r538<-r754@66
   Insn 755: point = 964
   Insn 457: point = 965
	   Creating copy r537->r754@66
   Insn 75: point = 967
   Insn 456: point = 967
	Hard reg 0 is preferable by r537 with profit 66
   Insn 74: point = 969
   Insn 73: point = 970
   Insn 455: point = 971
	   Creating copy r536<-r755@66
   Insn 756: point = 973
   Insn 454: point = 974
	   Creating copy r535->r755@66
   Insn 72: point = 976
   Insn 453: point = 976
	Hard reg 0 is preferable by r535 with profit 66
   Insn 71: point = 978
   Insn 70: point = 979
   Insn 452: point = 980
	   Creating copy r534<-r756@66
   Insn 757: point = 982
   Insn 451: point = 983
	   Creating copy r533->r756@66
   Insn 69: point = 985
   Insn 450: point = 985
	Hard reg 38 is preferable by r533 with profit 66
   Insn 68: point = 987
   Insn 67: point = 988
   Insn 449: point = 988
	Hard reg 5 is preferable by r532 with profit 66
   Insn 66: point = 990
   Insn 448: point = 990
	Hard reg 5 is preferable by r532 with profit 66
	Hard reg 6 is preferable by r532 with profit 66
   Insn 65: point = 992
   Insn 64: point = 993
   Insn 63: point = 993
   Insn 62: point = 995
   Insn 29: point = 996
   Insn 28: point = 997
 r113: [177..734]
 r128: [82..856]
 r129: [80..851]
 r130: [90..846]
 r131: [88..841]
 r132: [12..836]
 r133: [10..831]
 r134: [20..826]
 r135: [18..821]
 r136: [102..815]
 r137: [100..805]
 r138: [110..795]
 r139: [108..785]
 r141: [766..770]
 r142: [756..760]
 r144: [546..561]
 r146: [542..555]
 r147: [538..553]
 r149: [531..549]
 r152: [383..543]
 r154: [323..539]
 r155: [267..534]
 r157: [226..526]
 r160: [503..520]
 r162: [499..516]
 r163: [495..512]
 r165: [488..506]
 r168: [327..500]
 r170: [271..496]
 r171: [215..491]
 r173: [373..485]
 r176: [451..473]
 r178: [447..467]
 r179: [443..463]
 r181: [441..457]
 r184: [275..448]
 r186: [221..444]
 r187: [375..442]
 r189: [317..436]
 r192: [402..424]
 r194: [398..418]
 r195: [394..414]
 r197: [392..408]
 r200: [228..399]
 r202: [379..395]
 r203: [319..393]
 r205: [263..389]
 r206: [417..781] [130..289]
 r209: [364..380]
 r211: [355..376]
 r212: [348..374]
 r214: [338..370]
 r217: [562..748] [146..358]
 r219: [774..777] [423..753] [64..349]
 r220: [466..791] [132..341]
 r222: [717..741] [34..174]
 r225: [308..324]
 r227: [299..320]
 r228: [293..318]
 r230: [286..314]
 r233: [521..745] [144..302]
 r235: [774..774] [715..767] [58..172]
 r238: [479..738] [46..281]
 r241: [254..272]
 r243: [245..268]
 r244: [241..264]
 r247: [239..260]
 r250: [713..744] [158..170]
 r252: [774..775] [689..763] [54..168]
 r254: [711..811] [124..166]
 r256: [430..735] [44..234]
 r260: [200..222]
 r262: [191..216]
 r264: [187..212]
 r266: [180..206]
 r270: [709..743] [154..164]
 r273: [774..776] [707..757] [68..162]
 r274: [515..801] [120..183]
 r276: [705..742] [38..160]
 r281: [703..751]
 r293: [701..993]
 r296: [688..718] [566..680]
 r297: [691..988]
 r301: [697..982]
 r304: [688..720] [525..670]
 r305: [688..973] [505..666]
 r306: [695..721]
 r309: [688..964] [484..660]
 r312: [688..722] [482..656]
 r313: [688..955] [456..652]
 r314: [693..723]
 r317: [688..946] [435..644]
 r320: [688..724] [433..640]
 r321: [688..937] [407..636]
 r322: [688..725] [405..632]
 r325: [688..928] [388..628]
 r328: [688..726] [386..624]
 r329: [688..919] [369..620]
 r330: [688..727] [367..616]
 r333: [688..910] [332..612]
 r336: [688..728] [330..608]
 r337: [688..901] [313..604]
 r338: [688..729] [311..600]
 r341: [688..892] [280..596]
 r344: [688..730] [278..592]
 r345: [688..883] [259..588]
 r346: [688..731] [257..584]
 r349: [688..874] [233..580]
 r352: [688..732] [231..576]
 r353: [688..864] [205..572]
 r354: [688..733] [203..568]
 r357: [870..996]
 r358: [994..995]
 r359: [991..992]
 r360: [986..987]
 r361: [977..978]
 r362: [968..969]
 r363: [959..960]
 r364: [950..951]
 r365: [941..942]
 r366: [932..933]
 r367: [923..924]
 r368: [914..915]
 r369: [905..906]
 r370: [896..897]
 r371: [887..888]
 r372: [878..879]
 r373: [868..869]
 r374: [564..565]
 r375: [562..563]
 r376: [556..557]
 r377: [550..551]
 r378: [546..547]
 r379: [544..545]
 r380: [540..541]
 r381: [529..530]
 r382: [523..524]
 r383: [521..522]
 r384: [517..518]
 r385: [507..508]
 r386: [503..504]
 r387: [501..502]
 r388: [497..498]
 r389: [486..487]
 r390: [476..480]
 r391: [474..475]
 r392: [468..469]
 r393: [458..459]
 r394: [451..452]
 r395: [449..450]
 r396: [445..446]
 r397: [437..438]
 r398: [427..431]
 r399: [425..426]
 r400: [419..420]
 r401: [409..410]
 r402: [402..403]
 r403: [400..401]
 r404: [396..397]
 r405: [390..391]
 r406: [383..384]
 r407: [381..382]
 r408: [377..378]
 r409: [371..372]
 r410: [364..365]
 r411: [362..363]
 r412: [353..354]
 r413: [336..337]
 r414: [327..328]
 r415: [325..326]
 r416: [321..322]
 r417: [315..316]
 r418: [308..309]
 r419: [306..307]
 r420: [297..298]
 r421: [284..285]
 r422: [275..276]
 r423: [273..274]
 r424: [269..270]
 r425: [261..262]
 r426: [254..255]
 r427: [252..253]
 r428: [243..244]
 r429: [237..238]
 r430: [228..229]
 r431: [223..227]
 r432: [217..218]
 r433: [207..208]
 r434: [200..201]
 r435: [198..199]
 r436: [189..190]
 r437: [178..179]
 r438: [677..686]
 r439: [571..684]
 r440: [679..683]
 r444: [665..675]
 r446: [669..673]
 r450: [651..663]
 r452: [655..659]
 r456: [635..647]
 r458: [639..643]
 r462: [619..631]
 r464: [623..627]
 r468: [603..615]
 r470: [607..611]
 r474: [587..599]
 r476: [591..595]
 r480: [571..583]
 r482: [575..579]
 r486: [113..134]
 r487: [137..148]
 r488: [138..140]
 r489: [113..114]
 r490: [115..126]
 r491: [115..116]
 r492: [93..112]
 r493: [23..94]
 r494: [95..104]
 r495: [95..96]
 r496: [73..92]
 r497: [73..74]
 r498: [75..84]
 r499: [75..76]
 r500: [70..72]
 r501: [25..48]
 r502: [49..60]
 r503: [49..50]
 r504: [25..26]
 r505: [27..40]
 r506: [27..28]
 r507: [23..24]
 r511: [3..22]
 r512: [3..4]
 r513: [5..14]
 r514: [5..6]
 r515: [0..2]
 r517: [511..716] [175..333]
 r518: [560..714] [173..294]
 r519: [474..712] [171..248]
 r520: [519..688] [169..242]
 r521: [554..710] [167..240]
 r522: [425..708] [165..194]
 r523: [472..706] [163..188]
 r524: [552..704] [161..177]
 r525: [177..702]
 r526: [688..700] [566..685]
 r527: [688..690] [548..678]
 r528: [688..698] [548..676]
 r529: [688..696] [525..674]
 r530: [688..694] [505..664]
 r531: [688..692] [454..648]
 r532: [989..990]
 r533: [984..985]
 r534: [979..980]
 r535: [975..976]
 r536: [970..971]
 r537: [966..967]
 r538: [961..962]
 r539: [957..958]
 r540: [952..953]
 r541: [948..949]
 r542: [943..944]
 r543: [939..940]
 r544: [934..935]
 r545: [930..931]
 r546: [925..926]
 r547: [921..922]
 r548: [916..917]
 r549: [912..913]
 r550: [907..908]
 r551: [903..904]
 r552: [898..899]
 r553: [894..895]
 r554: [889..890]
 r555: [885..886]
 r556: [880..881]
 r557: [876..877]
 r558: [871..872]
 r559: [866..867]
 r560: [861..862]
 r561: [859..860]
 r562: [857..858]
 r563: [854..855]
 r564: [852..853]
 r565: [849..850]
 r566: [847..848]
 r567: [844..845]
 r568: [842..843]
 r569: [839..840]
 r570: [837..838]
 r571: [834..835]
 r572: [832..833]
 r573: [829..830]
 r574: [827..828]
 r575: [824..825]
 r576: [822..823]
 r577: [819..820]
 r578: [817..818]
 r579: [812..813]
 r580: [809..810]
 r581: [807..808]
 r582: [802..803]
 r583: [799..800]
 r584: [797..798]
 r585: [792..793]
 r586: [789..790]
 r587: [787..788]
 r588: [782..783]
 r589: [779..780]
 r590: [771..772]
 r591: [768..769]
 r592: [764..765]
 r593: [761..762]
 r594: [758..759]
 r595: [754..755]
 r596: [749..750]
 r597: [746..747]
 r598: [739..740]
 r599: [736..737]
 r602: [558..559]
 r603: [536..537]
 r604: [531..532]
 r605: [527..528]
 r608: [513..514]
 r609: [509..510]
 r611: [493..494]
 r612: [488..489]
 r613: [481..483]
 r615: [476..477]
 r617: [470..471]
 r618: [464..465]
 r619: [460..461]
 r620: [453..455]
 r622: [439..440]
 r623: [432..434]
 r625: [427..428]
 r627: [421..422]
 r628: [415..416]
 r629: [411..412]
 r630: [404..406]
 r632: [385..387]
 r634: [366..368]
 r636: [360..361]
 r637: [355..356]
 r638: [351..352]
 r639: [343..347]
 r640: [344..345]
 r641: [338..339]
 r642: [334..335]
 r643: [329..331]
 r645: [310..312]
 r647: [304..305]
 r648: [299..300]
 r649: [295..296]
 r650: [291..292]
 r651: [286..287]
 r652: [282..283]
 r653: [277..279]
 r655: [265..266]
 r656: [256..258]
 r658: [250..251]
 r659: [245..246]
 r660: [235..236]
 r661: [230..232]
 r663: [223..224]
 r664: [219..220]
 r665: [213..214]
 r666: [209..210]
 r667: [202..204]
 r669: [196..197]
 r670: [191..192]
 r671: [185..186]
 r672: [180..181]
 r674: [681..682]
 r675: [671..672]
 r676: [667..668]
 r677: [661..662]
 r678: [657..658]
 r679: [653..654]
 r680: [649..650]
 r681: [645..646]
 r682: [641..642]
 r683: [637..638]
 r684: [633..634]
 r685: [629..630]
 r686: [625..626]
 r687: [621..622]
 r688: [617..618]
 r689: [613..614]
 r690: [609..610]
 r691: [605..606]
 r692: [601..602]
 r693: [597..598]
 r694: [593..594]
 r695: [589..590]
 r696: [585..586]
 r697: [581..582]
 r698: [577..578]
 r699: [573..574]
 r700: [569..570]
 r701: [159..159] [149..155]
 r702: [150..151]
 r703: [156..157]
 r704: [152..153]
 r705: [147..147] [141..145]
 r706: [142..143]
 r707: [135..139]
 r708: [133..133] [127..131]
 r709: [128..129]
 r710: [125..125] [117..121]
 r711: [118..119]
 r712: [122..123]
 r713: [111..111] [105..109]
 r714: [106..107]
 r715: [103..103] [97..101]
 r716: [98..99]
 r717: [91..91] [85..89]
 r718: [86..87]
 r719: [83..83] [77..81]
 r720: [78..79]
 r721: [70..71]
 r722: [69..69] [61..65]
 r723: [62..63]
 r724: [66..67]
 r725: [59..59] [51..55]
 r726: [52..53]
 r727: [56..57]
 r728: [47..47] [41..45]
 r729: [42..43]
 r730: [39..39] [29..35]
 r731: [30..31]
 r732: [36..37]
 r733: [32..33]
 r734: [21..21] [15..19]
 r735: [16..17]
 r736: [13..13] [7..11]
 r737: [8..9]
 r738: [0..1]
 r739: [784..786]
 r740: [794..796]
 r741: [804..806]
 r742: [814..816]
 r743: [863..865]
 r744: [873..875]
 r745: [882..884]
 r746: [891..893]
 r747: [900..902]
 r748: [909..911]
 r749: [918..920]
 r750: [927..929]
 r751: [936..938]
 r752: [945..947]
 r753: [954..956]
 r754: [963..965]
 r755: [972..974]
 r756: [981..983]
 r757: [699..719]
 r758: [182..184]
 r759: [193..195]
 r760: [211..225]
 r761: [247..249]
 r762: [288..290]
 r763: [301..303]
 r764: [340..342]
 r765: [346..350]
 r766: [357..359]
 r767: [413..429]
 r768: [462..478]
 r770: [490..492]
 r773: [533..535]
Compressing live ranges: from 997 to 848 - 85%
Ranges after the compression:
 r113: [156..637]
 r128: [73..725]
 r129: [71..721]
 r130: [80..717]
 r131: [78..713]
 r132: [10..709]
 r133: [8..705]
 r134: [17..701]
 r135: [15..697]
 r136: [91..693]
 r137: [89..685]
 r138: [98..677]
 r139: [96..669]
 r141: [656..659]
 r142: [648..651]
 r144: [499..514]
 r146: [495..508]
 r147: [491..506]
 r149: [485..502]
 r152: [345..496]
 r154: [291..492]
 r155: [239..488]
 r157: [201..480]
 r160: [457..474]
 r162: [453..470]
 r163: [449..466]
 r165: [443..460]
 r168: [295..454]
 r170: [243..450]
 r171: [191..446]
 r173: [335..440]
 r176: [409..430]
 r178: [405..424]
 r179: [401..420]
 r181: [399..414]
 r184: [247..406]
 r186: [197..402]
 r187: [337..400]
 r189: [285..394]
 r192: [363..384]
 r194: [359..378]
 r195: [355..374]
 r197: [353..368]
 r200: [203..360]
 r202: [341..356]
 r203: [287..354]
 r205: [235..350]
 r206: [377..665] [116..260]
 r209: [327..342]
 r211: [319..338]
 r212: [313..336]
 r214: [305..332]
 r217: [515..643] [127..322]
 r219: [662..663] [383..645] [57..314]
 r220: [423..673] [118..308]
 r222: [636..641] [30..154]
 r225: [277..292]
 r227: [269..288]
 r228: [263..286]
 r230: [257..282]
 r233: [475..641] [125..272]
 r235: [662..662] [634..657] [52..152]
 r238: [435..639] [41..252]
 r241: [227..244]
 r243: [219..240]
 r244: [215..236]
 r247: [213..232]
 r250: [632..641] [138..150]
 r252: [662..663] [608..653] [48..148]
 r254: [630..689] [111..146]
 r256: [389..637] [39..208]
 r260: [177..198]
 r262: [169..192]
 r264: [165..188]
 r266: [159..182]
 r270: [628..641] [134..144]
 r273: [662..663] [626..649] [61..142]
 r274: [469..681] [107..162]
 r276: [624..641] [34..140]
 r281: [622..645]
 r293: [620..845]
 r296: [607..637] [519..604]
 r297: [610..841]
 r301: [616..837]
 r304: [607..637] [479..598]
 r305: [607..829] [459..594]
 r306: [614..637]
 r309: [607..821] [439..590]
 r312: [607..637] [437..588]
 r313: [607..813] [413..584]
 r314: [612..637]
 r317: [607..805] [393..578]
 r320: [607..637] [391..576]
 r321: [607..797] [367..572]
 r322: [607..637] [365..568]
 r325: [607..789] [349..566]
 r328: [607..637] [347..564]
 r329: [607..781] [331..560]
 r330: [607..637] [329..556]
 r333: [607..773] [299..554]
 r336: [607..637] [297..552]
 r337: [607..765] [281..548]
 r338: [607..637] [279..544]
 r341: [607..757] [251..542]
 r344: [607..637] [249..540]
 r345: [607..749] [231..536]
 r346: [607..637] [229..532]
 r349: [607..741] [207..530]
 r352: [607..637] [205..528]
 r353: [607..733] [181..524]
 r354: [607..637] [179..520]
 r357: [738..847]
 r358: [846..847]
 r359: [844..845]
 r360: [840..841]
 r361: [832..833]
 r362: [824..825]
 r363: [816..817]
 r364: [808..809]
 r365: [800..801]
 r366: [792..793]
 r367: [784..785]
 r368: [776..777]
 r369: [768..769]
 r370: [760..761]
 r371: [752..753]
 r372: [744..745]
 r373: [736..737]
 r374: [517..518]
 r375: [515..516]
 r376: [509..510]
 r377: [503..504]
 r378: [499..500]
 r379: [497..498]
 r380: [493..494]
 r381: [483..484]
 r382: [477..478]
 r383: [475..476]
 r384: [471..472]
 r385: [461..462]
 r386: [457..458]
 r387: [455..456]
 r388: [451..452]
 r389: [441..442]
 r390: [433..436]
 r391: [431..432]
 r392: [425..426]
 r393: [415..416]
 r394: [409..410]
 r395: [407..408]
 r396: [403..404]
 r397: [395..396]
 r398: [387..390]
 r399: [385..386]
 r400: [379..380]
 r401: [369..370]
 r402: [363..364]
 r403: [361..362]
 r404: [357..358]
 r405: [351..352]
 r406: [345..346]
 r407: [343..344]
 r408: [339..340]
 r409: [333..334]
 r410: [327..328]
 r411: [325..326]
 r412: [317..318]
 r413: [303..304]
 r414: [295..296]
 r415: [293..294]
 r416: [289..290]
 r417: [283..284]
 r418: [277..278]
 r419: [275..276]
 r420: [267..268]
 r421: [255..256]
 r422: [247..248]
 r423: [245..246]
 r424: [241..242]
 r425: [233..234]
 r426: [227..228]
 r427: [225..226]
 r428: [217..218]
 r429: [211..212]
 r430: [203..204]
 r431: [199..202]
 r432: [193..194]
 r433: [183..184]
 r434: [177..178]
 r435: [175..176]
 r436: [167..168]
 r437: [157..158]
 r438: [601..606]
 r439: [523..606]
 r440: [603..606]
 r444: [593..600]
 r446: [597..600]
 r450: [583..592]
 r452: [587..590]
 r456: [571..580]
 r458: [575..578]
 r462: [559..568]
 r464: [563..566]
 r468: [547..556]
 r470: [551..554]
 r474: [535..544]
 r476: [539..542]
 r480: [523..532]
 r482: [527..530]
 r486: [101..120]
 r487: [121..129]
 r488: [121..122]
 r489: [101..102]
 r490: [103..113]
 r491: [103..104]
 r492: [83..100]
 r493: [20..84]
 r494: [85..93]
 r495: [85..86]
 r496: [65..82]
 r497: [65..66]
 r498: [67..75]
 r499: [67..68]
 r500: [63..64]
 r501: [22..43]
 r502: [44..54]
 r503: [44..45]
 r504: [22..23]
 r505: [24..36]
 r506: [24..25]
 r507: [20..21]
 r511: [2..19]
 r512: [2..3]
 r513: [4..12]
 r514: [4..5]
 r515: [0..1]
 r517: [465..635] [155..300]
 r518: [513..633] [153..264]
 r519: [431..631] [151..222]
 r520: [473..607] [149..216]
 r521: [507..629] [147..214]
 r522: [385..627] [145..172]
 r523: [429..625] [143..166]
 r524: [505..623] [141..156]
 r525: [156..621]
 r526: [519..619]
 r527: [607..609] [501..602]
 r528: [607..617] [501..600]
 r529: [607..615] [479..600]
 r530: [607..613] [459..592]
 r531: [607..611] [411..580]
 r532: [842..843]
 r533: [838..839]
 r534: [834..835]
 r535: [830..831]
 r536: [826..827]
 r537: [822..823]
 r538: [818..819]
 r539: [814..815]
 r540: [810..811]
 r541: [806..807]
 r542: [802..803]
 r543: [798..799]
 r544: [794..795]
 r545: [790..791]
 r546: [786..787]
 r547: [782..783]
 r548: [778..779]
 r549: [774..775]
 r550: [770..771]
 r551: [766..767]
 r552: [762..763]
 r553: [758..759]
 r554: [754..755]
 r555: [750..751]
 r556: [746..747]
 r557: [742..743]
 r558: [738..739]
 r559: [734..735]
 r560: [730..731]
 r561: [728..729]
 r562: [726..727]
 r563: [724..725]
 r564: [722..723]
 r565: [720..721]
 r566: [718..719]
 r567: [716..717]
 r568: [714..715]
 r569: [712..713]
 r570: [710..711]
 r571: [708..709]
 r572: [706..707]
 r573: [704..705]
 r574: [702..703]
 r575: [700..701]
 r576: [698..699]
 r577: [696..697]
 r578: [694..695]
 r579: [690..691]
 r580: [688..689]
 r581: [686..687]
 r582: [682..683]
 r583: [680..681]
 r584: [678..679]
 r585: [674..675]
 r586: [672..673]
 r587: [670..671]
 r588: [666..667]
 r589: [664..665]
 r590: [660..661]
 r591: [658..659]
 r592: [654..655]
 r593: [652..653]
 r594: [650..651]
 r595: [646..647]
 r596: [644..645]
 r597: [642..643]
 r598: [640..641]
 r599: [638..639]
 r602: [511..512]
 r603: [489..490]
 r604: [485..486]
 r605: [481..482]
 r608: [467..468]
 r609: [463..464]
 r611: [447..448]
 r612: [443..444]
 r613: [437..438]
 r615: [433..434]
 r617: [427..428]
 r618: [421..422]
 r619: [417..418]
 r620: [411..412]
 r622: [397..398]
 r623: [391..392]
 r625: [387..388]
 r627: [381..382]
 r628: [375..376]
 r629: [371..372]
 r630: [365..366]
 r632: [347..348]
 r634: [329..330]
 r636: [323..324]
 r637: [319..320]
 r638: [315..316]
 r639: [309..312]
 r640: [309..310]
 r641: [305..306]
 r642: [301..302]
 r643: [297..298]
 r645: [279..280]
 r647: [273..274]
 r648: [269..270]
 r649: [265..266]
 r650: [261..262]
 r651: [257..258]
 r652: [253..254]
 r653: [249..250]
 r655: [237..238]
 r656: [229..230]
 r658: [223..224]
 r659: [219..220]
 r660: [209..210]
 r661: [205..206]
 r663: [199..200]
 r664: [195..196]
 r665: [189..190]
 r666: [185..186]
 r667: [179..180]
 r669: [173..174]
 r670: [169..170]
 r671: [163..164]
 r672: [159..160]
 r674: [605..606]
 r675: [599..600]
 r676: [595..596]
 r677: [591..592]
 r678: [589..590]
 r679: [585..586]
 r680: [581..582]
 r681: [579..580]
 r682: [577..578]
 r683: [573..574]
 r684: [569..570]
 r685: [567..568]
 r686: [565..566]
 r687: [561..562]
 r688: [557..558]
 r689: [555..556]
 r690: [553..554]
 r691: [549..550]
 r692: [545..546]
 r693: [543..544]
 r694: [541..542]
 r695: [537..538]
 r696: [533..534]
 r697: [531..532]
 r698: [529..530]
 r699: [525..526]
 r700: [521..522]
 r701: [139..139] [130..135]
 r702: [130..131]
 r703: [136..137]
 r704: [132..133]
 r705: [128..128] [123..126]
 r706: [123..124]
 r707: [121..122]
 r708: [119..119] [114..117]
 r709: [114..115]
 r710: [112..112] [105..108]
 r711: [105..106]
 r712: [109..110]
 r713: [99..99] [94..97]
 r714: [94..95]
 r715: [92..92] [87..90]
 r716: [87..88]
 r717: [81..81] [76..79]
 r718: [76..77]
 r719: [74..74] [69..72]
 r720: [69..70]
 r721: [63..64]
 r722: [62..62] [55..58]
 r723: [55..56]
 r724: [59..60]
 r725: [53..53] [46..49]
 r726: [46..47]
 r727: [50..51]
 r728: [42..42] [37..40]
 r729: [37..38]
 r730: [35..35] [26..31]
 r731: [26..27]
 r732: [32..33]
 r733: [28..29]
 r734: [18..18] [13..16]
 r735: [13..14]
 r736: [11..11] [6..9]
 r737: [6..7]
 r738: [0..1]
 r739: [668..669]
 r740: [676..677]
 r741: [684..685]
 r742: [692..693]
 r743: [732..733]
 r744: [740..741]
 r745: [748..749]
 r746: [756..757]
 r747: [764..765]
 r748: [772..773]
 r749: [780..781]
 r750: [788..789]
 r751: [796..797]
 r752: [804..805]
 r753: [812..813]
 r754: [820..821]
 r755: [828..829]
 r756: [836..837]
 r757: [618..637]
 r758: [161..162]
 r759: [171..172]
 r760: [187..200]
 r761: [221..222]
 r762: [259..260]
 r763: [271..272]
 r764: [307..308]
 r765: [311..314]
 r766: [321..322]
 r767: [373..388]
 r768: [419..434]
 r770: [445..446]
 r773: [487..488]

********** Pseudos coalescing #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=774 from oldreg=322, assigning class GENERAL_REGS to r774
      Making reload reg 774 for reg 322 optional
  195: {r630:SI=r630:SI^r774:SI;clobber flags:CC;}
      REG_DEAD r322:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  775: r774:SI=r322:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 775:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=775 from oldreg=328, assigning class GENERAL_REGS to r775
      Making reload reg 775 for reg 328 optional
  203: {r632:SI=r632:SI^r775:SI;clobber flags:CC;}
      REG_DEAD r328:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  776: r775:SI=r328:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 776:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=776 from oldreg=330, assigning class GENERAL_REGS to r776
      Making reload reg 776 for reg 330 optional
  211: {r634:SI=r634:SI^r776:SI;clobber flags:CC;}
      REG_DEAD r330:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  777: r776:SI=r330:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 777:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=1,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=7,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
          alt=8,overall=10,losers=1,rld_nregs=0
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=23,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=14,losers=2 -- refuse
      Creating newreg=777, assigning class NO_REGS to secondary r777
  719: r777:SI=r252:SI
      REG_DEAD r252:SI
    Inserting the sec. move after:
  778: r726:SI=r777:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=14,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=16,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=3,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
          alt=7,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 778:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 435:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
            alt=13: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=14: Bad operand -- refuse
	 Choosing alt 0 in insn 296:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=778 from oldreg=530, assigning class GENERAL_REGS to r778
  296: r778:SI=[r444:DI*0x4+r439:DI]
      REG_DEAD r444:DI
      REG_EQUAL [r444:DI*0x4+`c32']
    Inserting insn reload after:
  779: r530:SI=r778:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 779:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 269:  (0) rm  (1) 0  (2) re {*addsi_2}
      Creating newreg=779 from oldreg=113, assigning class GENERAL_REGS to r779
      Making reload reg 779 for reg 113 optional
  269: {flags:CCZ=cmp(r779:SI-0x1,0);r779:SI=r779:SI-0x1;}
    Inserting insn reload before:
  780: r779:SI=r113:SI
    Inserting insn reload after:
  781: r113:SI=r779:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 781:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 780:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 265:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 262:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 259:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=780 from oldreg=354, assigning class GENERAL_REGS to r780
      Making reload reg 780 for reg 354 optional
  259: {r667:SI=r667:SI^r780:SI;clobber flags:CC;}
      REG_DEAD r354:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  782: r780:SI=r354:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 782:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =r  (1) %0  (2) rme {*addsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=781 from oldreg=352, assigning class GENERAL_REGS to r781
      Making reload reg 781 for reg 352 optional
  251: {r661:SI=r661:SI^r781:SI;clobber flags:CC;}
      REG_DEAD r352:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  783: r781:SI=r352:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 783:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=782 from oldreg=346, assigning class GENERAL_REGS to r782
      Making reload reg 782 for reg 346 optional
  243: {r656:SI=r656:SI^r782:SI;clobber flags:CC;}
      REG_DEAD r346:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  784: r782:SI=r346:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 784:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=783 from oldreg=344, assigning class GENERAL_REGS to r783
      Making reload reg 783 for reg 344 optional
  235: {r653:SI=r653:SI^r783:SI;clobber flags:CC;}
      REG_DEAD r344:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  785: r783:SI=r344:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 785:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 233:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 230:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=784 from oldreg=338, assigning class GENERAL_REGS to r784
      Making reload reg 784 for reg 338 optional
  227: {r645:SI=r645:SI^r784:SI;clobber flags:CC;}
      REG_DEAD r338:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  786: r784:SI=r338:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 786:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 219:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=785 from oldreg=336, assigning class GENERAL_REGS to r785
      Making reload reg 785 for reg 336 optional
  219: {r643:SI=r643:SI^r785:SI;clobber flags:CC;}
      REG_DEAD r336:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  787: r785:SI=r336:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 787:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 217:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=786 from oldreg=522, assigning class GENERAL_REGS to r786
      Making reload reg 786 for reg 522 optional
  189: {r192:SI=r399:SI+r786:SI;clobber flags:CC;}
      REG_DEAD r522:SI
      REG_DEAD r399:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  788: r786:SI=r522:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 788:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) %0  (2) rme {*addsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=787 from oldreg=320, assigning class GENERAL_REGS to r787
      Making reload reg 787 for reg 320 optional
  187: {r623:SI=r623:SI^r787:SI;clobber flags:CC;}
      REG_DEAD r320:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  789: r787:SI=r320:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 789:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=788 from oldreg=531, assigning class GENERAL_REGS to r788
      Making reload reg 788 for reg 531 optional
  179: {r620:SI=r620:SI^r788:SI;clobber flags:CC;}
      REG_DEAD r531:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  790: r788:SI=r531:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 790:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=789 from oldreg=519, assigning class GENERAL_REGS to r789
      Making reload reg 789 for reg 519 optional
  173: {r176:SI=r391:SI+r789:SI;clobber flags:CC;}
      REG_DEAD r519:SI
      REG_DEAD r391:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  791: r789:SI=r519:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 791:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) %0  (2) rme {*addsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 171:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=790 from oldreg=312, assigning class GENERAL_REGS to r790
      Making reload reg 790 for reg 312 optional
  171: {r613:SI=r613:SI^r790:SI;clobber flags:CC;}
      REG_DEAD r312:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  792: r790:SI=r312:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 792:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 163:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=791 from oldreg=386, assigning class GENERAL_REGS to r791
      Creating newreg=792 from oldreg=305, assigning class GENERAL_REGS to r792
      Making reload reg 792 for reg 305 optional
  163: {r791:SI=r791:SI^r792:SI;clobber flags:CC;}
      REG_DEAD r305:SI
      REG_DEAD r530:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  793: r791:SI=r530:SI
  795: r792:SI=r305:SI
    Inserting insn reload after:
  794: r386:SI=r791:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 793:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 795:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=793 from oldreg=233, assigning class GENERAL_REGS to r793
      Making reload reg 793 for reg 233 optional
  157: {r160:SI=r383:SI+r793:SI;clobber flags:CC;}
      REG_DEAD r233:SI
      REG_DEAD r383:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  796: r793:SI=r233:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 796:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=794 from oldreg=304, assigning class GENERAL_REGS to r794
      Making reload reg 794 for reg 304 optional
  155: {r382:SI=r529:SI^r794:SI;clobber flags:CC;}
      REG_DEAD r304:SI
      REG_DEAD r529:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  797: r794:SI=r304:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 797:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=795 from oldreg=217, assigning class GENERAL_REGS to r795
      Making reload reg 795 for reg 217 optional
  141: {r144:SI=r375:SI+r795:SI;clobber flags:CC;}
      REG_DEAD r217:SI
      REG_DEAD r375:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  798: r795:SI=r217:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 798:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=796 from oldreg=296, assigning class GENERAL_REGS to r796
      Making reload reg 796 for reg 296 optional
  139: {r374:SI=r526:SI^r796:SI;clobber flags:CC;}
      REG_DEAD r296:SI
      REG_DEAD r526:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  799: r796:SI=r296:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 799:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 773:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 770:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 769:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 768:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 767:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 766:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 765:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 764:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 763:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 762:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 761:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 760:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 759:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 756:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 755:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 754:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 753:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 752:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 751:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 750:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 749:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 748:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 747:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 746:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 745:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 744:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 743:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 742:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 741:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 740:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #5: **********

  BB 8
   Insn 413: point = 0
   Insn 412: point = 0
   Insn 407: point = 0
   Insn 739: point = 1
   Insn 406: point = 2
   Insn 405: point = 4
   Insn 737: point = 6
	Hard reg 24 is preferable by r736 with profit 66
   Insn 404: point = 8
   Insn 738: point = 9
   Insn 736: point = 11
   Insn 735: point = 13
   Insn 733: point = 14
	Hard reg 22 is preferable by r734 with profit 66
   Insn 403: point = 16
   Insn 734: point = 17
   Insn 732: point = 19
   Insn 731: point = 21
   Insn 402: point = 22
   Insn 398: point = 24
   Insn 397: point = 26
   Insn 727: point = 28
	Hard reg 22 is preferable by r730 with profit 66
   Insn 396: point = 30
   Insn 730: point = 31
	   Creating copy r731<-r733@66
   Insn 728: point = 33
	Hard reg 43 is preferable by r733 with profit 66
   Insn 729: point = 35
   Insn 726: point = 37
	Hard reg 37 is preferable by r732 with profit 66
   Insn 725: point = 39
   Insn 723: point = 40
	Hard reg 23 is preferable by r728 with profit 66
   Insn 395: point = 42
   Insn 724: point = 43
   Insn 722: point = 45
   Insn 721: point = 47
   Insn 394: point = 48
   Insn 718: point = 50
	Hard reg 21 is preferable by r725 with profit 66
   Insn 393: point = 52
   Insn 778: point = 53
	   Creating copy r726<-r777@66
   Insn 719: point = 55
	Hard reg 2 is preferable by r777 with profit 66
   Insn 720: point = 57
   Insn 717: point = 59
	Hard reg 6 is preferable by r727 with profit 66
   Insn 716: point = 61
   Insn 713: point = 62
	Hard reg 22 is preferable by r722 with profit 66
   Insn 392: point = 64
   Insn 714: point = 65
   Insn 715: point = 67
   Insn 712: point = 69
	Hard reg 3 is preferable by r724 with profit 66
   Insn 711: point = 71
   Insn 390: point = 72
   Insn 710: point = 73
   Insn 389: point = 74
   Insn 388: point = 76
   Insn 708: point = 78
	Hard reg 22 is preferable by r719 with profit 66
   Insn 387: point = 80
   Insn 709: point = 81
   Insn 707: point = 83
   Insn 706: point = 85
   Insn 704: point = 86
	Hard reg 23 is preferable by r717 with profit 66
   Insn 386: point = 88
   Insn 705: point = 89
   Insn 703: point = 91
   Insn 702: point = 93
   Insn 385: point = 94
   Insn 384: point = 96
   Insn 700: point = 98
	Hard reg 24 is preferable by r715 with profit 66
   Insn 383: point = 100
   Insn 701: point = 101
   Insn 699: point = 103
   Insn 698: point = 105
   Insn 696: point = 106
	Hard reg 22 is preferable by r713 with profit 66
   Insn 382: point = 108
   Insn 697: point = 109
   Insn 695: point = 111
   Insn 694: point = 113
   Insn 381: point = 114
   Insn 380: point = 116
   Insn 691: point = 118
	Hard reg 21 is preferable by r710 with profit 66
   Insn 379: point = 120
   Insn 692: point = 121
   Insn 693: point = 123
   Insn 690: point = 125
	Hard reg 38 is preferable by r712 with profit 66
   Insn 689: point = 127
   Insn 687: point = 128
	Hard reg 23 is preferable by r708 with profit 66
   Insn 378: point = 130
   Insn 688: point = 131
   Insn 686: point = 133
   Insn 685: point = 135
   Insn 684: point = 136
	Hard reg 22 is preferable by r707 with profit 66
   Insn 377: point = 138
   Insn 683: point = 140
   Insn 682: point = 141
   Insn 680: point = 142
	Hard reg 21 is preferable by r705 with profit 66
   Insn 376: point = 144
   Insn 681: point = 145
   Insn 679: point = 147
   Insn 678: point = 149
   Insn 674: point = 150
	Hard reg 22 is preferable by r701 with profit 66
   Insn 375: point = 152
   Insn 677: point = 153
	   Creating copy r702<-r704@66
   Insn 675: point = 155
	Hard reg 44 is preferable by r704 with profit 66
   Insn 676: point = 157
   Insn 673: point = 159
	Hard reg 42 is preferable by r703 with profit 66
   Insn 672: point = 161
   Insn 446: point = 162
   Insn 445: point = 164
   Insn 444: point = 166
   Insn 443: point = 168
   Insn 442: point = 170
   Insn 441: point = 172
   Insn 440: point = 174
   Insn 439: point = 176
  BB 6
   Insn 270: point = 179
   Insn 781: point = 179
   Insn 269: point = 181
   Insn 780: point = 181
   Insn 268: point = 183
   Insn 266: point = 183
   Insn 265: point = 185
   Insn 642: point = 187
	   Creating copy r672<-r758@933
   Insn 759: point = 189
   Insn 641: point = 190
	   Creating copy r671->r758@933
   Insn 264: point = 192
   Insn 263: point = 194
   Insn 262: point = 196
   Insn 640: point = 198
	   Creating copy r670<-r759@933
   Insn 760: point = 200
   Insn 639: point = 201
	   Creating copy r669->r759@933
   Insn 261: point = 203
   Insn 260: point = 205
   Insn 637: point = 207
	Hard reg 1 is preferable by r667 with profit 933
   Insn 259: point = 209
   Insn 782: point = 210
   Insn 636: point = 212
   Insn 258: point = 214
   Insn 635: point = 216
	Hard reg 37 is preferable by r666 with profit 933
   Insn 257: point = 218
   Insn 634: point = 218
	   Creating copy r666<-r760@933
   Insn 256: point = 220
   Insn 633: point = 222
   Insn 255: point = 224
   Insn 632: point = 226
	Hard reg 3 is preferable by r664 with profit 933
   Insn 254: point = 228
   Insn 631: point = 228
	Hard reg 3 is preferable by r664 with profit 933
	Hard reg 37 is preferable by r664 with profit 933
   Insn 253: point = 230
   Insn 630: point = 232
	   Creating copy r663<-r760@933
   Insn 761: point = 233
   Insn 252: point = 235
   Insn 628: point = 237
	Hard reg 0 is preferable by r661 with profit 933
   Insn 251: point = 239
   Insn 783: point = 240
   Insn 627: point = 242
   Insn 626: point = 244
   Insn 250: point = 246
   Insn 625: point = 246
	Hard reg 40 is preferable by r660 with profit 933
   Insn 249: point = 248
   Insn 248: point = 250
   Insn 247: point = 252
   Insn 246: point = 254
   Insn 624: point = 256
	   Creating copy r659<-r761@933
   Insn 762: point = 258
   Insn 623: point = 259
	   Creating copy r658->r761@933
   Insn 245: point = 261
   Insn 244: point = 263
   Insn 621: point = 265
	Hard reg 1 is preferable by r656 with profit 933
   Insn 243: point = 267
   Insn 784: point = 268
   Insn 620: point = 270
   Insn 242: point = 272
   Insn 241: point = 274
   Insn 240: point = 276
   Insn 619: point = 278
   Insn 239: point = 280
   Insn 238: point = 282
   Insn 237: point = 284
   Insn 236: point = 286
   Insn 617: point = 288
	Hard reg 0 is preferable by r653 with profit 933
   Insn 235: point = 290
   Insn 785: point = 291
   Insn 616: point = 293
   Insn 615: point = 295
   Insn 234: point = 297
   Insn 614: point = 297
	Hard reg 3 is preferable by r652 with profit 933
   Insn 233: point = 299
   Insn 613: point = 301
	   Creating copy r651<-r762@933
   Insn 763: point = 303
   Insn 612: point = 304
	   Creating copy r650->r762@933
   Insn 232: point = 306
   Insn 611: point = 308
	Hard reg 6 is preferable by r649 with profit 933
   Insn 231: point = 310
   Insn 610: point = 310
	Hard reg 6 is preferable by r649 with profit 933
	Hard reg 2 is preferable by r649 with profit 933
   Insn 230: point = 312
   Insn 609: point = 314
	   Creating copy r648<-r763@933
   Insn 764: point = 316
   Insn 608: point = 317
	   Creating copy r647->r763@933
   Insn 229: point = 319
   Insn 228: point = 321
   Insn 606: point = 323
	Hard reg 1 is preferable by r645 with profit 933
   Insn 227: point = 325
   Insn 786: point = 326
   Insn 605: point = 328
   Insn 226: point = 330
   Insn 225: point = 332
   Insn 224: point = 334
   Insn 223: point = 336
   Insn 222: point = 338
   Insn 221: point = 340
   Insn 220: point = 342
   Insn 603: point = 344
	Hard reg 1 is preferable by r643 with profit 933
   Insn 219: point = 346
   Insn 787: point = 347
   Insn 602: point = 349
   Insn 601: point = 351
	Hard reg 43 is preferable by r642 with profit 933
   Insn 218: point = 353
   Insn 600: point = 353
	Hard reg 43 is preferable by r642 with profit 933
	Hard reg 6 is preferable by r642 with profit 933
   Insn 217: point = 355
   Insn 599: point = 357
	   Creating copy r641<-r764@933
   Insn 765: point = 359
   Insn 597: point = 360
	   Creating copy r639->r764@933
   Insn 216: point = 362
   Insn 598: point = 363
	   Creating copy r640<-r765@933
   Insn 596: point = 365
	Hard reg 43 is preferable by r639 with profit 933
   Insn 766: point = 367
   Insn 595: point = 368
	   Creating copy r638->r765@933
   Insn 215: point = 370
   Insn 594: point = 370
	Hard reg 41 is preferable by r638 with profit 933
   Insn 214: point = 372
   Insn 593: point = 374
	   Creating copy r637<-r766@933
   Insn 767: point = 376
   Insn 592: point = 377
	   Creating copy r636->r766@933
   Insn 213: point = 379
   Insn 212: point = 381
   Insn 590: point = 383
	Hard reg 44 is preferable by r634 with profit 933
   Insn 211: point = 385
   Insn 777: point = 386
   Insn 589: point = 388
   Insn 210: point = 390
   Insn 209: point = 392
   Insn 208: point = 394
   Insn 207: point = 396
   Insn 206: point = 398
   Insn 205: point = 400
   Insn 204: point = 402
   Insn 587: point = 404
	Hard reg 44 is preferable by r632 with profit 933
   Insn 203: point = 406
   Insn 776: point = 407
   Insn 586: point = 409
   Insn 202: point = 411
   Insn 201: point = 413
   Insn 200: point = 415
   Insn 199: point = 417
   Insn 198: point = 419
   Insn 197: point = 421
   Insn 196: point = 423
   Insn 584: point = 425
	Hard reg 44 is preferable by r630 with profit 933
   Insn 195: point = 427
   Insn 775: point = 428
   Insn 583: point = 430
   Insn 194: point = 432
   Insn 582: point = 434
	Hard reg 40 is preferable by r629 with profit 933
   Insn 193: point = 436
   Insn 581: point = 436
	   Creating copy r629<-r767@933
   Insn 580: point = 438
	Hard reg 42 is preferable by r628 with profit 933
   Insn 192: point = 440
   Insn 579: point = 440
   Insn 191: point = 442
   Insn 578: point = 444
	Hard reg 41 is preferable by r627 with profit 933
   Insn 190: point = 446
   Insn 577: point = 446
   Insn 189: point = 448
   Insn 788: point = 450
   Insn 188: point = 452
   Insn 575: point = 454
	   Creating copy r625<-r767@933
   Insn 768: point = 455
   Insn 573: point = 457
	Hard reg 39 is preferable by r623 with profit 933
   Insn 187: point = 459
   Insn 789: point = 460
   Insn 572: point = 462
   Insn 186: point = 464
   Insn 571: point = 466
	Hard reg 3 is preferable by r622 with profit 933
   Insn 185: point = 468
   Insn 570: point = 468
	Hard reg 3 is preferable by r622 with profit 933
	Hard reg 40 is preferable by r622 with profit 933
   Insn 184: point = 470
   Insn 183: point = 472
   Insn 182: point = 474
   Insn 181: point = 476
   Insn 180: point = 478
   Insn 568: point = 480
	Hard reg 38 is preferable by r620 with profit 933
   Insn 179: point = 482
   Insn 790: point = 483
   Insn 567: point = 485
   Insn 178: point = 487
   Insn 566: point = 489
	Hard reg 40 is preferable by r619 with profit 933
   Insn 177: point = 491
   Insn 565: point = 491
	   Creating copy r619<-r768@933
   Insn 564: point = 493
	Hard reg 43 is preferable by r618 with profit 933
   Insn 176: point = 495
   Insn 563: point = 495
   Insn 175: point = 497
   Insn 562: point = 499
	Hard reg 37 is preferable by r617 with profit 933
   Insn 174: point = 501
   Insn 561: point = 501
	Hard reg 37 is preferable by r617 with profit 933
	Hard reg 3 is preferable by r617 with profit 933
   Insn 173: point = 503
   Insn 791: point = 505
   Insn 172: point = 507
   Insn 559: point = 509
	   Creating copy r615<-r768@933
   Insn 769: point = 510
   Insn 557: point = 512
	Hard reg 39 is preferable by r613 with profit 933
   Insn 171: point = 514
   Insn 792: point = 515
   Insn 556: point = 517
   Insn 170: point = 519
   Insn 169: point = 521
   Insn 555: point = 523
	   Creating copy r612<-r770@933
   Insn 770: point = 525
   Insn 554: point = 526
	   Creating copy r611->r770@933
   Insn 168: point = 528
   Insn 167: point = 530
   Insn 166: point = 532
   Insn 165: point = 534
   Insn 164: point = 536
   Insn 794: point = 538
	Hard reg 0 is preferable by r791 with profit 933
   Insn 163: point = 540
   Insn 795: point = 541
   Insn 793: point = 543
   Insn 162: point = 545
   Insn 552: point = 547
	Hard reg 6 is preferable by r609 with profit 933
   Insn 161: point = 549
   Insn 551: point = 549
	Hard reg 6 is preferable by r609 with profit 933
	Hard reg 43 is preferable by r609 with profit 933
   Insn 550: point = 551
	Hard reg 37 is preferable by r608 with profit 933
   Insn 160: point = 553
   Insn 549: point = 553
   Insn 159: point = 555
   Insn 158: point = 557
   Insn 157: point = 559
   Insn 796: point = 561
   Insn 156: point = 563
   Insn 155: point = 565
   Insn 797: point = 567
   Insn 546: point = 569
   Insn 154: point = 571
   Insn 545: point = 571
	Hard reg 37 is preferable by r605 with profit 933
   Insn 153: point = 573
   Insn 544: point = 575
	   Creating copy r604<-r773@933
   Insn 773: point = 577
   Insn 543: point = 578
	   Creating copy r603->r773@933
   Insn 152: point = 580
   Insn 151: point = 582
   Insn 150: point = 584
   Insn 149: point = 586
   Insn 148: point = 588
   Insn 147: point = 590
   Insn 146: point = 592
   Insn 145: point = 594
   Insn 144: point = 596
   Insn 143: point = 598
   Insn 542: point = 600
	Hard reg 2 is preferable by r602 with profit 933
   Insn 142: point = 602
   Insn 541: point = 602
	Hard reg 2 is preferable by r602 with profit 933
	Hard reg 6 is preferable by r602 with profit 933
   Insn 141: point = 604
   Insn 798: point = 606
   Insn 140: point = 608
   Insn 139: point = 610
   Insn 799: point = 612
  BB 7
   Insn 422: point = 615
   Insn 671: point = 615
   Insn 368: point = 617
   Insn 670: point = 619
   Insn 365: point = 621
   Insn 669: point = 623
   Insn 363: point = 625
   Insn 362: point = 626
   Insn 668: point = 627
   Insn 359: point = 629
   Insn 358: point = 630
   Insn 667: point = 631
   Insn 356: point = 633
   Insn 666: point = 635
   Insn 353: point = 637
   Insn 665: point = 639
   Insn 351: point = 641
   Insn 350: point = 642
   Insn 664: point = 643
   Insn 347: point = 645
   Insn 346: point = 646
   Insn 663: point = 647
   Insn 344: point = 649
   Insn 662: point = 651
   Insn 341: point = 653
   Insn 661: point = 655
   Insn 339: point = 657
   Insn 338: point = 658
   Insn 660: point = 659
   Insn 335: point = 661
   Insn 334: point = 662
   Insn 659: point = 663
   Insn 332: point = 665
   Insn 658: point = 667
   Insn 329: point = 669
   Insn 657: point = 671
   Insn 327: point = 673
   Insn 326: point = 674
   Insn 656: point = 675
   Insn 323: point = 677
   Insn 322: point = 678
   Insn 655: point = 679
   Insn 320: point = 681
   Insn 654: point = 683
   Insn 317: point = 685
   Insn 653: point = 687
   Insn 315: point = 689
   Insn 314: point = 690
   Insn 652: point = 691
   Insn 311: point = 693
   Insn 310: point = 694
   Insn 651: point = 695
   Insn 308: point = 697
   Insn 650: point = 699
   Insn 305: point = 701
   Insn 649: point = 703
   Insn 303: point = 705
   Insn 302: point = 706
   Insn 648: point = 707
   Insn 299: point = 709
   Insn 298: point = 710
   Insn 779: point = 711
   Insn 296: point = 713
   Insn 647: point = 715
   Insn 293: point = 717
   Insn 646: point = 719
   Insn 291: point = 721
   Insn 290: point = 722
   Insn 287: point = 723
   Insn 286: point = 724
   Insn 284: point = 725
   Insn 281: point = 727
   Insn 645: point = 729
   Insn 279: point = 731
   Insn 278: point = 732
   Insn 277: point = 733
   Insn 275: point = 734
   Insn 274: point = 735
  BB 5
   Insn 438: point = 737
   Insn 437: point = 739
   Insn 436: point = 741
   Insn 435: point = 743
   Insn 434: point = 745
   Insn 433: point = 747
	Hard reg 41 is preferable by r757 with profit 67
   Insn 432: point = 749
   Insn 431: point = 751
   Insn 430: point = 753
   Insn 429: point = 755
   Insn 428: point = 757
   Insn 427: point = 759
   Insn 426: point = 761
   Insn 425: point = 763
   Insn 424: point = 765
   Insn 59: point = 767
   Insn 58: point = 768
   Insn 57: point = 769
   Insn 56: point = 770
   Insn 55: point = 771
   Insn 54: point = 772
   Insn 53: point = 773
   Insn 52: point = 774
   Insn 51: point = 775
   Insn 50: point = 776
   Insn 49: point = 777
   Insn 48: point = 778
   Insn 47: point = 779
   Insn 46: point = 780
   Insn 45: point = 781
   Insn 44: point = 782
   Insn 43: point = 783
   Insn 42: point = 784
   Insn 538: point = 786
   Insn 41: point = 787
   Insn 537: point = 789
   Insn 40: point = 790
   Insn 39: point = 791
   Insn 38: point = 792
   Insn 37: point = 793
   Insn 36: point = 794
   Insn 536: point = 796
   Insn 35: point = 797
   Insn 535: point = 799
   Insn 137: point = 800
  BB 3
   Insn 420: point = 802
   Insn 534: point = 802
   Insn 134: point = 804
   Insn 533: point = 804
	Hard reg 44 is preferable by r595 with profit 33
   Insn 532: point = 806
	Hard reg 3 is preferable by r594 with profit 33
   Insn 133: point = 808
   Insn 531: point = 808
   Insn 132: point = 809
   Insn 530: point = 811
   Insn 529: point = 812
	Hard reg 2 is preferable by r592 with profit 33
   Insn 131: point = 814
   Insn 528: point = 814
	Hard reg 2 is preferable by r592 with profit 33
	Hard reg 37 is preferable by r592 with profit 33
   Insn 527: point = 816
	Hard reg 6 is preferable by r591 with profit 33
   Insn 130: point = 818
   Insn 526: point = 818
   Insn 129: point = 819
   Insn 525: point = 821
  BB 4
   Insn 34: point = 823
   Insn 33: point = 824
   Insn 32: point = 825
   Insn 31: point = 826
  BB 2
   Insn 127: point = 828
   Insn 126: point = 828
   Insn 524: point = 829
   Insn 523: point = 830
   Insn 125: point = 832
   Insn 522: point = 832
	   Creating copy r588<-r739@66
   Insn 740: point = 834
   Insn 521: point = 835
	   Creating copy r587->r739@66
   Insn 124: point = 837
   Insn 520: point = 839
   Insn 519: point = 840
   Insn 123: point = 842
   Insn 518: point = 842
	   Creating copy r585<-r740@66
   Insn 741: point = 844
   Insn 517: point = 845
	   Creating copy r584->r740@66
   Insn 122: point = 847
   Insn 516: point = 849
   Insn 515: point = 850
   Insn 121: point = 852
   Insn 514: point = 852
	   Creating copy r582<-r741@66
   Insn 742: point = 854
   Insn 513: point = 855
	   Creating copy r581->r741@66
   Insn 120: point = 857
   Insn 512: point = 859
   Insn 511: point = 860
	Hard reg 38 is preferable by r579 with profit 66
   Insn 119: point = 862
   Insn 510: point = 862
	   Creating copy r579<-r742@66
   Insn 743: point = 864
   Insn 509: point = 865
	   Creating copy r578->r742@66
   Insn 118: point = 867
   Insn 508: point = 869
   Insn 507: point = 870
   Insn 117: point = 872
   Insn 506: point = 874
   Insn 505: point = 875
   Insn 116: point = 877
   Insn 504: point = 879
   Insn 503: point = 880
   Insn 115: point = 882
   Insn 502: point = 884
   Insn 501: point = 885
   Insn 114: point = 887
   Insn 500: point = 889
   Insn 499: point = 890
   Insn 113: point = 892
   Insn 498: point = 894
   Insn 497: point = 895
   Insn 112: point = 897
   Insn 496: point = 899
   Insn 495: point = 900
   Insn 111: point = 902
   Insn 494: point = 904
   Insn 493: point = 905
   Insn 110: point = 907
   Insn 492: point = 909
   Insn 109: point = 910
   Insn 491: point = 911
	   Creating copy r560<-r743@66
   Insn 744: point = 913
   Insn 490: point = 914
	   Creating copy r559->r743@66
   Insn 108: point = 916
   Insn 489: point = 916
	Hard reg 44 is preferable by r559 with profit 66
   Insn 107: point = 918
   Insn 106: point = 920
   Insn 488: point = 921
	   Creating copy r558<-r744@66
   Insn 745: point = 923
   Insn 487: point = 924
	   Creating copy r557->r744@66
   Insn 105: point = 926
   Insn 486: point = 926
	Hard reg 44 is preferable by r557 with profit 66
   Insn 104: point = 928
   Insn 103: point = 929
   Insn 485: point = 930
	   Creating copy r556<-r745@66
   Insn 746: point = 932
   Insn 484: point = 933
	   Creating copy r555->r745@66
   Insn 102: point = 935
   Insn 483: point = 935
	Hard reg 42 is preferable by r555 with profit 66
   Insn 101: point = 937
   Insn 100: point = 938
   Insn 482: point = 939
	   Creating copy r554<-r746@66
   Insn 747: point = 941
   Insn 481: point = 942
	   Creating copy r553->r746@66
   Insn 99: point = 944
   Insn 480: point = 944
	Hard reg 42 is preferable by r553 with profit 66
   Insn 98: point = 946
   Insn 97: point = 947
   Insn 479: point = 948
	   Creating copy r552<-r747@66
   Insn 748: point = 950
   Insn 478: point = 951
	   Creating copy r551->r747@66
   Insn 96: point = 953
   Insn 477: point = 953
	Hard reg 0 is preferable by r551 with profit 66
   Insn 95: point = 955
   Insn 94: point = 956
   Insn 476: point = 957
	   Creating copy r550<-r748@66
   Insn 749: point = 959
   Insn 475: point = 960
	   Creating copy r549->r748@66
   Insn 93: point = 962
   Insn 474: point = 962
	Hard reg 0 is preferable by r549 with profit 66
   Insn 92: point = 964
   Insn 91: point = 965
   Insn 473: point = 966
	   Creating copy r548<-r749@66
   Insn 750: point = 968
   Insn 472: point = 969
	   Creating copy r547->r749@66
   Insn 90: point = 971
   Insn 471: point = 971
	Hard reg 0 is preferable by r547 with profit 66
   Insn 89: point = 973
   Insn 88: point = 974
   Insn 470: point = 975
	   Creating copy r546<-r750@66
   Insn 751: point = 977
   Insn 469: point = 978
	   Creating copy r545->r750@66
   Insn 87: point = 980
   Insn 468: point = 980
	Hard reg 0 is preferable by r545 with profit 66
   Insn 86: point = 982
   Insn 85: point = 983
   Insn 467: point = 984
	   Creating copy r544<-r751@66
   Insn 752: point = 986
   Insn 466: point = 987
	   Creating copy r543->r751@66
   Insn 84: point = 989
   Insn 465: point = 989
	Hard reg 3 is preferable by r543 with profit 66
   Insn 83: point = 991
   Insn 82: point = 992
   Insn 464: point = 993
	   Creating copy r542<-r752@66
   Insn 753: point = 995
   Insn 463: point = 996
	   Creating copy r541->r752@66
   Insn 81: point = 998
   Insn 462: point = 998
	Hard reg 3 is preferable by r541 with profit 66
   Insn 80: point = 1000
   Insn 79: point = 1001
   Insn 461: point = 1002
	   Creating copy r540<-r753@66
   Insn 754: point = 1004
   Insn 460: point = 1005
	   Creating copy r539->r753@66
   Insn 78: point = 1007
   Insn 459: point = 1007
	Hard reg 0 is preferable by r539 with profit 66
   Insn 77: point = 1009
   Insn 76: point = 1010
   Insn 458: point = 1011
	   Creating copy r538<-r754@66
   Insn 755: point = 1013
   Insn 457: point = 1014
	   Creating copy r537->r754@66
   Insn 75: point = 1016
   Insn 456: point = 1016
	Hard reg 0 is preferable by r537 with profit 66
   Insn 74: point = 1018
   Insn 73: point = 1019
   Insn 455: point = 1020
	   Creating copy r536<-r755@66
   Insn 756: point = 1022
   Insn 454: point = 1023
	   Creating copy r535->r755@66
   Insn 72: point = 1025
   Insn 453: point = 1025
	Hard reg 0 is preferable by r535 with profit 66
   Insn 71: point = 1027
   Insn 70: point = 1028
   Insn 452: point = 1029
	   Creating copy r534<-r756@66
   Insn 757: point = 1031
   Insn 451: point = 1032
	   Creating copy r533->r756@66
   Insn 69: point = 1034
   Insn 450: point = 1034
	Hard reg 38 is preferable by r533 with profit 66
   Insn 68: point = 1036
   Insn 67: point = 1037
   Insn 449: point = 1037
	Hard reg 5 is preferable by r532 with profit 66
   Insn 66: point = 1039
   Insn 448: point = 1039
	Hard reg 5 is preferable by r532 with profit 66
	Hard reg 6 is preferable by r532 with profit 66
   Insn 65: point = 1041
   Insn 64: point = 1042
   Insn 63: point = 1042
   Insn 62: point = 1044
   Insn 29: point = 1045
   Insn 28: point = 1046
 r113: [182..783] [179..179]
 r128: [84..905]
 r129: [82..900]
 r130: [92..895]
 r131: [90..890]
 r132: [12..885]
 r133: [10..880]
 r134: [20..875]
 r135: [18..870]
 r136: [104..864]
 r137: [102..854]
 r138: [112..844]
 r139: [110..834]
 r141: [815..819]
 r142: [805..809]
 r144: [589..604]
 r146: [585..598]
 r147: [581..596]
 r149: [574..592]
 r152: [403..586]
 r154: [339..582]
 r155: [279..577]
 r157: [234..569]
 r160: [537..559]
 r162: [533..555]
 r163: [529..551]
 r165: [522..545]
 r168: [343..534]
 r170: [283..530]
 r171: [223..525]
 r173: [393..519]
 r176: [479..503]
 r178: [475..497]
 r179: [471..493]
 r181: [469..487]
 r184: [287..476]
 r186: [229..472]
 r187: [395..470]
 r189: [333..464]
 r192: [424..448]
 r194: [420..442]
 r195: [416..438]
 r197: [414..432]
 r200: [236..421]
 r202: [399..417]
 r203: [335..415]
 r205: [275..411]
 r206: [441..830] [132..303]
 r209: [382..400]
 r211: [373..396]
 r212: [366..394]
 r214: [356..390]
 r217: [607..797] [148..376]
 r219: [823..826] [447..802] [66..367]
 r220: [496..840] [134..359]
 r222: [766..790] [34..176]
 r225: [322..340]
 r227: [313..336]
 r228: [307..334]
 r230: [300..330]
 r233: [562..794] [146..316]
 r235: [823..823] [764..816] [60..174]
 r238: [511..787] [46..295]
 r241: [264..284]
 r243: [255..280]
 r244: [251..276]
 r247: [249..272]
 r250: [762..793] [160..172]
 r252: [823..824] [738..812] [56..170]
 r254: [760..860] [126..168]
 r256: [456..784] [44..244]
 r260: [206..230]
 r262: [197..224]
 r264: [193..220]
 r266: [186..214]
 r270: [758..792] [156..166]
 r273: [823..825] [756..806] [70..164]
 r274: [554..850] [122..189]
 r276: [754..791] [38..162]
 r281: [752..800]
 r293: [750..1042]
 r296: [737..767] [613..729]
 r297: [740..1037]
 r301: [746..1031]
 r304: [737..769] [568..719]
 r305: [737..1022] [542..715]
 r306: [744..770]
 r309: [737..1013] [518..707]
 r312: [737..771] [516..703]
 r313: [737..1004] [486..699]
 r314: [742..772]
 r317: [737..995] [463..691]
 r320: [737..773] [461..687]
 r321: [737..986] [431..683]
 r322: [737..774] [429..679]
 r325: [737..977] [410..675]
 r328: [737..775] [408..671]
 r329: [737..968] [389..667]
 r330: [737..776] [387..663]
 r333: [737..959] [350..659]
 r336: [737..777] [348..655]
 r337: [737..950] [329..651]
 r338: [737..778] [327..647]
 r341: [737..941] [294..643]
 r344: [737..779] [292..639]
 r345: [737..932] [271..635]
 r346: [737..780] [269..631]
 r349: [737..923] [243..627]
 r352: [737..781] [241..623]
 r353: [737..913] [213..619]
 r354: [737..782] [211..615]
 r357: [919..1045]
 r358: [1043..1044]
 r359: [1040..1041]
 r360: [1035..1036]
 r361: [1026..1027]
 r362: [1017..1018]
 r363: [1008..1009]
 r364: [999..1000]
 r365: [990..991]
 r366: [981..982]
 r367: [972..973]
 r368: [963..964]
 r369: [954..955]
 r370: [945..946]
 r371: [936..937]
 r372: [927..928]
 r373: [917..918]
 r374: [609..610]
 r375: [605..608]
 r376: [599..600]
 r377: [593..594]
 r378: [589..590]
 r379: [587..588]
 r380: [583..584]
 r381: [572..573]
 r382: [564..565]
 r383: [560..563]
 r384: [556..557]
 r385: [546..547]
 r386: [537..538]
 r387: [535..536]
 r388: [531..532]
 r389: [520..521]
 r390: [508..512]
 r391: [504..507]
 r392: [498..499]
 r393: [488..489]
 r394: [479..480]
 r395: [477..478]
 r396: [473..474]
 r397: [465..466]
 r398: [453..457]
 r399: [449..452]
 r400: [443..444]
 r401: [433..434]
 r402: [424..425]
 r403: [422..423]
 r404: [418..419]
 r405: [412..413]
 r406: [403..404]
 r407: [401..402]
 r408: [397..398]
 r409: [391..392]
 r410: [382..383]
 r411: [380..381]
 r412: [371..372]
 r413: [354..355]
 r414: [343..344]
 r415: [341..342]
 r416: [337..338]
 r417: [331..332]
 r418: [322..323]
 r419: [320..321]
 r420: [311..312]
 r421: [298..299]
 r422: [287..288]
 r423: [285..286]
 r424: [281..282]
 r425: [273..274]
 r426: [264..265]
 r427: [262..263]
 r428: [253..254]
 r429: [247..248]
 r430: [236..237]
 r431: [231..235]
 r432: [225..226]
 r433: [215..216]
 r434: [206..207]
 r435: [204..205]
 r436: [195..196]
 r437: [184..185]
 r438: [726..735]
 r439: [618..733]
 r440: [728..732]
 r444: [714..724]
 r446: [718..722]
 r450: [698..710]
 r452: [702..706]
 r456: [682..694]
 r458: [686..690]
 r462: [666..678]
 r464: [670..674]
 r468: [650..662]
 r470: [654..658]
 r474: [634..646]
 r476: [638..642]
 r480: [618..630]
 r482: [622..626]
 r486: [115..136]
 r487: [139..150]
 r488: [140..142]
 r489: [115..116]
 r490: [117..128]
 r491: [117..118]
 r492: [95..114]
 r493: [23..96]
 r494: [97..106]
 r495: [97..98]
 r496: [75..94]
 r497: [75..76]
 r498: [77..86]
 r499: [77..78]
 r500: [72..74]
 r501: [25..48]
 r502: [49..62]
 r503: [49..50]
 r504: [25..26]
 r505: [27..40]
 r506: [27..28]
 r507: [23..24]
 r511: [3..22]
 r512: [3..4]
 r513: [5..14]
 r514: [5..6]
 r515: [0..2]
 r517: [550..765] [177..351]
 r518: [603..763] [175..308]
 r519: [506..761] [173..258]
 r520: [558..737] [171..252]
 r521: [597..759] [169..250]
 r522: [451..757] [167..200]
 r523: [502..755] [165..194]
 r524: [595..753] [163..183]
 r525: [179..751]
 r526: [737..749] [611..734]
 r527: [737..739] [591..727]
 r528: [737..747] [591..725]
 r529: [737..745] [566..723]
 r530: [737..743] [544..711]
 r531: [737..741] [484..695]
 r532: [1038..1039]
 r533: [1033..1034]
 r534: [1028..1029]
 r535: [1024..1025]
 r536: [1019..1020]
 r537: [1015..1016]
 r538: [1010..1011]
 r539: [1006..1007]
 r540: [1001..1002]
 r541: [997..998]
 r542: [992..993]
 r543: [988..989]
 r544: [983..984]
 r545: [979..980]
 r546: [974..975]
 r547: [970..971]
 r548: [965..966]
 r549: [961..962]
 r550: [956..957]
 r551: [952..953]
 r552: [947..948]
 r553: [943..944]
 r554: [938..939]
 r555: [934..935]
 r556: [929..930]
 r557: [925..926]
 r558: [920..921]
 r559: [915..916]
 r560: [910..911]
 r561: [908..909]
 r562: [906..907]
 r563: [903..904]
 r564: [901..902]
 r565: [898..899]
 r566: [896..897]
 r567: [893..894]
 r568: [891..892]
 r569: [888..889]
 r570: [886..887]
 r571: [883..884]
 r572: [881..882]
 r573: [878..879]
 r574: [876..877]
 r575: [873..874]
 r576: [871..872]
 r577: [868..869]
 r578: [866..867]
 r579: [861..862]
 r580: [858..859]
 r581: [856..857]
 r582: [851..852]
 r583: [848..849]
 r584: [846..847]
 r585: [841..842]
 r586: [838..839]
 r587: [836..837]
 r588: [831..832]
 r589: [828..829]
 r590: [820..821]
 r591: [817..818]
 r592: [813..814]
 r593: [810..811]
 r594: [807..808]
 r595: [803..804]
 r596: [798..799]
 r597: [795..796]
 r598: [788..789]
 r599: [785..786]
 r602: [601..602]
 r603: [579..580]
 r604: [574..575]
 r605: [570..571]
 r608: [552..553]
 r609: [548..549]
 r611: [527..528]
 r612: [522..523]
 r613: [513..517]
 r615: [508..509]
 r617: [500..501]
 r618: [494..495]
 r619: [490..491]
 r620: [481..485]
 r622: [467..468]
 r623: [458..462]
 r625: [453..454]
 r627: [445..446]
 r628: [439..440]
 r629: [435..436]
 r630: [426..430]
 r632: [405..409]
 r634: [384..388]
 r636: [378..379]
 r637: [373..374]
 r638: [369..370]
 r639: [361..365]
 r640: [362..363]
 r641: [356..357]
 r642: [352..353]
 r643: [345..349]
 r645: [324..328]
 r647: [318..319]
 r648: [313..314]
 r649: [309..310]
 r650: [305..306]
 r651: [300..301]
 r652: [296..297]
 r653: [289..293]
 r655: [277..278]
 r656: [266..270]
 r658: [260..261]
 r659: [255..256]
 r660: [245..246]
 r661: [238..242]
 r663: [231..232]
 r664: [227..228]
 r665: [221..222]
 r666: [217..218]
 r667: [208..212]
 r669: [202..203]
 r670: [197..198]
 r671: [191..192]
 r672: [186..187]
 r674: [730..731]
 r675: [720..721]
 r676: [716..717]
 r677: [708..709]
 r678: [704..705]
 r679: [700..701]
 r680: [696..697]
 r681: [692..693]
 r682: [688..689]
 r683: [684..685]
 r684: [680..681]
 r685: [676..677]
 r686: [672..673]
 r687: [668..669]
 r688: [664..665]
 r689: [660..661]
 r690: [656..657]
 r691: [652..653]
 r692: [648..649]
 r693: [644..645]
 r694: [640..641]
 r695: [636..637]
 r696: [632..633]
 r697: [628..629]
 r698: [624..625]
 r699: [620..621]
 r700: [616..617]
 r701: [161..161] [151..157]
 r702: [152..153]
 r703: [158..159]
 r704: [154..155]
 r705: [149..149] [143..147]
 r706: [144..145]
 r707: [137..141]
 r708: [135..135] [129..133]
 r709: [130..131]
 r710: [127..127] [119..123]
 r711: [120..121]
 r712: [124..125]
 r713: [113..113] [107..111]
 r714: [108..109]
 r715: [105..105] [99..103]
 r716: [100..101]
 r717: [93..93] [87..91]
 r718: [88..89]
 r719: [85..85] [79..83]
 r720: [80..81]
 r721: [72..73]
 r722: [71..71] [63..67]
 r723: [64..65]
 r724: [68..69]
 r725: [61..61] [51..57]
 r726: [52..53]
 r727: [58..59]
 r728: [47..47] [41..45]
 r729: [42..43]
 r730: [39..39] [29..35]
 r731: [30..31]
 r732: [36..37]
 r733: [32..33]
 r734: [21..21] [15..19]
 r735: [16..17]
 r736: [13..13] [7..11]
 r737: [8..9]
 r738: [0..1]
 r739: [833..835]
 r740: [843..845]
 r741: [853..855]
 r742: [863..865]
 r743: [912..914]
 r744: [922..924]
 r745: [931..933]
 r746: [940..942]
 r747: [949..951]
 r748: [958..960]
 r749: [967..969]
 r750: [976..978]
 r751: [985..987]
 r752: [994..996]
 r753: [1003..1005]
 r754: [1012..1014]
 r755: [1021..1023]
 r756: [1030..1032]
 r757: [748..768]
 r758: [188..190]
 r759: [199..201]
 r760: [219..233]
 r761: [257..259]
 r762: [302..304]
 r763: [315..317]
 r764: [358..360]
 r765: [364..368]
 r766: [375..377]
 r767: [437..455]
 r768: [492..510]
 r770: [524..526]
 r773: [576..578]
 r774: [427..428]
 r775: [406..407]
 r776: [385..386]
 r777: [54..55]
 r778: [712..713]
 r779: [180..181]
 r780: [209..210]
 r781: [239..240]
 r782: [267..268]
 r783: [290..291]
 r784: [325..326]
 r785: [346..347]
 r786: [449..450]
 r787: [459..460]
 r788: [482..483]
 r789: [504..505]
 r790: [514..515]
 r791: [539..543]
 r792: [540..541]
 r793: [560..561]
 r794: [566..567]
 r795: [605..606]
 r796: [611..612]
Compressing live ranges: from 1046 to 896 - 85%
Ranges after the compression:
 r113: [161..685] [158..158]
 r128: [75..773]
 r129: [73..769]
 r130: [82..765]
 r131: [80..761]
 r132: [10..757]
 r133: [8..753]
 r134: [17..749]
 r135: [15..745]
 r136: [93..741]
 r137: [91..733]
 r138: [100..725]
 r139: [98..717]
 r141: [704..707]
 r142: [696..699]
 r144: [541..556]
 r146: [537..550]
 r147: [533..548]
 r149: [527..544]
 r152: [365..538]
 r154: [307..534]
 r155: [251..530]
 r157: [209..522]
 r160: [491..512]
 r162: [487..508]
 r163: [483..504]
 r165: [477..498]
 r168: [311..488]
 r170: [255..484]
 r171: [199..480]
 r173: [355..474]
 r176: [437..460]
 r178: [433..454]
 r179: [429..450]
 r181: [427..444]
 r184: [259..434]
 r186: [205..430]
 r187: [357..428]
 r189: [301..422]
 r192: [385..408]
 r194: [381..402]
 r195: [377..398]
 r197: [375..392]
 r200: [211..382]
 r202: [361..378]
 r203: [303..376]
 r205: [247..372]
 r206: [401..713] [118..274]
 r209: [345..362]
 r211: [337..358]
 r212: [331..356]
 r214: [323..352]
 r217: [559..691] [129..340]
 r219: [710..711] [407..693] [59..332]
 r220: [453..721] [120..326]
 r222: [684..689] [30..156]
 r225: [291..308]
 r227: [283..304]
 r228: [277..302]
 r230: [271..298]
 r233: [515..689] [127..286]
 r235: [710..710] [682..705] [54..154]
 r238: [467..687] [41..266]
 r241: [237..256]
 r243: [229..252]
 r244: [225..248]
 r247: [223..244]
 r250: [680..689] [140..152]
 r252: [710..711] [656..701] [50..150]
 r254: [678..737] [113..148]
 r256: [415..685] [39..218]
 r260: [183..206]
 r262: [175..200]
 r264: [171..196]
 r266: [165..190]
 r270: [676..689] [136..146]
 r273: [710..711] [674..697] [63..144]
 r274: [507..729] [109..168]
 r276: [672..689] [34..142]
 r281: [670..693]
 r293: [668..893]
 r296: [655..685] [565..652]
 r297: [658..889]
 r301: [664..885]
 r304: [655..685] [521..646]
 r305: [655..877] [495..642]
 r306: [662..685]
 r309: [655..869] [473..636]
 r312: [655..685] [471..634]
 r313: [655..861] [443..630]
 r314: [660..685]
 r317: [655..853] [421..624]
 r320: [655..685] [419..622]
 r321: [655..845] [391..618]
 r322: [655..685] [389..614]
 r325: [655..837] [371..612]
 r328: [655..685] [369..610]
 r329: [655..829] [351..606]
 r330: [655..685] [349..602]
 r333: [655..821] [317..600]
 r336: [655..685] [315..598]
 r337: [655..813] [297..594]
 r338: [655..685] [295..590]
 r341: [655..805] [265..588]
 r344: [655..685] [263..586]
 r345: [655..797] [243..582]
 r346: [655..685] [241..578]
 r349: [655..789] [217..576]
 r352: [655..685] [215..574]
 r353: [655..781] [189..570]
 r354: [655..685] [187..566]
 r357: [786..895]
 r358: [894..895]
 r359: [892..893]
 r360: [888..889]
 r361: [880..881]
 r362: [872..873]
 r363: [864..865]
 r364: [856..857]
 r365: [848..849]
 r366: [840..841]
 r367: [832..833]
 r368: [824..825]
 r369: [816..817]
 r370: [808..809]
 r371: [800..801]
 r372: [792..793]
 r373: [784..785]
 r374: [561..562]
 r375: [557..560]
 r376: [551..552]
 r377: [545..546]
 r378: [541..542]
 r379: [539..540]
 r380: [535..536]
 r381: [525..526]
 r382: [517..518]
 r383: [513..516]
 r384: [509..510]
 r385: [499..500]
 r386: [491..492]
 r387: [489..490]
 r388: [485..486]
 r389: [475..476]
 r390: [465..468]
 r391: [461..464]
 r392: [455..456]
 r393: [445..446]
 r394: [437..438]
 r395: [435..436]
 r396: [431..432]
 r397: [423..424]
 r398: [413..416]
 r399: [409..412]
 r400: [403..404]
 r401: [393..394]
 r402: [385..386]
 r403: [383..384]
 r404: [379..380]
 r405: [373..374]
 r406: [365..366]
 r407: [363..364]
 r408: [359..360]
 r409: [353..354]
 r410: [345..346]
 r411: [343..344]
 r412: [335..336]
 r413: [321..322]
 r414: [311..312]
 r415: [309..310]
 r416: [305..306]
 r417: [299..300]
 r418: [291..292]
 r419: [289..290]
 r420: [281..282]
 r421: [269..270]
 r422: [259..260]
 r423: [257..258]
 r424: [253..254]
 r425: [245..246]
 r426: [237..238]
 r427: [235..236]
 r428: [227..228]
 r429: [221..222]
 r430: [211..212]
 r431: [207..210]
 r432: [201..202]
 r433: [191..192]
 r434: [183..184]
 r435: [181..182]
 r436: [173..174]
 r437: [163..164]
 r438: [649..654]
 r439: [569..654]
 r440: [651..654]
 r444: [641..648]
 r446: [645..648]
 r450: [629..638]
 r452: [633..636]
 r456: [617..626]
 r458: [621..624]
 r462: [605..614]
 r464: [609..612]
 r468: [593..602]
 r470: [597..600]
 r474: [581..590]
 r476: [585..588]
 r480: [569..578]
 r482: [573..576]
 r486: [103..122]
 r487: [123..131]
 r488: [123..124]
 r489: [103..104]
 r490: [105..115]
 r491: [105..106]
 r492: [85..102]
 r493: [20..86]
 r494: [87..95]
 r495: [87..88]
 r496: [67..84]
 r497: [67..68]
 r498: [69..77]
 r499: [69..70]
 r500: [65..66]
 r501: [22..43]
 r502: [44..56]
 r503: [44..45]
 r504: [22..23]
 r505: [24..36]
 r506: [24..25]
 r507: [20..21]
 r511: [2..19]
 r512: [2..3]
 r513: [4..12]
 r514: [4..5]
 r515: [0..1]
 r517: [503..683] [157..318]
 r518: [555..681] [155..278]
 r519: [463..679] [153..232]
 r520: [511..655] [151..226]
 r521: [549..677] [149..224]
 r522: [411..675] [147..178]
 r523: [459..673] [145..172]
 r524: [547..671] [143..162]
 r525: [158..669]
 r526: [563..667]
 r527: [655..657] [543..650]
 r528: [655..665] [543..648]
 r529: [655..663] [519..648]
 r530: [655..661] [497..638]
 r531: [655..659] [441..626]
 r532: [890..891]
 r533: [886..887]
 r534: [882..883]
 r535: [878..879]
 r536: [874..875]
 r537: [870..871]
 r538: [866..867]
 r539: [862..863]
 r540: [858..859]
 r541: [854..855]
 r542: [850..851]
 r543: [846..847]
 r544: [842..843]
 r545: [838..839]
 r546: [834..835]
 r547: [830..831]
 r548: [826..827]
 r549: [822..823]
 r550: [818..819]
 r551: [814..815]
 r552: [810..811]
 r553: [806..807]
 r554: [802..803]
 r555: [798..799]
 r556: [794..795]
 r557: [790..791]
 r558: [786..787]
 r559: [782..783]
 r560: [778..779]
 r561: [776..777]
 r562: [774..775]
 r563: [772..773]
 r564: [770..771]
 r565: [768..769]
 r566: [766..767]
 r567: [764..765]
 r568: [762..763]
 r569: [760..761]
 r570: [758..759]
 r571: [756..757]
 r572: [754..755]
 r573: [752..753]
 r574: [750..751]
 r575: [748..749]
 r576: [746..747]
 r577: [744..745]
 r578: [742..743]
 r579: [738..739]
 r580: [736..737]
 r581: [734..735]
 r582: [730..731]
 r583: [728..729]
 r584: [726..727]
 r585: [722..723]
 r586: [720..721]
 r587: [718..719]
 r588: [714..715]
 r589: [712..713]
 r590: [708..709]
 r591: [706..707]
 r592: [702..703]
 r593: [700..701]
 r594: [698..699]
 r595: [694..695]
 r596: [692..693]
 r597: [690..691]
 r598: [688..689]
 r599: [686..687]
 r602: [553..554]
 r603: [531..532]
 r604: [527..528]
 r605: [523..524]
 r608: [505..506]
 r609: [501..502]
 r611: [481..482]
 r612: [477..478]
 r613: [469..472]
 r615: [465..466]
 r617: [457..458]
 r618: [451..452]
 r619: [447..448]
 r620: [439..442]
 r622: [425..426]
 r623: [417..420]
 r625: [413..414]
 r627: [405..406]
 r628: [399..400]
 r629: [395..396]
 r630: [387..390]
 r632: [367..370]
 r634: [347..350]
 r636: [341..342]
 r637: [337..338]
 r638: [333..334]
 r639: [327..330]
 r640: [327..328]
 r641: [323..324]
 r642: [319..320]
 r643: [313..316]
 r645: [293..296]
 r647: [287..288]
 r648: [283..284]
 r649: [279..280]
 r650: [275..276]
 r651: [271..272]
 r652: [267..268]
 r653: [261..264]
 r655: [249..250]
 r656: [239..242]
 r658: [233..234]
 r659: [229..230]
 r660: [219..220]
 r661: [213..216]
 r663: [207..208]
 r664: [203..204]
 r665: [197..198]
 r666: [193..194]
 r667: [185..188]
 r669: [179..180]
 r670: [175..176]
 r671: [169..170]
 r672: [165..166]
 r674: [653..654]
 r675: [647..648]
 r676: [643..644]
 r677: [637..638]
 r678: [635..636]
 r679: [631..632]
 r680: [627..628]
 r681: [625..626]
 r682: [623..624]
 r683: [619..620]
 r684: [615..616]
 r685: [613..614]
 r686: [611..612]
 r687: [607..608]
 r688: [603..604]
 r689: [601..602]
 r690: [599..600]
 r691: [595..596]
 r692: [591..592]
 r693: [589..590]
 r694: [587..588]
 r695: [583..584]
 r696: [579..580]
 r697: [577..578]
 r698: [575..576]
 r699: [571..572]
 r700: [567..568]
 r701: [141..141] [132..137]
 r702: [132..133]
 r703: [138..139]
 r704: [134..135]
 r705: [130..130] [125..128]
 r706: [125..126]
 r707: [123..124]
 r708: [121..121] [116..119]
 r709: [116..117]
 r710: [114..114] [107..110]
 r711: [107..108]
 r712: [111..112]
 r713: [101..101] [96..99]
 r714: [96..97]
 r715: [94..94] [89..92]
 r716: [89..90]
 r717: [83..83] [78..81]
 r718: [78..79]
 r719: [76..76] [71..74]
 r720: [71..72]
 r721: [65..66]
 r722: [64..64] [57..60]
 r723: [57..58]
 r724: [61..62]
 r725: [55..55] [46..51]
 r726: [46..47]
 r727: [52..53]
 r728: [42..42] [37..40]
 r729: [37..38]
 r730: [35..35] [26..31]
 r731: [26..27]
 r732: [32..33]
 r733: [28..29]
 r734: [18..18] [13..16]
 r735: [13..14]
 r736: [11..11] [6..9]
 r737: [6..7]
 r738: [0..1]
 r739: [716..717]
 r740: [724..725]
 r741: [732..733]
 r742: [740..741]
 r743: [780..781]
 r744: [788..789]
 r745: [796..797]
 r746: [804..805]
 r747: [812..813]
 r748: [820..821]
 r749: [828..829]
 r750: [836..837]
 r751: [844..845]
 r752: [852..853]
 r753: [860..861]
 r754: [868..869]
 r755: [876..877]
 r756: [884..885]
 r757: [666..685]
 r758: [167..168]
 r759: [177..178]
 r760: [195..208]
 r761: [231..232]
 r762: [273..274]
 r763: [285..286]
 r764: [325..326]
 r765: [329..332]
 r766: [339..340]
 r767: [397..414]
 r768: [449..466]
 r770: [479..480]
 r773: [529..530]
 r774: [387..388]
 r775: [367..368]
 r776: [347..348]
 r777: [48..49]
 r778: [639..640]
 r779: [159..160]
 r780: [185..186]
 r781: [213..214]
 r782: [239..240]
 r783: [261..262]
 r784: [293..294]
 r785: [313..314]
 r786: [409..410]
 r787: [417..418]
 r788: [439..440]
 r789: [461..462]
 r790: [469..470]
 r791: [493..496]
 r792: [493..494]
 r793: [513..514]
 r794: [519..520]
 r795: [557..558]
 r796: [563..564]

********** Inheritance #2: **********

EBB 2 3
EBB 4
EBB 5
EBB 6 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=797 from oldreg=171, assigning class GENERAL_REGS to inheritance r797
    Original reg change 171->797 (bb6):
  770: r797:SI=r770:SI
    Add original<-inheritance after:
  800: r171:SI=r797:SI

    Inheritance reuse change 171->797 (bb6):
  633: r665:SI=r797:SI
      REG_DEAD r797:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=798 from oldreg=157, assigning class GENERAL_REGS to inheritance r798
    Original reg change 157->798 (bb6):
  546: r798:SI=r605:SI
      REG_DEAD r605:SI
    Add original<-inheritance after:
  801: r157:SI=r798:SI

    Inheritance reuse change 157->798 (bb6):
  761: r760:SI=r798:SI
      REG_DEAD r798:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=799 from oldreg=155, assigning class GENERAL_REGS to inheritance r799
    Original reg change 155->799 (bb6):
  773: r799:SI=r773:SI
    Add original<-inheritance after:
  802: r155:SI=r799:SI

    Inheritance reuse change 155->799 (bb6):
  619: r655:SI=r799:SI
      REG_DEAD r799:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   800: r171:SI=r797:SI
deleting insn with uid = 800.
	    Removing dead insn:
   801: r157:SI=r798:SI
deleting insn with uid = 801.
	    Removing dead insn:
   802: r155:SI=r799:SI
deleting insn with uid = 802.
EBB 8

********** Pseudo live ranges #6: **********

  BB 8
   Insn 413: point = 0
   Insn 412: point = 0
   Insn 407: point = 0
   Insn 739: point = 1
   Insn 406: point = 2
   Insn 405: point = 4
   Insn 737: point = 6
	Hard reg 24 is preferable by r736 with profit 66
   Insn 404: point = 8
   Insn 738: point = 9
   Insn 736: point = 11
   Insn 735: point = 13
   Insn 733: point = 14
	Hard reg 22 is preferable by r734 with profit 66
   Insn 403: point = 16
   Insn 734: point = 17
   Insn 732: point = 19
   Insn 731: point = 21
   Insn 402: point = 22
   Insn 398: point = 24
   Insn 397: point = 26
   Insn 727: point = 28
	Hard reg 22 is preferable by r730 with profit 66
   Insn 396: point = 30
   Insn 730: point = 31
	   Creating copy r731<-r733@66
   Insn 728: point = 33
	Hard reg 43 is preferable by r733 with profit 66
   Insn 729: point = 35
   Insn 726: point = 37
	Hard reg 37 is preferable by r732 with profit 66
   Insn 725: point = 39
   Insn 723: point = 40
	Hard reg 23 is preferable by r728 with profit 66
   Insn 395: point = 42
   Insn 724: point = 43
   Insn 722: point = 45
   Insn 721: point = 47
   Insn 394: point = 48
   Insn 718: point = 50
	Hard reg 21 is preferable by r725 with profit 66
   Insn 393: point = 52
   Insn 778: point = 53
	   Creating copy r726<-r777@66
   Insn 719: point = 55
	Hard reg 2 is preferable by r777 with profit 66
   Insn 720: point = 57
   Insn 717: point = 59
	Hard reg 6 is preferable by r727 with profit 66
   Insn 716: point = 61
   Insn 713: point = 62
	Hard reg 22 is preferable by r722 with profit 66
   Insn 392: point = 64
   Insn 714: point = 65
   Insn 715: point = 67
   Insn 712: point = 69
	Hard reg 3 is preferable by r724 with profit 66
   Insn 711: point = 71
   Insn 390: point = 72
   Insn 710: point = 73
   Insn 389: point = 74
   Insn 388: point = 76
   Insn 708: point = 78
	Hard reg 22 is preferable by r719 with profit 66
   Insn 387: point = 80
   Insn 709: point = 81
   Insn 707: point = 83
   Insn 706: point = 85
   Insn 704: point = 86
	Hard reg 23 is preferable by r717 with profit 66
   Insn 386: point = 88
   Insn 705: point = 89
   Insn 703: point = 91
   Insn 702: point = 93
   Insn 385: point = 94
   Insn 384: point = 96
   Insn 700: point = 98
	Hard reg 24 is preferable by r715 with profit 66
   Insn 383: point = 100
   Insn 701: point = 101
   Insn 699: point = 103
   Insn 698: point = 105
   Insn 696: point = 106
	Hard reg 22 is preferable by r713 with profit 66
   Insn 382: point = 108
   Insn 697: point = 109
   Insn 695: point = 111
   Insn 694: point = 113
   Insn 381: point = 114
   Insn 380: point = 116
   Insn 691: point = 118
	Hard reg 21 is preferable by r710 with profit 66
   Insn 379: point = 120
   Insn 692: point = 121
   Insn 693: point = 123
   Insn 690: point = 125
	Hard reg 38 is preferable by r712 with profit 66
   Insn 689: point = 127
   Insn 687: point = 128
	Hard reg 23 is preferable by r708 with profit 66
   Insn 378: point = 130
   Insn 688: point = 131
   Insn 686: point = 133
   Insn 685: point = 135
   Insn 684: point = 136
	Hard reg 22 is preferable by r707 with profit 66
   Insn 377: point = 138
   Insn 683: point = 140
   Insn 682: point = 141
   Insn 680: point = 142
	Hard reg 21 is preferable by r705 with profit 66
   Insn 376: point = 144
   Insn 681: point = 145
   Insn 679: point = 147
   Insn 678: point = 149
   Insn 674: point = 150
	Hard reg 22 is preferable by r701 with profit 66
   Insn 375: point = 152
   Insn 677: point = 153
	   Creating copy r702<-r704@66
   Insn 675: point = 155
	Hard reg 44 is preferable by r704 with profit 66
   Insn 676: point = 157
   Insn 673: point = 159
	Hard reg 42 is preferable by r703 with profit 66
   Insn 672: point = 161
   Insn 446: point = 162
   Insn 445: point = 164
   Insn 444: point = 166
   Insn 443: point = 168
   Insn 442: point = 170
   Insn 441: point = 172
   Insn 440: point = 174
   Insn 439: point = 176
  BB 6
   Insn 270: point = 179
   Insn 781: point = 179
   Insn 269: point = 181
   Insn 780: point = 181
   Insn 268: point = 183
   Insn 266: point = 183
   Insn 265: point = 185
   Insn 642: point = 187
	   Creating copy r672<-r758@933
   Insn 759: point = 189
   Insn 641: point = 190
	   Creating copy r671->r758@933
   Insn 264: point = 192
   Insn 263: point = 194
   Insn 262: point = 196
   Insn 640: point = 198
	   Creating copy r670<-r759@933
   Insn 760: point = 200
   Insn 639: point = 201
	   Creating copy r669->r759@933
   Insn 261: point = 203
   Insn 260: point = 205
   Insn 637: point = 207
	Hard reg 1 is preferable by r667 with profit 933
   Insn 259: point = 209
   Insn 782: point = 210
   Insn 636: point = 212
   Insn 258: point = 214
   Insn 635: point = 216
	Hard reg 37 is preferable by r666 with profit 933
   Insn 257: point = 218
   Insn 634: point = 218
	   Creating copy r666<-r760@933
   Insn 256: point = 220
   Insn 633: point = 222
	   Creating copy r665<-r797@933
   Insn 255: point = 224
   Insn 632: point = 226
	Hard reg 3 is preferable by r664 with profit 933
   Insn 254: point = 228
   Insn 631: point = 228
	Hard reg 3 is preferable by r664 with profit 933
	Hard reg 37 is preferable by r664 with profit 933
   Insn 253: point = 230
   Insn 630: point = 232
	   Creating copy r663<-r760@933
   Insn 761: point = 233
	   Creating copy r760<-r798@933
   Insn 252: point = 235
   Insn 628: point = 237
	Hard reg 0 is preferable by r661 with profit 933
   Insn 251: point = 239
   Insn 783: point = 240
   Insn 627: point = 242
   Insn 626: point = 244
   Insn 250: point = 246
   Insn 625: point = 246
	Hard reg 40 is preferable by r660 with profit 933
   Insn 249: point = 248
   Insn 248: point = 250
   Insn 247: point = 252
   Insn 246: point = 254
   Insn 624: point = 256
	   Creating copy r659<-r761@933
   Insn 762: point = 258
   Insn 623: point = 259
	   Creating copy r658->r761@933
   Insn 245: point = 261
   Insn 244: point = 263
   Insn 621: point = 265
	Hard reg 1 is preferable by r656 with profit 933
   Insn 243: point = 267
   Insn 784: point = 268
   Insn 620: point = 270
   Insn 242: point = 272
   Insn 241: point = 274
   Insn 240: point = 276
   Insn 619: point = 278
	   Creating copy r655<-r799@933
   Insn 239: point = 280
   Insn 238: point = 282
   Insn 237: point = 284
   Insn 236: point = 286
   Insn 617: point = 288
	Hard reg 0 is preferable by r653 with profit 933
   Insn 235: point = 290
   Insn 785: point = 291
   Insn 616: point = 293
   Insn 615: point = 295
   Insn 234: point = 297
   Insn 614: point = 297
	Hard reg 3 is preferable by r652 with profit 933
   Insn 233: point = 299
   Insn 613: point = 301
	   Creating copy r651<-r762@933
   Insn 763: point = 303
   Insn 612: point = 304
	   Creating copy r650->r762@933
   Insn 232: point = 306
   Insn 611: point = 308
	Hard reg 6 is preferable by r649 with profit 933
   Insn 231: point = 310
   Insn 610: point = 310
	Hard reg 6 is preferable by r649 with profit 933
	Hard reg 2 is preferable by r649 with profit 933
   Insn 230: point = 312
   Insn 609: point = 314
	   Creating copy r648<-r763@933
   Insn 764: point = 316
   Insn 608: point = 317
	   Creating copy r647->r763@933
   Insn 229: point = 319
   Insn 228: point = 321
   Insn 606: point = 323
	Hard reg 1 is preferable by r645 with profit 933
   Insn 227: point = 325
   Insn 786: point = 326
   Insn 605: point = 328
   Insn 226: point = 330
   Insn 225: point = 332
   Insn 224: point = 334
   Insn 223: point = 336
   Insn 222: point = 338
   Insn 221: point = 340
   Insn 220: point = 342
   Insn 603: point = 344
	Hard reg 1 is preferable by r643 with profit 933
   Insn 219: point = 346
   Insn 787: point = 347
   Insn 602: point = 349
   Insn 601: point = 351
	Hard reg 43 is preferable by r642 with profit 933
   Insn 218: point = 353
   Insn 600: point = 353
	Hard reg 43 is preferable by r642 with profit 933
	Hard reg 6 is preferable by r642 with profit 933
   Insn 217: point = 355
   Insn 599: point = 357
	   Creating copy r641<-r764@933
   Insn 765: point = 359
   Insn 597: point = 360
	   Creating copy r639->r764@933
   Insn 216: point = 362
   Insn 598: point = 363
	   Creating copy r640<-r765@933
   Insn 596: point = 365
	Hard reg 43 is preferable by r639 with profit 933
   Insn 766: point = 367
   Insn 595: point = 368
	   Creating copy r638->r765@933
   Insn 215: point = 370
   Insn 594: point = 370
	Hard reg 41 is preferable by r638 with profit 933
   Insn 214: point = 372
   Insn 593: point = 374
	   Creating copy r637<-r766@933
   Insn 767: point = 376
   Insn 592: point = 377
	   Creating copy r636->r766@933
   Insn 213: point = 379
   Insn 212: point = 381
   Insn 590: point = 383
	Hard reg 44 is preferable by r634 with profit 933
   Insn 211: point = 385
   Insn 777: point = 386
   Insn 589: point = 388
   Insn 210: point = 390
   Insn 209: point = 392
   Insn 208: point = 394
   Insn 207: point = 396
   Insn 206: point = 398
   Insn 205: point = 400
   Insn 204: point = 402
   Insn 587: point = 404
	Hard reg 44 is preferable by r632 with profit 933
   Insn 203: point = 406
   Insn 776: point = 407
   Insn 586: point = 409
   Insn 202: point = 411
   Insn 201: point = 413
   Insn 200: point = 415
   Insn 199: point = 417
   Insn 198: point = 419
   Insn 197: point = 421
   Insn 196: point = 423
   Insn 584: point = 425
	Hard reg 44 is preferable by r630 with profit 933
   Insn 195: point = 427
   Insn 775: point = 428
   Insn 583: point = 430
   Insn 194: point = 432
   Insn 582: point = 434
	Hard reg 40 is preferable by r629 with profit 933
   Insn 193: point = 436
   Insn 581: point = 436
	   Creating copy r629<-r767@933
   Insn 580: point = 438
	Hard reg 42 is preferable by r628 with profit 933
   Insn 192: point = 440
   Insn 579: point = 440
   Insn 191: point = 442
   Insn 578: point = 444
	Hard reg 41 is preferable by r627 with profit 933
   Insn 190: point = 446
   Insn 577: point = 446
   Insn 189: point = 448
   Insn 788: point = 450
   Insn 188: point = 452
   Insn 575: point = 454
	   Creating copy r625<-r767@933
   Insn 768: point = 455
   Insn 573: point = 457
	Hard reg 39 is preferable by r623 with profit 933
   Insn 187: point = 459
   Insn 789: point = 460
   Insn 572: point = 462
   Insn 186: point = 464
   Insn 571: point = 466
	Hard reg 3 is preferable by r622 with profit 933
   Insn 185: point = 468
   Insn 570: point = 468
	Hard reg 3 is preferable by r622 with profit 933
	Hard reg 40 is preferable by r622 with profit 933
   Insn 184: point = 470
   Insn 183: point = 472
   Insn 182: point = 474
   Insn 181: point = 476
   Insn 180: point = 478
   Insn 568: point = 480
	Hard reg 38 is preferable by r620 with profit 933
   Insn 179: point = 482
   Insn 790: point = 483
   Insn 567: point = 485
   Insn 178: point = 487
   Insn 566: point = 489
	Hard reg 40 is preferable by r619 with profit 933
   Insn 177: point = 491
   Insn 565: point = 491
	   Creating copy r619<-r768@933
   Insn 564: point = 493
	Hard reg 43 is preferable by r618 with profit 933
   Insn 176: point = 495
   Insn 563: point = 495
   Insn 175: point = 497
   Insn 562: point = 499
	Hard reg 37 is preferable by r617 with profit 933
   Insn 174: point = 501
   Insn 561: point = 501
	Hard reg 37 is preferable by r617 with profit 933
	Hard reg 3 is preferable by r617 with profit 933
   Insn 173: point = 503
   Insn 791: point = 505
   Insn 172: point = 507
   Insn 559: point = 509
	   Creating copy r615<-r768@933
   Insn 769: point = 510
   Insn 557: point = 512
	Hard reg 39 is preferable by r613 with profit 933
   Insn 171: point = 514
   Insn 792: point = 515
   Insn 556: point = 517
   Insn 170: point = 519
   Insn 169: point = 521
   Insn 555: point = 523
	   Creating copy r612<-r770@933
   Insn 770: point = 525
	   Creating copy r770->r797@933
   Insn 554: point = 526
	   Creating copy r611->r770@933
   Insn 168: point = 528
   Insn 167: point = 530
   Insn 166: point = 532
   Insn 165: point = 534
   Insn 164: point = 536
   Insn 794: point = 538
	Hard reg 0 is preferable by r791 with profit 933
   Insn 163: point = 540
   Insn 795: point = 541
   Insn 793: point = 543
   Insn 162: point = 545
   Insn 552: point = 547
	Hard reg 6 is preferable by r609 with profit 933
   Insn 161: point = 549
   Insn 551: point = 549
	Hard reg 6 is preferable by r609 with profit 933
	Hard reg 43 is preferable by r609 with profit 933
   Insn 550: point = 551
	Hard reg 37 is preferable by r608 with profit 933
   Insn 160: point = 553
   Insn 549: point = 553
   Insn 159: point = 555
   Insn 158: point = 557
   Insn 157: point = 559
   Insn 796: point = 561
   Insn 156: point = 563
   Insn 155: point = 565
   Insn 797: point = 567
   Insn 546: point = 569
	   Creating copy r605->r798@933
   Insn 154: point = 571
   Insn 545: point = 571
	Hard reg 37 is preferable by r605 with profit 933
   Insn 153: point = 573
   Insn 544: point = 575
	   Creating copy r604<-r773@933
   Insn 773: point = 577
	   Creating copy r773->r799@933
   Insn 543: point = 578
	   Creating copy r603->r773@933
   Insn 152: point = 580
   Insn 151: point = 582
   Insn 150: point = 584
   Insn 149: point = 586
   Insn 148: point = 588
   Insn 147: point = 590
   Insn 146: point = 592
   Insn 145: point = 594
   Insn 144: point = 596
   Insn 143: point = 598
   Insn 542: point = 600
	Hard reg 2 is preferable by r602 with profit 933
   Insn 142: point = 602
   Insn 541: point = 602
	Hard reg 2 is preferable by r602 with profit 933
	Hard reg 6 is preferable by r602 with profit 933
   Insn 141: point = 604
   Insn 798: point = 606
   Insn 140: point = 608
   Insn 139: point = 610
   Insn 799: point = 612
  BB 7
   Insn 422: point = 615
   Insn 671: point = 615
   Insn 368: point = 617
   Insn 670: point = 619
   Insn 365: point = 621
   Insn 669: point = 623
   Insn 363: point = 625
   Insn 362: point = 626
   Insn 668: point = 627
   Insn 359: point = 629
   Insn 358: point = 630
   Insn 667: point = 631
   Insn 356: point = 633
   Insn 666: point = 635
   Insn 353: point = 637
   Insn 665: point = 639
   Insn 351: point = 641
   Insn 350: point = 642
   Insn 664: point = 643
   Insn 347: point = 645
   Insn 346: point = 646
   Insn 663: point = 647
   Insn 344: point = 649
   Insn 662: point = 651
   Insn 341: point = 653
   Insn 661: point = 655
   Insn 339: point = 657
   Insn 338: point = 658
   Insn 660: point = 659
   Insn 335: point = 661
   Insn 334: point = 662
   Insn 659: point = 663
   Insn 332: point = 665
   Insn 658: point = 667
   Insn 329: point = 669
   Insn 657: point = 671
   Insn 327: point = 673
   Insn 326: point = 674
   Insn 656: point = 675
   Insn 323: point = 677
   Insn 322: point = 678
   Insn 655: point = 679
   Insn 320: point = 681
   Insn 654: point = 683
   Insn 317: point = 685
   Insn 653: point = 687
   Insn 315: point = 689
   Insn 314: point = 690
   Insn 652: point = 691
   Insn 311: point = 693
   Insn 310: point = 694
   Insn 651: point = 695
   Insn 308: point = 697
   Insn 650: point = 699
   Insn 305: point = 701
   Insn 649: point = 703
   Insn 303: point = 705
   Insn 302: point = 706
   Insn 648: point = 707
   Insn 299: point = 709
   Insn 298: point = 710
   Insn 779: point = 711
   Insn 296: point = 713
   Insn 647: point = 715
   Insn 293: point = 717
   Insn 646: point = 719
   Insn 291: point = 721
   Insn 290: point = 722
   Insn 287: point = 723
   Insn 286: point = 724
   Insn 284: point = 725
   Insn 281: point = 727
   Insn 645: point = 729
   Insn 279: point = 731
   Insn 278: point = 732
   Insn 277: point = 733
   Insn 275: point = 734
   Insn 274: point = 735
  BB 5
   Insn 438: point = 737
   Insn 437: point = 739
   Insn 436: point = 741
   Insn 435: point = 743
   Insn 434: point = 745
   Insn 433: point = 747
	Hard reg 41 is preferable by r757 with profit 67
   Insn 432: point = 749
   Insn 431: point = 751
   Insn 430: point = 753
   Insn 429: point = 755
   Insn 428: point = 757
   Insn 427: point = 759
   Insn 426: point = 761
   Insn 425: point = 763
   Insn 424: point = 765
   Insn 59: point = 767
   Insn 58: point = 768
   Insn 57: point = 769
   Insn 56: point = 770
   Insn 55: point = 771
   Insn 54: point = 772
   Insn 53: point = 773
   Insn 52: point = 774
   Insn 51: point = 775
   Insn 50: point = 776
   Insn 49: point = 777
   Insn 48: point = 778
   Insn 47: point = 779
   Insn 46: point = 780
   Insn 45: point = 781
   Insn 44: point = 782
   Insn 43: point = 783
   Insn 42: point = 784
   Insn 538: point = 786
   Insn 41: point = 787
   Insn 537: point = 789
   Insn 40: point = 790
   Insn 39: point = 791
   Insn 38: point = 792
   Insn 37: point = 793
   Insn 36: point = 794
   Insn 536: point = 796
   Insn 35: point = 797
   Insn 535: point = 799
   Insn 137: point = 800
  BB 3
   Insn 420: point = 802
   Insn 534: point = 802
   Insn 134: point = 804
   Insn 533: point = 804
	Hard reg 44 is preferable by r595 with profit 33
   Insn 532: point = 806
	Hard reg 3 is preferable by r594 with profit 33
   Insn 133: point = 808
   Insn 531: point = 808
   Insn 132: point = 809
   Insn 530: point = 811
   Insn 529: point = 812
	Hard reg 2 is preferable by r592 with profit 33
   Insn 131: point = 814
   Insn 528: point = 814
	Hard reg 2 is preferable by r592 with profit 33
	Hard reg 37 is preferable by r592 with profit 33
   Insn 527: point = 816
	Hard reg 6 is preferable by r591 with profit 33
   Insn 130: point = 818
   Insn 526: point = 818
   Insn 129: point = 819
   Insn 525: point = 821
  BB 4
   Insn 34: point = 823
   Insn 33: point = 824
   Insn 32: point = 825
   Insn 31: point = 826
  BB 2
   Insn 127: point = 828
   Insn 126: point = 828
   Insn 524: point = 829
   Insn 523: point = 830
   Insn 125: point = 832
   Insn 522: point = 832
	   Creating copy r588<-r739@66
   Insn 740: point = 834
   Insn 521: point = 835
	   Creating copy r587->r739@66
   Insn 124: point = 837
   Insn 520: point = 839
   Insn 519: point = 840
   Insn 123: point = 842
   Insn 518: point = 842
	   Creating copy r585<-r740@66
   Insn 741: point = 844
   Insn 517: point = 845
	   Creating copy r584->r740@66
   Insn 122: point = 847
   Insn 516: point = 849
   Insn 515: point = 850
   Insn 121: point = 852
   Insn 514: point = 852
	   Creating copy r582<-r741@66
   Insn 742: point = 854
   Insn 513: point = 855
	   Creating copy r581->r741@66
   Insn 120: point = 857
   Insn 512: point = 859
   Insn 511: point = 860
	Hard reg 38 is preferable by r579 with profit 66
   Insn 119: point = 862
   Insn 510: point = 862
	   Creating copy r579<-r742@66
   Insn 743: point = 864
   Insn 509: point = 865
	   Creating copy r578->r742@66
   Insn 118: point = 867
   Insn 508: point = 869
   Insn 507: point = 870
   Insn 117: point = 872
   Insn 506: point = 874
   Insn 505: point = 875
   Insn 116: point = 877
   Insn 504: point = 879
   Insn 503: point = 880
   Insn 115: point = 882
   Insn 502: point = 884
   Insn 501: point = 885
   Insn 114: point = 887
   Insn 500: point = 889
   Insn 499: point = 890
   Insn 113: point = 892
   Insn 498: point = 894
   Insn 497: point = 895
   Insn 112: point = 897
   Insn 496: point = 899
   Insn 495: point = 900
   Insn 111: point = 902
   Insn 494: point = 904
   Insn 493: point = 905
   Insn 110: point = 907
   Insn 492: point = 909
   Insn 109: point = 910
   Insn 491: point = 911
	   Creating copy r560<-r743@66
   Insn 744: point = 913
   Insn 490: point = 914
	   Creating copy r559->r743@66
   Insn 108: point = 916
   Insn 489: point = 916
	Hard reg 44 is preferable by r559 with profit 66
   Insn 107: point = 918
   Insn 106: point = 920
   Insn 488: point = 921
	   Creating copy r558<-r744@66
   Insn 745: point = 923
   Insn 487: point = 924
	   Creating copy r557->r744@66
   Insn 105: point = 926
   Insn 486: point = 926
	Hard reg 44 is preferable by r557 with profit 66
   Insn 104: point = 928
   Insn 103: point = 929
   Insn 485: point = 930
	   Creating copy r556<-r745@66
   Insn 746: point = 932
   Insn 484: point = 933
	   Creating copy r555->r745@66
   Insn 102: point = 935
   Insn 483: point = 935
	Hard reg 42 is preferable by r555 with profit 66
   Insn 101: point = 937
   Insn 100: point = 938
   Insn 482: point = 939
	   Creating copy r554<-r746@66
   Insn 747: point = 941
   Insn 481: point = 942
	   Creating copy r553->r746@66
   Insn 99: point = 944
   Insn 480: point = 944
	Hard reg 42 is preferable by r553 with profit 66
   Insn 98: point = 946
   Insn 97: point = 947
   Insn 479: point = 948
	   Creating copy r552<-r747@66
   Insn 748: point = 950
   Insn 478: point = 951
	   Creating copy r551->r747@66
   Insn 96: point = 953
   Insn 477: point = 953
	Hard reg 0 is preferable by r551 with profit 66
   Insn 95: point = 955
   Insn 94: point = 956
   Insn 476: point = 957
	   Creating copy r550<-r748@66
   Insn 749: point = 959
   Insn 475: point = 960
	   Creating copy r549->r748@66
   Insn 93: point = 962
   Insn 474: point = 962
	Hard reg 0 is preferable by r549 with profit 66
   Insn 92: point = 964
   Insn 91: point = 965
   Insn 473: point = 966
	   Creating copy r548<-r749@66
   Insn 750: point = 968
   Insn 472: point = 969
	   Creating copy r547->r749@66
   Insn 90: point = 971
   Insn 471: point = 971
	Hard reg 0 is preferable by r547 with profit 66
   Insn 89: point = 973
   Insn 88: point = 974
   Insn 470: point = 975
	   Creating copy r546<-r750@66
   Insn 751: point = 977
   Insn 469: point = 978
	   Creating copy r545->r750@66
   Insn 87: point = 980
   Insn 468: point = 980
	Hard reg 0 is preferable by r545 with profit 66
   Insn 86: point = 982
   Insn 85: point = 983
   Insn 467: point = 984
	   Creating copy r544<-r751@66
   Insn 752: point = 986
   Insn 466: point = 987
	   Creating copy r543->r751@66
   Insn 84: point = 989
   Insn 465: point = 989
	Hard reg 3 is preferable by r543 with profit 66
   Insn 83: point = 991
   Insn 82: point = 992
   Insn 464: point = 993
	   Creating copy r542<-r752@66
   Insn 753: point = 995
   Insn 463: point = 996
	   Creating copy r541->r752@66
   Insn 81: point = 998
   Insn 462: point = 998
	Hard reg 3 is preferable by r541 with profit 66
   Insn 80: point = 1000
   Insn 79: point = 1001
   Insn 461: point = 1002
	   Creating copy r540<-r753@66
   Insn 754: point = 1004
   Insn 460: point = 1005
	   Creating copy r539->r753@66
   Insn 78: point = 1007
   Insn 459: point = 1007
	Hard reg 0 is preferable by r539 with profit 66
   Insn 77: point = 1009
   Insn 76: point = 1010
   Insn 458: point = 1011
	   Creating copy r538<-r754@66
   Insn 755: point = 1013
   Insn 457: point = 1014
	   Creating copy r537->r754@66
   Insn 75: point = 1016
   Insn 456: point = 1016
	Hard reg 0 is preferable by r537 with profit 66
   Insn 74: point = 1018
   Insn 73: point = 1019
   Insn 455: point = 1020
	   Creating copy r536<-r755@66
   Insn 756: point = 1022
   Insn 454: point = 1023
	   Creating copy r535->r755@66
   Insn 72: point = 1025
   Insn 453: point = 1025
	Hard reg 0 is preferable by r535 with profit 66
   Insn 71: point = 1027
   Insn 70: point = 1028
   Insn 452: point = 1029
	   Creating copy r534<-r756@66
   Insn 757: point = 1031
   Insn 451: point = 1032
	   Creating copy r533->r756@66
   Insn 69: point = 1034
   Insn 450: point = 1034
	Hard reg 38 is preferable by r533 with profit 66
   Insn 68: point = 1036
   Insn 67: point = 1037
   Insn 449: point = 1037
	Hard reg 5 is preferable by r532 with profit 66
   Insn 66: point = 1039
   Insn 448: point = 1039
	Hard reg 5 is preferable by r532 with profit 66
	Hard reg 6 is preferable by r532 with profit 66
   Insn 65: point = 1041
   Insn 64: point = 1042
   Insn 63: point = 1042
   Insn 62: point = 1044
   Insn 29: point = 1045
   Insn 28: point = 1046
 r113: [182..783] [179..179]
 r128: [84..905]
 r129: [82..900]
 r130: [92..895]
 r131: [90..890]
 r132: [12..885]
 r133: [10..880]
 r134: [20..875]
 r135: [18..870]
 r136: [104..864]
 r137: [102..854]
 r138: [112..844]
 r139: [110..834]
 r141: [815..819]
 r142: [805..809]
 r144: [589..604]
 r146: [585..598]
 r147: [581..596]
 r149: [574..592]
 r152: [403..586]
 r154: [339..582]
 r160: [537..559]
 r162: [533..555]
 r163: [529..551]
 r165: [522..545]
 r168: [343..534]
 r170: [283..530]
 r173: [393..519]
 r176: [479..503]
 r178: [475..497]
 r179: [471..493]
 r181: [469..487]
 r184: [287..476]
 r186: [229..472]
 r187: [395..470]
 r189: [333..464]
 r192: [424..448]
 r194: [420..442]
 r195: [416..438]
 r197: [414..432]
 r200: [236..421]
 r202: [399..417]
 r203: [335..415]
 r205: [275..411]
 r206: [441..830] [132..303]
 r209: [382..400]
 r211: [373..396]
 r212: [366..394]
 r214: [356..390]
 r217: [607..797] [148..376]
 r219: [823..826] [447..802] [66..367]
 r220: [496..840] [134..359]
 r222: [766..790] [34..176]
 r225: [322..340]
 r227: [313..336]
 r228: [307..334]
 r230: [300..330]
 r233: [562..794] [146..316]
 r235: [823..823] [764..816] [60..174]
 r238: [511..787] [46..295]
 r241: [264..284]
 r243: [255..280]
 r244: [251..276]
 r247: [249..272]
 r250: [762..793] [160..172]
 r252: [823..824] [738..812] [56..170]
 r254: [760..860] [126..168]
 r256: [456..784] [44..244]
 r260: [206..230]
 r262: [197..224]
 r264: [193..220]
 r266: [186..214]
 r270: [758..792] [156..166]
 r273: [823..825] [756..806] [70..164]
 r274: [554..850] [122..189]
 r276: [754..791] [38..162]
 r281: [752..800]
 r293: [750..1042]
 r296: [737..767] [613..729]
 r297: [740..1037]
 r301: [746..1031]
 r304: [737..769] [568..719]
 r305: [737..1022] [542..715]
 r306: [744..770]
 r309: [737..1013] [518..707]
 r312: [737..771] [516..703]
 r313: [737..1004] [486..699]
 r314: [742..772]
 r317: [737..995] [463..691]
 r320: [737..773] [461..687]
 r321: [737..986] [431..683]
 r322: [737..774] [429..679]
 r325: [737..977] [410..675]
 r328: [737..775] [408..671]
 r329: [737..968] [389..667]
 r330: [737..776] [387..663]
 r333: [737..959] [350..659]
 r336: [737..777] [348..655]
 r337: [737..950] [329..651]
 r338: [737..778] [327..647]
 r341: [737..941] [294..643]
 r344: [737..779] [292..639]
 r345: [737..932] [271..635]
 r346: [737..780] [269..631]
 r349: [737..923] [243..627]
 r352: [737..781] [241..623]
 r353: [737..913] [213..619]
 r354: [737..782] [211..615]
 r357: [919..1045]
 r358: [1043..1044]
 r359: [1040..1041]
 r360: [1035..1036]
 r361: [1026..1027]
 r362: [1017..1018]
 r363: [1008..1009]
 r364: [999..1000]
 r365: [990..991]
 r366: [981..982]
 r367: [972..973]
 r368: [963..964]
 r369: [954..955]
 r370: [945..946]
 r371: [936..937]
 r372: [927..928]
 r373: [917..918]
 r374: [609..610]
 r375: [605..608]
 r376: [599..600]
 r377: [593..594]
 r378: [589..590]
 r379: [587..588]
 r380: [583..584]
 r381: [572..573]
 r382: [564..565]
 r383: [560..563]
 r384: [556..557]
 r385: [546..547]
 r386: [537..538]
 r387: [535..536]
 r388: [531..532]
 r389: [520..521]
 r390: [508..512]
 r391: [504..507]
 r392: [498..499]
 r393: [488..489]
 r394: [479..480]
 r395: [477..478]
 r396: [473..474]
 r397: [465..466]
 r398: [453..457]
 r399: [449..452]
 r400: [443..444]
 r401: [433..434]
 r402: [424..425]
 r403: [422..423]
 r404: [418..419]
 r405: [412..413]
 r406: [403..404]
 r407: [401..402]
 r408: [397..398]
 r409: [391..392]
 r410: [382..383]
 r411: [380..381]
 r412: [371..372]
 r413: [354..355]
 r414: [343..344]
 r415: [341..342]
 r416: [337..338]
 r417: [331..332]
 r418: [322..323]
 r419: [320..321]
 r420: [311..312]
 r421: [298..299]
 r422: [287..288]
 r423: [285..286]
 r424: [281..282]
 r425: [273..274]
 r426: [264..265]
 r427: [262..263]
 r428: [253..254]
 r429: [247..248]
 r430: [236..237]
 r431: [231..235]
 r432: [225..226]
 r433: [215..216]
 r434: [206..207]
 r435: [204..205]
 r436: [195..196]
 r437: [184..185]
 r438: [726..735]
 r439: [618..733]
 r440: [728..732]
 r444: [714..724]
 r446: [718..722]
 r450: [698..710]
 r452: [702..706]
 r456: [682..694]
 r458: [686..690]
 r462: [666..678]
 r464: [670..674]
 r468: [650..662]
 r470: [654..658]
 r474: [634..646]
 r476: [638..642]
 r480: [618..630]
 r482: [622..626]
 r486: [115..136]
 r487: [139..150]
 r488: [140..142]
 r489: [115..116]
 r490: [117..128]
 r491: [117..118]
 r492: [95..114]
 r493: [23..96]
 r494: [97..106]
 r495: [97..98]
 r496: [75..94]
 r497: [75..76]
 r498: [77..86]
 r499: [77..78]
 r500: [72..74]
 r501: [25..48]
 r502: [49..62]
 r503: [49..50]
 r504: [25..26]
 r505: [27..40]
 r506: [27..28]
 r507: [23..24]
 r511: [3..22]
 r512: [3..4]
 r513: [5..14]
 r514: [5..6]
 r515: [0..2]
 r517: [550..765] [177..351]
 r518: [603..763] [175..308]
 r519: [506..761] [173..258]
 r520: [558..737] [171..252]
 r521: [597..759] [169..250]
 r522: [451..757] [167..200]
 r523: [502..755] [165..194]
 r524: [595..753] [163..183]
 r525: [179..751]
 r526: [737..749] [611..734]
 r527: [737..739] [591..727]
 r528: [737..747] [591..725]
 r529: [737..745] [566..723]
 r530: [737..743] [544..711]
 r531: [737..741] [484..695]
 r532: [1038..1039]
 r533: [1033..1034]
 r534: [1028..1029]
 r535: [1024..1025]
 r536: [1019..1020]
 r537: [1015..1016]
 r538: [1010..1011]
 r539: [1006..1007]
 r540: [1001..1002]
 r541: [997..998]
 r542: [992..993]
 r543: [988..989]
 r544: [983..984]
 r545: [979..980]
 r546: [974..975]
 r547: [970..971]
 r548: [965..966]
 r549: [961..962]
 r550: [956..957]
 r551: [952..953]
 r552: [947..948]
 r553: [943..944]
 r554: [938..939]
 r555: [934..935]
 r556: [929..930]
 r557: [925..926]
 r558: [920..921]
 r559: [915..916]
 r560: [910..911]
 r561: [908..909]
 r562: [906..907]
 r563: [903..904]
 r564: [901..902]
 r565: [898..899]
 r566: [896..897]
 r567: [893..894]
 r568: [891..892]
 r569: [888..889]
 r570: [886..887]
 r571: [883..884]
 r572: [881..882]
 r573: [878..879]
 r574: [876..877]
 r575: [873..874]
 r576: [871..872]
 r577: [868..869]
 r578: [866..867]
 r579: [861..862]
 r580: [858..859]
 r581: [856..857]
 r582: [851..852]
 r583: [848..849]
 r584: [846..847]
 r585: [841..842]
 r586: [838..839]
 r587: [836..837]
 r588: [831..832]
 r589: [828..829]
 r590: [820..821]
 r591: [817..818]
 r592: [813..814]
 r593: [810..811]
 r594: [807..808]
 r595: [803..804]
 r596: [798..799]
 r597: [795..796]
 r598: [788..789]
 r599: [785..786]
 r602: [601..602]
 r603: [579..580]
 r604: [574..575]
 r605: [570..571]
 r608: [552..553]
 r609: [548..549]
 r611: [527..528]
 r612: [522..523]
 r613: [513..517]
 r615: [508..509]
 r617: [500..501]
 r618: [494..495]
 r619: [490..491]
 r620: [481..485]
 r622: [467..468]
 r623: [458..462]
 r625: [453..454]
 r627: [445..446]
 r628: [439..440]
 r629: [435..436]
 r630: [426..430]
 r632: [405..409]
 r634: [384..388]
 r636: [378..379]
 r637: [373..374]
 r638: [369..370]
 r639: [361..365]
 r640: [362..363]
 r641: [356..357]
 r642: [352..353]
 r643: [345..349]
 r645: [324..328]
 r647: [318..319]
 r648: [313..314]
 r649: [309..310]
 r650: [305..306]
 r651: [300..301]
 r652: [296..297]
 r653: [289..293]
 r655: [277..278]
 r656: [266..270]
 r658: [260..261]
 r659: [255..256]
 r660: [245..246]
 r661: [238..242]
 r663: [231..232]
 r664: [227..228]
 r665: [221..222]
 r666: [217..218]
 r667: [208..212]
 r669: [202..203]
 r670: [197..198]
 r671: [191..192]
 r672: [186..187]
 r674: [730..731]
 r675: [720..721]
 r676: [716..717]
 r677: [708..709]
 r678: [704..705]
 r679: [700..701]
 r680: [696..697]
 r681: [692..693]
 r682: [688..689]
 r683: [684..685]
 r684: [680..681]
 r685: [676..677]
 r686: [672..673]
 r687: [668..669]
 r688: [664..665]
 r689: [660..661]
 r690: [656..657]
 r691: [652..653]
 r692: [648..649]
 r693: [644..645]
 r694: [640..641]
 r695: [636..637]
 r696: [632..633]
 r697: [628..629]
 r698: [624..625]
 r699: [620..621]
 r700: [616..617]
 r701: [161..161] [151..157]
 r702: [152..153]
 r703: [158..159]
 r704: [154..155]
 r705: [149..149] [143..147]
 r706: [144..145]
 r707: [137..141]
 r708: [135..135] [129..133]
 r709: [130..131]
 r710: [127..127] [119..123]
 r711: [120..121]
 r712: [124..125]
 r713: [113..113] [107..111]
 r714: [108..109]
 r715: [105..105] [99..103]
 r716: [100..101]
 r717: [93..93] [87..91]
 r718: [88..89]
 r719: [85..85] [79..83]
 r720: [80..81]
 r721: [72..73]
 r722: [71..71] [63..67]
 r723: [64..65]
 r724: [68..69]
 r725: [61..61] [51..57]
 r726: [52..53]
 r727: [58..59]
 r728: [47..47] [41..45]
 r729: [42..43]
 r730: [39..39] [29..35]
 r731: [30..31]
 r732: [36..37]
 r733: [32..33]
 r734: [21..21] [15..19]
 r735: [16..17]
 r736: [13..13] [7..11]
 r737: [8..9]
 r738: [0..1]
 r739: [833..835]
 r740: [843..845]
 r741: [853..855]
 r742: [863..865]
 r743: [912..914]
 r744: [922..924]
 r745: [931..933]
 r746: [940..942]
 r747: [949..951]
 r748: [958..960]
 r749: [967..969]
 r750: [976..978]
 r751: [985..987]
 r752: [994..996]
 r753: [1003..1005]
 r754: [1012..1014]
 r755: [1021..1023]
 r756: [1030..1032]
 r757: [748..768]
 r758: [188..190]
 r759: [199..201]
 r760: [219..233]
 r761: [257..259]
 r762: [302..304]
 r763: [315..317]
 r764: [358..360]
 r765: [364..368]
 r766: [375..377]
 r767: [437..455]
 r768: [492..510]
 r770: [524..526]
 r773: [576..578]
 r774: [427..428]
 r775: [406..407]
 r776: [385..386]
 r777: [54..55]
 r778: [712..713]
 r779: [180..181]
 r780: [209..210]
 r781: [239..240]
 r782: [267..268]
 r783: [290..291]
 r784: [325..326]
 r785: [346..347]
 r786: [449..450]
 r787: [459..460]
 r788: [482..483]
 r789: [504..505]
 r790: [514..515]
 r791: [539..543]
 r792: [540..541]
 r793: [560..561]
 r794: [566..567]
 r795: [605..606]
 r796: [611..612]
 r797: [223..525]
 r798: [234..569]
 r799: [279..577]
Compressing live ranges: from 1046 to 896 - 85%
Ranges after the compression:
 r113: [161..685] [158..158]
 r128: [75..773]
 r129: [73..769]
 r130: [82..765]
 r131: [80..761]
 r132: [10..757]
 r133: [8..753]
 r134: [17..749]
 r135: [15..745]
 r136: [93..741]
 r137: [91..733]
 r138: [100..725]
 r139: [98..717]
 r141: [704..707]
 r142: [696..699]
 r144: [541..556]
 r146: [537..550]
 r147: [533..548]
 r149: [527..544]
 r152: [365..538]
 r154: [307..534]
 r160: [491..512]
 r162: [487..508]
 r163: [483..504]
 r165: [477..498]
 r168: [311..488]
 r170: [255..484]
 r173: [355..474]
 r176: [437..460]
 r178: [433..454]
 r179: [429..450]
 r181: [427..444]
 r184: [259..434]
 r186: [205..430]
 r187: [357..428]
 r189: [301..422]
 r192: [385..408]
 r194: [381..402]
 r195: [377..398]
 r197: [375..392]
 r200: [211..382]
 r202: [361..378]
 r203: [303..376]
 r205: [247..372]
 r206: [401..713] [118..274]
 r209: [345..362]
 r211: [337..358]
 r212: [331..356]
 r214: [323..352]
 r217: [559..691] [129..340]
 r219: [710..711] [407..693] [59..332]
 r220: [453..721] [120..326]
 r222: [684..689] [30..156]
 r225: [291..308]
 r227: [283..304]
 r228: [277..302]
 r230: [271..298]
 r233: [515..689] [127..286]
 r235: [710..710] [682..705] [54..154]
 r238: [467..687] [41..266]
 r241: [237..256]
 r243: [229..252]
 r244: [225..248]
 r247: [223..244]
 r250: [680..689] [140..152]
 r252: [710..711] [656..701] [50..150]
 r254: [678..737] [113..148]
 r256: [415..685] [39..218]
 r260: [183..206]
 r262: [175..200]
 r264: [171..196]
 r266: [165..190]
 r270: [676..689] [136..146]
 r273: [710..711] [674..697] [63..144]
 r274: [507..729] [109..168]
 r276: [672..689] [34..142]
 r281: [670..693]
 r293: [668..893]
 r296: [655..685] [565..652]
 r297: [658..889]
 r301: [664..885]
 r304: [655..685] [521..646]
 r305: [655..877] [495..642]
 r306: [662..685]
 r309: [655..869] [473..636]
 r312: [655..685] [471..634]
 r313: [655..861] [443..630]
 r314: [660..685]
 r317: [655..853] [421..624]
 r320: [655..685] [419..622]
 r321: [655..845] [391..618]
 r322: [655..685] [389..614]
 r325: [655..837] [371..612]
 r328: [655..685] [369..610]
 r329: [655..829] [351..606]
 r330: [655..685] [349..602]
 r333: [655..821] [317..600]
 r336: [655..685] [315..598]
 r337: [655..813] [297..594]
 r338: [655..685] [295..590]
 r341: [655..805] [265..588]
 r344: [655..685] [263..586]
 r345: [655..797] [243..582]
 r346: [655..685] [241..578]
 r349: [655..789] [217..576]
 r352: [655..685] [215..574]
 r353: [655..781] [189..570]
 r354: [655..685] [187..566]
 r357: [786..895]
 r358: [894..895]
 r359: [892..893]
 r360: [888..889]
 r361: [880..881]
 r362: [872..873]
 r363: [864..865]
 r364: [856..857]
 r365: [848..849]
 r366: [840..841]
 r367: [832..833]
 r368: [824..825]
 r369: [816..817]
 r370: [808..809]
 r371: [800..801]
 r372: [792..793]
 r373: [784..785]
 r374: [561..562]
 r375: [557..560]
 r376: [551..552]
 r377: [545..546]
 r378: [541..542]
 r379: [539..540]
 r380: [535..536]
 r381: [525..526]
 r382: [517..518]
 r383: [513..516]
 r384: [509..510]
 r385: [499..500]
 r386: [491..492]
 r387: [489..490]
 r388: [485..486]
 r389: [475..476]
 r390: [465..468]
 r391: [461..464]
 r392: [455..456]
 r393: [445..446]
 r394: [437..438]
 r395: [435..436]
 r396: [431..432]
 r397: [423..424]
 r398: [413..416]
 r399: [409..412]
 r400: [403..404]
 r401: [393..394]
 r402: [385..386]
 r403: [383..384]
 r404: [379..380]
 r405: [373..374]
 r406: [365..366]
 r407: [363..364]
 r408: [359..360]
 r409: [353..354]
 r410: [345..346]
 r411: [343..344]
 r412: [335..336]
 r413: [321..322]
 r414: [311..312]
 r415: [309..310]
 r416: [305..306]
 r417: [299..300]
 r418: [291..292]
 r419: [289..290]
 r420: [281..282]
 r421: [269..270]
 r422: [259..260]
 r423: [257..258]
 r424: [253..254]
 r425: [245..246]
 r426: [237..238]
 r427: [235..236]
 r428: [227..228]
 r429: [221..222]
 r430: [211..212]
 r431: [207..210]
 r432: [201..202]
 r433: [191..192]
 r434: [183..184]
 r435: [181..182]
 r436: [173..174]
 r437: [163..164]
 r438: [649..654]
 r439: [569..654]
 r440: [651..654]
 r444: [641..648]
 r446: [645..648]
 r450: [629..638]
 r452: [633..636]
 r456: [617..626]
 r458: [621..624]
 r462: [605..614]
 r464: [609..612]
 r468: [593..602]
 r470: [597..600]
 r474: [581..590]
 r476: [585..588]
 r480: [569..578]
 r482: [573..576]
 r486: [103..122]
 r487: [123..131]
 r488: [123..124]
 r489: [103..104]
 r490: [105..115]
 r491: [105..106]
 r492: [85..102]
 r493: [20..86]
 r494: [87..95]
 r495: [87..88]
 r496: [67..84]
 r497: [67..68]
 r498: [69..77]
 r499: [69..70]
 r500: [65..66]
 r501: [22..43]
 r502: [44..56]
 r503: [44..45]
 r504: [22..23]
 r505: [24..36]
 r506: [24..25]
 r507: [20..21]
 r511: [2..19]
 r512: [2..3]
 r513: [4..12]
 r514: [4..5]
 r515: [0..1]
 r517: [503..683] [157..318]
 r518: [555..681] [155..278]
 r519: [463..679] [153..232]
 r520: [511..655] [151..226]
 r521: [549..677] [149..224]
 r522: [411..675] [147..178]
 r523: [459..673] [145..172]
 r524: [547..671] [143..162]
 r525: [158..669]
 r526: [563..667]
 r527: [655..657] [543..650]
 r528: [655..665] [543..648]
 r529: [655..663] [519..648]
 r530: [655..661] [497..638]
 r531: [655..659] [441..626]
 r532: [890..891]
 r533: [886..887]
 r534: [882..883]
 r535: [878..879]
 r536: [874..875]
 r537: [870..871]
 r538: [866..867]
 r539: [862..863]
 r540: [858..859]
 r541: [854..855]
 r542: [850..851]
 r543: [846..847]
 r544: [842..843]
 r545: [838..839]
 r546: [834..835]
 r547: [830..831]
 r548: [826..827]
 r549: [822..823]
 r550: [818..819]
 r551: [814..815]
 r552: [810..811]
 r553: [806..807]
 r554: [802..803]
 r555: [798..799]
 r556: [794..795]
 r557: [790..791]
 r558: [786..787]
 r559: [782..783]
 r560: [778..779]
 r561: [776..777]
 r562: [774..775]
 r563: [772..773]
 r564: [770..771]
 r565: [768..769]
 r566: [766..767]
 r567: [764..765]
 r568: [762..763]
 r569: [760..761]
 r570: [758..759]
 r571: [756..757]
 r572: [754..755]
 r573: [752..753]
 r574: [750..751]
 r575: [748..749]
 r576: [746..747]
 r577: [744..745]
 r578: [742..743]
 r579: [738..739]
 r580: [736..737]
 r581: [734..735]
 r582: [730..731]
 r583: [728..729]
 r584: [726..727]
 r585: [722..723]
 r586: [720..721]
 r587: [718..719]
 r588: [714..715]
 r589: [712..713]
 r590: [708..709]
 r591: [706..707]
 r592: [702..703]
 r593: [700..701]
 r594: [698..699]
 r595: [694..695]
 r596: [692..693]
 r597: [690..691]
 r598: [688..689]
 r599: [686..687]
 r602: [553..554]
 r603: [531..532]
 r604: [527..528]
 r605: [523..524]
 r608: [505..506]
 r609: [501..502]
 r611: [481..482]
 r612: [477..478]
 r613: [469..472]
 r615: [465..466]
 r617: [457..458]
 r618: [451..452]
 r619: [447..448]
 r620: [439..442]
 r622: [425..426]
 r623: [417..420]
 r625: [413..414]
 r627: [405..406]
 r628: [399..400]
 r629: [395..396]
 r630: [387..390]
 r632: [367..370]
 r634: [347..350]
 r636: [341..342]
 r637: [337..338]
 r638: [333..334]
 r639: [327..330]
 r640: [327..328]
 r641: [323..324]
 r642: [319..320]
 r643: [313..316]
 r645: [293..296]
 r647: [287..288]
 r648: [283..284]
 r649: [279..280]
 r650: [275..276]
 r651: [271..272]
 r652: [267..268]
 r653: [261..264]
 r655: [249..250]
 r656: [239..242]
 r658: [233..234]
 r659: [229..230]
 r660: [219..220]
 r661: [213..216]
 r663: [207..208]
 r664: [203..204]
 r665: [197..198]
 r666: [193..194]
 r667: [185..188]
 r669: [179..180]
 r670: [175..176]
 r671: [169..170]
 r672: [165..166]
 r674: [653..654]
 r675: [647..648]
 r676: [643..644]
 r677: [637..638]
 r678: [635..636]
 r679: [631..632]
 r680: [627..628]
 r681: [625..626]
 r682: [623..624]
 r683: [619..620]
 r684: [615..616]
 r685: [613..614]
 r686: [611..612]
 r687: [607..608]
 r688: [603..604]
 r689: [601..602]
 r690: [599..600]
 r691: [595..596]
 r692: [591..592]
 r693: [589..590]
 r694: [587..588]
 r695: [583..584]
 r696: [579..580]
 r697: [577..578]
 r698: [575..576]
 r699: [571..572]
 r700: [567..568]
 r701: [141..141] [132..137]
 r702: [132..133]
 r703: [138..139]
 r704: [134..135]
 r705: [130..130] [125..128]
 r706: [125..126]
 r707: [123..124]
 r708: [121..121] [116..119]
 r709: [116..117]
 r710: [114..114] [107..110]
 r711: [107..108]
 r712: [111..112]
 r713: [101..101] [96..99]
 r714: [96..97]
 r715: [94..94] [89..92]
 r716: [89..90]
 r717: [83..83] [78..81]
 r718: [78..79]
 r719: [76..76] [71..74]
 r720: [71..72]
 r721: [65..66]
 r722: [64..64] [57..60]
 r723: [57..58]
 r724: [61..62]
 r725: [55..55] [46..51]
 r726: [46..47]
 r727: [52..53]
 r728: [42..42] [37..40]
 r729: [37..38]
 r730: [35..35] [26..31]
 r731: [26..27]
 r732: [32..33]
 r733: [28..29]
 r734: [18..18] [13..16]
 r735: [13..14]
 r736: [11..11] [6..9]
 r737: [6..7]
 r738: [0..1]
 r739: [716..717]
 r740: [724..725]
 r741: [732..733]
 r742: [740..741]
 r743: [780..781]
 r744: [788..789]
 r745: [796..797]
 r746: [804..805]
 r747: [812..813]
 r748: [820..821]
 r749: [828..829]
 r750: [836..837]
 r751: [844..845]
 r752: [852..853]
 r753: [860..861]
 r754: [868..869]
 r755: [876..877]
 r756: [884..885]
 r757: [666..685]
 r758: [167..168]
 r759: [177..178]
 r760: [195..208]
 r761: [231..232]
 r762: [273..274]
 r763: [285..286]
 r764: [325..326]
 r765: [329..332]
 r766: [339..340]
 r767: [397..414]
 r768: [449..466]
 r770: [479..480]
 r773: [529..530]
 r774: [387..388]
 r775: [367..368]
 r776: [347..348]
 r777: [48..49]
 r778: [639..640]
 r779: [159..160]
 r780: [185..186]
 r781: [213..214]
 r782: [239..240]
 r783: [261..262]
 r784: [293..294]
 r785: [313..314]
 r786: [409..410]
 r787: [417..418]
 r788: [439..440]
 r789: [461..462]
 r790: [469..470]
 r791: [493..496]
 r792: [493..494]
 r793: [513..514]
 r794: [519..520]
 r795: [557..558]
 r796: [563..564]
 r797: [199..480]
 r798: [209..522]
 r799: [251..530]

********** Assignment #2: **********

	 Assigning to 779 (cl=GENERAL_REGS, orig=113, freq=2799, tfirst=779, tfreq=2799)...
	   Assign 0 to optional reload r779 (freq=2799)
	 Assigning to 791 (cl=GENERAL_REGS, orig=386, freq=2799, tfirst=791, tfreq=2799)...
	   Assign 0 to reload r791 (freq=2799)
	 Assigning to 774 (cl=GENERAL_REGS, orig=322, freq=1866, tfirst=774, tfreq=1866)...
	 Assigning to 775 (cl=GENERAL_REGS, orig=328, freq=1866, tfirst=775, tfreq=1866)...
	 Assigning to 776 (cl=GENERAL_REGS, orig=330, freq=1866, tfirst=776, tfreq=1866)...
	 Assigning to 780 (cl=GENERAL_REGS, orig=354, freq=1866, tfirst=780, tfreq=1866)...
	   Assign 2 to optional reload r780 (freq=1866)
	 Assigning to 781 (cl=GENERAL_REGS, orig=352, freq=1866, tfirst=781, tfreq=1866)...
	   Assign 1 to optional reload r781 (freq=1866)
	 Assigning to 782 (cl=GENERAL_REGS, orig=346, freq=1866, tfirst=782, tfreq=1866)...
	   Assign 2 to optional reload r782 (freq=1866)
	 Assigning to 783 (cl=GENERAL_REGS, orig=344, freq=1866, tfirst=783, tfreq=1866)...
	   Assign 3 to optional reload r783 (freq=1866)
	 Assigning to 784 (cl=GENERAL_REGS, orig=338, freq=1866, tfirst=784, tfreq=1866)...
	   Assign 44 to optional reload r784 (freq=1866)
	 Assigning to 785 (cl=GENERAL_REGS, orig=336, freq=1866, tfirst=785, tfreq=1866)...
	   Assign 44 to optional reload r785 (freq=1866)
	 Assigning to 786 (cl=GENERAL_REGS, orig=270, freq=1866, tfirst=786, tfreq=1866)...
	   Assign 40 to optional reload r786 (freq=1866)
	 Assigning to 787 (cl=GENERAL_REGS, orig=320, freq=1866, tfirst=787, tfreq=1866)...
	   Assign 40 to optional reload r787 (freq=1866)
	 Assigning to 788 (cl=GENERAL_REGS, orig=314, freq=1866, tfirst=788, tfreq=1866)...
	   Assign 38 to optional reload r788 (freq=1866)
	 Assigning to 789 (cl=GENERAL_REGS, orig=250, freq=1866, tfirst=789, tfreq=1866)...
	   Assign 38 to optional reload r789 (freq=1866)
	 Assigning to 790 (cl=GENERAL_REGS, orig=312, freq=1866, tfirst=790, tfreq=1866)...
	   Assign 38 to optional reload r790 (freq=1866)
	 Assigning to 792 (cl=GENERAL_REGS, orig=305, freq=1866, tfirst=792, tfreq=1866)...
	   Assign 38 to optional reload r792 (freq=1866)
	 Assigning to 793 (cl=GENERAL_REGS, orig=233, freq=1866, tfirst=793, tfreq=1866)...
	   Assign 0 to optional reload r793 (freq=1866)
	 Assigning to 794 (cl=GENERAL_REGS, orig=304, freq=1866, tfirst=794, tfreq=1866)...
	   Assign 0 to optional reload r794 (freq=1866)
	 Assigning to 795 (cl=GENERAL_REGS, orig=217, freq=1866, tfirst=795, tfreq=1866)...
	   Assign 0 to optional reload r795 (freq=1866)
	 Assigning to 796 (cl=GENERAL_REGS, orig=296, freq=1866, tfirst=796, tfreq=1866)...
	   Assign 0 to optional reload r796 (freq=1866)
	 Assigning to 797 (cl=GENERAL_REGS, orig=171, freq=1866, tfirst=797, tfreq=1866)...
	 Assigning to 798 (cl=GENERAL_REGS, orig=157, freq=1866, tfirst=798, tfreq=1866)...
	 Assigning to 799 (cl=GENERAL_REGS, orig=155, freq=1866, tfirst=799, tfreq=1866)...
	 Assigning to 778 (cl=GENERAL_REGS, orig=306, freq=1742, tfirst=778, tfreq=1742)...
	   Assign 0 to reload r778 (freq=1742)
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 3 (0.00%)
   Insn after restoring regs:
  633: r665:SI=r171:SI
      REG_DEAD r171:SI
   Insn after restoring regs:
  761: r760:SI=r157:SI
      REG_DEAD r157:SI
   Insn after restoring regs:
  619: r655:SI=r155:SI
      REG_DEAD r155:SI
   Insn after restoring regs:
  770: r171:SI=r770:SI
   Insn after restoring regs:
  546: r157:SI=r605:SI
      REG_DEAD r605:SI
   Insn after restoring regs:
  773: r155:SI=r773:SI
Keep optional reload reg 600
Keep optional reload reg 601
Keep optional reload reg 604
Keep optional reload reg 606
Keep optional reload reg 607
Keep optional reload reg 610
Keep optional reload reg 612
Keep optional reload reg 614
Keep optional reload reg 615
Keep optional reload reg 616
Keep optional reload reg 621
Keep optional reload reg 624
Keep optional reload reg 625
Keep optional reload reg 626
Keep optional reload reg 631
Keep optional reload reg 633
Keep optional reload reg 635
Keep optional reload reg 637
Keep optional reload reg 640
Keep optional reload reg 641
Keep optional reload reg 644
Keep optional reload reg 646
Keep optional reload reg 648
Keep optional reload reg 651
Keep optional reload reg 654
Keep optional reload reg 657
Keep optional reload reg 659
Keep optional reload reg 662
Keep optional reload reg 663
Keep optional reload reg 668
Keep optional reload reg 670
Keep optional reload reg 672
Keep optional reload reg 673
Remove optional reload reg 774
  Restoring original insn:
  195: {r630:SI=r630:SI^r322:SI;clobber flags:CC;}
      REG_DEAD r322:SI
      REG_UNUSED flags:CC
  Deleting move 775
  775: r774:SI=r322:SI
      REG_DEAD r322:SI
deleting insn with uid = 775.
Remove optional reload reg 775
  Restoring original insn:
  203: {r632:SI=r632:SI^r328:SI;clobber flags:CC;}
      REG_DEAD r328:SI
      REG_UNUSED flags:CC
  Deleting move 776
  776: r775:SI=r328:SI
      REG_DEAD r328:SI
deleting insn with uid = 776.
Remove optional reload reg 776
  Restoring original insn:
  211: {r634:SI=r634:SI^r330:SI;clobber flags:CC;}
      REG_DEAD r330:SI
      REG_UNUSED flags:CC
  Deleting move 777
  777: r776:SI=r330:SI
      REG_DEAD r330:SI
deleting insn with uid = 777.
Remove optional reload reg 779
  Restoring original insn:
  269: {flags:CCZ=cmp(r113:SI-0x1,0);r113:SI=r113:SI-0x1;}
  Deleting move 780
  780: r779:SI=r113:SI
      REG_DEAD r113:SI
deleting insn with uid = 780.
  Deleting move 781
  781: r113:SI=r779:SI
      REG_DEAD r779:SI
deleting insn with uid = 781.
Remove optional reload reg 780
  Restoring original insn:
  259: {r667:SI=r667:SI^r354:SI;clobber flags:CC;}
      REG_DEAD r354:SI
      REG_UNUSED flags:CC
  Deleting move 782
  782: r780:SI=r354:SI
      REG_DEAD r354:SI
deleting insn with uid = 782.
Remove optional reload reg 781
  Restoring original insn:
  251: {r661:SI=r661:SI^r352:SI;clobber flags:CC;}
      REG_DEAD r352:SI
      REG_UNUSED flags:CC
  Deleting move 783
  783: r781:SI=r352:SI
      REG_DEAD r352:SI
deleting insn with uid = 783.
Remove optional reload reg 782
  Restoring original insn:
  243: {r656:SI=r656:SI^r346:SI;clobber flags:CC;}
      REG_DEAD r346:SI
      REG_UNUSED flags:CC
  Deleting move 784
  784: r782:SI=r346:SI
      REG_DEAD r346:SI
deleting insn with uid = 784.
Remove optional reload reg 783
  Restoring original insn:
  235: {r653:SI=r653:SI^r344:SI;clobber flags:CC;}
      REG_DEAD r344:SI
      REG_UNUSED flags:CC
  Deleting move 785
  785: r783:SI=r344:SI
      REG_DEAD r344:SI
deleting insn with uid = 785.
Remove optional reload reg 784
  Restoring original insn:
  227: {r645:SI=r645:SI^r338:SI;clobber flags:CC;}
      REG_DEAD r338:SI
      REG_UNUSED flags:CC
  Deleting move 786
  786: r784:SI=r338:SI
      REG_DEAD r338:SI
deleting insn with uid = 786.
Remove optional reload reg 785
  Restoring original insn:
  219: {r643:SI=r643:SI^r336:SI;clobber flags:CC;}
      REG_DEAD r336:SI
      REG_UNUSED flags:CC
  Deleting move 787
  787: r785:SI=r336:SI
      REG_DEAD r336:SI
deleting insn with uid = 787.
Remove optional reload reg 786
  Restoring original insn:
  189: {r192:SI=r399:SI+r522:SI;clobber flags:CC;}
      REG_DEAD r522:SI
      REG_DEAD r399:SI
      REG_UNUSED flags:CC
  Deleting move 788
  788: r786:SI=r522:SI
      REG_DEAD r522:SI
deleting insn with uid = 788.
Remove optional reload reg 787
  Restoring original insn:
  187: {r623:SI=r623:SI^r320:SI;clobber flags:CC;}
      REG_DEAD r320:SI
      REG_UNUSED flags:CC
  Deleting move 789
  789: r787:SI=r320:SI
      REG_DEAD r320:SI
deleting insn with uid = 789.
Remove optional reload reg 788
  Restoring original insn:
  179: {r620:SI=r620:SI^r531:SI;clobber flags:CC;}
      REG_DEAD r531:SI
      REG_UNUSED flags:CC
  Deleting move 790
  790: r788:SI=r531:SI
      REG_DEAD r531:SI
deleting insn with uid = 790.
Remove optional reload reg 789
  Restoring original insn:
  173: {r176:SI=r391:SI+r519:SI;clobber flags:CC;}
      REG_DEAD r519:SI
      REG_DEAD r391:SI
      REG_UNUSED flags:CC
  Deleting move 791
  791: r789:SI=r519:SI
      REG_DEAD r519:SI
deleting insn with uid = 791.
Remove optional reload reg 790
  Restoring original insn:
  171: {r613:SI=r613:SI^r312:SI;clobber flags:CC;}
      REG_DEAD r312:SI
      REG_UNUSED flags:CC
  Deleting move 792
  792: r790:SI=r312:SI
      REG_DEAD r312:SI
deleting insn with uid = 792.
Remove optional reload reg 792
  Restoring original insn:
  163: {r791:SI=r791:SI^r305:SI;clobber flags:CC;}
      REG_DEAD r305:SI
      REG_UNUSED flags:CC
  Deleting move 795
  795: r792:SI=r305:SI
      REG_DEAD r305:SI
deleting insn with uid = 795.
Remove optional reload reg 793
  Restoring original insn:
  157: {r160:SI=r383:SI+r233:SI;clobber flags:CC;}
      REG_DEAD r233:SI
      REG_DEAD r383:SI
      REG_UNUSED flags:CC
  Deleting move 796
  796: r793:SI=r233:SI
      REG_DEAD r233:SI
deleting insn with uid = 796.
Remove optional reload reg 794
  Restoring original insn:
  155: {r382:SI=r529:SI^r304:SI;clobber flags:CC;}
      REG_DEAD r304:SI
      REG_DEAD r529:SI
      REG_UNUSED flags:CC
  Deleting move 797
  797: r794:SI=r304:SI
      REG_DEAD r304:SI
deleting insn with uid = 797.
Remove optional reload reg 795
  Restoring original insn:
  141: {r144:SI=r375:SI+r217:SI;clobber flags:CC;}
      REG_DEAD r217:SI
      REG_DEAD r375:SI
      REG_UNUSED flags:CC
  Deleting move 798
  798: r795:SI=r217:SI
      REG_DEAD r217:SI
deleting insn with uid = 798.
Remove optional reload reg 796
  Restoring original insn:
  139: {r374:SI=r526:SI^r296:SI;clobber flags:CC;}
      REG_DEAD r296:SI
      REG_DEAD r526:SI
      REG_UNUSED flags:CC
  Deleting move 799
  799: r796:SI=r296:SI
      REG_DEAD r296:SI
deleting insn with uid = 799.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 269:  (0) rm  (1) 0  (2) re {*addsi_2}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 259:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 219:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*addsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*addsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 171:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 163:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*addsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*addsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*xorsi_1}

********** Pseudo live ranges #7: **********

  BB 8
   Insn 413: point = 0
   Insn 412: point = 0
   Insn 407: point = 0
   Insn 739: point = 1
   Insn 406: point = 2
   Insn 405: point = 4
   Insn 737: point = 6
   Insn 404: point = 8
   Insn 738: point = 9
   Insn 736: point = 11
   Insn 735: point = 13
   Insn 733: point = 14
   Insn 403: point = 16
   Insn 734: point = 17
   Insn 732: point = 19
   Insn 731: point = 21
   Insn 402: point = 22
   Insn 398: point = 24
   Insn 397: point = 26
   Insn 727: point = 28
   Insn 396: point = 30
   Insn 730: point = 31
   Insn 728: point = 33
   Insn 729: point = 35
   Insn 726: point = 37
   Insn 725: point = 39
   Insn 723: point = 40
   Insn 395: point = 42
   Insn 724: point = 43
   Insn 722: point = 45
   Insn 721: point = 47
   Insn 394: point = 48
   Insn 718: point = 50
   Insn 393: point = 52
   Insn 778: point = 53
   Insn 719: point = 55
   Insn 720: point = 57
   Insn 717: point = 59
   Insn 716: point = 61
   Insn 713: point = 62
   Insn 392: point = 64
   Insn 714: point = 65
   Insn 715: point = 67
   Insn 712: point = 69
   Insn 711: point = 71
   Insn 390: point = 72
   Insn 710: point = 73
   Insn 389: point = 74
   Insn 388: point = 76
   Insn 708: point = 78
   Insn 387: point = 80
   Insn 709: point = 81
   Insn 707: point = 83
   Insn 706: point = 85
   Insn 704: point = 86
   Insn 386: point = 88
   Insn 705: point = 89
   Insn 703: point = 91
   Insn 702: point = 93
   Insn 385: point = 94
   Insn 384: point = 96
   Insn 700: point = 98
   Insn 383: point = 100
   Insn 701: point = 101
   Insn 699: point = 103
   Insn 698: point = 105
   Insn 696: point = 106
   Insn 382: point = 108
   Insn 697: point = 109
   Insn 695: point = 111
   Insn 694: point = 113
   Insn 381: point = 114
   Insn 380: point = 116
   Insn 691: point = 118
   Insn 379: point = 120
   Insn 692: point = 121
   Insn 693: point = 123
   Insn 690: point = 125
   Insn 689: point = 127
   Insn 687: point = 128
   Insn 378: point = 130
   Insn 688: point = 131
   Insn 686: point = 133
   Insn 685: point = 135
   Insn 684: point = 136
   Insn 377: point = 138
   Insn 683: point = 140
   Insn 682: point = 141
   Insn 680: point = 142
   Insn 376: point = 144
   Insn 681: point = 145
   Insn 679: point = 147
   Insn 678: point = 149
   Insn 674: point = 150
   Insn 375: point = 152
   Insn 677: point = 153
   Insn 675: point = 155
   Insn 676: point = 157
   Insn 673: point = 159
   Insn 672: point = 161
   Insn 446: point = 162
   Insn 445: point = 164
   Insn 444: point = 166
   Insn 443: point = 168
   Insn 442: point = 170
   Insn 441: point = 172
   Insn 440: point = 174
   Insn 439: point = 176
  BB 6
   Insn 270: point = 179
   Insn 269: point = 179
   Insn 268: point = 179
   Insn 266: point = 179
   Insn 265: point = 181
   Insn 642: point = 183
   Insn 759: point = 185
   Insn 641: point = 186
   Insn 264: point = 188
   Insn 263: point = 190
   Insn 262: point = 192
   Insn 640: point = 194
   Insn 760: point = 196
   Insn 639: point = 197
   Insn 261: point = 199
   Insn 260: point = 201
   Insn 637: point = 203
   Insn 259: point = 205
   Insn 636: point = 206
   Insn 258: point = 208
   Insn 635: point = 210
   Insn 257: point = 212
   Insn 634: point = 212
   Insn 256: point = 214
   Insn 633: point = 216
   Insn 255: point = 218
   Insn 632: point = 220
   Insn 254: point = 222
   Insn 631: point = 222
   Insn 253: point = 224
   Insn 630: point = 226
   Insn 761: point = 227
   Insn 252: point = 229
   Insn 628: point = 231
   Insn 251: point = 233
   Insn 627: point = 234
   Insn 626: point = 236
   Insn 250: point = 238
   Insn 625: point = 238
   Insn 249: point = 240
   Insn 248: point = 242
   Insn 247: point = 244
   Insn 246: point = 246
   Insn 624: point = 248
   Insn 762: point = 250
   Insn 623: point = 251
   Insn 245: point = 253
   Insn 244: point = 255
   Insn 621: point = 257
   Insn 243: point = 259
   Insn 620: point = 260
   Insn 242: point = 262
   Insn 241: point = 264
   Insn 240: point = 266
   Insn 619: point = 268
   Insn 239: point = 270
   Insn 238: point = 272
   Insn 237: point = 274
   Insn 236: point = 276
   Insn 617: point = 278
   Insn 235: point = 280
   Insn 616: point = 281
   Insn 615: point = 283
   Insn 234: point = 285
   Insn 614: point = 285
   Insn 233: point = 287
   Insn 613: point = 289
   Insn 763: point = 291
   Insn 612: point = 292
   Insn 232: point = 294
   Insn 611: point = 296
   Insn 231: point = 298
   Insn 610: point = 298
   Insn 230: point = 300
   Insn 609: point = 302
   Insn 764: point = 304
   Insn 608: point = 305
   Insn 229: point = 307
   Insn 228: point = 309
   Insn 606: point = 311
   Insn 227: point = 313
   Insn 605: point = 314
   Insn 226: point = 316
   Insn 225: point = 318
   Insn 224: point = 320
   Insn 223: point = 322
   Insn 222: point = 324
   Insn 221: point = 326
   Insn 220: point = 328
   Insn 603: point = 330
   Insn 219: point = 332
   Insn 602: point = 333
   Insn 601: point = 335
   Insn 218: point = 337
   Insn 600: point = 337
   Insn 217: point = 339
   Insn 599: point = 341
   Insn 765: point = 343
   Insn 597: point = 344
   Insn 216: point = 346
   Insn 598: point = 347
   Insn 596: point = 349
   Insn 766: point = 351
   Insn 595: point = 352
   Insn 215: point = 354
   Insn 594: point = 354
   Insn 214: point = 356
   Insn 593: point = 358
   Insn 767: point = 360
   Insn 592: point = 361
   Insn 213: point = 363
   Insn 212: point = 365
   Insn 590: point = 367
   Insn 211: point = 369
   Insn 589: point = 370
   Insn 210: point = 372
   Insn 209: point = 374
   Insn 208: point = 376
   Insn 207: point = 378
   Insn 206: point = 380
   Insn 205: point = 382
   Insn 204: point = 384
   Insn 587: point = 386
   Insn 203: point = 388
   Insn 586: point = 389
   Insn 202: point = 391
   Insn 201: point = 393
   Insn 200: point = 395
   Insn 199: point = 397
   Insn 198: point = 399
   Insn 197: point = 401
   Insn 196: point = 403
   Insn 584: point = 405
   Insn 195: point = 407
   Insn 583: point = 408
   Insn 194: point = 410
   Insn 582: point = 412
   Insn 193: point = 414
   Insn 581: point = 414
   Insn 580: point = 416
   Insn 192: point = 418
   Insn 579: point = 418
   Insn 191: point = 420
   Insn 578: point = 422
   Insn 190: point = 424
   Insn 577: point = 424
   Insn 189: point = 426
   Insn 188: point = 428
   Insn 575: point = 430
   Insn 768: point = 431
   Insn 573: point = 433
   Insn 187: point = 435
   Insn 572: point = 436
   Insn 186: point = 438
   Insn 571: point = 440
   Insn 185: point = 442
   Insn 570: point = 442
   Insn 184: point = 444
   Insn 183: point = 446
   Insn 182: point = 448
   Insn 181: point = 450
   Insn 180: point = 452
   Insn 568: point = 454
   Insn 179: point = 456
   Insn 567: point = 457
   Insn 178: point = 459
   Insn 566: point = 461
   Insn 177: point = 463
   Insn 565: point = 463
   Insn 564: point = 465
   Insn 176: point = 467
   Insn 563: point = 467
   Insn 175: point = 469
   Insn 562: point = 471
   Insn 174: point = 473
   Insn 561: point = 473
   Insn 173: point = 475
   Insn 172: point = 477
   Insn 559: point = 479
   Insn 769: point = 480
   Insn 557: point = 482
   Insn 171: point = 484
   Insn 556: point = 485
   Insn 170: point = 487
   Insn 169: point = 489
   Insn 555: point = 491
   Insn 770: point = 493
   Insn 554: point = 494
   Insn 168: point = 496
   Insn 167: point = 498
   Insn 166: point = 500
   Insn 165: point = 502
   Insn 164: point = 504
   Insn 794: point = 506
   Insn 163: point = 508
   Insn 793: point = 509
   Insn 162: point = 511
   Insn 552: point = 513
   Insn 161: point = 515
   Insn 551: point = 515
   Insn 550: point = 517
   Insn 160: point = 519
   Insn 549: point = 519
   Insn 159: point = 521
   Insn 158: point = 523
   Insn 157: point = 525
   Insn 156: point = 527
   Insn 155: point = 529
   Insn 546: point = 531
   Insn 154: point = 533
   Insn 545: point = 533
   Insn 153: point = 535
   Insn 544: point = 537
   Insn 773: point = 539
   Insn 543: point = 540
   Insn 152: point = 542
   Insn 151: point = 544
   Insn 150: point = 546
   Insn 149: point = 548
   Insn 148: point = 550
   Insn 147: point = 552
   Insn 146: point = 554
   Insn 145: point = 556
   Insn 144: point = 558
   Insn 143: point = 560
   Insn 542: point = 562
   Insn 142: point = 564
   Insn 541: point = 564
   Insn 141: point = 566
   Insn 140: point = 568
   Insn 139: point = 570
  BB 7
   Insn 422: point = 573
   Insn 671: point = 573
   Insn 368: point = 575
   Insn 670: point = 577
   Insn 365: point = 579
   Insn 669: point = 581
   Insn 363: point = 583
   Insn 362: point = 584
   Insn 668: point = 585
   Insn 359: point = 587
   Insn 358: point = 588
   Insn 667: point = 589
   Insn 356: point = 591
   Insn 666: point = 593
   Insn 353: point = 595
   Insn 665: point = 597
   Insn 351: point = 599
   Insn 350: point = 600
   Insn 664: point = 601
   Insn 347: point = 603
   Insn 346: point = 604
   Insn 663: point = 605
   Insn 344: point = 607
   Insn 662: point = 609
   Insn 341: point = 611
   Insn 661: point = 613
   Insn 339: point = 615
   Insn 338: point = 616
   Insn 660: point = 617
   Insn 335: point = 619
   Insn 334: point = 620
   Insn 659: point = 621
   Insn 332: point = 623
   Insn 658: point = 625
   Insn 329: point = 627
   Insn 657: point = 629
   Insn 327: point = 631
   Insn 326: point = 632
   Insn 656: point = 633
   Insn 323: point = 635
   Insn 322: point = 636
   Insn 655: point = 637
   Insn 320: point = 639
   Insn 654: point = 641
   Insn 317: point = 643
   Insn 653: point = 645
   Insn 315: point = 647
   Insn 314: point = 648
   Insn 652: point = 649
   Insn 311: point = 651
   Insn 310: point = 652
   Insn 651: point = 653
   Insn 308: point = 655
   Insn 650: point = 657
   Insn 305: point = 659
   Insn 649: point = 661
   Insn 303: point = 663
   Insn 302: point = 664
   Insn 648: point = 665
   Insn 299: point = 667
   Insn 298: point = 668
   Insn 779: point = 669
   Insn 296: point = 671
   Insn 647: point = 673
   Insn 293: point = 675
   Insn 646: point = 677
   Insn 291: point = 679
   Insn 290: point = 680
   Insn 287: point = 681
   Insn 286: point = 682
   Insn 284: point = 683
   Insn 281: point = 685
   Insn 645: point = 687
   Insn 279: point = 689
   Insn 278: point = 690
   Insn 277: point = 691
   Insn 275: point = 692
   Insn 274: point = 693
  BB 5
   Insn 438: point = 695
   Insn 437: point = 697
   Insn 436: point = 699
   Insn 435: point = 701
   Insn 434: point = 703
   Insn 433: point = 705
   Insn 432: point = 707
   Insn 431: point = 709
   Insn 430: point = 711
   Insn 429: point = 713
   Insn 428: point = 715
   Insn 427: point = 717
   Insn 426: point = 719
   Insn 425: point = 721
   Insn 424: point = 723
   Insn 59: point = 725
   Insn 58: point = 726
   Insn 57: point = 727
   Insn 56: point = 728
   Insn 55: point = 729
   Insn 54: point = 730
   Insn 53: point = 731
   Insn 52: point = 732
   Insn 51: point = 733
   Insn 50: point = 734
   Insn 49: point = 735
   Insn 48: point = 736
   Insn 47: point = 737
   Insn 46: point = 738
   Insn 45: point = 739
   Insn 44: point = 740
   Insn 43: point = 741
   Insn 42: point = 742
   Insn 538: point = 744
   Insn 41: point = 745
   Insn 537: point = 747
   Insn 40: point = 748
   Insn 39: point = 749
   Insn 38: point = 750
   Insn 37: point = 751
   Insn 36: point = 752
   Insn 536: point = 754
   Insn 35: point = 755
   Insn 535: point = 757
   Insn 137: point = 758
  BB 3
   Insn 420: point = 760
   Insn 534: point = 760
   Insn 134: point = 762
   Insn 533: point = 762
   Insn 532: point = 764
   Insn 133: point = 766
   Insn 531: point = 766
   Insn 132: point = 767
   Insn 530: point = 769
   Insn 529: point = 770
   Insn 131: point = 772
   Insn 528: point = 772
   Insn 527: point = 774
   Insn 130: point = 776
   Insn 526: point = 776
   Insn 129: point = 777
   Insn 525: point = 779
  BB 4
   Insn 34: point = 781
   Insn 33: point = 782
   Insn 32: point = 783
   Insn 31: point = 784
  BB 2
   Insn 127: point = 786
   Insn 126: point = 786
   Insn 524: point = 787
   Insn 523: point = 788
   Insn 125: point = 790
   Insn 522: point = 790
   Insn 740: point = 792
   Insn 521: point = 793
   Insn 124: point = 795
   Insn 520: point = 797
   Insn 519: point = 798
   Insn 123: point = 800
   Insn 518: point = 800
   Insn 741: point = 802
   Insn 517: point = 803
   Insn 122: point = 805
   Insn 516: point = 807
   Insn 515: point = 808
   Insn 121: point = 810
   Insn 514: point = 810
   Insn 742: point = 812
   Insn 513: point = 813
   Insn 120: point = 815
   Insn 512: point = 817
   Insn 511: point = 818
   Insn 119: point = 820
   Insn 510: point = 820
   Insn 743: point = 822
   Insn 509: point = 823
   Insn 118: point = 825
   Insn 508: point = 827
   Insn 507: point = 828
   Insn 117: point = 830
   Insn 506: point = 832
   Insn 505: point = 833
   Insn 116: point = 835
   Insn 504: point = 837
   Insn 503: point = 838
   Insn 115: point = 840
   Insn 502: point = 842
   Insn 501: point = 843
   Insn 114: point = 845
   Insn 500: point = 847
   Insn 499: point = 848
   Insn 113: point = 850
   Insn 498: point = 852
   Insn 497: point = 853
   Insn 112: point = 855
   Insn 496: point = 857
   Insn 495: point = 858
   Insn 111: point = 860
   Insn 494: point = 862
   Insn 493: point = 863
   Insn 110: point = 865
   Insn 492: point = 867
   Insn 109: point = 868
   Insn 491: point = 869
   Insn 744: point = 871
   Insn 490: point = 872
   Insn 108: point = 874
   Insn 489: point = 874
   Insn 107: point = 876
   Insn 106: point = 878
   Insn 488: point = 879
   Insn 745: point = 881
   Insn 487: point = 882
   Insn 105: point = 884
   Insn 486: point = 884
   Insn 104: point = 886
   Insn 103: point = 887
   Insn 485: point = 888
   Insn 746: point = 890
   Insn 484: point = 891
   Insn 102: point = 893
   Insn 483: point = 893
   Insn 101: point = 895
   Insn 100: point = 896
   Insn 482: point = 897
   Insn 747: point = 899
   Insn 481: point = 900
   Insn 99: point = 902
   Insn 480: point = 902
   Insn 98: point = 904
   Insn 97: point = 905
   Insn 479: point = 906
   Insn 748: point = 908
   Insn 478: point = 909
   Insn 96: point = 911
   Insn 477: point = 911
   Insn 95: point = 913
   Insn 94: point = 914
   Insn 476: point = 915
   Insn 749: point = 917
   Insn 475: point = 918
   Insn 93: point = 920
   Insn 474: point = 920
   Insn 92: point = 922
   Insn 91: point = 923
   Insn 473: point = 924
   Insn 750: point = 926
   Insn 472: point = 927
   Insn 90: point = 929
   Insn 471: point = 929
   Insn 89: point = 931
   Insn 88: point = 932
   Insn 470: point = 933
   Insn 751: point = 935
   Insn 469: point = 936
   Insn 87: point = 938
   Insn 468: point = 938
   Insn 86: point = 940
   Insn 85: point = 941
   Insn 467: point = 942
   Insn 752: point = 944
   Insn 466: point = 945
   Insn 84: point = 947
   Insn 465: point = 947
   Insn 83: point = 949
   Insn 82: point = 950
   Insn 464: point = 951
   Insn 753: point = 953
   Insn 463: point = 954
   Insn 81: point = 956
   Insn 462: point = 956
   Insn 80: point = 958
   Insn 79: point = 959
   Insn 461: point = 960
   Insn 754: point = 962
   Insn 460: point = 963
   Insn 78: point = 965
   Insn 459: point = 965
   Insn 77: point = 967
   Insn 76: point = 968
   Insn 458: point = 969
   Insn 755: point = 971
   Insn 457: point = 972
   Insn 75: point = 974
   Insn 456: point = 974
   Insn 74: point = 976
   Insn 73: point = 977
   Insn 455: point = 978
   Insn 756: point = 980
   Insn 454: point = 981
   Insn 72: point = 983
   Insn 453: point = 983
   Insn 71: point = 985
   Insn 70: point = 986
   Insn 452: point = 987
   Insn 757: point = 989
   Insn 451: point = 990
   Insn 69: point = 992
   Insn 450: point = 992
   Insn 68: point = 994
   Insn 67: point = 995
   Insn 449: point = 995
   Insn 66: point = 997
   Insn 448: point = 997
   Insn 65: point = 999
   Insn 64: point = 1000
   Insn 63: point = 1000
   Insn 62: point = 1002
   Insn 29: point = 1003
   Insn 28: point = 1004
 r113: [179..741]
 r128: [84..863]
 r129: [82..858]
 r130: [92..853]
 r131: [90..848]
 r132: [12..843]
 r133: [10..838]
 r134: [20..833]
 r135: [18..828]
 r136: [104..822]
 r137: [102..812]
 r138: [112..802]
 r139: [110..792]
 r155: [269..539]
 r157: [228..531]
 r171: [217..493]
 r206: [419..788] [132..291]
 r217: [567..755] [148..360]
 r219: [781..784] [425..760] [66..351]
 r220: [468..798] [134..343]
 r233: [526..752] [146..304]
 r238: [481..745] [46..283]
 r256: [432..742] [44..236]
 r274: [520..808] [122..185]
 r296: [695..725] [571..687]
 r304: [695..727] [530..677]
 r305: [695..980] [508..673]
 r309: [695..971] [486..665]
 r312: [695..729] [484..661]
 r313: [695..962] [458..657]
 r317: [695..953] [437..649]
 r320: [695..731] [435..645]
 r321: [695..944] [409..641]
 r322: [695..732] [407..637]
 r325: [695..935] [390..633]
 r328: [695..733] [388..629]
 r329: [695..926] [371..625]
 r330: [695..734] [369..621]
 r333: [695..917] [334..617]
 r336: [695..735] [332..613]
 r337: [695..908] [315..609]
 r338: [695..736] [313..605]
 r341: [695..899] [282..601]
 r344: [695..737] [280..597]
 r345: [695..890] [261..593]
 r346: [695..738] [259..589]
 r349: [695..881] [235..585]
 r352: [695..739] [233..581]
 r353: [695..871] [207..577]
 r354: [695..740] [205..573]
 r519: [476..719] [173..250]
 r522: [427..715] [167..196]
 r530: [695..701] [510..669]
 r531: [695..699] [456..653]
 r703: [158..159]
 r704: [154..155]
 r712: [124..125]
 r724: [68..69]
 r727: [58..59]
 r732: [36..37]
 r733: [32..33]
 r777: [54..55]
Compressing live ranges: from 1004 to 34 - 3%
Ranges after the compression:
 r113: [16..31]
 r128: [10..33]
 r129: [10..33]
 r130: [10..33]
 r131: [10..33]
 r132: [0..33]
 r133: [0..33]
 r134: [0..33]
 r135: [0..33]
 r136: [10..33]
 r137: [10..33]
 r138: [10..33]
 r139: [10..33]
 r155: [20..27]
 r157: [18..27]
 r171: [18..25]
 r206: [24..33] [12..21]
 r217: [28..31] [12..23]
 r219: [8..33]
 r220: [12..33]
 r233: [26..31] [12..21]
 r238: [24..31] [4..21]
 r256: [24..31] [4..19]
 r274: [26..33] [10..17]
 r296: [28..31]
 r304: [26..31]
 r305: [26..33]
 r309: [24..33]
 r312: [24..31]
 r313: [24..33]
 r317: [24..33]
 r320: [24..31]
 r321: [24..33]
 r322: [24..31]
 r325: [24..33]
 r328: [24..31]
 r329: [24..33]
 r330: [24..31]
 r333: [22..33]
 r336: [22..31]
 r337: [22..33]
 r338: [22..31]
 r341: [20..33]
 r344: [20..31]
 r345: [20..33]
 r346: [20..31]
 r349: [18..33]
 r352: [18..31]
 r353: [18..33]
 r354: [18..31]
 r519: [24..31] [16..19]
 r522: [24..31] [16..17]
 r530: [26..31]
 r531: [24..31]
 r703: [14..15]
 r704: [12..13]
 r712: [10..11]
 r724: [8..9]
 r727: [6..7]
 r732: [2..3]
 r733: [0..1]
 r777: [4..5]

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)

Cands:
0 (nop=0, remat_regno=305, reload_regno=-1):
(insn 756 454 455 2 (set (reg:SI 305 [ D.5786 ])
                    (reg:SI 755 [orig:305 D.5786 ] [305])) 90 {*movsi_internal}
                 (nil))
1 (nop=0, remat_regno=309, reload_regno=-1):
(insn 755 457 458 2 (set (reg:SI 309 [ D.5786 ])
                    (reg:SI 754 [orig:309 D.5786 ] [309])) 90 {*movsi_internal}
                 (nil))
2 (nop=0, remat_regno=313, reload_regno=-1):
(insn 754 460 461 2 (set (reg:SI 313 [ D.5786 ])
                    (reg:SI 753 [orig:313 D.5786 ] [313])) 90 {*movsi_internal}
                 (nil))
3 (nop=0, remat_regno=317, reload_regno=-1):
(insn 753 463 464 2 (set (reg:SI 317 [ D.5786 ])
                    (reg:SI 752 [orig:317 D.5786 ] [317])) 90 {*movsi_internal}
                 (nil))
4 (nop=0, remat_regno=321, reload_regno=-1):
(insn 752 466 467 2 (set (reg:SI 321 [ D.5786 ])
                    (reg:SI 751 [orig:321 D.5786 ] [321])) 90 {*movsi_internal}
                 (nil))
5 (nop=0, remat_regno=325, reload_regno=-1):
(insn 751 469 470 2 (set (reg:SI 325 [ D.5786 ])
                    (reg:SI 750 [orig:325 D.5786 ] [325])) 90 {*movsi_internal}
                 (nil))
6 (nop=0, remat_regno=329, reload_regno=-1):
(insn 750 472 473 2 (set (reg:SI 329 [ D.5786 ])
                    (reg:SI 749 [orig:329 D.5786 ] [329])) 90 {*movsi_internal}
                 (nil))
7 (nop=0, remat_regno=333, reload_regno=-1):
(insn 749 475 476 2 (set (reg:SI 333 [ D.5786 ])
                    (reg:SI 748 [orig:333 D.5786 ] [333])) 90 {*movsi_internal}
                 (nil))
8 (nop=0, remat_regno=337, reload_regno=-1):
(insn 748 478 479 2 (set (reg:SI 337 [ D.5786 ])
                    (reg:SI 747 [orig:337 D.5786 ] [337])) 90 {*movsi_internal}
                 (nil))
9 (nop=0, remat_regno=341, reload_regno=-1):
(insn 747 481 482 2 (set (reg:SI 341 [ D.5786 ])
                    (reg:SI 746 [orig:341 D.5786 ] [341])) 90 {*movsi_internal}
                 (nil))
10 (nop=0, remat_regno=345, reload_regno=-1):
(insn 746 484 485 2 (set (reg:SI 345 [ D.5786 ])
                    (reg:SI 745 [orig:345 D.5786 ] [345])) 90 {*movsi_internal}
                 (nil))
11 (nop=0, remat_regno=349, reload_regno=-1):
(insn 745 487 488 2 (set (reg:SI 349 [ D.5786 ])
                    (reg:SI 744 [orig:349 D.5786 ] [349])) 90 {*movsi_internal}
                 (nil))
12 (nop=0, remat_regno=353, reload_regno=-1):
(insn 744 490 491 2 (set (reg:SI 353 [ D.5786 ])
                    (reg:SI 743 [orig:353 D.5786 ] [353])) 90 {*movsi_internal}
                 (nil))
13 (nop=0, remat_regno=136, reload_regno=-1):
(insn 743 509 510 2 (set (reg:SI 136 [ D.5781 ])
                    (reg:SI 742 [orig:136 D.5781 ] [136])) blake_ref.c:58 90 {*movsi_internal}
                 (nil))
14 (nop=0, remat_regno=137, reload_regno=-1):
(insn 742 513 514 2 (set (reg:SI 137 [ D.5781 ])
                    (reg:SI 741 [orig:137 D.5781 ] [137])) blake_ref.c:59 90 {*movsi_internal}
                 (nil))
15 (nop=0, remat_regno=138, reload_regno=-1):
(insn 741 517 518 2 (set (reg:SI 138 [ D.5781 ])
                    (reg:SI 740 [orig:138 D.5781 ] [138])) blake_ref.c:60 90 {*movsi_internal}
                 (nil))
16 (nop=0, remat_regno=139, reload_regno=-1):
(insn 740 521 522 2 (set (reg:SI 139 [ D.5781 ])
                    (reg:SI 739 [orig:139 D.5781 ] [139])) blake_ref.c:61 90 {*movsi_internal}
                 (nil))
17 (nop=0, remat_regno=219, reload_regno=-1):
(insn 31 417 32 4 (set (reg:SI 219 [ v$15 ])
                    (const_int -330404727 [0xffffffffec4e6c89])) blake_ref.c:66 90 {*movsi_internal}
                 (nil))
18 (nop=0, remat_regno=113, reload_regno=-1):
(insn 43 42 44 5 (set (reg:SI 113 [ D.5779 ])
                    (const_int 14 [0xe])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int 14 [0xe])
                    (nil)))
19 (nop=0, remat_regno=354, reload_regno=-1):
(insn 44 43 45 5 (set (reg:SI 354 [ D.5787 ])
                    (const_int 1065670069 [0x3f84d5b5])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int 1065670069 [0x3f84d5b5])
                    (nil)))
20 (nop=0, remat_regno=352, reload_regno=-1):
(insn 45 44 46 5 (set (reg:SI 352 [ D.5787 ])
                    (const_int -1253635817 [0xffffffffb5470917])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int -1253635817 [0xffffffffb5470917])
                    (nil)))
21 (nop=0, remat_regno=346, reload_regno=-1):
(insn 46 45 47 5 (set (reg:SI 346 [ D.5787 ])
                    (const_int -1062458953 [0xffffffffc0ac29b7])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int -1062458953 [0xffffffffc0ac29b7])
                    (nil)))
22 (nop=0, remat_regno=344, reload_regno=-1):
(insn 47 46 48 5 (set (reg:SI 344 [ D.5787 ])
                    (const_int -914599715 [0xffffffffc97c50dd])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int -914599715 [0xffffffffc97c50dd])
                    (nil)))
23 (nop=0, remat_regno=338, reload_regno=-1):
(insn 48 47 49 5 (set (reg:SI 338 [ D.5787 ])
                    (const_int -1101764913 [0xffffffffbe5466cf])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int -1101764913 [0xffffffffbe5466cf])
                    (nil)))
24 (nop=0, remat_regno=336, reload_regno=-1):
(insn 49 48 50 5 (set (reg:SI 336 [ D.5787 ])
                    (const_int 887688300 [0x34e90c6c])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int 887688300 [0x34e90c6c])
                    (nil)))
25 (nop=0, remat_regno=330, reload_regno=-1):
(insn 50 49 51 5 (set (reg:SI 330 [ D.5787 ])
                    (const_int 1160258022 [0x452821e6])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int 1160258022 [0x452821e6])
                    (nil)))
26 (nop=0, remat_regno=328, reload_regno=-1):
(insn 51 50 52 5 (set (reg:SI 328 [ D.5787 ])
                    (const_int 953160567 [0x38d01377])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int 953160567 [0x38d01377])
                    (nil)))
27 (nop=0, remat_regno=322, reload_regno=-1):
(insn 52 51 53 5 (set (reg:SI 322 [ D.5787 ])
                    (const_int 137296536 [0x82efa98])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int 137296536 [0x82efa98])
                    (nil)))
28 (nop=0, remat_regno=320, reload_regno=-1):
(insn 53 52 54 5 (set (reg:SI 320 [ D.5787 ])
                    (const_int -330404727 [0xffffffffec4e6c89])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int -330404727 [0xffffffffec4e6c89])
                    (nil)))
29 (nop=0, remat_regno=312, reload_regno=-1):
(insn 55 54 56 5 (set (reg:SI 312 [ D.5787 ])
                    (const_int 698298832 [0x299f31d0])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int 698298832 [0x299f31d0])
                    (nil)))
30 (nop=0, remat_regno=304, reload_regno=-1):
(insn 57 56 58 5 (set (reg:SI 304 [ D.5787 ])
                    (const_int 57701188 [0x3707344])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int 57701188 [0x3707344])
                    (nil)))
31 (nop=0, remat_regno=296, reload_regno=-1):
(insn 59 758 424 5 (set (reg:SI 296 [ D.5787 ])
                    (const_int -2052912941 [0xffffffff85a308d3])) blake_ref.c:63 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int -2052912941 [0xffffffff85a308d3])
                    (nil)))
32 (nop=0, remat_regno=155, reload_regno=-1):
(insn 773 774 802 6 (set (reg:SI 155 [ D.5781 ])
                    (reg:SI 773 [orig:155 D.5781 ] [155])) blake_ref.c:79 90 {*movsi_internal}
                 (nil))
33 (nop=0, remat_regno=171, reload_regno=-1):
(insn 770 771 800 6 (set (reg:SI 171 [ D.5781 ])
                    (reg:SI 770 [orig:171 D.5781 ] [171])) blake_ref.c:80 90 {*movsi_internal}
                 (nil))
34 (nop=0, remat_regno=217, reload_regno=-1):
(insn 767 592 593 6 (set (reg:SI 217 [ v$0 ])
                    (reg:SI 766 [orig:217 v$0 ] [217])) blake_ref.c:85 90 {*movsi_internal}
                 (nil))
35 (nop=0, remat_regno=219, reload_regno=-1):
(insn 766 595 596 6 (set (reg:SI 219 [ v$15 ])
                    (reg:SI 765 [orig:219 v$15 ] [219])) blake_ref.c:85 90 {*movsi_internal}
                 (nil))
36 (nop=0, remat_regno=220, reload_regno=-1):
(insn 765 597 599 6 (set (reg:SI 220 [ v$10 ])
                    (reg:SI 764 [orig:220 v$10 ] [220])) blake_ref.c:85 90 {*movsi_internal}
                 (nil))
37 (nop=0, remat_regno=233, reload_regno=-1):
(insn 764 608 609 6 (set (reg:SI 233 [ v$1 ])
                    (reg:SI 763 [orig:233 v$1 ] [233])) blake_ref.c:86 90 {*movsi_internal}
                 (nil))
38 (nop=0, remat_regno=206, reload_regno=-1):
(insn 763 612 613 6 (set (reg:SI 206 [ v$11 ])
                    (reg:SI 762 [orig:206 v$11 ] [206])) blake_ref.c:86 90 {*movsi_internal}
                 (nil))
39 (nop=0, remat_regno=519, reload_regno=-1):
(insn 762 623 624 6 (set (reg:SI 519 [orig:250 v$2 ] [250])
                    (reg:SI 761 [orig:250 v$2 ] [250])) blake_ref.c:87 90 {*movsi_internal}
                 (nil))
40 (nop=0, remat_regno=522, reload_regno=-1):
(insn 760 639 640 6 (set (reg:SI 522 [orig:270 v$3 ] [270])
                    (reg:SI 759 [orig:270 v$3 ] [270])) blake_ref.c:88 90 {*movsi_internal}
                 (nil))
41 (nop=0, remat_regno=274, reload_regno=-1):
(insn 759 641 642 6 (set (reg:SI 274 [ v$9 ])
                    (reg:SI 758 [orig:274 v$9 ] [274])) blake_ref.c:88 90 {*movsi_internal}
                 (nil))

BB 2:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 220 254 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353
  changed regs
  dead regs: 1 [dx] 2 [cx] 16 [argp] 17 [flags] 20 [frame] 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756
  livein cands in BB 2:

       17   18   19   20   21   22   23   24   25   26   27
       28   29   30   31

BB 3:
  register live in: 128 129 130 131 132 133 134 135 136 137 138 139 206 220 254 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 219 220 235 252 254 273 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353
  changed regs: 141 142 219 235 252 273 590 591 592 593 594 595
  dead regs: 16 [argp] 141 142 590 591 592 593 594 595
  livein cands in BB 3:

       17   18   19   20   21   22   23   24   25   26   27
       28   29   30   31

BB 4:
  register live in: 128 129 130 131 132 133 134 135 136 137 138 139 206 220 254 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 219 220 235 252 254 273 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353
  changed regs: 219 235 252 273
  dead regs:
  cands generated in BB 4:

       17
  livein cands in BB 4:

       17   18   19   20   21   22   23   24   25   26   27
       28   29   30   31
  pavout cands in BB 4:

       17
  avout cands in BB 4:

       17

BB 5:
  register live in: 128 129 130 131 132 133 134 135 136 137 138 139 206 219 220 235 252 254 273 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 233 238 256 274 296 304 305 309 312 313 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531
  changed regs: 113 217 222 233 238 250 256 270 276 281 296 304 306 312 314 320 322 328 330 336 338 344 346 352 354 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 596 597 598 599 757
  dead regs: 222 235 250 252 254 270 273 276 281 293 297 301 306 314 596 597 598 599 757
  cands generated in BB 5:

       18   19   20   21   22   23   24   25   26   27   28
       29   30   31
  livein cands in BB 5:

       17   18   19   20   21   22   23   24   25   26   27
       28   29   30   31
  pavin cands in BB 5:

       17
  pavout cands in BB 5:

       17   18   19   20   21   22   23   24   25   26   27
       28   29   30   31
  avout cands in BB 5:

       18   19   20   21   22   23   24   25   26   27   28
       29   30   31

BB 6:
  register live in: 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 233 238 256 274 296 304 305 309 312 313 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 233 238 256 274 517 518 519 520 521 522 523 524 525
  changed regs
  dead regs: 17 [flags
  livein cands in BB 6:

       17   18   19   20   21   22   23   24   25   26   27
       28   29   30   31
  pavin cands in BB 6:

       17   18   19   20   21   22   23   24   25   26   27
       28   29   30   31

BB 7:
  register live in: 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 233 238 256 274 517 518 519 520 521 522 523 524 525
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 233 238 256 274 296 304 305 309 312 313 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531
  changed regs: 296 304 305 309 312 313 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354 438 439 440 444 446 450 452 456 458 462 464 468 470 474 476 480 482 526 527 528 529 530 531 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 778
  dead regs: 20 [frame] 438 439 440 444 446 450 452 456 458 462 464 468 470 474 476 480 482 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 778
  livein cands in BB 7:

       17   18   19   20   21   22   23   24   25   26   27
       28   29   30   31

BB 8:
  register live in: 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 233 238 256 274 517 518 519 520 521 522 523 524
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 0 [ax] 222 235 250 252 254 270 273 276 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 511 512 513 514 515 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 777
  dead regs: 16 [argp] 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 511 512 513 514 515 517 518 519 520 521 522 523 524 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 777
  livein cands in BB 8:

       17   18   19   20   21   22   23   24   25   26   27
       28   29   30   31
  Slot 0 regnos (width = 4):	 217	 777	 733	 732	 727	 724	 712
  Slot 1 regnos (width = 4):	 233
  Slot 2 regnos (width = 4):	 238
  Slot 3 regnos (width = 4):	 256
  Slot 4 regnos (width = 4):	 519	 704	 703
  Slot 5 regnos (width = 4):	 522
  Slot 6 regnos (width = 4):	 206
  Slot 7 regnos (width = 4):	 219
  Slot 8 regnos (width = 4):	 220
  Slot 9 regnos (width = 4):	 274	 171
  Slot 10 regnos (width = 4):	 296	 155
  Slot 11 regnos (width = 4):	 304
  Slot 12 regnos (width = 4):	 312
  Slot 13 regnos (width = 4):	 320
  Slot 14 regnos (width = 4):	 322
  Slot 15 regnos (width = 4):	 328
  Slot 16 regnos (width = 4):	 330
  Slot 17 regnos (width = 4):	 336
  Slot 18 regnos (width = 4):	 338
  Slot 19 regnos (width = 4):	 344
  Slot 20 regnos (width = 4):	 346
  Slot 21 regnos (width = 4):	 352
  Slot 22 regnos (width = 4):	 354
  Slot 23 regnos (width = 4):	 530
  Slot 24 regnos (width = 4):	 531
  Slot 25 regnos (width = 4):	 305
  Slot 26 regnos (width = 4):	 309
  Slot 27 regnos (width = 4):	 313
  Slot 28 regnos (width = 4):	 317
  Slot 29 regnos (width = 4):	 321
  Slot 30 regnos (width = 4):	 325
  Slot 31 regnos (width = 4):	 329
  Slot 32 regnos (width = 4):	 333
  Slot 33 regnos (width = 4):	 337
  Slot 34 regnos (width = 4):	 341
  Slot 35 regnos (width = 4):	 345
  Slot 36 regnos (width = 4):	 349
  Slot 37 regnos (width = 4):	 353
  Slot 38 regnos (width = 4):	 157
  Slot 39 regnos (width = 4):	 113
  Slot 40 regnos (width = 4):	 128
  Slot 41 regnos (width = 4):	 129
  Slot 42 regnos (width = 4):	 130
  Slot 43 regnos (width = 4):	 131
  Slot 44 regnos (width = 4):	 132
  Slot 45 regnos (width = 4):	 133
  Slot 46 regnos (width = 4):	 134
  Slot 47 regnos (width = 4):	 135
  Slot 48 regnos (width = 4):	 136
  Slot 49 regnos (width = 4):	 137
  Slot 50 regnos (width = 4):	 138
  Slot 51 regnos (width = 4):	 139
Changing spilled pseudos to memory in insn #756
Changing spilled pseudos to memory in insn #755
Changing spilled pseudos to memory in insn #754
Changing spilled pseudos to memory in insn #753
Changing spilled pseudos to memory in insn #752
Changing spilled pseudos to memory in insn #751
Changing spilled pseudos to memory in insn #750
Changing spilled pseudos to memory in insn #749
Changing spilled pseudos to memory in insn #748
Changing spilled pseudos to memory in insn #747
Changing spilled pseudos to memory in insn #746
Changing spilled pseudos to memory in insn #745
Changing spilled pseudos to memory in insn #744
Changing spilled pseudos to memory in insn #493
Changing spilled pseudos to memory in insn #495
Changing spilled pseudos to memory in insn #497
Changing spilled pseudos to memory in insn #499
Changing spilled pseudos to memory in insn #501
Changing spilled pseudos to memory in insn #503
Changing spilled pseudos to memory in insn #505
Changing spilled pseudos to memory in insn #507
Changing spilled pseudos to memory in insn #743
Changing spilled pseudos to memory in insn #742
Changing spilled pseudos to memory in insn #515
Changing spilled pseudos to memory in insn #741
Changing spilled pseudos to memory in insn #519
Changing spilled pseudos to memory in insn #740
Changing spilled pseudos to memory in insn #523
Changing spilled pseudos to memory in insn #534
Changing spilled pseudos to memory in insn #31
Changing spilled pseudos to memory in insn #535
Changing spilled pseudos to memory in insn #35
Changing spilled pseudos to memory in insn #536
Changing spilled pseudos to memory in insn #36
Changing spilled pseudos to memory in insn #37
Changing spilled pseudos to memory in insn #38
Changing spilled pseudos to memory in insn #39
Changing spilled pseudos to memory in insn #40
Changing spilled pseudos to memory in insn #537
Changing spilled pseudos to memory in insn #41
Changing spilled pseudos to memory in insn #538
Changing spilled pseudos to memory in insn #42
Changing spilled pseudos to memory in insn #43
Changing spilled pseudos to memory in insn #44
Changing spilled pseudos to memory in insn #45
Changing spilled pseudos to memory in insn #46
Changing spilled pseudos to memory in insn #47
Changing spilled pseudos to memory in insn #48
Changing spilled pseudos to memory in insn #49
Changing spilled pseudos to memory in insn #50
Changing spilled pseudos to memory in insn #51
Changing spilled pseudos to memory in insn #52
Changing spilled pseudos to memory in insn #53
Changing spilled pseudos to memory in insn #55
Changing spilled pseudos to memory in insn #57
Changing spilled pseudos to memory in insn #59
Changing spilled pseudos to memory in insn #426
Changing spilled pseudos to memory in insn #428
Changing spilled pseudos to memory in insn #435
Changing spilled pseudos to memory in insn #436
Changing spilled pseudos to memory in insn #139
Changing spilled pseudos to memory in insn #141
Changing spilled pseudos to memory in insn #773
Changing spilled pseudos to memory in insn #546
Changing spilled pseudos to memory in insn #155
Changing spilled pseudos to memory in insn #157
Changing spilled pseudos to memory in insn #549
Changing spilled pseudos to memory in insn #793
Changing spilled pseudos to memory in insn #163
Changing spilled pseudos to memory in insn #770
Changing spilled pseudos to memory in insn #556
Changing spilled pseudos to memory in insn #171
Changing spilled pseudos to memory in insn #769
Changing spilled pseudos to memory in insn #173
Changing spilled pseudos to memory in insn #563
Changing spilled pseudos to memory in insn #567
Changing spilled pseudos to memory in insn #179
Changing spilled pseudos to memory in insn #572
Changing spilled pseudos to memory in insn #187
Changing spilled pseudos to memory in insn #768
Changing spilled pseudos to memory in insn #189
Changing spilled pseudos to memory in insn #577
Changing spilled pseudos to memory in insn #579
Changing spilled pseudos to memory in insn #583
Changing spilled pseudos to memory in insn #195
Changing spilled pseudos to memory in insn #586
Changing spilled pseudos to memory in insn #203
Changing spilled pseudos to memory in insn #589
Changing spilled pseudos to memory in insn #211
Changing spilled pseudos to memory in insn #767
Changing spilled pseudos to memory in insn #766
Changing spilled pseudos to memory in insn #765
Changing spilled pseudos to memory in insn #602
Changing spilled pseudos to memory in insn #219
Changing spilled pseudos to memory in insn #605
Changing spilled pseudos to memory in insn #227
Changing spilled pseudos to memory in insn #764
Changing spilled pseudos to memory in insn #763
Changing spilled pseudos to memory in insn #615
Changing spilled pseudos to memory in insn #616
Changing spilled pseudos to memory in insn #235
Changing spilled pseudos to memory in insn #619
Changing spilled pseudos to memory in insn #620
Changing spilled pseudos to memory in insn #243
Changing spilled pseudos to memory in insn #762
Changing spilled pseudos to memory in insn #626
Changing spilled pseudos to memory in insn #627
Changing spilled pseudos to memory in insn #251
Changing spilled pseudos to memory in insn #761
Changing spilled pseudos to memory in insn #633
Changing spilled pseudos to memory in insn #636
Changing spilled pseudos to memory in insn #259
Changing spilled pseudos to memory in insn #760
Changing spilled pseudos to memory in insn #759
Changing spilled pseudos to memory in insn #269
Changing spilled pseudos to memory in insn #645
Changing spilled pseudos to memory in insn #646
Changing spilled pseudos to memory in insn #647
Changing spilled pseudos to memory in insn #779
Changing spilled pseudos to memory in insn #648
Changing spilled pseudos to memory in insn #649
Changing spilled pseudos to memory in insn #650
Changing spilled pseudos to memory in insn #651
Changing spilled pseudos to memory in insn #652
Changing spilled pseudos to memory in insn #653
Changing spilled pseudos to memory in insn #654
Changing spilled pseudos to memory in insn #655
Changing spilled pseudos to memory in insn #656
Changing spilled pseudos to memory in insn #657
Changing spilled pseudos to memory in insn #658
Changing spilled pseudos to memory in insn #659
Changing spilled pseudos to memory in insn #660
Changing spilled pseudos to memory in insn #661
Changing spilled pseudos to memory in insn #662
Changing spilled pseudos to memory in insn #663
Changing spilled pseudos to memory in insn #664
Changing spilled pseudos to memory in insn #665
Changing spilled pseudos to memory in insn #666
Changing spilled pseudos to memory in insn #667
Changing spilled pseudos to memory in insn #668
Changing spilled pseudos to memory in insn #669
Changing spilled pseudos to memory in insn #670
Changing spilled pseudos to memory in insn #671
Changing spilled pseudos to memory in insn #441
Changing spilled pseudos to memory in insn #444
Changing spilled pseudos to memory in insn #673
Changing spilled pseudos to memory in insn #676
Changing spilled pseudos to memory in insn #675
Changing spilled pseudos to memory in insn #677
Changing spilled pseudos to memory in insn #679
Changing spilled pseudos to memory in insn #681
Changing spilled pseudos to memory in insn #686
Changing spilled pseudos to memory in insn #688
Changing spilled pseudos to memory in insn #690
Changing spilled pseudos to memory in insn #693
Changing spilled pseudos to memory in insn #692
Changing spilled pseudos to memory in insn #695
Changing spilled pseudos to memory in insn #697
Changing spilled pseudos to memory in insn #699
Changing spilled pseudos to memory in insn #701
Changing spilled pseudos to memory in insn #703
Changing spilled pseudos to memory in insn #705
Changing spilled pseudos to memory in insn #707
Changing spilled pseudos to memory in insn #709
Changing spilled pseudos to memory in insn #712
Changing spilled pseudos to memory in insn #715
Changing spilled pseudos to memory in insn #714
Changing spilled pseudos to memory in insn #717
Changing spilled pseudos to memory in insn #720
Changing spilled pseudos to memory in insn #719
Changing spilled pseudos to memory in insn #778
Changing spilled pseudos to memory in insn #722
Changing spilled pseudos to memory in insn #724
Changing spilled pseudos to memory in insn #726
Changing spilled pseudos to memory in insn #729
Changing spilled pseudos to memory in insn #728
Changing spilled pseudos to memory in insn #730
Changing spilled pseudos to memory in insn #732
Changing spilled pseudos to memory in insn #734
Changing spilled pseudos to memory in insn #736
Changing spilled pseudos to memory in insn #738
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=352, prev_offset=144)
Can eliminate 16 to 6 (offset=224, prev_offset=0)
Can eliminate 20 to 7 (offset=272, prev_offset=64)
Can eliminate 20 to 6 (offset=144, prev_offset=0)

********** Local #4: **********

	   Spilling non-eliminable hard regs: 7
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 739:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 710:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 530:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 525:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 524:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 520:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 516:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 512:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 508:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 506:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 504:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 502:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 500:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 498:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 496:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 494:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 492:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 738:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 736:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 734:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 732:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 730:  (0) *v  (1) m {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 728:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 729:  (0) *v  (1) m {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 726:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 724:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 722:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 778:  (0) *v  (1) m {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 719:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 720:  (0) *v  (1) m {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 717:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 714:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 715:  (0) *v  (1) m {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 712:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 709:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 707:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 705:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 703:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 701:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 699:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 697:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 695:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 692:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 693:  (0) *v  (1) m {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 690:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 688:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 686:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 681:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 679:  (0) *v  (1) m {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 677:  (0) *v  (1) m {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 675:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=4,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=20,losers=2 -- refuse
            0 Costly set: reject++
            alt=6: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 676:  (0) *v  (1) m {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 673:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 671:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 670:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 669:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 668:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 667:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 666:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 665:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 664:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 663:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 662:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 661:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 660:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 659:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 658:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 657:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 656:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 655:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 654:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 653:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 652:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 651:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 650:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 649:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 648:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 779:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 647:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 646:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 645:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 269:  (0) rm  (1) 0  (2) re {*addsi_2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 759:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 760:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 259:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 636:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 761:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 626:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 762:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 616:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 615:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 763:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 764:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 605:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 219:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 765:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 766:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 767:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 583:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 768:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 572:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 563:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 769:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 171:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 770:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 163:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 793:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 549:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 546:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 773:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*xorsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 436:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 435:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 428:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 426:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 536:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 535:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 534:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 523:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 740:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 519:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 741:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 515:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 742:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 743:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 507:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 505:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 503:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 501:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 499:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 497:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 495:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 493:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 744:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 745:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 746:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 747:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 748:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 749:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 750:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 751:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 752:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 753:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 754:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 755:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 756:  (0) m  (1) re {*movsi_internal}
New elimination table:
Can eliminate 16 to 7 (offset=352, prev_offset=352)
Can eliminate 16 to 6 (offset=224, prev_offset=0)
Can eliminate 20 to 7 (offset=272, prev_offset=272)
Can eliminate 20 to 6 (offset=144, prev_offset=0)
changing reg in insn 129
changing reg in insn 132
changing reg in insn 141
changing reg in insn 148
changing reg in insn 143
changing reg in insn 150
changing reg in insn 144
changing reg in insn 152
changing reg in insn 146
changing reg in insn 153
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 222
changing reg in insn 152
changing reg in insn 157
changing reg in insn 164
changing reg in insn 159
changing reg in insn 166
changing reg in insn 168
changing reg in insn 162
changing reg in insn 169
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 238
changing reg in insn 168
changing reg in insn 170
changing reg in insn 209
changing reg in insn 205
changing reg in insn 173
changing reg in insn 180
changing reg in insn 175
changing reg in insn 182
changing reg in insn 184
changing reg in insn 178
changing reg in insn 181
changing reg in insn 181
changing reg in insn 236
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 208
changing reg in insn 185
changing reg in insn 186
changing reg in insn 225
changing reg in insn 221
changing reg in insn 189
changing reg in insn 191
changing reg in insn 198
changing reg in insn 200
changing reg in insn 194
changing reg in insn 201
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 199
changing reg in insn 206
changing reg in insn 200
changing reg in insn 200
changing reg in insn 224
changing reg in insn 201
changing reg in insn 202
changing reg in insn 241
changing reg in insn 237
changing reg in insn 205
changing reg in insn 206
changing reg in insn 207
changing reg in insn 214
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 210
changing reg in insn 217
changing reg in insn 213
changing reg in insn 439
changing reg in insn 40
changing reg in insn 424
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 230
changing reg in insn 224
changing reg in insn 224
changing reg in insn 232
changing reg in insn 225
changing reg in insn 226
changing reg in insn 233
changing reg in insn 229
changing reg in insn 440
changing reg in insn 34
changing reg in insn 425
changing reg in insn 237
changing reg in insn 238
changing reg in insn 239
changing reg in insn 246
changing reg in insn 240
changing reg in insn 240
changing reg in insn 248
changing reg in insn 241
changing reg in insn 242
changing reg in insn 249
changing reg in insn 245
changing reg in insn 441
changing reg in insn 37
changing reg in insn 426
changing reg in insn 442
changing reg in insn 33
changing reg in insn 438
changing reg in insn 443
changing reg in insn 427
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 262
changing reg in insn 256
changing reg in insn 256
changing reg in insn 264
changing reg in insn 257
changing reg in insn 258
changing reg in insn 261
changing reg in insn 265
changing reg in insn 444
changing reg in insn 38
changing reg in insn 428
changing reg in insn 445
changing reg in insn 32
changing reg in insn 429
changing reg in insn 446
changing reg in insn 39
changing reg in insn 430
changing reg in insn 137
changing reg in insn 431
changing reg in insn 63
changing reg in insn 432
changing reg in insn 64
changing reg in insn 437
changing reg in insn 67
changing reg in insn 434
changing reg in insn 56
changing reg in insn 435
changing reg in insn 54
changing reg in insn 436
changing reg in insn 29
changing reg in insn 107
changing reg in insn 104
changing reg in insn 101
changing reg in insn 98
changing reg in insn 95
changing reg in insn 92
changing reg in insn 89
changing reg in insn 86
changing reg in insn 83
changing reg in insn 80
changing reg in insn 77
changing reg in insn 74
changing reg in insn 71
changing reg in insn 68
changing reg in insn 65
changing reg in insn 62
changing reg in insn 104
changing reg in insn 101
changing reg in insn 98
changing reg in insn 95
changing reg in insn 92
changing reg in insn 89
changing reg in insn 86
changing reg in insn 83
changing reg in insn 80
changing reg in insn 77
changing reg in insn 74
changing reg in insn 71
changing reg in insn 68
changing reg in insn 65
changing reg in insn 62
changing reg in insn 105
changing reg in insn 102
changing reg in insn 99
changing reg in insn 96
changing reg in insn 93
changing reg in insn 90
changing reg in insn 87
changing reg in insn 84
changing reg in insn 81
changing reg in insn 78
changing reg in insn 75
changing reg in insn 72
changing reg in insn 69
changing reg in insn 66
changing reg in insn 63
changing reg in insn 62
changing reg in insn 63
changing reg in insn 65
changing reg in insn 68
changing reg in insn 71
changing reg in insn 74
changing reg in insn 77
changing reg in insn 80
changing reg in insn 83
changing reg in insn 86
changing reg in insn 89
changing reg in insn 92
changing reg in insn 95
changing reg in insn 98
changing reg in insn 101
changing reg in insn 104
changing reg in insn 107
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 153
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 159
changing reg in insn 162
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 175
changing reg in insn 178
changing reg in insn 180
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 186
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 191
changing reg in insn 194
changing reg in insn 196
changing reg in insn 197
changing reg in insn 198
changing reg in insn 199
changing reg in insn 201
changing reg in insn 202
changing reg in insn 204
changing reg in insn 205
changing reg in insn 206
changing reg in insn 207
changing reg in insn 209
changing reg in insn 210
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 217
changing reg in insn 220
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 225
changing reg in insn 226
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 233
changing reg in insn 236
changing reg in insn 236
changing reg in insn 237
changing reg in insn 238
changing reg in insn 239
changing reg in insn 241
changing reg in insn 242
changing reg in insn 244
changing reg in insn 245
changing reg in insn 246
changing reg in insn 247
changing reg in insn 249
changing reg in insn 252
changing reg in insn 253
changing reg in insn 255
changing reg in insn 258
changing reg in insn 260
changing reg in insn 261
changing reg in insn 262
changing reg in insn 263
changing reg in insn 265
changing reg in insn 266
changing reg in insn 274
changing reg in insn 284
changing reg in insn 275
changing reg in insn 284
changing reg in insn 277
changing reg in insn 308
changing reg in insn 296
changing reg in insn 284
changing reg in insn 368
changing reg in insn 363
changing reg in insn 356
changing reg in insn 351
changing reg in insn 344
changing reg in insn 339
changing reg in insn 332
changing reg in insn 327
changing reg in insn 320
changing reg in insn 315
changing reg in insn 303
changing reg in insn 291
changing reg in insn 279
changing reg in insn 278
changing reg in insn 281
changing reg in insn 279
changing reg in insn 279
changing reg in insn 286
changing reg in insn 296
changing reg in insn 287
changing reg in insn 296
changing reg in insn 290
changing reg in insn 293
changing reg in insn 291
changing reg in insn 291
changing reg in insn 298
changing reg in insn 308
changing reg in insn 299
changing reg in insn 308
changing reg in insn 302
changing reg in insn 305
changing reg in insn 303
changing reg in insn 303
changing reg in insn 310
changing reg in insn 320
changing reg in insn 311
changing reg in insn 320
changing reg in insn 314
changing reg in insn 317
changing reg in insn 315
changing reg in insn 315
changing reg in insn 322
changing reg in insn 332
changing reg in insn 323
changing reg in insn 332
changing reg in insn 326
changing reg in insn 329
changing reg in insn 327
changing reg in insn 327
changing reg in insn 334
changing reg in insn 344
changing reg in insn 335
changing reg in insn 344
changing reg in insn 338
changing reg in insn 341
changing reg in insn 339
changing reg in insn 339
changing reg in insn 346
changing reg in insn 356
changing reg in insn 347
changing reg in insn 356
changing reg in insn 350
changing reg in insn 353
changing reg in insn 351
changing reg in insn 351
changing reg in insn 358
changing reg in insn 368
changing reg in insn 359
changing reg in insn 368
changing reg in insn 362
changing reg in insn 365
changing reg in insn 363
changing reg in insn 363
changing reg in insn 377
changing reg in insn 380
changing reg in insn 380
changing reg in insn 380
changing reg in insn 381
changing reg in insn 385
changing reg in insn 384
changing reg in insn 402
changing reg in insn 385
changing reg in insn 384
changing reg in insn 384
changing reg in insn 385
changing reg in insn 389
changing reg in insn 388
changing reg in insn 389
changing reg in insn 388
changing reg in insn 388
changing reg in insn 389
changing reg in insn 394
changing reg in insn 398
changing reg in insn 394
changing reg in insn 394
changing reg in insn 397
changing reg in insn 398
changing reg in insn 397
changing reg in insn 397
changing reg in insn 398
changing reg in insn 402
changing reg in insn 402
changing reg in insn 406
changing reg in insn 405
changing reg in insn 406
changing reg in insn 405
changing reg in insn 405
changing reg in insn 406
changing reg in insn 424
changing reg in insn 439
changing reg in insn 156
changing reg in insn 425
changing reg in insn 440
changing reg in insn 232
changing reg in insn 438
changing reg in insn 247
changing reg in insn 442
changing reg in insn 248
changing reg in insn 427
changing reg in insn 248
changing reg in insn 443
changing reg in insn 249
changing reg in insn 429
changing reg in insn 263
changing reg in insn 445
changing reg in insn 264
changing reg in insn 430
changing reg in insn 266
changing reg in insn 446
changing reg in insn 140
changing reg in insn 431
changing reg in insn 268
changing reg in insn 268
changing reg in insn 362
changing reg in insn 358
changing reg in insn 350
changing reg in insn 346
changing reg in insn 338
changing reg in insn 334
changing reg in insn 326
changing reg in insn 322
changing reg in insn 314
changing reg in insn 310
changing reg in insn 302
changing reg in insn 298
changing reg in insn 290
changing reg in insn 286
changing reg in insn 278
changing reg in insn 274
changing reg in insn 432
changing reg in insn 275
changing reg in insn 139
changing reg in insn 437
changing reg in insn 281
changing reg in insn 433
changing reg in insn 284
changing reg in insn 434
changing reg in insn 287
changing reg in insn 155
deleting insn with uid = 29.
deleting insn with uid = 449.
deleting insn with uid = 450.
deleting insn with uid = 451.
deleting insn with uid = 452.
deleting insn with uid = 462.
deleting insn with uid = 463.
deleting insn with uid = 464.
deleting insn with uid = 465.
deleting insn with uid = 466.
deleting insn with uid = 467.
deleting insn with uid = 480.
deleting insn with uid = 481.
deleting insn with uid = 482.
deleting insn with uid = 483.
deleting insn with uid = 484.
deleting insn with uid = 485.
deleting insn with uid = 486.
deleting insn with uid = 487.
deleting insn with uid = 488.
deleting insn with uid = 489.
deleting insn with uid = 490.
deleting insn with uid = 491.
deleting insn with uid = 511.
deleting insn with uid = 527.
deleting insn with uid = 528.
deleting insn with uid = 532.
deleting insn with uid = 533.
deleting insn with uid = 424.
deleting insn with uid = 425.
deleting insn with uid = 427.
deleting insn with uid = 429.
deleting insn with uid = 430.
deleting insn with uid = 431.
deleting insn with uid = 432.
deleting insn with uid = 433.
deleting insn with uid = 434.
deleting insn with uid = 542.
deleting insn with uid = 543.
deleting insn with uid = 544.
deleting insn with uid = 545.
deleting insn with uid = 551.
deleting insn with uid = 554.
deleting insn with uid = 555.
deleting insn with uid = 557.
deleting insn with uid = 561.
deleting insn with uid = 565.
deleting insn with uid = 566.
deleting insn with uid = 571.
deleting insn with uid = 573.
deleting insn with uid = 575.
deleting insn with uid = 578.
deleting insn with uid = 580.
deleting insn with uid = 582.
deleting insn with uid = 584.
deleting insn with uid = 587.
deleting insn with uid = 590.
deleting insn with uid = 592.
deleting insn with uid = 593.
deleting insn with uid = 594.
deleting insn with uid = 595.
deleting insn with uid = 596.
deleting insn with uid = 598.
deleting insn with uid = 597.
deleting insn with uid = 599.
deleting insn with uid = 600.
deleting insn with uid = 603.
deleting insn with uid = 606.
deleting insn with uid = 608.
deleting insn with uid = 609.
deleting insn with uid = 610.
deleting insn with uid = 612.
deleting insn with uid = 613.
deleting insn with uid = 614.
deleting insn with uid = 621.
deleting insn with uid = 623.
deleting insn with uid = 624.
deleting insn with uid = 625.
deleting insn with uid = 632.
deleting insn with uid = 635.
deleting insn with uid = 637.
deleting insn with uid = 639.
deleting insn with uid = 640.
deleting insn with uid = 439.
deleting insn with uid = 440.
deleting insn with uid = 443.
deleting insn with uid = 445.
deleting insn with uid = 446.
deleting insn with uid = 672.
deleting insn with uid = 674.
deleting insn with uid = 678.
deleting insn with uid = 680.
deleting insn with uid = 682.
deleting insn with uid = 685.
deleting insn with uid = 687.
deleting insn with uid = 689.
deleting insn with uid = 691.
deleting insn with uid = 694.
deleting insn with uid = 696.
deleting insn with uid = 698.
deleting insn with uid = 700.
deleting insn with uid = 702.
deleting insn with uid = 704.
deleting insn with uid = 706.
deleting insn with uid = 708.
deleting insn with uid = 711.
deleting insn with uid = 713.
deleting insn with uid = 716.
deleting insn with uid = 718.
deleting insn with uid = 721.
deleting insn with uid = 723.
deleting insn with uid = 725.
deleting insn with uid = 727.
deleting insn with uid = 731.
deleting insn with uid = 733.
deleting insn with uid = 735.
deleting insn with uid = 737.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 11 (  1.2)


compress32

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={129d,148u,2e} r1={20d,39u,31e} r2={15d,33u} r3={25d,31u} r4={2d,17u} r5={11d,16u} r6={13d,16u} r7={1d,241u} r16={1e} r17={139d,2u} r21={15d,14u} r22={16d,15u} r23={7d,6u} r24={7d,7u} r25={8d,8u} r26={8d,8u} r37={18d,24u} r38={13d,18u} r39={19d,23u} r40={16d,21u} r41={12d,15u} r42={17d,29u,7e} r43={9d,15u} r44={30d,43u,6e} r356={2e} 
;;    total ref usage 1388{550d,789u,49e} in 529{529 regular + 0 call} insns.
(note 27 0 60 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 667, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
(note 60 27 28 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 28 60 30 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])
        (reg:DI 2 cx [ state ])) blake_ref.c:9 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(note 30 28 62 2 NOTE_INSN_FUNCTION_BEG)
(insn 62 30 63 2 (set (reg:SI 40 r11 [orig:358 MEM[(const BitSequence *)datablock_5(D)] ] [358])
        (mem:SI (reg/v/f:DI 1 dx [orig:357 datablock ] [357]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:DI 1 dx [orig:357 datablock ] [357]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8])
        (nil)))
(insn 63 62 64 2 (set (reg:SI 40 r11 [orig:293 D.5786 ] [293])
        (bswap:SI (reg:SI 40 r11 [orig:358 MEM[(const BitSequence *)datablock_5(D)] ] [358]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/v/f:DI 1 dx [orig:357 datablock ] [357]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8]))
        (nil)))
(insn 64 63 65 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [2 m+0 S4 A128])
        (reg:SI 40 r11 [orig:293 D.5786 ] [293])) blake_ref.c:32 90 {*movsi_internal}
     (nil))
(insn 65 64 448 2 (set (reg:SI 6 bp [orig:359 MEM[(const BitSequence *)datablock_5(D) + 4B] ] [359])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8])
        (nil)))
(insn 448 65 66 2 (set (reg:SI 5 di [orig:297 D.5786 ] [297])
        (reg:SI 6 bp [orig:359 MEM[(const BitSequence *)datablock_5(D) + 4B] ] [359])) 90 {*movsi_internal}
     (nil))
(insn 66 448 67 2 (set (reg:SI 5 di [orig:297 D.5786 ] [297])
        (bswap:SI (reg:SI 5 di [orig:297 D.5786 ] [297]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8]))
        (nil)))
(insn 67 66 68 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 212 [0xd4])) [2 m+4 S4 A32])
        (reg:SI 5 di [orig:297 D.5786 ] [297])) blake_ref.c:33 90 {*movsi_internal}
     (nil))
(insn 68 67 69 2 (set (reg:SI 38 r9 [orig:360 MEM[(const BitSequence *)datablock_5(D) + 8B] ] [360])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8])
        (nil)))
(insn 69 68 757 2 (set (reg:SI 38 r9 [orig:301 D.5786 ] [301])
        (bswap:SI (reg:SI 38 r9 [orig:301 D.5786 ] [301]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8]))
        (nil)))
(insn 757 69 70 2 (set (reg:SI 39 r10 [orig:301 D.5786 ] [301])
        (reg:SI 38 r9 [orig:301 D.5786 ] [301])) 90 {*movsi_internal}
     (nil))
(insn 70 757 71 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 216 [0xd8])) [2 m+8 S4 A64])
        (reg:SI 38 r9 [orig:301 D.5786 ] [301])) blake_ref.c:34 90 {*movsi_internal}
     (nil))
(insn 71 70 453 2 (set (reg:SI 0 ax [orig:361 MEM[(const BitSequence *)datablock_5(D) + 12B] ] [361])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8])
        (nil)))
(insn 453 71 72 2 (set (reg:SI 0 ax [orig:305 D.5786 ] [305])
        (reg:SI 0 ax [orig:361 MEM[(const BitSequence *)datablock_5(D) + 12B] ] [361])) 90 {*movsi_internal}
     (nil))
(insn 72 453 454 2 (set (reg:SI 0 ax [orig:305 D.5786 ] [305])
        (bswap:SI (reg:SI 0 ax [orig:305 D.5786 ] [305]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8]))
        (nil)))
(insn 454 72 756 2 (set (reg:SI 0 ax [orig:305 D.5786 ] [305])
        (reg:SI 0 ax [orig:305 D.5786 ] [305])) 90 {*movsi_internal}
     (nil))
(insn 756 454 455 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 100 [0x64])) [6 %sfp+-172 S4 A32])
        (reg:SI 0 ax [orig:305 D.5786 ] [305])) 90 {*movsi_internal}
     (nil))
(insn 455 756 73 2 (set (reg:SI 0 ax [orig:305 D.5786 ] [305])
        (reg:SI 0 ax [orig:305 D.5786 ] [305])) blake_ref.c:35 90 {*movsi_internal}
     (nil))
(insn 73 455 74 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 220 [0xdc])) [2 m+12 S4 A32])
        (reg:SI 0 ax [orig:305 D.5786 ] [305])) blake_ref.c:35 90 {*movsi_internal}
     (nil))
(insn 74 73 456 2 (set (reg:SI 0 ax [orig:362 MEM[(const BitSequence *)datablock_5(D) + 16B] ] [362])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8])
        (nil)))
(insn 456 74 75 2 (set (reg:SI 0 ax [orig:309 D.5786 ] [309])
        (reg:SI 0 ax [orig:362 MEM[(const BitSequence *)datablock_5(D) + 16B] ] [362])) 90 {*movsi_internal}
     (nil))
(insn 75 456 457 2 (set (reg:SI 0 ax [orig:309 D.5786 ] [309])
        (bswap:SI (reg:SI 0 ax [orig:309 D.5786 ] [309]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8]))
        (nil)))
(insn 457 75 755 2 (set (reg:SI 0 ax [orig:309 D.5786 ] [309])
        (reg:SI 0 ax [orig:309 D.5786 ] [309])) 90 {*movsi_internal}
     (nil))
(insn 755 457 458 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 104 [0x68])) [6 %sfp+-168 S4 A32])
        (reg:SI 0 ax [orig:309 D.5786 ] [309])) 90 {*movsi_internal}
     (nil))
(insn 458 755 76 2 (set (reg:SI 0 ax [orig:309 D.5786 ] [309])
        (reg:SI 0 ax [orig:309 D.5786 ] [309])) blake_ref.c:36 90 {*movsi_internal}
     (nil))
(insn 76 458 77 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [2 m+16 S4 A128])
        (reg:SI 0 ax [orig:309 D.5786 ] [309])) blake_ref.c:36 90 {*movsi_internal}
     (nil))
(insn 77 76 459 2 (set (reg:SI 0 ax [orig:363 MEM[(const BitSequence *)datablock_5(D) + 20B] ] [363])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8])
        (nil)))
(insn 459 77 78 2 (set (reg:SI 0 ax [orig:313 D.5786 ] [313])
        (reg:SI 0 ax [orig:363 MEM[(const BitSequence *)datablock_5(D) + 20B] ] [363])) 90 {*movsi_internal}
     (nil))
(insn 78 459 460 2 (set (reg:SI 0 ax [orig:313 D.5786 ] [313])
        (bswap:SI (reg:SI 0 ax [orig:313 D.5786 ] [313]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8]))
        (nil)))
(insn 460 78 754 2 (set (reg:SI 0 ax [orig:313 D.5786 ] [313])
        (reg:SI 0 ax [orig:313 D.5786 ] [313])) 90 {*movsi_internal}
     (nil))
(insn 754 460 461 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 108 [0x6c])) [6 %sfp+-164 S4 A32])
        (reg:SI 0 ax [orig:313 D.5786 ] [313])) 90 {*movsi_internal}
     (nil))
(insn 461 754 79 2 (set (reg:SI 0 ax [orig:313 D.5786 ] [313])
        (reg:SI 0 ax [orig:313 D.5786 ] [313])) blake_ref.c:37 90 {*movsi_internal}
     (nil))
(insn 79 461 80 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 228 [0xe4])) [2 m+20 S4 A32])
        (reg:SI 0 ax [orig:313 D.5786 ] [313])) blake_ref.c:37 90 {*movsi_internal}
     (nil))
(insn 80 79 81 2 (set (reg:SI 3 bx [orig:364 MEM[(const BitSequence *)datablock_5(D) + 24B] ] [364])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8])
        (nil)))
(insn 81 80 753 2 (set (reg:SI 3 bx [orig:317 D.5786 ] [317])
        (bswap:SI (reg:SI 3 bx [orig:317 D.5786 ] [317]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8]))
        (nil)))
(insn 753 81 82 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [6 %sfp+-160 S4 A32])
        (reg:SI 3 bx [orig:317 D.5786 ] [317])) 90 {*movsi_internal}
     (nil))
(insn 82 753 83 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 232 [0xe8])) [2 m+24 S4 A64])
        (reg:SI 3 bx [orig:317 D.5786 ] [317])) blake_ref.c:38 90 {*movsi_internal}
     (nil))
(insn 83 82 84 2 (set (reg:SI 3 bx [orig:365 MEM[(const BitSequence *)datablock_5(D) + 28B] ] [365])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8])
        (nil)))
(insn 84 83 752 2 (set (reg:SI 3 bx [orig:321 D.5786 ] [321])
        (bswap:SI (reg:SI 3 bx [orig:321 D.5786 ] [321]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8]))
        (nil)))
(insn 752 84 85 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 116 [0x74])) [6 %sfp+-156 S4 A32])
        (reg:SI 3 bx [orig:321 D.5786 ] [321])) 90 {*movsi_internal}
     (nil))
(insn 85 752 86 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 236 [0xec])) [2 m+28 S4 A32])
        (reg:SI 3 bx [orig:321 D.5786 ] [321])) blake_ref.c:39 90 {*movsi_internal}
     (nil))
(insn 86 85 468 2 (set (reg:SI 0 ax [orig:366 MEM[(const BitSequence *)datablock_5(D) + 32B] ] [366])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8])
        (nil)))
(insn 468 86 87 2 (set (reg:SI 0 ax [orig:325 D.5786 ] [325])
        (reg:SI 0 ax [orig:366 MEM[(const BitSequence *)datablock_5(D) + 32B] ] [366])) 90 {*movsi_internal}
     (nil))
(insn 87 468 469 2 (set (reg:SI 0 ax [orig:325 D.5786 ] [325])
        (bswap:SI (reg:SI 0 ax [orig:325 D.5786 ] [325]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8]))
        (nil)))
(insn 469 87 751 2 (set (reg:SI 0 ax [orig:325 D.5786 ] [325])
        (reg:SI 0 ax [orig:325 D.5786 ] [325])) 90 {*movsi_internal}
     (nil))
(insn 751 469 470 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 120 [0x78])) [6 %sfp+-152 S4 A32])
        (reg:SI 0 ax [orig:325 D.5786 ] [325])) 90 {*movsi_internal}
     (nil))
(insn 470 751 88 2 (set (reg:SI 0 ax [orig:325 D.5786 ] [325])
        (reg:SI 0 ax [orig:325 D.5786 ] [325])) blake_ref.c:40 90 {*movsi_internal}
     (nil))
(insn 88 470 89 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [2 m+32 S4 A128])
        (reg:SI 0 ax [orig:325 D.5786 ] [325])) blake_ref.c:40 90 {*movsi_internal}
     (nil))
(insn 89 88 471 2 (set (reg:SI 0 ax [orig:367 MEM[(const BitSequence *)datablock_5(D) + 36B] ] [367])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8])
        (nil)))
(insn 471 89 90 2 (set (reg:SI 0 ax [orig:329 D.5786 ] [329])
        (reg:SI 0 ax [orig:367 MEM[(const BitSequence *)datablock_5(D) + 36B] ] [367])) 90 {*movsi_internal}
     (nil))
(insn 90 471 472 2 (set (reg:SI 0 ax [orig:329 D.5786 ] [329])
        (bswap:SI (reg:SI 0 ax [orig:329 D.5786 ] [329]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8]))
        (nil)))
(insn 472 90 750 2 (set (reg:SI 0 ax [orig:329 D.5786 ] [329])
        (reg:SI 0 ax [orig:329 D.5786 ] [329])) 90 {*movsi_internal}
     (nil))
(insn 750 472 473 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 124 [0x7c])) [6 %sfp+-148 S4 A32])
        (reg:SI 0 ax [orig:329 D.5786 ] [329])) 90 {*movsi_internal}
     (nil))
(insn 473 750 91 2 (set (reg:SI 0 ax [orig:329 D.5786 ] [329])
        (reg:SI 0 ax [orig:329 D.5786 ] [329])) blake_ref.c:41 90 {*movsi_internal}
     (nil))
(insn 91 473 92 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 244 [0xf4])) [2 m+36 S4 A32])
        (reg:SI 0 ax [orig:329 D.5786 ] [329])) blake_ref.c:41 90 {*movsi_internal}
     (nil))
(insn 92 91 474 2 (set (reg:SI 0 ax [orig:368 MEM[(const BitSequence *)datablock_5(D) + 40B] ] [368])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8])
        (nil)))
(insn 474 92 93 2 (set (reg:SI 0 ax [orig:333 D.5786 ] [333])
        (reg:SI 0 ax [orig:368 MEM[(const BitSequence *)datablock_5(D) + 40B] ] [368])) 90 {*movsi_internal}
     (nil))
(insn 93 474 475 2 (set (reg:SI 0 ax [orig:333 D.5786 ] [333])
        (bswap:SI (reg:SI 0 ax [orig:333 D.5786 ] [333]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8]))
        (nil)))
(insn 475 93 749 2 (set (reg:SI 0 ax [orig:333 D.5786 ] [333])
        (reg:SI 0 ax [orig:333 D.5786 ] [333])) 90 {*movsi_internal}
     (nil))
(insn 749 475 476 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [6 %sfp+-144 S4 A32])
        (reg:SI 0 ax [orig:333 D.5786 ] [333])) 90 {*movsi_internal}
     (nil))
(insn 476 749 94 2 (set (reg:SI 0 ax [orig:333 D.5786 ] [333])
        (reg:SI 0 ax [orig:333 D.5786 ] [333])) blake_ref.c:42 90 {*movsi_internal}
     (nil))
(insn 94 476 95 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 248 [0xf8])) [2 m+40 S4 A64])
        (reg:SI 0 ax [orig:333 D.5786 ] [333])) blake_ref.c:42 90 {*movsi_internal}
     (nil))
(insn 95 94 477 2 (set (reg:SI 0 ax [orig:369 MEM[(const BitSequence *)datablock_5(D) + 44B] ] [369])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8])
        (nil)))
(insn 477 95 96 2 (set (reg:SI 0 ax [orig:337 D.5786 ] [337])
        (reg:SI 0 ax [orig:369 MEM[(const BitSequence *)datablock_5(D) + 44B] ] [369])) 90 {*movsi_internal}
     (nil))
(insn 96 477 478 2 (set (reg:SI 0 ax [orig:337 D.5786 ] [337])
        (bswap:SI (reg:SI 0 ax [orig:337 D.5786 ] [337]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8]))
        (nil)))
(insn 478 96 748 2 (set (reg:SI 0 ax [orig:337 D.5786 ] [337])
        (reg:SI 0 ax [orig:337 D.5786 ] [337])) 90 {*movsi_internal}
     (nil))
(insn 748 478 479 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 132 [0x84])) [6 %sfp+-140 S4 A32])
        (reg:SI 0 ax [orig:337 D.5786 ] [337])) 90 {*movsi_internal}
     (nil))
(insn 479 748 97 2 (set (reg:SI 0 ax [orig:337 D.5786 ] [337])
        (reg:SI 0 ax [orig:337 D.5786 ] [337])) blake_ref.c:43 90 {*movsi_internal}
     (nil))
(insn 97 479 98 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 252 [0xfc])) [2 m+44 S4 A32])
        (reg:SI 0 ax [orig:337 D.5786 ] [337])) blake_ref.c:43 90 {*movsi_internal}
     (nil))
(insn 98 97 99 2 (set (reg:SI 42 r13 [orig:370 MEM[(const BitSequence *)datablock_5(D) + 48B] ] [370])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8])
        (nil)))
(insn 99 98 747 2 (set (reg:SI 42 r13 [orig:341 D.5786 ] [341])
        (bswap:SI (reg:SI 42 r13 [orig:341 D.5786 ] [341]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8]))
        (nil)))
(insn 747 99 100 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 136 [0x88])) [6 %sfp+-136 S4 A32])
        (reg:SI 42 r13 [orig:341 D.5786 ] [341])) 90 {*movsi_internal}
     (nil))
(insn 100 747 101 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 256 [0x100])) [2 m+48 S4 A128])
        (reg:SI 42 r13 [orig:341 D.5786 ] [341])) blake_ref.c:44 90 {*movsi_internal}
     (nil))
(insn 101 100 102 2 (set (reg:SI 42 r13 [orig:371 MEM[(const BitSequence *)datablock_5(D) + 52B] ] [371])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8])
        (nil)))
(insn 102 101 746 2 (set (reg:SI 42 r13 [orig:345 D.5786 ] [345])
        (bswap:SI (reg:SI 42 r13 [orig:345 D.5786 ] [345]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8]))
        (nil)))
(insn 746 102 103 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 140 [0x8c])) [6 %sfp+-132 S4 A32])
        (reg:SI 42 r13 [orig:345 D.5786 ] [345])) 90 {*movsi_internal}
     (nil))
(insn 103 746 104 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 260 [0x104])) [2 m+52 S4 A32])
        (reg:SI 42 r13 [orig:345 D.5786 ] [345])) blake_ref.c:45 90 {*movsi_internal}
     (nil))
(insn 104 103 105 2 (set (reg:SI 44 r15 [orig:372 MEM[(const BitSequence *)datablock_5(D) + 56B] ] [372])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8])
        (nil)))
(insn 105 104 745 2 (set (reg:SI 44 r15 [orig:349 D.5786 ] [349])
        (bswap:SI (reg:SI 44 r15 [orig:349 D.5786 ] [349]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8]))
        (nil)))
(insn 745 105 106 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [6 %sfp+-128 S4 A32])
        (reg:SI 44 r15 [orig:349 D.5786 ] [349])) 90 {*movsi_internal}
     (nil))
(insn 106 745 107 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 264 [0x108])) [2 m+56 S4 A64])
        (reg:SI 44 r15 [orig:349 D.5786 ] [349])) blake_ref.c:46 90 {*movsi_internal}
     (nil))
(insn 107 106 108 2 (set (reg:SI 44 r15 [orig:373 MEM[(const BitSequence *)datablock_5(D) + 60B] ] [373])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 60 [0x3c])) [0 MEM[(const BitSequence *)datablock_5(D) + 60B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 108 107 744 2 (set (reg:SI 44 r15 [orig:353 D.5786 ] [353])
        (bswap:SI (reg:SI 44 r15 [orig:353 D.5786 ] [353]))) 765 {*bswapsi2}
     (nil))
(insn 744 108 109 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 148 [0x94])) [6 %sfp+-124 S4 A32])
        (reg:SI 44 r15 [orig:353 D.5786 ] [353])) 90 {*movsi_internal}
     (nil))
(insn 109 744 492 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 268 [0x10c])) [2 m+60 S4 A32])
        (reg:SI 44 r15 [orig:353 D.5786 ] [353])) blake_ref.c:47 90 {*movsi_internal}
     (nil))
(insn 492 109 110 2 (set (reg:DI 0 ax [561])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:50 89 {*movdi_internal}
     (nil))
(insn 110 492 493 2 (set (reg:SI 0 ax [orig:128 v$0 ] [128])
        (mem:SI (plus:DI (reg:DI 0 ax [561])
                (const_int 16 [0x10])) [2 state_246(D)->h32+0 S4 A64])) blake_ref.c:50 90 {*movsi_internal}
     (nil))
(insn 493 110 494 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [6 %sfp+-112 S4 A32])
        (reg:SI 0 ax [orig:128 v$0 ] [128])) blake_ref.c:50 90 {*movsi_internal}
     (nil))
(insn 494 493 111 2 (set (reg:DI 0 ax [563])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:51 89 {*movdi_internal}
     (nil))
(insn 111 494 495 2 (set (reg:SI 0 ax [orig:129 v$1 ] [129])
        (mem:SI (plus:DI (reg:DI 0 ax [563])
                (const_int 20 [0x14])) [2 state_246(D)->h32+4 S4 A32])) blake_ref.c:51 90 {*movsi_internal}
     (nil))
(insn 495 111 496 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 164 [0xa4])) [6 %sfp+-108 S4 A32])
        (reg:SI 0 ax [orig:129 v$1 ] [129])) blake_ref.c:51 90 {*movsi_internal}
     (nil))
(insn 496 495 112 2 (set (reg:DI 0 ax [565])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:52 89 {*movdi_internal}
     (nil))
(insn 112 496 497 2 (set (reg:SI 0 ax [orig:130 v$2 ] [130])
        (mem:SI (plus:DI (reg:DI 0 ax [565])
                (const_int 24 [0x18])) [2 state_246(D)->h32+8 S4 A64])) blake_ref.c:52 90 {*movsi_internal}
     (nil))
(insn 497 112 498 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [6 %sfp+-104 S4 A32])
        (reg:SI 0 ax [orig:130 v$2 ] [130])) blake_ref.c:52 90 {*movsi_internal}
     (nil))
(insn 498 497 113 2 (set (reg:DI 0 ax [567])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:53 89 {*movdi_internal}
     (nil))
(insn 113 498 499 2 (set (reg:SI 0 ax [orig:131 v$3 ] [131])
        (mem:SI (plus:DI (reg:DI 0 ax [567])
                (const_int 28 [0x1c])) [2 state_246(D)->h32+12 S4 A32])) blake_ref.c:53 90 {*movsi_internal}
     (nil))
(insn 499 113 500 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 172 [0xac])) [6 %sfp+-100 S4 A32])
        (reg:SI 0 ax [orig:131 v$3 ] [131])) blake_ref.c:53 90 {*movsi_internal}
     (nil))
(insn 500 499 114 2 (set (reg:DI 0 ax [569])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:54 89 {*movdi_internal}
     (nil))
(insn 114 500 501 2 (set (reg:SI 0 ax [orig:132 v$4 ] [132])
        (mem:SI (plus:DI (reg:DI 0 ax [569])
                (const_int 32 [0x20])) [2 state_246(D)->h32+16 S4 A64])) blake_ref.c:54 90 {*movsi_internal}
     (nil))
(insn 501 114 502 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [6 %sfp+-96 S4 A32])
        (reg:SI 0 ax [orig:132 v$4 ] [132])) blake_ref.c:54 90 {*movsi_internal}
     (nil))
(insn 502 501 115 2 (set (reg:DI 0 ax [571])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:55 89 {*movdi_internal}
     (nil))
(insn 115 502 503 2 (set (reg:SI 0 ax [orig:133 v$5 ] [133])
        (mem:SI (plus:DI (reg:DI 0 ax [571])
                (const_int 36 [0x24])) [2 state_246(D)->h32+20 S4 A32])) blake_ref.c:55 90 {*movsi_internal}
     (nil))
(insn 503 115 504 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 180 [0xb4])) [6 %sfp+-92 S4 A32])
        (reg:SI 0 ax [orig:133 v$5 ] [133])) blake_ref.c:55 90 {*movsi_internal}
     (nil))
(insn 504 503 116 2 (set (reg:DI 0 ax [573])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:56 89 {*movdi_internal}
     (nil))
(insn 116 504 505 2 (set (reg:SI 0 ax [orig:134 v$6 ] [134])
        (mem:SI (plus:DI (reg:DI 0 ax [573])
                (const_int 40 [0x28])) [2 state_246(D)->h32+24 S4 A64])) blake_ref.c:56 90 {*movsi_internal}
     (nil))
(insn 505 116 506 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [6 %sfp+-88 S4 A32])
        (reg:SI 0 ax [orig:134 v$6 ] [134])) blake_ref.c:56 90 {*movsi_internal}
     (nil))
(insn 506 505 117 2 (set (reg:DI 0 ax [575])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:57 89 {*movdi_internal}
     (nil))
(insn 117 506 507 2 (set (reg:SI 0 ax [orig:135 v$7 ] [135])
        (mem:SI (plus:DI (reg:DI 0 ax [575])
                (const_int 44 [0x2c])) [2 state_246(D)->h32+28 S4 A32])) blake_ref.c:57 90 {*movsi_internal}
     (nil))
(insn 507 117 508 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 188 [0xbc])) [6 %sfp+-84 S4 A32])
        (reg:SI 0 ax [orig:135 v$7 ] [135])) blake_ref.c:57 90 {*movsi_internal}
     (nil))
(insn 508 507 118 2 (set (reg:DI 0 ax [577])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:58 89 {*movdi_internal}
     (nil))
(insn 118 508 509 2 (set (reg:SI 0 ax [orig:136 D.5781 ] [136])
        (mem:SI (plus:DI (reg:DI 0 ax [577])
                (const_int 120 [0x78])) [2 state_246(D)->salt32+0 S4 A64])) blake_ref.c:58 90 {*movsi_internal}
     (nil))
(insn 509 118 743 2 (set (reg:SI 0 ax [orig:136 D.5781 ] [136])
        (reg:SI 0 ax [orig:136 D.5781 ] [136])) blake_ref.c:58 90 {*movsi_internal}
     (nil))
(insn 743 509 510 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [6 %sfp+-80 S4 A32])
        (reg:SI 0 ax [orig:136 D.5781 ] [136])) blake_ref.c:58 90 {*movsi_internal}
     (nil))
(insn 510 743 119 2 (set (reg:SI 38 r9 [orig:254 v$8 ] [254])
        (reg:SI 0 ax [orig:136 D.5781 ] [136])) blake_ref.c:58 90 {*movsi_internal}
     (nil))
(insn 119 510 512 2 (parallel [
            (set (reg:SI 38 r9 [orig:254 v$8 ] [254])
                (xor:SI (reg:SI 38 r9 [orig:254 v$8 ] [254])
                    (const_int 608135816 [0x243f6a88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:58 400 {*xorsi_1}
     (nil))
(insn 512 119 120 2 (set (reg:DI 0 ax [580])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:59 89 {*movdi_internal}
     (nil))
(insn 120 512 513 2 (set (reg:SI 0 ax [orig:137 D.5781 ] [137])
        (mem:SI (plus:DI (reg:DI 0 ax [580])
                (const_int 124 [0x7c])) [2 state_246(D)->salt32+4 S4 A32])) blake_ref.c:59 90 {*movsi_internal}
     (nil))
(insn 513 120 742 2 (set (reg:SI 0 ax [orig:137 D.5781 ] [137])
        (reg:SI 0 ax [orig:137 D.5781 ] [137])) blake_ref.c:59 90 {*movsi_internal}
     (nil))
(insn 742 513 514 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 196 [0xc4])) [6 %sfp+-76 S4 A32])
        (reg:SI 0 ax [orig:137 D.5781 ] [137])) blake_ref.c:59 90 {*movsi_internal}
     (nil))
(insn 514 742 121 2 (set (reg:SI 0 ax [orig:274 v$9 ] [274])
        (reg:SI 0 ax [orig:137 D.5781 ] [137])) blake_ref.c:59 90 {*movsi_internal}
     (nil))
(insn 121 514 515 2 (parallel [
            (set (reg:SI 0 ax [orig:274 v$9 ] [274])
                (xor:SI (reg:SI 0 ax [orig:274 v$9 ] [274])
                    (const_int -2052912941 [0xffffffff85a308d3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:59 400 {*xorsi_1}
     (nil))
(insn 515 121 516 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [6 %sfp+-236 S4 A32])
        (reg:SI 0 ax [orig:274 v$9 ] [274])) blake_ref.c:59 90 {*movsi_internal}
     (nil))
(insn 516 515 122 2 (set (reg:DI 0 ax [583])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:60 89 {*movdi_internal}
     (nil))
(insn 122 516 517 2 (set (reg:SI 0 ax [orig:138 D.5781 ] [138])
        (mem:SI (plus:DI (reg:DI 0 ax [583])
                (const_int 128 [0x80])) [2 state_246(D)->salt32+8 S4 A64])) blake_ref.c:60 90 {*movsi_internal}
     (nil))
(insn 517 122 741 2 (set (reg:SI 0 ax [orig:138 D.5781 ] [138])
        (reg:SI 0 ax [orig:138 D.5781 ] [138])) blake_ref.c:60 90 {*movsi_internal}
     (nil))
(insn 741 517 518 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 200 [0xc8])) [6 %sfp+-72 S4 A32])
        (reg:SI 0 ax [orig:138 D.5781 ] [138])) blake_ref.c:60 90 {*movsi_internal}
     (nil))
(insn 518 741 123 2 (set (reg:SI 0 ax [orig:220 v$10 ] [220])
        (reg:SI 0 ax [orig:138 D.5781 ] [138])) blake_ref.c:60 90 {*movsi_internal}
     (nil))
(insn 123 518 519 2 (parallel [
            (set (reg:SI 0 ax [orig:220 v$10 ] [220])
                (xor:SI (reg:SI 0 ax [orig:220 v$10 ] [220])
                    (const_int 320440878 [0x13198a2e])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:60 400 {*xorsi_1}
     (nil))
(insn 519 123 520 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-240 S4 A32])
        (reg:SI 0 ax [orig:220 v$10 ] [220])) blake_ref.c:60 90 {*movsi_internal}
     (nil))
(insn 520 519 124 2 (set (reg:DI 0 ax [586])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:61 89 {*movdi_internal}
     (nil))
(insn 124 520 521 2 (set (reg:SI 0 ax [orig:139 D.5781 ] [139])
        (mem:SI (plus:DI (reg:DI 0 ax [586])
                (const_int 132 [0x84])) [2 state_246(D)->salt32+12 S4 A32])) blake_ref.c:61 90 {*movsi_internal}
     (nil))
(insn 521 124 740 2 (set (reg:SI 0 ax [orig:139 D.5781 ] [139])
        (reg:SI 0 ax [orig:139 D.5781 ] [139])) blake_ref.c:61 90 {*movsi_internal}
     (nil))
(insn 740 521 522 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 204 [0xcc])) [6 %sfp+-68 S4 A32])
        (reg:SI 0 ax [orig:139 D.5781 ] [139])) blake_ref.c:61 90 {*movsi_internal}
     (nil))
(insn 522 740 125 2 (set (reg:SI 0 ax [orig:206 v$11 ] [206])
        (reg:SI 0 ax [orig:139 D.5781 ] [139])) blake_ref.c:61 90 {*movsi_internal}
     (nil))
(insn 125 522 523 2 (parallel [
            (set (reg:SI 0 ax [orig:206 v$11 ] [206])
                (xor:SI (reg:SI 0 ax [orig:206 v$11 ] [206])
                    (const_int 57701188 [0x3707344])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:61 400 {*xorsi_1}
     (nil))
(insn 523 125 524 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-248 S4 A32])
        (reg:SI 0 ax [orig:206 v$11 ] [206])) blake_ref.c:61 90 {*movsi_internal}
     (nil))
(insn 524 523 126 2 (set (reg:DI 0 ax [589])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:62 89 {*movdi_internal}
     (nil))
(insn 126 524 127 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg:DI 0 ax [589])
                    (const_int 12 [0xc])) [2 state_246(D)->nullt+0 S4 A32])
            (const_int 0 [0]))) blake_ref.c:62 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 127 126 128 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 418)
            (pc))) blake_ref.c:62 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 418)
;;  succ:       4 [50.0%] 
;;              3 [50.0%]  (FALLTHRU)
;; lr  out 	 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]

;; basic block 3, loop depth 0, count 0, freq 334, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 17 [flags] 37 [r8] 44 [r15]
;; live  in  	 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 37 [r8] 44 [r15]
;; live  kill	 17 [flags]
(note 128 127 525 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 525 128 129 3 (set (reg:DI 0 ax [590])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:69 89 {*movdi_internal}
     (nil))
(insn 129 525 526 3 (set (reg:SI 37 r8 [orig:141 D.5781 ] [141])
        (mem:SI (plus:DI (reg:DI 0 ax [590])
                (const_int 48 [0x30])) [2 state_246(D)->t32+0 S4 A64])) blake_ref.c:69 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 48 [0x30])) [2 state_246(D)->t32+0 S4 A64])
        (nil)))
(insn 526 129 130 3 (set (reg:SI 6 bp [orig:235 v$12 ] [235])
        (reg:SI 37 r8 [orig:141 D.5781 ] [141])) blake_ref.c:69 90 {*movsi_internal}
     (nil))
(insn 130 526 131 3 (parallel [
            (set (reg:SI 6 bp [orig:235 v$12 ] [235])
                (xor:SI (reg:SI 6 bp [orig:235 v$12 ] [235])
                    (const_int -1542899678 [0xffffffffa4093822])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:69 400 {*xorsi_1}
     (nil))
(insn 131 130 529 3 (parallel [
            (set (reg:SI 37 r8 [orig:252 v$13 ] [252])
                (xor:SI (reg:SI 37 r8 [orig:252 v$13 ] [252])
                    (const_int 698298832 [0x299f31d0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:70 400 {*xorsi_1}
     (nil))
(insn 529 131 530 3 (set (reg:SI 2 cx [orig:252 v$13 ] [252])
        (reg:SI 37 r8 [orig:252 v$13 ] [252])) blake_ref.c:70 90 {*movsi_internal}
     (nil))
(insn 530 529 132 3 (set (reg:DI 0 ax [593])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:71 89 {*movdi_internal}
     (nil))
(insn 132 530 531 3 (set (reg:SI 44 r15 [orig:142 D.5781 ] [142])
        (mem:SI (plus:DI (reg:DI 0 ax [593])
                (const_int 52 [0x34])) [2 state_246(D)->t32+4 S4 A32])) blake_ref.c:71 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 52 [0x34])) [2 state_246(D)->t32+4 S4 A32])
        (nil)))
(insn 531 132 133 3 (set (reg:SI 3 bx [orig:273 v$14 ] [273])
        (reg:SI 44 r15 [orig:142 D.5781 ] [142])) blake_ref.c:71 90 {*movsi_internal}
     (nil))
(insn 133 531 134 3 (parallel [
            (set (reg:SI 3 bx [orig:273 v$14 ] [273])
                (xor:SI (reg:SI 3 bx [orig:273 v$14 ] [273])
                    (const_int 137296536 [0x82efa98])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:71 400 {*xorsi_1}
     (nil))
(insn 134 133 534 3 (parallel [
            (set (reg:SI 44 r15 [orig:219 v$15 ] [219])
                (xor:SI (reg:SI 44 r15 [orig:219 v$15 ] [219])
                    (const_int -330404727 [0xffffffffec4e6c89])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:72 400 {*xorsi_1}
     (nil))
(insn 534 134 420 3 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 28 [0x1c])) [6 %sfp+-244 S4 A32])
        (reg:SI 44 r15 [orig:219 v$15 ] [219])) blake_ref.c:72 90 {*movsi_internal}
     (nil))
(jump_insn 420 534 421 3 (set (pc)
        (label_ref 135)) 654 {jump}
     (nil)
 -> 135)
;;  succ:       5 [100.0%] 
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]

(barrier 421 420 418)
;; basic block 4, loop depth 0, count 0, freq 334, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 3 [bx] 6 [bp]
;; live  in  	 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 2 [cx] 3 [bx] 6 [bp]
;; live  kill	
(code_label 418 421 417 4 5 "" [1 uses])
(note 417 418 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 417 32 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 28 [0x1c])) [6 %sfp+-244 S4 A32])
        (const_int -330404727 [0xffffffffec4e6c89])) blake_ref.c:66 90 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:SI 3 bx [orig:273 v$14 ] [273])
        (const_int 137296536 [0x82efa98])) blake_ref.c:65 90 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:SI 2 cx [orig:252 v$13 ] [252])
        (const_int 698298832 [0x299f31d0])) blake_ref.c:64 90 {*movsi_internal}
     (nil))
(insn 34 33 135 4 (set (reg:SI 6 bp [orig:235 v$12 ] [235])
        (const_int -1542899678 [0xffffffffa4093822])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]

;; basic block 5, loop depth 0, count 0, freq 670, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 2 [cx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 4 [si] 5 [di] 37 [r8] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 37 [r8] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
(code_label 135 34 136 5 2 "" [1 uses])
(note 136 135 137 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 137 136 535 5 (set (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
        (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)
        (nil)))
(insn 535 137 35 5 (set (reg:SI 0 ax [orig:128 v$0 ] [128])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [6 %sfp+-112 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 35 535 536 5 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 0 ax [orig:128 v$0 ] [128])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 536 35 36 5 (set (reg:SI 0 ax [orig:129 v$1 ] [129])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 164 [0xa4])) [6 %sfp+-108 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 36 536 37 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [6 %sfp+-268 S4 A32])
        (reg:SI 0 ax [orig:129 v$1 ] [129])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 37 36 38 5 (set (reg:SI 42 r13 [orig:250 v$2 ] [250])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [6 %sfp+-104 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:SI 44 r15 [orig:270 v$3 ] [270])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 172 [0xac])) [6 %sfp+-100 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:SI 37 r8 [orig:276 v$4 ] [276])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [6 %sfp+-96 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 40 39 537 5 (set (reg:SI 43 r14 [orig:222 v$5 ] [222])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 180 [0xb4])) [6 %sfp+-92 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 537 40 41 5 (set (reg:SI 0 ax [orig:134 v$6 ] [134])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [6 %sfp+-88 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 41 537 538 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-264 S4 A32])
        (reg:SI 0 ax [orig:134 v$6 ] [134])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 538 41 42 5 (set (reg:SI 0 ax [orig:135 v$7 ] [135])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 188 [0xbc])) [6 %sfp+-84 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 42 538 43 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [6 %sfp+-260 S4 A32])
        (reg:SI 0 ax [orig:135 v$7 ] [135])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 43 42 44 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 156 [0x9c])) [6 %sfp+-116 S4 A32])
        (const_int 14 [0xe])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 14 [0xe])
        (nil)))
(insn 44 43 45 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 88 [0x58])) [6 %sfp+-184 S4 A32])
        (const_int 1065670069 [0x3f84d5b5])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1065670069 [0x3f84d5b5])
        (nil)))
(insn 45 44 46 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 84 [0x54])) [6 %sfp+-188 S4 A32])
        (const_int -1253635817 [0xffffffffb5470917])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -1253635817 [0xffffffffb5470917])
        (nil)))
(insn 46 45 47 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [6 %sfp+-192 S4 A32])
        (const_int -1062458953 [0xffffffffc0ac29b7])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -1062458953 [0xffffffffc0ac29b7])
        (nil)))
(insn 47 46 48 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 76 [0x4c])) [6 %sfp+-196 S4 A32])
        (const_int -914599715 [0xffffffffc97c50dd])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -914599715 [0xffffffffc97c50dd])
        (nil)))
(insn 48 47 49 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [6 %sfp+-200 S4 A32])
        (const_int -1101764913 [0xffffffffbe5466cf])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -1101764913 [0xffffffffbe5466cf])
        (nil)))
(insn 49 48 50 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 68 [0x44])) [6 %sfp+-204 S4 A32])
        (const_int 887688300 [0x34e90c6c])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 887688300 [0x34e90c6c])
        (nil)))
(insn 50 49 51 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-208 S4 A32])
        (const_int 1160258022 [0x452821e6])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1160258022 [0x452821e6])
        (nil)))
(insn 51 50 52 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 60 [0x3c])) [6 %sfp+-212 S4 A32])
        (const_int 953160567 [0x38d01377])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 953160567 [0x38d01377])
        (nil)))
(insn 52 51 53 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [6 %sfp+-216 S4 A32])
        (const_int 137296536 [0x82efa98])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 137296536 [0x82efa98])
        (nil)))
(insn 53 52 54 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 52 [0x34])) [6 %sfp+-220 S4 A32])
        (const_int -330404727 [0xffffffffec4e6c89])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -330404727 [0xffffffffec4e6c89])
        (nil)))
(insn 54 53 55 5 (set (reg:SI 1 dx [orig:314 D.5787 ] [314])
        (const_int -1542899678 [0xffffffffa4093822])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -1542899678 [0xffffffffa4093822])
        (nil)))
(insn 55 54 56 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [6 %sfp+-224 S4 A32])
        (const_int 698298832 [0x299f31d0])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 698298832 [0x299f31d0])
        (nil)))
(insn 56 55 57 5 (set (reg:SI 0 ax [orig:306 D.5787 ] [306])
        (const_int 320440878 [0x13198a2e])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 320440878 [0x13198a2e])
        (nil)))
(insn 57 56 58 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 44 [0x2c])) [6 %sfp+-228 S4 A32])
        (const_int 57701188 [0x3707344])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 57701188 [0x3707344])
        (nil)))
(insn 58 57 758 5 (set (reg:SI 41 r12 [orig:298 D.5787 ] [298])
        (const_int 608135816 [0x243f6a88])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 608135816 [0x243f6a88])
        (nil)))
(note 758 58 59 5 NOTE_INSN_DELETED)
(insn 59 758 426 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-232 S4 A32])
        (const_int -2052912941 [0xffffffff85a308d3])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -2052912941 [0xffffffff85a308d3])
        (nil)))
(insn 426 59 428 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])
        (reg:SI 42 r13 [orig:250 v$2 ] [250])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 428 426 435 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 20 [0x14])) [6 %sfp+-252 S4 A32])
        (reg:SI 44 r15 [orig:270 v$3 ] [270])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 435 428 436 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 92 [0x5c])) [6 %sfp+-180 S4 A32])
        (reg:SI 0 ax [orig:306 D.5787 ] [306])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 436 435 437 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [6 %sfp+-176 S4 A32])
        (reg:SI 1 dx [orig:314 D.5787 ] [314])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 437 436 438 5 (set (reg:SI 1 dx [orig:297 D.5786 ] [297])
        (reg:SI 5 di [orig:297 D.5786 ] [297])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 438 437 369 5 (set (reg:SI 5 di [orig:252 v$13 ] [252])
        (reg:SI 2 cx [orig:252 v$13 ] [252])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]

;; basic block 6, loop depth 0, count 0, freq 9333, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              7 [100.0%]  (DFS_BACK)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; lr  use 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 369 438 138 6 4 "" [1 uses])
(note 138 369 539 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(note 539 138 799 6 NOTE_INSN_DELETED)
(note 799 539 139 6 NOTE_INSN_DELETED)
(insn 139 799 140 6 (parallel [
            (set (reg:SI 40 r11 [orig:374 D.5781 ] [374])
                (xor:SI (reg:SI 40 r11 [orig:293 D.5786 ] [293])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 40 [0x28])) [6 %sfp+-232 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (nil))
(insn 140 139 540 6 (parallel [
            (set (reg:SI 44 r15 [orig:375 D.5781 ] [375])
                (plus:SI (reg:SI 40 r11 [orig:374 D.5781 ] [374])
                    (reg:SI 37 r8 [orig:276 v$4 ] [276])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (nil))
(note 540 140 798 6 NOTE_INSN_DELETED)
(note 798 540 141 6 NOTE_INSN_DELETED)
(insn 141 798 541 6 (parallel [
            (set (reg:SI 44 r15 [orig:144 D.5781 ] [144])
                (plus:SI (reg:SI 44 r15 [orig:375 D.5781 ] [375])
                    (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (nil))
(insn 541 141 142 6 (set (reg:SI 2 cx [orig:376 D.5781 ] [376])
        (reg:SI 6 bp [orig:235 v$12 ] [235])) blake_ref.c:79 90 {*movsi_internal}
     (nil))
(insn 142 541 143 6 (parallel [
            (set (reg:SI 2 cx [orig:376 D.5781 ] [376])
                (xor:SI (reg:SI 2 cx [orig:376 D.5781 ] [376])
                    (reg:SI 44 r15 [orig:144 D.5781 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (nil))
(insn 143 142 144 6 (parallel [
            (set (reg:SI 2 cx [orig:146 D.5781 ] [146])
                (rotate:SI (reg:SI 2 cx [orig:376 D.5781 ] [376])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 586 {*rotlsi3_1}
     (nil))
(insn 144 143 145 6 (parallel [
            (set (reg:SI 38 r9 [orig:147 D.5781 ] [147])
                (plus:SI (reg:SI 38 r9 [orig:254 v$8 ] [254])
                    (reg:SI 2 cx [orig:146 D.5781 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (nil))
(insn 145 144 146 6 (parallel [
            (set (reg:SI 37 r8 [orig:377 D.5781 ] [377])
                (xor:SI (reg:SI 37 r8 [orig:276 v$4 ] [276])
                    (reg:SI 38 r9 [orig:147 D.5781 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (nil))
(insn 146 145 147 6 (parallel [
            (set (reg:SI 37 r8 [orig:149 D.5781 ] [149])
                (rotatert:SI (reg:SI 37 r8 [orig:377 D.5781 ] [377])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 587 {*rotrsi3_1}
     (nil))
(insn 147 146 148 6 (parallel [
            (set (reg:SI 41 r12 [orig:378 D.5781 ] [378])
                (xor:SI (reg:SI 41 r12 [orig:298 D.5787 ] [298])
                    (reg:SI 1 dx [orig:297 D.5786 ] [297])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (nil))
(insn 148 147 149 6 (parallel [
            (set (reg:SI 1 dx [orig:379 D.5781 ] [379])
                (plus:SI (reg:SI 41 r12 [orig:378 D.5781 ] [378])
                    (reg:SI 44 r15 [orig:144 D.5781 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (nil))
(insn 149 148 150 6 (parallel [
            (set (reg:SI 1 dx [orig:152 D.5781 ] [152])
                (plus:SI (reg:SI 1 dx [orig:379 D.5781 ] [379])
                    (reg:SI 37 r8 [orig:149 D.5781 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (nil))
(insn 150 149 151 6 (parallel [
            (set (reg:SI 2 cx [orig:380 D.5781 ] [380])
                (xor:SI (reg:SI 2 cx [orig:146 D.5781 ] [146])
                    (reg:SI 1 dx [orig:152 D.5781 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (nil))
(insn 151 150 152 6 (parallel [
            (set (reg:SI 2 cx [orig:154 D.5781 ] [154])
                (rotatert:SI (reg:SI 2 cx [orig:380 D.5781 ] [380])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 587 {*rotrsi3_1}
     (nil))
(insn 152 151 774 6 (parallel [
            (set (reg:SI 38 r9 [orig:155 D.5781 ] [155])
                (plus:SI (reg:SI 38 r9 [orig:147 D.5781 ] [147])
                    (reg:SI 2 cx [orig:154 D.5781 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (nil))
(note 774 152 773 6 NOTE_INSN_DELETED)
(insn 773 774 802 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-232 S4 A32])
        (reg:SI 38 r9 [orig:155 D.5781 ] [155])) blake_ref.c:79 90 {*movsi_internal}
     (nil))
(note 802 773 153 6 NOTE_INSN_DELETED)
(insn 153 802 154 6 (parallel [
            (set (reg:SI 37 r8 [orig:381 D.5781 ] [381])
                (xor:SI (reg:SI 37 r8 [orig:149 D.5781 ] [149])
                    (reg:SI 38 r9 [orig:155 D.5781 ] [155])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (nil))
(insn 154 153 546 6 (parallel [
            (set (reg:SI 37 r8 [orig:157 D.5781 ] [157])
                (rotatert:SI (reg:SI 37 r8 [orig:157 D.5781 ] [157])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 587 {*rotrsi3_1}
     (nil))
(insn 546 154 801 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 152 [0x98])) [6 %sfp+-120 S4 A32])
        (reg:SI 37 r8 [orig:157 D.5781 ] [157])) blake_ref.c:79 90 {*movsi_internal}
     (nil))
(note 801 546 772 6 NOTE_INSN_DELETED)
(note 772 801 547 6 NOTE_INSN_DELETED)
(note 547 772 797 6 NOTE_INSN_DELETED)
(note 797 547 155 6 NOTE_INSN_DELETED)
(insn 155 797 156 6 (parallel [
            (set (reg:SI 39 r10 [orig:382 D.5781 ] [382])
                (xor:SI (reg:SI 39 r10 [orig:301 D.5786 ] [301])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 44 [0x2c])) [6 %sfp+-228 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (nil))
(insn 156 155 548 6 (parallel [
            (set (reg:SI 39 r10 [orig:383 D.5781 ] [383])
                (plus:SI (reg:SI 39 r10 [orig:382 D.5781 ] [382])
                    (reg:SI 43 r14 [orig:222 v$5 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (nil))
(note 548 156 796 6 NOTE_INSN_DELETED)
(note 796 548 157 6 NOTE_INSN_DELETED)
(insn 157 796 158 6 (parallel [
            (set (reg:SI 39 r10 [orig:160 D.5781 ] [160])
                (plus:SI (reg:SI 39 r10 [orig:383 D.5781 ] [383])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 4 [0x4])) [6 %sfp+-268 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (nil))
(insn 158 157 159 6 (parallel [
            (set (reg:SI 5 di [orig:384 D.5781 ] [384])
                (xor:SI (reg:SI 5 di [orig:252 v$13 ] [252])
                    (reg:SI 39 r10 [orig:160 D.5781 ] [160])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (nil))
(insn 159 158 549 6 (parallel [
            (set (reg:SI 5 di [orig:162 D.5781 ] [162])
                (rotate:SI (reg:SI 5 di [orig:384 D.5781 ] [384])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 586 {*rotlsi3_1}
     (nil))
(insn 549 159 160 6 (set (reg:SI 44 r15 [orig:163 D.5781 ] [163])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [6 %sfp+-236 S4 A32])) blake_ref.c:80 90 {*movsi_internal}
     (nil))
(insn 160 549 550 6 (parallel [
            (set (reg:SI 44 r15 [orig:163 D.5781 ] [163])
                (plus:SI (reg:SI 44 r15 [orig:163 D.5781 ] [163])
                    (reg:SI 5 di [orig:162 D.5781 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (nil))
(insn 550 160 161 6 (set (reg:SI 37 r8 [orig:163 D.5781 ] [163])
        (reg:SI 44 r15 [orig:163 D.5781 ] [163])) blake_ref.c:80 90 {*movsi_internal}
     (nil))
(insn 161 550 552 6 (parallel [
            (set (reg:SI 43 r14 [orig:385 D.5781 ] [385])
                (xor:SI (reg:SI 43 r14 [orig:385 D.5781 ] [385])
                    (reg:SI 37 r8 [orig:163 D.5781 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (nil))
(insn 552 161 162 6 (set (reg:SI 6 bp [orig:385 D.5781 ] [385])
        (reg:SI 43 r14 [orig:385 D.5781 ] [385])) blake_ref.c:80 90 {*movsi_internal}
     (nil))
(insn 162 552 553 6 (parallel [
            (set (reg:SI 6 bp [orig:165 D.5781 ] [165])
                (rotatert:SI (reg:SI 6 bp [orig:385 D.5781 ] [385])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 587 {*rotrsi3_1}
     (nil))
(note 553 162 793 6 NOTE_INSN_DELETED)
(insn 793 553 795 6 (set (reg:SI 0 ax [orig:386 D.5781 ] [386])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 92 [0x5c])) [6 %sfp+-180 S4 A32])) blake_ref.c:80 90 {*movsi_internal}
     (nil))
(note 795 793 163 6 NOTE_INSN_DELETED)
(insn 163 795 794 6 (parallel [
            (set (reg:SI 0 ax [orig:386 D.5781 ] [386])
                (xor:SI (reg:SI 0 ax [orig:386 D.5781 ] [386])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 100 [0x64])) [6 %sfp+-172 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (nil))
(insn 794 163 164 6 (set (reg:SI 0 ax [orig:386 D.5781 ] [386])
        (reg:SI 0 ax [orig:386 D.5781 ] [386])) blake_ref.c:80 90 {*movsi_internal}
     (nil))
(insn 164 794 165 6 (parallel [
            (set (reg:SI 0 ax [orig:387 D.5781 ] [387])
                (plus:SI (reg:SI 0 ax [orig:386 D.5781 ] [386])
                    (reg:SI 39 r10 [orig:160 D.5781 ] [160])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (nil))
(insn 165 164 166 6 (parallel [
            (set (reg:SI 0 ax [orig:168 D.5781 ] [168])
                (plus:SI (reg:SI 0 ax [orig:387 D.5781 ] [387])
                    (reg:SI 6 bp [orig:165 D.5781 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (nil))
(insn 166 165 167 6 (parallel [
            (set (reg:SI 5 di [orig:388 D.5781 ] [388])
                (xor:SI (reg:SI 5 di [orig:162 D.5781 ] [162])
                    (reg:SI 0 ax [orig:168 D.5781 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (nil))
(insn 167 166 168 6 (parallel [
            (set (reg:SI 5 di [orig:170 D.5781 ] [170])
                (rotatert:SI (reg:SI 5 di [orig:388 D.5781 ] [388])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 587 {*rotrsi3_1}
     (nil))
(insn 168 167 771 6 (parallel [
            (set (reg:SI 43 r14 [orig:171 D.5781 ] [171])
                (plus:SI (reg:SI 37 r8 [orig:163 D.5781 ] [163])
                    (reg:SI 5 di [orig:170 D.5781 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (nil))
(note 771 168 770 6 NOTE_INSN_DELETED)
(insn 770 771 800 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [6 %sfp+-236 S4 A32])
        (reg:SI 43 r14 [orig:171 D.5781 ] [171])) blake_ref.c:80 90 {*movsi_internal}
     (nil))
(note 800 770 169 6 NOTE_INSN_DELETED)
(insn 169 800 170 6 (parallel [
            (set (reg:SI 6 bp [orig:389 D.5781 ] [389])
                (xor:SI (reg:SI 6 bp [orig:165 D.5781 ] [165])
                    (reg:SI 43 r14 [orig:171 D.5781 ] [171])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (nil))
(insn 170 169 556 6 (parallel [
            (set (reg:SI 6 bp [orig:173 D.5781 ] [173])
                (rotatert:SI (reg:SI 6 bp [orig:389 D.5781 ] [389])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 587 {*rotrsi3_1}
     (nil))
(insn 556 170 558 6 (set (reg:SI 39 r10 [orig:390 D.5781 ] [390])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 104 [0x68])) [6 %sfp+-168 S4 A32])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(note 558 556 792 6 NOTE_INSN_DELETED)
(note 792 558 171 6 NOTE_INSN_DELETED)
(insn 171 792 769 6 (parallel [
            (set (reg:SI 39 r10 [orig:390 D.5781 ] [390])
                (xor:SI (reg:SI 39 r10 [orig:390 D.5781 ] [390])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 48 [0x30])) [6 %sfp+-224 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (nil))
(insn 769 171 559 6 (set (reg:SI 40 r11 [orig:238 v$6 ] [238])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-264 S4 A32])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(insn 559 769 172 6 (set (reg:SI 43 r14 [orig:238 v$6 ] [238])
        (reg:SI 40 r11 [orig:238 v$6 ] [238])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(insn 172 559 560 6 (parallel [
            (set (reg:SI 39 r10 [orig:391 D.5781 ] [391])
                (plus:SI (reg:SI 39 r10 [orig:390 D.5781 ] [390])
                    (reg:SI 43 r14 [orig:238 v$6 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (nil))
(note 560 172 791 6 NOTE_INSN_DELETED)
(note 791 560 173 6 NOTE_INSN_DELETED)
(insn 173 791 174 6 (parallel [
            (set (reg:SI 39 r10 [orig:176 D.5781 ] [176])
                (plus:SI (reg:SI 39 r10 [orig:391 D.5781 ] [391])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (nil))
(insn 174 173 562 6 (parallel [
            (set (reg:SI 3 bx [orig:392 D.5781 ] [392])
                (xor:SI (reg:SI 3 bx [orig:392 D.5781 ] [392])
                    (reg:SI 39 r10 [orig:176 D.5781 ] [176])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (nil))
(insn 562 174 175 6 (set (reg:SI 37 r8 [orig:392 D.5781 ] [392])
        (reg:SI 3 bx [orig:392 D.5781 ] [392])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(insn 175 562 563 6 (parallel [
            (set (reg:SI 37 r8 [orig:178 D.5781 ] [178])
                (rotate:SI (reg:SI 37 r8 [orig:392 D.5781 ] [392])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 586 {*rotlsi3_1}
     (nil))
(insn 563 175 176 6 (set (reg:SI 3 bx [orig:179 D.5781 ] [179])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-240 S4 A32])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(insn 176 563 564 6 (parallel [
            (set (reg:SI 3 bx [orig:179 D.5781 ] [179])
                (plus:SI (reg:SI 3 bx [orig:179 D.5781 ] [179])
                    (reg:SI 37 r8 [orig:178 D.5781 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (nil))
(insn 564 176 177 6 (set (reg:SI 43 r14 [orig:179 D.5781 ] [179])
        (reg:SI 3 bx [orig:179 D.5781 ] [179])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(insn 177 564 178 6 (parallel [
            (set (reg:SI 40 r11 [orig:393 D.5781 ] [393])
                (xor:SI (reg:SI 40 r11 [orig:393 D.5781 ] [393])
                    (reg:SI 43 r14 [orig:179 D.5781 ] [179])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (nil))
(insn 178 177 567 6 (parallel [
            (set (reg:SI 40 r11 [orig:181 D.5781 ] [181])
                (rotatert:SI (reg:SI 40 r11 [orig:393 D.5781 ] [393])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 587 {*rotrsi3_1}
     (nil))
(insn 567 178 569 6 (set (reg:SI 3 bx [orig:394 D.5781 ] [394])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 108 [0x6c])) [6 %sfp+-164 S4 A32])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(note 569 567 790 6 NOTE_INSN_DELETED)
(note 790 569 179 6 NOTE_INSN_DELETED)
(insn 179 790 568 6 (parallel [
            (set (reg:SI 3 bx [orig:394 D.5781 ] [394])
                (xor:SI (reg:SI 3 bx [orig:394 D.5781 ] [394])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 96 [0x60])) [6 %sfp+-176 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (nil))
(insn 568 179 180 6 (set (reg:SI 38 r9 [orig:394 D.5781 ] [394])
        (reg:SI 3 bx [orig:394 D.5781 ] [394])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(insn 180 568 181 6 (parallel [
            (set (reg:SI 38 r9 [orig:395 D.5781 ] [395])
                (plus:SI (reg:SI 38 r9 [orig:394 D.5781 ] [394])
                    (reg:SI 39 r10 [orig:176 D.5781 ] [176])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (nil))
(insn 181 180 182 6 (parallel [
            (set (reg:SI 38 r9 [orig:184 D.5781 ] [184])
                (plus:SI (reg:SI 38 r9 [orig:395 D.5781 ] [395])
                    (reg:SI 40 r11 [orig:181 D.5781 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (nil))
(insn 182 181 183 6 (parallel [
            (set (reg:SI 37 r8 [orig:396 D.5781 ] [396])
                (xor:SI (reg:SI 37 r8 [orig:178 D.5781 ] [178])
                    (reg:SI 38 r9 [orig:184 D.5781 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (nil))
(insn 183 182 184 6 (parallel [
            (set (reg:SI 37 r8 [orig:186 D.5781 ] [186])
                (rotatert:SI (reg:SI 37 r8 [orig:396 D.5781 ] [396])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 587 {*rotrsi3_1}
     (nil))
(insn 184 183 570 6 (parallel [
            (set (reg:SI 43 r14 [orig:187 D.5781 ] [187])
                (plus:SI (reg:SI 43 r14 [orig:179 D.5781 ] [179])
                    (reg:SI 37 r8 [orig:186 D.5781 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (nil))
(insn 570 184 185 6 (set (reg:SI 3 bx [orig:397 D.5781 ] [397])
        (reg:SI 40 r11 [orig:181 D.5781 ] [181])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(insn 185 570 186 6 (parallel [
            (set (reg:SI 3 bx [orig:397 D.5781 ] [397])
                (xor:SI (reg:SI 3 bx [orig:397 D.5781 ] [397])
                    (reg:SI 43 r14 [orig:187 D.5781 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (nil))
(insn 186 185 572 6 (parallel [
            (set (reg:SI 3 bx [orig:189 D.5781 ] [189])
                (rotatert:SI (reg:SI 3 bx [orig:397 D.5781 ] [397])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 587 {*rotrsi3_1}
     (nil))
(insn 572 186 574 6 (set (reg:SI 39 r10 [orig:398 D.5781 ] [398])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [6 %sfp+-160 S4 A32])) blake_ref.c:82 90 {*movsi_internal}
     (nil))
(note 574 572 789 6 NOTE_INSN_DELETED)
(note 789 574 187 6 NOTE_INSN_DELETED)
(insn 187 789 768 6 (parallel [
            (set (reg:SI 39 r10 [orig:398 D.5781 ] [398])
                (xor:SI (reg:SI 39 r10 [orig:398 D.5781 ] [398])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 52 [0x34])) [6 %sfp+-220 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (nil))
(insn 768 187 188 6 (set (reg:SI 44 r15 [orig:256 v$7 ] [256])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [6 %sfp+-260 S4 A32])) blake_ref.c:82 90 {*movsi_internal}
     (nil))
(insn 188 768 576 6 (parallel [
            (set (reg:SI 39 r10 [orig:399 D.5781 ] [399])
                (plus:SI (reg:SI 39 r10 [orig:398 D.5781 ] [398])
                    (reg:SI 44 r15 [orig:256 v$7 ] [256])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (nil))
(note 576 188 788 6 NOTE_INSN_DELETED)
(note 788 576 189 6 NOTE_INSN_DELETED)
(insn 189 788 577 6 (parallel [
            (set (reg:SI 39 r10 [orig:192 D.5781 ] [192])
                (plus:SI (reg:SI 39 r10 [orig:399 D.5781 ] [399])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 20 [0x14])) [6 %sfp+-252 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (nil))
(insn 577 189 190 6 (set (reg:SI 41 r12 [orig:400 D.5781 ] [400])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 28 [0x1c])) [6 %sfp+-244 S4 A32])) blake_ref.c:82 90 {*movsi_internal}
     (nil))
(insn 190 577 191 6 (parallel [
            (set (reg:SI 41 r12 [orig:400 D.5781 ] [400])
                (xor:SI (reg:SI 41 r12 [orig:400 D.5781 ] [400])
                    (reg:SI 39 r10 [orig:192 D.5781 ] [192])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (nil))
(insn 191 190 579 6 (parallel [
            (set (reg:SI 41 r12 [orig:194 D.5781 ] [194])
                (rotate:SI (reg:SI 41 r12 [orig:400 D.5781 ] [400])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 586 {*rotlsi3_1}
     (nil))
(insn 579 191 192 6 (set (reg:SI 42 r13 [orig:195 D.5781 ] [195])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-248 S4 A32])) blake_ref.c:82 90 {*movsi_internal}
     (nil))
(insn 192 579 581 6 (parallel [
            (set (reg:SI 42 r13 [orig:195 D.5781 ] [195])
                (plus:SI (reg:SI 42 r13 [orig:195 D.5781 ] [195])
                    (reg:SI 41 r12 [orig:194 D.5781 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (nil))
(insn 581 192 193 6 (set (reg:SI 40 r11 [orig:401 D.5781 ] [401])
        (reg:SI 44 r15 [orig:256 v$7 ] [256])) blake_ref.c:82 90 {*movsi_internal}
     (nil))
(insn 193 581 194 6 (parallel [
            (set (reg:SI 40 r11 [orig:401 D.5781 ] [401])
                (xor:SI (reg:SI 40 r11 [orig:401 D.5781 ] [401])
                    (reg:SI 42 r13 [orig:195 D.5781 ] [195])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (nil))
(insn 194 193 583 6 (parallel [
            (set (reg:SI 40 r11 [orig:197 D.5781 ] [197])
                (rotatert:SI (reg:SI 40 r11 [orig:401 D.5781 ] [401])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 587 {*rotrsi3_1}
     (nil))
(insn 583 194 585 6 (set (reg:SI 44 r15 [orig:402 D.5781 ] [402])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 116 [0x74])) [6 %sfp+-156 S4 A32])) blake_ref.c:82 90 {*movsi_internal}
     (nil))
(note 585 583 775 6 NOTE_INSN_DELETED)
(note 775 585 195 6 NOTE_INSN_DELETED)
(insn 195 775 196 6 (parallel [
            (set (reg:SI 44 r15 [orig:402 D.5781 ] [402])
                (xor:SI (reg:SI 44 r15 [orig:402 D.5781 ] [402])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 56 [0x38])) [6 %sfp+-216 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (nil))
(insn 196 195 197 6 (parallel [
            (set (reg:SI 39 r10 [orig:403 D.5781 ] [403])
                (plus:SI (reg:SI 39 r10 [orig:192 D.5781 ] [192])
                    (reg:SI 44 r15 [orig:402 D.5781 ] [402])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (nil))
(insn 197 196 198 6 (parallel [
            (set (reg:SI 39 r10 [orig:200 D.5781 ] [200])
                (plus:SI (reg:SI 39 r10 [orig:403 D.5781 ] [403])
                    (reg:SI 40 r11 [orig:197 D.5781 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (nil))
(insn 198 197 199 6 (parallel [
            (set (reg:SI 41 r12 [orig:404 D.5781 ] [404])
                (xor:SI (reg:SI 41 r12 [orig:194 D.5781 ] [194])
                    (reg:SI 39 r10 [orig:200 D.5781 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (nil))
(insn 199 198 200 6 (parallel [
            (set (reg:SI 41 r12 [orig:202 D.5781 ] [202])
                (rotatert:SI (reg:SI 41 r12 [orig:404 D.5781 ] [404])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 587 {*rotrsi3_1}
     (nil))
(insn 200 199 201 6 (parallel [
            (set (reg:SI 42 r13 [orig:203 D.5781 ] [203])
                (plus:SI (reg:SI 42 r13 [orig:195 D.5781 ] [195])
                    (reg:SI 41 r12 [orig:202 D.5781 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (nil))
(insn 201 200 202 6 (parallel [
            (set (reg:SI 40 r11 [orig:405 D.5781 ] [405])
                (xor:SI (reg:SI 40 r11 [orig:197 D.5781 ] [197])
                    (reg:SI 42 r13 [orig:203 D.5781 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (nil))
(insn 202 201 586 6 (parallel [
            (set (reg:SI 40 r11 [orig:205 D.5781 ] [205])
                (rotatert:SI (reg:SI 40 r11 [orig:405 D.5781 ] [405])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 587 {*rotrsi3_1}
     (nil))
(insn 586 202 588 6 (set (reg:SI 44 r15 [orig:406 D.5781 ] [406])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 120 [0x78])) [6 %sfp+-152 S4 A32])) blake_ref.c:85 90 {*movsi_internal}
     (nil))
(note 588 586 776 6 NOTE_INSN_DELETED)
(note 776 588 203 6 NOTE_INSN_DELETED)
(insn 203 776 204 6 (parallel [
            (set (reg:SI 44 r15 [orig:406 D.5781 ] [406])
                (xor:SI (reg:SI 44 r15 [orig:406 D.5781 ] [406])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 60 [0x3c])) [6 %sfp+-212 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (nil))
(insn 204 203 205 6 (parallel [
            (set (reg:SI 1 dx [orig:407 D.5781 ] [407])
                (plus:SI (reg:SI 1 dx [orig:152 D.5781 ] [152])
                    (reg:SI 44 r15 [orig:406 D.5781 ] [406])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (nil))
(insn 205 204 206 6 (parallel [
            (set (reg:SI 1 dx [orig:209 D.5781 ] [209])
                (plus:SI (reg:SI 1 dx [orig:407 D.5781 ] [407])
                    (reg:SI 6 bp [orig:173 D.5781 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (nil))
(insn 206 205 207 6 (parallel [
            (set (reg:SI 41 r12 [orig:408 D.5781 ] [408])
                (xor:SI (reg:SI 41 r12 [orig:202 D.5781 ] [202])
                    (reg:SI 1 dx [orig:209 D.5781 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (nil))
(insn 207 206 208 6 (parallel [
            (set (reg:SI 41 r12 [orig:211 D.5781 ] [211])
                (rotate:SI (reg:SI 41 r12 [orig:408 D.5781 ] [408])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 586 {*rotlsi3_1}
     (nil))
(insn 208 207 209 6 (parallel [
            (set (reg:SI 43 r14 [orig:212 D.5781 ] [212])
                (plus:SI (reg:SI 43 r14 [orig:187 D.5781 ] [187])
                    (reg:SI 41 r12 [orig:211 D.5781 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (nil))
(insn 209 208 210 6 (parallel [
            (set (reg:SI 6 bp [orig:409 D.5781 ] [409])
                (xor:SI (reg:SI 6 bp [orig:173 D.5781 ] [173])
                    (reg:SI 43 r14 [orig:212 D.5781 ] [212])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (nil))
(insn 210 209 589 6 (parallel [
            (set (reg:SI 6 bp [orig:214 D.5781 ] [214])
                (rotatert:SI (reg:SI 6 bp [orig:409 D.5781 ] [409])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 587 {*rotrsi3_1}
     (nil))
(insn 589 210 591 6 (set (reg:SI 44 r15 [orig:410 D.5781 ] [410])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 124 [0x7c])) [6 %sfp+-148 S4 A32])) blake_ref.c:85 90 {*movsi_internal}
     (nil))
(note 591 589 777 6 NOTE_INSN_DELETED)
(note 777 591 211 6 NOTE_INSN_DELETED)
(insn 211 777 212 6 (parallel [
            (set (reg:SI 44 r15 [orig:410 D.5781 ] [410])
                (xor:SI (reg:SI 44 r15 [orig:410 D.5781 ] [410])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 64 [0x40])) [6 %sfp+-208 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (nil))
(insn 212 211 213 6 (parallel [
            (set (reg:SI 1 dx [orig:411 D.5781 ] [411])
                (plus:SI (reg:SI 1 dx [orig:209 D.5781 ] [209])
                    (reg:SI 44 r15 [orig:410 D.5781 ] [410])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (nil))
(insn 213 212 767 6 (parallel [
            (set (reg:SI 44 r15 [orig:217 v$0 ] [217])
                (plus:SI (reg:SI 1 dx [orig:411 D.5781 ] [411])
                    (reg:SI 6 bp [orig:214 D.5781 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (nil))
(insn 767 213 214 6 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 44 r15 [orig:217 v$0 ] [217])) blake_ref.c:85 90 {*movsi_internal}
     (nil))
(insn 214 767 215 6 (parallel [
            (set (reg:SI 41 r12 [orig:412 D.5781 ] [412])
                (xor:SI (reg:SI 41 r12 [orig:211 D.5781 ] [211])
                    (reg:SI 44 r15 [orig:217 v$0 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (nil))
(insn 215 214 766 6 (parallel [
            (set (reg:SI 41 r12 [orig:219 v$15 ] [219])
                (rotatert:SI (reg:SI 41 r12 [orig:219 v$15 ] [219])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 587 {*rotrsi3_1}
     (nil))
(insn 766 215 216 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 28 [0x1c])) [6 %sfp+-244 S4 A32])
        (reg:SI 41 r12 [orig:219 v$15 ] [219])) blake_ref.c:85 90 {*movsi_internal}
     (nil))
(insn 216 766 765 6 (parallel [
            (set (reg:SI 43 r14 [orig:220 v$10 ] [220])
                (plus:SI (reg:SI 43 r14 [orig:220 v$10 ] [220])
                    (reg:SI 41 r12 [orig:219 v$15 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (nil))
(insn 765 216 217 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-240 S4 A32])
        (reg:SI 43 r14 [orig:220 v$10 ] [220])) blake_ref.c:85 90 {*movsi_internal}
     (nil))
(insn 217 765 218 6 (parallel [
            (set (reg:SI 6 bp [orig:413 D.5781 ] [413])
                (xor:SI (reg:SI 6 bp [orig:214 D.5781 ] [214])
                    (reg:SI 43 r14 [orig:220 v$10 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (nil))
(insn 218 217 601 6 (parallel [
            (set (reg:SI 6 bp [orig:222 v$5 ] [222])
                (rotatert:SI (reg:SI 6 bp [orig:222 v$5 ] [222])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 587 {*rotrsi3_1}
     (nil))
(insn 601 218 602 6 (set (reg:SI 43 r14 [orig:222 v$5 ] [222])
        (reg:SI 6 bp [orig:222 v$5 ] [222])) blake_ref.c:85 90 {*movsi_internal}
     (nil))
(insn 602 601 604 6 (set (reg:SI 1 dx [orig:414 D.5781 ] [414])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [6 %sfp+-144 S4 A32])) blake_ref.c:86 90 {*movsi_internal}
     (nil))
(note 604 602 787 6 NOTE_INSN_DELETED)
(note 787 604 219 6 NOTE_INSN_DELETED)
(insn 219 787 220 6 (parallel [
            (set (reg:SI 1 dx [orig:414 D.5781 ] [414])
                (xor:SI (reg:SI 1 dx [orig:414 D.5781 ] [414])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 68 [0x44])) [6 %sfp+-204 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (nil))
(insn 220 219 221 6 (parallel [
            (set (reg:SI 0 ax [orig:415 D.5781 ] [415])
                (plus:SI (reg:SI 0 ax [orig:168 D.5781 ] [168])
                    (reg:SI 1 dx [orig:414 D.5781 ] [414])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (nil))
(insn 221 220 222 6 (parallel [
            (set (reg:SI 0 ax [orig:225 D.5781 ] [225])
                (plus:SI (reg:SI 0 ax [orig:415 D.5781 ] [415])
                    (reg:SI 3 bx [orig:189 D.5781 ] [189])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (nil))
(insn 222 221 223 6 (parallel [
            (set (reg:SI 2 cx [orig:416 D.5781 ] [416])
                (xor:SI (reg:SI 2 cx [orig:154 D.5781 ] [154])
                    (reg:SI 0 ax [orig:225 D.5781 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (nil))
(insn 223 222 224 6 (parallel [
            (set (reg:SI 2 cx [orig:227 D.5781 ] [227])
                (rotate:SI (reg:SI 2 cx [orig:416 D.5781 ] [416])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 586 {*rotlsi3_1}
     (nil))
(insn 224 223 225 6 (parallel [
            (set (reg:SI 42 r13 [orig:228 D.5781 ] [228])
                (plus:SI (reg:SI 42 r13 [orig:203 D.5781 ] [203])
                    (reg:SI 2 cx [orig:227 D.5781 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (nil))
(insn 225 224 226 6 (parallel [
            (set (reg:SI 3 bx [orig:417 D.5781 ] [417])
                (xor:SI (reg:SI 3 bx [orig:189 D.5781 ] [189])
                    (reg:SI 42 r13 [orig:228 D.5781 ] [228])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (nil))
(insn 226 225 605 6 (parallel [
            (set (reg:SI 3 bx [orig:230 D.5781 ] [230])
                (rotatert:SI (reg:SI 3 bx [orig:417 D.5781 ] [417])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 587 {*rotrsi3_1}
     (nil))
(insn 605 226 607 6 (set (reg:SI 1 dx [orig:418 D.5781 ] [418])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 132 [0x84])) [6 %sfp+-140 S4 A32])) blake_ref.c:86 90 {*movsi_internal}
     (nil))
(note 607 605 786 6 NOTE_INSN_DELETED)
(note 786 607 227 6 NOTE_INSN_DELETED)
(insn 227 786 228 6 (parallel [
            (set (reg:SI 1 dx [orig:418 D.5781 ] [418])
                (xor:SI (reg:SI 1 dx [orig:418 D.5781 ] [418])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 72 [0x48])) [6 %sfp+-200 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (nil))
(insn 228 227 229 6 (parallel [
            (set (reg:SI 0 ax [orig:419 D.5781 ] [419])
                (plus:SI (reg:SI 0 ax [orig:225 D.5781 ] [225])
                    (reg:SI 1 dx [orig:418 D.5781 ] [418])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (nil))
(insn 229 228 764 6 (parallel [
            (set (reg:SI 44 r15 [orig:233 v$1 ] [233])
                (plus:SI (reg:SI 0 ax [orig:419 D.5781 ] [419])
                    (reg:SI 3 bx [orig:230 D.5781 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (nil))
(insn 764 229 230 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [6 %sfp+-268 S4 A32])
        (reg:SI 44 r15 [orig:233 v$1 ] [233])) blake_ref.c:86 90 {*movsi_internal}
     (nil))
(insn 230 764 231 6 (parallel [
            (set (reg:SI 2 cx [orig:420 D.5781 ] [420])
                (xor:SI (reg:SI 2 cx [orig:227 D.5781 ] [227])
                    (reg:SI 44 r15 [orig:233 v$1 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (nil))
(insn 231 230 611 6 (parallel [
            (set (reg:SI 2 cx [orig:235 v$12 ] [235])
                (rotatert:SI (reg:SI 2 cx [orig:235 v$12 ] [235])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 587 {*rotrsi3_1}
     (nil))
(insn 611 231 232 6 (set (reg:SI 6 bp [orig:235 v$12 ] [235])
        (reg:SI 2 cx [orig:235 v$12 ] [235])) blake_ref.c:86 90 {*movsi_internal}
     (nil))
(insn 232 611 763 6 (parallel [
            (set (reg:SI 2 cx [orig:206 v$11 ] [206])
                (plus:SI (reg:SI 42 r13 [orig:228 D.5781 ] [228])
                    (reg:SI 6 bp [orig:235 v$12 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (nil))
(insn 763 232 233 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-248 S4 A32])
        (reg:SI 2 cx [orig:206 v$11 ] [206])) blake_ref.c:86 90 {*movsi_internal}
     (nil))
(insn 233 763 234 6 (parallel [
            (set (reg:SI 3 bx [orig:421 D.5781 ] [421])
                (xor:SI (reg:SI 3 bx [orig:230 D.5781 ] [230])
                    (reg:SI 2 cx [orig:206 v$11 ] [206])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (nil))
(insn 234 233 615 6 (parallel [
            (set (reg:SI 3 bx [orig:238 v$6 ] [238])
                (rotatert:SI (reg:SI 3 bx [orig:238 v$6 ] [238])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 587 {*rotrsi3_1}
     (nil))
(insn 615 234 616 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-264 S4 A32])
        (reg:SI 3 bx [orig:238 v$6 ] [238])) blake_ref.c:86 90 {*movsi_internal}
     (nil))
(insn 616 615 618 6 (set (reg:SI 0 ax [orig:422 D.5781 ] [422])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 136 [0x88])) [6 %sfp+-136 S4 A32])) blake_ref.c:87 90 {*movsi_internal}
     (nil))
(note 618 616 785 6 NOTE_INSN_DELETED)
(note 785 618 235 6 NOTE_INSN_DELETED)
(insn 235 785 617 6 (parallel [
            (set (reg:SI 0 ax [orig:422 D.5781 ] [422])
                (xor:SI (reg:SI 0 ax [orig:422 D.5781 ] [422])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 76 [0x4c])) [6 %sfp+-196 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (nil))
(insn 617 235 236 6 (set (reg:SI 0 ax [orig:422 D.5781 ] [422])
        (reg:SI 0 ax [orig:422 D.5781 ] [422])) blake_ref.c:87 90 {*movsi_internal}
     (nil))
(insn 236 617 237 6 (parallel [
            (set (reg:SI 0 ax [orig:423 D.5781 ] [423])
                (plus:SI (reg:SI 0 ax [orig:422 D.5781 ] [422])
                    (reg:SI 38 r9 [orig:184 D.5781 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (nil))
(insn 237 236 238 6 (parallel [
            (set (reg:SI 0 ax [orig:241 D.5781 ] [241])
                (plus:SI (reg:SI 0 ax [orig:423 D.5781 ] [423])
                    (reg:SI 40 r11 [orig:205 D.5781 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (nil))
(insn 238 237 239 6 (parallel [
            (set (reg:SI 5 di [orig:424 D.5781 ] [424])
                (xor:SI (reg:SI 5 di [orig:170 D.5781 ] [170])
                    (reg:SI 0 ax [orig:241 D.5781 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (nil))
(insn 239 238 619 6 (parallel [
            (set (reg:SI 5 di [orig:243 D.5781 ] [243])
                (rotate:SI (reg:SI 5 di [orig:424 D.5781 ] [424])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 586 {*rotlsi3_1}
     (nil))
(insn 619 239 240 6 (set (reg:SI 38 r9 [orig:155 D.5781 ] [155])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-232 S4 A32])) blake_ref.c:87 90 {*movsi_internal}
     (nil))
(insn 240 619 241 6 (parallel [
            (set (reg:SI 38 r9 [orig:244 D.5781 ] [244])
                (plus:SI (reg:SI 38 r9 [orig:155 D.5781 ] [155])
                    (reg:SI 5 di [orig:243 D.5781 ] [243])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (nil))
(insn 241 240 242 6 (parallel [
            (set (reg:SI 40 r11 [orig:425 D.5781 ] [425])
                (xor:SI (reg:SI 40 r11 [orig:205 D.5781 ] [205])
                    (reg:SI 38 r9 [orig:244 D.5781 ] [244])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (nil))
(insn 242 241 620 6 (parallel [
            (set (reg:SI 40 r11 [orig:247 D.5781 ] [247])
                (rotatert:SI (reg:SI 40 r11 [orig:425 D.5781 ] [425])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 587 {*rotrsi3_1}
     (nil))
(insn 620 242 622 6 (set (reg:SI 1 dx [orig:426 D.5781 ] [426])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 140 [0x8c])) [6 %sfp+-132 S4 A32])) blake_ref.c:87 90 {*movsi_internal}
     (nil))
(note 622 620 784 6 NOTE_INSN_DELETED)
(note 784 622 243 6 NOTE_INSN_DELETED)
(insn 243 784 244 6 (parallel [
            (set (reg:SI 1 dx [orig:426 D.5781 ] [426])
                (xor:SI (reg:SI 1 dx [orig:426 D.5781 ] [426])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 80 [0x50])) [6 %sfp+-192 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (nil))
(insn 244 243 245 6 (parallel [
            (set (reg:SI 0 ax [orig:427 D.5781 ] [427])
                (plus:SI (reg:SI 0 ax [orig:241 D.5781 ] [241])
                    (reg:SI 1 dx [orig:426 D.5781 ] [426])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (nil))
(insn 245 244 762 6 (parallel [
            (set (reg:SI 3 bx [orig:250 v$2 ] [250])
                (plus:SI (reg:SI 0 ax [orig:427 D.5781 ] [427])
                    (reg:SI 40 r11 [orig:247 D.5781 ] [247])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (nil))
(insn 762 245 246 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])
        (reg:SI 3 bx [orig:250 v$2 ] [250])) blake_ref.c:87 90 {*movsi_internal}
     (nil))
(insn 246 762 247 6 (parallel [
            (set (reg:SI 5 di [orig:428 D.5781 ] [428])
                (xor:SI (reg:SI 5 di [orig:243 D.5781 ] [243])
                    (reg:SI 3 bx [orig:250 v$2 ] [250])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (nil))
(insn 247 246 248 6 (parallel [
            (set (reg:SI 5 di [orig:252 v$13 ] [252])
                (rotatert:SI (reg:SI 5 di [orig:428 D.5781 ] [428])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 587 {*rotrsi3_1}
     (nil))
(insn 248 247 249 6 (parallel [
            (set (reg:SI 38 r9 [orig:254 v$8 ] [254])
                (plus:SI (reg:SI 38 r9 [orig:244 D.5781 ] [244])
                    (reg:SI 5 di [orig:252 v$13 ] [252])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (nil))
(insn 249 248 250 6 (parallel [
            (set (reg:SI 40 r11 [orig:429 D.5781 ] [429])
                (xor:SI (reg:SI 40 r11 [orig:247 D.5781 ] [247])
                    (reg:SI 38 r9 [orig:254 v$8 ] [254])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (nil))
(insn 250 249 626 6 (parallel [
            (set (reg:SI 40 r11 [orig:256 v$7 ] [256])
                (rotatert:SI (reg:SI 40 r11 [orig:256 v$7 ] [256])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 587 {*rotrsi3_1}
     (nil))
(insn 626 250 627 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [6 %sfp+-260 S4 A32])
        (reg:SI 40 r11 [orig:256 v$7 ] [256])) blake_ref.c:87 90 {*movsi_internal}
     (nil))
(insn 627 626 629 6 (set (reg:SI 0 ax [orig:430 D.5781 ] [430])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [6 %sfp+-128 S4 A32])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(note 629 627 783 6 NOTE_INSN_DELETED)
(note 783 629 251 6 NOTE_INSN_DELETED)
(insn 251 783 628 6 (parallel [
            (set (reg:SI 0 ax [orig:430 D.5781 ] [430])
                (xor:SI (reg:SI 0 ax [orig:430 D.5781 ] [430])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 84 [0x54])) [6 %sfp+-188 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (nil))
(insn 628 251 252 6 (set (reg:SI 0 ax [orig:430 D.5781 ] [430])
        (reg:SI 0 ax [orig:430 D.5781 ] [430])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 252 628 761 6 (parallel [
            (set (reg:SI 39 r10 [orig:431 D.5781 ] [431])
                (plus:SI (reg:SI 39 r10 [orig:200 D.5781 ] [200])
                    (reg:SI 0 ax [orig:430 D.5781 ] [430])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (nil))
(insn 761 252 630 6 (set (reg:SI 1 dx [orig:157 D.5781 ] [157])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 152 [0x98])) [6 %sfp+-120 S4 A32])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 630 761 253 6 (set (reg:SI 0 ax [orig:157 D.5781 ] [157])
        (reg:SI 1 dx [orig:157 D.5781 ] [157])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 253 630 631 6 (parallel [
            (set (reg:SI 39 r10 [orig:260 D.5781 ] [260])
                (plus:SI (reg:SI 39 r10 [orig:431 D.5781 ] [431])
                    (reg:SI 0 ax [orig:157 D.5781 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (nil))
(insn 631 253 254 6 (set (reg:SI 3 bx [orig:432 D.5781 ] [432])
        (reg:SI 37 r8 [orig:186 D.5781 ] [186])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 254 631 255 6 (parallel [
            (set (reg:SI 3 bx [orig:432 D.5781 ] [432])
                (xor:SI (reg:SI 3 bx [orig:432 D.5781 ] [432])
                    (reg:SI 39 r10 [orig:260 D.5781 ] [260])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (nil))
(insn 255 254 633 6 (parallel [
            (set (reg:SI 3 bx [orig:262 D.5781 ] [262])
                (rotate:SI (reg:SI 3 bx [orig:432 D.5781 ] [432])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 586 {*rotlsi3_1}
     (nil))
(insn 633 255 256 6 (set (reg:SI 0 ax [orig:171 D.5781 ] [171])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [6 %sfp+-236 S4 A32])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 256 633 634 6 (parallel [
            (set (reg:SI 0 ax [orig:264 D.5781 ] [264])
                (plus:SI (reg:SI 0 ax [orig:171 D.5781 ] [171])
                    (reg:SI 3 bx [orig:262 D.5781 ] [262])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (nil))
(insn 634 256 257 6 (set (reg:SI 37 r8 [orig:433 D.5781 ] [433])
        (reg:SI 1 dx [orig:157 D.5781 ] [157])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 257 634 258 6 (parallel [
            (set (reg:SI 37 r8 [orig:433 D.5781 ] [433])
                (xor:SI (reg:SI 37 r8 [orig:433 D.5781 ] [433])
                    (reg:SI 0 ax [orig:264 D.5781 ] [264])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (nil))
(insn 258 257 636 6 (parallel [
            (set (reg:SI 37 r8 [orig:266 D.5781 ] [266])
                (rotatert:SI (reg:SI 37 r8 [orig:433 D.5781 ] [433])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 587 {*rotrsi3_1}
     (nil))
(insn 636 258 638 6 (set (reg:SI 1 dx [orig:434 D.5781 ] [434])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 148 [0x94])) [6 %sfp+-124 S4 A32])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(note 638 636 782 6 NOTE_INSN_DELETED)
(note 782 638 259 6 NOTE_INSN_DELETED)
(insn 259 782 260 6 (parallel [
            (set (reg:SI 1 dx [orig:434 D.5781 ] [434])
                (xor:SI (reg:SI 1 dx [orig:434 D.5781 ] [434])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 88 [0x58])) [6 %sfp+-184 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (nil))
(insn 260 259 261 6 (parallel [
            (set (reg:SI 39 r10 [orig:435 D.5781 ] [435])
                (plus:SI (reg:SI 39 r10 [orig:260 D.5781 ] [260])
                    (reg:SI 1 dx [orig:434 D.5781 ] [434])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (nil))
(insn 261 260 760 6 (parallel [
            (set (reg:SI 1 dx [orig:270 v$3 ] [270])
                (plus:SI (reg:SI 39 r10 [orig:435 D.5781 ] [435])
                    (reg:SI 37 r8 [orig:266 D.5781 ] [266])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (nil))
(insn 760 261 262 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 20 [0x14])) [6 %sfp+-252 S4 A32])
        (reg:SI 1 dx [orig:270 v$3 ] [270])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 262 760 263 6 (parallel [
            (set (reg:SI 3 bx [orig:436 D.5781 ] [436])
                (xor:SI (reg:SI 3 bx [orig:262 D.5781 ] [262])
                    (reg:SI 1 dx [orig:270 v$3 ] [270])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (nil))
(insn 263 262 264 6 (parallel [
            (set (reg:SI 3 bx [orig:273 v$14 ] [273])
                (rotatert:SI (reg:SI 3 bx [orig:436 D.5781 ] [436])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 587 {*rotrsi3_1}
     (nil))
(insn 264 263 641 6 (parallel [
            (set (reg:SI 0 ax [orig:274 v$9 ] [274])
                (plus:SI (reg:SI 0 ax [orig:264 D.5781 ] [264])
                    (reg:SI 3 bx [orig:273 v$14 ] [273])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (nil))
(insn 641 264 759 6 (set (reg:SI 0 ax [orig:274 v$9 ] [274])
        (reg:SI 0 ax [orig:274 v$9 ] [274])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 759 641 642 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [6 %sfp+-236 S4 A32])
        (reg:SI 0 ax [orig:274 v$9 ] [274])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 642 759 265 6 (set (reg:SI 0 ax [orig:274 v$9 ] [274])
        (reg:SI 0 ax [orig:274 v$9 ] [274])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 265 642 266 6 (parallel [
            (set (reg:SI 37 r8 [orig:437 D.5781 ] [437])
                (xor:SI (reg:SI 37 r8 [orig:266 D.5781 ] [266])
                    (reg:SI 0 ax [orig:274 v$9 ] [274])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (nil))
(insn 266 265 267 6 (parallel [
            (set (reg:SI 37 r8 [orig:276 v$4 ] [276])
                (rotatert:SI (reg:SI 37 r8 [orig:437 D.5781 ] [437])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 587 {*rotrsi3_1}
     (nil))
(note 267 266 268 6 NOTE_INSN_DELETED)
(insn 268 267 643 6 (parallel [
            (set (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(note 643 268 780 6 NOTE_INSN_DELETED)
(note 780 643 269 6 NOTE_INSN_DELETED)
(insn 269 780 781 6 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                                (const_int 156 [0x9c])) [6 %sfp+-116 S4 A32])
                        (const_int -1 [0xffffffffffffffff]))
                    (const_int 0 [0])))
            (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                        (const_int 156 [0x9c])) [6 %sfp+-116 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 156 [0x9c])) [6 %sfp+-116 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
        ]) blake_ref.c:76 225 {*addsi_2}
     (nil))
(note 781 269 644 6 NOTE_INSN_DELETED)
(note 644 781 270 6 NOTE_INSN_DELETED)
(jump_insn 270 644 271 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 372)
            (pc))) blake_ref.c:76 612 {*jcc_1}
     (int_list:REG_BR_PROB 667 (nil))
 -> 372)
;;  succ:       7 [93.3%]  (FALLTHRU)
;;              8 [6.7%]  (LOOP_EXIT)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]

;; basic block 7, loop depth 0, count 0, freq 8710, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [93.3%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  kill	
(note 271 270 273 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 273 271 274 7 NOTE_INSN_DELETED)
(insn 274 273 275 7 (set (reg:DI 0 ax [orig:438 D.5782 ] [438])
        (zero_extend:DI (mem:QI (reg:DI 4 si [orig:281 ivtmp.77 ] [281]) [0 MEM[base: _514, offset: 0B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 275 274 276 7 (set (reg:SI 40 r11 [orig:293 D.5786 ] [293])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:438 D.5782 ] [438])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(note 276 275 277 7 NOTE_INSN_DELETED)
(insn 277 276 278 7 (set (reg/f:DI 2 cx [439])
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)
        (nil)))
(insn 278 277 279 7 (set (reg:DI 1 dx [orig:440 D.5782 ] [440])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 1 [0x1])) [0 MEM[base: _514, offset: 1B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 279 278 645 7 (set (reg:SI 39 r10 [orig:296 D.5787 ] [296])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:440 D.5782 ] [440])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:440 D.5782 ] [440])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 645 279 281 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-232 S4 A32])
        (reg:SI 39 r10 [orig:296 D.5787 ] [296])) 90 {*movsi_internal}
     (nil))
(insn 281 645 284 7 (set (reg:SI 1 dx [orig:297 D.5786 ] [297])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:440 D.5782 ] [440])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 284 281 285 7 (set (reg:SI 41 r12 [orig:298 D.5787 ] [298])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:438 D.5782 ] [438])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:438 D.5782 ] [438])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(note 285 284 286 7 NOTE_INSN_DELETED)
(insn 286 285 287 7 (set (reg:DI 0 ax [orig:444 D.5782 ] [444])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 2 [0x2])) [0 MEM[base: _514, offset: 2B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 287 286 288 7 (set (reg:SI 39 r10 [orig:301 D.5786 ] [301])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:444 D.5782 ] [444])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(note 288 287 290 7 NOTE_INSN_DELETED)
(insn 290 288 291 7 (set (reg:DI 42 r13 [orig:446 D.5782 ] [446])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 3 [0x3])) [0 MEM[base: _514, offset: 3B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 291 290 646 7 (set (reg:SI 44 r15 [orig:304 D.5787 ] [304])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:446 D.5782 ] [446])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:446 D.5782 ] [446])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 646 291 293 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 44 [0x2c])) [6 %sfp+-228 S4 A32])
        (reg:SI 44 r15 [orig:304 D.5787 ] [304])) 90 {*movsi_internal}
     (nil))
(insn 293 646 647 7 (set (reg:SI 44 r15 [orig:305 D.5786 ] [305])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:446 D.5782 ] [446])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 647 293 296 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 100 [0x64])) [6 %sfp+-172 S4 A32])
        (reg:SI 44 r15 [orig:305 D.5786 ] [305])) 90 {*movsi_internal}
     (nil))
(insn 296 647 779 7 (set (reg:SI 0 ax [orig:306 D.5787 ] [306])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:444 D.5782 ] [444])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:444 D.5782 ] [444])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 779 296 297 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 92 [0x5c])) [6 %sfp+-180 S4 A32])
        (reg:SI 0 ax [orig:306 D.5787 ] [306])) 90 {*movsi_internal}
     (nil))
(note 297 779 298 7 NOTE_INSN_DELETED)
(insn 298 297 299 7 (set (reg:DI 42 r13 [orig:450 D.5782 ] [450])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 4 [0x4])) [0 MEM[base: _514, offset: 4B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 299 298 648 7 (set (reg:SI 44 r15 [orig:309 D.5786 ] [309])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:450 D.5782 ] [450])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 648 299 300 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 104 [0x68])) [6 %sfp+-168 S4 A32])
        (reg:SI 44 r15 [orig:309 D.5786 ] [309])) 90 {*movsi_internal}
     (nil))
(note 300 648 302 7 NOTE_INSN_DELETED)
(insn 302 300 303 7 (set (reg:DI 44 r15 [orig:452 D.5782 ] [452])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 5 [0x5])) [0 MEM[base: _514, offset: 5B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 303 302 649 7 (set (reg:SI 0 ax [orig:312 D.5787 ] [312])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:452 D.5782 ] [452])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:452 D.5782 ] [452])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 649 303 305 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [6 %sfp+-224 S4 A32])
        (reg:SI 0 ax [orig:312 D.5787 ] [312])) 90 {*movsi_internal}
     (nil))
(insn 305 649 650 7 (set (reg:SI 0 ax [orig:313 D.5786 ] [313])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 44 r15 [orig:452 D.5782 ] [452])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 650 305 308 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 108 [0x6c])) [6 %sfp+-164 S4 A32])
        (reg:SI 0 ax [orig:313 D.5786 ] [313])) 90 {*movsi_internal}
     (nil))
(insn 308 650 651 7 (set (reg:SI 0 ax [orig:314 D.5787 ] [314])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:450 D.5782 ] [450])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:450 D.5782 ] [450])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 651 308 309 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [6 %sfp+-176 S4 A32])
        (reg:SI 0 ax [orig:314 D.5787 ] [314])) 90 {*movsi_internal}
     (nil))
(note 309 651 310 7 NOTE_INSN_DELETED)
(insn 310 309 311 7 (set (reg:DI 42 r13 [orig:456 D.5782 ] [456])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 6 [0x6])) [0 MEM[base: _514, offset: 6B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 311 310 652 7 (set (reg:SI 0 ax [orig:317 D.5786 ] [317])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:456 D.5782 ] [456])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 652 311 312 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [6 %sfp+-160 S4 A32])
        (reg:SI 0 ax [orig:317 D.5786 ] [317])) 90 {*movsi_internal}
     (nil))
(note 312 652 314 7 NOTE_INSN_DELETED)
(insn 314 312 315 7 (set (reg:DI 44 r15 [orig:458 D.5782 ] [458])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 7 [0x7])) [0 MEM[base: _514, offset: 7B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 315 314 653 7 (set (reg:SI 0 ax [orig:320 D.5787 ] [320])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:458 D.5782 ] [458])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:458 D.5782 ] [458])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 653 315 317 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 52 [0x34])) [6 %sfp+-220 S4 A32])
        (reg:SI 0 ax [orig:320 D.5787 ] [320])) 90 {*movsi_internal}
     (nil))
(insn 317 653 654 7 (set (reg:SI 0 ax [orig:321 D.5786 ] [321])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 44 r15 [orig:458 D.5782 ] [458])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 654 317 320 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 116 [0x74])) [6 %sfp+-156 S4 A32])
        (reg:SI 0 ax [orig:321 D.5786 ] [321])) 90 {*movsi_internal}
     (nil))
(insn 320 654 655 7 (set (reg:SI 0 ax [orig:322 D.5787 ] [322])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:456 D.5782 ] [456])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:456 D.5782 ] [456])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 655 320 321 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [6 %sfp+-216 S4 A32])
        (reg:SI 0 ax [orig:322 D.5787 ] [322])) 90 {*movsi_internal}
     (nil))
(note 321 655 322 7 NOTE_INSN_DELETED)
(insn 322 321 323 7 (set (reg:DI 42 r13 [orig:462 D.5782 ] [462])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 8 [0x8])) [0 MEM[base: _514, offset: 8B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 323 322 656 7 (set (reg:SI 0 ax [orig:325 D.5786 ] [325])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:462 D.5782 ] [462])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 656 323 324 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 120 [0x78])) [6 %sfp+-152 S4 A32])
        (reg:SI 0 ax [orig:325 D.5786 ] [325])) 90 {*movsi_internal}
     (nil))
(note 324 656 326 7 NOTE_INSN_DELETED)
(insn 326 324 327 7 (set (reg:DI 44 r15 [orig:464 D.5782 ] [464])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 9 [0x9])) [0 MEM[base: _514, offset: 9B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 327 326 657 7 (set (reg:SI 0 ax [orig:328 D.5787 ] [328])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:464 D.5782 ] [464])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:464 D.5782 ] [464])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 657 327 329 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 60 [0x3c])) [6 %sfp+-212 S4 A32])
        (reg:SI 0 ax [orig:328 D.5787 ] [328])) 90 {*movsi_internal}
     (nil))
(insn 329 657 658 7 (set (reg:SI 0 ax [orig:329 D.5786 ] [329])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 44 r15 [orig:464 D.5782 ] [464])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 658 329 332 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 124 [0x7c])) [6 %sfp+-148 S4 A32])
        (reg:SI 0 ax [orig:329 D.5786 ] [329])) 90 {*movsi_internal}
     (nil))
(insn 332 658 659 7 (set (reg:SI 0 ax [orig:330 D.5787 ] [330])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:462 D.5782 ] [462])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:462 D.5782 ] [462])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 659 332 333 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-208 S4 A32])
        (reg:SI 0 ax [orig:330 D.5787 ] [330])) 90 {*movsi_internal}
     (nil))
(note 333 659 334 7 NOTE_INSN_DELETED)
(insn 334 333 335 7 (set (reg:DI 42 r13 [orig:468 D.5782 ] [468])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 10 [0xa])) [0 MEM[base: _514, offset: 10B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 335 334 660 7 (set (reg:SI 0 ax [orig:333 D.5786 ] [333])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:468 D.5782 ] [468])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 660 335 336 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [6 %sfp+-144 S4 A32])
        (reg:SI 0 ax [orig:333 D.5786 ] [333])) 90 {*movsi_internal}
     (nil))
(note 336 660 338 7 NOTE_INSN_DELETED)
(insn 338 336 339 7 (set (reg:DI 44 r15 [orig:470 D.5782 ] [470])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 11 [0xb])) [0 MEM[base: _514, offset: 11B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 339 338 661 7 (set (reg:SI 0 ax [orig:336 D.5787 ] [336])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:470 D.5782 ] [470])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:470 D.5782 ] [470])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 661 339 341 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 68 [0x44])) [6 %sfp+-204 S4 A32])
        (reg:SI 0 ax [orig:336 D.5787 ] [336])) 90 {*movsi_internal}
     (nil))
(insn 341 661 662 7 (set (reg:SI 0 ax [orig:337 D.5786 ] [337])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 44 r15 [orig:470 D.5782 ] [470])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 662 341 344 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 132 [0x84])) [6 %sfp+-140 S4 A32])
        (reg:SI 0 ax [orig:337 D.5786 ] [337])) 90 {*movsi_internal}
     (nil))
(insn 344 662 663 7 (set (reg:SI 0 ax [orig:338 D.5787 ] [338])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:468 D.5782 ] [468])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:468 D.5782 ] [468])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 663 344 345 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [6 %sfp+-200 S4 A32])
        (reg:SI 0 ax [orig:338 D.5787 ] [338])) 90 {*movsi_internal}
     (nil))
(note 345 663 346 7 NOTE_INSN_DELETED)
(insn 346 345 347 7 (set (reg:DI 42 r13 [orig:474 D.5782 ] [474])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 12 [0xc])) [0 MEM[base: _514, offset: 12B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 347 346 664 7 (set (reg:SI 0 ax [orig:341 D.5786 ] [341])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:474 D.5782 ] [474])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 664 347 348 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 136 [0x88])) [6 %sfp+-136 S4 A32])
        (reg:SI 0 ax [orig:341 D.5786 ] [341])) 90 {*movsi_internal}
     (nil))
(note 348 664 350 7 NOTE_INSN_DELETED)
(insn 350 348 351 7 (set (reg:DI 44 r15 [orig:476 D.5782 ] [476])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 13 [0xd])) [0 MEM[base: _514, offset: 13B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 351 350 665 7 (set (reg:SI 0 ax [orig:344 D.5787 ] [344])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:476 D.5782 ] [476])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:476 D.5782 ] [476])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 665 351 353 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 76 [0x4c])) [6 %sfp+-196 S4 A32])
        (reg:SI 0 ax [orig:344 D.5787 ] [344])) 90 {*movsi_internal}
     (nil))
(insn 353 665 666 7 (set (reg:SI 0 ax [orig:345 D.5786 ] [345])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 44 r15 [orig:476 D.5782 ] [476])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 666 353 356 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 140 [0x8c])) [6 %sfp+-132 S4 A32])
        (reg:SI 0 ax [orig:345 D.5786 ] [345])) 90 {*movsi_internal}
     (nil))
(insn 356 666 667 7 (set (reg:SI 0 ax [orig:346 D.5787 ] [346])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:474 D.5782 ] [474])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:474 D.5782 ] [474])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 667 356 357 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [6 %sfp+-192 S4 A32])
        (reg:SI 0 ax [orig:346 D.5787 ] [346])) 90 {*movsi_internal}
     (nil))
(note 357 667 358 7 NOTE_INSN_DELETED)
(insn 358 357 359 7 (set (reg:DI 42 r13 [orig:480 D.5782 ] [480])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 14 [0xe])) [0 MEM[base: _514, offset: 14B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 359 358 668 7 (set (reg:SI 0 ax [orig:349 D.5786 ] [349])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:480 D.5782 ] [480])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 668 359 360 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [6 %sfp+-128 S4 A32])
        (reg:SI 0 ax [orig:349 D.5786 ] [349])) 90 {*movsi_internal}
     (nil))
(note 360 668 362 7 NOTE_INSN_DELETED)
(insn 362 360 363 7 (set (reg:DI 44 r15 [orig:482 D.5782 ] [482])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 15 [0xf])) [0 MEM[base: _514, offset: 15B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 363 362 669 7 (set (reg:SI 0 ax [orig:352 D.5787 ] [352])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:482 D.5782 ] [482])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:482 D.5782 ] [482])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 669 363 365 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 84 [0x54])) [6 %sfp+-188 S4 A32])
        (reg:SI 0 ax [orig:352 D.5787 ] [352])) 90 {*movsi_internal}
     (nil))
(insn 365 669 670 7 (set (reg:SI 0 ax [orig:353 D.5786 ] [353])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 44 r15 [orig:482 D.5782 ] [482])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 670 365 368 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 148 [0x94])) [6 %sfp+-124 S4 A32])
        (reg:SI 0 ax [orig:353 D.5786 ] [353])) 90 {*movsi_internal}
     (nil))
(insn 368 670 671 7 (set (reg:SI 0 ax [orig:354 D.5787 ] [354])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:480 D.5782 ] [480])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:480 D.5782 ] [480])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 671 368 422 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 88 [0x58])) [6 %sfp+-184 S4 A32])
        (reg:SI 0 ax [orig:354 D.5787 ] [354])) 90 {*movsi_internal}
     (nil))
(jump_insn 422 671 423 7 (set (pc)
        (label_ref 369)) 654 {jump}
     (nil)
 -> 369)
;;  succ:       6 [100.0%]  (DFS_BACK)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]

(barrier 423 422 372)
;; basic block 8, loop depth 0, count 0, freq 667, maybe hot
;;  prev block 7, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [6.7%]  (LOOP_EXIT)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; lr  use 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; lr  def 	 0 [ax] 2 [cx] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 42 [r13] 44 [r15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; live  gen 	 0 [ax] 2 [cx] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 42 [r13] 44 [r15]
;; live  kill	
(code_label 372 423 373 8 3 "" [1 uses])
(note 373 372 441 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 441 373 442 8 (set (reg:SI 42 r13 [orig:250 v$2 ] [250])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 442 441 444 8 (set (reg:SI 2 cx [orig:252 v$13 ] [252])
        (reg:SI 5 di [orig:252 v$13 ] [252])) 90 {*movsi_internal}
     (nil))
(insn 444 442 673 8 (set (reg:SI 44 r15 [orig:270 v$3 ] [270])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 20 [0x14])) [6 %sfp+-252 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 673 444 676 8 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])
        (reg:SI 42 r13 [orig:250 v$2 ] [250])) 90 {*movsi_internal}
     (nil))
(insn 676 673 675 8 (set (reg:SI 22 xmm1 [487])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 675 676 677 8 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])
        (reg:SI 44 r15 [orig:270 v$3 ] [270])) 90 {*movsi_internal}
     (nil))
(insn 677 675 375 8 (set (reg:SI 26 xmm5 [orig:270 v$3 ] [270])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 375 677 679 8 (set (reg:V2SI 22 xmm1 [487])
        (vec_concat:V2SI (reg:SI 22 xmm1 [487])
            (reg:SI 26 xmm5 [orig:270 v$3 ] [270]))) 3671 {*vec_concatv2si}
     (nil))
(insn 679 375 681 8 (set (reg:SI 21 xmm0 [488])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 681 679 376 8 (set (reg:SI 26 xmm5 [orig:233 v$1 ] [233])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [6 %sfp+-268 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 376 681 683 8 (set (reg:V2SI 21 xmm0 [488])
        (vec_concat:V2SI (reg:SI 21 xmm0 [488])
            (reg:SI 26 xmm5 [orig:233 v$1 ] [233]))) 3671 {*vec_concatv2si}
     (nil))
(insn 683 376 377 8 (set (reg:V2SI 25 xmm4 [orig:486 vect_cst_.55 ] [486])
        (reg:V2SI 21 xmm0 [488])) 1076 {*movv2si_internal}
     (nil))
(insn 377 683 684 8 (set (reg:V4SI 25 xmm4 [orig:486 vect_cst_.55 ] [486])
        (vec_concat:V4SI (reg:V2SI 25 xmm4 [orig:486 vect_cst_.55 ] [486])
            (reg:V2SI 22 xmm1 [487]))) 3672 {*vec_concatv4si}
     (nil))
(insn 684 377 686 8 (set (reg:V4SI 22 xmm1 [orig:486 vect_cst_.55 ] [486])
        (reg:V4SI 25 xmm4 [orig:486 vect_cst_.55 ] [486])) 1194 {*movv4si_internal}
     (nil))
(insn 686 684 688 8 (set (reg:SI 23 xmm2 [490])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-240 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 688 686 378 8 (set (reg:SI 26 xmm5 [orig:206 v$11 ] [206])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-248 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 378 688 690 8 (set (reg:V2SI 23 xmm2 [490])
        (vec_concat:V2SI (reg:SI 23 xmm2 [490])
            (reg:SI 26 xmm5 [orig:206 v$11 ] [206]))) 3671 {*vec_concatv2si}
     (nil))
(insn 690 378 693 8 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 38 r9 [orig:254 v$8 ] [254])) 90 {*movsi_internal}
     (nil))
(insn 693 690 692 8 (set (reg:SI 21 xmm0 [491])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 692 693 379 8 (set (reg:SI 25 xmm4 [orig:274 v$9 ] [274])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [6 %sfp+-236 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 379 692 380 8 (set (reg:V2SI 21 xmm0 [491])
        (vec_concat:V2SI (reg:SI 21 xmm0 [491])
            (reg:SI 25 xmm4 [orig:274 v$9 ] [274]))) 3671 {*vec_concatv2si}
     (nil))
(insn 380 379 381 8 (set (reg:V4SI 21 xmm0 [orig:489 vect_cst_.58 ] [489])
        (vec_concat:V4SI (reg:V2SI 21 xmm0 [491])
            (reg:V2SI 23 xmm2 [490]))) 3672 {*vec_concatv4si}
     (nil))
(insn 381 380 695 8 (set (reg:V4SI 21 xmm0 [orig:492 D.5780 ] [492])
        (xor:V4SI (reg:V4SI 21 xmm0 [orig:489 vect_cst_.58 ] [489])
            (reg:V4SI 22 xmm1 [orig:486 vect_cst_.55 ] [486]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn 695 381 697 8 (set (reg:SI 22 xmm1 [494])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 200 [0xc8])) [6 %sfp+-72 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 697 695 382 8 (set (reg:SI 26 xmm5 [orig:139 D.5781 ] [139])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 204 [0xcc])) [6 %sfp+-68 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 382 697 699 8 (set (reg:V2SI 22 xmm1 [494])
        (vec_concat:V2SI (reg:SI 22 xmm1 [494])
            (reg:SI 26 xmm5 [orig:139 D.5781 ] [139]))) 3671 {*vec_concatv2si}
     (nil))
(insn 699 382 701 8 (set (reg:SI 24 xmm3 [495])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [6 %sfp+-80 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 701 699 383 8 (set (reg:SI 25 xmm4 [orig:137 D.5781 ] [137])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 196 [0xc4])) [6 %sfp+-76 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 383 701 384 8 (set (reg:V2SI 24 xmm3 [495])
        (vec_concat:V2SI (reg:SI 24 xmm3 [495])
            (reg:SI 25 xmm4 [orig:137 D.5781 ] [137]))) 3671 {*vec_concatv2si}
     (nil))
(insn 384 383 385 8 (set (reg:V4SI 24 xmm3 [orig:493 vect_cst_.52 ] [493])
        (vec_concat:V4SI (reg:V2SI 24 xmm3 [495])
            (reg:V2SI 22 xmm1 [494]))) 3672 {*vec_concatv4si}
     (nil))
(insn 385 384 703 8 (set (reg:V4SI 21 xmm0 [orig:496 D.5780 ] [496])
        (xor:V4SI (reg:V4SI 21 xmm0 [orig:492 D.5780 ] [492])
            (reg:V4SI 24 xmm3 [orig:493 vect_cst_.52 ] [493]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn 703 385 705 8 (set (reg:SI 23 xmm2 [498])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [6 %sfp+-104 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 705 703 386 8 (set (reg:SI 26 xmm5 [orig:131 v$3 ] [131])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 172 [0xac])) [6 %sfp+-100 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 386 705 707 8 (set (reg:V2SI 23 xmm2 [498])
        (vec_concat:V2SI (reg:SI 23 xmm2 [498])
            (reg:SI 26 xmm5 [orig:131 v$3 ] [131]))) 3671 {*vec_concatv2si}
     (nil))
(insn 707 386 709 8 (set (reg:SI 22 xmm1 [499])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [6 %sfp+-112 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 709 707 387 8 (set (reg:SI 25 xmm4 [orig:129 v$1 ] [129])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 164 [0xa4])) [6 %sfp+-108 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 387 709 388 8 (set (reg:V2SI 22 xmm1 [499])
        (vec_concat:V2SI (reg:SI 22 xmm1 [499])
            (reg:SI 25 xmm4 [orig:129 v$1 ] [129]))) 3671 {*vec_concatv2si}
     (nil))
(insn 388 387 389 8 (set (reg:V4SI 22 xmm1 [orig:497 vect_cst_.50 ] [497])
        (vec_concat:V4SI (reg:V2SI 22 xmm1 [499])
            (reg:V2SI 23 xmm2 [498]))) 3672 {*vec_concatv4si}
     (nil))
(insn 389 388 710 8 (set (reg:V4SI 21 xmm0 [orig:500 vect__497.56 ] [500])
        (xor:V4SI (reg:V4SI 21 xmm0 [orig:496 D.5780 ] [496])
            (reg:V4SI 22 xmm1 [orig:497 vect_cst_.50 ] [497]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn 710 389 390 8 (set (reg:DI 0 ax [721])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:93 89 {*movdi_internal}
     (nil))
(insn 390 710 712 8 (set (mem:V16QI (plus:DI (reg:DI 0 ax [721])
                (const_int 16 [0x10])) [2 MEM[(unsigned int *)state_246(D) + 16B]+0 S16 A32])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [orig:500 vect__497.56 ] [500])
            ] UNSPEC_STOREU)) blake_ref.c:93 1312 {sse2_storedquv16qi}
     (nil))
(insn 712 390 715 8 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 3 bx [orig:273 v$14 ] [273])) 90 {*movsi_internal}
     (nil))
(insn 715 712 714 8 (set (reg:SI 22 xmm1 [502])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 714 715 392 8 (set (reg:SI 26 xmm5 [orig:219 v$15 ] [219])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 28 [0x1c])) [6 %sfp+-244 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 392 714 717 8 (set (reg:V2SI 22 xmm1 [502])
        (vec_concat:V2SI (reg:SI 22 xmm1 [502])
            (reg:SI 26 xmm5 [orig:219 v$15 ] [219]))) 3671 {*vec_concatv2si}
     (nil))
(insn 717 392 720 8 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 6 bp [orig:235 v$12 ] [235])) 90 {*movsi_internal}
     (nil))
(insn 720 717 719 8 (set (reg:SI 21 xmm0 [503])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 719 720 778 8 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 2 cx [orig:252 v$13 ] [252])) 90 {*movsi_internal}
     (nil))
(insn 778 719 393 8 (set (reg:SI 25 xmm4 [orig:252 v$13 ] [252])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 393 778 394 8 (set (reg:V2SI 21 xmm0 [503])
        (vec_concat:V2SI (reg:SI 21 xmm0 [503])
            (reg:SI 25 xmm4 [orig:252 v$13 ] [252]))) 3671 {*vec_concatv2si}
     (nil))
(insn 394 393 722 8 (set (reg:V4SI 21 xmm0 [orig:501 vect_cst_.54 ] [501])
        (vec_concat:V4SI (reg:V2SI 21 xmm0 [503])
            (reg:V2SI 22 xmm1 [502]))) 3672 {*vec_concatv4si}
     (nil))
(insn 722 394 724 8 (set (reg:SI 23 xmm2 [505])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-264 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 724 722 395 8 (set (reg:SI 26 xmm5 [orig:256 v$7 ] [256])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [6 %sfp+-260 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 395 724 726 8 (set (reg:V2SI 23 xmm2 [505])
        (vec_concat:V2SI (reg:SI 23 xmm2 [505])
            (reg:SI 26 xmm5 [orig:256 v$7 ] [256]))) 3671 {*vec_concatv2si}
     (nil))
(insn 726 395 729 8 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 37 r8 [orig:276 v$4 ] [276])) 90 {*movsi_internal}
     (nil))
(insn 729 726 728 8 (set (reg:SI 22 xmm1 [506])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 728 729 730 8 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 43 r14 [orig:222 v$5 ] [222])) 90 {*movsi_internal}
     (nil))
(insn 730 728 396 8 (set (reg:SI 25 xmm4 [orig:222 v$5 ] [222])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 396 730 397 8 (set (reg:V2SI 22 xmm1 [506])
        (vec_concat:V2SI (reg:SI 22 xmm1 [506])
            (reg:SI 25 xmm4 [orig:222 v$5 ] [222]))) 3671 {*vec_concatv2si}
     (nil))
(insn 397 396 398 8 (set (reg:V4SI 22 xmm1 [orig:504 vect_cst_.57 ] [504])
        (vec_concat:V4SI (reg:V2SI 22 xmm1 [506])
            (reg:V2SI 23 xmm2 [505]))) 3672 {*vec_concatv4si}
     (nil))
(insn 398 397 402 8 (set (reg:V4SI 21 xmm0 [orig:507 D.5780 ] [507])
        (xor:V4SI (reg:V4SI 21 xmm0 [orig:501 vect_cst_.54 ] [501])
            (reg:V4SI 22 xmm1 [orig:504 vect_cst_.57 ] [504]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn 402 398 732 8 (set (reg:V4SI 21 xmm0 [orig:511 D.5780 ] [511])
        (xor:V4SI (reg:V4SI 21 xmm0 [orig:507 D.5780 ] [507])
            (reg:V4SI 24 xmm3 [orig:493 vect_cst_.52 ] [493]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn 732 402 734 8 (set (reg:SI 22 xmm1 [513])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [6 %sfp+-88 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 734 732 403 8 (set (reg:SI 26 xmm5 [orig:135 v$7 ] [135])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 188 [0xbc])) [6 %sfp+-84 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 403 734 736 8 (set (reg:V2SI 22 xmm1 [513])
        (vec_concat:V2SI (reg:SI 22 xmm1 [513])
            (reg:SI 26 xmm5 [orig:135 v$7 ] [135]))) 3671 {*vec_concatv2si}
     (nil))
(insn 736 403 738 8 (set (reg:SI 24 xmm3 [514])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [6 %sfp+-96 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 738 736 404 8 (set (reg:SI 25 xmm4 [orig:133 v$5 ] [133])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 180 [0xb4])) [6 %sfp+-92 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 404 738 405 8 (set (reg:V2SI 24 xmm3 [514])
        (vec_concat:V2SI (reg:SI 24 xmm3 [514])
            (reg:SI 25 xmm4 [orig:133 v$5 ] [133]))) 3671 {*vec_concatv2si}
     (nil))
(insn 405 404 406 8 (set (reg:V4SI 24 xmm3 [orig:512 vect_cst_.49 ] [512])
        (vec_concat:V4SI (reg:V2SI 24 xmm3 [514])
            (reg:V2SI 22 xmm1 [513]))) 3672 {*vec_concatv4si}
     (nil))
(insn 406 405 739 8 (set (reg:V4SI 21 xmm0 [orig:515 vect__497.56 ] [515])
        (xor:V4SI (reg:V4SI 21 xmm0 [orig:511 D.5780 ] [511])
            (reg:V4SI 24 xmm3 [orig:512 vect_cst_.49 ] [512]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn 739 406 407 8 (set (reg:DI 0 ax [738])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:93 89 {*movdi_internal}
     (nil))
(insn 407 739 412 8 (set (mem:V16QI (plus:DI (reg:DI 0 ax [738])
                (const_int 32 [0x20])) [2 MEM[(unsigned int *)state_246(D) + 32B]+0 S16 A32])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [orig:515 vect__497.56 ] [515])
            ] UNSPEC_STOREU)) blake_ref.c:93 1312 {sse2_storedquv16qi}
     (nil))
(insn 412 407 413 8 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) blake_ref.c:103 90 {*movsi_internal}
     (nil))
(insn 413 412 447 8 (use (reg/i:SI 0 ax)) blake_ref.c:103 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 447 413 0 NOTE_INSN_DELETED)

;; Function compress64 (compress64, funcdef_no=12, decl_uid=3221, cgraph_uid=12, symbol_order=20)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=208, prev_offset=0)
Can eliminate 16 to 6 (offset=80, prev_offset=0)
Can eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
Changing pseudo 350 in operand 0 of insn 6 on equiv [argp:DI+0xd0]
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) 0 {*bswapdi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 44:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=531 from oldreg=291, assigning class GENERAL_REGS to r531
   44: r531:DI=bswap(r531:DI)
      REG_DEAD r353:DI
      REG_EQUAL bswap([r351:DI+0x8])
    Inserting insn reload before:
  434: r531:DI=r353:DI
    Inserting insn reload after:
  435: r291:DI=r531:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 45:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 47:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=532 from oldreg=295, assigning class GENERAL_REGS to r532
   47: r532:DI=bswap(r532:DI)
      REG_DEAD r354:DI
      REG_EQUAL bswap([r351:DI+0x10])
    Inserting insn reload before:
  436: r532:DI=r354:DI
    Inserting insn reload after:
  437: r295:DI=r532:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 437:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
      Creating newreg=533 from oldreg=295, assigning class GENERAL_REGS to r533
   48: [frame:DI+0x10]=r533:DI
    Inserting insn reload before:
  438: r533:DI=r295:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 438:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 50:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=534 from oldreg=299, assigning class GENERAL_REGS to r534
   50: r534:DI=bswap(r534:DI)
      REG_DEAD r355:DI
      REG_EQUAL bswap([r351:DI+0x18])
    Inserting insn reload before:
  439: r534:DI=r355:DI
    Inserting insn reload after:
  440: r299:DI=r534:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 440:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 51:  (0) m  (1) re {*movdi_internal}
      Creating newreg=535 from oldreg=299, assigning class GENERAL_REGS to r535
   51: [frame:DI+0x18]=r535:DI
    Inserting insn reload before:
  441: r535:DI=r299:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 441:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 53:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=536 from oldreg=303, assigning class GENERAL_REGS to r536
   53: r536:DI=bswap(r536:DI)
      REG_DEAD r356:DI
      REG_EQUAL bswap([r351:DI+0x20])
    Inserting insn reload before:
  442: r536:DI=r356:DI
    Inserting insn reload after:
  443: r303:DI=r536:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 443:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 54:  (0) m  (1) re {*movdi_internal}
      Creating newreg=537 from oldreg=303, assigning class GENERAL_REGS to r537
   54: [frame:DI+0x20]=r537:DI
    Inserting insn reload before:
  444: r537:DI=r303:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 56:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=538 from oldreg=307, assigning class GENERAL_REGS to r538
   56: r538:DI=bswap(r538:DI)
      REG_DEAD r357:DI
      REG_EQUAL bswap([r351:DI+0x28])
    Inserting insn reload before:
  445: r538:DI=r357:DI
    Inserting insn reload after:
  446: r307:DI=r538:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 446:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 57:  (0) m  (1) re {*movdi_internal}
      Creating newreg=539 from oldreg=307, assigning class GENERAL_REGS to r539
   57: [frame:DI+0x28]=r539:DI
    Inserting insn reload before:
  447: r539:DI=r307:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 59:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=540 from oldreg=311, assigning class GENERAL_REGS to r540
   59: r540:DI=bswap(r540:DI)
      REG_DEAD r358:DI
      REG_EQUAL bswap([r351:DI+0x30])
    Inserting insn reload before:
  448: r540:DI=r358:DI
    Inserting insn reload after:
  449: r311:DI=r540:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 449:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 60:  (0) m  (1) re {*movdi_internal}
      Creating newreg=541 from oldreg=311, assigning class GENERAL_REGS to r541
   60: [frame:DI+0x30]=r541:DI
    Inserting insn reload before:
  450: r541:DI=r311:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 450:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 62:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=542 from oldreg=315, assigning class GENERAL_REGS to r542
   62: r542:DI=bswap(r542:DI)
      REG_DEAD r359:DI
      REG_EQUAL bswap([r351:DI+0x38])
    Inserting insn reload before:
  451: r542:DI=r359:DI
    Inserting insn reload after:
  452: r315:DI=r542:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 452:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 63:  (0) m  (1) re {*movdi_internal}
      Creating newreg=543 from oldreg=315, assigning class GENERAL_REGS to r543
   63: [frame:DI+0x38]=r543:DI
    Inserting insn reload before:
  453: r543:DI=r315:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 453:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 65:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=544 from oldreg=319, assigning class GENERAL_REGS to r544
   65: r544:DI=bswap(r544:DI)
      REG_DEAD r360:DI
      REG_EQUAL bswap([r351:DI+0x40])
    Inserting insn reload before:
  454: r544:DI=r360:DI
    Inserting insn reload after:
  455: r319:DI=r544:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 455:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 66:  (0) m  (1) re {*movdi_internal}
      Creating newreg=545 from oldreg=319, assigning class GENERAL_REGS to r545
   66: [frame:DI+0x40]=r545:DI
    Inserting insn reload before:
  456: r545:DI=r319:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 456:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 68:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=546 from oldreg=323, assigning class GENERAL_REGS to r546
   68: r546:DI=bswap(r546:DI)
      REG_DEAD r361:DI
      REG_EQUAL bswap([r351:DI+0x48])
    Inserting insn reload before:
  457: r546:DI=r361:DI
    Inserting insn reload after:
  458: r323:DI=r546:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 458:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 69:  (0) m  (1) re {*movdi_internal}
      Creating newreg=547 from oldreg=323, assigning class GENERAL_REGS to r547
   69: [frame:DI+0x48]=r547:DI
    Inserting insn reload before:
  459: r547:DI=r323:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 459:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 71:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=548 from oldreg=327, assigning class GENERAL_REGS to r548
   71: r548:DI=bswap(r548:DI)
      REG_DEAD r362:DI
      REG_EQUAL bswap([r351:DI+0x50])
    Inserting insn reload before:
  460: r548:DI=r362:DI
    Inserting insn reload after:
  461: r327:DI=r548:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 461:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 72:  (0) m  (1) re {*movdi_internal}
      Creating newreg=549 from oldreg=327, assigning class GENERAL_REGS to r549
   72: [frame:DI+0x50]=r549:DI
    Inserting insn reload before:
  462: r549:DI=r327:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 462:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 74:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=550 from oldreg=331, assigning class GENERAL_REGS to r550
   74: r550:DI=bswap(r550:DI)
      REG_DEAD r363:DI
      REG_EQUAL bswap([r351:DI+0x58])
    Inserting insn reload before:
  463: r550:DI=r363:DI
    Inserting insn reload after:
  464: r331:DI=r550:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 464:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 75:  (0) m  (1) re {*movdi_internal}
      Creating newreg=551 from oldreg=331, assigning class GENERAL_REGS to r551
   75: [frame:DI+0x58]=r551:DI
    Inserting insn reload before:
  465: r551:DI=r331:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 465:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 77:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=552 from oldreg=335, assigning class GENERAL_REGS to r552
   77: r552:DI=bswap(r552:DI)
      REG_DEAD r364:DI
      REG_EQUAL bswap([r351:DI+0x60])
    Inserting insn reload before:
  466: r552:DI=r364:DI
    Inserting insn reload after:
  467: r335:DI=r552:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 467:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 78:  (0) m  (1) re {*movdi_internal}
      Creating newreg=553 from oldreg=335, assigning class GENERAL_REGS to r553
   78: [frame:DI+0x60]=r553:DI
    Inserting insn reload before:
  468: r553:DI=r335:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 468:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 80:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=554 from oldreg=339, assigning class GENERAL_REGS to r554
   80: r554:DI=bswap(r554:DI)
      REG_DEAD r365:DI
      REG_EQUAL bswap([r351:DI+0x68])
    Inserting insn reload before:
  469: r554:DI=r365:DI
    Inserting insn reload after:
  470: r339:DI=r554:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 470:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 81:  (0) m  (1) re {*movdi_internal}
      Creating newreg=555 from oldreg=339, assigning class GENERAL_REGS to r555
   81: [frame:DI+0x68]=r555:DI
    Inserting insn reload before:
  471: r555:DI=r339:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 471:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 83:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=556 from oldreg=343, assigning class GENERAL_REGS to r556
   83: r556:DI=bswap(r556:DI)
      REG_DEAD r366:DI
      REG_EQUAL bswap([r351:DI+0x70])
    Inserting insn reload before:
  472: r556:DI=r366:DI
    Inserting insn reload after:
  473: r343:DI=r556:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 473:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 84:  (0) m  (1) re {*movdi_internal}
      Creating newreg=557 from oldreg=343, assigning class GENERAL_REGS to r557
   84: [frame:DI+0x70]=r557:DI
    Inserting insn reload before:
  474: r557:DI=r343:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 474:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 86:  (0) =r  (1) 0 {*bswapdi2}
      Creating newreg=558 from oldreg=347, assigning class GENERAL_REGS to r558
   86: r558:DI=bswap(r558:DI)
      REG_DEAD r367:DI
    Inserting insn reload before:
  475: r558:DI=r367:DI
    Inserting insn reload after:
  476: r347:DI=r558:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 476:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=10,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=15,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 87:  (0) m  (1) re {*movdi_internal}
      Creating newreg=559 from oldreg=347, assigning class GENERAL_REGS to r559
   87: [frame:DI+0x78]=r559:DI
    Inserting insn reload before:
  477: r559:DI=r347:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 477:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 88 r350:DI+0x88 -- no change
Changing pseudo 350 in address of insn 88 on equiv [argp:DI+0xd0]
      Creating newreg=560, assigning class GENERAL_REGS to address r560
	   Change to class INDEX_REGS for r560
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=561 from oldreg=119, assigning class GENERAL_REGS to r561
   88: r561:DI=[r560:DI+0x88]
    Inserting insn reload before:
  478: r560:DI=[argp:DI+0xd0]
    Inserting insn reload after:
  479: r119:DI=r561:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 479:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 478:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 89 r350:DI+0x90 -- no change
Changing pseudo 350 in address of insn 89 on equiv [argp:DI+0xd0]
      Creating newreg=562, assigning class GENERAL_REGS to address r562
	   Change to class INDEX_REGS for r562
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=563 from oldreg=120, assigning class GENERAL_REGS to r563
   89: r563:DI=[r562:DI+0x90]
    Inserting insn reload before:
  480: r562:DI=[argp:DI+0xd0]
    Inserting insn reload after:
  481: r120:DI=r563:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 481:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 480:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 90 r350:DI+0x98 -- no change
Changing pseudo 350 in address of insn 90 on equiv [argp:DI+0xd0]
      Creating newreg=564, assigning class GENERAL_REGS to address r564
	   Change to class INDEX_REGS for r564
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=565 from oldreg=121, assigning class GENERAL_REGS to r565
   90: r565:DI=[r564:DI+0x98]
    Inserting insn reload before:
  482: r564:DI=[argp:DI+0xd0]
    Inserting insn reload after:
  483: r121:DI=r565:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 483:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 482:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 91 r350:DI+0xa0 -- no change
Changing pseudo 350 in address of insn 91 on equiv [argp:DI+0xd0]
      Creating newreg=566, assigning class GENERAL_REGS to address r566
	   Change to class INDEX_REGS for r566
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=567 from oldreg=122, assigning class GENERAL_REGS to r567
   91: r567:DI=[r566:DI+0xa0]
    Inserting insn reload before:
  484: r566:DI=[argp:DI+0xd0]
    Inserting insn reload after:
  485: r122:DI=r567:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 485:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 484:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 92 r350:DI+0xa8 -- no change
Changing pseudo 350 in address of insn 92 on equiv [argp:DI+0xd0]
      Creating newreg=568, assigning class GENERAL_REGS to address r568
	   Change to class INDEX_REGS for r568
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=569 from oldreg=123, assigning class GENERAL_REGS to r569
   92: r569:DI=[r568:DI+0xa8]
    Inserting insn reload before:
  486: r568:DI=[argp:DI+0xd0]
    Inserting insn reload after:
  487: r123:DI=r569:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 487:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 486:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 93 r350:DI+0xb0 -- no change
Changing pseudo 350 in address of insn 93 on equiv [argp:DI+0xd0]
      Creating newreg=570, assigning class GENERAL_REGS to address r570
	   Change to class INDEX_REGS for r570
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=571 from oldreg=124, assigning class GENERAL_REGS to r571
   93: r571:DI=[r570:DI+0xb0]
    Inserting insn reload before:
  488: r570:DI=[argp:DI+0xd0]
    Inserting insn reload after:
  489: r124:DI=r571:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 489:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 488:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 94 r350:DI+0xb8 -- no change
Changing pseudo 350 in address of insn 94 on equiv [argp:DI+0xd0]
      Creating newreg=572, assigning class GENERAL_REGS to address r572
	   Change to class INDEX_REGS for r572
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=573 from oldreg=125, assigning class GENERAL_REGS to r573
   94: r573:DI=[r572:DI+0xb8]
    Inserting insn reload before:
  490: r572:DI=[argp:DI+0xd0]
    Inserting insn reload after:
  491: r125:DI=r573:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 491:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 490:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 95 r350:DI+0xc0 -- no change
Changing pseudo 350 in address of insn 95 on equiv [argp:DI+0xd0]
      Creating newreg=574, assigning class GENERAL_REGS to address r574
	   Change to class INDEX_REGS for r574
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=575 from oldreg=126, assigning class GENERAL_REGS to r575
   95: r575:DI=[r574:DI+0xc0]
    Inserting insn reload before:
  492: r574:DI=[argp:DI+0xd0]
    Inserting insn reload after:
  493: r126:DI=r575:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 493:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 492:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 96 r350:DI+0x158 -- no change
Changing pseudo 350 in address of insn 96 on equiv [argp:DI+0xd0]
      Creating newreg=576, assigning class GENERAL_REGS to address r576
	   Change to class INDEX_REGS for r576
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=577 from oldreg=127, assigning class GENERAL_REGS to r577
   96: r577:DI=[r576:DI+0x158]
    Inserting insn reload before:
  494: r576:DI=[argp:DI+0xd0]
    Inserting insn reload after:
  495: r127:DI=r577:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 495:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 494:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 97:  (0) r  (1) i {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=578 from oldreg=244, assigning class GENERAL_REGS to r578
      Creating newreg=579 from oldreg=127, assigning class GENERAL_REGS to r579
      Making reload reg 579 for reg 127 optional
   98: {r578:DI=r578:DI^r579:DI;clobber flags:CC;}
      REG_DEAD r368:DI
      REG_UNUSED flags:CC
      REG_EQUAL r127:DI^0x243f6a8885a308d3
    Inserting insn reload before:
  496: r578:DI=r368:DI
  498: r579:DI=r127:DI
    Inserting insn reload after:
  497: r244:DI=r578:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 498:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 99 r350:DI+0x160 -- no change
Changing pseudo 350 in address of insn 99 on equiv [argp:DI+0xd0]
      Creating newreg=580, assigning class GENERAL_REGS to address r580
	   Change to class INDEX_REGS for r580
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=581 from oldreg=128, assigning class GENERAL_REGS to r581
   99: r581:DI=[r580:DI+0x160]
    Inserting insn reload before:
  499: r580:DI=[argp:DI+0xd0]
    Inserting insn reload after:
  500: r128:DI=r581:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 500:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 499:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 100:  (0) r  (1) i {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=0,overall=15,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=1,overall=15,losers=2,rld_nregs=2
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=582 from oldreg=262, assigning class GENERAL_REGS to r582
      Creating newreg=583 from oldreg=128, assigning class GENERAL_REGS to r583
      Making reload reg 583 for reg 128 optional
  101: {r582:DI=r582:DI^r583:DI;clobber flags:CC;}
      REG_DEAD r369:DI
      REG_UNUSED flags:CC
      REG_EQUAL r128:DI^0x13198a2e03707344
    Inserting insn reload before:
  501: r582:DI=r369:DI
  503: r583:DI=r128:DI
    Inserting insn reload after:
  502: r262:DI=r582:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 502:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 503:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 102 r350:DI+0x168 -- no change
Changing pseudo 350 in address of insn 102 on equiv [argp:DI+0xd0]
      Creating newreg=584, assigning class GENERAL_REGS to address r584
	   Change to class INDEX_REGS for r584
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=585 from oldreg=129, assigning class GENERAL_REGS to r585
  102: r585:DI=[r584:DI+0x168]
    Inserting insn reload before:
  504: r584:DI=[argp:DI+0xd0]
    Inserting insn reload after:
  505: r129:DI=r585:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 505:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 504:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 103:  (0) r  (1) i {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=0,overall=15,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=1,overall=15,losers=2,rld_nregs=2
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 104
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=586 from oldreg=211, assigning class GENERAL_REGS to r586
      Creating newreg=587 from oldreg=129, assigning class GENERAL_REGS to r587
      Making reload reg 587 for reg 129 optional
  104: {r586:DI=r586:DI^r587:DI;clobber flags:CC;}
      REG_DEAD r370:DI
      REG_UNUSED flags:CC
      REG_EQUAL r129:DI^0xa4093822299f31d0
    Inserting insn reload before:
  506: r586:DI=r370:DI
  508: r587:DI=r129:DI
    Inserting insn reload after:
  507: r211:DI=r586:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 507:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 508:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 105 r350:DI+0x170 -- no change
Changing pseudo 350 in address of insn 105 on equiv [argp:DI+0xd0]
      Creating newreg=588, assigning class GENERAL_REGS to address r588
	   Change to class INDEX_REGS for r588
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=589 from oldreg=130, assigning class GENERAL_REGS to r589
  105: r589:DI=[r588:DI+0x170]
    Inserting insn reload before:
  509: r588:DI=[argp:DI+0xd0]
    Inserting insn reload after:
  510: r130:DI=r589:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 510:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 509:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) r  (1) i {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=0,overall=15,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=1,overall=15,losers=2,rld_nregs=2
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=590 from oldreg=197, assigning class GENERAL_REGS to r590
      Creating newreg=591 from oldreg=130, assigning class GENERAL_REGS to r591
      Making reload reg 591 for reg 130 optional
  107: {r590:DI=r590:DI^r591:DI;clobber flags:CC;}
      REG_DEAD r371:DI
      REG_UNUSED flags:CC
      REG_EQUAL r130:DI^0x82efa98ec4e6c89
    Inserting insn reload before:
  511: r590:DI=r371:DI
  513: r591:DI=r130:DI
    Inserting insn reload after:
  512: r197:DI=r590:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 512:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 513:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 108 r350:DI+0xc -- no change
Changing pseudo 350 in address of insn 108 on equiv [argp:DI+0xd0]
      Creating newreg=592, assigning class GENERAL_REGS to address r592
	   Change to class INDEX_REGS for r592
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) ?mr {*cmpsi_ccno_1}
  108: flags:CCZ=cmp([r592:DI+0xc],0)
    Inserting insn reload before:
  514: r592:DI=[argp:DI+0xd0]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 514:  (0) r  (1) rem {*movdi_internal}
Changing address in insn 111 r350:DI+0xc8 -- no change
Changing pseudo 350 in address of insn 111 on equiv [argp:DI+0xd0]
      Creating newreg=593, assigning class GENERAL_REGS to address r593
	   Change to class INDEX_REGS for r593
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
  111: r132:DI=[r593:DI+0xc8]
      REG_EQUIV [r350:DI+0xc8]
    Inserting insn reload before:
  515: r593:DI=[argp:DI+0xd0]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 515:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 112:  (0) r  (1) i {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 113
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=594 from oldreg=227, assigning class GENERAL_REGS to r594
  113: {r594:DI=r594:DI^r132:DI;clobber flags:CC;}
      REG_DEAD r372:DI
      REG_UNUSED flags:CC
      REG_EQUAL r132:DI^0x452821e638d01377
    Inserting insn reload before:
  516: r594:DI=r372:DI
    Inserting insn reload after:
  517: r227:DI=r594:DI

            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 114:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=595 from oldreg=243, assigning class GENERAL_REGS to r595
  115: {r595:DI=r595:DI^r373:DI;clobber flags:CC;}
      REG_DEAD r373:DI
      REG_DEAD r132:DI
      REG_UNUSED flags:CC
      REG_EQUAL r132:DI^0xbe5466cf34e90c6c
    Inserting insn reload before:
  518: r595:DI=r132:DI
    Inserting insn reload after:
  519: r243:DI=r595:DI

Changing address in insn 116 r350:DI+0xd0 -- no change
Changing pseudo 350 in address of insn 116 on equiv [argp:DI+0xd0]
      Creating newreg=596, assigning class GENERAL_REGS to address r596
	   Change to class INDEX_REGS for r596
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
  116: r133:DI=[r596:DI+0xd0]
      REG_EQUIV [r350:DI+0xd0]
    Inserting insn reload before:
  520: r596:DI=[argp:DI+0xd0]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 520:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 117:  (0) r  (1) i {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 118
	 Choosing alt 0 in insn 118:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=597 from oldreg=260, assigning class GENERAL_REGS to r597
  118: {r597:DI=r597:DI^r133:DI;clobber flags:CC;}
      REG_DEAD r374:DI
      REG_UNUSED flags:CC
      REG_EQUAL r133:DI^0xc0ac29b7c97c50dd
    Inserting insn reload before:
  521: r597:DI=r374:DI
    Inserting insn reload after:
  522: r260:DI=r597:DI

            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 119:  (0) r  (1) i {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=598 from oldreg=210, assigning class GENERAL_REGS to r598
  120: {r598:DI=r598:DI^r375:DI;clobber flags:CC;}
      REG_DEAD r375:DI
      REG_DEAD r133:DI
      REG_UNUSED flags:CC
      REG_EQUAL r133:DI^0x3f84d5b5b5470917
    Inserting insn reload before:
  523: r598:DI=r133:DI
    Inserting insn reload after:
  524: r210:DI=r598:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 524:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 9:  (0) r  (1) i {*movdi_internal}
      Creating newreg=599 from oldreg=210, assigning class GENERAL_REGS to r599
    9: r599:DI=0x3f84d5b5b5470917
    Inserting insn reload after:
  525: r210:DI=r599:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 525:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 123:  (0) r  (1) i {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=8,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=7,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=15,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
      Creating newreg=600 from oldreg=119, assigning class GENERAL_REGS to r600
   13: r208:DI=r600:DI
    Inserting insn reload before:
  526: r600:DI=r119:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 526:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=8,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=7,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=15,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
      Creating newreg=601 from oldreg=121, assigning class GENERAL_REGS to r601
   15: r241:DI=r601:DI
    Inserting insn reload before:
  527: r601:DI=r121:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 527:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=8,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=7,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=15,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
      Creating newreg=602 from oldreg=124, assigning class GENERAL_REGS to r602
   18: r214:DI=r602:DI
    Inserting insn reload before:
  528: r602:DI=r124:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 528:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=8,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=7,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=15,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
      Creating newreg=603 from oldreg=125, assigning class GENERAL_REGS to r603
   19: r230:DI=r603:DI
    Inserting insn reload before:
  529: r603:DI=r125:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 529:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=8,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=7,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            alt=15,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
      Creating newreg=604 from oldreg=126, assigning class GENERAL_REGS to r604
   20: r246:DI=r604:DI
    Inserting insn reload before:
  530: r604:DI=r126:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 530:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 22:  (0) r  (1) i {*movdi_internal}
      Creating newreg=605 from oldreg=348, assigning class GENERAL_REGS to r605
   22: r605:DI=0x801f2e2858efc16
      REG_EQUAL 0x801f2e2858efc16
    Inserting insn reload after:
  531: r348:DI=r605:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 531:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 23:  (0) r  (1) i {*movdi_internal}
      Creating newreg=606 from oldreg=346, assigning class GENERAL_REGS to r606
   23: r606:DI=0x636920d871574e69
      REG_EQUAL 0x636920d871574e69
    Inserting insn reload after:
  532: r346:DI=r606:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 532:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 24:  (0) r  (1) i {*movdi_internal}
      Creating newreg=607 from oldreg=340, assigning class GENERAL_REGS to r607
   24: r607:DI=0xba7c9045f12c7f99
      REG_EQUAL 0xba7c9045f12c7f99
    Inserting insn reload after:
  533: r340:DI=r607:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 533:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 25:  (0) r  (1) i {*movdi_internal}
      Creating newreg=608 from oldreg=338, assigning class GENERAL_REGS to r608
   25: r608:DI=0x24a19947b3916cf7
      REG_EQUAL 0x24a19947b3916cf7
    Inserting insn reload after:
  534: r338:DI=r608:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 534:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 26:  (0) r  (1) i {*movdi_internal}
      Creating newreg=609 from oldreg=332, assigning class GENERAL_REGS to r609
   26: r609:DI=0x2ffd72dbd01adfb7
      REG_EQUAL 0x2ffd72dbd01adfb7
    Inserting insn reload after:
  535: r332:DI=r609:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 535:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 27:  (0) r  (1) i {*movdi_internal}
      Creating newreg=610 from oldreg=330, assigning class GENERAL_REGS to r610
   27: r610:DI=0xb8e1afed6a267e96
      REG_EQUAL 0xb8e1afed6a267e96
    Inserting insn reload after:
  536: r330:DI=r610:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 536:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 28:  (0) r  (1) i {*movdi_internal}
      Creating newreg=611 from oldreg=324, assigning class GENERAL_REGS to r611
   28: r611:DI=0x9216d5d98979fb1b
      REG_EQUAL 0x9216d5d98979fb1b
    Inserting insn reload after:
  537: r324:DI=r611:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 537:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 29:  (0) r  (1) i {*movdi_internal}
      Creating newreg=612 from oldreg=322, assigning class GENERAL_REGS to r612
   29: r612:DI=0xd1310ba698dfb5ac
      REG_EQUAL 0xd1310ba698dfb5ac
    Inserting insn reload after:
  538: r322:DI=r612:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 538:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 30:  (0) r  (1) i {*movdi_internal}
      Creating newreg=613 from oldreg=316, assigning class GENERAL_REGS to r613
   30: r613:DI=0xc0ac29b7c97c50dd
      REG_EQUAL 0xc0ac29b7c97c50dd
    Inserting insn reload after:
  539: r316:DI=r613:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 539:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 31:  (0) r  (1) i {*movdi_internal}
      Creating newreg=614 from oldreg=314, assigning class GENERAL_REGS to r614
   31: r614:DI=0x3f84d5b5b5470917
      REG_EQUAL 0x3f84d5b5b5470917
    Inserting insn reload after:
  540: r314:DI=r614:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 540:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) r  (1) i {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 33:  (0) r  (1) i {*movdi_internal}
      Creating newreg=615 from oldreg=306, assigning class GENERAL_REGS to r615
   33: r615:DI=0xbe5466cf34e90c6c
      REG_EQUAL 0xbe5466cf34e90c6c
    Inserting insn reload after:
  541: r306:DI=r615:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 541:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 34:  (0) r  (1) i {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 35:  (0) r  (1) i {*movdi_internal}
      Creating newreg=616 from oldreg=298, assigning class GENERAL_REGS to r616
   35: r616:DI=0x82efa98ec4e6c89
      REG_EQUAL 0x82efa98ec4e6c89
    Inserting insn reload after:
  542: r298:DI=r616:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 542:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 36:  (0) r  (1) i {*movdi_internal}
      Creating newreg=617 from oldreg=292, assigning class GENERAL_REGS to r617
   36: r617:DI=0x243f6a8885a308d3
      REG_EQUAL 0x243f6a8885a308d3
    Inserting insn reload after:
  543: r292:DI=r617:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 543:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=23,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=17,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 37:  (0) r  (1) i {*movdi_internal}
      Creating newreg=618 from oldreg=290, assigning class GENERAL_REGS to r618
   37: r618:DI=0x13198a2e03707344
      REG_EQUAL 0x13198a2e03707344
    Inserting insn reload after:
  544: r290:DI=r618:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 544:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 414:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 415:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 420:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 422:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=619 from oldreg=290, assigning class GENERAL_REGS to r619
      Making reload reg 619 for reg 290 optional
  125: {r376:DI=r526:DI^r619:DI;clobber flags:CC;}
      REG_DEAD r526:DI
      REG_DEAD r290:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  545: r619:DI=r290:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 545:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*adddi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=620 from oldreg=208, assigning class GENERAL_REGS to r620
      Making reload reg 620 for reg 208 optional
  127: {r135:DI=r377:DI+r620:DI;clobber flags:CC;}
      REG_DEAD r377:DI
      REG_DEAD r208:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  546: r620:DI=r208:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 546:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =rm  (1) 0  (2) cJ {*rotldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 130
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 133
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 138:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=621 from oldreg=146, assigning class GENERAL_REGS to r621
  138: {r621:DI=r138:DI+r145:DI;clobber flags:CC;}
      REG_DEAD r138:DI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  547: r146:DI=r621:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 547:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=622 from oldreg=146, assigning class GENERAL_REGS to r622
      Making reload reg 622 for reg 146 optional
  139: {r383:DI=r140:DI^r622:DI;clobber flags:CC;}
      REG_DEAD r140:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  548: r622:DI=r146:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 548:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 140:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
      Creating newreg=623 from oldreg=148, assigning class GENERAL_REGS to r623
  140: {r623:DI=r623:DI>->0xb;clobber flags:CC;}
      REG_DEAD r383:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  549: r623:DI=r383:DI
    Inserting insn reload after:
  550: r148:DI=r623:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 550:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=624 from oldreg=384, assigning class GENERAL_REGS to r624
      Creating newreg=625 from oldreg=298, assigning class GENERAL_REGS to r625
      Making reload reg 625 for reg 298 optional
  141: {r624:DI=r624:DI^r625:DI;clobber flags:CC;}
      REG_DEAD r298:DI
      REG_DEAD r295:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  551: r624:DI=r295:DI
  553: r625:DI=r298:DI
    Inserting insn reload after:
  552: r384:DI=r624:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 551:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 553:  (0) r  (1) rem {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=626 from oldreg=214, assigning class GENERAL_REGS to r626
      Making reload reg 626 for reg 214 optional
  142: {r385:DI=r384:DI+r626:DI;clobber flags:CC;}
      REG_DEAD r384:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  554: r626:DI=r214:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 554:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 144
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =rm  (1) 0  (2) cJ {*rotldi3_1}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 146
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=627 from oldreg=154, assigning class GENERAL_REGS to r627
  146: {r627:DI=r627:DI+r153:DI;clobber flags:CC;}
      REG_DEAD r262:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  555: r627:DI=r262:DI
    Inserting insn reload after:
  556: r154:DI=r627:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 555:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 147
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=628 from oldreg=387, assigning class GENERAL_REGS to r628
  147: {r628:DI=r628:DI^r154:DI;clobber flags:CC;}
      REG_DEAD r214:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  557: r628:DI=r214:DI
    Inserting insn reload after:
  558: r387:DI=r628:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 557:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 149
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=629 from oldreg=299, assigning class GENERAL_REGS to r629
      Making reload reg 629 for reg 299 optional
  149: {r388:DI=r529:DI^r629:DI;clobber flags:CC;}
      REG_DEAD r529:DI
      REG_DEAD r299:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  559: r629:DI=r299:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 559:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 152:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=630 from oldreg=162, assigning class GENERAL_REGS to r630
  154: {r630:DI=r154:DI+r161:DI;clobber flags:CC;}
      REG_DEAD r154:DI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  560: r162:DI=r630:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 560:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=631 from oldreg=162, assigning class GENERAL_REGS to r631
      Making reload reg 631 for reg 162 optional
  155: {r391:DI=r156:DI^r631:DI;clobber flags:CC;}
      REG_DEAD r156:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  561: r631:DI=r162:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 561:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=632 from oldreg=392, assigning class GENERAL_REGS to r632
      Creating newreg=633 from oldreg=306, assigning class GENERAL_REGS to r633
      Making reload reg 633 for reg 306 optional
  157: {r632:DI=r632:DI^r633:DI;clobber flags:CC;}
      REG_DEAD r306:DI
      REG_DEAD r303:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  562: r632:DI=r303:DI
  564: r633:DI=r306:DI
    Inserting insn reload after:
  563: r392:DI=r632:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 562:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 564:  (0) r  (1) rem {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 158:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=634 from oldreg=230, assigning class GENERAL_REGS to r634
      Making reload reg 634 for reg 230 optional
  158: {r393:DI=r392:DI+r634:DI;clobber flags:CC;}
      REG_DEAD r392:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  565: r634:DI=r230:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 565:  (0) r  (1) rem {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=635 from oldreg=241, assigning class GENERAL_REGS to r635
      Making reload reg 635 for reg 241 optional
  159: {r167:DI=r393:DI+r635:DI;clobber flags:CC;}
      REG_DEAD r393:DI
      REG_DEAD r241:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  566: r635:DI=r241:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 566:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 160
	 Choosing alt 0 in insn 160:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =rm  (1) 0  (2) cJ {*rotldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 162
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 163
	 Choosing alt 0 in insn 163:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=636 from oldreg=395, assigning class GENERAL_REGS to r636
  163: {r636:DI=r636:DI^r170:DI;clobber flags:CC;}
      REG_DEAD r230:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  567: r636:DI=r230:DI
    Inserting insn reload after:
  568: r395:DI=r636:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 567:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=637 from oldreg=396, assigning class GENERAL_REGS to r637
      Creating newreg=638 from oldreg=530, assigning class GENERAL_REGS to r638
      Making reload reg 638 for reg 530 optional
  165: {r637:DI=r637:DI^r638:DI;clobber flags:CC;}
      REG_DEAD r530:DI
      REG_DEAD r307:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  569: r637:DI=r307:DI
  571: r638:DI=r530:DI
    Inserting insn reload after:
  570: r396:DI=r637:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 569:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 571:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 168:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 171:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=639 from oldreg=400, assigning class GENERAL_REGS to r639
      Creating newreg=640 from oldreg=314, assigning class GENERAL_REGS to r640
      Making reload reg 640 for reg 314 optional
  173: {r639:DI=r639:DI^r640:DI;clobber flags:CC;}
      REG_DEAD r314:DI
      REG_DEAD r311:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  572: r639:DI=r311:DI
  574: r640:DI=r314:DI
    Inserting insn reload after:
  573: r400:DI=r639:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 572:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 574:  (0) r  (1) rem {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=641 from oldreg=246, assigning class GENERAL_REGS to r641
      Making reload reg 641 for reg 246 optional
  174: {r401:DI=r400:DI+r641:DI;clobber flags:CC;}
      REG_DEAD r400:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  575: r641:DI=r246:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 575:  (0) r  (1) rem {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=642 from oldreg=522, assigning class GENERAL_REGS to r642
      Making reload reg 642 for reg 522 optional
  175: {r183:DI=r401:DI+r642:DI;clobber flags:CC;}
      REG_DEAD r522:DI
      REG_DEAD r401:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  576: r642:DI=r522:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 576:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 176
	 Choosing alt 0 in insn 176:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=643 from oldreg=402, assigning class GENERAL_REGS to r643
  176: {r643:DI=r643:DI^r183:DI;clobber flags:CC;}
      REG_DEAD r210:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  577: r643:DI=r210:DI
    Inserting insn reload after:
  578: r402:DI=r643:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 577:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =rm  (1) 0  (2) cJ {*rotldi3_1}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 178
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=644 from oldreg=186, assigning class GENERAL_REGS to r644
  178: {r644:DI=r644:DI+r185:DI;clobber flags:CC;}
      REG_DEAD r197:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  579: r644:DI=r197:DI
    Inserting insn reload after:
  580: r186:DI=r644:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 579:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
            alt=2: Bad operand -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
  Commutative operand exchange in insn 179
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=645 from oldreg=403, assigning class GENERAL_REGS to r645
  179: {r645:DI=r645:DI^r186:DI;clobber flags:CC;}
      REG_DEAD r246:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  581: r645:DI=r246:DI
    Inserting insn reload after:
  582: r403:DI=r645:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 581:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=646 from oldreg=404, assigning class GENERAL_REGS to r646
      Creating newreg=647 from oldreg=316, assigning class GENERAL_REGS to r647
      Making reload reg 647 for reg 316 optional
  181: {r646:DI=r646:DI^r647:DI;clobber flags:CC;}
      REG_DEAD r316:DI
      REG_DEAD r315:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  583: r646:DI=r315:DI
  585: r647:DI=r316:DI
    Inserting insn reload after:
  584: r404:DI=r646:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 583:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 585:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 182
	 Choosing alt 0 in insn 182:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=648 from oldreg=408, assigning class GENERAL_REGS to r648
      Creating newreg=649 from oldreg=322, assigning class GENERAL_REGS to r649
      Making reload reg 649 for reg 322 optional
  189: {r648:DI=r648:DI^r649:DI;clobber flags:CC;}
      REG_DEAD r322:DI
      REG_DEAD r319:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  586: r648:DI=r319:DI
  588: r649:DI=r322:DI
    Inserting insn reload after:
  587: r408:DI=r648:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 586:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 588:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 192:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =rm  (1) 0  (2) cJ {*rotldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 197:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=650 from oldreg=412, assigning class GENERAL_REGS to r650
      Creating newreg=651 from oldreg=324, assigning class GENERAL_REGS to r651
      Making reload reg 651 for reg 324 optional
  197: {r650:DI=r650:DI^r651:DI;clobber flags:CC;}
      REG_DEAD r324:DI
      REG_DEAD r323:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  589: r650:DI=r323:DI
  591: r651:DI=r324:DI
    Inserting insn reload after:
  590: r412:DI=r650:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 589:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 591:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 199:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=652 from oldreg=208, assigning class GENERAL_REGS to r652
  199: {r652:DI=r413:DI+r205:DI;clobber flags:CC;}
      REG_DEAD r413:DI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  592: r208:DI=r652:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 592:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=653 from oldreg=208, assigning class GENERAL_REGS to r653
      Making reload reg 653 for reg 208 optional
  200: {r414:DI=r202:DI^r653:DI;clobber flags:CC;}
      REG_DEAD r202:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  593: r653:DI=r208:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 593:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 201:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
      Creating newreg=654 from oldreg=210, assigning class GENERAL_REGS to r654
  201: {r654:DI=r654:DI>->0x10;clobber flags:CC;}
      REG_DEAD r414:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  594: r654:DI=r414:DI
    Inserting insn reload after:
  595: r210:DI=r654:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 595:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=655 from oldreg=210, assigning class GENERAL_REGS to r655
      Making reload reg 655 for reg 210 optional
  202: {r517:DI=r203:DI+r655:DI;clobber flags:CC;}
      REG_DEAD r203:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  596: r655:DI=r210:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*xordi_1}
            0 Non pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 204:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
      Creating newreg=656 from oldreg=214, assigning class GENERAL_REGS to r656
  204: {r656:DI=r656:DI>->0xb;clobber flags:CC;}
      REG_DEAD r415:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  597: r656:DI=r415:DI
    Inserting insn reload after:
  598: r214:DI=r656:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 598:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 205:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=657 from oldreg=416, assigning class GENERAL_REGS to r657
      Creating newreg=658 from oldreg=330, assigning class GENERAL_REGS to r658
      Making reload reg 658 for reg 330 optional
  205: {r657:DI=r657:DI^r658:DI;clobber flags:CC;}
      REG_DEAD r330:DI
      REG_DEAD r327:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  599: r657:DI=r327:DI
  601: r658:DI=r330:DI
    Inserting insn reload after:
  600: r416:DI=r657:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 599:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 601:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 206
	 Choosing alt 0 in insn 206:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 208:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =rm  (1) 0  (2) cJ {*rotldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=659 from oldreg=420, assigning class GENERAL_REGS to r659
      Creating newreg=660 from oldreg=332, assigning class GENERAL_REGS to r660
      Making reload reg 660 for reg 332 optional
  213: {r659:DI=r659:DI^r660:DI;clobber flags:CC;}
      REG_DEAD r332:DI
      REG_DEAD r331:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  602: r659:DI=r331:DI
  604: r660:DI=r332:DI
    Inserting insn reload after:
  603: r420:DI=r659:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 602:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 604:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 214
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 215:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 216:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 218:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=661 from oldreg=197, assigning class GENERAL_REGS to r661
  218: {r661:DI=r220:DI+r519:DI;clobber flags:CC;}
      REG_DEAD r220:DI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  605: r197:DI=r661:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 605:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 219:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=662 from oldreg=197, assigning class GENERAL_REGS to r662
      Making reload reg 662 for reg 197 optional
  219: {r423:DI=r222:DI^r662:DI;clobber flags:CC;}
      REG_DEAD r222:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  606: r662:DI=r197:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 606:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 220:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
      Creating newreg=663 from oldreg=230, assigning class GENERAL_REGS to r663
  220: {r663:DI=r663:DI>->0xb;clobber flags:CC;}
      REG_DEAD r423:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  607: r663:DI=r423:DI
    Inserting insn reload after:
  608: r230:DI=r663:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 608:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 221:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=664 from oldreg=424, assigning class GENERAL_REGS to r664
      Creating newreg=665 from oldreg=338, assigning class GENERAL_REGS to r665
      Making reload reg 665 for reg 338 optional
  221: {r664:DI=r664:DI^r665:DI;clobber flags:CC;}
      REG_DEAD r338:DI
      REG_DEAD r335:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  609: r664:DI=r335:DI
  611: r665:DI=r338:DI
    Inserting insn reload after:
  610: r424:DI=r664:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 609:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 611:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 222
	 Choosing alt 0 in insn 222:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 224:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =rm  (1) 0  (2) cJ {*rotldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=6,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 226:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=666 from oldreg=146, assigning class GENERAL_REGS to r666
  226: {r236:DI=r666:DI+r235:DI;clobber flags:CC;}
      REG_DEAD r146:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  612: r666:DI=r146:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 612:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 229:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=667 from oldreg=428, assigning class GENERAL_REGS to r667
      Creating newreg=668 from oldreg=340, assigning class GENERAL_REGS to r668
      Making reload reg 668 for reg 340 optional
  229: {r667:DI=r667:DI^r668:DI;clobber flags:CC;}
      REG_DEAD r340:DI
      REG_DEAD r339:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  613: r667:DI=r339:DI
  615: r668:DI=r340:DI
    Inserting insn reload after:
  614: r428:DI=r667:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 613:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 615:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 230
	 Choosing alt 0 in insn 230:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 231:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=669 from oldreg=241, assigning class GENERAL_REGS to r669
  231: {r669:DI=r429:DI+r238:DI;clobber flags:CC;}
      REG_DEAD r429:DI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  616: r241:DI=r669:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 616:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=670 from oldreg=241, assigning class GENERAL_REGS to r670
      Making reload reg 670 for reg 241 optional
  232: {r430:DI=r235:DI^r670:DI;clobber flags:CC;}
      REG_DEAD r235:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  617: r670:DI=r241:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 617:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*xordi_1}
            0 Non pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 236:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
      Creating newreg=671 from oldreg=246, assigning class GENERAL_REGS to r671
  236: {r671:DI=r671:DI>->0xb;clobber flags:CC;}
      REG_DEAD r431:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  618: r671:DI=r431:DI
    Inserting insn reload after:
  619: r246:DI=r671:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 619:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 237:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=672 from oldreg=432, assigning class GENERAL_REGS to r672
      Creating newreg=673 from oldreg=346, assigning class GENERAL_REGS to r673
      Making reload reg 673 for reg 346 optional
  237: {r672:DI=r672:DI^r673:DI;clobber flags:CC;}
      REG_DEAD r346:DI
      REG_DEAD r343:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  620: r672:DI=r343:DI
  622: r673:DI=r346:DI
    Inserting insn reload after:
  621: r432:DI=r672:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 620:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 622:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 238
	 Choosing alt 0 in insn 238:  (0) =r  (1) %0  (2) rme {*adddi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 239:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=674 from oldreg=148, assigning class GENERAL_REGS to r674
      Making reload reg 674 for reg 148 optional
  239: {r250:DI=r433:DI+r674:DI;clobber flags:CC;}
      REG_DEAD r433:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  623: r674:DI=r148:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 623:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 240:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =rm  (1) 0  (2) cJ {*rotldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=6,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 242:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=675 from oldreg=162, assigning class GENERAL_REGS to r675
  242: {r253:DI=r675:DI+r252:DI;clobber flags:CC;}
      REG_DEAD r162:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  624: r675:DI=r162:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 624:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=676 from oldreg=435, assigning class GENERAL_REGS to r676
  243: {r676:DI=r676:DI^r253:DI;clobber flags:CC;}
      REG_DEAD r148:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  625: r676:DI=r148:DI
    Inserting insn reload after:
  626: r435:DI=r676:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 625:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=677 from oldreg=436, assigning class GENERAL_REGS to r677
      Creating newreg=678 from oldreg=348, assigning class GENERAL_REGS to r678
      Making reload reg 678 for reg 348 optional
  245: {r677:DI=r677:DI^r678:DI;clobber flags:CC;}
      REG_DEAD r348:DI
      REG_DEAD r347:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  627: r677:DI=r347:DI
  629: r678:DI=r348:DI
    Inserting insn reload after:
  628: r436:DI=r677:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 627:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 629:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 246
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 247:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=679 from oldreg=522, assigning class GENERAL_REGS to r679
  247: {r679:DI=r437:DI+r255:DI;clobber flags:CC;}
      REG_DEAD r437:DI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  630: r522:DI=r679:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 630:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 248:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=680 from oldreg=522, assigning class GENERAL_REGS to r680
      Making reload reg 680 for reg 522 optional
  248: {r438:DI=r252:DI^r680:DI;clobber flags:CC;}
      REG_DEAD r252:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  631: r680:DI=r522:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 631:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=0,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 250:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=681 from oldreg=262, assigning class GENERAL_REGS to r681
  250: {r681:DI=r253:DI+r523:DI;clobber flags:CC;}
      REG_DEAD r253:DI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  632: r262:DI=r681:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 632:  (0) m  (1) re {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=682 from oldreg=262, assigning class GENERAL_REGS to r682
      Making reload reg 682 for reg 262 optional
  251: {r439:DI=r255:DI^r682:DI;clobber flags:CC;}
      REG_DEAD r255:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  633: r682:DI=r262:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 633:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =rm  (1) 0  (2) cJ {*rotrdi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 255:  (0) rm  (1) 0  (2) re {*addsi_2}
      Creating newreg=683 from oldreg=100, assigning class GENERAL_REGS to r683
      Making reload reg 683 for reg 100 optional
  255: {flags:CCZ=cmp(r683:SI-0x1,0);r683:SI=r683:SI-0x1;}
    Inserting insn reload before:
  634: r683:SI=r100:SI
    Inserting insn reload after:
  635: r100:SI=r683:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 635:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 634:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) qm {zero_extendqidi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 261:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 263:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=684 from oldreg=290, assigning class GENERAL_REGS to r684
  265: r684:DI=[r442:DI*0x8+r441:DI]
      REG_EQUAL [r442:DI*0x8+`c64']
    Inserting insn reload after:
  636: r290:DI=r684:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 636:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 270:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 273:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=685 from oldreg=295, assigning class GENERAL_REGS to r685
  273: r685:DI=[r446:DI*0x8+frame:DI]
    Inserting insn reload after:
  637: r295:DI=r685:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 637:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 277:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=686 from oldreg=298, assigning class GENERAL_REGS to r686
  277: r686:DI=[r448:DI*0x8+r441:DI]
      REG_EQUAL [r448:DI*0x8+`c64']
    Inserting insn reload after:
  638: r298:DI=r686:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 638:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 279:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=687 from oldreg=299, assigning class GENERAL_REGS to r687
  279: r687:DI=[r448:DI*0x8+frame:DI]
      REG_DEAD r448:DI
    Inserting insn reload after:
  639: r299:DI=r687:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 639:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 282:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 285:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=688 from oldreg=303, assigning class GENERAL_REGS to r688
  285: r688:DI=[r452:DI*0x8+frame:DI]
    Inserting insn reload after:
  640: r303:DI=r688:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 640:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 289:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=689 from oldreg=306, assigning class GENERAL_REGS to r689
  289: r689:DI=[r454:DI*0x8+r441:DI]
      REG_EQUAL [r454:DI*0x8+`c64']
    Inserting insn reload after:
  641: r306:DI=r689:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 641:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 291:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=690 from oldreg=307, assigning class GENERAL_REGS to r690
  291: r690:DI=[r454:DI*0x8+frame:DI]
      REG_DEAD r454:DI
    Inserting insn reload after:
  642: r307:DI=r690:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 642:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 294:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=691 from oldreg=530, assigning class GENERAL_REGS to r691
  294: r691:DI=[r452:DI*0x8+r441:DI]
      REG_DEAD r452:DI
      REG_EQUAL [r452:DI*0x8+`c64']
    Inserting insn reload after:
  643: r530:DI=r691:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 643:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 297:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=692 from oldreg=311, assigning class GENERAL_REGS to r692
  297: r692:DI=[r458:DI*0x8+frame:DI]
    Inserting insn reload after:
  644: r311:DI=r692:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 644:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 301:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=693 from oldreg=314, assigning class GENERAL_REGS to r693
  301: r693:DI=[r460:DI*0x8+r441:DI]
      REG_EQUAL [r460:DI*0x8+`c64']
    Inserting insn reload after:
  645: r314:DI=r693:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 645:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 303:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=694 from oldreg=315, assigning class GENERAL_REGS to r694
  303: r694:DI=[r460:DI*0x8+frame:DI]
      REG_DEAD r460:DI
    Inserting insn reload after:
  646: r315:DI=r694:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 646:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 306:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=695 from oldreg=316, assigning class GENERAL_REGS to r695
  306: r695:DI=[r458:DI*0x8+r441:DI]
      REG_DEAD r458:DI
      REG_EQUAL [r458:DI*0x8+`c64']
    Inserting insn reload after:
  647: r316:DI=r695:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 647:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 309:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=696 from oldreg=319, assigning class GENERAL_REGS to r696
  309: r696:DI=[r464:DI*0x8+frame:DI]
    Inserting insn reload after:
  648: r319:DI=r696:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 648:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 313:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=697 from oldreg=322, assigning class GENERAL_REGS to r697
  313: r697:DI=[r466:DI*0x8+r441:DI]
      REG_EQUAL [r466:DI*0x8+`c64']
    Inserting insn reload after:
  649: r322:DI=r697:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 649:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 315:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=698 from oldreg=323, assigning class GENERAL_REGS to r698
  315: r698:DI=[r466:DI*0x8+frame:DI]
      REG_DEAD r466:DI
    Inserting insn reload after:
  650: r323:DI=r698:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 650:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 318:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=699 from oldreg=324, assigning class GENERAL_REGS to r699
  318: r699:DI=[r464:DI*0x8+r441:DI]
      REG_DEAD r464:DI
      REG_EQUAL [r464:DI*0x8+`c64']
    Inserting insn reload after:
  651: r324:DI=r699:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 651:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 321:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=700 from oldreg=327, assigning class GENERAL_REGS to r700
  321: r700:DI=[r470:DI*0x8+frame:DI]
    Inserting insn reload after:
  652: r327:DI=r700:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 652:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 325:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=701 from oldreg=330, assigning class GENERAL_REGS to r701
  325: r701:DI=[r472:DI*0x8+r441:DI]
      REG_EQUAL [r472:DI*0x8+`c64']
    Inserting insn reload after:
  653: r330:DI=r701:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 653:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 327:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=702 from oldreg=331, assigning class GENERAL_REGS to r702
  327: r702:DI=[r472:DI*0x8+frame:DI]
      REG_DEAD r472:DI
    Inserting insn reload after:
  654: r331:DI=r702:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 654:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 330:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=703 from oldreg=332, assigning class GENERAL_REGS to r703
  330: r703:DI=[r470:DI*0x8+r441:DI]
      REG_DEAD r470:DI
      REG_EQUAL [r470:DI*0x8+`c64']
    Inserting insn reload after:
  655: r332:DI=r703:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 655:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 333:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=704 from oldreg=335, assigning class GENERAL_REGS to r704
  333: r704:DI=[r476:DI*0x8+frame:DI]
    Inserting insn reload after:
  656: r335:DI=r704:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 656:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 337:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=705 from oldreg=338, assigning class GENERAL_REGS to r705
  337: r705:DI=[r478:DI*0x8+r441:DI]
      REG_EQUAL [r478:DI*0x8+`c64']
    Inserting insn reload after:
  657: r338:DI=r705:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 657:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 339:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=706 from oldreg=339, assigning class GENERAL_REGS to r706
  339: r706:DI=[r478:DI*0x8+frame:DI]
      REG_DEAD r478:DI
    Inserting insn reload after:
  658: r339:DI=r706:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 658:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 342:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=707 from oldreg=340, assigning class GENERAL_REGS to r707
  342: r707:DI=[r476:DI*0x8+r441:DI]
      REG_DEAD r476:DI
      REG_EQUAL [r476:DI*0x8+`c64']
    Inserting insn reload after:
  659: r340:DI=r707:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 659:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 345:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=708 from oldreg=343, assigning class GENERAL_REGS to r708
  345: r708:DI=[r482:DI*0x8+frame:DI]
    Inserting insn reload after:
  660: r343:DI=r708:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 660:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =r  (1) qm {zero_extendqidi2}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 349:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=709 from oldreg=346, assigning class GENERAL_REGS to r709
  349: r709:DI=[r484:DI*0x8+r441:DI]
      REG_EQUAL [r484:DI*0x8+`c64']
    Inserting insn reload after:
  661: r346:DI=r709:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 661:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 351:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=710 from oldreg=347, assigning class GENERAL_REGS to r710
  351: r710:DI=[r484:DI*0x8+frame:DI]
      REG_DEAD r484:DI
    Inserting insn reload after:
  662: r347:DI=r710:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 662:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 354:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=711 from oldreg=348, assigning class GENERAL_REGS to r711
  354: r711:DI=[r482:DI*0x8+r441:DI]
      REG_DEAD r482:DI
      REG_DEAD r441:DI
      REG_EQUAL [r482:DI*0x8+`c64']
    Inserting insn reload after:
  663: r348:DI=r711:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 663:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 425:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 430:  (0) r  (1) rem {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=18,losers=3,rld_nregs=2
          alt=8,overall=18,losers=3,rld_nregs=2
            2 Non pseudo reload: reject++
          alt=9,overall=13,losers=2,rld_nregs=1
	 Choosing alt 9 in insn 361:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=712 from oldreg=488, assigning class SSE_REGS to r712
  361: r712:V2DI=vec_concat(r712:V2DI#0,r262:DI)
      REG_DEAD r262:DI
      REG_DEAD r244:DI
    Inserting insn reload before:
  664: clobber r712:V2DI
  665: r712:V2DI#0=r244:DI
    Inserting insn reload after:
  666: r488:V2DI=r712:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=7,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            alt=13,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=14,overall=11,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=15,overall=20,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=14,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=24: Bad operand -- refuse
      Creating newreg=713, assigning class NO_REGS to secondary r713
  665: r713:DI=r244:DI
    Inserting the sec. move after:
  667: r712:V2DI#0=r713:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 667:  (0) *v  (1) m {*movdi_internal}
            alt=3: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=18,losers=3,rld_nregs=2
          alt=8,overall=18,losers=3,rld_nregs=2
            2 Spill pseudo into memory: reject+=3
          alt=9,overall=15,losers=2,rld_nregs=1
	 Choosing alt 9 in insn 362:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=714 from oldreg=489, assigning class SSE_REGS to r714
      Creating newreg=715 from oldreg=225, assigning class NO_REGS to r715
  362: r714:V2DI=vec_concat(r714:V2DI#0,r715:DI)
      REG_DEAD r225:DI
      REG_DEAD r208:DI
    Inserting insn reload before:
  668: clobber r714:V2DI
  669: r714:V2DI#0=r208:DI
  671: r715:DI=r225:DI
    Inserting insn reload after:
  670: r489:V2DI=r714:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 669:  (0) *v  (1) m {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 671:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 363
	 Choosing alt 0 in insn 363:  (0) =x  (1) %0  (2) xm {*xorv2di3}
            alt=3: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=12,losers=2,rld_nregs=2
          alt=8,overall=12,losers=2,rld_nregs=2
            2 Non pseudo reload: reject++
          alt=9,overall=7,losers=1,rld_nregs=1
	 Choosing alt 9 in insn 364:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=716 from oldreg=491, assigning class SSE_REGS to r716
  364: r716:V2DI=vec_concat(r716:V2DI#0,r128:DI)
      REG_DEAD r128:DI
      REG_DEAD r127:DI
    Inserting insn reload before:
  672: clobber r716:V2DI
  673: r716:V2DI#0=r127:DI
    Inserting insn reload after:
  674: r491:V2DI=r716:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 673:  (0) *v  (1) m {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
	 Choosing alt 0 in insn 365:  (0) =x  (1) %0  (2) xm {*xorv2di3}
            alt=3: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=12,losers=2,rld_nregs=2
          alt=8,overall=12,losers=2,rld_nregs=2
            2 Non pseudo reload: reject++
          alt=9,overall=7,losers=1,rld_nregs=1
	 Choosing alt 9 in insn 366:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=717 from oldreg=493, assigning class SSE_REGS to r717
  366: r717:V2DI=vec_concat(r717:V2DI#0,r120:DI)
      REG_DEAD r120:DI
      REG_DEAD r119:DI
    Inserting insn reload before:
  675: clobber r717:V2DI
  676: r717:V2DI#0=r119:DI
    Inserting insn reload after:
  677: r493:V2DI=r717:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 676:  (0) *v  (1) m {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 367:  (0) =x  (1) %0  (2) xm {*xorv2di3}
Changing address in insn 368 r350:DI+0x88 -- no change
Changing pseudo 350 in address of insn 368 on equiv [argp:DI+0xd0]
      Creating newreg=718, assigning class GENERAL_REGS to address r718
	   Change to class INDEX_REGS for r718
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =m  (1) v {sse2_storedquv16qi}
  368: [r718:DI+0x88]=unspec[r494:V2DI#0] 104
      REG_DEAD r494:V2DI
    Inserting insn reload before:
  678: r718:DI=[argp:DI+0xd0]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 678:  (0) r  (1) rem {*movdi_internal}
            alt=3: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=18,losers=3,rld_nregs=2
          alt=8,overall=18,losers=3,rld_nregs=2
            2 Spill pseudo into memory: reject+=3
          alt=9,overall=15,losers=2,rld_nregs=1
	 Choosing alt 9 in insn 370:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=719 from oldreg=495, assigning class SSE_REGS to r719
      Creating newreg=720 from oldreg=258, assigning class NO_REGS to r720
  370: r719:V2DI=vec_concat(r719:V2DI#0,r720:DI)
      REG_DEAD r258:DI
      REG_DEAD r241:DI
    Inserting insn reload before:
  679: clobber r719:V2DI
  680: r719:V2DI#0=r241:DI
  682: r720:DI=r258:DI
    Inserting insn reload after:
  681: r495:V2DI=r719:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 680:  (0) *v  (1) m {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 682:  (0) m  (1) re {*movdi_internal}
            alt=3: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=12,losers=2,rld_nregs=2
          alt=8,overall=12,losers=2,rld_nregs=2
            2 Non pseudo reload: reject++
          alt=9,overall=7,losers=1,rld_nregs=1
	 Choosing alt 9 in insn 371:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=721 from oldreg=496, assigning class SSE_REGS to r721
  371: r721:V2DI=vec_concat(r721:V2DI#0,r197:DI)
      REG_DEAD r211:DI
      REG_DEAD r197:DI
    Inserting insn reload before:
  683: clobber r721:V2DI
  684: r721:V2DI#0=r211:DI
    Inserting insn reload after:
  685: r496:V2DI=r721:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 684:  (0) *v  (1) m {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 372
	 Choosing alt 0 in insn 372:  (0) =x  (1) %0  (2) xm {*xorv2di3}
            alt=3: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=12,losers=2,rld_nregs=2
          alt=8,overall=12,losers=2,rld_nregs=2
            2 Non pseudo reload: reject++
          alt=9,overall=7,losers=1,rld_nregs=1
	 Choosing alt 9 in insn 373:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=722 from oldreg=498, assigning class SSE_REGS to r722
  373: r722:V2DI=vec_concat(r722:V2DI#0,r130:DI)
      REG_DEAD r130:DI
      REG_DEAD r129:DI
    Inserting insn reload before:
  686: clobber r722:V2DI
  687: r722:V2DI#0=r129:DI
    Inserting insn reload after:
  688: r498:V2DI=r722:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 687:  (0) *v  (1) m {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
	 Choosing alt 0 in insn 374:  (0) =x  (1) %0  (2) xm {*xorv2di3}
            alt=3: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=12,losers=2,rld_nregs=2
          alt=8,overall=12,losers=2,rld_nregs=2
            2 Non pseudo reload: reject++
          alt=9,overall=7,losers=1,rld_nregs=1
	 Choosing alt 9 in insn 375:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=723 from oldreg=500, assigning class SSE_REGS to r723
  375: r723:V2DI=vec_concat(r723:V2DI#0,r122:DI)
      REG_DEAD r122:DI
      REG_DEAD r121:DI
    Inserting insn reload before:
  689: clobber r723:V2DI
  690: r723:V2DI#0=r121:DI
    Inserting insn reload after:
  691: r500:V2DI=r723:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 690:  (0) *v  (1) m {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 376:  (0) =x  (1) %0  (2) xm {*xorv2di3}
Changing address in insn 377 r350:DI+0x98 -- no change
Changing pseudo 350 in address of insn 377 on equiv [argp:DI+0xd0]
      Creating newreg=724, assigning class GENERAL_REGS to address r724
	   Change to class INDEX_REGS for r724
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =m  (1) v {sse2_storedquv16qi}
  377: [r724:DI+0x98]=unspec[r501:V2DI#0] 104
      REG_DEAD r501:V2DI
    Inserting insn reload before:
  692: r724:DI=[argp:DI+0xd0]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 692:  (0) r  (1) rem {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=24,losers=4,rld_nregs=2
          alt=8,overall=24,losers=4,rld_nregs=2
            2 Spill pseudo into memory: reject+=3
          alt=9,overall=21,losers=3,rld_nregs=1
	 Choosing alt 9 in insn 379:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=725 from oldreg=502, assigning class SSE_REGS to r725
      Creating newreg=726 from oldreg=243, assigning class NO_REGS to r726
  379: r725:V2DI=vec_concat(r725:V2DI#0,r726:DI)
      REG_DEAD r243:DI
      REG_DEAD r227:DI
    Inserting insn reload before:
  693: clobber r725:V2DI
  694: r725:V2DI#0=r227:DI
  696: r726:DI=r243:DI
    Inserting insn reload after:
  695: r502:V2DI=r725:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=7,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            alt=13,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=14,overall=11,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=15,overall=20,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=14,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=24: Bad operand -- refuse
      Creating newreg=727, assigning class NO_REGS to secondary r727
  694: r727:DI=r227:DI
    Inserting the sec. move after:
  697: r725:V2DI#0=r727:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 697:  (0) *v  (1) m {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 696:  (0) m  (1) re {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=18,losers=3,rld_nregs=2
          alt=8,overall=18,losers=3,rld_nregs=2
            2 Non pseudo reload: reject++
          alt=9,overall=13,losers=2,rld_nregs=1
	 Choosing alt 9 in insn 380:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=728 from oldreg=503, assigning class SSE_REGS to r728
  380: r728:V2DI=vec_concat(r728:V2DI#0,r214:DI)
      REG_DEAD r264:DI
      REG_DEAD r214:DI
    Inserting insn reload before:
  698: clobber r728:V2DI
  699: r728:V2DI#0=r264:DI
    Inserting insn reload after:
  700: r503:V2DI=r728:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=7,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            alt=13,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=14,overall=11,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=15,overall=20,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=14,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=24: Bad operand -- refuse
      Creating newreg=729, assigning class NO_REGS to secondary r729
  699: r729:DI=r264:DI
    Inserting the sec. move after:
  701: r728:V2DI#0=r729:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 701:  (0) *v  (1) m {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 381:  (0) =x  (1) %0  (2) xm {*xorv2di3}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 383:  (0) =x  (1) %0  (2) xm {*xorv2di3}
            alt=3: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=12,losers=2,rld_nregs=2
          alt=8,overall=12,losers=2,rld_nregs=2
            2 Non pseudo reload: reject++
          alt=9,overall=7,losers=1,rld_nregs=1
	 Choosing alt 9 in insn 384:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=730 from oldreg=507, assigning class SSE_REGS to r730
  384: r730:V2DI=vec_concat(r730:V2DI#0,r124:DI)
      REG_DEAD r124:DI
      REG_DEAD r123:DI
    Inserting insn reload before:
  702: clobber r730:V2DI
  703: r730:V2DI#0=r123:DI
    Inserting insn reload after:
  704: r507:V2DI=r730:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 703:  (0) *v  (1) m {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 385:  (0) =x  (1) %0  (2) xm {*xorv2di3}
Changing address in insn 386 r350:DI+0xa8 -- no change
Changing pseudo 350 in address of insn 386 on equiv [argp:DI+0xd0]
      Creating newreg=731, assigning class GENERAL_REGS to address r731
	   Change to class INDEX_REGS for r731
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =m  (1) v {sse2_storedquv16qi}
  386: [r731:DI+0xa8]=unspec[r508:V2DI#0] 104
      REG_DEAD r508:V2DI
    Inserting insn reload before:
  705: r731:DI=[argp:DI+0xd0]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 705:  (0) r  (1) rem {*movdi_internal}
            alt=3: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=12,losers=2,rld_nregs=2
          alt=8,overall=12,losers=2,rld_nregs=2
            2 Non pseudo reload: reject++
          alt=9,overall=7,losers=1,rld_nregs=1
	 Choosing alt 9 in insn 388:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=732 from oldreg=509, assigning class SSE_REGS to r732
  388: r732:V2DI=vec_concat(r732:V2DI#0,r246:DI)
      REG_DEAD r246:DI
      REG_DEAD r230:DI
    Inserting insn reload before:
  706: clobber r732:V2DI
  707: r732:V2DI#0=r230:DI
    Inserting insn reload after:
  708: r509:V2DI=r732:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 707:  (0) *v  (1) m {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=18,losers=3,rld_nregs=2
          alt=8,overall=18,losers=3,rld_nregs=2
            2 Non pseudo reload: reject++
          alt=9,overall=13,losers=2,rld_nregs=1
	 Choosing alt 9 in insn 389:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=733 from oldreg=510, assigning class SSE_REGS to r733
  389: r733:V2DI=vec_concat(r733:V2DI#0,r210:DI)
      REG_DEAD r260:DI
      REG_DEAD r210:DI
    Inserting insn reload before:
  709: clobber r733:V2DI
  710: r733:V2DI#0=r260:DI
    Inserting insn reload after:
  711: r510:V2DI=r733:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=7,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=9,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            alt=13,overall=15,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=14,overall=11,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=15,overall=20,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=14,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=24: Bad operand -- refuse
      Creating newreg=734, assigning class NO_REGS to secondary r734
  710: r734:DI=r260:DI
    Inserting the sec. move after:
  712: r733:V2DI#0=r734:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 712:  (0) *v  (1) m {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 390:  (0) =x  (1) %0  (2) xm {*xorv2di3}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 392:  (0) =x  (1) %0  (2) xm {*xorv2di3}
            alt=3: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
          alt=6,overall=12,losers=2,rld_nregs=2
          alt=8,overall=12,losers=2,rld_nregs=2
            2 Non pseudo reload: reject++
          alt=9,overall=7,losers=1,rld_nregs=1
	 Choosing alt 9 in insn 393:  (0) x  (1) 0  (2) m {vec_concatv2di}
      Creating newreg=735 from oldreg=514, assigning class SSE_REGS to r735
  393: r735:V2DI=vec_concat(r735:V2DI#0,r126:DI)
      REG_DEAD r126:DI
      REG_DEAD r125:DI
    Inserting insn reload before:
  713: clobber r735:V2DI
  714: r735:V2DI#0=r125:DI
    Inserting insn reload after:
  715: r514:V2DI=r735:V2DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=5,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=9,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=3,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 714:  (0) *v  (1) m {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 394:  (0) =x  (1) %0  (2) xm {*xorv2di3}
Changing address in insn 395 r350:DI+0xb8 -- no change
Changing pseudo 350 in address of insn 395 on equiv [argp:DI+0xd0]
      Creating newreg=736, assigning class GENERAL_REGS to address r736
	   Change to class INDEX_REGS for r736
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =m  (1) v {sse2_storedquv16qi}
  395: [r736:DI+0xb8]=unspec[r515:V2DI#0] 104
      REG_DEAD r515:V2DI
      REG_DEAD r350:DI
    Inserting insn reload before:
  716: r736:DI=[argp:DI+0xd0]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 716:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 8
   Insn 401: point = 0
   Insn 400: point = 0
   Insn 395: point = 0
   Insn 716: point = 1
   Insn 394: point = 2
   Insn 715: point = 4
	Hard reg 23 is preferable by r735 with profit 58
   Insn 393: point = 6
   Insn 714: point = 8
   Insn 713: point = 9
   Insn 392: point = 10
   Insn 390: point = 12
   Insn 711: point = 14
	Hard reg 22 is preferable by r733 with profit 58
   Insn 389: point = 16
   Insn 712: point = 18
   Insn 710: point = 19
	Hard reg 3 is preferable by r734 with profit 58
   Insn 709: point = 21
   Insn 708: point = 22
	Hard reg 21 is preferable by r732 with profit 58
   Insn 388: point = 24
   Insn 707: point = 26
   Insn 706: point = 27
   Insn 386: point = 28
   Insn 705: point = 29
   Insn 385: point = 30
   Insn 704: point = 32
	Hard reg 24 is preferable by r730 with profit 58
   Insn 384: point = 34
   Insn 703: point = 36
   Insn 702: point = 37
   Insn 383: point = 38
   Insn 381: point = 40
   Insn 700: point = 42
	Hard reg 22 is preferable by r728 with profit 58
   Insn 380: point = 44
   Insn 701: point = 46
   Insn 699: point = 47
	Hard reg 37 is preferable by r729 with profit 58
   Insn 698: point = 49
   Insn 695: point = 50
	Hard reg 21 is preferable by r725 with profit 58
   Insn 379: point = 52
   Insn 696: point = 54
	Hard reg 42 is preferable by r726 with profit 58
   Insn 697: point = 56
   Insn 694: point = 57
	Hard reg 6 is preferable by r727 with profit 58
   Insn 693: point = 59
   Insn 377: point = 60
   Insn 692: point = 61
   Insn 376: point = 62
   Insn 691: point = 64
	Hard reg 22 is preferable by r723 with profit 58
   Insn 375: point = 66
   Insn 690: point = 68
   Insn 689: point = 69
   Insn 374: point = 70
   Insn 688: point = 72
	Hard reg 23 is preferable by r722 with profit 58
   Insn 373: point = 74
   Insn 687: point = 76
   Insn 686: point = 77
   Insn 372: point = 78
   Insn 685: point = 80
	Hard reg 21 is preferable by r721 with profit 58
   Insn 371: point = 82
   Insn 684: point = 84
   Insn 683: point = 85
   Insn 681: point = 86
	Hard reg 22 is preferable by r719 with profit 58
   Insn 370: point = 88
   Insn 682: point = 90
	Hard reg 44 is preferable by r720 with profit 58
   Insn 680: point = 92
   Insn 679: point = 93
   Insn 368: point = 94
   Insn 678: point = 95
   Insn 367: point = 96
   Insn 677: point = 98
	Hard reg 22 is preferable by r717 with profit 58
   Insn 366: point = 100
   Insn 676: point = 102
   Insn 675: point = 103
   Insn 365: point = 104
   Insn 674: point = 106
	Hard reg 24 is preferable by r716 with profit 58
   Insn 364: point = 108
   Insn 673: point = 110
   Insn 672: point = 111
   Insn 363: point = 112
   Insn 670: point = 114
	Hard reg 21 is preferable by r714 with profit 58
   Insn 362: point = 116
   Insn 671: point = 118
	Hard reg 43 is preferable by r715 with profit 58
   Insn 669: point = 120
   Insn 668: point = 121
   Insn 666: point = 122
	Hard reg 22 is preferable by r712 with profit 58
   Insn 361: point = 124
   Insn 667: point = 126
   Insn 665: point = 127
	Hard reg 38 is preferable by r713 with profit 58
   Insn 664: point = 129
   Insn 432: point = 130
   Insn 431: point = 132
   Insn 430: point = 134
   Insn 429: point = 136
   Insn 428: point = 138
   Insn 427: point = 140
   Insn 426: point = 142
   Insn 425: point = 144
  r350 is removed as live at bb8 start
  BB 6
   Insn 256: point = 147
   Insn 635: point = 147
   Insn 255: point = 149
   Insn 634: point = 149
   Insn 254: point = 151
   Insn 252: point = 151
   Insn 251: point = 153
   Insn 633: point = 155
   Insn 632: point = 156
   Insn 250: point = 158
   Insn 249: point = 160
   Insn 248: point = 162
   Insn 631: point = 164
   Insn 630: point = 165
   Insn 247: point = 167
   Insn 246: point = 169
   Insn 628: point = 171
	Hard reg 2 is preferable by r677 with profit 941
   Insn 245: point = 173
   Insn 629: point = 174
   Insn 627: point = 176
   Insn 244: point = 178
   Insn 626: point = 180
	Hard reg 37 is preferable by r676 with profit 941
   Insn 243: point = 182
   Insn 625: point = 182
   Insn 242: point = 184
   Insn 624: point = 186
   Insn 241: point = 188
   Insn 240: point = 190
   Insn 239: point = 192
   Insn 623: point = 194
   Insn 238: point = 195
   Insn 621: point = 197
	Hard reg 0 is preferable by r672 with profit 941
   Insn 237: point = 199
   Insn 622: point = 200
   Insn 620: point = 202
   Insn 619: point = 204
   Insn 236: point = 206
   Insn 618: point = 206
	Hard reg 37 is preferable by r671 with profit 941
   Insn 235: point = 208
   Insn 234: point = 210
   Insn 233: point = 212
   Insn 232: point = 214
   Insn 617: point = 216
   Insn 616: point = 217
   Insn 231: point = 219
   Insn 230: point = 221
   Insn 614: point = 223
	Hard reg 0 is preferable by r667 with profit 941
   Insn 229: point = 225
   Insn 615: point = 226
   Insn 613: point = 228
   Insn 228: point = 230
   Insn 227: point = 232
   Insn 226: point = 234
   Insn 612: point = 236
   Insn 225: point = 238
   Insn 224: point = 240
   Insn 223: point = 242
   Insn 222: point = 244
   Insn 610: point = 246
	Hard reg 0 is preferable by r664 with profit 941
   Insn 221: point = 248
   Insn 611: point = 249
   Insn 609: point = 251
   Insn 608: point = 253
   Insn 220: point = 255
   Insn 607: point = 255
	Hard reg 38 is preferable by r663 with profit 941
   Insn 219: point = 257
   Insn 606: point = 259
   Insn 605: point = 260
   Insn 218: point = 262
   Insn 217: point = 264
   Insn 216: point = 266
   Insn 215: point = 268
   Insn 214: point = 270
   Insn 603: point = 272
	Hard reg 39 is preferable by r659 with profit 941
   Insn 213: point = 274
   Insn 604: point = 275
   Insn 602: point = 277
   Insn 212: point = 279
   Insn 211: point = 281
   Insn 210: point = 283
   Insn 209: point = 285
   Insn 208: point = 287
   Insn 207: point = 289
   Insn 206: point = 291
   Insn 600: point = 293
	Hard reg 39 is preferable by r657 with profit 941
   Insn 205: point = 295
   Insn 601: point = 296
   Insn 599: point = 298
   Insn 598: point = 300
   Insn 204: point = 302
   Insn 597: point = 302
	Hard reg 40 is preferable by r656 with profit 941
   Insn 203: point = 304
   Insn 202: point = 306
   Insn 596: point = 308
   Insn 595: point = 309
   Insn 201: point = 311
   Insn 594: point = 311
	Hard reg 41 is preferable by r654 with profit 941
   Insn 200: point = 313
   Insn 593: point = 315
   Insn 592: point = 316
   Insn 199: point = 318
   Insn 198: point = 320
   Insn 590: point = 322
	Hard reg 5 is preferable by r650 with profit 941
   Insn 197: point = 324
   Insn 591: point = 325
   Insn 589: point = 327
   Insn 196: point = 329
   Insn 195: point = 331
   Insn 194: point = 333
   Insn 193: point = 335
   Insn 192: point = 337
   Insn 191: point = 339
   Insn 190: point = 341
   Insn 587: point = 343
	Hard reg 5 is preferable by r648 with profit 941
   Insn 189: point = 345
   Insn 588: point = 346
   Insn 586: point = 348
   Insn 188: point = 350
   Insn 187: point = 352
   Insn 186: point = 354
   Insn 185: point = 356
   Insn 184: point = 358
   Insn 183: point = 360
   Insn 182: point = 362
   Insn 584: point = 364
	Hard reg 5 is preferable by r646 with profit 941
   Insn 181: point = 366
   Insn 585: point = 367
   Insn 583: point = 369
   Insn 180: point = 371
   Insn 582: point = 373
	Hard reg 37 is preferable by r645 with profit 941
   Insn 179: point = 375
   Insn 581: point = 375
   Insn 580: point = 377
	Hard reg 43 is preferable by r644 with profit 941
   Insn 178: point = 379
   Insn 579: point = 379
   Insn 177: point = 381
   Insn 578: point = 383
	Hard reg 41 is preferable by r643 with profit 941
   Insn 176: point = 385
   Insn 577: point = 385
   Insn 175: point = 387
   Insn 576: point = 389
   Insn 174: point = 391
   Insn 575: point = 393
   Insn 573: point = 394
	Hard reg 1 is preferable by r639 with profit 941
   Insn 173: point = 396
   Insn 574: point = 397
   Insn 572: point = 399
   Insn 172: point = 401
   Insn 171: point = 403
   Insn 170: point = 405
   Insn 169: point = 407
   Insn 168: point = 409
   Insn 167: point = 411
   Insn 166: point = 413
   Insn 570: point = 415
	Hard reg 2 is preferable by r637 with profit 941
   Insn 165: point = 417
   Insn 571: point = 418
   Insn 569: point = 420
   Insn 164: point = 422
   Insn 568: point = 424
	Hard reg 38 is preferable by r636 with profit 941
   Insn 163: point = 426
   Insn 567: point = 426
   Insn 162: point = 428
   Insn 161: point = 430
   Insn 160: point = 432
   Insn 159: point = 434
   Insn 566: point = 436
   Insn 158: point = 438
   Insn 565: point = 440
   Insn 563: point = 441
	Hard reg 1 is preferable by r632 with profit 941
   Insn 157: point = 443
   Insn 564: point = 444
   Insn 562: point = 446
   Insn 156: point = 448
   Insn 155: point = 450
   Insn 561: point = 452
   Insn 560: point = 453
   Insn 154: point = 455
   Insn 153: point = 457
   Insn 152: point = 459
   Insn 151: point = 461
   Insn 150: point = 463
   Insn 149: point = 465
   Insn 559: point = 467
   Insn 148: point = 469
   Insn 558: point = 471
	Hard reg 40 is preferable by r628 with profit 941
   Insn 147: point = 473
   Insn 557: point = 473
   Insn 556: point = 475
	Hard reg 2 is preferable by r627 with profit 941
   Insn 146: point = 477
   Insn 555: point = 477
   Insn 145: point = 479
   Insn 144: point = 481
   Insn 143: point = 483
   Insn 142: point = 485
   Insn 554: point = 487
   Insn 552: point = 488
	Hard reg 1 is preferable by r624 with profit 941
   Insn 141: point = 490
   Insn 553: point = 491
   Insn 551: point = 493
   Insn 550: point = 495
   Insn 140: point = 497
   Insn 549: point = 497
	Hard reg 37 is preferable by r623 with profit 941
   Insn 139: point = 499
   Insn 548: point = 501
   Insn 547: point = 502
   Insn 138: point = 504
   Insn 137: point = 506
   Insn 136: point = 508
   Insn 135: point = 510
   Insn 134: point = 512
   Insn 133: point = 514
   Insn 132: point = 516
   Insn 131: point = 518
   Insn 130: point = 520
   Insn 129: point = 522
   Insn 128: point = 524
   Insn 127: point = 526
   Insn 546: point = 528
   Insn 126: point = 530
   Insn 125: point = 532
   Insn 545: point = 534
  BB 7
   Insn 409: point = 537
   Insn 663: point = 537
   Insn 354: point = 539
   Insn 662: point = 541
   Insn 351: point = 543
   Insn 661: point = 545
   Insn 349: point = 547
   Insn 348: point = 548
   Insn 660: point = 549
   Insn 345: point = 551
   Insn 344: point = 552
   Insn 659: point = 553
   Insn 342: point = 555
   Insn 658: point = 557
   Insn 339: point = 559
   Insn 657: point = 561
   Insn 337: point = 563
   Insn 336: point = 564
   Insn 656: point = 565
   Insn 333: point = 567
   Insn 332: point = 568
   Insn 655: point = 569
   Insn 330: point = 571
   Insn 654: point = 573
   Insn 327: point = 575
   Insn 653: point = 577
   Insn 325: point = 579
   Insn 324: point = 580
   Insn 652: point = 581
   Insn 321: point = 583
   Insn 320: point = 584
   Insn 651: point = 585
   Insn 318: point = 587
   Insn 650: point = 589
   Insn 315: point = 591
   Insn 649: point = 593
   Insn 313: point = 595
   Insn 312: point = 596
   Insn 648: point = 597
   Insn 309: point = 599
   Insn 308: point = 600
   Insn 647: point = 601
   Insn 306: point = 603
   Insn 646: point = 605
   Insn 303: point = 607
   Insn 645: point = 609
   Insn 301: point = 611
   Insn 300: point = 612
   Insn 644: point = 613
   Insn 297: point = 615
   Insn 296: point = 616
   Insn 643: point = 617
   Insn 294: point = 619
   Insn 642: point = 621
   Insn 291: point = 623
   Insn 641: point = 625
   Insn 289: point = 627
   Insn 288: point = 628
   Insn 640: point = 629
   Insn 285: point = 631
   Insn 284: point = 632
   Insn 282: point = 633
   Insn 639: point = 635
   Insn 279: point = 637
   Insn 638: point = 639
   Insn 277: point = 641
   Insn 276: point = 642
   Insn 637: point = 643
   Insn 273: point = 645
   Insn 272: point = 646
   Insn 270: point = 647
   Insn 267: point = 649
   Insn 636: point = 651
   Insn 265: point = 653
   Insn 264: point = 654
   Insn 263: point = 655
   Insn 261: point = 656
   Insn 260: point = 657
  BB 5
   Insn 424: point = 659
   Insn 423: point = 661
   Insn 422: point = 663
   Insn 421: point = 665
   Insn 420: point = 667
   Insn 419: point = 669
   Insn 418: point = 671
   Insn 417: point = 673
   Insn 416: point = 675
   Insn 415: point = 677
   Insn 414: point = 679
   Insn 413: point = 681
   Insn 412: point = 683
   Insn 411: point = 685
   Insn 544: point = 687
   Insn 37: point = 689
   Insn 543: point = 690
   Insn 36: point = 692
   Insn 542: point = 693
   Insn 35: point = 695
   Insn 34: point = 696
   Insn 541: point = 697
   Insn 33: point = 699
   Insn 32: point = 700
   Insn 540: point = 701
   Insn 31: point = 703
   Insn 539: point = 704
   Insn 30: point = 706
   Insn 538: point = 707
   Insn 29: point = 709
   Insn 537: point = 710
   Insn 28: point = 712
   Insn 536: point = 713
   Insn 27: point = 715
   Insn 535: point = 716
   Insn 26: point = 718
   Insn 534: point = 719
   Insn 25: point = 721
   Insn 533: point = 722
   Insn 24: point = 724
   Insn 532: point = 725
   Insn 23: point = 727
   Insn 531: point = 728
   Insn 22: point = 730
   Insn 21: point = 731
   Insn 20: point = 732
   Insn 530: point = 734
   Insn 19: point = 735
   Insn 529: point = 737
   Insn 18: point = 738
   Insn 528: point = 740
   Insn 17: point = 741
   Insn 16: point = 742
   Insn 15: point = 743
   Insn 527: point = 745
   Insn 14: point = 746
   Insn 13: point = 747
   Insn 526: point = 749
   Insn 123: point = 750
  BB 3
   Insn 407: point = 752
   Insn 524: point = 752
   Insn 120: point = 754
   Insn 523: point = 755
	Hard reg 0 is preferable by r598 with profit 29
   Insn 119: point = 757
   Insn 522: point = 758
	Hard reg 3 is preferable by r597 with profit 29
   Insn 118: point = 760
   Insn 521: point = 760
	Hard reg 3 is preferable by r597 with profit 29
	Hard reg 2 is preferable by r597 with profit 29
   Insn 117: point = 762
   Insn 116: point = 763
   Insn 520: point = 765
   Insn 519: point = 766
	Hard reg 42 is preferable by r595 with profit 29
   Insn 115: point = 768
   Insn 518: point = 769
	Hard reg 42 is preferable by r595 with profit 29
	Hard reg 0 is preferable by r595 with profit 29
   Insn 114: point = 771
   Insn 517: point = 772
	Hard reg 6 is preferable by r594 with profit 29
   Insn 113: point = 774
   Insn 516: point = 774
	Hard reg 6 is preferable by r594 with profit 29
	Hard reg 39 is preferable by r594 with profit 29
   Insn 112: point = 776
   Insn 111: point = 777
   Insn 515: point = 779
  BB 4
   Insn 12: point = 781
   Insn 11: point = 782
   Insn 10: point = 783
   Insn 525: point = 784
   Insn 9: point = 786
  BB 2
   Insn 109: point = 788
   Insn 108: point = 788
   Insn 514: point = 789
   Insn 512: point = 790
   Insn 107: point = 792
   Insn 513: point = 793
   Insn 511: point = 794
	Hard reg 0 is preferable by r590 with profit 58
   Insn 106: point = 796
   Insn 510: point = 797
   Insn 105: point = 799
   Insn 509: point = 801
   Insn 507: point = 802
   Insn 104: point = 804
   Insn 508: point = 805
   Insn 506: point = 806
	Hard reg 43 is preferable by r586 with profit 58
   Insn 103: point = 808
   Insn 505: point = 809
   Insn 102: point = 811
   Insn 504: point = 813
   Insn 502: point = 814
   Insn 101: point = 816
   Insn 503: point = 817
   Insn 501: point = 818
	Hard reg 4 is preferable by r582 with profit 58
   Insn 100: point = 820
   Insn 500: point = 821
   Insn 99: point = 823
   Insn 499: point = 825
   Insn 497: point = 826
	Hard reg 38 is preferable by r578 with profit 58
   Insn 98: point = 828
   Insn 498: point = 829
   Insn 496: point = 830
	Hard reg 38 is preferable by r578 with profit 58
	Hard reg 41 is preferable by r578 with profit 58
   Insn 97: point = 832
   Insn 495: point = 833
   Insn 96: point = 835
   Insn 494: point = 837
   Insn 493: point = 838
   Insn 95: point = 840
   Insn 492: point = 842
   Insn 491: point = 843
   Insn 94: point = 845
   Insn 490: point = 847
   Insn 489: point = 848
   Insn 93: point = 850
   Insn 488: point = 852
   Insn 487: point = 853
   Insn 92: point = 855
   Insn 486: point = 857
   Insn 485: point = 858
   Insn 91: point = 860
   Insn 484: point = 862
   Insn 483: point = 863
   Insn 90: point = 865
   Insn 482: point = 867
   Insn 481: point = 868
   Insn 89: point = 870
   Insn 480: point = 872
   Insn 479: point = 873
   Insn 88: point = 875
   Insn 478: point = 877
   Insn 87: point = 878
   Insn 477: point = 879
   Insn 476: point = 880
   Insn 86: point = 882
   Insn 475: point = 882
	Hard reg 44 is preferable by r558 with profit 58
   Insn 85: point = 884
   Insn 84: point = 886
   Insn 474: point = 887
   Insn 473: point = 888
   Insn 83: point = 890
   Insn 472: point = 890
	Hard reg 44 is preferable by r556 with profit 58
   Insn 82: point = 892
   Insn 81: point = 893
   Insn 471: point = 894
   Insn 470: point = 895
   Insn 80: point = 897
   Insn 469: point = 897
	Hard reg 0 is preferable by r554 with profit 58
   Insn 79: point = 899
   Insn 78: point = 900
   Insn 468: point = 901
   Insn 467: point = 902
   Insn 77: point = 904
   Insn 466: point = 904
	Hard reg 0 is preferable by r552 with profit 58
   Insn 76: point = 906
   Insn 75: point = 907
   Insn 465: point = 908
   Insn 464: point = 909
   Insn 74: point = 911
   Insn 463: point = 911
	Hard reg 43 is preferable by r550 with profit 58
   Insn 73: point = 913
   Insn 72: point = 914
   Insn 462: point = 915
   Insn 461: point = 916
   Insn 71: point = 918
   Insn 460: point = 918
	Hard reg 43 is preferable by r548 with profit 58
   Insn 70: point = 920
   Insn 69: point = 921
   Insn 459: point = 922
   Insn 458: point = 923
   Insn 68: point = 925
   Insn 457: point = 925
	Hard reg 0 is preferable by r546 with profit 58
   Insn 67: point = 927
   Insn 66: point = 928
   Insn 456: point = 929
   Insn 455: point = 930
   Insn 65: point = 932
   Insn 454: point = 932
	Hard reg 0 is preferable by r544 with profit 58
   Insn 64: point = 934
   Insn 63: point = 935
   Insn 453: point = 936
   Insn 452: point = 937
   Insn 62: point = 939
   Insn 451: point = 939
	Hard reg 3 is preferable by r542 with profit 58
   Insn 61: point = 941
   Insn 60: point = 942
   Insn 450: point = 943
   Insn 449: point = 944
   Insn 59: point = 946
   Insn 448: point = 946
	Hard reg 3 is preferable by r540 with profit 58
   Insn 58: point = 948
   Insn 57: point = 949
   Insn 447: point = 950
   Insn 446: point = 951
   Insn 56: point = 953
   Insn 445: point = 953
	Hard reg 0 is preferable by r538 with profit 58
   Insn 55: point = 955
   Insn 54: point = 956
   Insn 444: point = 957
   Insn 443: point = 958
   Insn 53: point = 960
   Insn 442: point = 960
	Hard reg 0 is preferable by r536 with profit 58
   Insn 52: point = 962
   Insn 51: point = 963
   Insn 441: point = 964
   Insn 440: point = 965
   Insn 50: point = 967
   Insn 439: point = 967
	Hard reg 0 is preferable by r534 with profit 58
   Insn 49: point = 969
   Insn 48: point = 970
   Insn 438: point = 971
   Insn 437: point = 972
   Insn 47: point = 974
   Insn 436: point = 974
	Hard reg 38 is preferable by r532 with profit 58
   Insn 46: point = 976
   Insn 45: point = 977
   Insn 435: point = 977
	Hard reg 5 is preferable by r531 with profit 58
   Insn 44: point = 979
   Insn 434: point = 979
	Hard reg 5 is preferable by r531 with profit 58
	Hard reg 6 is preferable by r531 with profit 58
   Insn 43: point = 981
   Insn 42: point = 982
   Insn 41: point = 982
   Insn 40: point = 984
   Insn 7: point = 985
   Insn 6: point = 986
  r350 is added to live at bb2 start
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 11 (  1.2)
Global pseudo live data have been updated:

BB 2:
    killed: 2:

      119  120  121  122  123  124  125  126  127  128  129
      130  197  211  244  262  287  291  295  299  303  307
      311  315  319  323  327  331  335  339  343  347  351
      352  353  354  355  356  357  358  359  360  361  362
      363  364  365  366  367  368  369  370  371  531  532
      533  534  535  536  537  538  539  540  541  542  543
      544  545  546  547  548  549  550  551  552  553  554
      555  556  557  558  559  560  561  562  563  564  565
      566  567  568  569  570  571  572  573  574  575  576
      577  578  579  580  581  582  583  584  585  586  587
      588  589  590  591  592
    liveout: 2:

        6    7   16   20  119  120  121  122  123  124  125
      126  127  128  129  130  197  211  244  262  287  291
      295  299  303  307  311  315  319  323  327  331  335
      339  343  347

BB 3:
    killed: 3:

      132  133  210  227  243  260  372  373  374  375  593
      594  595  596  597  598
    livein: 3:

      119  120  121  122  123  124  125  126  127  128  129
      130  197  211  244  262  287  291  295  299  303  307
      311  315  319  323  327  331  335  339  343  347
    liveout: 3:

        6    7   16   20  119  120  121  122  123  124  125
      126  127  128  129  130  197  210  211  227  243  244
      260  262  287  291  295  299  303  307  311  315  319
      323  327  331  335  339  343  347

BB 4:
    killed: 4:

      210  227  243  260  599
    livein: 4:

      119  120  121  122  123  124  125  126  127  128  129
      130  197  211  244  262  287  291  295  299  303  307
      311  315  319  323  327  331  335  339  343  347
    liveout: 4:

        6    7   16   20  119  120  121  122  123  124  125
      126  127  128  129  130  197  210  211  227  243  244
      260  262  287  291  295  299  303  307  311  315  319
      323  327  331  335  339  343  347

BB 5:
    gen: 5:

      119  120  121  122  123  124  125  126  211  227  243
      244  260  287  291
    killed: 5:

      100  208  214  225  230  241  246  258  264  269  290
      292  298  300  306  308  314  316  322  324  330  332
      338  340  346  348  517  518  519  520  521  522  523
      524  525  526  527  528  529  530  600  601  602  603
      604  605  606  607  608  609  610  611  612  613  614
      615  616  617  618
    livein: 5:

      119  120  121  122  123  124  125  126  127  128  129
      130  197  210  211  227  243  244  260  262  287  291
      295  299  303  307  311  315  319  323  327  331  335
      339  343  347
    liveout: 5:

        6    7   16   20  100  119  120  121  122  123  124
      125  126  127  128  129  130  197  208  210  214  230
      241  246  262  290  295  298  299  303  306  307  311
      314  315  316  319  322  323  324  327  330  331  332
      335  338  339  340  343  346  347  348  517  518  519
      520  521  522  523  524  525  526  527  528  529  530

BB 6:
    gen: 6:

      100  197  208  210  214  230  241  246  262  290  295
      298  299  303  306  307  311  314  315  316  319  322
      323  324  327  330  331  332  335  338  339  340  343
      346  347  348  517  518  519  520  521  522  523  524
      525  526  527  528  529  530
    killed: 6:

      100  135  137  138  140  143  145  146  148  151  153
      154  156  159  161  162  164  167  169  170  172  175
      177  178  180  183  185  186  188  191  193  194  196
      197  200  202  203  205  208  210  214  217  219  220
      222  230  233  235  236  238  241  246  250  252  253
      255  262  376  377  378  379  380  381  382  383  384
      385  386  387  388  389  390  391  392  393  394  395
      396  397  398  399  400  401  402  403  404  405  406
      407  408  409  410  411  412  413  414  415  416  417
      418  419  420  421  422  423  424  425  426  427  428
      429  430  431  432  433  434  435  436  437  438  439
      517  518  519  520  521  522  523  524  619  620  621
      622  623  624  625  626  627  628  629  630  631  632
      633  634  635  636  637  638  639  640  641  642  643
      644  645  646  647  648  649  650  651  652  653  654
      655  656  657  658  659  660  661  662  663  664  665
      666  667  668  669  670  671  672  673  674  675  676
      677  678  679  680  681  682  683
    livein: 6:

      100  119  120  121  122  123  124  125  126  127  128
      129  130  197  208  210  214  230  241  246  262  290
      295  298  299  303  306  307  311  314  315  316  319
      322  323  324  327  330  331  332  335  338  339  340
      343  346  347  348  517  518  519  520  521  522  523
      524  525  526  527  528  529  530
    liveout: 6:

        6    7   16   20  100  119  120  121  122  123  124
      125  126  127  128  129  130  197  208  210  214  230
      241  246  262  517  518  519  520  521  522  523  524
      525

BB 7:
    gen: 7:

      525
    killed: 7:

      290  295  298  299  303  306  307  311  314  315  316
      319  322  323  324  327  330  331  332  335  338  339
      340  343  346  347  348  440  441  442  446  448  452
      454  458  460  464  466  470  472  476  478  482  484
      526  527  528  529  530  684  685  686  687  688  689
      690  691  692  693  694  695  696  697  698  699  700
      701  702  703  704  705  706  707  708  709  710  711
    livein: 7:

      100  119  120  121  122  123  124  125  126  127  128
      129  130  197  208  210  214  230  241  246  262  517
      518  519  520  521  522  523  524  525
    liveout: 7:

        6    7   16   20  100  119  120  121  122  123  124
      125  126  127  128  129  130  197  208  210  214  230
      241  246  262  290  295  298  299  303  306  307  311
      314  315  316  319  322  323  324  327  330  331  332
      335  338  339  340  343  346  347  348  517  518  519
      520  521  522  523  524  525  526  527  528  529  530

BB 8:
    gen: 8:

      119  120  121  122  123  124  125  126  127  128  129
      130  197  208  210  214  230  241  246  262  517  518
      519  520  521  522  523  524
    killed: 8:

      211  225  227  243  244  258  260  264  488  489  490
      491  492  493  494  495  496  497  498  499  500  501
      502  503  504  506  507  508  509  510  511  513  514
      515  712  713  714  715  716  717  718  719  720  721
      722  723  724  725  726  727  728  729  730  731  732
      733  734  735  736
    livein: 8:

      119  120  121  122  123  124  125  126  127  128  129
      130  197  208  210  214  230  241  246  262  517  518
      519  520  521  522  523  524
    liveout: 8:

        0    6    7   16   20
 r100: [150..731] [147..147]
 r119: [102..873]
 r120: [101..868]
 r121: [68..863]
 r122: [67..858]
 r123: [36..853]
 r124: [35..848]
 r125: [8..843]
 r126: [7..838]
 r127: [110..833]
 r128: [109..821]
 r129: [76..809]
 r130: [75..797]
 r132: [770..777]
 r133: [756..763]
 r135: [513..526]
 r137: [509..522]
 r138: [505..520]
 r140: [500..516]
 r143: [342..510]
 r145: [288..506]
 r146: [237..502]
 r148: [183..495]
 r151: [464..483]
 r153: [460..479]
 r154: [456..475]
 r156: [451..469]
 r159: [292..461]
 r161: [241..457]
 r162: [187..453]
 r164: [332..448]
 r167: [414..434]
 r169: [410..430]
 r170: [406..428]
 r172: [404..422]
 r175: [245..411]
 r177: [191..407]
 r178: [334..405]
 r180: [282..401]
 r183: [363..387]
 r185: [359..381]
 r186: [355..377]
 r188: [353..371]
 r191: [196..360]
 r193: [338..356]
 r194: [284..354]
 r196: [233..350]
 r197: [380..790] [83..260]
 r200: [321..339]
 r202: [314..335]
 r203: [307..333]
 r205: [305..329]
 r208: [529..747] [120..316]
 r210: [781..784] [386..752] [17..309]
 r211: [678..802] [84..144]
 r214: [474..738] [45..300]
 r217: [271..289]
 r219: [267..285]
 r220: [263..283]
 r222: [258..279]
 r225: [660..746] [119..142]
 r227: [781..781] [686..772] [58..140]
 r230: [427..735] [26..253]
 r233: [222..242]
 r235: [215..238]
 r236: [211..234]
 r238: [209..230]
 r241: [437..743] [92..217]
 r243: [781..782] [684..766] [55..138]
 r244: [682..826] [128..136]
 r246: [376..732] [25..204]
 r250: [170..192]
 r252: [163..188]
 r253: [159..184]
 r255: [154..178]
 r258: [680..742] [91..134]
 r260: [781..783] [676..758] [20..132]
 r262: [478..814] [125..156]
 r264: [674..741] [48..130]
 r269: [672..750]
 r287: [670..982]
 r290: [659..687] [535..651]
 r291: [662..977]
 r292: [668..690]
 r295: [659..972] [494..643]
 r298: [659..693] [492..639]
 r299: [659..965] [468..635]
 r300: [666..696]
 r303: [659..958] [447..629]
 r306: [659..697] [445..625]
 r307: [659..951] [421..621]
 r308: [664..700]
 r311: [659..944] [400..613]
 r314: [659..701] [398..609]
 r315: [659..937] [370..605]
 r316: [659..704] [368..601]
 r319: [659..930] [349..597]
 r322: [659..707] [347..593]
 r323: [659..923] [328..589]
 r324: [659..710] [326..585]
 r327: [659..916] [299..581]
 r330: [659..713] [297..577]
 r331: [659..909] [278..573]
 r332: [659..716] [276..569]
 r335: [659..902] [252..565]
 r338: [659..719] [250..561]
 r339: [659..895] [229..557]
 r340: [659..722] [227..553]
 r343: [659..888] [203..549]
 r346: [659..725] [201..545]
 r347: [659..880] [177..541]
 r348: [659..728] [175..537]
 r350: [147..986]
 r351: [885..985]
 r352: [983..984]
 r353: [980..981]
 r354: [975..976]
 r355: [968..969]
 r356: [961..962]
 r357: [954..955]
 r358: [947..948]
 r359: [940..941]
 r360: [933..934]
 r361: [926..927]
 r362: [919..920]
 r363: [912..913]
 r364: [905..906]
 r365: [898..899]
 r366: [891..892]
 r367: [883..884]
 r368: [831..832]
 r369: [819..820]
 r370: [807..808]
 r371: [795..796]
 r372: [775..776]
 r373: [768..771]
 r374: [761..762]
 r375: [754..757]
 r376: [531..532]
 r377: [527..530]
 r378: [523..524]
 r379: [517..518]
 r380: [513..514]
 r381: [511..512]
 r382: [507..508]
 r383: [498..499]
 r384: [486..488]
 r385: [484..485]
 r386: [480..481]
 r387: [470..471]
 r388: [464..465]
 r389: [462..463]
 r390: [458..459]
 r391: [449..450]
 r392: [439..441]
 r393: [435..438]
 r394: [431..432]
 r395: [423..424]
 r396: [414..415]
 r397: [412..413]
 r398: [408..409]
 r399: [402..403]
 r400: [392..394]
 r401: [388..391]
 r402: [382..383]
 r403: [372..373]
 r404: [363..364]
 r405: [361..362]
 r406: [357..358]
 r407: [351..352]
 r408: [342..343]
 r409: [340..341]
 r410: [336..337]
 r411: [330..331]
 r412: [321..322]
 r413: [319..320]
 r414: [312..313]
 r415: [303..304]
 r416: [292..293]
 r417: [290..291]
 r418: [286..287]
 r419: [280..281]
 r420: [271..272]
 r421: [269..270]
 r422: [265..266]
 r423: [256..257]
 r424: [245..246]
 r425: [243..244]
 r426: [239..240]
 r427: [231..232]
 r428: [222..223]
 r429: [220..221]
 r430: [213..214]
 r431: [207..208]
 r432: [196..197]
 r433: [193..195]
 r434: [189..190]
 r435: [179..180]
 r436: [170..171]
 r437: [168..169]
 r438: [161..162]
 r439: [152..153]
 r440: [648..657]
 r441: [540..655]
 r442: [650..654]
 r446: [634..646]
 r448: [638..642]
 r452: [620..632]
 r454: [624..628]
 r458: [604..616]
 r460: [608..612]
 r464: [588..600]
 r466: [592..596]
 r470: [572..584]
 r472: [576..580]
 r476: [556..568]
 r478: [560..564]
 r482: [540..552]
 r484: [544..548]
 r488: [113..122]
 r489: [113..114]
 r490: [105..112]
 r491: [39..106]
 r492: [97..104]
 r493: [97..98]
 r494: [94..96]
 r495: [79..86]
 r496: [79..80]
 r497: [71..78]
 r498: [11..72]
 r499: [63..70]
 r500: [63..64]
 r501: [60..62]
 r502: [41..50]
 r503: [41..42]
 r504: [39..40]
 r506: [31..38]
 r507: [31..32]
 r508: [28..30]
 r509: [13..22]
 r510: [13..14]
 r511: [11..12]
 r513: [3..10]
 r514: [3..4]
 r515: [0..2]
 r517: [429..677] [145..306]
 r518: [484..659] [143..268]
 r519: [525..685] [141..264]
 r520: [482..683] [139..212]
 r521: [521..681] [137..210]
 r522: [390..679] [135..165]
 r523: [433..675] [133..160]
 r524: [519..673] [131..151]
 r525: [147..671]
 r526: [659..669] [533..656]
 r527: [659..661] [515..649]
 r528: [659..667] [515..647]
 r529: [659..665] [466..633]
 r530: [659..663] [419..617]
 r531: [978..979]
 r532: [973..974]
 r533: [970..971]
 r534: [966..967]
 r535: [963..964]
 r536: [959..960]
 r537: [956..957]
 r538: [952..953]
 r539: [949..950]
 r540: [945..946]
 r541: [942..943]
 r542: [938..939]
 r543: [935..936]
 r544: [931..932]
 r545: [928..929]
 r546: [924..925]
 r547: [921..922]
 r548: [917..918]
 r549: [914..915]
 r550: [910..911]
 r551: [907..908]
 r552: [903..904]
 r553: [900..901]
 r554: [896..897]
 r555: [893..894]
 r556: [889..890]
 r557: [886..887]
 r558: [881..882]
 r559: [878..879]
 r560: [876..877]
 r561: [874..875]
 r562: [871..872]
 r563: [869..870]
 r564: [866..867]
 r565: [864..865]
 r566: [861..862]
 r567: [859..860]
 r568: [856..857]
 r569: [854..855]
 r570: [851..852]
 r571: [849..850]
 r572: [846..847]
 r573: [844..845]
 r574: [841..842]
 r575: [839..840]
 r576: [836..837]
 r577: [834..835]
 r578: [827..830]
 r579: [828..829]
 r580: [824..825]
 r581: [822..823]
 r582: [815..818]
 r583: [816..817]
 r584: [812..813]
 r585: [810..811]
 r586: [803..806]
 r587: [804..805]
 r588: [800..801]
 r589: [798..799]
 r590: [791..794]
 r591: [792..793]
 r592: [788..789]
 r593: [778..779]
 r594: [773..774]
 r595: [767..769]
 r596: [764..765]
 r597: [759..760]
 r598: [753..755]
 r599: [785..786]
 r600: [748..749]
 r601: [744..745]
 r602: [739..740]
 r603: [736..737]
 r604: [733..734]
 r605: [729..730]
 r606: [726..727]
 r607: [723..724]
 r608: [720..721]
 r609: [717..718]
 r610: [714..715]
 r611: [711..712]
 r612: [708..709]
 r613: [705..706]
 r614: [702..703]
 r615: [698..699]
 r616: [694..695]
 r617: [691..692]
 r618: [688..689]
 r619: [533..534]
 r620: [527..528]
 r621: [503..504]
 r622: [500..501]
 r623: [496..497]
 r624: [489..493]
 r625: [490..491]
 r626: [486..487]
 r627: [476..477]
 r628: [472..473]
 r629: [466..467]
 r630: [454..455]
 r631: [451..452]
 r632: [442..446]
 r633: [443..444]
 r634: [439..440]
 r635: [435..436]
 r636: [425..426]
 r637: [416..420]
 r638: [417..418]
 r639: [395..399]
 r640: [396..397]
 r641: [392..393]
 r642: [388..389]
 r643: [384..385]
 r644: [378..379]
 r645: [374..375]
 r646: [365..369]
 r647: [366..367]
 r648: [344..348]
 r649: [345..346]
 r650: [323..327]
 r651: [324..325]
 r652: [317..318]
 r653: [314..315]
 r654: [310..311]
 r655: [307..308]
 r656: [301..302]
 r657: [294..298]
 r658: [295..296]
 r659: [273..277]
 r660: [274..275]
 r661: [261..262]
 r662: [258..259]
 r663: [254..255]
 r664: [247..251]
 r665: [248..249]
 r666: [235..236]
 r667: [224..228]
 r668: [225..226]
 r669: [218..219]
 r670: [215..216]
 r671: [205..206]
 r672: [198..202]
 r673: [199..200]
 r674: [193..194]
 r675: [185..186]
 r676: [181..182]
 r677: [172..176]
 r678: [173..174]
 r679: [166..167]
 r680: [163..164]
 r681: [157..158]
 r682: [154..155]
 r683: [148..149]
 r684: [652..653]
 r685: [644..645]
 r686: [640..641]
 r687: [636..637]
 r688: [630..631]
 r689: [626..627]
 r690: [622..623]
 r691: [618..619]
 r692: [614..615]
 r693: [610..611]
 r694: [606..607]
 r695: [602..603]
 r696: [598..599]
 r697: [594..595]
 r698: [590..591]
 r699: [586..587]
 r700: [582..583]
 r701: [578..579]
 r702: [574..575]
 r703: [570..571]
 r704: [566..567]
 r705: [562..563]
 r706: [558..559]
 r707: [554..555]
 r708: [550..551]
 r709: [546..547]
 r710: [542..543]
 r711: [538..539]
 r712: [123..129]
 r713: [126..127]
 r714: [115..121]
 r715: [117..118]
 r716: [107..111]
 r717: [99..103]
 r718: [94..95]
 r719: [87..93]
 r720: [89..90]
 r721: [81..85]
 r722: [73..77]
 r723: [65..69]
 r724: [60..61]
 r725: [51..59]
 r726: [53..54]
 r727: [56..57]
 r728: [43..49]
 r729: [46..47]
 r730: [33..37]
 r731: [28..29]
 r732: [23..27]
 r733: [15..21]
 r734: [18..19]
 r735: [5..9]
 r736: [0..1]
Compressing live ranges: from 987 to 789 - 79%
Ranges after the compression:
 r100: [92..598] [89..89]
 r119: [58..694]
 r120: [58..690]
 r121: [40..686]
 r122: [40..682]
 r123: [20..678]
 r124: [20..674]
 r125: [4..670]
 r126: [4..666]
 r127: [62..662]
 r128: [62..654]
 r129: [44..646]
 r130: [44..638]
 r132: [621..626]
 r133: [611..616]
 r135: [430..443]
 r137: [426..439]
 r138: [422..437]
 r140: [418..433]
 r143: [270..427]
 r145: [220..423]
 r146: [172..419]
 r148: [122..413]
 r151: [384..403]
 r153: [380..399]
 r154: [376..395]
 r156: [372..389]
 r159: [224..381]
 r161: [176..377]
 r162: [126..373]
 r164: [260..369]
 r167: [338..357]
 r169: [334..353]
 r170: [330..351]
 r172: [328..345]
 r175: [180..335]
 r177: [130..331]
 r178: [262..329]
 r180: [214..325]
 r183: [290..313]
 r185: [286..307]
 r186: [282..303]
 r188: [280..297]
 r191: [134..287]
 r193: [266..283]
 r194: [216..281]
 r196: [168..277]
 r197: [306..634] [48..193]
 r200: [250..267]
 r202: [244..263]
 r203: [238..261]
 r205: [236..257]
 r208: [446..606] [68..245]
 r210: [629..630] [312..608] [10..239]
 r211: [561..642] [48..87]
 r214: [394..602] [26..231]
 r217: [204..221]
 r219: [200..217]
 r220: [196..215]
 r222: [192..211]
 r225: [543..606] [68..85]
 r227: [629..629] [569..622] [34..83]
 r230: [350..600] [14..187]
 r233: [158..177]
 r235: [152..173]
 r236: [148..169]
 r238: [146..165]
 r241: [360..604] [52..153]
 r243: [629..630] [567..618] [32..81]
 r244: [565..658] [72..79]
 r246: [302..598] [14..141]
 r250: [110..131]
 r252: [104..127]
 r253: [100..123]
 r255: [96..117]
 r258: [563..604] [52..77]
 r260: [629..630] [559..612] [12..75]
 r262: [398..650] [70..97]
 r264: [557..604] [28..73]
 r269: [555..608]
 r287: [553..786]
 r290: [542..570] [452..539]
 r291: [545..782]
 r292: [551..572]
 r295: [542..778] [412..533]
 r298: [542..574] [410..531]
 r299: [542..772] [388..527]
 r300: [549..576]
 r303: [542..766] [368..523]
 r306: [542..576] [366..521]
 r307: [542..760] [344..517]
 r308: [547..578]
 r311: [542..754] [324..511]
 r314: [542..578] [322..509]
 r315: [542..748] [296..505]
 r316: [542..580] [294..501]
 r319: [542..742] [276..499]
 r322: [542..582] [274..497]
 r323: [542..736] [256..493]
 r324: [542..584] [254..489]
 r327: [542..730] [230..487]
 r330: [542..586] [228..485]
 r331: [542..724] [210..481]
 r332: [542..588] [208..477]
 r335: [542..718] [186..475]
 r338: [542..590] [184..473]
 r339: [542..712] [164..469]
 r340: [542..592] [162..465]
 r343: [542..706] [140..463]
 r346: [542..594] [138..461]
 r347: [542..700] [116..457]
 r348: [542..596] [114..453]
 r350: [89..788]
 r351: [705..788]
 r352: [787..788]
 r353: [785..786]
 r354: [781..782]
 r355: [775..776]
 r356: [769..770]
 r357: [763..764]
 r358: [757..758]
 r359: [751..752]
 r360: [745..746]
 r361: [739..740]
 r362: [733..734]
 r363: [727..728]
 r364: [721..722]
 r365: [715..716]
 r366: [709..710]
 r367: [703..704]
 r368: [661..662]
 r369: [653..654]
 r370: [645..646]
 r371: [637..638]
 r372: [625..626]
 r373: [619..622]
 r374: [615..616]
 r375: [609..612]
 r376: [448..449]
 r377: [444..447]
 r378: [440..441]
 r379: [434..435]
 r380: [430..431]
 r381: [428..429]
 r382: [424..425]
 r383: [416..417]
 r384: [406..407]
 r385: [404..405]
 r386: [400..401]
 r387: [390..391]
 r388: [384..385]
 r389: [382..383]
 r390: [378..379]
 r391: [370..371]
 r392: [362..363]
 r393: [358..361]
 r394: [354..355]
 r395: [346..347]
 r396: [338..339]
 r397: [336..337]
 r398: [332..333]
 r399: [326..327]
 r400: [318..319]
 r401: [314..317]
 r402: [308..309]
 r403: [298..299]
 r404: [290..291]
 r405: [288..289]
 r406: [284..285]
 r407: [278..279]
 r408: [270..271]
 r409: [268..269]
 r410: [264..265]
 r411: [258..259]
 r412: [250..251]
 r413: [248..249]
 r414: [242..243]
 r415: [234..235]
 r416: [224..225]
 r417: [222..223]
 r418: [218..219]
 r419: [212..213]
 r420: [204..205]
 r421: [202..203]
 r422: [198..199]
 r423: [190..191]
 r424: [180..181]
 r425: [178..179]
 r426: [174..175]
 r427: [166..167]
 r428: [158..159]
 r429: [156..157]
 r430: [150..151]
 r431: [144..145]
 r432: [134..135]
 r433: [132..133]
 r434: [128..129]
 r435: [118..119]
 r436: [110..111]
 r437: [108..109]
 r438: [102..103]
 r439: [94..95]
 r440: [536..541]
 r441: [456..541]
 r442: [538..541]
 r446: [526..535]
 r448: [530..533]
 r452: [516..525]
 r454: [520..523]
 r458: [504..513]
 r460: [508..511]
 r464: [492..501]
 r466: [496..499]
 r470: [480..489]
 r472: [484..487]
 r476: [468..477]
 r478: [472..475]
 r482: [456..465]
 r484: [460..463]
 r488: [64..69]
 r489: [64..65]
 r490: [60..63]
 r491: [22..61]
 r492: [56..59]
 r493: [56..57]
 r494: [54..55]
 r495: [46..49]
 r496: [46..47]
 r497: [42..45]
 r498: [6..43]
 r499: [38..41]
 r500: [38..39]
 r501: [36..37]
 r502: [24..29]
 r503: [24..25]
 r504: [22..23]
 r506: [18..21]
 r507: [18..19]
 r508: [16..17]
 r509: [8..13]
 r510: [8..9]
 r511: [6..7]
 r513: [2..5]
 r514: [2..3]
 r515: [0..1]
 r517: [352..560] [88..237]
 r518: [404..542] [86..201]
 r519: [442..568] [84..197]
 r520: [402..566] [82..149]
 r521: [438..564] [80..147]
 r522: [316..562] [78..105]
 r523: [356..558] [76..101]
 r524: [436..556] [74..93]
 r525: [89..554]
 r526: [450..552]
 r527: [542..544] [432..537]
 r528: [542..550] [432..535]
 r529: [542..548] [386..525]
 r530: [542..546] [342..513]
 r531: [783..784]
 r532: [779..780]
 r533: [777..778]
 r534: [773..774]
 r535: [771..772]
 r536: [767..768]
 r537: [765..766]
 r538: [761..762]
 r539: [759..760]
 r540: [755..756]
 r541: [753..754]
 r542: [749..750]
 r543: [747..748]
 r544: [743..744]
 r545: [741..742]
 r546: [737..738]
 r547: [735..736]
 r548: [731..732]
 r549: [729..730]
 r550: [725..726]
 r551: [723..724]
 r552: [719..720]
 r553: [717..718]
 r554: [713..714]
 r555: [711..712]
 r556: [707..708]
 r557: [705..706]
 r558: [701..702]
 r559: [699..700]
 r560: [697..698]
 r561: [695..696]
 r562: [693..694]
 r563: [691..692]
 r564: [689..690]
 r565: [687..688]
 r566: [685..686]
 r567: [683..684]
 r568: [681..682]
 r569: [679..680]
 r570: [677..678]
 r571: [675..676]
 r572: [673..674]
 r573: [671..672]
 r574: [669..670]
 r575: [667..668]
 r576: [665..666]
 r577: [663..664]
 r578: [659..660]
 r579: [659..660]
 r580: [657..658]
 r581: [655..656]
 r582: [651..652]
 r583: [651..652]
 r584: [649..650]
 r585: [647..648]
 r586: [643..644]
 r587: [643..644]
 r588: [641..642]
 r589: [639..640]
 r590: [635..636]
 r591: [635..636]
 r592: [633..634]
 r593: [627..628]
 r594: [623..624]
 r595: [619..620]
 r596: [617..618]
 r597: [613..614]
 r598: [609..610]
 r599: [631..632]
 r600: [607..608]
 r601: [605..606]
 r602: [603..604]
 r603: [601..602]
 r604: [599..600]
 r605: [597..598]
 r606: [595..596]
 r607: [593..594]
 r608: [591..592]
 r609: [589..590]
 r610: [587..588]
 r611: [585..586]
 r612: [583..584]
 r613: [581..582]
 r614: [579..580]
 r615: [577..578]
 r616: [575..576]
 r617: [573..574]
 r618: [571..572]
 r619: [450..451]
 r620: [444..445]
 r621: [420..421]
 r622: [418..419]
 r623: [414..415]
 r624: [408..411]
 r625: [408..409]
 r626: [406..407]
 r627: [396..397]
 r628: [392..393]
 r629: [386..387]
 r630: [374..375]
 r631: [372..373]
 r632: [364..367]
 r633: [364..365]
 r634: [362..363]
 r635: [358..359]
 r636: [348..349]
 r637: [340..343]
 r638: [340..341]
 r639: [320..323]
 r640: [320..321]
 r641: [318..319]
 r642: [314..315]
 r643: [310..311]
 r644: [304..305]
 r645: [300..301]
 r646: [292..295]
 r647: [292..293]
 r648: [272..275]
 r649: [272..273]
 r650: [252..255]
 r651: [252..253]
 r652: [246..247]
 r653: [244..245]
 r654: [240..241]
 r655: [238..239]
 r656: [232..233]
 r657: [226..229]
 r658: [226..227]
 r659: [206..209]
 r660: [206..207]
 r661: [194..195]
 r662: [192..193]
 r663: [188..189]
 r664: [182..185]
 r665: [182..183]
 r666: [170..171]
 r667: [160..163]
 r668: [160..161]
 r669: [154..155]
 r670: [152..153]
 r671: [142..143]
 r672: [136..139]
 r673: [136..137]
 r674: [132..133]
 r675: [124..125]
 r676: [120..121]
 r677: [112..115]
 r678: [112..113]
 r679: [106..107]
 r680: [104..105]
 r681: [98..99]
 r682: [96..97]
 r683: [90..91]
 r684: [540..541]
 r685: [534..535]
 r686: [532..533]
 r687: [528..529]
 r688: [524..525]
 r689: [522..523]
 r690: [518..519]
 r691: [514..515]
 r692: [512..513]
 r693: [510..511]
 r694: [506..507]
 r695: [502..503]
 r696: [500..501]
 r697: [498..499]
 r698: [494..495]
 r699: [490..491]
 r700: [488..489]
 r701: [486..487]
 r702: [482..483]
 r703: [478..479]
 r704: [476..477]
 r705: [474..475]
 r706: [470..471]
 r707: [466..467]
 r708: [464..465]
 r709: [462..463]
 r710: [458..459]
 r711: [454..455]
 r712: [70..73]
 r713: [70..71]
 r714: [66..69]
 r715: [66..67]
 r716: [62..63]
 r717: [58..59]
 r718: [54..55]
 r719: [50..53]
 r720: [50..51]
 r721: [48..49]
 r722: [44..45]
 r723: [40..41]
 r724: [36..37]
 r725: [30..35]
 r726: [30..31]
 r727: [32..33]
 r728: [26..29]
 r729: [26..27]
 r730: [20..21]
 r731: [16..17]
 r732: [14..15]
 r733: [10..13]
 r734: [10..11]
 r735: [4..5]
 r736: [0..1]
Live info was changed -- recalculate it

********** Pseudo live ranges #2: **********

  BB 8
   Insn 401: point = 0
   Insn 400: point = 0
   Insn 395: point = 0
   Insn 716: point = 1
   Insn 394: point = 2
   Insn 715: point = 4
	Hard reg 23 is preferable by r735 with profit 58
   Insn 393: point = 6
   Insn 714: point = 8
   Insn 713: point = 9
   Insn 392: point = 10
   Insn 390: point = 12
   Insn 711: point = 14
	Hard reg 22 is preferable by r733 with profit 58
   Insn 389: point = 16
   Insn 712: point = 18
   Insn 710: point = 19
	Hard reg 3 is preferable by r734 with profit 58
   Insn 709: point = 21
   Insn 708: point = 22
	Hard reg 21 is preferable by r732 with profit 58
   Insn 388: point = 24
   Insn 707: point = 26
   Insn 706: point = 27
   Insn 386: point = 28
   Insn 705: point = 29
   Insn 385: point = 30
   Insn 704: point = 32
	Hard reg 24 is preferable by r730 with profit 58
   Insn 384: point = 34
   Insn 703: point = 36
   Insn 702: point = 37
   Insn 383: point = 38
   Insn 381: point = 40
   Insn 700: point = 42
	Hard reg 22 is preferable by r728 with profit 58
   Insn 380: point = 44
   Insn 701: point = 46
   Insn 699: point = 47
	Hard reg 37 is preferable by r729 with profit 58
   Insn 698: point = 49
   Insn 695: point = 50
	Hard reg 21 is preferable by r725 with profit 58
   Insn 379: point = 52
   Insn 696: point = 54
	Hard reg 42 is preferable by r726 with profit 58
   Insn 697: point = 56
   Insn 694: point = 57
	Hard reg 6 is preferable by r727 with profit 58
   Insn 693: point = 59
   Insn 377: point = 60
   Insn 692: point = 61
   Insn 376: point = 62
   Insn 691: point = 64
	Hard reg 22 is preferable by r723 with profit 58
   Insn 375: point = 66
   Insn 690: point = 68
   Insn 689: point = 69
   Insn 374: point = 70
   Insn 688: point = 72
	Hard reg 23 is preferable by r722 with profit 58
   Insn 373: point = 74
   Insn 687: point = 76
   Insn 686: point = 77
   Insn 372: point = 78
   Insn 685: point = 80
	Hard reg 21 is preferable by r721 with profit 58
   Insn 371: point = 82
   Insn 684: point = 84
   Insn 683: point = 85
   Insn 681: point = 86
	Hard reg 22 is preferable by r719 with profit 58
   Insn 370: point = 88
   Insn 682: point = 90
	Hard reg 44 is preferable by r720 with profit 58
   Insn 680: point = 92
   Insn 679: point = 93
   Insn 368: point = 94
   Insn 678: point = 95
   Insn 367: point = 96
   Insn 677: point = 98
	Hard reg 22 is preferable by r717 with profit 58
   Insn 366: point = 100
   Insn 676: point = 102
   Insn 675: point = 103
   Insn 365: point = 104
   Insn 674: point = 106
	Hard reg 24 is preferable by r716 with profit 58
   Insn 364: point = 108
   Insn 673: point = 110
   Insn 672: point = 111
   Insn 363: point = 112
   Insn 670: point = 114
	Hard reg 21 is preferable by r714 with profit 58
   Insn 362: point = 116
   Insn 671: point = 118
	Hard reg 43 is preferable by r715 with profit 58
   Insn 669: point = 120
   Insn 668: point = 121
   Insn 666: point = 122
	Hard reg 22 is preferable by r712 with profit 58
   Insn 361: point = 124
   Insn 667: point = 126
   Insn 665: point = 127
	Hard reg 38 is preferable by r713 with profit 58
   Insn 664: point = 129
   Insn 432: point = 130
   Insn 431: point = 132
   Insn 430: point = 134
   Insn 429: point = 136
   Insn 428: point = 138
   Insn 427: point = 140
   Insn 426: point = 142
   Insn 425: point = 144
  BB 6
   Insn 256: point = 147
   Insn 635: point = 147
   Insn 255: point = 149
   Insn 634: point = 149
   Insn 254: point = 151
   Insn 252: point = 151
   Insn 251: point = 153
   Insn 633: point = 155
   Insn 632: point = 156
   Insn 250: point = 158
   Insn 249: point = 160
   Insn 248: point = 162
   Insn 631: point = 164
   Insn 630: point = 165
   Insn 247: point = 167
   Insn 246: point = 169
   Insn 628: point = 171
	Hard reg 2 is preferable by r677 with profit 941
   Insn 245: point = 173
   Insn 629: point = 174
   Insn 627: point = 176
   Insn 244: point = 178
   Insn 626: point = 180
	Hard reg 37 is preferable by r676 with profit 941
   Insn 243: point = 182
   Insn 625: point = 182
   Insn 242: point = 184
   Insn 624: point = 186
   Insn 241: point = 188
   Insn 240: point = 190
   Insn 239: point = 192
   Insn 623: point = 194
   Insn 238: point = 195
   Insn 621: point = 197
	Hard reg 0 is preferable by r672 with profit 941
   Insn 237: point = 199
   Insn 622: point = 200
   Insn 620: point = 202
   Insn 619: point = 204
   Insn 236: point = 206
   Insn 618: point = 206
	Hard reg 37 is preferable by r671 with profit 941
   Insn 235: point = 208
   Insn 234: point = 210
   Insn 233: point = 212
   Insn 232: point = 214
   Insn 617: point = 216
   Insn 616: point = 217
   Insn 231: point = 219
   Insn 230: point = 221
   Insn 614: point = 223
	Hard reg 0 is preferable by r667 with profit 941
   Insn 229: point = 225
   Insn 615: point = 226
   Insn 613: point = 228
   Insn 228: point = 230
   Insn 227: point = 232
   Insn 226: point = 234
   Insn 612: point = 236
   Insn 225: point = 238
   Insn 224: point = 240
   Insn 223: point = 242
   Insn 222: point = 244
   Insn 610: point = 246
	Hard reg 0 is preferable by r664 with profit 941
   Insn 221: point = 248
   Insn 611: point = 249
   Insn 609: point = 251
   Insn 608: point = 253
   Insn 220: point = 255
   Insn 607: point = 255
	Hard reg 38 is preferable by r663 with profit 941
   Insn 219: point = 257
   Insn 606: point = 259
   Insn 605: point = 260
   Insn 218: point = 262
   Insn 217: point = 264
   Insn 216: point = 266
   Insn 215: point = 268
   Insn 214: point = 270
   Insn 603: point = 272
	Hard reg 39 is preferable by r659 with profit 941
   Insn 213: point = 274
   Insn 604: point = 275
   Insn 602: point = 277
   Insn 212: point = 279
   Insn 211: point = 281
   Insn 210: point = 283
   Insn 209: point = 285
   Insn 208: point = 287
   Insn 207: point = 289
   Insn 206: point = 291
   Insn 600: point = 293
	Hard reg 39 is preferable by r657 with profit 941
   Insn 205: point = 295
   Insn 601: point = 296
   Insn 599: point = 298
   Insn 598: point = 300
   Insn 204: point = 302
   Insn 597: point = 302
	Hard reg 40 is preferable by r656 with profit 941
   Insn 203: point = 304
   Insn 202: point = 306
   Insn 596: point = 308
   Insn 595: point = 309
   Insn 201: point = 311
   Insn 594: point = 311
	Hard reg 41 is preferable by r654 with profit 941
   Insn 200: point = 313
   Insn 593: point = 315
   Insn 592: point = 316
   Insn 199: point = 318
   Insn 198: point = 320
   Insn 590: point = 322
	Hard reg 5 is preferable by r650 with profit 941
   Insn 197: point = 324
   Insn 591: point = 325
   Insn 589: point = 327
   Insn 196: point = 329
   Insn 195: point = 331
   Insn 194: point = 333
   Insn 193: point = 335
   Insn 192: point = 337
   Insn 191: point = 339
   Insn 190: point = 341
   Insn 587: point = 343
	Hard reg 5 is preferable by r648 with profit 941
   Insn 189: point = 345
   Insn 588: point = 346
   Insn 586: point = 348
   Insn 188: point = 350
   Insn 187: point = 352
   Insn 186: point = 354
   Insn 185: point = 356
   Insn 184: point = 358
   Insn 183: point = 360
   Insn 182: point = 362
   Insn 584: point = 364
	Hard reg 5 is preferable by r646 with profit 941
   Insn 181: point = 366
   Insn 585: point = 367
   Insn 583: point = 369
   Insn 180: point = 371
   Insn 582: point = 373
	Hard reg 37 is preferable by r645 with profit 941
   Insn 179: point = 375
   Insn 581: point = 375
   Insn 580: point = 377
	Hard reg 43 is preferable by r644 with profit 941
   Insn 178: point = 379
   Insn 579: point = 379
   Insn 177: point = 381
   Insn 578: point = 383
	Hard reg 41 is preferable by r643 with profit 941
   Insn 176: point = 385
   Insn 577: point = 385
   Insn 175: point = 387
   Insn 576: point = 389
   Insn 174: point = 391
   Insn 575: point = 393
   Insn 573: point = 394
	Hard reg 1 is preferable by r639 with profit 941
   Insn 173: point = 396
   Insn 574: point = 397
   Insn 572: point = 399
   Insn 172: point = 401
   Insn 171: point = 403
   Insn 170: point = 405
   Insn 169: point = 407
   Insn 168: point = 409
   Insn 167: point = 411
   Insn 166: point = 413
   Insn 570: point = 415
	Hard reg 2 is preferable by r637 with profit 941
   Insn 165: point = 417
   Insn 571: point = 418
   Insn 569: point = 420
   Insn 164: point = 422
   Insn 568: point = 424
	Hard reg 38 is preferable by r636 with profit 941
   Insn 163: point = 426
   Insn 567: point = 426
   Insn 162: point = 428
   Insn 161: point = 430
   Insn 160: point = 432
   Insn 159: point = 434
   Insn 566: point = 436
   Insn 158: point = 438
   Insn 565: point = 440
   Insn 563: point = 441
	Hard reg 1 is preferable by r632 with profit 941
   Insn 157: point = 443
   Insn 564: point = 444
   Insn 562: point = 446
   Insn 156: point = 448
   Insn 155: point = 450
   Insn 561: point = 452
   Insn 560: point = 453
   Insn 154: point = 455
   Insn 153: point = 457
   Insn 152: point = 459
   Insn 151: point = 461
   Insn 150: point = 463
   Insn 149: point = 465
   Insn 559: point = 467
   Insn 148: point = 469
   Insn 558: point = 471
	Hard reg 40 is preferable by r628 with profit 941
   Insn 147: point = 473
   Insn 557: point = 473
   Insn 556: point = 475
	Hard reg 2 is preferable by r627 with profit 941
   Insn 146: point = 477
   Insn 555: point = 477
   Insn 145: point = 479
   Insn 144: point = 481
   Insn 143: point = 483
   Insn 142: point = 485
   Insn 554: point = 487
   Insn 552: point = 488
	Hard reg 1 is preferable by r624 with profit 941
   Insn 141: point = 490
   Insn 553: point = 491
   Insn 551: point = 493
   Insn 550: point = 495
   Insn 140: point = 497
   Insn 549: point = 497
	Hard reg 37 is preferable by r623 with profit 941
   Insn 139: point = 499
   Insn 548: point = 501
   Insn 547: point = 502
   Insn 138: point = 504
   Insn 137: point = 506
   Insn 136: point = 508
   Insn 135: point = 510
   Insn 134: point = 512
   Insn 133: point = 514
   Insn 132: point = 516
   Insn 131: point = 518
   Insn 130: point = 520
   Insn 129: point = 522
   Insn 128: point = 524
   Insn 127: point = 526
   Insn 546: point = 528
   Insn 126: point = 530
   Insn 125: point = 532
   Insn 545: point = 534
  BB 7
   Insn 409: point = 537
   Insn 663: point = 537
   Insn 354: point = 539
   Insn 662: point = 541
   Insn 351: point = 543
   Insn 661: point = 545
   Insn 349: point = 547
   Insn 348: point = 548
   Insn 660: point = 549
   Insn 345: point = 551
   Insn 344: point = 552
   Insn 659: point = 553
   Insn 342: point = 555
   Insn 658: point = 557
   Insn 339: point = 559
   Insn 657: point = 561
   Insn 337: point = 563
   Insn 336: point = 564
   Insn 656: point = 565
   Insn 333: point = 567
   Insn 332: point = 568
   Insn 655: point = 569
   Insn 330: point = 571
   Insn 654: point = 573
   Insn 327: point = 575
   Insn 653: point = 577
   Insn 325: point = 579
   Insn 324: point = 580
   Insn 652: point = 581
   Insn 321: point = 583
   Insn 320: point = 584
   Insn 651: point = 585
   Insn 318: point = 587
   Insn 650: point = 589
   Insn 315: point = 591
   Insn 649: point = 593
   Insn 313: point = 595
   Insn 312: point = 596
   Insn 648: point = 597
   Insn 309: point = 599
   Insn 308: point = 600
   Insn 647: point = 601
   Insn 306: point = 603
   Insn 646: point = 605
   Insn 303: point = 607
   Insn 645: point = 609
   Insn 301: point = 611
   Insn 300: point = 612
   Insn 644: point = 613
   Insn 297: point = 615
   Insn 296: point = 616
   Insn 643: point = 617
   Insn 294: point = 619
   Insn 642: point = 621
   Insn 291: point = 623
   Insn 641: point = 625
   Insn 289: point = 627
   Insn 288: point = 628
   Insn 640: point = 629
   Insn 285: point = 631
   Insn 284: point = 632
   Insn 282: point = 633
   Insn 639: point = 635
   Insn 279: point = 637
   Insn 638: point = 639
   Insn 277: point = 641
   Insn 276: point = 642
   Insn 637: point = 643
   Insn 273: point = 645
   Insn 272: point = 646
   Insn 270: point = 647
   Insn 267: point = 649
   Insn 636: point = 651
   Insn 265: point = 653
   Insn 264: point = 654
   Insn 263: point = 655
   Insn 261: point = 656
   Insn 260: point = 657
  BB 5
   Insn 424: point = 659
   Insn 423: point = 661
   Insn 422: point = 663
   Insn 421: point = 665
   Insn 420: point = 667
   Insn 419: point = 669
   Insn 418: point = 671
   Insn 417: point = 673
   Insn 416: point = 675
   Insn 415: point = 677
   Insn 414: point = 679
   Insn 413: point = 681
   Insn 412: point = 683
   Insn 411: point = 685
   Insn 544: point = 687
   Insn 37: point = 689
   Insn 543: point = 690
   Insn 36: point = 692
   Insn 542: point = 693
   Insn 35: point = 695
   Insn 34: point = 696
   Insn 541: point = 697
   Insn 33: point = 699
   Insn 32: point = 700
   Insn 540: point = 701
   Insn 31: point = 703
   Insn 539: point = 704
   Insn 30: point = 706
   Insn 538: point = 707
   Insn 29: point = 709
   Insn 537: point = 710
   Insn 28: point = 712
   Insn 536: point = 713
   Insn 27: point = 715
   Insn 535: point = 716
   Insn 26: point = 718
   Insn 534: point = 719
   Insn 25: point = 721
   Insn 533: point = 722
   Insn 24: point = 724
   Insn 532: point = 725
   Insn 23: point = 727
   Insn 531: point = 728
   Insn 22: point = 730
   Insn 21: point = 731
   Insn 20: point = 732
   Insn 530: point = 734
   Insn 19: point = 735
   Insn 529: point = 737
   Insn 18: point = 738
   Insn 528: point = 740
   Insn 17: point = 741
   Insn 16: point = 742
   Insn 15: point = 743
   Insn 527: point = 745
   Insn 14: point = 746
   Insn 13: point = 747
   Insn 526: point = 749
   Insn 123: point = 750
  BB 3
   Insn 407: point = 752
   Insn 524: point = 752
   Insn 120: point = 754
   Insn 523: point = 755
	Hard reg 0 is preferable by r598 with profit 29
   Insn 119: point = 757
   Insn 522: point = 758
	Hard reg 3 is preferable by r597 with profit 29
   Insn 118: point = 760
   Insn 521: point = 760
	Hard reg 3 is preferable by r597 with profit 29
	Hard reg 2 is preferable by r597 with profit 29
   Insn 117: point = 762
   Insn 116: point = 763
   Insn 520: point = 765
   Insn 519: point = 766
	Hard reg 42 is preferable by r595 with profit 29
   Insn 115: point = 768
   Insn 518: point = 769
	Hard reg 42 is preferable by r595 with profit 29
	Hard reg 0 is preferable by r595 with profit 29
   Insn 114: point = 771
   Insn 517: point = 772
	Hard reg 6 is preferable by r594 with profit 29
   Insn 113: point = 774
   Insn 516: point = 774
	Hard reg 6 is preferable by r594 with profit 29
	Hard reg 39 is preferable by r594 with profit 29
   Insn 112: point = 776
   Insn 111: point = 777
   Insn 515: point = 779
  BB 4
   Insn 12: point = 781
   Insn 11: point = 782
   Insn 10: point = 783
   Insn 525: point = 784
   Insn 9: point = 786
  BB 2
   Insn 109: point = 788
   Insn 108: point = 788
   Insn 514: point = 789
   Insn 512: point = 790
   Insn 107: point = 792
   Insn 513: point = 793
   Insn 511: point = 794
	Hard reg 0 is preferable by r590 with profit 58
   Insn 106: point = 796
   Insn 510: point = 797
   Insn 105: point = 799
   Insn 509: point = 801
   Insn 507: point = 802
   Insn 104: point = 804
   Insn 508: point = 805
   Insn 506: point = 806
	Hard reg 43 is preferable by r586 with profit 58
   Insn 103: point = 808
   Insn 505: point = 809
   Insn 102: point = 811
   Insn 504: point = 813
   Insn 502: point = 814
   Insn 101: point = 816
   Insn 503: point = 817
   Insn 501: point = 818
	Hard reg 4 is preferable by r582 with profit 58
   Insn 100: point = 820
   Insn 500: point = 821
   Insn 99: point = 823
   Insn 499: point = 825
   Insn 497: point = 826
	Hard reg 38 is preferable by r578 with profit 58
   Insn 98: point = 828
   Insn 498: point = 829
   Insn 496: point = 830
	Hard reg 38 is preferable by r578 with profit 58
	Hard reg 41 is preferable by r578 with profit 58
   Insn 97: point = 832
   Insn 495: point = 833
   Insn 96: point = 835
   Insn 494: point = 837
   Insn 493: point = 838
   Insn 95: point = 840
   Insn 492: point = 842
   Insn 491: point = 843
   Insn 94: point = 845
   Insn 490: point = 847
   Insn 489: point = 848
   Insn 93: point = 850
   Insn 488: point = 852
   Insn 487: point = 853
   Insn 92: point = 855
   Insn 486: point = 857
   Insn 485: point = 858
   Insn 91: point = 860
   Insn 484: point = 862
   Insn 483: point = 863
   Insn 90: point = 865
   Insn 482: point = 867
   Insn 481: point = 868
   Insn 89: point = 870
   Insn 480: point = 872
   Insn 479: point = 873
   Insn 88: point = 875
   Insn 478: point = 877
   Insn 87: point = 878
   Insn 477: point = 879
   Insn 476: point = 880
   Insn 86: point = 882
   Insn 475: point = 882
	Hard reg 44 is preferable by r558 with profit 58
   Insn 85: point = 884
   Insn 84: point = 886
   Insn 474: point = 887
   Insn 473: point = 888
   Insn 83: point = 890
   Insn 472: point = 890
	Hard reg 44 is preferable by r556 with profit 58
   Insn 82: point = 892
   Insn 81: point = 893
   Insn 471: point = 894
   Insn 470: point = 895
   Insn 80: point = 897
   Insn 469: point = 897
	Hard reg 0 is preferable by r554 with profit 58
   Insn 79: point = 899
   Insn 78: point = 900
   Insn 468: point = 901
   Insn 467: point = 902
   Insn 77: point = 904
   Insn 466: point = 904
	Hard reg 0 is preferable by r552 with profit 58
   Insn 76: point = 906
   Insn 75: point = 907
   Insn 465: point = 908
   Insn 464: point = 909
   Insn 74: point = 911
   Insn 463: point = 911
	Hard reg 43 is preferable by r550 with profit 58
   Insn 73: point = 913
   Insn 72: point = 914
   Insn 462: point = 915
   Insn 461: point = 916
   Insn 71: point = 918
   Insn 460: point = 918
	Hard reg 43 is preferable by r548 with profit 58
   Insn 70: point = 920
   Insn 69: point = 921
   Insn 459: point = 922
   Insn 458: point = 923
   Insn 68: point = 925
   Insn 457: point = 925
	Hard reg 0 is preferable by r546 with profit 58
   Insn 67: point = 927
   Insn 66: point = 928
   Insn 456: point = 929
   Insn 455: point = 930
   Insn 65: point = 932
   Insn 454: point = 932
	Hard reg 0 is preferable by r544 with profit 58
   Insn 64: point = 934
   Insn 63: point = 935
   Insn 453: point = 936
   Insn 452: point = 937
   Insn 62: point = 939
   Insn 451: point = 939
	Hard reg 3 is preferable by r542 with profit 58
   Insn 61: point = 941
   Insn 60: point = 942
   Insn 450: point = 943
   Insn 449: point = 944
   Insn 59: point = 946
   Insn 448: point = 946
	Hard reg 3 is preferable by r540 with profit 58
   Insn 58: point = 948
   Insn 57: point = 949
   Insn 447: point = 950
   Insn 446: point = 951
   Insn 56: point = 953
   Insn 445: point = 953
	Hard reg 0 is preferable by r538 with profit 58
   Insn 55: point = 955
   Insn 54: point = 956
   Insn 444: point = 957
   Insn 443: point = 958
   Insn 53: point = 960
   Insn 442: point = 960
	Hard reg 0 is preferable by r536 with profit 58
   Insn 52: point = 962
   Insn 51: point = 963
   Insn 441: point = 964
   Insn 440: point = 965
   Insn 50: point = 967
   Insn 439: point = 967
	Hard reg 0 is preferable by r534 with profit 58
   Insn 49: point = 969
   Insn 48: point = 970
   Insn 438: point = 971
   Insn 437: point = 972
   Insn 47: point = 974
   Insn 436: point = 974
	Hard reg 38 is preferable by r532 with profit 58
   Insn 46: point = 976
   Insn 45: point = 977
   Insn 435: point = 977
	Hard reg 5 is preferable by r531 with profit 58
   Insn 44: point = 979
   Insn 434: point = 979
	Hard reg 5 is preferable by r531 with profit 58
	Hard reg 6 is preferable by r531 with profit 58
   Insn 43: point = 981
   Insn 42: point = 982
   Insn 41: point = 982
   Insn 40: point = 984
   Insn 7: point = 985
   Insn 6: point = 986
 r100: [150..731] [147..147]
 r119: [102..873]
 r120: [101..868]
 r121: [68..863]
 r122: [67..858]
 r123: [36..853]
 r124: [35..848]
 r125: [8..843]
 r126: [7..838]
 r127: [110..833]
 r128: [109..821]
 r129: [76..809]
 r130: [75..797]
 r132: [770..777]
 r133: [756..763]
 r135: [513..526]
 r137: [509..522]
 r138: [505..520]
 r140: [500..516]
 r143: [342..510]
 r145: [288..506]
 r146: [237..502]
 r148: [183..495]
 r151: [464..483]
 r153: [460..479]
 r154: [456..475]
 r156: [451..469]
 r159: [292..461]
 r161: [241..457]
 r162: [187..453]
 r164: [332..448]
 r167: [414..434]
 r169: [410..430]
 r170: [406..428]
 r172: [404..422]
 r175: [245..411]
 r177: [191..407]
 r178: [334..405]
 r180: [282..401]
 r183: [363..387]
 r185: [359..381]
 r186: [355..377]
 r188: [353..371]
 r191: [196..360]
 r193: [338..356]
 r194: [284..354]
 r196: [233..350]
 r197: [380..790] [83..260]
 r200: [321..339]
 r202: [314..335]
 r203: [307..333]
 r205: [305..329]
 r208: [529..747] [120..316]
 r210: [781..784] [386..752] [17..309]
 r211: [678..802] [84..144]
 r214: [474..738] [45..300]
 r217: [271..289]
 r219: [267..285]
 r220: [263..283]
 r222: [258..279]
 r225: [660..746] [119..142]
 r227: [781..781] [686..772] [58..140]
 r230: [427..735] [26..253]
 r233: [222..242]
 r235: [215..238]
 r236: [211..234]
 r238: [209..230]
 r241: [437..743] [92..217]
 r243: [781..782] [684..766] [55..138]
 r244: [682..826] [128..136]
 r246: [376..732] [25..204]
 r250: [170..192]
 r252: [163..188]
 r253: [159..184]
 r255: [154..178]
 r258: [680..742] [91..134]
 r260: [781..783] [676..758] [20..132]
 r262: [478..814] [125..156]
 r264: [674..741] [48..130]
 r269: [672..750]
 r287: [670..982]
 r290: [659..687] [535..651]
 r291: [662..977]
 r292: [668..690]
 r295: [659..972] [494..643]
 r298: [659..693] [492..639]
 r299: [659..965] [468..635]
 r300: [666..696]
 r303: [659..958] [447..629]
 r306: [659..697] [445..625]
 r307: [659..951] [421..621]
 r308: [664..700]
 r311: [659..944] [400..613]
 r314: [659..701] [398..609]
 r315: [659..937] [370..605]
 r316: [659..704] [368..601]
 r319: [659..930] [349..597]
 r322: [659..707] [347..593]
 r323: [659..923] [328..589]
 r324: [659..710] [326..585]
 r327: [659..916] [299..581]
 r330: [659..713] [297..577]
 r331: [659..909] [278..573]
 r332: [659..716] [276..569]
 r335: [659..902] [252..565]
 r338: [659..719] [250..561]
 r339: [659..895] [229..557]
 r340: [659..722] [227..553]
 r343: [659..888] [203..549]
 r346: [659..725] [201..545]
 r347: [659..880] [177..541]
 r348: [659..728] [175..537]
 r351: [885..985]
 r352: [983..984]
 r353: [980..981]
 r354: [975..976]
 r355: [968..969]
 r356: [961..962]
 r357: [954..955]
 r358: [947..948]
 r359: [940..941]
 r360: [933..934]
 r361: [926..927]
 r362: [919..920]
 r363: [912..913]
 r364: [905..906]
 r365: [898..899]
 r366: [891..892]
 r367: [883..884]
 r368: [831..832]
 r369: [819..820]
 r370: [807..808]
 r371: [795..796]
 r372: [775..776]
 r373: [768..771]
 r374: [761..762]
 r375: [754..757]
 r376: [531..532]
 r377: [527..530]
 r378: [523..524]
 r379: [517..518]
 r380: [513..514]
 r381: [511..512]
 r382: [507..508]
 r383: [498..499]
 r384: [486..488]
 r385: [484..485]
 r386: [480..481]
 r387: [470..471]
 r388: [464..465]
 r389: [462..463]
 r390: [458..459]
 r391: [449..450]
 r392: [439..441]
 r393: [435..438]
 r394: [431..432]
 r395: [423..424]
 r396: [414..415]
 r397: [412..413]
 r398: [408..409]
 r399: [402..403]
 r400: [392..394]
 r401: [388..391]
 r402: [382..383]
 r403: [372..373]
 r404: [363..364]
 r405: [361..362]
 r406: [357..358]
 r407: [351..352]
 r408: [342..343]
 r409: [340..341]
 r410: [336..337]
 r411: [330..331]
 r412: [321..322]
 r413: [319..320]
 r414: [312..313]
 r415: [303..304]
 r416: [292..293]
 r417: [290..291]
 r418: [286..287]
 r419: [280..281]
 r420: [271..272]
 r421: [269..270]
 r422: [265..266]
 r423: [256..257]
 r424: [245..246]
 r425: [243..244]
 r426: [239..240]
 r427: [231..232]
 r428: [222..223]
 r429: [220..221]
 r430: [213..214]
 r431: [207..208]
 r432: [196..197]
 r433: [193..195]
 r434: [189..190]
 r435: [179..180]
 r436: [170..171]
 r437: [168..169]
 r438: [161..162]
 r439: [152..153]
 r440: [648..657]
 r441: [540..655]
 r442: [650..654]
 r446: [634..646]
 r448: [638..642]
 r452: [620..632]
 r454: [624..628]
 r458: [604..616]
 r460: [608..612]
 r464: [588..600]
 r466: [592..596]
 r470: [572..584]
 r472: [576..580]
 r476: [556..568]
 r478: [560..564]
 r482: [540..552]
 r484: [544..548]
 r488: [113..122]
 r489: [113..114]
 r490: [105..112]
 r491: [39..106]
 r492: [97..104]
 r493: [97..98]
 r494: [94..96]
 r495: [79..86]
 r496: [79..80]
 r497: [71..78]
 r498: [11..72]
 r499: [63..70]
 r500: [63..64]
 r501: [60..62]
 r502: [41..50]
 r503: [41..42]
 r504: [39..40]
 r506: [31..38]
 r507: [31..32]
 r508: [28..30]
 r509: [13..22]
 r510: [13..14]
 r511: [11..12]
 r513: [3..10]
 r514: [3..4]
 r515: [0..2]
 r517: [429..677] [145..306]
 r518: [484..659] [143..268]
 r519: [525..685] [141..264]
 r520: [482..683] [139..212]
 r521: [521..681] [137..210]
 r522: [390..679] [135..165]
 r523: [433..675] [133..160]
 r524: [519..673] [131..151]
 r525: [147..671]
 r526: [659..669] [533..656]
 r527: [659..661] [515..649]
 r528: [659..667] [515..647]
 r529: [659..665] [466..633]
 r530: [659..663] [419..617]
 r531: [978..979]
 r532: [973..974]
 r533: [970..971]
 r534: [966..967]
 r535: [963..964]
 r536: [959..960]
 r537: [956..957]
 r538: [952..953]
 r539: [949..950]
 r540: [945..946]
 r541: [942..943]
 r542: [938..939]
 r543: [935..936]
 r544: [931..932]
 r545: [928..929]
 r546: [924..925]
 r547: [921..922]
 r548: [917..918]
 r549: [914..915]
 r550: [910..911]
 r551: [907..908]
 r552: [903..904]
 r553: [900..901]
 r554: [896..897]
 r555: [893..894]
 r556: [889..890]
 r557: [886..887]
 r558: [881..882]
 r559: [878..879]
 r560: [876..877]
 r561: [874..875]
 r562: [871..872]
 r563: [869..870]
 r564: [866..867]
 r565: [864..865]
 r566: [861..862]
 r567: [859..860]
 r568: [856..857]
 r569: [854..855]
 r570: [851..852]
 r571: [849..850]
 r572: [846..847]
 r573: [844..845]
 r574: [841..842]
 r575: [839..840]
 r576: [836..837]
 r577: [834..835]
 r578: [827..830]
 r579: [828..829]
 r580: [824..825]
 r581: [822..823]
 r582: [815..818]
 r583: [816..817]
 r584: [812..813]
 r585: [810..811]
 r586: [803..806]
 r587: [804..805]
 r588: [800..801]
 r589: [798..799]
 r590: [791..794]
 r591: [792..793]
 r592: [788..789]
 r593: [778..779]
 r594: [773..774]
 r595: [767..769]
 r596: [764..765]
 r597: [759..760]
 r598: [753..755]
 r599: [785..786]
 r600: [748..749]
 r601: [744..745]
 r602: [739..740]
 r603: [736..737]
 r604: [733..734]
 r605: [729..730]
 r606: [726..727]
 r607: [723..724]
 r608: [720..721]
 r609: [717..718]
 r610: [714..715]
 r611: [711..712]
 r612: [708..709]
 r613: [705..706]
 r614: [702..703]
 r615: [698..699]
 r616: [694..695]
 r617: [691..692]
 r618: [688..689]
 r619: [533..534]
 r620: [527..528]
 r621: [503..504]
 r622: [500..501]
 r623: [496..497]
 r624: [489..493]
 r625: [490..491]
 r626: [486..487]
 r627: [476..477]
 r628: [472..473]
 r629: [466..467]
 r630: [454..455]
 r631: [451..452]
 r632: [442..446]
 r633: [443..444]
 r634: [439..440]
 r635: [435..436]
 r636: [425..426]
 r637: [416..420]
 r638: [417..418]
 r639: [395..399]
 r640: [396..397]
 r641: [392..393]
 r642: [388..389]
 r643: [384..385]
 r644: [378..379]
 r645: [374..375]
 r646: [365..369]
 r647: [366..367]
 r648: [344..348]
 r649: [345..346]
 r650: [323..327]
 r651: [324..325]
 r652: [317..318]
 r653: [314..315]
 r654: [310..311]
 r655: [307..308]
 r656: [301..302]
 r657: [294..298]
 r658: [295..296]
 r659: [273..277]
 r660: [274..275]
 r661: [261..262]
 r662: [258..259]
 r663: [254..255]
 r664: [247..251]
 r665: [248..249]
 r666: [235..236]
 r667: [224..228]
 r668: [225..226]
 r669: [218..219]
 r670: [215..216]
 r671: [205..206]
 r672: [198..202]
 r673: [199..200]
 r674: [193..194]
 r675: [185..186]
 r676: [181..182]
 r677: [172..176]
 r678: [173..174]
 r679: [166..167]
 r680: [163..164]
 r681: [157..158]
 r682: [154..155]
 r683: [148..149]
 r684: [652..653]
 r685: [644..645]
 r686: [640..641]
 r687: [636..637]
 r688: [630..631]
 r689: [626..627]
 r690: [622..623]
 r691: [618..619]
 r692: [614..615]
 r693: [610..611]
 r694: [606..607]
 r695: [602..603]
 r696: [598..599]
 r697: [594..595]
 r698: [590..591]
 r699: [586..587]
 r700: [582..583]
 r701: [578..579]
 r702: [574..575]
 r703: [570..571]
 r704: [566..567]
 r705: [562..563]
 r706: [558..559]
 r707: [554..555]
 r708: [550..551]
 r709: [546..547]
 r710: [542..543]
 r711: [538..539]
 r712: [123..129]
 r713: [126..127]
 r714: [115..121]
 r715: [117..118]
 r716: [107..111]
 r717: [99..103]
 r718: [94..95]
 r719: [87..93]
 r720: [89..90]
 r721: [81..85]
 r722: [73..77]
 r723: [65..69]
 r724: [60..61]
 r725: [51..59]
 r726: [53..54]
 r727: [56..57]
 r728: [43..49]
 r729: [46..47]
 r730: [33..37]
 r731: [28..29]
 r732: [23..27]
 r733: [15..21]
 r734: [18..19]
 r735: [5..9]
 r736: [0..1]
Compressing live ranges: from 986 to 789 - 80%
Ranges after the compression:
 r100: [92..598] [89..89]
 r119: [58..694]
 r120: [58..690]
 r121: [40..686]
 r122: [40..682]
 r123: [20..678]
 r124: [20..674]
 r125: [4..670]
 r126: [4..666]
 r127: [62..662]
 r128: [62..654]
 r129: [44..646]
 r130: [44..638]
 r132: [621..626]
 r133: [611..616]
 r135: [430..443]
 r137: [426..439]
 r138: [422..437]
 r140: [418..433]
 r143: [270..427]
 r145: [220..423]
 r146: [172..419]
 r148: [122..413]
 r151: [384..403]
 r153: [380..399]
 r154: [376..395]
 r156: [372..389]
 r159: [224..381]
 r161: [176..377]
 r162: [126..373]
 r164: [260..369]
 r167: [338..357]
 r169: [334..353]
 r170: [330..351]
 r172: [328..345]
 r175: [180..335]
 r177: [130..331]
 r178: [262..329]
 r180: [214..325]
 r183: [290..313]
 r185: [286..307]
 r186: [282..303]
 r188: [280..297]
 r191: [134..287]
 r193: [266..283]
 r194: [216..281]
 r196: [168..277]
 r197: [306..634] [48..193]
 r200: [250..267]
 r202: [244..263]
 r203: [238..261]
 r205: [236..257]
 r208: [446..606] [68..245]
 r210: [629..630] [312..608] [10..239]
 r211: [561..642] [48..87]
 r214: [394..602] [26..231]
 r217: [204..221]
 r219: [200..217]
 r220: [196..215]
 r222: [192..211]
 r225: [543..606] [68..85]
 r227: [629..629] [569..622] [34..83]
 r230: [350..600] [14..187]
 r233: [158..177]
 r235: [152..173]
 r236: [148..169]
 r238: [146..165]
 r241: [360..604] [52..153]
 r243: [629..630] [567..618] [32..81]
 r244: [565..658] [72..79]
 r246: [302..598] [14..141]
 r250: [110..131]
 r252: [104..127]
 r253: [100..123]
 r255: [96..117]
 r258: [563..604] [52..77]
 r260: [629..630] [559..612] [12..75]
 r262: [398..650] [70..97]
 r264: [557..604] [28..73]
 r269: [555..608]
 r287: [553..786]
 r290: [542..570] [452..539]
 r291: [545..782]
 r292: [551..572]
 r295: [542..778] [412..533]
 r298: [542..574] [410..531]
 r299: [542..772] [388..527]
 r300: [549..576]
 r303: [542..766] [368..523]
 r306: [542..576] [366..521]
 r307: [542..760] [344..517]
 r308: [547..578]
 r311: [542..754] [324..511]
 r314: [542..578] [322..509]
 r315: [542..748] [296..505]
 r316: [542..580] [294..501]
 r319: [542..742] [276..499]
 r322: [542..582] [274..497]
 r323: [542..736] [256..493]
 r324: [542..584] [254..489]
 r327: [542..730] [230..487]
 r330: [542..586] [228..485]
 r331: [542..724] [210..481]
 r332: [542..588] [208..477]
 r335: [542..718] [186..475]
 r338: [542..590] [184..473]
 r339: [542..712] [164..469]
 r340: [542..592] [162..465]
 r343: [542..706] [140..463]
 r346: [542..594] [138..461]
 r347: [542..700] [116..457]
 r348: [542..596] [114..453]
 r351: [705..788]
 r352: [787..788]
 r353: [785..786]
 r354: [781..782]
 r355: [775..776]
 r356: [769..770]
 r357: [763..764]
 r358: [757..758]
 r359: [751..752]
 r360: [745..746]
 r361: [739..740]
 r362: [733..734]
 r363: [727..728]
 r364: [721..722]
 r365: [715..716]
 r366: [709..710]
 r367: [703..704]
 r368: [661..662]
 r369: [653..654]
 r370: [645..646]
 r371: [637..638]
 r372: [625..626]
 r373: [619..622]
 r374: [615..616]
 r375: [609..612]
 r376: [448..449]
 r377: [444..447]
 r378: [440..441]
 r379: [434..435]
 r380: [430..431]
 r381: [428..429]
 r382: [424..425]
 r383: [416..417]
 r384: [406..407]
 r385: [404..405]
 r386: [400..401]
 r387: [390..391]
 r388: [384..385]
 r389: [382..383]
 r390: [378..379]
 r391: [370..371]
 r392: [362..363]
 r393: [358..361]
 r394: [354..355]
 r395: [346..347]
 r396: [338..339]
 r397: [336..337]
 r398: [332..333]
 r399: [326..327]
 r400: [318..319]
 r401: [314..317]
 r402: [308..309]
 r403: [298..299]
 r404: [290..291]
 r405: [288..289]
 r406: [284..285]
 r407: [278..279]
 r408: [270..271]
 r409: [268..269]
 r410: [264..265]
 r411: [258..259]
 r412: [250..251]
 r413: [248..249]
 r414: [242..243]
 r415: [234..235]
 r416: [224..225]
 r417: [222..223]
 r418: [218..219]
 r419: [212..213]
 r420: [204..205]
 r421: [202..203]
 r422: [198..199]
 r423: [190..191]
 r424: [180..181]
 r425: [178..179]
 r426: [174..175]
 r427: [166..167]
 r428: [158..159]
 r429: [156..157]
 r430: [150..151]
 r431: [144..145]
 r432: [134..135]
 r433: [132..133]
 r434: [128..129]
 r435: [118..119]
 r436: [110..111]
 r437: [108..109]
 r438: [102..103]
 r439: [94..95]
 r440: [536..541]
 r441: [456..541]
 r442: [538..541]
 r446: [526..535]
 r448: [530..533]
 r452: [516..525]
 r454: [520..523]
 r458: [504..513]
 r460: [508..511]
 r464: [492..501]
 r466: [496..499]
 r470: [480..489]
 r472: [484..487]
 r476: [468..477]
 r478: [472..475]
 r482: [456..465]
 r484: [460..463]
 r488: [64..69]
 r489: [64..65]
 r490: [60..63]
 r491: [22..61]
 r492: [56..59]
 r493: [56..57]
 r494: [54..55]
 r495: [46..49]
 r496: [46..47]
 r497: [42..45]
 r498: [6..43]
 r499: [38..41]
 r500: [38..39]
 r501: [36..37]
 r502: [24..29]
 r503: [24..25]
 r504: [22..23]
 r506: [18..21]
 r507: [18..19]
 r508: [16..17]
 r509: [8..13]
 r510: [8..9]
 r511: [6..7]
 r513: [2..5]
 r514: [2..3]
 r515: [0..1]
 r517: [352..560] [88..237]
 r518: [404..542] [86..201]
 r519: [442..568] [84..197]
 r520: [402..566] [82..149]
 r521: [438..564] [80..147]
 r522: [316..562] [78..105]
 r523: [356..558] [76..101]
 r524: [436..556] [74..93]
 r525: [89..554]
 r526: [450..552]
 r527: [542..544] [432..537]
 r528: [542..550] [432..535]
 r529: [542..548] [386..525]
 r530: [542..546] [342..513]
 r531: [783..784]
 r532: [779..780]
 r533: [777..778]
 r534: [773..774]
 r535: [771..772]
 r536: [767..768]
 r537: [765..766]
 r538: [761..762]
 r539: [759..760]
 r540: [755..756]
 r541: [753..754]
 r542: [749..750]
 r543: [747..748]
 r544: [743..744]
 r545: [741..742]
 r546: [737..738]
 r547: [735..736]
 r548: [731..732]
 r549: [729..730]
 r550: [725..726]
 r551: [723..724]
 r552: [719..720]
 r553: [717..718]
 r554: [713..714]
 r555: [711..712]
 r556: [707..708]
 r557: [705..706]
 r558: [701..702]
 r559: [699..700]
 r560: [697..698]
 r561: [695..696]
 r562: [693..694]
 r563: [691..692]
 r564: [689..690]
 r565: [687..688]
 r566: [685..686]
 r567: [683..684]
 r568: [681..682]
 r569: [679..680]
 r570: [677..678]
 r571: [675..676]
 r572: [673..674]
 r573: [671..672]
 r574: [669..670]
 r575: [667..668]
 r576: [665..666]
 r577: [663..664]
 r578: [659..660]
 r579: [659..660]
 r580: [657..658]
 r581: [655..656]
 r582: [651..652]
 r583: [651..652]
 r584: [649..650]
 r585: [647..648]
 r586: [643..644]
 r587: [643..644]
 r588: [641..642]
 r589: [639..640]
 r590: [635..636]
 r591: [635..636]
 r592: [633..634]
 r593: [627..628]
 r594: [623..624]
 r595: [619..620]
 r596: [617..618]
 r597: [613..614]
 r598: [609..610]
 r599: [631..632]
 r600: [607..608]
 r601: [605..606]
 r602: [603..604]
 r603: [601..602]
 r604: [599..600]
 r605: [597..598]
 r606: [595..596]
 r607: [593..594]
 r608: [591..592]
 r609: [589..590]
 r610: [587..588]
 r611: [585..586]
 r612: [583..584]
 r613: [581..582]
 r614: [579..580]
 r615: [577..578]
 r616: [575..576]
 r617: [573..574]
 r618: [571..572]
 r619: [450..451]
 r620: [444..445]
 r621: [420..421]
 r622: [418..419]
 r623: [414..415]
 r624: [408..411]
 r625: [408..409]
 r626: [406..407]
 r627: [396..397]
 r628: [392..393]
 r629: [386..387]
 r630: [374..375]
 r631: [372..373]
 r632: [364..367]
 r633: [364..365]
 r634: [362..363]
 r635: [358..359]
 r636: [348..349]
 r637: [340..343]
 r638: [340..341]
 r639: [320..323]
 r640: [320..321]
 r641: [318..319]
 r642: [314..315]
 r643: [310..311]
 r644: [304..305]
 r645: [300..301]
 r646: [292..295]
 r647: [292..293]
 r648: [272..275]
 r649: [272..273]
 r650: [252..255]
 r651: [252..253]
 r652: [246..247]
 r653: [244..245]
 r654: [240..241]
 r655: [238..239]
 r656: [232..233]
 r657: [226..229]
 r658: [226..227]
 r659: [206..209]
 r660: [206..207]
 r661: [194..195]
 r662: [192..193]
 r663: [188..189]
 r664: [182..185]
 r665: [182..183]
 r666: [170..171]
 r667: [160..163]
 r668: [160..161]
 r669: [154..155]
 r670: [152..153]
 r671: [142..143]
 r672: [136..139]
 r673: [136..137]
 r674: [132..133]
 r675: [124..125]
 r676: [120..121]
 r677: [112..115]
 r678: [112..113]
 r679: [106..107]
 r680: [104..105]
 r681: [98..99]
 r682: [96..97]
 r683: [90..91]
 r684: [540..541]
 r685: [534..535]
 r686: [532..533]
 r687: [528..529]
 r688: [524..525]
 r689: [522..523]
 r690: [518..519]
 r691: [514..515]
 r692: [512..513]
 r693: [510..511]
 r694: [506..507]
 r695: [502..503]
 r696: [500..501]
 r697: [498..499]
 r698: [494..495]
 r699: [490..491]
 r700: [488..489]
 r701: [486..487]
 r702: [482..483]
 r703: [478..479]
 r704: [476..477]
 r705: [474..475]
 r706: [470..471]
 r707: [466..467]
 r708: [464..465]
 r709: [462..463]
 r710: [458..459]
 r711: [454..455]
 r712: [70..73]
 r713: [70..71]
 r714: [66..69]
 r715: [66..67]
 r716: [62..63]
 r717: [58..59]
 r718: [54..55]
 r719: [50..53]
 r720: [50..51]
 r721: [48..49]
 r722: [44..45]
 r723: [40..41]
 r724: [36..37]
 r725: [30..35]
 r726: [30..31]
 r727: [32..33]
 r728: [26..29]
 r729: [26..27]
 r730: [20..21]
 r731: [16..17]
 r732: [14..15]
 r733: [10..13]
 r734: [10..11]
 r735: [4..5]
 r736: [0..1]

********** Inheritance #1: **********

EBB 2 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=737 from oldreg=130, assigning class GENERAL_REGS to inheritance r737
    Original reg change 130->737 (bb2):
  510: r737:DI=r589:DI
      REG_DEAD r589:DI
    Add original<-inheritance after:
  717: r130:DI=r737:DI

    Inheritance reuse change 130->737 (bb2):
  513: r591:DI=r737:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=738 from oldreg=129, assigning class GENERAL_REGS to inheritance r738
    Original reg change 129->738 (bb2):
  505: r738:DI=r585:DI
      REG_DEAD r585:DI
    Add original<-inheritance after:
  718: r129:DI=r738:DI

    Inheritance reuse change 129->738 (bb2):
  508: r587:DI=r738:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=739 from oldreg=128, assigning class GENERAL_REGS to inheritance r739
    Original reg change 128->739 (bb2):
  500: r739:DI=r581:DI
      REG_DEAD r581:DI
    Add original<-inheritance after:
  719: r128:DI=r739:DI

    Inheritance reuse change 128->739 (bb2):
  503: r583:DI=r739:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=740 from oldreg=127, assigning class GENERAL_REGS to inheritance r740
    Original reg change 127->740 (bb2):
  495: r740:DI=r577:DI
      REG_DEAD r577:DI
    Add original<-inheritance after:
  720: r127:DI=r740:DI

    Inheritance reuse change 127->740 (bb2):
  498: r579:DI=r740:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=741 from oldreg=347, assigning class GENERAL_REGS to inheritance r741
    Original reg change 347->741 (bb2):
  476: r741:DI=r558:DI
      REG_DEAD r558:DI
    Add original<-inheritance after:
  721: r347:DI=r741:DI

    Inheritance reuse change 347->741 (bb2):
  477: r559:DI=r741:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=742 from oldreg=343, assigning class GENERAL_REGS to inheritance r742
    Original reg change 343->742 (bb2):
  473: r742:DI=r556:DI
      REG_DEAD r556:DI
    Add original<-inheritance after:
  722: r343:DI=r742:DI

    Inheritance reuse change 343->742 (bb2):
  474: r557:DI=r742:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=743 from oldreg=339, assigning class GENERAL_REGS to inheritance r743
    Original reg change 339->743 (bb2):
  470: r743:DI=r554:DI
      REG_DEAD r554:DI
    Add original<-inheritance after:
  723: r339:DI=r743:DI

    Inheritance reuse change 339->743 (bb2):
  471: r555:DI=r743:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=744 from oldreg=335, assigning class GENERAL_REGS to inheritance r744
    Original reg change 335->744 (bb2):
  467: r744:DI=r552:DI
      REG_DEAD r552:DI
    Add original<-inheritance after:
  724: r335:DI=r744:DI

    Inheritance reuse change 335->744 (bb2):
  468: r553:DI=r744:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=745 from oldreg=331, assigning class GENERAL_REGS to inheritance r745
    Original reg change 331->745 (bb2):
  464: r745:DI=r550:DI
      REG_DEAD r550:DI
    Add original<-inheritance after:
  725: r331:DI=r745:DI

    Inheritance reuse change 331->745 (bb2):
  465: r551:DI=r745:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=746 from oldreg=327, assigning class GENERAL_REGS to inheritance r746
    Original reg change 327->746 (bb2):
  461: r746:DI=r548:DI
      REG_DEAD r548:DI
    Add original<-inheritance after:
  726: r327:DI=r746:DI

    Inheritance reuse change 327->746 (bb2):
  462: r549:DI=r746:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=747 from oldreg=323, assigning class GENERAL_REGS to inheritance r747
    Original reg change 323->747 (bb2):
  458: r747:DI=r546:DI
      REG_DEAD r546:DI
    Add original<-inheritance after:
  727: r323:DI=r747:DI

    Inheritance reuse change 323->747 (bb2):
  459: r547:DI=r747:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=748 from oldreg=319, assigning class GENERAL_REGS to inheritance r748
    Original reg change 319->748 (bb2):
  455: r748:DI=r544:DI
      REG_DEAD r544:DI
    Add original<-inheritance after:
  728: r319:DI=r748:DI

    Inheritance reuse change 319->748 (bb2):
  456: r545:DI=r748:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=749 from oldreg=315, assigning class GENERAL_REGS to inheritance r749
    Original reg change 315->749 (bb2):
  452: r749:DI=r542:DI
      REG_DEAD r542:DI
    Add original<-inheritance after:
  729: r315:DI=r749:DI

    Inheritance reuse change 315->749 (bb2):
  453: r543:DI=r749:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=750 from oldreg=311, assigning class GENERAL_REGS to inheritance r750
    Original reg change 311->750 (bb2):
  449: r750:DI=r540:DI
      REG_DEAD r540:DI
    Add original<-inheritance after:
  730: r311:DI=r750:DI

    Inheritance reuse change 311->750 (bb2):
  450: r541:DI=r750:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=751 from oldreg=307, assigning class GENERAL_REGS to inheritance r751
    Original reg change 307->751 (bb2):
  446: r751:DI=r538:DI
      REG_DEAD r538:DI
    Add original<-inheritance after:
  731: r307:DI=r751:DI

    Inheritance reuse change 307->751 (bb2):
  447: r539:DI=r751:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=752 from oldreg=303, assigning class GENERAL_REGS to inheritance r752
    Original reg change 303->752 (bb2):
  443: r752:DI=r536:DI
      REG_DEAD r536:DI
    Add original<-inheritance after:
  732: r303:DI=r752:DI

    Inheritance reuse change 303->752 (bb2):
  444: r537:DI=r752:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=753 from oldreg=299, assigning class GENERAL_REGS to inheritance r753
    Original reg change 299->753 (bb2):
  440: r753:DI=r534:DI
      REG_DEAD r534:DI
    Add original<-inheritance after:
  733: r299:DI=r753:DI

    Inheritance reuse change 299->753 (bb2):
  441: r535:DI=r753:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=754 from oldreg=295, assigning class GENERAL_REGS to inheritance r754
    Original reg change 295->754 (bb2):
  437: r754:DI=r532:DI
      REG_DEAD r532:DI
    Add original<-inheritance after:
  734: r295:DI=r754:DI

    Inheritance reuse change 295->754 (bb2):
  438: r533:DI=r754:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 4
EBB 5
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=755 from oldreg=292, assigning class GENERAL_REGS to inheritance r755
    Original reg change 292->755 (bb5):
  543: r755:DI=r617:DI
      REG_DEAD r617:DI
    Add original<-inheritance after:
  735: r292:DI=r755:DI

    Inheritance reuse change 292->755 (bb5):
  420: r528:DI=r755:DI
      REG_DEAD r755:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   735: r292:DI=r755:DI
deleting insn with uid = 735.
EBB 6 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=756 from oldreg=262, assigning class GENERAL_REGS to inheritance r756
    Original reg change 262->756 (bb6):
  632: r756:DI=r681:DI
      REG_DEAD r681:DI
    Add original<-inheritance after:
  736: r262:DI=r756:DI

    Inheritance reuse change 262->756 (bb6):
  633: r682:DI=r756:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=757 from oldreg=522, assigning class GENERAL_REGS to inheritance r757
    Original reg change 522->757 (bb6):
  630: r757:DI=r679:DI
      REG_DEAD r679:DI
    Add original<-inheritance after:
  737: r522:DI=r757:DI

    Inheritance reuse change 522->757 (bb6):
  631: r680:DI=r757:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=758 from oldreg=148, assigning class GENERAL_REGS to inheritance r758
    Original reg change 148->758 (bb6):
  623: r674:DI=r758:DI
    Add inheritance<-original before:
  738: r758:DI=r148:DI

    Inheritance reuse change 148->758 (bb6):
  625: r676:DI=r758:DI
      REG_DEAD r758:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=759 from oldreg=241, assigning class GENERAL_REGS to inheritance r759
    Original reg change 241->759 (bb6):
  616: r759:DI=r669:DI
      REG_DEAD r669:DI
    Add original<-inheritance after:
  739: r241:DI=r759:DI

    Inheritance reuse change 241->759 (bb6):
  617: r670:DI=r759:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=760 from oldreg=197, assigning class GENERAL_REGS to inheritance r760
    Original reg change 197->760 (bb6):
  605: r760:DI=r661:DI
      REG_DEAD r661:DI
    Add original<-inheritance after:
  740: r197:DI=r760:DI

    Inheritance reuse change 197->760 (bb6):
  606: r662:DI=r760:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=761 from oldreg=210, assigning class GENERAL_REGS to inheritance r761
    Original reg change 210->761 (bb6):
  595: r761:DI=r654:DI
      REG_DEAD r654:DI
    Add original<-inheritance after:
  741: r210:DI=r761:DI

    Inheritance reuse change 210->761 (bb6):
  596: r655:DI=r761:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=762 from oldreg=208, assigning class GENERAL_REGS to inheritance r762
    Original reg change 208->762 (bb6):
  592: r762:DI=r652:DI
      REG_DEAD r652:DI
    Add original<-inheritance after:
  742: r208:DI=r762:DI

    Inheritance reuse change 208->762 (bb6):
  593: r653:DI=r762:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=763 from oldreg=246, assigning class GENERAL_REGS to inheritance r763
    Original reg change 246->763 (bb6):
  575: r641:DI=r763:DI
    Add inheritance<-original before:
  743: r763:DI=r246:DI

    Inheritance reuse change 246->763 (bb6):
  581: r645:DI=r763:DI
      REG_DEAD r763:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=764 from oldreg=230, assigning class GENERAL_REGS to inheritance r764
    Original reg change 230->764 (bb6):
  565: r634:DI=r764:DI
    Add inheritance<-original before:
  744: r764:DI=r230:DI

    Inheritance reuse change 230->764 (bb6):
  567: r636:DI=r764:DI
      REG_DEAD r764:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=765 from oldreg=162, assigning class GENERAL_REGS to inheritance r765
    Original reg change 162->765 (bb6):
  561: r631:DI=r765:DI
    Add inheritance<-original before:
  745: r765:DI=r162:DI

    Inheritance reuse change 162->765 (bb6):
  624: r675:DI=r765:DI
      REG_DEAD r765:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=766 from oldreg=162, assigning class GENERAL_REGS to inheritance r766
    Original reg change 162->766 (bb6):
  560: r766:DI=r630:DI
      REG_DEAD r630:DI
    Add original<-inheritance after:
  746: r162:DI=r766:DI

    Inheritance reuse change 162->766 (bb6):
  745: r765:DI=r766:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=767 from oldreg=214, assigning class GENERAL_REGS to inheritance r767
    Original reg change 214->767 (bb6):
  554: r626:DI=r767:DI
    Add inheritance<-original before:
  747: r767:DI=r214:DI

    Inheritance reuse change 214->767 (bb6):
  557: r628:DI=r767:DI
      REG_DEAD r767:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=768 from oldreg=148, assigning class GENERAL_REGS to inheritance r768
    Original reg change 148->768 (bb6):
  550: r768:DI=r623:DI
      REG_DEAD r623:DI
    Add original<-inheritance after:
  748: r148:DI=r768:DI

    Inheritance reuse change 148->768 (bb6):
  738: r758:DI=r768:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=769 from oldreg=146, assigning class GENERAL_REGS to inheritance r769
    Original reg change 146->769 (bb6):
  548: r622:DI=r769:DI
    Add inheritance<-original before:
  749: r769:DI=r146:DI

    Inheritance reuse change 146->769 (bb6):
  612: r666:DI=r769:DI
      REG_DEAD r769:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=770 from oldreg=146, assigning class GENERAL_REGS to inheritance r770
    Original reg change 146->770 (bb6):
  547: r770:DI=r621:DI
      REG_DEAD r621:DI
    Add original<-inheritance after:
  750: r146:DI=r770:DI

    Inheritance reuse change 146->770 (bb6):
  749: r769:DI=r770:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   746: r162:DI=r766:DI
deleting insn with uid = 746.
	    Removing dead insn:
   748: r148:DI=r768:DI
deleting insn with uid = 748.
	    Removing dead insn:
   750: r146:DI=r770:DI
deleting insn with uid = 750.
EBB 8
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=771 from oldreg=211, assigning class GENERAL_REGS to inheritance r771
    Original reg change 211->771 (bb8):
  425: r771:DI=r517:DI
      REG_DEAD r517:DI
    Add original<-inheritance after:
  751: r211:DI=r771:DI

    Inheritance reuse change 211->771 (bb8):
  684: r721:V2DI#0=r771:DI
      REG_DEAD r771:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   751: r211:DI=r771:DI
deleting insn with uid = 751.

********** Pseudo live ranges #3: **********

  BB 8
   Insn 401: point = 0
   Insn 400: point = 0
   Insn 395: point = 0
   Insn 716: point = 1
   Insn 394: point = 2
   Insn 715: point = 4
	Hard reg 23 is preferable by r735 with profit 58
   Insn 393: point = 6
   Insn 714: point = 8
   Insn 713: point = 9
   Insn 392: point = 10
   Insn 390: point = 12
   Insn 711: point = 14
	Hard reg 22 is preferable by r733 with profit 58
   Insn 389: point = 16
   Insn 712: point = 18
   Insn 710: point = 19
	Hard reg 3 is preferable by r734 with profit 58
   Insn 709: point = 21
   Insn 708: point = 22
	Hard reg 21 is preferable by r732 with profit 58
   Insn 388: point = 24
   Insn 707: point = 26
   Insn 706: point = 27
   Insn 386: point = 28
   Insn 705: point = 29
   Insn 385: point = 30
   Insn 704: point = 32
	Hard reg 24 is preferable by r730 with profit 58
   Insn 384: point = 34
   Insn 703: point = 36
   Insn 702: point = 37
   Insn 383: point = 38
   Insn 381: point = 40
   Insn 700: point = 42
	Hard reg 22 is preferable by r728 with profit 58
   Insn 380: point = 44
   Insn 701: point = 46
   Insn 699: point = 47
	Hard reg 37 is preferable by r729 with profit 58
   Insn 698: point = 49
   Insn 695: point = 50
	Hard reg 21 is preferable by r725 with profit 58
   Insn 379: point = 52
   Insn 696: point = 54
	Hard reg 42 is preferable by r726 with profit 58
   Insn 697: point = 56
   Insn 694: point = 57
	Hard reg 6 is preferable by r727 with profit 58
   Insn 693: point = 59
   Insn 377: point = 60
   Insn 692: point = 61
   Insn 376: point = 62
   Insn 691: point = 64
	Hard reg 22 is preferable by r723 with profit 58
   Insn 375: point = 66
   Insn 690: point = 68
   Insn 689: point = 69
   Insn 374: point = 70
   Insn 688: point = 72
	Hard reg 23 is preferable by r722 with profit 58
   Insn 373: point = 74
   Insn 687: point = 76
   Insn 686: point = 77
   Insn 372: point = 78
   Insn 685: point = 80
	Hard reg 21 is preferable by r721 with profit 58
   Insn 371: point = 82
   Insn 684: point = 84
   Insn 683: point = 85
   Insn 681: point = 86
	Hard reg 22 is preferable by r719 with profit 58
   Insn 370: point = 88
   Insn 682: point = 90
	Hard reg 44 is preferable by r720 with profit 58
   Insn 680: point = 92
   Insn 679: point = 93
   Insn 368: point = 94
   Insn 678: point = 95
   Insn 367: point = 96
   Insn 677: point = 98
	Hard reg 22 is preferable by r717 with profit 58
   Insn 366: point = 100
   Insn 676: point = 102
   Insn 675: point = 103
   Insn 365: point = 104
   Insn 674: point = 106
	Hard reg 24 is preferable by r716 with profit 58
   Insn 364: point = 108
   Insn 673: point = 110
   Insn 672: point = 111
   Insn 363: point = 112
   Insn 670: point = 114
	Hard reg 21 is preferable by r714 with profit 58
   Insn 362: point = 116
   Insn 671: point = 118
	Hard reg 43 is preferable by r715 with profit 58
   Insn 669: point = 120
   Insn 668: point = 121
   Insn 666: point = 122
	Hard reg 22 is preferable by r712 with profit 58
   Insn 361: point = 124
   Insn 667: point = 126
   Insn 665: point = 127
	Hard reg 38 is preferable by r713 with profit 58
   Insn 664: point = 129
   Insn 432: point = 130
   Insn 431: point = 132
   Insn 430: point = 134
   Insn 429: point = 136
   Insn 428: point = 138
   Insn 427: point = 140
   Insn 426: point = 142
   Insn 425: point = 144
	Hard reg 44 is preferable by r771 with profit 58
  BB 6
   Insn 256: point = 147
   Insn 635: point = 147
   Insn 255: point = 149
   Insn 634: point = 149
   Insn 254: point = 151
   Insn 252: point = 151
   Insn 251: point = 153
   Insn 633: point = 155
	   Creating copy r682<-r756@941
   Insn 736: point = 157
   Insn 632: point = 158
	   Creating copy r681->r756@941
   Insn 250: point = 160
   Insn 249: point = 162
   Insn 248: point = 164
   Insn 631: point = 166
	   Creating copy r680<-r757@941
   Insn 737: point = 168
   Insn 630: point = 169
	   Creating copy r679->r757@941
   Insn 247: point = 171
   Insn 246: point = 173
   Insn 628: point = 175
	Hard reg 2 is preferable by r677 with profit 941
   Insn 245: point = 177
   Insn 629: point = 178
   Insn 627: point = 180
   Insn 244: point = 182
   Insn 626: point = 184
	Hard reg 37 is preferable by r676 with profit 941
   Insn 243: point = 186
   Insn 625: point = 186
	   Creating copy r676<-r758@941
   Insn 242: point = 188
   Insn 624: point = 190
	   Creating copy r675<-r765@941
   Insn 241: point = 192
   Insn 240: point = 194
   Insn 239: point = 196
   Insn 623: point = 198
	   Creating copy r674<-r758@941
   Insn 738: point = 199
	   Creating copy r758<-r768@941
   Insn 238: point = 201
   Insn 621: point = 203
	Hard reg 0 is preferable by r672 with profit 941
   Insn 237: point = 205
   Insn 622: point = 206
   Insn 620: point = 208
   Insn 619: point = 210
   Insn 236: point = 212
   Insn 618: point = 212
	Hard reg 37 is preferable by r671 with profit 941
   Insn 235: point = 214
   Insn 234: point = 216
   Insn 233: point = 218
   Insn 232: point = 220
   Insn 617: point = 222
	   Creating copy r670<-r759@941
   Insn 739: point = 224
   Insn 616: point = 225
	   Creating copy r669->r759@941
   Insn 231: point = 227
   Insn 230: point = 229
   Insn 614: point = 231
	Hard reg 0 is preferable by r667 with profit 941
   Insn 229: point = 233
   Insn 615: point = 234
   Insn 613: point = 236
   Insn 228: point = 238
   Insn 227: point = 240
   Insn 226: point = 242
   Insn 612: point = 244
	   Creating copy r666<-r769@941
   Insn 225: point = 246
   Insn 224: point = 248
   Insn 223: point = 250
   Insn 222: point = 252
   Insn 610: point = 254
	Hard reg 0 is preferable by r664 with profit 941
   Insn 221: point = 256
   Insn 611: point = 257
   Insn 609: point = 259
   Insn 608: point = 261
   Insn 220: point = 263
   Insn 607: point = 263
	Hard reg 38 is preferable by r663 with profit 941
   Insn 219: point = 265
   Insn 606: point = 267
	   Creating copy r662<-r760@941
   Insn 740: point = 269
   Insn 605: point = 270
	   Creating copy r661->r760@941
   Insn 218: point = 272
   Insn 217: point = 274
   Insn 216: point = 276
   Insn 215: point = 278
   Insn 214: point = 280
   Insn 603: point = 282
	Hard reg 39 is preferable by r659 with profit 941
   Insn 213: point = 284
   Insn 604: point = 285
   Insn 602: point = 287
   Insn 212: point = 289
   Insn 211: point = 291
   Insn 210: point = 293
   Insn 209: point = 295
   Insn 208: point = 297
   Insn 207: point = 299
   Insn 206: point = 301
   Insn 600: point = 303
	Hard reg 39 is preferable by r657 with profit 941
   Insn 205: point = 305
   Insn 601: point = 306
   Insn 599: point = 308
   Insn 598: point = 310
   Insn 204: point = 312
   Insn 597: point = 312
	Hard reg 40 is preferable by r656 with profit 941
   Insn 203: point = 314
   Insn 202: point = 316
   Insn 596: point = 318
	   Creating copy r655<-r761@941
   Insn 741: point = 320
   Insn 595: point = 321
	   Creating copy r654->r761@941
   Insn 201: point = 323
   Insn 594: point = 323
	Hard reg 41 is preferable by r654 with profit 941
   Insn 200: point = 325
   Insn 593: point = 327
	   Creating copy r653<-r762@941
   Insn 742: point = 329
   Insn 592: point = 330
	   Creating copy r652->r762@941
   Insn 199: point = 332
   Insn 198: point = 334
   Insn 590: point = 336
	Hard reg 5 is preferable by r650 with profit 941
   Insn 197: point = 338
   Insn 591: point = 339
   Insn 589: point = 341
   Insn 196: point = 343
   Insn 195: point = 345
   Insn 194: point = 347
   Insn 193: point = 349
   Insn 192: point = 351
   Insn 191: point = 353
   Insn 190: point = 355
   Insn 587: point = 357
	Hard reg 5 is preferable by r648 with profit 941
   Insn 189: point = 359
   Insn 588: point = 360
   Insn 586: point = 362
   Insn 188: point = 364
   Insn 187: point = 366
   Insn 186: point = 368
   Insn 185: point = 370
   Insn 184: point = 372
   Insn 183: point = 374
   Insn 182: point = 376
   Insn 584: point = 378
	Hard reg 5 is preferable by r646 with profit 941
   Insn 181: point = 380
   Insn 585: point = 381
   Insn 583: point = 383
   Insn 180: point = 385
   Insn 582: point = 387
	Hard reg 37 is preferable by r645 with profit 941
   Insn 179: point = 389
   Insn 581: point = 389
	   Creating copy r645<-r763@941
   Insn 580: point = 391
	Hard reg 43 is preferable by r644 with profit 941
   Insn 178: point = 393
   Insn 579: point = 393
   Insn 177: point = 395
   Insn 578: point = 397
	Hard reg 41 is preferable by r643 with profit 941
   Insn 176: point = 399
   Insn 577: point = 399
   Insn 175: point = 401
   Insn 576: point = 403
   Insn 174: point = 405
   Insn 575: point = 407
	   Creating copy r641<-r763@941
   Insn 743: point = 408
   Insn 573: point = 410
	Hard reg 1 is preferable by r639 with profit 941
   Insn 173: point = 412
   Insn 574: point = 413
   Insn 572: point = 415
   Insn 172: point = 417
   Insn 171: point = 419
   Insn 170: point = 421
   Insn 169: point = 423
   Insn 168: point = 425
   Insn 167: point = 427
   Insn 166: point = 429
   Insn 570: point = 431
	Hard reg 2 is preferable by r637 with profit 941
   Insn 165: point = 433
   Insn 571: point = 434
   Insn 569: point = 436
   Insn 164: point = 438
   Insn 568: point = 440
	Hard reg 38 is preferable by r636 with profit 941
   Insn 163: point = 442
   Insn 567: point = 442
	   Creating copy r636<-r764@941
   Insn 162: point = 444
   Insn 161: point = 446
   Insn 160: point = 448
   Insn 159: point = 450
   Insn 566: point = 452
   Insn 158: point = 454
   Insn 565: point = 456
	   Creating copy r634<-r764@941
   Insn 744: point = 457
   Insn 563: point = 459
	Hard reg 1 is preferable by r632 with profit 941
   Insn 157: point = 461
   Insn 564: point = 462
   Insn 562: point = 464
   Insn 156: point = 466
   Insn 155: point = 468
   Insn 561: point = 470
	   Creating copy r631<-r765@941
   Insn 745: point = 471
	   Creating copy r765<-r766@941
   Insn 560: point = 473
	   Creating copy r630->r766@941
   Insn 154: point = 475
   Insn 153: point = 477
   Insn 152: point = 479
   Insn 151: point = 481
   Insn 150: point = 483
   Insn 149: point = 485
   Insn 559: point = 487
   Insn 148: point = 489
   Insn 558: point = 491
	Hard reg 40 is preferable by r628 with profit 941
   Insn 147: point = 493
   Insn 557: point = 493
	   Creating copy r628<-r767@941
   Insn 556: point = 495
	Hard reg 2 is preferable by r627 with profit 941
   Insn 146: point = 497
   Insn 555: point = 497
   Insn 145: point = 499
   Insn 144: point = 501
   Insn 143: point = 503
   Insn 142: point = 505
   Insn 554: point = 507
	   Creating copy r626<-r767@941
   Insn 747: point = 508
   Insn 552: point = 510
	Hard reg 1 is preferable by r624 with profit 941
   Insn 141: point = 512
   Insn 553: point = 513
   Insn 551: point = 515
   Insn 550: point = 517
	   Creating copy r623->r768@941
   Insn 140: point = 519
   Insn 549: point = 519
	Hard reg 37 is preferable by r623 with profit 941
   Insn 139: point = 521
   Insn 548: point = 523
	   Creating copy r622<-r769@941
   Insn 749: point = 524
	   Creating copy r769<-r770@941
   Insn 547: point = 526
	   Creating copy r621->r770@941
   Insn 138: point = 528
   Insn 137: point = 530
   Insn 136: point = 532
   Insn 135: point = 534
   Insn 134: point = 536
   Insn 133: point = 538
   Insn 132: point = 540
   Insn 131: point = 542
   Insn 130: point = 544
   Insn 129: point = 546
   Insn 128: point = 548
   Insn 127: point = 550
   Insn 546: point = 552
   Insn 126: point = 554
   Insn 125: point = 556
   Insn 545: point = 558
  BB 7
   Insn 409: point = 561
   Insn 663: point = 561
   Insn 354: point = 563
   Insn 662: point = 565
   Insn 351: point = 567
   Insn 661: point = 569
   Insn 349: point = 571
   Insn 348: point = 572
   Insn 660: point = 573
   Insn 345: point = 575
   Insn 344: point = 576
   Insn 659: point = 577
   Insn 342: point = 579
   Insn 658: point = 581
   Insn 339: point = 583
   Insn 657: point = 585
   Insn 337: point = 587
   Insn 336: point = 588
   Insn 656: point = 589
   Insn 333: point = 591
   Insn 332: point = 592
   Insn 655: point = 593
   Insn 330: point = 595
   Insn 654: point = 597
   Insn 327: point = 599
   Insn 653: point = 601
   Insn 325: point = 603
   Insn 324: point = 604
   Insn 652: point = 605
   Insn 321: point = 607
   Insn 320: point = 608
   Insn 651: point = 609
   Insn 318: point = 611
   Insn 650: point = 613
   Insn 315: point = 615
   Insn 649: point = 617
   Insn 313: point = 619
   Insn 312: point = 620
   Insn 648: point = 621
   Insn 309: point = 623
   Insn 308: point = 624
   Insn 647: point = 625
   Insn 306: point = 627
   Insn 646: point = 629
   Insn 303: point = 631
   Insn 645: point = 633
   Insn 301: point = 635
   Insn 300: point = 636
   Insn 644: point = 637
   Insn 297: point = 639
   Insn 296: point = 640
   Insn 643: point = 641
   Insn 294: point = 643
   Insn 642: point = 645
   Insn 291: point = 647
   Insn 641: point = 649
   Insn 289: point = 651
   Insn 288: point = 652
   Insn 640: point = 653
   Insn 285: point = 655
   Insn 284: point = 656
   Insn 282: point = 657
   Insn 639: point = 659
   Insn 279: point = 661
   Insn 638: point = 663
   Insn 277: point = 665
   Insn 276: point = 666
   Insn 637: point = 667
   Insn 273: point = 669
   Insn 272: point = 670
   Insn 270: point = 671
   Insn 267: point = 673
   Insn 636: point = 675
   Insn 265: point = 677
   Insn 264: point = 678
   Insn 263: point = 679
   Insn 261: point = 680
   Insn 260: point = 681
  BB 5
   Insn 424: point = 683
   Insn 423: point = 685
   Insn 422: point = 687
   Insn 421: point = 689
   Insn 420: point = 691
	Hard reg 39 is preferable by r755 with profit 59
   Insn 419: point = 693
   Insn 418: point = 695
   Insn 417: point = 697
   Insn 416: point = 699
   Insn 415: point = 701
   Insn 414: point = 703
   Insn 413: point = 705
   Insn 412: point = 707
   Insn 411: point = 709
   Insn 544: point = 711
   Insn 37: point = 713
   Insn 543: point = 714
	   Creating copy r617->r755@59
   Insn 36: point = 716
   Insn 542: point = 717
   Insn 35: point = 719
   Insn 34: point = 720
   Insn 541: point = 721
   Insn 33: point = 723
   Insn 32: point = 724
   Insn 540: point = 725
   Insn 31: point = 727
   Insn 539: point = 728
   Insn 30: point = 730
   Insn 538: point = 731
   Insn 29: point = 733
   Insn 537: point = 734
   Insn 28: point = 736
   Insn 536: point = 737
   Insn 27: point = 739
   Insn 535: point = 740
   Insn 26: point = 742
   Insn 534: point = 743
   Insn 25: point = 745
   Insn 533: point = 746
   Insn 24: point = 748
   Insn 532: point = 749
   Insn 23: point = 751
   Insn 531: point = 752
   Insn 22: point = 754
   Insn 21: point = 755
   Insn 20: point = 756
   Insn 530: point = 758
   Insn 19: point = 759
   Insn 529: point = 761
   Insn 18: point = 762
   Insn 528: point = 764
   Insn 17: point = 765
   Insn 16: point = 766
   Insn 15: point = 767
   Insn 527: point = 769
   Insn 14: point = 770
   Insn 13: point = 771
   Insn 526: point = 773
   Insn 123: point = 774
  BB 3
   Insn 407: point = 776
   Insn 524: point = 776
   Insn 120: point = 778
   Insn 523: point = 779
	Hard reg 0 is preferable by r598 with profit 29
   Insn 119: point = 781
   Insn 522: point = 782
	Hard reg 3 is preferable by r597 with profit 29
   Insn 118: point = 784
   Insn 521: point = 784
	Hard reg 3 is preferable by r597 with profit 29
	Hard reg 2 is preferable by r597 with profit 29
   Insn 117: point = 786
   Insn 116: point = 787
   Insn 520: point = 789
   Insn 519: point = 790
	Hard reg 42 is preferable by r595 with profit 29
   Insn 115: point = 792
   Insn 518: point = 793
	Hard reg 42 is preferable by r595 with profit 29
	Hard reg 0 is preferable by r595 with profit 29
   Insn 114: point = 795
   Insn 517: point = 796
	Hard reg 6 is preferable by r594 with profit 29
   Insn 113: point = 798
   Insn 516: point = 798
	Hard reg 6 is preferable by r594 with profit 29
	Hard reg 39 is preferable by r594 with profit 29
   Insn 112: point = 800
   Insn 111: point = 801
   Insn 515: point = 803
  BB 4
   Insn 12: point = 805
   Insn 11: point = 806
   Insn 10: point = 807
   Insn 525: point = 808
   Insn 9: point = 810
  BB 2
   Insn 109: point = 812
   Insn 108: point = 812
   Insn 514: point = 813
   Insn 512: point = 814
   Insn 107: point = 816
   Insn 513: point = 817
	   Creating copy r591<-r737@58
   Insn 511: point = 819
	Hard reg 0 is preferable by r590 with profit 58
   Insn 106: point = 821
   Insn 717: point = 822
   Insn 510: point = 823
	   Creating copy r589->r737@58
   Insn 105: point = 825
   Insn 509: point = 827
   Insn 507: point = 828
   Insn 104: point = 830
   Insn 508: point = 831
	   Creating copy r587<-r738@58
   Insn 506: point = 833
	Hard reg 43 is preferable by r586 with profit 58
   Insn 103: point = 835
   Insn 718: point = 836
   Insn 505: point = 837
	   Creating copy r585->r738@58
   Insn 102: point = 839
   Insn 504: point = 841
   Insn 502: point = 842
   Insn 101: point = 844
   Insn 503: point = 845
	   Creating copy r583<-r739@58
   Insn 501: point = 847
	Hard reg 4 is preferable by r582 with profit 58
   Insn 100: point = 849
   Insn 719: point = 850
   Insn 500: point = 851
	   Creating copy r581->r739@58
   Insn 99: point = 853
   Insn 499: point = 855
   Insn 497: point = 856
	Hard reg 38 is preferable by r578 with profit 58
   Insn 98: point = 858
   Insn 498: point = 859
	   Creating copy r579<-r740@58
   Insn 496: point = 861
	Hard reg 38 is preferable by r578 with profit 58
	Hard reg 41 is preferable by r578 with profit 58
   Insn 97: point = 863
   Insn 720: point = 864
   Insn 495: point = 865
	   Creating copy r577->r740@58
   Insn 96: point = 867
   Insn 494: point = 869
   Insn 493: point = 870
   Insn 95: point = 872
   Insn 492: point = 874
   Insn 491: point = 875
   Insn 94: point = 877
   Insn 490: point = 879
   Insn 489: point = 880
   Insn 93: point = 882
   Insn 488: point = 884
   Insn 487: point = 885
   Insn 92: point = 887
   Insn 486: point = 889
   Insn 485: point = 890
   Insn 91: point = 892
   Insn 484: point = 894
   Insn 483: point = 895
   Insn 90: point = 897
   Insn 482: point = 899
   Insn 481: point = 900
   Insn 89: point = 902
   Insn 480: point = 904
   Insn 479: point = 905
   Insn 88: point = 907
   Insn 478: point = 909
   Insn 87: point = 910
   Insn 477: point = 911
	   Creating copy r559<-r741@58
   Insn 721: point = 913
   Insn 476: point = 914
	   Creating copy r558->r741@58
   Insn 86: point = 916
   Insn 475: point = 916
	Hard reg 44 is preferable by r558 with profit 58
   Insn 85: point = 918
   Insn 84: point = 920
   Insn 474: point = 921
	   Creating copy r557<-r742@58
   Insn 722: point = 923
   Insn 473: point = 924
	   Creating copy r556->r742@58
   Insn 83: point = 926
   Insn 472: point = 926
	Hard reg 44 is preferable by r556 with profit 58
   Insn 82: point = 928
   Insn 81: point = 929
   Insn 471: point = 930
	   Creating copy r555<-r743@58
   Insn 723: point = 932
   Insn 470: point = 933
	   Creating copy r554->r743@58
   Insn 80: point = 935
   Insn 469: point = 935
	Hard reg 0 is preferable by r554 with profit 58
   Insn 79: point = 937
   Insn 78: point = 938
   Insn 468: point = 939
	   Creating copy r553<-r744@58
   Insn 724: point = 941
   Insn 467: point = 942
	   Creating copy r552->r744@58
   Insn 77: point = 944
   Insn 466: point = 944
	Hard reg 0 is preferable by r552 with profit 58
   Insn 76: point = 946
   Insn 75: point = 947
   Insn 465: point = 948
	   Creating copy r551<-r745@58
   Insn 725: point = 950
   Insn 464: point = 951
	   Creating copy r550->r745@58
   Insn 74: point = 953
   Insn 463: point = 953
	Hard reg 43 is preferable by r550 with profit 58
   Insn 73: point = 955
   Insn 72: point = 956
   Insn 462: point = 957
	   Creating copy r549<-r746@58
   Insn 726: point = 959
   Insn 461: point = 960
	   Creating copy r548->r746@58
   Insn 71: point = 962
   Insn 460: point = 962
	Hard reg 43 is preferable by r548 with profit 58
   Insn 70: point = 964
   Insn 69: point = 965
   Insn 459: point = 966
	   Creating copy r547<-r747@58
   Insn 727: point = 968
   Insn 458: point = 969
	   Creating copy r546->r747@58
   Insn 68: point = 971
   Insn 457: point = 971
	Hard reg 0 is preferable by r546 with profit 58
   Insn 67: point = 973
   Insn 66: point = 974
   Insn 456: point = 975
	   Creating copy r545<-r748@58
   Insn 728: point = 977
   Insn 455: point = 978
	   Creating copy r544->r748@58
   Insn 65: point = 980
   Insn 454: point = 980
	Hard reg 0 is preferable by r544 with profit 58
   Insn 64: point = 982
   Insn 63: point = 983
   Insn 453: point = 984
	   Creating copy r543<-r749@58
   Insn 729: point = 986
   Insn 452: point = 987
	   Creating copy r542->r749@58
   Insn 62: point = 989
   Insn 451: point = 989
	Hard reg 3 is preferable by r542 with profit 58
   Insn 61: point = 991
   Insn 60: point = 992
   Insn 450: point = 993
	   Creating copy r541<-r750@58
   Insn 730: point = 995
   Insn 449: point = 996
	   Creating copy r540->r750@58
   Insn 59: point = 998
   Insn 448: point = 998
	Hard reg 3 is preferable by r540 with profit 58
   Insn 58: point = 1000
   Insn 57: point = 1001
   Insn 447: point = 1002
	   Creating copy r539<-r751@58
   Insn 731: point = 1004
   Insn 446: point = 1005
	   Creating copy r538->r751@58
   Insn 56: point = 1007
   Insn 445: point = 1007
	Hard reg 0 is preferable by r538 with profit 58
   Insn 55: point = 1009
   Insn 54: point = 1010
   Insn 444: point = 1011
	   Creating copy r537<-r752@58
   Insn 732: point = 1013
   Insn 443: point = 1014
	   Creating copy r536->r752@58
   Insn 53: point = 1016
   Insn 442: point = 1016
	Hard reg 0 is preferable by r536 with profit 58
   Insn 52: point = 1018
   Insn 51: point = 1019
   Insn 441: point = 1020
	   Creating copy r535<-r753@58
   Insn 733: point = 1022
   Insn 440: point = 1023
	   Creating copy r534->r753@58
   Insn 50: point = 1025
   Insn 439: point = 1025
	Hard reg 0 is preferable by r534 with profit 58
   Insn 49: point = 1027
   Insn 48: point = 1028
   Insn 438: point = 1029
	   Creating copy r533<-r754@58
   Insn 734: point = 1031
   Insn 437: point = 1032
	   Creating copy r532->r754@58
   Insn 47: point = 1034
   Insn 436: point = 1034
	Hard reg 38 is preferable by r532 with profit 58
   Insn 46: point = 1036
   Insn 45: point = 1037
   Insn 435: point = 1037
	Hard reg 5 is preferable by r531 with profit 58
   Insn 44: point = 1039
   Insn 434: point = 1039
	Hard reg 5 is preferable by r531 with profit 58
	Hard reg 6 is preferable by r531 with profit 58
   Insn 43: point = 1041
   Insn 42: point = 1042
   Insn 41: point = 1042
   Insn 40: point = 1044
   Insn 7: point = 1045
   Insn 6: point = 1046
 r100: [150..755] [147..147]
 r119: [102..905]
 r120: [101..900]
 r121: [68..895]
 r122: [67..890]
 r123: [36..885]
 r124: [35..880]
 r125: [8..875]
 r126: [7..870]
 r127: [110..864]
 r128: [109..850]
 r129: [76..836]
 r130: [75..822]
 r132: [794..801]
 r133: [780..787]
 r135: [537..550]
 r137: [533..546]
 r138: [529..544]
 r140: [522..540]
 r143: [356..534]
 r145: [298..530]
 r151: [484..503]
 r153: [480..499]
 r154: [476..495]
 r156: [469..489]
 r159: [302..481]
 r161: [249..477]
 r164: [346..466]
 r167: [430..450]
 r169: [426..446]
 r170: [422..444]
 r172: [420..438]
 r175: [253..427]
 r177: [195..423]
 r178: [348..421]
 r180: [292..417]
 r183: [377..401]
 r185: [373..395]
 r186: [369..391]
 r188: [367..385]
 r191: [202..374]
 r193: [352..370]
 r194: [294..368]
 r196: [241..364]
 r197: [394..814] [83..269]
 r200: [335..353]
 r202: [326..349]
 r203: [317..347]
 r205: [315..343]
 r208: [553..771] [120..329]
 r210: [805..808] [400..776] [17..320]
 r211: [702..828]
 r214: [509..762] [45..310]
 r217: [281..299]
 r219: [277..295]
 r220: [273..293]
 r222: [266..289]
 r225: [684..770] [119..142]
 r227: [805..805] [710..796] [58..140]
 r230: [458..759] [26..261]
 r233: [230..250]
 r235: [221..246]
 r236: [217..242]
 r238: [215..238]
 r241: [453..767] [92..224]
 r243: [805..806] [708..790] [55..138]
 r244: [706..856] [128..136]
 r246: [409..756] [25..210]
 r250: [174..196]
 r252: [165..192]
 r253: [161..188]
 r255: [154..182]
 r258: [704..766] [91..134]
 r260: [805..807] [700..782] [20..132]
 r262: [498..842] [125..157]
 r264: [698..765] [48..130]
 r269: [696..774]
 r287: [694..1042]
 r290: [683..711] [559..675]
 r291: [686..1037]
 r295: [683..1031] [516..667]
 r298: [683..717] [514..663]
 r299: [683..1022] [488..659]
 r300: [690..720]
 r303: [683..1013] [465..653]
 r306: [683..721] [463..649]
 r307: [683..1004] [437..645]
 r308: [688..724]
 r311: [683..995] [416..637]
 r314: [683..725] [414..633]
 r315: [683..986] [384..629]
 r316: [683..728] [382..625]
 r319: [683..977] [363..621]
 r322: [683..731] [361..617]
 r323: [683..968] [342..613]
 r324: [683..734] [340..609]
 r327: [683..959] [309..605]
 r330: [683..737] [307..601]
 r331: [683..950] [288..597]
 r332: [683..740] [286..593]
 r335: [683..941] [260..589]
 r338: [683..743] [258..585]
 r339: [683..932] [237..581]
 r340: [683..746] [235..577]
 r343: [683..923] [209..573]
 r346: [683..749] [207..569]
 r347: [683..913] [181..565]
 r348: [683..752] [179..561]
 r351: [919..1045]
 r352: [1043..1044]
 r353: [1040..1041]
 r354: [1035..1036]
 r355: [1026..1027]
 r356: [1017..1018]
 r357: [1008..1009]
 r358: [999..1000]
 r359: [990..991]
 r360: [981..982]
 r361: [972..973]
 r362: [963..964]
 r363: [954..955]
 r364: [945..946]
 r365: [936..937]
 r366: [927..928]
 r367: [917..918]
 r368: [862..863]
 r369: [848..849]
 r370: [834..835]
 r371: [820..821]
 r372: [799..800]
 r373: [792..795]
 r374: [785..786]
 r375: [778..781]
 r376: [555..556]
 r377: [551..554]
 r378: [547..548]
 r379: [541..542]
 r380: [537..538]
 r381: [535..536]
 r382: [531..532]
 r383: [520..521]
 r384: [506..510]
 r385: [504..505]
 r386: [500..501]
 r387: [490..491]
 r388: [484..485]
 r389: [482..483]
 r390: [478..479]
 r391: [467..468]
 r392: [455..459]
 r393: [451..454]
 r394: [447..448]
 r395: [439..440]
 r396: [430..431]
 r397: [428..429]
 r398: [424..425]
 r399: [418..419]
 r400: [406..410]
 r401: [402..405]
 r402: [396..397]
 r403: [386..387]
 r404: [377..378]
 r405: [375..376]
 r406: [371..372]
 r407: [365..366]
 r408: [356..357]
 r409: [354..355]
 r410: [350..351]
 r411: [344..345]
 r412: [335..336]
 r413: [333..334]
 r414: [324..325]
 r415: [313..314]
 r416: [302..303]
 r417: [300..301]
 r418: [296..297]
 r419: [290..291]
 r420: [281..282]
 r421: [279..280]
 r422: [275..276]
 r423: [264..265]
 r424: [253..254]
 r425: [251..252]
 r426: [247..248]
 r427: [239..240]
 r428: [230..231]
 r429: [228..229]
 r430: [219..220]
 r431: [213..214]
 r432: [202..203]
 r433: [197..201]
 r434: [193..194]
 r435: [183..184]
 r436: [174..175]
 r437: [172..173]
 r438: [163..164]
 r439: [152..153]
 r440: [672..681]
 r441: [564..679]
 r442: [674..678]
 r446: [658..670]
 r448: [662..666]
 r452: [644..656]
 r454: [648..652]
 r458: [628..640]
 r460: [632..636]
 r464: [612..624]
 r466: [616..620]
 r470: [596..608]
 r472: [600..604]
 r476: [580..592]
 r478: [584..588]
 r482: [564..576]
 r484: [568..572]
 r488: [113..122]
 r489: [113..114]
 r490: [105..112]
 r491: [39..106]
 r492: [97..104]
 r493: [97..98]
 r494: [94..96]
 r495: [79..86]
 r496: [79..80]
 r497: [71..78]
 r498: [11..72]
 r499: [63..70]
 r500: [63..64]
 r501: [60..62]
 r502: [41..50]
 r503: [41..42]
 r504: [39..40]
 r506: [31..38]
 r507: [31..32]
 r508: [28..30]
 r509: [13..22]
 r510: [13..14]
 r511: [11..12]
 r513: [3..10]
 r514: [3..4]
 r515: [0..2]
 r517: [445..701] [145..316]
 r518: [504..683] [143..278]
 r519: [549..709] [141..274]
 r520: [502..707] [139..218]
 r521: [545..705] [137..216]
 r522: [404..703] [135..168]
 r523: [449..699] [133..162]
 r524: [543..697] [131..151]
 r525: [147..695]
 r526: [683..693] [557..680]
 r527: [683..685] [539..673]
 r528: [683..691] [539..671]
 r529: [683..689] [486..657]
 r530: [683..687] [435..641]
 r531: [1038..1039]
 r532: [1033..1034]
 r533: [1028..1029]
 r534: [1024..1025]
 r535: [1019..1020]
 r536: [1015..1016]
 r537: [1010..1011]
 r538: [1006..1007]
 r539: [1001..1002]
 r540: [997..998]
 r541: [992..993]
 r542: [988..989]
 r543: [983..984]
 r544: [979..980]
 r545: [974..975]
 r546: [970..971]
 r547: [965..966]
 r548: [961..962]
 r549: [956..957]
 r550: [952..953]
 r551: [947..948]
 r552: [943..944]
 r553: [938..939]
 r554: [934..935]
 r555: [929..930]
 r556: [925..926]
 r557: [920..921]
 r558: [915..916]
 r559: [910..911]
 r560: [908..909]
 r561: [906..907]
 r562: [903..904]
 r563: [901..902]
 r564: [898..899]
 r565: [896..897]
 r566: [893..894]
 r567: [891..892]
 r568: [888..889]
 r569: [886..887]
 r570: [883..884]
 r571: [881..882]
 r572: [878..879]
 r573: [876..877]
 r574: [873..874]
 r575: [871..872]
 r576: [868..869]
 r577: [866..867]
 r578: [857..861]
 r579: [858..859]
 r580: [854..855]
 r581: [852..853]
 r582: [843..847]
 r583: [844..845]
 r584: [840..841]
 r585: [838..839]
 r586: [829..833]
 r587: [830..831]
 r588: [826..827]
 r589: [824..825]
 r590: [815..819]
 r591: [816..817]
 r592: [812..813]
 r593: [802..803]
 r594: [797..798]
 r595: [791..793]
 r596: [788..789]
 r597: [783..784]
 r598: [777..779]
 r599: [809..810]
 r600: [772..773]
 r601: [768..769]
 r602: [763..764]
 r603: [760..761]
 r604: [757..758]
 r605: [753..754]
 r606: [750..751]
 r607: [747..748]
 r608: [744..745]
 r609: [741..742]
 r610: [738..739]
 r611: [735..736]
 r612: [732..733]
 r613: [729..730]
 r614: [726..727]
 r615: [722..723]
 r616: [718..719]
 r617: [715..716]
 r618: [712..713]
 r619: [557..558]
 r620: [551..552]
 r621: [527..528]
 r622: [522..523]
 r623: [518..519]
 r624: [511..515]
 r625: [512..513]
 r626: [506..507]
 r627: [496..497]
 r628: [492..493]
 r629: [486..487]
 r630: [474..475]
 r631: [469..470]
 r632: [460..464]
 r633: [461..462]
 r634: [455..456]
 r635: [451..452]
 r636: [441..442]
 r637: [432..436]
 r638: [433..434]
 r639: [411..415]
 r640: [412..413]
 r641: [406..407]
 r642: [402..403]
 r643: [398..399]
 r644: [392..393]
 r645: [388..389]
 r646: [379..383]
 r647: [380..381]
 r648: [358..362]
 r649: [359..360]
 r650: [337..341]
 r651: [338..339]
 r652: [331..332]
 r653: [326..327]
 r654: [322..323]
 r655: [317..318]
 r656: [311..312]
 r657: [304..308]
 r658: [305..306]
 r659: [283..287]
 r660: [284..285]
 r661: [271..272]
 r662: [266..267]
 r663: [262..263]
 r664: [255..259]
 r665: [256..257]
 r666: [243..244]
 r667: [232..236]
 r668: [233..234]
 r669: [226..227]
 r670: [221..222]
 r671: [211..212]
 r672: [204..208]
 r673: [205..206]
 r674: [197..198]
 r675: [189..190]
 r676: [185..186]
 r677: [176..180]
 r678: [177..178]
 r679: [170..171]
 r680: [165..166]
 r681: [159..160]
 r682: [154..155]
 r683: [148..149]
 r684: [676..677]
 r685: [668..669]
 r686: [664..665]
 r687: [660..661]
 r688: [654..655]
 r689: [650..651]
 r690: [646..647]
 r691: [642..643]
 r692: [638..639]
 r693: [634..635]
 r694: [630..631]
 r695: [626..627]
 r696: [622..623]
 r697: [618..619]
 r698: [614..615]
 r699: [610..611]
 r700: [606..607]
 r701: [602..603]
 r702: [598..599]
 r703: [594..595]
 r704: [590..591]
 r705: [586..587]
 r706: [582..583]
 r707: [578..579]
 r708: [574..575]
 r709: [570..571]
 r710: [566..567]
 r711: [562..563]
 r712: [123..129]
 r713: [126..127]
 r714: [115..121]
 r715: [117..118]
 r716: [107..111]
 r717: [99..103]
 r718: [94..95]
 r719: [87..93]
 r720: [89..90]
 r721: [81..85]
 r722: [73..77]
 r723: [65..69]
 r724: [60..61]
 r725: [51..59]
 r726: [53..54]
 r727: [56..57]
 r728: [43..49]
 r729: [46..47]
 r730: [33..37]
 r731: [28..29]
 r732: [23..27]
 r733: [15..21]
 r734: [18..19]
 r735: [5..9]
 r736: [0..1]
 r737: [818..823]
 r738: [832..837]
 r739: [846..851]
 r740: [860..865]
 r741: [912..914]
 r742: [922..924]
 r743: [931..933]
 r744: [940..942]
 r745: [949..951]
 r746: [958..960]
 r747: [967..969]
 r748: [976..978]
 r749: [985..987]
 r750: [994..996]
 r751: [1003..1005]
 r752: [1012..1014]
 r753: [1021..1023]
 r754: [1030..1032]
 r755: [692..714]
 r756: [156..158]
 r757: [167..169]
 r758: [187..199]
 r759: [223..225]
 r760: [268..270]
 r761: [319..321]
 r762: [328..330]
 r763: [390..408]
 r764: [443..457]
 r765: [191..471]
 r766: [472..473]
 r767: [494..508]
 r768: [200..517]
 r769: [245..524]
 r770: [525..526]
 r771: [84..144]
Compressing live ranges: from 1046 to 849 - 81%
Ranges after the compression:
 r100: [92..622] [89..89]
 r119: [58..726]
 r120: [58..722]
 r121: [40..718]
 r122: [40..714]
 r123: [20..710]
 r124: [20..706]
 r125: [4..702]
 r126: [4..698]
 r127: [62..694]
 r128: [62..684]
 r129: [44..674]
 r130: [44..664]
 r132: [645..650]
 r133: [635..640]
 r135: [454..467]
 r137: [450..463]
 r138: [446..461]
 r140: [440..457]
 r143: [284..451]
 r145: [230..447]
 r151: [404..423]
 r153: [400..419]
 r154: [396..415]
 r156: [390..409]
 r159: [234..401]
 r161: [184..397]
 r164: [274..387]
 r167: [354..373]
 r169: [350..369]
 r170: [346..367]
 r172: [344..361]
 r175: [188..351]
 r177: [134..347]
 r178: [276..345]
 r180: [224..341]
 r183: [304..327]
 r185: [300..321]
 r186: [296..317]
 r188: [294..311]
 r191: [140..301]
 r193: [280..297]
 r194: [226..295]
 r196: [176..291]
 r197: [320..658] [48..203]
 r200: [264..281]
 r202: [256..277]
 r203: [248..275]
 r205: [246..271]
 r208: [470..630] [68..259]
 r210: [653..654] [326..632] [10..251]
 r211: [585..668]
 r214: [428..626] [26..241]
 r217: [214..231]
 r219: [210..227]
 r220: [206..225]
 r222: [200..221]
 r225: [567..630] [68..85]
 r227: [653..653] [593..646] [34..83]
 r230: [380..624] [14..195]
 r233: [166..185]
 r235: [158..181]
 r236: [154..177]
 r238: [152..173]
 r241: [376..628] [52..161]
 r243: [653..654] [591..642] [32..81]
 r244: [589..688] [72..79]
 r246: [334..622] [14..147]
 r250: [114..135]
 r252: [106..131]
 r253: [102..127]
 r255: [96..121]
 r258: [587..628] [52..77]
 r260: [653..654] [583..636] [12..75]
 r262: [418..678] [70..99]
 r264: [581..628] [28..73]
 r269: [579..632]
 r287: [577..846]
 r290: [566..594] [476..563]
 r291: [569..842]
 r295: [566..838] [434..557]
 r298: [566..598] [432..555]
 r299: [566..830] [408..551]
 r300: [573..600]
 r303: [566..822] [386..547]
 r306: [566..600] [384..545]
 r307: [566..814] [360..541]
 r308: [571..602]
 r311: [566..806] [340..535]
 r314: [566..602] [338..533]
 r315: [566..798] [310..529]
 r316: [566..604] [308..525]
 r319: [566..790] [290..523]
 r322: [566..606] [288..521]
 r323: [566..782] [270..517]
 r324: [566..608] [268..513]
 r327: [566..774] [240..511]
 r330: [566..610] [238..509]
 r331: [566..766] [220..505]
 r332: [566..612] [218..501]
 r335: [566..758] [194..499]
 r338: [566..614] [192..497]
 r339: [566..750] [172..493]
 r340: [566..616] [170..489]
 r343: [566..742] [146..487]
 r346: [566..618] [144..485]
 r347: [566..734] [120..481]
 r348: [566..620] [118..477]
 r351: [739..848]
 r352: [847..848]
 r353: [845..846]
 r354: [841..842]
 r355: [833..834]
 r356: [825..826]
 r357: [817..818]
 r358: [809..810]
 r359: [801..802]
 r360: [793..794]
 r361: [785..786]
 r362: [777..778]
 r363: [769..770]
 r364: [761..762]
 r365: [753..754]
 r366: [745..746]
 r367: [737..738]
 r368: [693..694]
 r369: [683..684]
 r370: [673..674]
 r371: [663..664]
 r372: [649..650]
 r373: [643..646]
 r374: [639..640]
 r375: [633..636]
 r376: [472..473]
 r377: [468..471]
 r378: [464..465]
 r379: [458..459]
 r380: [454..455]
 r381: [452..453]
 r382: [448..449]
 r383: [438..439]
 r384: [426..429]
 r385: [424..425]
 r386: [420..421]
 r387: [410..411]
 r388: [404..405]
 r389: [402..403]
 r390: [398..399]
 r391: [388..389]
 r392: [378..381]
 r393: [374..377]
 r394: [370..371]
 r395: [362..363]
 r396: [354..355]
 r397: [352..353]
 r398: [348..349]
 r399: [342..343]
 r400: [332..335]
 r401: [328..331]
 r402: [322..323]
 r403: [312..313]
 r404: [304..305]
 r405: [302..303]
 r406: [298..299]
 r407: [292..293]
 r408: [284..285]
 r409: [282..283]
 r410: [278..279]
 r411: [272..273]
 r412: [264..265]
 r413: [262..263]
 r414: [254..255]
 r415: [244..245]
 r416: [234..235]
 r417: [232..233]
 r418: [228..229]
 r419: [222..223]
 r420: [214..215]
 r421: [212..213]
 r422: [208..209]
 r423: [198..199]
 r424: [188..189]
 r425: [186..187]
 r426: [182..183]
 r427: [174..175]
 r428: [166..167]
 r429: [164..165]
 r430: [156..157]
 r431: [150..151]
 r432: [140..141]
 r433: [136..139]
 r434: [132..133]
 r435: [122..123]
 r436: [114..115]
 r437: [112..113]
 r438: [104..105]
 r439: [94..95]
 r440: [560..565]
 r441: [480..565]
 r442: [562..565]
 r446: [550..559]
 r448: [554..557]
 r452: [540..549]
 r454: [544..547]
 r458: [528..537]
 r460: [532..535]
 r464: [516..525]
 r466: [520..523]
 r470: [504..513]
 r472: [508..511]
 r476: [492..501]
 r478: [496..499]
 r482: [480..489]
 r484: [484..487]
 r488: [64..69]
 r489: [64..65]
 r490: [60..63]
 r491: [22..61]
 r492: [56..59]
 r493: [56..57]
 r494: [54..55]
 r495: [46..49]
 r496: [46..47]
 r497: [42..45]
 r498: [6..43]
 r499: [38..41]
 r500: [38..39]
 r501: [36..37]
 r502: [24..29]
 r503: [24..25]
 r504: [22..23]
 r506: [18..21]
 r507: [18..19]
 r508: [16..17]
 r509: [8..13]
 r510: [8..9]
 r511: [6..7]
 r513: [2..5]
 r514: [2..3]
 r515: [0..1]
 r517: [368..584] [88..247]
 r518: [424..566] [86..211]
 r519: [466..592] [84..207]
 r520: [422..590] [82..155]
 r521: [462..588] [80..153]
 r522: [330..586] [78..109]
 r523: [372..582] [76..103]
 r524: [460..580] [74..93]
 r525: [89..578]
 r526: [474..576]
 r527: [566..568] [456..561]
 r528: [566..574] [456..559]
 r529: [566..572] [406..549]
 r530: [566..570] [358..537]
 r531: [843..844]
 r532: [839..840]
 r533: [835..836]
 r534: [831..832]
 r535: [827..828]
 r536: [823..824]
 r537: [819..820]
 r538: [815..816]
 r539: [811..812]
 r540: [807..808]
 r541: [803..804]
 r542: [799..800]
 r543: [795..796]
 r544: [791..792]
 r545: [787..788]
 r546: [783..784]
 r547: [779..780]
 r548: [775..776]
 r549: [771..772]
 r550: [767..768]
 r551: [763..764]
 r552: [759..760]
 r553: [755..756]
 r554: [751..752]
 r555: [747..748]
 r556: [743..744]
 r557: [739..740]
 r558: [735..736]
 r559: [731..732]
 r560: [729..730]
 r561: [727..728]
 r562: [725..726]
 r563: [723..724]
 r564: [721..722]
 r565: [719..720]
 r566: [717..718]
 r567: [715..716]
 r568: [713..714]
 r569: [711..712]
 r570: [709..710]
 r571: [707..708]
 r572: [705..706]
 r573: [703..704]
 r574: [701..702]
 r575: [699..700]
 r576: [697..698]
 r577: [695..696]
 r578: [689..692]
 r579: [689..690]
 r580: [687..688]
 r581: [685..686]
 r582: [679..682]
 r583: [679..680]
 r584: [677..678]
 r585: [675..676]
 r586: [669..672]
 r587: [669..670]
 r588: [667..668]
 r589: [665..666]
 r590: [659..662]
 r591: [659..660]
 r592: [657..658]
 r593: [651..652]
 r594: [647..648]
 r595: [643..644]
 r596: [641..642]
 r597: [637..638]
 r598: [633..634]
 r599: [655..656]
 r600: [631..632]
 r601: [629..630]
 r602: [627..628]
 r603: [625..626]
 r604: [623..624]
 r605: [621..622]
 r606: [619..620]
 r607: [617..618]
 r608: [615..616]
 r609: [613..614]
 r610: [611..612]
 r611: [609..610]
 r612: [607..608]
 r613: [605..606]
 r614: [603..604]
 r615: [601..602]
 r616: [599..600]
 r617: [597..598]
 r618: [595..596]
 r619: [474..475]
 r620: [468..469]
 r621: [444..445]
 r622: [440..441]
 r623: [436..437]
 r624: [430..433]
 r625: [430..431]
 r626: [426..427]
 r627: [416..417]
 r628: [412..413]
 r629: [406..407]
 r630: [394..395]
 r631: [390..391]
 r632: [382..385]
 r633: [382..383]
 r634: [378..379]
 r635: [374..375]
 r636: [364..365]
 r637: [356..359]
 r638: [356..357]
 r639: [336..339]
 r640: [336..337]
 r641: [332..333]
 r642: [328..329]
 r643: [324..325]
 r644: [318..319]
 r645: [314..315]
 r646: [306..309]
 r647: [306..307]
 r648: [286..289]
 r649: [286..287]
 r650: [266..269]
 r651: [266..267]
 r652: [260..261]
 r653: [256..257]
 r654: [252..253]
 r655: [248..249]
 r656: [242..243]
 r657: [236..239]
 r658: [236..237]
 r659: [216..219]
 r660: [216..217]
 r661: [204..205]
 r662: [200..201]
 r663: [196..197]
 r664: [190..193]
 r665: [190..191]
 r666: [178..179]
 r667: [168..171]
 r668: [168..169]
 r669: [162..163]
 r670: [158..159]
 r671: [148..149]
 r672: [142..145]
 r673: [142..143]
 r674: [136..137]
 r675: [128..129]
 r676: [124..125]
 r677: [116..119]
 r678: [116..117]
 r679: [110..111]
 r680: [106..107]
 r681: [100..101]
 r682: [96..97]
 r683: [90..91]
 r684: [564..565]
 r685: [558..559]
 r686: [556..557]
 r687: [552..553]
 r688: [548..549]
 r689: [546..547]
 r690: [542..543]
 r691: [538..539]
 r692: [536..537]
 r693: [534..535]
 r694: [530..531]
 r695: [526..527]
 r696: [524..525]
 r697: [522..523]
 r698: [518..519]
 r699: [514..515]
 r700: [512..513]
 r701: [510..511]
 r702: [506..507]
 r703: [502..503]
 r704: [500..501]
 r705: [498..499]
 r706: [494..495]
 r707: [490..491]
 r708: [488..489]
 r709: [486..487]
 r710: [482..483]
 r711: [478..479]
 r712: [70..73]
 r713: [70..71]
 r714: [66..69]
 r715: [66..67]
 r716: [62..63]
 r717: [58..59]
 r718: [54..55]
 r719: [50..53]
 r720: [50..51]
 r721: [48..49]
 r722: [44..45]
 r723: [40..41]
 r724: [36..37]
 r725: [30..35]
 r726: [30..31]
 r727: [32..33]
 r728: [26..29]
 r729: [26..27]
 r730: [20..21]
 r731: [16..17]
 r732: [14..15]
 r733: [10..13]
 r734: [10..11]
 r735: [4..5]
 r736: [0..1]
 r737: [661..664]
 r738: [671..674]
 r739: [681..684]
 r740: [691..694]
 r741: [733..734]
 r742: [741..742]
 r743: [749..750]
 r744: [757..758]
 r745: [765..766]
 r746: [773..774]
 r747: [781..782]
 r748: [789..790]
 r749: [797..798]
 r750: [805..806]
 r751: [813..814]
 r752: [821..822]
 r753: [829..830]
 r754: [837..838]
 r755: [575..596]
 r756: [98..99]
 r757: [108..109]
 r758: [126..137]
 r759: [160..161]
 r760: [202..203]
 r761: [250..251]
 r762: [258..259]
 r763: [316..333]
 r764: [366..379]
 r765: [130..391]
 r766: [392..393]
 r767: [414..427]
 r768: [138..435]
 r769: [180..441]
 r770: [442..443]
 r771: [48..87]

********** Assignment #1: **********

	 Assigning to 623 (cl=GENERAL_REGS, orig=148, freq=2823, tfirst=623, tfreq=4705)...
	   Assign 37 to reload r623 (freq=2823)
	Hard reg 37 is preferable by r768 with profit 941
	Hard reg 37 is preferable by r758 with profit 470
	Hard reg 37 is preferable by r674 with profit 235
	Hard reg 37 is preferable by r676 with profit 1176
	 Assigning to 674 (cl=GENERAL_REGS, orig=148, freq=1882, tfirst=623, tfreq=4705)...
	   Assign 37 to optional reload r674 (freq=1882)
	Hard reg 37 is preferable by r758 with profit 1411
	Hard reg 37 is preferable by r768 with profit 1411
	Hard reg 37 is preferable by r676 with profit 1646
	 Assigning to 676 (cl=GENERAL_REGS, orig=435, freq=2823, tfirst=623, tfreq=4705)...
	   Assign 37 to reload r676 (freq=2823)
	Hard reg 37 is preferable by r758 with profit 2352
	Hard reg 37 is preferable by r768 with profit 1881
	 Assigning to 758 (cl=GENERAL_REGS, orig=148, freq=2823, tfirst=623, tfreq=4705)...
	   Assign 37 to inheritance r758 (freq=2823)
	Hard reg 37 is preferable by r768 with profit 2822
	 Assigning to 768 (cl=GENERAL_REGS, orig=148, freq=1882, tfirst=623, tfreq=4705)...
	 Assigning to 626 (cl=GENERAL_REGS, orig=214, freq=1882, tfirst=626, tfreq=3764)...
	   Assign 2 to optional reload r626 (freq=1882)
	Hard reg 2 is preferable by r767 with profit 941
	Hard reg 40 is preferable by r628 with profit 941
	Hard reg 2 is preferable by r628 with profit 470
	 Assigning to 628 (cl=GENERAL_REGS, orig=387, freq=2823, tfirst=626, tfreq=3764)...
	   Assign 40 to reload r628 (freq=2823)
	Hard reg 2 is preferable by r767 with profit 941
	Hard reg 40 is preferable by r767 with profit 941
	 Assigning to 767 (cl=GENERAL_REGS, orig=214, freq=2823, tfirst=626, tfreq=3764)...
	   Assign 40 to inheritance r767 (freq=2823)
	 Assigning to 634 (cl=GENERAL_REGS, orig=230, freq=1882, tfirst=634, tfreq=3764)...
	   Assign 5 to optional reload r634 (freq=1882)
	Hard reg 5 is preferable by r764 with profit 941
	Hard reg 38 is preferable by r636 with profit 941
	Hard reg 5 is preferable by r636 with profit 470
	 Assigning to 636 (cl=GENERAL_REGS, orig=395, freq=2823, tfirst=634, tfreq=3764)...
	   Assign 38 to reload r636 (freq=2823)
	Hard reg 5 is preferable by r764 with profit 941
	Hard reg 38 is preferable by r764 with profit 941
	 Assigning to 764 (cl=GENERAL_REGS, orig=230, freq=2823, tfirst=634, tfreq=3764)...
	   Assign 5 to inheritance r764 (freq=2823)
	 Assigning to 641 (cl=GENERAL_REGS, orig=246, freq=1882, tfirst=641, tfreq=3764)...
	   Assign 5 to optional reload r641 (freq=1882)
	Hard reg 5 is preferable by r763 with profit 941
	Hard reg 37 is preferable by r645 with profit 941
	Hard reg 5 is preferable by r645 with profit 470
	 Assigning to 645 (cl=GENERAL_REGS, orig=403, freq=2823, tfirst=641, tfreq=3764)...
	   Assign 5 to reload r645 (freq=2823)
	Hard reg 5 is preferable by r763 with profit 1882
	 Assigning to 763 (cl=GENERAL_REGS, orig=246, freq=2823, tfirst=641, tfreq=3764)...
	   Assign 5 to inheritance r763 (freq=2823)
	 Assigning to 654 (cl=GENERAL_REGS, orig=210, freq=2823, tfirst=654, tfreq=3764)...
	   Assign 41 to reload r654 (freq=2823)
	Hard reg 41 is preferable by r761 with profit 941
	Hard reg 41 is preferable by r655 with profit 470
	 Assigning to 655 (cl=GENERAL_REGS, orig=210, freq=1882, tfirst=654, tfreq=3764)...
	   Assign 41 to optional reload r655 (freq=1882)
	Hard reg 41 is preferable by r761 with profit 1882
	 Assigning to 761 (cl=GENERAL_REGS, orig=210, freq=2823, tfirst=654, tfreq=3764)...
	   Assign 41 to inheritance r761 (freq=2823)
	 Assigning to 621 (cl=GENERAL_REGS, orig=146, freq=1882, tfirst=621, tfreq=2823)...
	   Assign 2 to reload r621 (freq=1882)
	Hard reg 2 is preferable by r770 with profit 941
	Hard reg 2 is preferable by r769 with profit 470
	Hard reg 2 is preferable by r622 with profit 235
	Hard reg 2 is preferable by r666 with profit 235
	 Assigning to 622 (cl=GENERAL_REGS, orig=146, freq=1882, tfirst=621, tfreq=2823)...
	   Assign 2 to optional reload r622 (freq=1882)
	Hard reg 2 is preferable by r769 with profit 1411
	Hard reg 2 is preferable by r770 with profit 1411
	Hard reg 2 is preferable by r666 with profit 705
	 Assigning to 666 (cl=GENERAL_REGS, orig=146, freq=1882, tfirst=621, tfreq=2823)...
	   Assign 0 to reload r666 (freq=1882)
	Hard reg 2 is preferable by r769 with profit 1411
	Hard reg 0 is preferable by r769 with profit 941
	Hard reg 2 is preferable by r770 with profit 1411
	Hard reg 0 is preferable by r770 with profit 470
	 Assigning to 769 (cl=GENERAL_REGS, orig=146, freq=2823, tfirst=621, tfreq=2823)...
	 Assigning to 770 (cl=GENERAL_REGS, orig=146, freq=1882, tfirst=621, tfreq=2823)...
	   Assign 2 to inheritance r770 (freq=1882)
	Hard reg 2 is preferable by r769 with profit 2352
	Hard reg 0 is preferable by r769 with profit 941
	 Assigning to 624 (cl=GENERAL_REGS, orig=384, freq=2823, tfirst=624, tfreq=2823)...
	   Assign 1 to reload r624 (freq=2823)
	 Assigning to 627 (cl=GENERAL_REGS, orig=154, freq=2823, tfirst=627, tfreq=2823)...
	   Assign 5 to reload r627 (freq=2823)
	 Assigning to 630 (cl=GENERAL_REGS, orig=162, freq=1882, tfirst=630, tfreq=2823)...
	   Assign 5 to reload r630 (freq=1882)
	Hard reg 5 is preferable by r766 with profit 941
	Hard reg 5 is preferable by r765 with profit 470
	Hard reg 5 is preferable by r631 with profit 235
	Hard reg 5 is preferable by r675 with profit 235
	 Assigning to 631 (cl=GENERAL_REGS, orig=162, freq=1882, tfirst=630, tfreq=2823)...
	   Assign 5 to optional reload r631 (freq=1882)
	Hard reg 5 is preferable by r765 with profit 1411
	Hard reg 5 is preferable by r766 with profit 1411
	Hard reg 5 is preferable by r675 with profit 705
	 Assigning to 675 (cl=GENERAL_REGS, orig=162, freq=1882, tfirst=630, tfreq=2823)...
	   Assign 0 to reload r675 (freq=1882)
	Hard reg 5 is preferable by r765 with profit 1411
	Hard reg 0 is preferable by r765 with profit 941
	Hard reg 5 is preferable by r766 with profit 1411
	Hard reg 0 is preferable by r766 with profit 470
	 Assigning to 765 (cl=GENERAL_REGS, orig=162, freq=2823, tfirst=630, tfreq=2823)...
	 Assigning to 766 (cl=GENERAL_REGS, orig=162, freq=1882, tfirst=630, tfreq=2823)...
	   Assign 5 to inheritance r766 (freq=1882)
	Hard reg 5 is preferable by r765 with profit 2352
	Hard reg 0 is preferable by r765 with profit 941
	 Assigning to 632 (cl=GENERAL_REGS, orig=392, freq=2823, tfirst=632, tfreq=2823)...
	   Assign 1 to reload r632 (freq=2823)
	 Assigning to 637 (cl=GENERAL_REGS, orig=396, freq=2823, tfirst=637, tfreq=2823)...
	   Assign 43 to reload r637 (freq=2823)
	 Assigning to 639 (cl=GENERAL_REGS, orig=400, freq=2823, tfirst=639, tfreq=2823)...
	   Assign 1 to reload r639 (freq=2823)
	 Assigning to 643 (cl=GENERAL_REGS, orig=402, freq=2823, tfirst=643, tfreq=2823)...
	   Assign 41 to reload r643 (freq=2823)
	 Assigning to 644 (cl=GENERAL_REGS, orig=186, freq=2823, tfirst=644, tfreq=2823)...
	   Assign 43 to reload r644 (freq=2823)
	 Assigning to 646 (cl=GENERAL_REGS, orig=404, freq=2823, tfirst=646, tfreq=2823)...
	   Assign 5 to reload r646 (freq=2823)
	 Assigning to 648 (cl=GENERAL_REGS, orig=408, freq=2823, tfirst=648, tfreq=2823)...
	   Assign 5 to reload r648 (freq=2823)
	 Assigning to 650 (cl=GENERAL_REGS, orig=412, freq=2823, tfirst=650, tfreq=2823)...
	   Assign 5 to reload r650 (freq=2823)
	 Assigning to 652 (cl=GENERAL_REGS, orig=208, freq=1882, tfirst=652, tfreq=2823)...
	   Assign 39 to reload r652 (freq=1882)
	Hard reg 39 is preferable by r762 with profit 941
	Hard reg 39 is preferable by r653 with profit 470
	 Assigning to 653 (cl=GENERAL_REGS, orig=208, freq=1882, tfirst=652, tfreq=2823)...
	   Assign 39 to optional reload r653 (freq=1882)
	Hard reg 39 is preferable by r762 with profit 1882
	 Assigning to 762 (cl=GENERAL_REGS, orig=208, freq=2823, tfirst=652, tfreq=2823)...
	   Assign 39 to inheritance r762 (freq=2823)
	 Assigning to 656 (cl=GENERAL_REGS, orig=214, freq=2823, tfirst=656, tfreq=2823)...
	   Assign 40 to reload r656 (freq=2823)
	 Assigning to 657 (cl=GENERAL_REGS, orig=416, freq=2823, tfirst=657, tfreq=2823)...
	   Assign 39 to reload r657 (freq=2823)
	 Assigning to 659 (cl=GENERAL_REGS, orig=420, freq=2823, tfirst=659, tfreq=2823)...
	   Assign 39 to reload r659 (freq=2823)
	 Assigning to 661 (cl=GENERAL_REGS, orig=197, freq=1882, tfirst=661, tfreq=2823)...
	   Assign 43 to reload r661 (freq=1882)
	Hard reg 43 is preferable by r760 with profit 941
	Hard reg 43 is preferable by r662 with profit 470
	 Assigning to 662 (cl=GENERAL_REGS, orig=197, freq=1882, tfirst=661, tfreq=2823)...
	   Assign 43 to optional reload r662 (freq=1882)
	Hard reg 43 is preferable by r760 with profit 1882
	 Assigning to 760 (cl=GENERAL_REGS, orig=197, freq=2823, tfirst=661, tfreq=2823)...
	   Assign 43 to inheritance r760 (freq=2823)
	 Assigning to 663 (cl=GENERAL_REGS, orig=230, freq=2823, tfirst=663, tfreq=2823)...
	   Assign 38 to reload r663 (freq=2823)
	 Assigning to 664 (cl=GENERAL_REGS, orig=424, freq=2823, tfirst=664, tfreq=2823)...
	   Assign 38 to reload r664 (freq=2823)
	 Assigning to 667 (cl=GENERAL_REGS, orig=428, freq=2823, tfirst=667, tfreq=2823)...
	   Assign 0 to reload r667 (freq=2823)
	 Assigning to 669 (cl=GENERAL_REGS, orig=241, freq=1882, tfirst=669, tfreq=2823)...
	   Assign 2 to reload r669 (freq=1882)
	Hard reg 2 is preferable by r759 with profit 941
	Hard reg 2 is preferable by r670 with profit 470
	 Assigning to 670 (cl=GENERAL_REGS, orig=241, freq=1882, tfirst=669, tfreq=2823)...
	   Assign 2 to optional reload r670 (freq=1882)
	Hard reg 2 is preferable by r759 with profit 1882
	 Assigning to 759 (cl=GENERAL_REGS, orig=241, freq=2823, tfirst=669, tfreq=2823)...
	   Assign 2 to inheritance r759 (freq=2823)
	 Assigning to 671 (cl=GENERAL_REGS, orig=246, freq=2823, tfirst=671, tfreq=2823)...
	   Assign 2 to reload r671 (freq=2823)
	 Assigning to 672 (cl=GENERAL_REGS, orig=432, freq=2823, tfirst=672, tfreq=2823)...
	   Assign 0 to reload r672 (freq=2823)
	 Assigning to 677 (cl=GENERAL_REGS, orig=436, freq=2823, tfirst=677, tfreq=2823)...
	   Assign 2 to reload r677 (freq=2823)
	 Assigning to 679 (cl=GENERAL_REGS, orig=258, freq=1882, tfirst=679, tfreq=2823)...
	   Assign 1 to reload r679 (freq=1882)
	Hard reg 1 is preferable by r757 with profit 941
	Hard reg 1 is preferable by r680 with profit 470
	 Assigning to 680 (cl=GENERAL_REGS, orig=258, freq=1882, tfirst=679, tfreq=2823)...
	   Assign 1 to optional reload r680 (freq=1882)
	Hard reg 1 is preferable by r757 with profit 1882
	 Assigning to 757 (cl=GENERAL_REGS, orig=258, freq=2823, tfirst=679, tfreq=2823)...
	   Assign 1 to inheritance r757 (freq=2823)
	 Assigning to 681 (cl=GENERAL_REGS, orig=262, freq=1882, tfirst=681, tfreq=2823)...
	   Assign 0 to reload r681 (freq=1882)
	Hard reg 0 is preferable by r756 with profit 941
	Hard reg 0 is preferable by r682 with profit 470
	 Assigning to 682 (cl=GENERAL_REGS, orig=262, freq=1882, tfirst=681, tfreq=2823)...
	   Assign 0 to optional reload r682 (freq=1882)
	Hard reg 0 is preferable by r756 with profit 1882
	 Assigning to 756 (cl=GENERAL_REGS, orig=262, freq=2823, tfirst=681, tfreq=2823)...
	   Assign 0 to inheritance r756 (freq=2823)
	 Assigning to 683 (cl=GENERAL_REGS, orig=100, freq=2823, tfirst=683, tfreq=2823)...
	   Assign 0 to optional reload r683 (freq=2823)
	 Assigning to 619 (cl=GENERAL_REGS, orig=290, freq=1882, tfirst=619, tfreq=1882)...
	   Assign 2 to optional reload r619 (freq=1882)
	 Assigning to 620 (cl=GENERAL_REGS, orig=208, freq=1882, tfirst=620, tfreq=1882)...
	   Assign 2 to optional reload r620 (freq=1882)
	 Assigning to 625 (cl=GENERAL_REGS, orig=298, freq=1882, tfirst=625, tfreq=1882)...
	   Assign 40 to optional reload r625 (freq=1882)
	 Assigning to 629 (cl=GENERAL_REGS, orig=299, freq=1882, tfirst=629, tfreq=1882)...
	   Assign 5 to optional reload r629 (freq=1882)
	 Assigning to 633 (cl=GENERAL_REGS, orig=306, freq=1882, tfirst=633, tfreq=1882)...
	   Assign 38 to optional reload r633 (freq=1882)
	 Assigning to 635 (cl=GENERAL_REGS, orig=241, freq=1882, tfirst=635, tfreq=1882)...
	   Assign 38 to optional reload r635 (freq=1882)
	 Assigning to 638 (cl=GENERAL_REGS, orig=308, freq=1882, tfirst=638, tfreq=1882)...
	   Assign 41 to optional reload r638 (freq=1882)
	 Assigning to 640 (cl=GENERAL_REGS, orig=314, freq=1882, tfirst=640, tfreq=1882)...
	   Assign 43 to optional reload r640 (freq=1882)
	 Assigning to 642 (cl=GENERAL_REGS, orig=258, freq=1882, tfirst=642, tfreq=1882)...
	   Assign 43 to optional reload r642 (freq=1882)
	 Assigning to 647 (cl=GENERAL_REGS, orig=316, freq=1882, tfirst=647, tfreq=1882)...
	 Assigning to 649 (cl=GENERAL_REGS, orig=322, freq=1882, tfirst=649, tfreq=1882)...
	 Assigning to 651 (cl=GENERAL_REGS, orig=324, freq=1882, tfirst=651, tfreq=1882)...
	 Assigning to 658 (cl=GENERAL_REGS, orig=330, freq=1882, tfirst=658, tfreq=1882)...
	   Assign 40 to optional reload r658 (freq=1882)
	 Assigning to 660 (cl=GENERAL_REGS, orig=332, freq=1882, tfirst=660, tfreq=1882)...
	   Assign 40 to optional reload r660 (freq=1882)
	 Assigning to 665 (cl=GENERAL_REGS, orig=338, freq=1882, tfirst=665, tfreq=1882)...
	   Assign 39 to optional reload r665 (freq=1882)
	 Assigning to 668 (cl=GENERAL_REGS, orig=340, freq=1882, tfirst=668, tfreq=1882)...
	   Assign 39 to optional reload r668 (freq=1882)
	 Assigning to 673 (cl=GENERAL_REGS, orig=346, freq=1882, tfirst=673, tfreq=1882)...
	   Assign 2 to optional reload r673 (freq=1882)
	 Assigning to 678 (cl=GENERAL_REGS, orig=348, freq=1882, tfirst=678, tfreq=1882)...
	   Assign 39 to optional reload r678 (freq=1882)
	 Assigning to 684 (cl=GENERAL_REGS, orig=290, freq=1770, tfirst=684, tfreq=1770)...
	   Assign 39 to reload r684 (freq=1770)
	 Assigning to 685 (cl=GENERAL_REGS, orig=295, freq=1770, tfirst=685, tfreq=1770)...
	   Assign 43 to reload r685 (freq=1770)
	 Assigning to 686 (cl=GENERAL_REGS, orig=298, freq=1770, tfirst=686, tfreq=1770)...
	   Assign 43 to reload r686 (freq=1770)
	 Assigning to 687 (cl=GENERAL_REGS, orig=299, freq=1770, tfirst=687, tfreq=1770)...
	   Assign 43 to reload r687 (freq=1770)
	 Assigning to 688 (cl=GENERAL_REGS, orig=303, freq=1770, tfirst=688, tfreq=1770)...
	   Assign 43 to reload r688 (freq=1770)
	 Assigning to 689 (cl=GENERAL_REGS, orig=306, freq=1770, tfirst=689, tfreq=1770)...
	 Trying 0: spill 529(freq=1885) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)	 Now best 0(cost=-8735, bad_spills=0, insn_pseudos=0)

	 Trying 1: spill 527(freq=1885) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)
	 Trying 2: spill 441(freq=15045) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)
	 Trying 37: spill 524(freq=2940) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)
	 Trying 38: spill 521(freq=2940) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)
	 Trying 39: spill 528(freq=1885) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)
	 Trying 40: spill 526(freq=1885) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)
	 Trying 3: spill 523(freq=2940) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)
	 Trying 4: spill 525(freq=15160) assign 768(cost=-1882) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)
	 Trying 5: spill 518(freq=2940) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)
	 Trying 6: spill 519(freq=2940) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)
	 Trying 41: spill 452(freq=2655)
	 Trying 42: spill 520(freq=2940) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)
	 Trying 43: spill 454(freq=2655)
	 Trying 44: spill 517(freq=2940) assign 693(cost=-1770) assign 697(cost=-1770) assign 701(cost=-1770) assign 705(cost=-1770) assign 709(cost=-1770)
      Spill r529(hr=0, freq=1885) for r689
	   Assign 0 to reload r689 (freq=1770)
	 Assigning to 690 (cl=GENERAL_REGS, orig=307, freq=1770, tfirst=690, tfreq=1770)...
	   Assign 0 to reload r690 (freq=1770)
	 Assigning to 691 (cl=GENERAL_REGS, orig=308, freq=1770, tfirst=691, tfreq=1770)...
	   Assign 0 to reload r691 (freq=1770)
	 Assigning to 692 (cl=GENERAL_REGS, orig=311, freq=1770, tfirst=692, tfreq=1770)...
	   Assign 0 to reload r692 (freq=1770)
	 Assigning to 693 (cl=GENERAL_REGS, orig=314, freq=1770, tfirst=693, tfreq=1770)...
	   Assign 0 to reload r693 (freq=1770)
	 Assigning to 694 (cl=GENERAL_REGS, orig=315, freq=1770, tfirst=694, tfreq=1770)...
	   Assign 0 to reload r694 (freq=1770)
	 Assigning to 695 (cl=GENERAL_REGS, orig=316, freq=1770, tfirst=695, tfreq=1770)...
	   Assign 0 to reload r695 (freq=1770)
	 Assigning to 696 (cl=GENERAL_REGS, orig=319, freq=1770, tfirst=696, tfreq=1770)...
	   Assign 0 to reload r696 (freq=1770)
	 Assigning to 697 (cl=GENERAL_REGS, orig=322, freq=1770, tfirst=697, tfreq=1770)...
	   Assign 0 to reload r697 (freq=1770)
	 Assigning to 698 (cl=GENERAL_REGS, orig=323, freq=1770, tfirst=698, tfreq=1770)...
	   Assign 0 to reload r698 (freq=1770)
	 Assigning to 699 (cl=GENERAL_REGS, orig=324, freq=1770, tfirst=699, tfreq=1770)...
	   Assign 0 to reload r699 (freq=1770)
	 Assigning to 700 (cl=GENERAL_REGS, orig=327, freq=1770, tfirst=700, tfreq=1770)...
	   Assign 0 to reload r700 (freq=1770)
	 Assigning to 701 (cl=GENERAL_REGS, orig=330, freq=1770, tfirst=701, tfreq=1770)...
	   Assign 0 to reload r701 (freq=1770)
	 Assigning to 702 (cl=GENERAL_REGS, orig=331, freq=1770, tfirst=702, tfreq=1770)...
	   Assign 0 to reload r702 (freq=1770)
	 Assigning to 703 (cl=GENERAL_REGS, orig=332, freq=1770, tfirst=703, tfreq=1770)...
	   Assign 0 to reload r703 (freq=1770)
	 Assigning to 704 (cl=GENERAL_REGS, orig=335, freq=1770, tfirst=704, tfreq=1770)...
	   Assign 0 to reload r704 (freq=1770)
	 Assigning to 705 (cl=GENERAL_REGS, orig=338, freq=1770, tfirst=705, tfreq=1770)...
	   Assign 0 to reload r705 (freq=1770)
	 Assigning to 706 (cl=GENERAL_REGS, orig=339, freq=1770, tfirst=706, tfreq=1770)...
	   Assign 0 to reload r706 (freq=1770)
	 Assigning to 707 (cl=GENERAL_REGS, orig=340, freq=1770, tfirst=707, tfreq=1770)...
	   Assign 0 to reload r707 (freq=1770)
	 Assigning to 708 (cl=GENERAL_REGS, orig=343, freq=1770, tfirst=708, tfreq=1770)...
	   Assign 0 to reload r708 (freq=1770)
	 Assigning to 709 (cl=GENERAL_REGS, orig=346, freq=1770, tfirst=709, tfreq=1770)...
	   Assign 0 to reload r709 (freq=1770)
	 Assigning to 710 (cl=GENERAL_REGS, orig=347, freq=1770, tfirst=710, tfreq=1770)...
	   Assign 0 to reload r710 (freq=1770)
	 Assigning to 711 (cl=GENERAL_REGS, orig=348, freq=1770, tfirst=711, tfreq=1770)...
	   Assign 0 to reload r711 (freq=1770)
	 Assigning to 532 (cl=GENERAL_REGS, orig=295, freq=174, tfirst=532, tfreq=232)...
	   Assign 38 to reload r532 (freq=174)
	Hard reg 38 is preferable by r754 with profit 58
	Hard reg 38 is preferable by r533 with profit 29
	 Assigning to 533 (cl=GENERAL_REGS, orig=295, freq=116, tfirst=532, tfreq=232)...
	   Assign 38 to reload r533 (freq=116)
	Hard reg 38 is preferable by r754 with profit 116
	 Assigning to 754 (cl=GENERAL_REGS, orig=295, freq=174, tfirst=532, tfreq=232)...
	   Assign 38 to inheritance r754 (freq=174)
	 Assigning to 534 (cl=GENERAL_REGS, orig=299, freq=174, tfirst=534, tfreq=232)...
	   Assign 0 to reload r534 (freq=174)
	Hard reg 0 is preferable by r753 with profit 58
	Hard reg 0 is preferable by r535 with profit 29
	 Assigning to 535 (cl=GENERAL_REGS, orig=299, freq=116, tfirst=534, tfreq=232)...
	   Assign 0 to reload r535 (freq=116)
	Hard reg 0 is preferable by r753 with profit 116
	 Assigning to 753 (cl=GENERAL_REGS, orig=299, freq=174, tfirst=534, tfreq=232)...
	   Assign 0 to inheritance r753 (freq=174)
	 Assigning to 536 (cl=GENERAL_REGS, orig=303, freq=174, tfirst=536, tfreq=232)...
	   Assign 0 to reload r536 (freq=174)
	Hard reg 0 is preferable by r752 with profit 58
	Hard reg 0 is preferable by r537 with profit 29
	 Assigning to 537 (cl=GENERAL_REGS, orig=303, freq=116, tfirst=536, tfreq=232)...
	   Assign 0 to reload r537 (freq=116)
	Hard reg 0 is preferable by r752 with profit 116
	 Assigning to 752 (cl=GENERAL_REGS, orig=303, freq=174, tfirst=536, tfreq=232)...
	   Assign 0 to inheritance r752 (freq=174)
	 Assigning to 538 (cl=GENERAL_REGS, orig=307, freq=174, tfirst=538, tfreq=232)...
	   Assign 0 to reload r538 (freq=174)
	Hard reg 0 is preferable by r751 with profit 58
	Hard reg 0 is preferable by r539 with profit 29
	 Assigning to 539 (cl=GENERAL_REGS, orig=307, freq=116, tfirst=538, tfreq=232)...
	   Assign 0 to reload r539 (freq=116)
	Hard reg 0 is preferable by r751 with profit 116
	 Assigning to 751 (cl=GENERAL_REGS, orig=307, freq=174, tfirst=538, tfreq=232)...
	   Assign 0 to inheritance r751 (freq=174)
	 Assigning to 540 (cl=GENERAL_REGS, orig=311, freq=174, tfirst=540, tfreq=232)...
	   Assign 3 to reload r540 (freq=174)
	Hard reg 3 is preferable by r750 with profit 58
	Hard reg 3 is preferable by r541 with profit 29
	 Assigning to 541 (cl=GENERAL_REGS, orig=311, freq=116, tfirst=540, tfreq=232)...
	   Assign 3 to reload r541 (freq=116)
	Hard reg 3 is preferable by r750 with profit 116
	 Assigning to 750 (cl=GENERAL_REGS, orig=311, freq=174, tfirst=540, tfreq=232)...
	   Assign 3 to inheritance r750 (freq=174)
	 Assigning to 542 (cl=GENERAL_REGS, orig=315, freq=174, tfirst=542, tfreq=232)...
	   Assign 3 to reload r542 (freq=174)
	Hard reg 3 is preferable by r749 with profit 58
	Hard reg 3 is preferable by r543 with profit 29
	 Assigning to 543 (cl=GENERAL_REGS, orig=315, freq=116, tfirst=542, tfreq=232)...
	   Assign 3 to reload r543 (freq=116)
	Hard reg 3 is preferable by r749 with profit 116
	 Assigning to 749 (cl=GENERAL_REGS, orig=315, freq=174, tfirst=542, tfreq=232)...
	   Assign 3 to inheritance r749 (freq=174)
	 Assigning to 544 (cl=GENERAL_REGS, orig=319, freq=174, tfirst=544, tfreq=232)...
	   Assign 0 to reload r544 (freq=174)
	Hard reg 0 is preferable by r748 with profit 58
	Hard reg 0 is preferable by r545 with profit 29
	 Assigning to 545 (cl=GENERAL_REGS, orig=319, freq=116, tfirst=544, tfreq=232)...
	   Assign 0 to reload r545 (freq=116)
	Hard reg 0 is preferable by r748 with profit 116
	 Assigning to 748 (cl=GENERAL_REGS, orig=319, freq=174, tfirst=544, tfreq=232)...
	   Assign 0 to inheritance r748 (freq=174)
	 Assigning to 546 (cl=GENERAL_REGS, orig=323, freq=174, tfirst=546, tfreq=232)...
	   Assign 0 to reload r546 (freq=174)
	Hard reg 0 is preferable by r747 with profit 58
	Hard reg 0 is preferable by r547 with profit 29
	 Assigning to 547 (cl=GENERAL_REGS, orig=323, freq=116, tfirst=546, tfreq=232)...
	   Assign 0 to reload r547 (freq=116)
	Hard reg 0 is preferable by r747 with profit 116
	 Assigning to 747 (cl=GENERAL_REGS, orig=323, freq=174, tfirst=546, tfreq=232)...
	   Assign 0 to inheritance r747 (freq=174)
	 Assigning to 548 (cl=GENERAL_REGS, orig=327, freq=174, tfirst=548, tfreq=232)...
	   Assign 43 to reload r548 (freq=174)
	Hard reg 43 is preferable by r746 with profit 58
	Hard reg 43 is preferable by r549 with profit 29
	 Assigning to 549 (cl=GENERAL_REGS, orig=327, freq=116, tfirst=548, tfreq=232)...
	   Assign 43 to reload r549 (freq=116)
	Hard reg 43 is preferable by r746 with profit 116
	 Assigning to 746 (cl=GENERAL_REGS, orig=327, freq=174, tfirst=548, tfreq=232)...
	   Assign 43 to inheritance r746 (freq=174)
	 Assigning to 550 (cl=GENERAL_REGS, orig=331, freq=174, tfirst=550, tfreq=232)...
	   Assign 43 to reload r550 (freq=174)
	Hard reg 43 is preferable by r745 with profit 58
	Hard reg 43 is preferable by r551 with profit 29
	 Assigning to 551 (cl=GENERAL_REGS, orig=331, freq=116, tfirst=550, tfreq=232)...
	   Assign 43 to reload r551 (freq=116)
	Hard reg 43 is preferable by r745 with profit 116
	 Assigning to 745 (cl=GENERAL_REGS, orig=331, freq=174, tfirst=550, tfreq=232)...
	   Assign 43 to inheritance r745 (freq=174)
	 Assigning to 552 (cl=GENERAL_REGS, orig=335, freq=174, tfirst=552, tfreq=232)...
	   Assign 0 to reload r552 (freq=174)
	Hard reg 0 is preferable by r744 with profit 58
	Hard reg 0 is preferable by r553 with profit 29
	 Assigning to 553 (cl=GENERAL_REGS, orig=335, freq=116, tfirst=552, tfreq=232)...
	   Assign 0 to reload r553 (freq=116)
	Hard reg 0 is preferable by r744 with profit 116
	 Assigning to 744 (cl=GENERAL_REGS, orig=335, freq=174, tfirst=552, tfreq=232)...
	   Assign 0 to inheritance r744 (freq=174)
	 Assigning to 554 (cl=GENERAL_REGS, orig=339, freq=174, tfirst=554, tfreq=232)...
	   Assign 0 to reload r554 (freq=174)
	Hard reg 0 is preferable by r743 with profit 58
	Hard reg 0 is preferable by r555 with profit 29
	 Assigning to 555 (cl=GENERAL_REGS, orig=339, freq=116, tfirst=554, tfreq=232)...
	   Assign 0 to reload r555 (freq=116)
	Hard reg 0 is preferable by r743 with profit 116
	 Assigning to 743 (cl=GENERAL_REGS, orig=339, freq=174, tfirst=554, tfreq=232)...
	   Assign 0 to inheritance r743 (freq=174)
	 Assigning to 556 (cl=GENERAL_REGS, orig=343, freq=174, tfirst=556, tfreq=232)...
	   Assign 44 to reload r556 (freq=174)
	Hard reg 44 is preferable by r742 with profit 58
	Hard reg 44 is preferable by r557 with profit 29
	 Assigning to 557 (cl=GENERAL_REGS, orig=343, freq=116, tfirst=556, tfreq=232)...
	   Assign 44 to reload r557 (freq=116)
	Hard reg 44 is preferable by r742 with profit 116
	 Assigning to 742 (cl=GENERAL_REGS, orig=343, freq=174, tfirst=556, tfreq=232)...
	   Assign 44 to inheritance r742 (freq=174)
	 Assigning to 558 (cl=GENERAL_REGS, orig=347, freq=174, tfirst=558, tfreq=232)...
	   Assign 44 to reload r558 (freq=174)
	Hard reg 44 is preferable by r741 with profit 58
	Hard reg 44 is preferable by r559 with profit 29
	 Assigning to 559 (cl=GENERAL_REGS, orig=347, freq=116, tfirst=558, tfreq=232)...
	   Assign 44 to reload r559 (freq=116)
	Hard reg 44 is preferable by r741 with profit 116
	 Assigning to 741 (cl=GENERAL_REGS, orig=347, freq=174, tfirst=558, tfreq=232)...
	   Assign 44 to inheritance r741 (freq=174)
	 Assigning to 531 (cl=GENERAL_REGS, orig=291, freq=174, tfirst=531, tfreq=174)...
	   Assign 5 to reload r531 (freq=174)
	 Assigning to 577 (cl=GENERAL_REGS, orig=127, freq=116, tfirst=577, tfreq=174)...
	   Assign 0 to reload r577 (freq=116)
	Hard reg 0 is preferable by r740 with profit 58
	Hard reg 0 is preferable by r579 with profit 29
	 Assigning to 579 (cl=GENERAL_REGS, orig=127, freq=116, tfirst=577, tfreq=174)...
	   Assign 0 to optional reload r579 (freq=116)
	Hard reg 0 is preferable by r740 with profit 116
	 Assigning to 740 (cl=GENERAL_REGS, orig=127, freq=174, tfirst=577, tfreq=174)...
	   Assign 0 to inheritance r740 (freq=174)
	 Assigning to 578 (cl=GENERAL_REGS, orig=244, freq=174, tfirst=578, tfreq=174)...
	   Assign 38 to reload r578 (freq=174)
	 Assigning to 581 (cl=GENERAL_REGS, orig=128, freq=116, tfirst=581, tfreq=174)...
	   Assign 0 to reload r581 (freq=116)
	Hard reg 0 is preferable by r739 with profit 58
	Hard reg 0 is preferable by r583 with profit 29
	 Assigning to 583 (cl=GENERAL_REGS, orig=128, freq=116, tfirst=581, tfreq=174)...
	   Assign 0 to optional reload r583 (freq=116)
	Hard reg 0 is preferable by r739 with profit 116
	 Assigning to 739 (cl=GENERAL_REGS, orig=128, freq=174, tfirst=581, tfreq=174)...
	   Assign 0 to inheritance r739 (freq=174)
	 Assigning to 582 (cl=GENERAL_REGS, orig=262, freq=174, tfirst=582, tfreq=174)...
	   Assign 4 to reload r582 (freq=174)
	 Assigning to 585 (cl=GENERAL_REGS, orig=129, freq=116, tfirst=585, tfreq=174)...
	   Assign 0 to reload r585 (freq=116)
	Hard reg 0 is preferable by r738 with profit 58
	Hard reg 0 is preferable by r587 with profit 29
	 Assigning to 587 (cl=GENERAL_REGS, orig=129, freq=116, tfirst=585, tfreq=174)...
	   Assign 0 to optional reload r587 (freq=116)
	Hard reg 0 is preferable by r738 with profit 116
	 Assigning to 738 (cl=GENERAL_REGS, orig=129, freq=174, tfirst=585, tfreq=174)...
	   Assign 0 to inheritance r738 (freq=174)
	 Assigning to 586 (cl=GENERAL_REGS, orig=211, freq=174, tfirst=586, tfreq=174)...
	   Assign 43 to reload r586 (freq=174)
	 Assigning to 589 (cl=GENERAL_REGS, orig=130, freq=116, tfirst=589, tfreq=174)...
	   Assign 0 to reload r589 (freq=116)
	Hard reg 0 is preferable by r737 with profit 58
	Hard reg 0 is preferable by r591 with profit 29
	 Assigning to 591 (cl=GENERAL_REGS, orig=130, freq=116, tfirst=589, tfreq=174)...
	   Assign 4 to optional reload r591 (freq=116)
	Hard reg 0 is preferable by r737 with profit 58
	Hard reg 4 is preferable by r737 with profit 58
	 Assigning to 737 (cl=GENERAL_REGS, orig=130, freq=174, tfirst=589, tfreq=174)...
	   Assign 4 to inheritance r737 (freq=174)
	 Assigning to 590 (cl=GENERAL_REGS, orig=197, freq=174, tfirst=590, tfreq=174)...
	   Assign 0 to reload r590 (freq=174)
	 Assigning to 600 (cl=GENERAL_REGS, orig=119, freq=118, tfirst=600, tfreq=118)...
	   Assign 0 to reload r600 (freq=118)
	 Assigning to 601 (cl=GENERAL_REGS, orig=121, freq=118, tfirst=601, tfreq=118)...
	   Assign 0 to reload r601 (freq=118)
	 Assigning to 602 (cl=GENERAL_REGS, orig=124, freq=118, tfirst=602, tfreq=118)...
	   Assign 0 to reload r602 (freq=118)
	 Assigning to 603 (cl=GENERAL_REGS, orig=125, freq=118, tfirst=603, tfreq=118)...
	   Assign 0 to reload r603 (freq=118)
	 Assigning to 604 (cl=GENERAL_REGS, orig=126, freq=118, tfirst=604, tfreq=118)...
	   Assign 0 to reload r604 (freq=118)
	 Assigning to 605 (cl=GENERAL_REGS, orig=348, freq=118, tfirst=605, tfreq=118)...
	   Assign 0 to reload r605 (freq=118)
	 Assigning to 606 (cl=GENERAL_REGS, orig=346, freq=118, tfirst=606, tfreq=118)...
	   Assign 0 to reload r606 (freq=118)
	 Assigning to 607 (cl=GENERAL_REGS, orig=340, freq=118, tfirst=607, tfreq=118)...
	   Assign 0 to reload r607 (freq=118)
	 Assigning to 608 (cl=GENERAL_REGS, orig=338, freq=118, tfirst=608, tfreq=118)...
	   Assign 0 to reload r608 (freq=118)
	 Assigning to 609 (cl=GENERAL_REGS, orig=332, freq=118, tfirst=609, tfreq=118)...
	   Assign 0 to reload r609 (freq=118)
	 Assigning to 610 (cl=GENERAL_REGS, orig=330, freq=118, tfirst=610, tfreq=118)...
	   Assign 0 to reload r610 (freq=118)
	 Assigning to 611 (cl=GENERAL_REGS, orig=324, freq=118, tfirst=611, tfreq=118)...
	   Assign 0 to reload r611 (freq=118)
	 Assigning to 612 (cl=GENERAL_REGS, orig=322, freq=118, tfirst=612, tfreq=118)...
	   Assign 0 to reload r612 (freq=118)
	 Assigning to 613 (cl=GENERAL_REGS, orig=316, freq=118, tfirst=613, tfreq=118)...
	   Assign 0 to reload r613 (freq=118)
	 Assigning to 614 (cl=GENERAL_REGS, orig=314, freq=118, tfirst=614, tfreq=118)...
	   Assign 0 to reload r614 (freq=118)
	 Assigning to 615 (cl=GENERAL_REGS, orig=306, freq=118, tfirst=615, tfreq=118)...
	   Assign 0 to reload r615 (freq=118)
	 Assigning to 616 (cl=GENERAL_REGS, orig=298, freq=118, tfirst=616, tfreq=118)...
	   Assign 2 to reload r616 (freq=118)
	 Assigning to 617 (cl=GENERAL_REGS, orig=292, freq=118, tfirst=617, tfreq=118)...
	   Assign 2 to reload r617 (freq=118)
	Hard reg 39 is preferable by r755 with profit 59
	Hard reg 2 is preferable by r755 with profit 59
	 Assigning to 755 (cl=GENERAL_REGS, orig=292, freq=118, tfirst=617, tfreq=118)...
	   Assign 2 to inheritance r755 (freq=118)
	 Assigning to 618 (cl=GENERAL_REGS, orig=290, freq=118, tfirst=618, tfreq=118)...
	   Assign 39 to reload r618 (freq=118)
	 Assigning to 560 (cl=INDEX_REGS, orig=560, freq=116, tfirst=560, tfreq=116)...
	   Assign 0 to reload r560 (freq=116)
	 Assigning to 561 (cl=GENERAL_REGS, orig=119, freq=116, tfirst=561, tfreq=116)...
	   Assign 0 to reload r561 (freq=116)
	 Assigning to 562 (cl=INDEX_REGS, orig=562, freq=116, tfirst=562, tfreq=116)...
	   Assign 0 to reload r562 (freq=116)
	 Assigning to 563 (cl=GENERAL_REGS, orig=120, freq=116, tfirst=563, tfreq=116)...
	   Assign 0 to reload r563 (freq=116)
	 Assigning to 564 (cl=INDEX_REGS, orig=564, freq=116, tfirst=564, tfreq=116)...
	   Assign 0 to reload r564 (freq=116)
	 Assigning to 565 (cl=GENERAL_REGS, orig=121, freq=116, tfirst=565, tfreq=116)...
	   Assign 0 to reload r565 (freq=116)
	 Assigning to 566 (cl=INDEX_REGS, orig=566, freq=116, tfirst=566, tfreq=116)...
	   Assign 0 to reload r566 (freq=116)
	 Assigning to 567 (cl=GENERAL_REGS, orig=122, freq=116, tfirst=567, tfreq=116)...
	   Assign 0 to reload r567 (freq=116)
	 Assigning to 568 (cl=INDEX_REGS, orig=568, freq=116, tfirst=568, tfreq=116)...
	   Assign 0 to reload r568 (freq=116)
	 Assigning to 569 (cl=GENERAL_REGS, orig=123, freq=116, tfirst=569, tfreq=116)...
	   Assign 0 to reload r569 (freq=116)
	 Assigning to 570 (cl=INDEX_REGS, orig=570, freq=116, tfirst=570, tfreq=116)...
	   Assign 0 to reload r570 (freq=116)
	 Assigning to 571 (cl=GENERAL_REGS, orig=124, freq=116, tfirst=571, tfreq=116)...
	   Assign 0 to reload r571 (freq=116)
	 Assigning to 572 (cl=INDEX_REGS, orig=572, freq=116, tfirst=572, tfreq=116)...
	   Assign 0 to reload r572 (freq=116)
	 Assigning to 573 (cl=GENERAL_REGS, orig=125, freq=116, tfirst=573, tfreq=116)...
	   Assign 0 to reload r573 (freq=116)
	 Assigning to 574 (cl=INDEX_REGS, orig=574, freq=116, tfirst=574, tfreq=116)...
	   Assign 0 to reload r574 (freq=116)
	 Assigning to 575 (cl=GENERAL_REGS, orig=126, freq=116, tfirst=575, tfreq=116)...
	   Assign 0 to reload r575 (freq=116)
	 Assigning to 576 (cl=INDEX_REGS, orig=576, freq=116, tfirst=576, tfreq=116)...
	   Assign 0 to reload r576 (freq=116)
	 Assigning to 580 (cl=INDEX_REGS, orig=580, freq=116, tfirst=580, tfreq=116)...
	   Assign 0 to reload r580 (freq=116)
	 Assigning to 584 (cl=INDEX_REGS, orig=584, freq=116, tfirst=584, tfreq=116)...
	   Assign 0 to reload r584 (freq=116)
	 Assigning to 588 (cl=INDEX_REGS, orig=588, freq=116, tfirst=588, tfreq=116)...
	   Assign 0 to reload r588 (freq=116)
	 Assigning to 592 (cl=INDEX_REGS, orig=592, freq=116, tfirst=592, tfreq=116)...
	   Assign 0 to reload r592 (freq=116)
	 Assigning to 718 (cl=INDEX_REGS, orig=718, freq=116, tfirst=718, tfreq=116)...
	   Assign 0 to reload r718 (freq=116)
	 Assigning to 724 (cl=INDEX_REGS, orig=724, freq=116, tfirst=724, tfreq=116)...
	   Assign 0 to reload r724 (freq=116)
	 Assigning to 731 (cl=INDEX_REGS, orig=731, freq=116, tfirst=731, tfreq=116)...
	   Assign 0 to reload r731 (freq=116)
	 Assigning to 736 (cl=INDEX_REGS, orig=736, freq=116, tfirst=736, tfreq=116)...
	   Assign 0 to reload r736 (freq=116)
	 Assigning to 771 (cl=GENERAL_REGS, orig=211, freq=116, tfirst=771, tfreq=116)...
	   Assign 4 to inheritance r771 (freq=116)
	 Assigning to 594 (cl=GENERAL_REGS, orig=227, freq=87, tfirst=594, tfreq=87)...
	   Assign 39 to reload r594 (freq=87)
	 Assigning to 595 (cl=GENERAL_REGS, orig=243, freq=87, tfirst=595, tfreq=87)...
	   Assign 0 to reload r595 (freq=87)
	 Assigning to 597 (cl=GENERAL_REGS, orig=260, freq=87, tfirst=597, tfreq=87)...
	   Assign 3 to reload r597 (freq=87)
	 Assigning to 598 (cl=GENERAL_REGS, orig=210, freq=87, tfirst=598, tfreq=87)...
	   Assign 0 to reload r598 (freq=87)
	 Assigning to 593 (cl=INDEX_REGS, orig=593, freq=58, tfirst=593, tfreq=58)...
	   Assign 0 to reload r593 (freq=58)
	 Assigning to 596 (cl=INDEX_REGS, orig=596, freq=58, tfirst=596, tfreq=58)...
	   Assign 0 to reload r596 (freq=58)
	 Assigning to 599 (cl=GENERAL_REGS, orig=210, freq=58, tfirst=599, tfreq=58)...
	   Assign 0 to reload r599 (freq=58)
	 Assigning to 712 (cl=SSE_REGS, orig=488, freq=290, tfirst=712, tfreq=290)...
	   Assign 22 to reload r712 (freq=290)
	 Assigning to 714 (cl=SSE_REGS, orig=489, freq=290, tfirst=714, tfreq=290)...
	   Assign 21 to reload r714 (freq=290)
	 Assigning to 716 (cl=SSE_REGS, orig=491, freq=290, tfirst=716, tfreq=290)...
	   Assign 24 to reload r716 (freq=290)
	 Assigning to 717 (cl=SSE_REGS, orig=493, freq=290, tfirst=717, tfreq=290)...
	   Assign 22 to reload r717 (freq=290)
	 Assigning to 719 (cl=SSE_REGS, orig=495, freq=290, tfirst=719, tfreq=290)...
	   Assign 22 to reload r719 (freq=290)
	 Assigning to 721 (cl=SSE_REGS, orig=496, freq=290, tfirst=721, tfreq=290)...
	   Assign 21 to reload r721 (freq=290)
	 Assigning to 722 (cl=SSE_REGS, orig=498, freq=290, tfirst=722, tfreq=290)...
	   Assign 23 to reload r722 (freq=290)
	 Assigning to 723 (cl=SSE_REGS, orig=500, freq=290, tfirst=723, tfreq=290)...
	   Assign 22 to reload r723 (freq=290)
	 Assigning to 725 (cl=SSE_REGS, orig=502, freq=290, tfirst=725, tfreq=290)...
	   Assign 21 to reload r725 (freq=290)
	 Assigning to 728 (cl=SSE_REGS, orig=503, freq=290, tfirst=728, tfreq=290)...
	   Assign 22 to reload r728 (freq=290)
	 Assigning to 730 (cl=SSE_REGS, orig=507, freq=290, tfirst=730, tfreq=290)...
	   Assign 24 to reload r730 (freq=290)
	 Assigning to 732 (cl=SSE_REGS, orig=509, freq=290, tfirst=732, tfreq=290)...
	   Assign 21 to reload r732 (freq=290)
	 Assigning to 733 (cl=SSE_REGS, orig=510, freq=290, tfirst=733, tfreq=290)...
	   Assign 22 to reload r733 (freq=290)
	 Assigning to 735 (cl=SSE_REGS, orig=514, freq=290, tfirst=735, tfreq=290)...
	   Assign 23 to reload r735 (freq=290)
  Reassigning non-reload pseudos
	   Assign 41 to r211 (freq=117)

********** Undoing inheritance #1: **********

Inherit 32 out of 35 (91.43%)
   Insn after restoring regs:
  624: r675:DI=r162:DI
      REG_DEAD r162:DI
   Insn after restoring regs:
  738: r758:DI=r148:DI
      REG_DEAD r148:DI
   Insn after restoring regs:
  612: r666:DI=r146:DI
      REG_DEAD r146:DI
    Change reload insn:
  561: r631:DI=r766:DI
   Insn after restoring regs:
  745: r162:DI=r766:DI
      REG_DEAD r766:DI
   Insn after restoring regs:
  550: r148:DI=r623:DI
      REG_DEAD r623:DI
    Change reload insn:
  548: r622:DI=r770:DI
   Insn after restoring regs:
  749: r146:DI=r770:DI
      REG_DEAD r770:DI
Keep optional reload reg 579
Keep optional reload reg 583
Keep optional reload reg 587
Keep optional reload reg 591
Keep optional reload reg 622
Keep optional reload reg 626
Keep optional reload reg 631
Keep optional reload reg 634
Keep optional reload reg 641
Keep optional reload reg 653
Keep optional reload reg 655
Keep optional reload reg 662
Keep optional reload reg 670
Keep optional reload reg 674
Keep optional reload reg 680
Keep optional reload reg 682
Remove optional reload reg 619
  Restoring original insn:
  125: {r376:DI=r526:DI^r290:DI;clobber flags:CC;}
      REG_DEAD r290:DI
      REG_DEAD r526:DI
      REG_UNUSED flags:CC
  Deleting move 545
  545: r619:DI=r290:DI
      REG_DEAD r290:DI
deleting insn with uid = 545.
Remove optional reload reg 620
  Restoring original insn:
  127: {r135:DI=r377:DI+r208:DI;clobber flags:CC;}
      REG_DEAD r208:DI
      REG_DEAD r377:DI
      REG_UNUSED flags:CC
  Deleting move 546
  546: r620:DI=r208:DI
      REG_DEAD r208:DI
deleting insn with uid = 546.
Remove optional reload reg 625
  Restoring original insn:
  141: {r624:DI=r624:DI^r298:DI;clobber flags:CC;}
      REG_DEAD r298:DI
      REG_UNUSED flags:CC
  Deleting move 553
  553: r625:DI=r298:DI
      REG_DEAD r298:DI
deleting insn with uid = 553.
Remove optional reload reg 629
  Restoring original insn:
  149: {r388:DI=r529:DI^r299:DI;clobber flags:CC;}
      REG_DEAD r299:DI
      REG_DEAD r529:DI
      REG_UNUSED flags:CC
  Deleting move 559
  559: r629:DI=r299:DI
      REG_DEAD r299:DI
deleting insn with uid = 559.
Remove optional reload reg 633
  Restoring original insn:
  157: {r632:DI=r632:DI^r306:DI;clobber flags:CC;}
      REG_DEAD r306:DI
      REG_UNUSED flags:CC
  Deleting move 564
  564: r633:DI=r306:DI
      REG_DEAD r306:DI
deleting insn with uid = 564.
Remove optional reload reg 635
  Restoring original insn:
  159: {r167:DI=r393:DI+r241:DI;clobber flags:CC;}
      REG_DEAD r241:DI
      REG_DEAD r393:DI
      REG_UNUSED flags:CC
  Deleting move 566
  566: r635:DI=r241:DI
      REG_DEAD r241:DI
deleting insn with uid = 566.
Remove optional reload reg 638
  Restoring original insn:
  165: {r637:DI=r637:DI^r530:DI;clobber flags:CC;}
      REG_DEAD r530:DI
      REG_UNUSED flags:CC
  Deleting move 571
  571: r638:DI=r530:DI
      REG_DEAD r530:DI
deleting insn with uid = 571.
Remove optional reload reg 640
  Restoring original insn:
  173: {r639:DI=r639:DI^r314:DI;clobber flags:CC;}
      REG_DEAD r314:DI
      REG_UNUSED flags:CC
  Deleting move 574
  574: r640:DI=r314:DI
      REG_DEAD r314:DI
deleting insn with uid = 574.
Remove optional reload reg 642
  Restoring original insn:
  175: {r183:DI=r401:DI+r522:DI;clobber flags:CC;}
      REG_DEAD r522:DI
      REG_DEAD r401:DI
      REG_UNUSED flags:CC
  Deleting move 576
  576: r642:DI=r522:DI
      REG_DEAD r522:DI
deleting insn with uid = 576.
Remove optional reload reg 647
  Restoring original insn:
  181: {r646:DI=r646:DI^r316:DI;clobber flags:CC;}
      REG_DEAD r316:DI
      REG_UNUSED flags:CC
  Deleting move 585
  585: r647:DI=r316:DI
      REG_DEAD r316:DI
deleting insn with uid = 585.
Remove optional reload reg 649
  Restoring original insn:
  189: {r648:DI=r648:DI^r322:DI;clobber flags:CC;}
      REG_DEAD r322:DI
      REG_UNUSED flags:CC
  Deleting move 588
  588: r649:DI=r322:DI
      REG_DEAD r322:DI
deleting insn with uid = 588.
Remove optional reload reg 651
  Restoring original insn:
  197: {r650:DI=r650:DI^r324:DI;clobber flags:CC;}
      REG_DEAD r324:DI
      REG_UNUSED flags:CC
  Deleting move 591
  591: r651:DI=r324:DI
      REG_DEAD r324:DI
deleting insn with uid = 591.
Remove optional reload reg 658
  Restoring original insn:
  205: {r657:DI=r657:DI^r330:DI;clobber flags:CC;}
      REG_DEAD r330:DI
      REG_UNUSED flags:CC
  Deleting move 601
  601: r658:DI=r330:DI
      REG_DEAD r330:DI
deleting insn with uid = 601.
Remove optional reload reg 660
  Restoring original insn:
  213: {r659:DI=r659:DI^r332:DI;clobber flags:CC;}
      REG_DEAD r332:DI
      REG_UNUSED flags:CC
  Deleting move 604
  604: r660:DI=r332:DI
      REG_DEAD r332:DI
deleting insn with uid = 604.
Remove optional reload reg 665
  Restoring original insn:
  221: {r664:DI=r664:DI^r338:DI;clobber flags:CC;}
      REG_DEAD r338:DI
      REG_UNUSED flags:CC
  Deleting move 611
  611: r665:DI=r338:DI
      REG_DEAD r338:DI
deleting insn with uid = 611.
Remove optional reload reg 668
  Restoring original insn:
  229: {r667:DI=r667:DI^r340:DI;clobber flags:CC;}
      REG_DEAD r340:DI
      REG_UNUSED flags:CC
  Deleting move 615
  615: r668:DI=r340:DI
      REG_DEAD r340:DI
deleting insn with uid = 615.
Remove optional reload reg 673
  Restoring original insn:
  237: {r672:DI=r672:DI^r346:DI;clobber flags:CC;}
      REG_DEAD r346:DI
      REG_UNUSED flags:CC
  Deleting move 622
  622: r673:DI=r346:DI
      REG_DEAD r346:DI
deleting insn with uid = 622.
Remove optional reload reg 678
  Restoring original insn:
  245: {r677:DI=r677:DI^r348:DI;clobber flags:CC;}
      REG_DEAD r348:DI
      REG_UNUSED flags:CC
  Deleting move 629
  629: r678:DI=r348:DI
      REG_DEAD r348:DI
deleting insn with uid = 629.
Remove optional reload reg 683
  Restoring original insn:
  255: {flags:CCZ=cmp(r100:SI-0x1,0);r100:SI=r100:SI-0x1;}
  Deleting move 634
  634: r683:SI=r100:SI
      REG_DEAD r100:SI
deleting insn with uid = 634.
  Deleting move 635
  635: r100:SI=r683:SI
      REG_DEAD r683:SI
deleting insn with uid = 635.

********** Pseudo live ranges #4: **********

  BB 8
   Insn 401: point = 0
   Insn 400: point = 0
   Insn 395: point = 0
   Insn 716: point = 1
   Insn 394: point = 2
   Insn 715: point = 4
	Hard reg 23 is preferable by r735 with profit 58
   Insn 393: point = 6
   Insn 714: point = 8
   Insn 713: point = 9
   Insn 392: point = 10
   Insn 390: point = 12
   Insn 711: point = 14
	Hard reg 22 is preferable by r733 with profit 58
   Insn 389: point = 16
   Insn 712: point = 18
   Insn 710: point = 19
	Hard reg 3 is preferable by r734 with profit 58
   Insn 709: point = 21
   Insn 708: point = 22
	Hard reg 21 is preferable by r732 with profit 58
   Insn 388: point = 24
   Insn 707: point = 26
   Insn 706: point = 27
   Insn 386: point = 28
   Insn 705: point = 29
   Insn 385: point = 30
   Insn 704: point = 32
	Hard reg 24 is preferable by r730 with profit 58
   Insn 384: point = 34
   Insn 703: point = 36
   Insn 702: point = 37
   Insn 383: point = 38
   Insn 381: point = 40
   Insn 700: point = 42
	Hard reg 22 is preferable by r728 with profit 58
   Insn 380: point = 44
   Insn 701: point = 46
   Insn 699: point = 47
	Hard reg 37 is preferable by r729 with profit 58
   Insn 698: point = 49
   Insn 695: point = 50
	Hard reg 21 is preferable by r725 with profit 58
   Insn 379: point = 52
   Insn 696: point = 54
	Hard reg 42 is preferable by r726 with profit 58
   Insn 697: point = 56
   Insn 694: point = 57
	Hard reg 6 is preferable by r727 with profit 58
   Insn 693: point = 59
   Insn 377: point = 60
   Insn 692: point = 61
   Insn 376: point = 62
   Insn 691: point = 64
	Hard reg 22 is preferable by r723 with profit 58
   Insn 375: point = 66
   Insn 690: point = 68
   Insn 689: point = 69
   Insn 374: point = 70
   Insn 688: point = 72
	Hard reg 23 is preferable by r722 with profit 58
   Insn 373: point = 74
   Insn 687: point = 76
   Insn 686: point = 77
   Insn 372: point = 78
   Insn 685: point = 80
	Hard reg 21 is preferable by r721 with profit 58
   Insn 371: point = 82
   Insn 684: point = 84
   Insn 683: point = 85
   Insn 681: point = 86
	Hard reg 22 is preferable by r719 with profit 58
   Insn 370: point = 88
   Insn 682: point = 90
	Hard reg 44 is preferable by r720 with profit 58
   Insn 680: point = 92
   Insn 679: point = 93
   Insn 368: point = 94
   Insn 678: point = 95
   Insn 367: point = 96
   Insn 677: point = 98
	Hard reg 22 is preferable by r717 with profit 58
   Insn 366: point = 100
   Insn 676: point = 102
   Insn 675: point = 103
   Insn 365: point = 104
   Insn 674: point = 106
	Hard reg 24 is preferable by r716 with profit 58
   Insn 364: point = 108
   Insn 673: point = 110
   Insn 672: point = 111
   Insn 363: point = 112
   Insn 670: point = 114
	Hard reg 21 is preferable by r714 with profit 58
   Insn 362: point = 116
   Insn 671: point = 118
	Hard reg 43 is preferable by r715 with profit 58
   Insn 669: point = 120
   Insn 668: point = 121
   Insn 666: point = 122
	Hard reg 22 is preferable by r712 with profit 58
   Insn 361: point = 124
   Insn 667: point = 126
   Insn 665: point = 127
	Hard reg 38 is preferable by r713 with profit 58
   Insn 664: point = 129
   Insn 432: point = 130
   Insn 431: point = 132
   Insn 430: point = 134
   Insn 429: point = 136
   Insn 428: point = 138
   Insn 427: point = 140
   Insn 426: point = 142
   Insn 425: point = 144
	Hard reg 44 is preferable by r771 with profit 58
  BB 6
   Insn 256: point = 147
   Insn 255: point = 147
   Insn 254: point = 147
   Insn 252: point = 147
   Insn 251: point = 149
   Insn 633: point = 151
	   Creating copy r682<-r756@941
   Insn 736: point = 153
   Insn 632: point = 154
	   Creating copy r681->r756@941
   Insn 250: point = 156
   Insn 249: point = 158
   Insn 248: point = 160
   Insn 631: point = 162
	   Creating copy r680<-r757@941
   Insn 737: point = 164
   Insn 630: point = 165
	   Creating copy r679->r757@941
   Insn 247: point = 167
   Insn 246: point = 169
   Insn 628: point = 171
	Hard reg 2 is preferable by r677 with profit 941
   Insn 245: point = 173
   Insn 627: point = 174
   Insn 244: point = 176
   Insn 626: point = 178
	Hard reg 37 is preferable by r676 with profit 941
   Insn 243: point = 180
   Insn 625: point = 180
	   Creating copy r676<-r758@941
   Insn 242: point = 182
   Insn 624: point = 184
   Insn 241: point = 186
   Insn 240: point = 188
   Insn 239: point = 190
   Insn 623: point = 192
	   Creating copy r674<-r758@941
   Insn 738: point = 193
   Insn 238: point = 195
   Insn 621: point = 197
	Hard reg 0 is preferable by r672 with profit 941
   Insn 237: point = 199
   Insn 620: point = 200
   Insn 619: point = 202
   Insn 236: point = 204
   Insn 618: point = 204
	Hard reg 37 is preferable by r671 with profit 941
   Insn 235: point = 206
   Insn 234: point = 208
   Insn 233: point = 210
   Insn 232: point = 212
   Insn 617: point = 214
	   Creating copy r670<-r759@941
   Insn 739: point = 216
   Insn 616: point = 217
	   Creating copy r669->r759@941
   Insn 231: point = 219
   Insn 230: point = 221
   Insn 614: point = 223
	Hard reg 0 is preferable by r667 with profit 941
   Insn 229: point = 225
   Insn 613: point = 226
   Insn 228: point = 228
   Insn 227: point = 230
   Insn 226: point = 232
   Insn 612: point = 234
   Insn 225: point = 236
   Insn 224: point = 238
   Insn 223: point = 240
   Insn 222: point = 242
   Insn 610: point = 244
	Hard reg 0 is preferable by r664 with profit 941
   Insn 221: point = 246
   Insn 609: point = 247
   Insn 608: point = 249
   Insn 220: point = 251
   Insn 607: point = 251
	Hard reg 38 is preferable by r663 with profit 941
   Insn 219: point = 253
   Insn 606: point = 255
	   Creating copy r662<-r760@941
   Insn 740: point = 257
   Insn 605: point = 258
	   Creating copy r661->r760@941
   Insn 218: point = 260
   Insn 217: point = 262
   Insn 216: point = 264
   Insn 215: point = 266
   Insn 214: point = 268
   Insn 603: point = 270
	Hard reg 39 is preferable by r659 with profit 941
   Insn 213: point = 272
   Insn 602: point = 273
   Insn 212: point = 275
   Insn 211: point = 277
   Insn 210: point = 279
   Insn 209: point = 281
   Insn 208: point = 283
   Insn 207: point = 285
   Insn 206: point = 287
   Insn 600: point = 289
	Hard reg 39 is preferable by r657 with profit 941
   Insn 205: point = 291
   Insn 599: point = 292
   Insn 598: point = 294
   Insn 204: point = 296
   Insn 597: point = 296
	Hard reg 40 is preferable by r656 with profit 941
   Insn 203: point = 298
   Insn 202: point = 300
   Insn 596: point = 302
	   Creating copy r655<-r761@941
   Insn 741: point = 304
   Insn 595: point = 305
	   Creating copy r654->r761@941
   Insn 201: point = 307
   Insn 594: point = 307
	Hard reg 41 is preferable by r654 with profit 941
   Insn 200: point = 309
   Insn 593: point = 311
	   Creating copy r653<-r762@941
   Insn 742: point = 313
   Insn 592: point = 314
	   Creating copy r652->r762@941
   Insn 199: point = 316
   Insn 198: point = 318
   Insn 590: point = 320
	Hard reg 5 is preferable by r650 with profit 941
   Insn 197: point = 322
   Insn 589: point = 323
   Insn 196: point = 325
   Insn 195: point = 327
   Insn 194: point = 329
   Insn 193: point = 331
   Insn 192: point = 333
   Insn 191: point = 335
   Insn 190: point = 337
   Insn 587: point = 339
	Hard reg 5 is preferable by r648 with profit 941
   Insn 189: point = 341
   Insn 586: point = 342
   Insn 188: point = 344
   Insn 187: point = 346
   Insn 186: point = 348
   Insn 185: point = 350
   Insn 184: point = 352
   Insn 183: point = 354
   Insn 182: point = 356
   Insn 584: point = 358
	Hard reg 5 is preferable by r646 with profit 941
   Insn 181: point = 360
   Insn 583: point = 361
   Insn 180: point = 363
   Insn 582: point = 365
	Hard reg 37 is preferable by r645 with profit 941
   Insn 179: point = 367
   Insn 581: point = 367
	   Creating copy r645<-r763@941
   Insn 580: point = 369
	Hard reg 43 is preferable by r644 with profit 941
   Insn 178: point = 371
   Insn 579: point = 371
   Insn 177: point = 373
   Insn 578: point = 375
	Hard reg 41 is preferable by r643 with profit 941
   Insn 176: point = 377
   Insn 577: point = 377
   Insn 175: point = 379
   Insn 174: point = 381
   Insn 575: point = 383
	   Creating copy r641<-r763@941
   Insn 743: point = 384
   Insn 573: point = 386
	Hard reg 1 is preferable by r639 with profit 941
   Insn 173: point = 388
   Insn 572: point = 389
   Insn 172: point = 391
   Insn 171: point = 393
   Insn 170: point = 395
   Insn 169: point = 397
   Insn 168: point = 399
   Insn 167: point = 401
   Insn 166: point = 403
   Insn 570: point = 405
	Hard reg 2 is preferable by r637 with profit 941
   Insn 165: point = 407
   Insn 569: point = 408
   Insn 164: point = 410
   Insn 568: point = 412
	Hard reg 38 is preferable by r636 with profit 941
   Insn 163: point = 414
   Insn 567: point = 414
	   Creating copy r636<-r764@941
   Insn 162: point = 416
   Insn 161: point = 418
   Insn 160: point = 420
   Insn 159: point = 422
   Insn 158: point = 424
   Insn 565: point = 426
	   Creating copy r634<-r764@941
   Insn 744: point = 427
   Insn 563: point = 429
	Hard reg 1 is preferable by r632 with profit 941
   Insn 157: point = 431
   Insn 562: point = 432
   Insn 156: point = 434
   Insn 155: point = 436
   Insn 561: point = 438
	   Creating copy r631<-r766@941
   Insn 745: point = 440
   Insn 560: point = 441
	   Creating copy r630->r766@941
   Insn 154: point = 443
   Insn 153: point = 445
   Insn 152: point = 447
   Insn 151: point = 449
   Insn 150: point = 451
   Insn 149: point = 453
   Insn 148: point = 455
   Insn 558: point = 457
	Hard reg 40 is preferable by r628 with profit 941
   Insn 147: point = 459
   Insn 557: point = 459
	   Creating copy r628<-r767@941
   Insn 556: point = 461
	Hard reg 2 is preferable by r627 with profit 941
   Insn 146: point = 463
   Insn 555: point = 463
   Insn 145: point = 465
   Insn 144: point = 467
   Insn 143: point = 469
   Insn 142: point = 471
   Insn 554: point = 473
	   Creating copy r626<-r767@941
   Insn 747: point = 474
   Insn 552: point = 476
	Hard reg 1 is preferable by r624 with profit 941
   Insn 141: point = 478
   Insn 551: point = 479
   Insn 550: point = 481
   Insn 140: point = 483
   Insn 549: point = 483
	Hard reg 37 is preferable by r623 with profit 941
   Insn 139: point = 485
   Insn 548: point = 487
	   Creating copy r622<-r770@941
   Insn 749: point = 489
   Insn 547: point = 490
	   Creating copy r621->r770@941
   Insn 138: point = 492
   Insn 137: point = 494
   Insn 136: point = 496
   Insn 135: point = 498
   Insn 134: point = 500
   Insn 133: point = 502
   Insn 132: point = 504
   Insn 131: point = 506
   Insn 130: point = 508
   Insn 129: point = 510
   Insn 128: point = 512
   Insn 127: point = 514
   Insn 126: point = 516
   Insn 125: point = 518
  BB 7
   Insn 409: point = 521
   Insn 663: point = 521
   Insn 354: point = 523
   Insn 662: point = 525
   Insn 351: point = 527
   Insn 661: point = 529
   Insn 349: point = 531
   Insn 348: point = 532
   Insn 660: point = 533
   Insn 345: point = 535
   Insn 344: point = 536
   Insn 659: point = 537
   Insn 342: point = 539
   Insn 658: point = 541
   Insn 339: point = 543
   Insn 657: point = 545
   Insn 337: point = 547
   Insn 336: point = 548
   Insn 656: point = 549
   Insn 333: point = 551
   Insn 332: point = 552
   Insn 655: point = 553
   Insn 330: point = 555
   Insn 654: point = 557
   Insn 327: point = 559
   Insn 653: point = 561
   Insn 325: point = 563
   Insn 324: point = 564
   Insn 652: point = 565
   Insn 321: point = 567
   Insn 320: point = 568
   Insn 651: point = 569
   Insn 318: point = 571
   Insn 650: point = 573
   Insn 315: point = 575
   Insn 649: point = 577
   Insn 313: point = 579
   Insn 312: point = 580
   Insn 648: point = 581
   Insn 309: point = 583
   Insn 308: point = 584
   Insn 647: point = 585
   Insn 306: point = 587
   Insn 646: point = 589
   Insn 303: point = 591
   Insn 645: point = 593
   Insn 301: point = 595
   Insn 300: point = 596
   Insn 644: point = 597
   Insn 297: point = 599
   Insn 296: point = 600
   Insn 643: point = 601
   Insn 294: point = 603
   Insn 642: point = 605
   Insn 291: point = 607
   Insn 641: point = 609
   Insn 289: point = 611
   Insn 288: point = 612
   Insn 640: point = 613
   Insn 285: point = 615
   Insn 284: point = 616
   Insn 282: point = 617
   Insn 639: point = 619
   Insn 279: point = 621
   Insn 638: point = 623
   Insn 277: point = 625
   Insn 276: point = 626
   Insn 637: point = 627
   Insn 273: point = 629
   Insn 272: point = 630
   Insn 270: point = 631
   Insn 267: point = 633
   Insn 636: point = 635
   Insn 265: point = 637
   Insn 264: point = 638
   Insn 263: point = 639
   Insn 261: point = 640
   Insn 260: point = 641
  BB 5
   Insn 424: point = 643
   Insn 423: point = 645
   Insn 422: point = 647
   Insn 421: point = 649
   Insn 420: point = 651
	Hard reg 39 is preferable by r755 with profit 59
   Insn 419: point = 653
   Insn 418: point = 655
   Insn 417: point = 657
   Insn 416: point = 659
   Insn 415: point = 661
   Insn 414: point = 663
   Insn 413: point = 665
   Insn 412: point = 667
   Insn 411: point = 669
   Insn 544: point = 671
   Insn 37: point = 673
   Insn 543: point = 674
	   Creating copy r617->r755@59
   Insn 36: point = 676
   Insn 542: point = 677
   Insn 35: point = 679
   Insn 34: point = 680
   Insn 541: point = 681
   Insn 33: point = 683
   Insn 32: point = 684
   Insn 540: point = 685
   Insn 31: point = 687
   Insn 539: point = 688
   Insn 30: point = 690
   Insn 538: point = 691
   Insn 29: point = 693
   Insn 537: point = 694
   Insn 28: point = 696
   Insn 536: point = 697
   Insn 27: point = 699
   Insn 535: point = 700
   Insn 26: point = 702
   Insn 534: point = 703
   Insn 25: point = 705
   Insn 533: point = 706
   Insn 24: point = 708
   Insn 532: point = 709
   Insn 23: point = 711
   Insn 531: point = 712
   Insn 22: point = 714
   Insn 21: point = 715
   Insn 20: point = 716
   Insn 530: point = 718
   Insn 19: point = 719
   Insn 529: point = 721
   Insn 18: point = 722
   Insn 528: point = 724
   Insn 17: point = 725
   Insn 16: point = 726
   Insn 15: point = 727
   Insn 527: point = 729
   Insn 14: point = 730
   Insn 13: point = 731
   Insn 526: point = 733
   Insn 123: point = 734
  BB 3
   Insn 407: point = 736
   Insn 524: point = 736
   Insn 120: point = 738
   Insn 523: point = 739
	Hard reg 0 is preferable by r598 with profit 29
   Insn 119: point = 741
   Insn 522: point = 742
	Hard reg 3 is preferable by r597 with profit 29
   Insn 118: point = 744
   Insn 521: point = 744
	Hard reg 3 is preferable by r597 with profit 29
	Hard reg 2 is preferable by r597 with profit 29
   Insn 117: point = 746
   Insn 116: point = 747
   Insn 520: point = 749
   Insn 519: point = 750
	Hard reg 42 is preferable by r595 with profit 29
   Insn 115: point = 752
   Insn 518: point = 753
	Hard reg 42 is preferable by r595 with profit 29
	Hard reg 0 is preferable by r595 with profit 29
   Insn 114: point = 755
   Insn 517: point = 756
	Hard reg 6 is preferable by r594 with profit 29
   Insn 113: point = 758
   Insn 516: point = 758
	Hard reg 6 is preferable by r594 with profit 29
	Hard reg 39 is preferable by r594 with profit 29
   Insn 112: point = 760
   Insn 111: point = 761
   Insn 515: point = 763
  BB 4
   Insn 12: point = 765
   Insn 11: point = 766
   Insn 10: point = 767
   Insn 525: point = 768
   Insn 9: point = 770
  BB 2
   Insn 109: point = 772
   Insn 108: point = 772
   Insn 514: point = 773
   Insn 512: point = 774
   Insn 107: point = 776
   Insn 513: point = 777
	   Creating copy r591<-r737@58
   Insn 511: point = 779
	Hard reg 0 is preferable by r590 with profit 58
   Insn 106: point = 781
   Insn 717: point = 782
   Insn 510: point = 783
	   Creating copy r589->r737@58
   Insn 105: point = 785
   Insn 509: point = 787
   Insn 507: point = 788
	Hard reg 41 is preferable by r586 with profit 58
   Insn 104: point = 790
   Insn 508: point = 791
	   Creating copy r587<-r738@58
   Insn 506: point = 793
	Hard reg 41 is preferable by r586 with profit 58
	Hard reg 43 is preferable by r586 with profit 58
   Insn 103: point = 795
   Insn 718: point = 796
   Insn 505: point = 797
	   Creating copy r585->r738@58
   Insn 102: point = 799
   Insn 504: point = 801
   Insn 502: point = 802
   Insn 101: point = 804
   Insn 503: point = 805
	   Creating copy r583<-r739@58
   Insn 501: point = 807
	Hard reg 4 is preferable by r582 with profit 58
   Insn 100: point = 809
   Insn 719: point = 810
   Insn 500: point = 811
	   Creating copy r581->r739@58
   Insn 99: point = 813
   Insn 499: point = 815
   Insn 497: point = 816
	Hard reg 38 is preferable by r578 with profit 58
   Insn 98: point = 818
   Insn 498: point = 819
	   Creating copy r579<-r740@58
   Insn 496: point = 821
	Hard reg 38 is preferable by r578 with profit 58
	Hard reg 41 is preferable by r578 with profit 58
   Insn 97: point = 823
   Insn 720: point = 824
   Insn 495: point = 825
	   Creating copy r577->r740@58
   Insn 96: point = 827
   Insn 494: point = 829
   Insn 493: point = 830
   Insn 95: point = 832
   Insn 492: point = 834
   Insn 491: point = 835
   Insn 94: point = 837
   Insn 490: point = 839
   Insn 489: point = 840
   Insn 93: point = 842
   Insn 488: point = 844
   Insn 487: point = 845
   Insn 92: point = 847
   Insn 486: point = 849
   Insn 485: point = 850
   Insn 91: point = 852
   Insn 484: point = 854
   Insn 483: point = 855
   Insn 90: point = 857
   Insn 482: point = 859
   Insn 481: point = 860
   Insn 89: point = 862
   Insn 480: point = 864
   Insn 479: point = 865
   Insn 88: point = 867
   Insn 478: point = 869
   Insn 87: point = 870
   Insn 477: point = 871
	   Creating copy r559<-r741@58
   Insn 721: point = 873
   Insn 476: point = 874
	   Creating copy r558->r741@58
   Insn 86: point = 876
   Insn 475: point = 876
	Hard reg 44 is preferable by r558 with profit 58
   Insn 85: point = 878
   Insn 84: point = 880
   Insn 474: point = 881
	   Creating copy r557<-r742@58
   Insn 722: point = 883
   Insn 473: point = 884
	   Creating copy r556->r742@58
   Insn 83: point = 886
   Insn 472: point = 886
	Hard reg 44 is preferable by r556 with profit 58
   Insn 82: point = 888
   Insn 81: point = 889
   Insn 471: point = 890
	   Creating copy r555<-r743@58
   Insn 723: point = 892
   Insn 470: point = 893
	   Creating copy r554->r743@58
   Insn 80: point = 895
   Insn 469: point = 895
	Hard reg 0 is preferable by r554 with profit 58
   Insn 79: point = 897
   Insn 78: point = 898
   Insn 468: point = 899
	   Creating copy r553<-r744@58
   Insn 724: point = 901
   Insn 467: point = 902
	   Creating copy r552->r744@58
   Insn 77: point = 904
   Insn 466: point = 904
	Hard reg 0 is preferable by r552 with profit 58
   Insn 76: point = 906
   Insn 75: point = 907
   Insn 465: point = 908
	   Creating copy r551<-r745@58
   Insn 725: point = 910
   Insn 464: point = 911
	   Creating copy r550->r745@58
   Insn 74: point = 913
   Insn 463: point = 913
	Hard reg 43 is preferable by r550 with profit 58
   Insn 73: point = 915
   Insn 72: point = 916
   Insn 462: point = 917
	   Creating copy r549<-r746@58
   Insn 726: point = 919
   Insn 461: point = 920
	   Creating copy r548->r746@58
   Insn 71: point = 922
   Insn 460: point = 922
	Hard reg 43 is preferable by r548 with profit 58
   Insn 70: point = 924
   Insn 69: point = 925
   Insn 459: point = 926
	   Creating copy r547<-r747@58
   Insn 727: point = 928
   Insn 458: point = 929
	   Creating copy r546->r747@58
   Insn 68: point = 931
   Insn 457: point = 931
	Hard reg 0 is preferable by r546 with profit 58
   Insn 67: point = 933
   Insn 66: point = 934
   Insn 456: point = 935
	   Creating copy r545<-r748@58
   Insn 728: point = 937
   Insn 455: point = 938
	   Creating copy r544->r748@58
   Insn 65: point = 940
   Insn 454: point = 940
	Hard reg 0 is preferable by r544 with profit 58
   Insn 64: point = 942
   Insn 63: point = 943
   Insn 453: point = 944
	   Creating copy r543<-r749@58
   Insn 729: point = 946
   Insn 452: point = 947
	   Creating copy r542->r749@58
   Insn 62: point = 949
   Insn 451: point = 949
	Hard reg 3 is preferable by r542 with profit 58
   Insn 61: point = 951
   Insn 60: point = 952
   Insn 450: point = 953
	   Creating copy r541<-r750@58
   Insn 730: point = 955
   Insn 449: point = 956
	   Creating copy r540->r750@58
   Insn 59: point = 958
   Insn 448: point = 958
	Hard reg 3 is preferable by r540 with profit 58
   Insn 58: point = 960
   Insn 57: point = 961
   Insn 447: point = 962
	   Creating copy r539<-r751@58
   Insn 731: point = 964
   Insn 446: point = 965
	   Creating copy r538->r751@58
   Insn 56: point = 967
   Insn 445: point = 967
	Hard reg 0 is preferable by r538 with profit 58
   Insn 55: point = 969
   Insn 54: point = 970
   Insn 444: point = 971
	   Creating copy r537<-r752@58
   Insn 732: point = 973
   Insn 443: point = 974
	   Creating copy r536->r752@58
   Insn 53: point = 976
   Insn 442: point = 976
	Hard reg 0 is preferable by r536 with profit 58
   Insn 52: point = 978
   Insn 51: point = 979
   Insn 441: point = 980
	   Creating copy r535<-r753@58
   Insn 733: point = 982
   Insn 440: point = 983
	   Creating copy r534->r753@58
   Insn 50: point = 985
   Insn 439: point = 985
	Hard reg 0 is preferable by r534 with profit 58
   Insn 49: point = 987
   Insn 48: point = 988
   Insn 438: point = 989
	   Creating copy r533<-r754@58
   Insn 734: point = 991
   Insn 437: point = 992
	   Creating copy r532->r754@58
   Insn 47: point = 994
   Insn 436: point = 994
	Hard reg 38 is preferable by r532 with profit 58
   Insn 46: point = 996
   Insn 45: point = 997
   Insn 435: point = 997
	Hard reg 5 is preferable by r531 with profit 58
   Insn 44: point = 999
   Insn 434: point = 999
	Hard reg 5 is preferable by r531 with profit 58
	Hard reg 6 is preferable by r531 with profit 58
   Insn 43: point = 1001
   Insn 42: point = 1002
   Insn 41: point = 1002
   Insn 40: point = 1004
   Insn 7: point = 1005
   Insn 6: point = 1006
 r100: [147..715]
 r119: [102..865]
 r120: [101..860]
 r121: [68..855]
 r122: [67..850]
 r123: [36..845]
 r124: [35..840]
 r125: [8..835]
 r126: [7..830]
 r127: [110..824]
 r128: [109..810]
 r129: [76..796]
 r130: [75..782]
 r132: [754..761]
 r133: [740..747]
 r135: [501..514]
 r137: [497..510]
 r138: [493..508]
 r140: [486..504]
 r143: [338..498]
 r145: [284..494]
 r146: [235..489]
 r148: [194..481]
 r151: [452..469]
 r153: [448..465]
 r154: [444..461]
 r156: [437..455]
 r159: [288..449]
 r161: [239..445]
 r162: [185..440]
 r164: [328..434]
 r167: [404..422]
 r169: [400..418]
 r170: [396..416]
 r172: [394..410]
 r175: [243..401]
 r177: [189..397]
 r178: [330..395]
 r180: [278..391]
 r183: [357..379]
 r185: [353..373]
 r186: [349..369]
 r188: [347..363]
 r191: [196..354]
 r193: [334..350]
 r194: [280..348]
 r196: [231..344]
 r197: [372..774] [83..257]
 r200: [319..335]
 r202: [310..331]
 r203: [301..329]
 r205: [299..325]
 r208: [515..731] [120..313]
 r210: [765..768] [378..736] [17..304]
 r211: [662..788]
 r214: [475..722] [45..294]
 r217: [269..285]
 r219: [265..281]
 r220: [261..279]
 r222: [254..275]
 r225: [644..730] [119..142]
 r227: [765..765] [670..756] [58..140]
 r230: [428..719] [26..249]
 r233: [222..240]
 r235: [213..236]
 r236: [209..232]
 r238: [207..228]
 r241: [423..727] [92..216]
 r243: [765..766] [668..750] [55..138]
 r244: [666..816] [128..136]
 r246: [385..716] [25..202]
 r250: [170..190]
 r252: [161..186]
 r253: [157..182]
 r255: [150..176]
 r258: [664..726] [91..134]
 r260: [765..767] [660..742] [20..132]
 r262: [464..802] [125..153]
 r264: [658..725] [48..130]
 r269: [656..734]
 r287: [654..1002]
 r290: [643..671] [519..635]
 r291: [646..997]
 r295: [643..991] [480..627]
 r298: [643..677] [478..623]
 r299: [643..982] [454..619]
 r300: [650..680]
 r303: [643..973] [433..613]
 r306: [643..681] [431..609]
 r307: [643..964] [409..605]
 r308: [648..684]
 r311: [643..955] [390..597]
 r314: [643..685] [388..593]
 r315: [643..946] [362..589]
 r316: [643..688] [360..585]
 r319: [643..937] [343..581]
 r322: [643..691] [341..577]
 r323: [643..928] [324..573]
 r324: [643..694] [322..569]
 r327: [643..919] [293..565]
 r330: [643..697] [291..561]
 r331: [643..910] [274..557]
 r332: [643..700] [272..553]
 r335: [643..901] [248..549]
 r338: [643..703] [246..545]
 r339: [643..892] [227..541]
 r340: [643..706] [225..537]
 r343: [643..883] [201..533]
 r346: [643..709] [199..529]
 r347: [643..873] [175..525]
 r348: [643..712] [173..521]
 r351: [879..1005]
 r352: [1003..1004]
 r353: [1000..1001]
 r354: [995..996]
 r355: [986..987]
 r356: [977..978]
 r357: [968..969]
 r358: [959..960]
 r359: [950..951]
 r360: [941..942]
 r361: [932..933]
 r362: [923..924]
 r363: [914..915]
 r364: [905..906]
 r365: [896..897]
 r366: [887..888]
 r367: [877..878]
 r368: [822..823]
 r369: [808..809]
 r370: [794..795]
 r371: [780..781]
 r372: [759..760]
 r373: [752..755]
 r374: [745..746]
 r375: [738..741]
 r376: [517..518]
 r377: [515..516]
 r378: [511..512]
 r379: [505..506]
 r380: [501..502]
 r381: [499..500]
 r382: [495..496]
 r383: [484..485]
 r384: [472..476]
 r385: [470..471]
 r386: [466..467]
 r387: [456..457]
 r388: [452..453]
 r389: [450..451]
 r390: [446..447]
 r391: [435..436]
 r392: [425..429]
 r393: [423..424]
 r394: [419..420]
 r395: [411..412]
 r396: [404..405]
 r397: [402..403]
 r398: [398..399]
 r399: [392..393]
 r400: [382..386]
 r401: [380..381]
 r402: [374..375]
 r403: [364..365]
 r404: [357..358]
 r405: [355..356]
 r406: [351..352]
 r407: [345..346]
 r408: [338..339]
 r409: [336..337]
 r410: [332..333]
 r411: [326..327]
 r412: [319..320]
 r413: [317..318]
 r414: [308..309]
 r415: [297..298]
 r416: [288..289]
 r417: [286..287]
 r418: [282..283]
 r419: [276..277]
 r420: [269..270]
 r421: [267..268]
 r422: [263..264]
 r423: [252..253]
 r424: [243..244]
 r425: [241..242]
 r426: [237..238]
 r427: [229..230]
 r428: [222..223]
 r429: [220..221]
 r430: [211..212]
 r431: [205..206]
 r432: [196..197]
 r433: [191..195]
 r434: [187..188]
 r435: [177..178]
 r436: [170..171]
 r437: [168..169]
 r438: [159..160]
 r439: [148..149]
 r440: [632..641]
 r441: [524..639]
 r442: [634..638]
 r446: [618..630]
 r448: [622..626]
 r452: [604..616]
 r454: [608..612]
 r458: [588..600]
 r460: [592..596]
 r464: [572..584]
 r466: [576..580]
 r470: [556..568]
 r472: [560..564]
 r476: [540..552]
 r478: [544..548]
 r482: [524..536]
 r484: [528..532]
 r488: [113..122]
 r489: [113..114]
 r490: [105..112]
 r491: [39..106]
 r492: [97..104]
 r493: [97..98]
 r494: [94..96]
 r495: [79..86]
 r496: [79..80]
 r497: [71..78]
 r498: [11..72]
 r499: [63..70]
 r500: [63..64]
 r501: [60..62]
 r502: [41..50]
 r503: [41..42]
 r504: [39..40]
 r506: [31..38]
 r507: [31..32]
 r508: [28..30]
 r509: [13..22]
 r510: [13..14]
 r511: [11..12]
 r513: [3..10]
 r514: [3..4]
 r515: [0..2]
 r517: [417..661] [145..300]
 r518: [470..643] [143..266]
 r519: [513..669] [141..262]
 r520: [468..667] [139..210]
 r521: [509..665] [137..208]
 r522: [380..663] [135..164]
 r523: [421..659] [133..158]
 r524: [507..657] [131..147]
 r525: [147..655]
 r526: [643..653] [519..640]
 r527: [643..645] [503..633]
 r528: [643..651] [503..631]
 r529: [643..649] [454..617]
 r530: [643..647] [407..601]
 r531: [998..999]
 r532: [993..994]
 r533: [988..989]
 r534: [984..985]
 r535: [979..980]
 r536: [975..976]
 r537: [970..971]
 r538: [966..967]
 r539: [961..962]
 r540: [957..958]
 r541: [952..953]
 r542: [948..949]
 r543: [943..944]
 r544: [939..940]
 r545: [934..935]
 r546: [930..931]
 r547: [925..926]
 r548: [921..922]
 r549: [916..917]
 r550: [912..913]
 r551: [907..908]
 r552: [903..904]
 r553: [898..899]
 r554: [894..895]
 r555: [889..890]
 r556: [885..886]
 r557: [880..881]
 r558: [875..876]
 r559: [870..871]
 r560: [868..869]
 r561: [866..867]
 r562: [863..864]
 r563: [861..862]
 r564: [858..859]
 r565: [856..857]
 r566: [853..854]
 r567: [851..852]
 r568: [848..849]
 r569: [846..847]
 r570: [843..844]
 r571: [841..842]
 r572: [838..839]
 r573: [836..837]
 r574: [833..834]
 r575: [831..832]
 r576: [828..829]
 r577: [826..827]
 r578: [817..821]
 r579: [818..819]
 r580: [814..815]
 r581: [812..813]
 r582: [803..807]
 r583: [804..805]
 r584: [800..801]
 r585: [798..799]
 r586: [789..793]
 r587: [790..791]
 r588: [786..787]
 r589: [784..785]
 r590: [775..779]
 r591: [776..777]
 r592: [772..773]
 r593: [762..763]
 r594: [757..758]
 r595: [751..753]
 r596: [748..749]
 r597: [743..744]
 r598: [737..739]
 r599: [769..770]
 r600: [732..733]
 r601: [728..729]
 r602: [723..724]
 r603: [720..721]
 r604: [717..718]
 r605: [713..714]
 r606: [710..711]
 r607: [707..708]
 r608: [704..705]
 r609: [701..702]
 r610: [698..699]
 r611: [695..696]
 r612: [692..693]
 r613: [689..690]
 r614: [686..687]
 r615: [682..683]
 r616: [678..679]
 r617: [675..676]
 r618: [672..673]
 r621: [491..492]
 r622: [486..487]
 r623: [482..483]
 r624: [477..479]
 r626: [472..473]
 r627: [462..463]
 r628: [458..459]
 r630: [442..443]
 r631: [437..438]
 r632: [430..432]
 r634: [425..426]
 r636: [413..414]
 r637: [406..408]
 r639: [387..389]
 r641: [382..383]
 r643: [376..377]
 r644: [370..371]
 r645: [366..367]
 r646: [359..361]
 r648: [340..342]
 r650: [321..323]
 r652: [315..316]
 r653: [310..311]
 r654: [306..307]
 r655: [301..302]
 r656: [295..296]
 r657: [290..292]
 r659: [271..273]
 r661: [259..260]
 r662: [254..255]
 r663: [250..251]
 r664: [245..247]
 r666: [233..234]
 r667: [224..226]
 r669: [218..219]
 r670: [213..214]
 r671: [203..204]
 r672: [198..200]
 r674: [191..192]
 r675: [183..184]
 r676: [179..180]
 r677: [172..174]
 r679: [166..167]
 r680: [161..162]
 r681: [155..156]
 r682: [150..151]
 r684: [636..637]
 r685: [628..629]
 r686: [624..625]
 r687: [620..621]
 r688: [614..615]
 r689: [610..611]
 r690: [606..607]
 r691: [602..603]
 r692: [598..599]
 r693: [594..595]
 r694: [590..591]
 r695: [586..587]
 r696: [582..583]
 r697: [578..579]
 r698: [574..575]
 r699: [570..571]
 r700: [566..567]
 r701: [562..563]
 r702: [558..559]
 r703: [554..555]
 r704: [550..551]
 r705: [546..547]
 r706: [542..543]
 r707: [538..539]
 r708: [534..535]
 r709: [530..531]
 r710: [526..527]
 r711: [522..523]
 r712: [123..129]
 r713: [126..127]
 r714: [115..121]
 r715: [117..118]
 r716: [107..111]
 r717: [99..103]
 r718: [94..95]
 r719: [87..93]
 r720: [89..90]
 r721: [81..85]
 r722: [73..77]
 r723: [65..69]
 r724: [60..61]
 r725: [51..59]
 r726: [53..54]
 r727: [56..57]
 r728: [43..49]
 r729: [46..47]
 r730: [33..37]
 r731: [28..29]
 r732: [23..27]
 r733: [15..21]
 r734: [18..19]
 r735: [5..9]
 r736: [0..1]
 r737: [778..783]
 r738: [792..797]
 r739: [806..811]
 r740: [820..825]
 r741: [872..874]
 r742: [882..884]
 r743: [891..893]
 r744: [900..902]
 r745: [909..911]
 r746: [918..920]
 r747: [927..929]
 r748: [936..938]
 r749: [945..947]
 r750: [954..956]
 r751: [963..965]
 r752: [972..974]
 r753: [981..983]
 r754: [990..992]
 r755: [652..674]
 r756: [152..154]
 r757: [163..165]
 r758: [181..193]
 r759: [215..217]
 r760: [256..258]
 r761: [303..305]
 r762: [312..314]
 r763: [368..384]
 r764: [415..427]
 r766: [439..441]
 r767: [460..474]
 r770: [488..490]
 r771: [84..144]
Compressing live ranges: from 1006 to 809 - 80%
Ranges after the compression:
 r100: [89..582]
 r119: [58..686]
 r120: [58..682]
 r121: [40..678]
 r122: [40..674]
 r123: [20..670]
 r124: [20..666]
 r125: [4..662]
 r126: [4..658]
 r127: [62..654]
 r128: [62..644]
 r129: [44..634]
 r130: [44..624]
 r132: [605..610]
 r133: [595..600]
 r135: [418..431]
 r137: [414..427]
 r138: [410..425]
 r140: [404..421]
 r143: [266..415]
 r145: [216..411]
 r146: [170..407]
 r148: [132..399]
 r151: [372..389]
 r153: [368..385]
 r154: [364..381]
 r156: [358..375]
 r159: [220..369]
 r161: [174..365]
 r162: [124..361]
 r164: [256..355]
 r167: [328..345]
 r169: [324..341]
 r170: [320..339]
 r172: [318..333]
 r175: [178..325]
 r177: [128..321]
 r178: [258..319]
 r180: [210..315]
 r183: [284..305]
 r185: [280..299]
 r186: [276..295]
 r188: [274..289]
 r191: [134..281]
 r193: [262..277]
 r194: [212..275]
 r196: [166..271]
 r197: [298..618] [48..191]
 r200: [248..263]
 r202: [240..259]
 r203: [232..257]
 r205: [230..253]
 r208: [432..590] [68..243]
 r210: [613..614] [304..592] [10..235]
 r211: [545..628]
 r214: [394..586] [26..225]
 r217: [202..217]
 r219: [198..213]
 r220: [194..211]
 r222: [188..207]
 r225: [527..590] [68..85]
 r227: [613..613] [553..606] [34..83]
 r230: [350..584] [14..183]
 r233: [158..175]
 r235: [150..171]
 r236: [146..167]
 r238: [144..163]
 r241: [346..588] [52..153]
 r243: [613..614] [551..602] [32..81]
 r244: [549..648] [72..79]
 r246: [310..582] [14..139]
 r250: [110..129]
 r252: [102..125]
 r253: [98..121]
 r255: [92..115]
 r258: [547..588] [52..77]
 r260: [613..614] [543..596] [12..75]
 r262: [384..638] [70..95]
 r264: [541..588] [28..73]
 r269: [539..592]
 r287: [537..806]
 r290: [526..554] [436..523]
 r291: [529..802]
 r295: [526..798] [398..517]
 r298: [526..558] [396..515]
 r299: [526..790] [374..511]
 r300: [533..560]
 r303: [526..782] [354..507]
 r306: [526..560] [352..505]
 r307: [526..774] [332..501]
 r308: [531..562]
 r311: [526..766] [314..495]
 r314: [526..562] [312..493]
 r315: [526..758] [288..489]
 r316: [526..564] [286..485]
 r319: [526..750] [270..483]
 r322: [526..566] [268..481]
 r323: [526..742] [252..477]
 r324: [526..568] [250..473]
 r327: [526..734] [224..471]
 r330: [526..570] [222..469]
 r331: [526..726] [206..465]
 r332: [526..572] [204..461]
 r335: [526..718] [182..459]
 r338: [526..574] [180..457]
 r339: [526..710] [162..453]
 r340: [526..576] [160..449]
 r343: [526..702] [138..447]
 r346: [526..578] [136..445]
 r347: [526..694] [114..441]
 r348: [526..580] [112..437]
 r351: [699..808]
 r352: [807..808]
 r353: [805..806]
 r354: [801..802]
 r355: [793..794]
 r356: [785..786]
 r357: [777..778]
 r358: [769..770]
 r359: [761..762]
 r360: [753..754]
 r361: [745..746]
 r362: [737..738]
 r363: [729..730]
 r364: [721..722]
 r365: [713..714]
 r366: [705..706]
 r367: [697..698]
 r368: [653..654]
 r369: [643..644]
 r370: [633..634]
 r371: [623..624]
 r372: [609..610]
 r373: [603..606]
 r374: [599..600]
 r375: [593..596]
 r376: [434..435]
 r377: [432..433]
 r378: [428..429]
 r379: [422..423]
 r380: [418..419]
 r381: [416..417]
 r382: [412..413]
 r383: [402..403]
 r384: [392..395]
 r385: [390..391]
 r386: [386..387]
 r387: [376..377]
 r388: [372..373]
 r389: [370..371]
 r390: [366..367]
 r391: [356..357]
 r392: [348..351]
 r393: [346..347]
 r394: [342..343]
 r395: [334..335]
 r396: [328..329]
 r397: [326..327]
 r398: [322..323]
 r399: [316..317]
 r400: [308..311]
 r401: [306..307]
 r402: [300..301]
 r403: [290..291]
 r404: [284..285]
 r405: [282..283]
 r406: [278..279]
 r407: [272..273]
 r408: [266..267]
 r409: [264..265]
 r410: [260..261]
 r411: [254..255]
 r412: [248..249]
 r413: [246..247]
 r414: [238..239]
 r415: [228..229]
 r416: [220..221]
 r417: [218..219]
 r418: [214..215]
 r419: [208..209]
 r420: [202..203]
 r421: [200..201]
 r422: [196..197]
 r423: [186..187]
 r424: [178..179]
 r425: [176..177]
 r426: [172..173]
 r427: [164..165]
 r428: [158..159]
 r429: [156..157]
 r430: [148..149]
 r431: [142..143]
 r432: [134..135]
 r433: [130..133]
 r434: [126..127]
 r435: [116..117]
 r436: [110..111]
 r437: [108..109]
 r438: [100..101]
 r439: [90..91]
 r440: [520..525]
 r441: [440..525]
 r442: [522..525]
 r446: [510..519]
 r448: [514..517]
 r452: [500..509]
 r454: [504..507]
 r458: [488..497]
 r460: [492..495]
 r464: [476..485]
 r466: [480..483]
 r470: [464..473]
 r472: [468..471]
 r476: [452..461]
 r478: [456..459]
 r482: [440..449]
 r484: [444..447]
 r488: [64..69]
 r489: [64..65]
 r490: [60..63]
 r491: [22..61]
 r492: [56..59]
 r493: [56..57]
 r494: [54..55]
 r495: [46..49]
 r496: [46..47]
 r497: [42..45]
 r498: [6..43]
 r499: [38..41]
 r500: [38..39]
 r501: [36..37]
 r502: [24..29]
 r503: [24..25]
 r504: [22..23]
 r506: [18..21]
 r507: [18..19]
 r508: [16..17]
 r509: [8..13]
 r510: [8..9]
 r511: [6..7]
 r513: [2..5]
 r514: [2..3]
 r515: [0..1]
 r517: [340..544] [88..231]
 r518: [390..526] [86..199]
 r519: [430..552] [84..195]
 r520: [388..550] [82..147]
 r521: [426..548] [80..145]
 r522: [306..546] [78..105]
 r523: [344..542] [76..99]
 r524: [424..540] [74..89]
 r525: [89..538]
 r526: [436..536]
 r527: [526..528] [420..521]
 r528: [526..534] [420..519]
 r529: [526..532] [374..509]
 r530: [526..530] [330..497]
 r531: [803..804]
 r532: [799..800]
 r533: [795..796]
 r534: [791..792]
 r535: [787..788]
 r536: [783..784]
 r537: [779..780]
 r538: [775..776]
 r539: [771..772]
 r540: [767..768]
 r541: [763..764]
 r542: [759..760]
 r543: [755..756]
 r544: [751..752]
 r545: [747..748]
 r546: [743..744]
 r547: [739..740]
 r548: [735..736]
 r549: [731..732]
 r550: [727..728]
 r551: [723..724]
 r552: [719..720]
 r553: [715..716]
 r554: [711..712]
 r555: [707..708]
 r556: [703..704]
 r557: [699..700]
 r558: [695..696]
 r559: [691..692]
 r560: [689..690]
 r561: [687..688]
 r562: [685..686]
 r563: [683..684]
 r564: [681..682]
 r565: [679..680]
 r566: [677..678]
 r567: [675..676]
 r568: [673..674]
 r569: [671..672]
 r570: [669..670]
 r571: [667..668]
 r572: [665..666]
 r573: [663..664]
 r574: [661..662]
 r575: [659..660]
 r576: [657..658]
 r577: [655..656]
 r578: [649..652]
 r579: [649..650]
 r580: [647..648]
 r581: [645..646]
 r582: [639..642]
 r583: [639..640]
 r584: [637..638]
 r585: [635..636]
 r586: [629..632]
 r587: [629..630]
 r588: [627..628]
 r589: [625..626]
 r590: [619..622]
 r591: [619..620]
 r592: [617..618]
 r593: [611..612]
 r594: [607..608]
 r595: [603..604]
 r596: [601..602]
 r597: [597..598]
 r598: [593..594]
 r599: [615..616]
 r600: [591..592]
 r601: [589..590]
 r602: [587..588]
 r603: [585..586]
 r604: [583..584]
 r605: [581..582]
 r606: [579..580]
 r607: [577..578]
 r608: [575..576]
 r609: [573..574]
 r610: [571..572]
 r611: [569..570]
 r612: [567..568]
 r613: [565..566]
 r614: [563..564]
 r615: [561..562]
 r616: [559..560]
 r617: [557..558]
 r618: [555..556]
 r621: [408..409]
 r622: [404..405]
 r623: [400..401]
 r624: [396..397]
 r626: [392..393]
 r627: [382..383]
 r628: [378..379]
 r630: [362..363]
 r631: [358..359]
 r632: [352..353]
 r634: [348..349]
 r636: [336..337]
 r637: [330..331]
 r639: [312..313]
 r641: [308..309]
 r643: [302..303]
 r644: [296..297]
 r645: [292..293]
 r646: [286..287]
 r648: [268..269]
 r650: [250..251]
 r652: [244..245]
 r653: [240..241]
 r654: [236..237]
 r655: [232..233]
 r656: [226..227]
 r657: [222..223]
 r659: [204..205]
 r661: [192..193]
 r662: [188..189]
 r663: [184..185]
 r664: [180..181]
 r666: [168..169]
 r667: [160..161]
 r669: [154..155]
 r670: [150..151]
 r671: [140..141]
 r672: [136..137]
 r674: [130..131]
 r675: [122..123]
 r676: [118..119]
 r677: [112..113]
 r679: [106..107]
 r680: [102..103]
 r681: [96..97]
 r682: [92..93]
 r684: [524..525]
 r685: [518..519]
 r686: [516..517]
 r687: [512..513]
 r688: [508..509]
 r689: [506..507]
 r690: [502..503]
 r691: [498..499]
 r692: [496..497]
 r693: [494..495]
 r694: [490..491]
 r695: [486..487]
 r696: [484..485]
 r697: [482..483]
 r698: [478..479]
 r699: [474..475]
 r700: [472..473]
 r701: [470..471]
 r702: [466..467]
 r703: [462..463]
 r704: [460..461]
 r705: [458..459]
 r706: [454..455]
 r707: [450..451]
 r708: [448..449]
 r709: [446..447]
 r710: [442..443]
 r711: [438..439]
 r712: [70..73]
 r713: [70..71]
 r714: [66..69]
 r715: [66..67]
 r716: [62..63]
 r717: [58..59]
 r718: [54..55]
 r719: [50..53]
 r720: [50..51]
 r721: [48..49]
 r722: [44..45]
 r723: [40..41]
 r724: [36..37]
 r725: [30..35]
 r726: [30..31]
 r727: [32..33]
 r728: [26..29]
 r729: [26..27]
 r730: [20..21]
 r731: [16..17]
 r732: [14..15]
 r733: [10..13]
 r734: [10..11]
 r735: [4..5]
 r736: [0..1]
 r737: [621..624]
 r738: [631..634]
 r739: [641..644]
 r740: [651..654]
 r741: [693..694]
 r742: [701..702]
 r743: [709..710]
 r744: [717..718]
 r745: [725..726]
 r746: [733..734]
 r747: [741..742]
 r748: [749..750]
 r749: [757..758]
 r750: [765..766]
 r751: [773..774]
 r752: [781..782]
 r753: [789..790]
 r754: [797..798]
 r755: [535..556]
 r756: [94..95]
 r757: [104..105]
 r758: [120..131]
 r759: [152..153]
 r760: [190..191]
 r761: [234..235]
 r762: [242..243]
 r763: [294..309]
 r764: [338..349]
 r766: [360..361]
 r767: [380..393]
 r770: [406..407]
 r771: [48..87]

********** Pseudos coalescing #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=772 from oldreg=316, assigning class GENERAL_REGS to r772
      Making reload reg 772 for reg 316 optional
  181: {r646:DI=r646:DI^r772:DI;clobber flags:CC;}
      REG_DEAD r316:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  752: r772:DI=r316:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 752:  (0) r  (1) rem {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=773 from oldreg=322, assigning class GENERAL_REGS to r773
      Making reload reg 773 for reg 322 optional
  189: {r648:DI=r648:DI^r773:DI;clobber flags:CC;}
      REG_DEAD r322:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  753: r773:DI=r322:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 753:  (0) r  (1) rem {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 197:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=774 from oldreg=324, assigning class GENERAL_REGS to r774
      Making reload reg 774 for reg 324 optional
  197: {r650:DI=r650:DI^r774:DI;clobber flags:CC;}
      REG_DEAD r324:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  754: r774:DI=r324:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 754:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=5,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=13,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=10,losers=1,rld_nregs=0
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=15,overall=23,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=24: Bad operand -- refuse
      Creating newreg=775, assigning class NO_REGS to secondary r775
  684: r775:DI=r771:DI
      REG_DEAD r771:DI
    Inserting the sec. move after:
  755: r721:V2DI#0=r775:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=14,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=7,overall=21,losers=3 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 755:  (0) *v  (1) m {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 421:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=16,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=23,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=24: Bad operand -- refuse
	 Choosing alt 3 in insn 282:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=776 from oldreg=529, assigning class GENERAL_REGS to r776
  282: r776:DI=[r446:DI*0x8+r441:DI]
      REG_DEAD r446:DI
      REG_EQUAL [r446:DI*0x8+`c64']
    Inserting insn reload after:
  756: r529:DI=r776:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 756:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 255:  (0) rm  (1) 0  (2) re {*addsi_2}
      Creating newreg=777 from oldreg=100, assigning class GENERAL_REGS to r777
      Making reload reg 777 for reg 100 optional
  255: {flags:CCZ=cmp(r777:SI-0x1,0);r777:SI=r777:SI-0x1;}
    Inserting insn reload before:
  757: r777:SI=r100:SI
    Inserting insn reload after:
  758: r100:SI=r777:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 758:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 757:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 248:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=778 from oldreg=348, assigning class GENERAL_REGS to r778
      Making reload reg 778 for reg 348 optional
  245: {r677:DI=r677:DI^r778:DI;clobber flags:CC;}
      REG_DEAD r348:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  759: r778:DI=r348:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 759:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) %0  (2) rme {*adddi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 237:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=779 from oldreg=346, assigning class GENERAL_REGS to r779
      Making reload reg 779 for reg 346 optional
  237: {r672:DI=r672:DI^r779:DI;clobber flags:CC;}
      REG_DEAD r346:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  760: r779:DI=r346:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 760:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 229:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=780 from oldreg=340, assigning class GENERAL_REGS to r780
      Making reload reg 780 for reg 340 optional
  229: {r667:DI=r667:DI^r780:DI;clobber flags:CC;}
      REG_DEAD r340:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  761: r780:DI=r340:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 761:  (0) r  (1) rem {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 221:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=781 from oldreg=338, assigning class GENERAL_REGS to r781
      Making reload reg 781 for reg 338 optional
  221: {r664:DI=r664:DI^r781:DI;clobber flags:CC;}
      REG_DEAD r338:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  762: r781:DI=r338:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 762:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 219:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=782 from oldreg=332, assigning class GENERAL_REGS to r782
      Making reload reg 782 for reg 332 optional
  213: {r659:DI=r659:DI^r782:DI;clobber flags:CC;}
      REG_DEAD r332:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  763: r782:DI=r332:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 763:  (0) r  (1) rem {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 205:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=783 from oldreg=330, assigning class GENERAL_REGS to r783
      Making reload reg 783 for reg 330 optional
  205: {r657:DI=r657:DI^r783:DI;clobber flags:CC;}
      REG_DEAD r330:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  764: r783:DI=r330:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 764:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=784 from oldreg=522, assigning class GENERAL_REGS to r784
      Making reload reg 784 for reg 522 optional
  175: {r183:DI=r401:DI+r784:DI;clobber flags:CC;}
      REG_DEAD r522:DI
      REG_DEAD r401:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  765: r784:DI=r522:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 765:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=785 from oldreg=314, assigning class GENERAL_REGS to r785
      Making reload reg 785 for reg 314 optional
  173: {r639:DI=r639:DI^r785:DI;clobber flags:CC;}
      REG_DEAD r314:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  766: r785:DI=r314:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 766:  (0) r  (1) rem {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=786 from oldreg=530, assigning class GENERAL_REGS to r786
      Making reload reg 786 for reg 530 optional
  165: {r637:DI=r637:DI^r786:DI;clobber flags:CC;}
      REG_DEAD r530:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  767: r786:DI=r530:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 767:  (0) r  (1) rem {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=787 from oldreg=241, assigning class GENERAL_REGS to r787
      Making reload reg 787 for reg 241 optional
  159: {r167:DI=r393:DI+r787:DI;clobber flags:CC;}
      REG_DEAD r241:DI
      REG_DEAD r393:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  768: r787:DI=r241:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 768:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) %0  (2) rme {*adddi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=788 from oldreg=306, assigning class GENERAL_REGS to r788
      Making reload reg 788 for reg 306 optional
  157: {r632:DI=r632:DI^r788:DI;clobber flags:CC;}
      REG_DEAD r306:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  769: r788:DI=r306:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 769:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            alt=1,overall=12,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=789 from oldreg=388, assigning class GENERAL_REGS to r789
      Creating newreg=790 from oldreg=299, assigning class GENERAL_REGS to r790
      Making reload reg 790 for reg 299 optional
  149: {r789:DI=r789:DI^r790:DI;clobber flags:CC;}
      REG_DEAD r299:DI
      REG_DEAD r529:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  770: r789:DI=r529:DI
  772: r790:DI=r299:DI
    Inserting insn reload after:
  771: r388:DI=r789:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 770:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 772:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*adddi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=791 from oldreg=298, assigning class GENERAL_REGS to r791
      Making reload reg 791 for reg 298 optional
  141: {r624:DI=r624:DI^r791:DI;clobber flags:CC;}
      REG_DEAD r298:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  773: r791:DI=r298:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 773:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=792 from oldreg=208, assigning class GENERAL_REGS to r792
      Making reload reg 792 for reg 208 optional
  127: {r135:DI=r377:DI+r792:DI;clobber flags:CC;}
      REG_DEAD r208:DI
      REG_DEAD r377:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  774: r792:DI=r208:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 774:  (0) r  (1) rem {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*xordi_1}
      Creating newreg=793 from oldreg=290, assigning class GENERAL_REGS to r793
      Making reload reg 793 for reg 290 optional
  125: {r376:DI=r526:DI^r793:DI;clobber flags:CC;}
      REG_DEAD r290:DI
      REG_DEAD r526:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  775: r793:DI=r290:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 775:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*xordi_1}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 749:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 747:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 745:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 744:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 743:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 742:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 741:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 740:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 739:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 738:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 737:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 736:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 734:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 733:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 732:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 731:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 730:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 729:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 728:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 727:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 726:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 725:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 724:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 723:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 722:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 721:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 720:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 719:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 718:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 717:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #5: **********

  BB 8
   Insn 401: point = 0
   Insn 400: point = 0
   Insn 395: point = 0
   Insn 716: point = 1
   Insn 394: point = 2
   Insn 715: point = 4
	Hard reg 23 is preferable by r735 with profit 58
   Insn 393: point = 6
   Insn 714: point = 8
   Insn 713: point = 9
   Insn 392: point = 10
   Insn 390: point = 12
   Insn 711: point = 14
	Hard reg 22 is preferable by r733 with profit 58
   Insn 389: point = 16
   Insn 712: point = 18
   Insn 710: point = 19
	Hard reg 3 is preferable by r734 with profit 58
   Insn 709: point = 21
   Insn 708: point = 22
	Hard reg 21 is preferable by r732 with profit 58
   Insn 388: point = 24
   Insn 707: point = 26
   Insn 706: point = 27
   Insn 386: point = 28
   Insn 705: point = 29
   Insn 385: point = 30
   Insn 704: point = 32
	Hard reg 24 is preferable by r730 with profit 58
   Insn 384: point = 34
   Insn 703: point = 36
   Insn 702: point = 37
   Insn 383: point = 38
   Insn 381: point = 40
   Insn 700: point = 42
	Hard reg 22 is preferable by r728 with profit 58
   Insn 380: point = 44
   Insn 701: point = 46
   Insn 699: point = 47
	Hard reg 37 is preferable by r729 with profit 58
   Insn 698: point = 49
   Insn 695: point = 50
	Hard reg 21 is preferable by r725 with profit 58
   Insn 379: point = 52
   Insn 696: point = 54
	Hard reg 42 is preferable by r726 with profit 58
   Insn 697: point = 56
   Insn 694: point = 57
	Hard reg 6 is preferable by r727 with profit 58
   Insn 693: point = 59
   Insn 377: point = 60
   Insn 692: point = 61
   Insn 376: point = 62
   Insn 691: point = 64
	Hard reg 22 is preferable by r723 with profit 58
   Insn 375: point = 66
   Insn 690: point = 68
   Insn 689: point = 69
   Insn 374: point = 70
   Insn 688: point = 72
	Hard reg 23 is preferable by r722 with profit 58
   Insn 373: point = 74
   Insn 687: point = 76
   Insn 686: point = 77
   Insn 372: point = 78
   Insn 685: point = 80
	Hard reg 21 is preferable by r721 with profit 58
   Insn 371: point = 82
   Insn 755: point = 84
   Insn 684: point = 85
	   Creating copy r771->r775@58
   Insn 683: point = 87
   Insn 681: point = 88
	Hard reg 22 is preferable by r719 with profit 58
   Insn 370: point = 90
   Insn 682: point = 92
	Hard reg 44 is preferable by r720 with profit 58
   Insn 680: point = 94
   Insn 679: point = 95
   Insn 368: point = 96
   Insn 678: point = 97
   Insn 367: point = 98
   Insn 677: point = 100
	Hard reg 22 is preferable by r717 with profit 58
   Insn 366: point = 102
   Insn 676: point = 104
   Insn 675: point = 105
   Insn 365: point = 106
   Insn 674: point = 108
	Hard reg 24 is preferable by r716 with profit 58
   Insn 364: point = 110
   Insn 673: point = 112
   Insn 672: point = 113
   Insn 363: point = 114
   Insn 670: point = 116
	Hard reg 21 is preferable by r714 with profit 58
   Insn 362: point = 118
   Insn 671: point = 120
	Hard reg 43 is preferable by r715 with profit 58
   Insn 669: point = 122
   Insn 668: point = 123
   Insn 666: point = 124
	Hard reg 22 is preferable by r712 with profit 58
   Insn 361: point = 126
   Insn 667: point = 128
   Insn 665: point = 129
	Hard reg 38 is preferable by r713 with profit 58
   Insn 664: point = 131
   Insn 432: point = 132
   Insn 431: point = 134
   Insn 430: point = 136
   Insn 429: point = 138
   Insn 428: point = 140
   Insn 427: point = 142
   Insn 426: point = 144
   Insn 425: point = 146
	Hard reg 44 is preferable by r771 with profit 58
  BB 6
   Insn 256: point = 149
   Insn 758: point = 149
   Insn 255: point = 151
   Insn 757: point = 151
   Insn 254: point = 153
   Insn 252: point = 153
   Insn 251: point = 155
   Insn 633: point = 157
	   Creating copy r682<-r756@941
   Insn 736: point = 159
   Insn 632: point = 160
	   Creating copy r681->r756@941
   Insn 250: point = 162
   Insn 249: point = 164
   Insn 248: point = 166
   Insn 631: point = 168
	   Creating copy r680<-r757@941
   Insn 737: point = 170
   Insn 630: point = 171
	   Creating copy r679->r757@941
   Insn 247: point = 173
   Insn 246: point = 175
   Insn 628: point = 177
	Hard reg 2 is preferable by r677 with profit 941
   Insn 245: point = 179
   Insn 759: point = 180
   Insn 627: point = 182
   Insn 244: point = 184
   Insn 626: point = 186
	Hard reg 37 is preferable by r676 with profit 941
   Insn 243: point = 188
   Insn 625: point = 188
	   Creating copy r676<-r758@941
   Insn 242: point = 190
   Insn 624: point = 192
   Insn 241: point = 194
   Insn 240: point = 196
   Insn 239: point = 198
   Insn 623: point = 200
	   Creating copy r674<-r758@941
   Insn 738: point = 201
   Insn 238: point = 203
   Insn 621: point = 205
	Hard reg 0 is preferable by r672 with profit 941
   Insn 237: point = 207
   Insn 760: point = 208
   Insn 620: point = 210
   Insn 619: point = 212
   Insn 236: point = 214
   Insn 618: point = 214
	Hard reg 37 is preferable by r671 with profit 941
   Insn 235: point = 216
   Insn 234: point = 218
   Insn 233: point = 220
   Insn 232: point = 222
   Insn 617: point = 224
	   Creating copy r670<-r759@941
   Insn 739: point = 226
   Insn 616: point = 227
	   Creating copy r669->r759@941
   Insn 231: point = 229
   Insn 230: point = 231
   Insn 614: point = 233
	Hard reg 0 is preferable by r667 with profit 941
   Insn 229: point = 235
   Insn 761: point = 236
   Insn 613: point = 238
   Insn 228: point = 240
   Insn 227: point = 242
   Insn 226: point = 244
   Insn 612: point = 246
   Insn 225: point = 248
   Insn 224: point = 250
   Insn 223: point = 252
   Insn 222: point = 254
   Insn 610: point = 256
	Hard reg 0 is preferable by r664 with profit 941
   Insn 221: point = 258
   Insn 762: point = 259
   Insn 609: point = 261
   Insn 608: point = 263
   Insn 220: point = 265
   Insn 607: point = 265
	Hard reg 38 is preferable by r663 with profit 941
   Insn 219: point = 267
   Insn 606: point = 269
	   Creating copy r662<-r760@941
   Insn 740: point = 271
   Insn 605: point = 272
	   Creating copy r661->r760@941
   Insn 218: point = 274
   Insn 217: point = 276
   Insn 216: point = 278
   Insn 215: point = 280
   Insn 214: point = 282
   Insn 603: point = 284
	Hard reg 39 is preferable by r659 with profit 941
   Insn 213: point = 286
   Insn 763: point = 287
   Insn 602: point = 289
   Insn 212: point = 291
   Insn 211: point = 293
   Insn 210: point = 295
   Insn 209: point = 297
   Insn 208: point = 299
   Insn 207: point = 301
   Insn 206: point = 303
   Insn 600: point = 305
	Hard reg 39 is preferable by r657 with profit 941
   Insn 205: point = 307
   Insn 764: point = 308
   Insn 599: point = 310
   Insn 598: point = 312
   Insn 204: point = 314
   Insn 597: point = 314
	Hard reg 40 is preferable by r656 with profit 941
   Insn 203: point = 316
   Insn 202: point = 318
   Insn 596: point = 320
	   Creating copy r655<-r761@941
   Insn 741: point = 322
   Insn 595: point = 323
	   Creating copy r654->r761@941
   Insn 201: point = 325
   Insn 594: point = 325
	Hard reg 41 is preferable by r654 with profit 941
   Insn 200: point = 327
   Insn 593: point = 329
	   Creating copy r653<-r762@941
   Insn 742: point = 331
   Insn 592: point = 332
	   Creating copy r652->r762@941
   Insn 199: point = 334
   Insn 198: point = 336
   Insn 590: point = 338
	Hard reg 5 is preferable by r650 with profit 941
   Insn 197: point = 340
   Insn 754: point = 341
   Insn 589: point = 343
   Insn 196: point = 345
   Insn 195: point = 347
   Insn 194: point = 349
   Insn 193: point = 351
   Insn 192: point = 353
   Insn 191: point = 355
   Insn 190: point = 357
   Insn 587: point = 359
	Hard reg 5 is preferable by r648 with profit 941
   Insn 189: point = 361
   Insn 753: point = 362
   Insn 586: point = 364
   Insn 188: point = 366
   Insn 187: point = 368
   Insn 186: point = 370
   Insn 185: point = 372
   Insn 184: point = 374
   Insn 183: point = 376
   Insn 182: point = 378
   Insn 584: point = 380
	Hard reg 5 is preferable by r646 with profit 941
   Insn 181: point = 382
   Insn 752: point = 383
   Insn 583: point = 385
   Insn 180: point = 387
   Insn 582: point = 389
	Hard reg 37 is preferable by r645 with profit 941
   Insn 179: point = 391
   Insn 581: point = 391
	   Creating copy r645<-r763@941
   Insn 580: point = 393
	Hard reg 43 is preferable by r644 with profit 941
   Insn 178: point = 395
   Insn 579: point = 395
   Insn 177: point = 397
   Insn 578: point = 399
	Hard reg 41 is preferable by r643 with profit 941
   Insn 176: point = 401
   Insn 577: point = 401
   Insn 175: point = 403
   Insn 765: point = 405
   Insn 174: point = 407
   Insn 575: point = 409
	   Creating copy r641<-r763@941
   Insn 743: point = 410
   Insn 573: point = 412
	Hard reg 1 is preferable by r639 with profit 941
   Insn 173: point = 414
   Insn 766: point = 415
   Insn 572: point = 417
   Insn 172: point = 419
   Insn 171: point = 421
   Insn 170: point = 423
   Insn 169: point = 425
   Insn 168: point = 427
   Insn 167: point = 429
   Insn 166: point = 431
   Insn 570: point = 433
	Hard reg 2 is preferable by r637 with profit 941
   Insn 165: point = 435
   Insn 767: point = 436
   Insn 569: point = 438
   Insn 164: point = 440
   Insn 568: point = 442
	Hard reg 38 is preferable by r636 with profit 941
   Insn 163: point = 444
   Insn 567: point = 444
	   Creating copy r636<-r764@941
   Insn 162: point = 446
   Insn 161: point = 448
   Insn 160: point = 450
   Insn 159: point = 452
   Insn 768: point = 454
   Insn 158: point = 456
   Insn 565: point = 458
	   Creating copy r634<-r764@941
   Insn 744: point = 459
   Insn 563: point = 461
	Hard reg 1 is preferable by r632 with profit 941
   Insn 157: point = 463
   Insn 769: point = 464
   Insn 562: point = 466
   Insn 156: point = 468
   Insn 155: point = 470
   Insn 561: point = 472
	   Creating copy r631<-r766@941
   Insn 745: point = 474
   Insn 560: point = 475
	   Creating copy r630->r766@941
   Insn 154: point = 477
   Insn 153: point = 479
   Insn 152: point = 481
   Insn 151: point = 483
   Insn 150: point = 485
   Insn 771: point = 487
	Hard reg 0 is preferable by r789 with profit 941
   Insn 149: point = 489
   Insn 772: point = 490
   Insn 770: point = 492
   Insn 148: point = 494
   Insn 558: point = 496
	Hard reg 40 is preferable by r628 with profit 941
   Insn 147: point = 498
   Insn 557: point = 498
	   Creating copy r628<-r767@941
   Insn 556: point = 500
	Hard reg 2 is preferable by r627 with profit 941
   Insn 146: point = 502
   Insn 555: point = 502
   Insn 145: point = 504
   Insn 144: point = 506
   Insn 143: point = 508
   Insn 142: point = 510
   Insn 554: point = 512
	   Creating copy r626<-r767@941
   Insn 747: point = 513
   Insn 552: point = 515
	Hard reg 1 is preferable by r624 with profit 941
   Insn 141: point = 517
   Insn 773: point = 518
   Insn 551: point = 520
   Insn 550: point = 522
   Insn 140: point = 524
   Insn 549: point = 524
	Hard reg 37 is preferable by r623 with profit 941
   Insn 139: point = 526
   Insn 548: point = 528
	   Creating copy r622<-r770@941
   Insn 749: point = 530
   Insn 547: point = 531
	   Creating copy r621->r770@941
   Insn 138: point = 533
   Insn 137: point = 535
   Insn 136: point = 537
   Insn 135: point = 539
   Insn 134: point = 541
   Insn 133: point = 543
   Insn 132: point = 545
   Insn 131: point = 547
   Insn 130: point = 549
   Insn 129: point = 551
   Insn 128: point = 553
   Insn 127: point = 555
   Insn 774: point = 557
   Insn 126: point = 559
   Insn 125: point = 561
   Insn 775: point = 563
  BB 7
   Insn 409: point = 566
   Insn 663: point = 566
   Insn 354: point = 568
   Insn 662: point = 570
   Insn 351: point = 572
   Insn 661: point = 574
   Insn 349: point = 576
   Insn 348: point = 577
   Insn 660: point = 578
   Insn 345: point = 580
   Insn 344: point = 581
   Insn 659: point = 582
   Insn 342: point = 584
   Insn 658: point = 586
   Insn 339: point = 588
   Insn 657: point = 590
   Insn 337: point = 592
   Insn 336: point = 593
   Insn 656: point = 594
   Insn 333: point = 596
   Insn 332: point = 597
   Insn 655: point = 598
   Insn 330: point = 600
   Insn 654: point = 602
   Insn 327: point = 604
   Insn 653: point = 606
   Insn 325: point = 608
   Insn 324: point = 609
   Insn 652: point = 610
   Insn 321: point = 612
   Insn 320: point = 613
   Insn 651: point = 614
   Insn 318: point = 616
   Insn 650: point = 618
   Insn 315: point = 620
   Insn 649: point = 622
   Insn 313: point = 624
   Insn 312: point = 625
   Insn 648: point = 626
   Insn 309: point = 628
   Insn 308: point = 629
   Insn 647: point = 630
   Insn 306: point = 632
   Insn 646: point = 634
   Insn 303: point = 636
   Insn 645: point = 638
   Insn 301: point = 640
   Insn 300: point = 641
   Insn 644: point = 642
   Insn 297: point = 644
   Insn 296: point = 645
   Insn 643: point = 646
   Insn 294: point = 648
   Insn 642: point = 650
   Insn 291: point = 652
   Insn 641: point = 654
   Insn 289: point = 656
   Insn 288: point = 657
   Insn 640: point = 658
   Insn 285: point = 660
   Insn 284: point = 661
   Insn 756: point = 662
   Insn 282: point = 664
   Insn 639: point = 666
   Insn 279: point = 668
   Insn 638: point = 670
   Insn 277: point = 672
   Insn 276: point = 673
   Insn 637: point = 674
   Insn 273: point = 676
   Insn 272: point = 677
   Insn 270: point = 678
   Insn 267: point = 680
   Insn 636: point = 682
   Insn 265: point = 684
   Insn 264: point = 685
   Insn 263: point = 686
   Insn 261: point = 687
   Insn 260: point = 688
  BB 5
   Insn 424: point = 690
   Insn 423: point = 692
   Insn 422: point = 694
   Insn 421: point = 696
   Insn 420: point = 698
	Hard reg 39 is preferable by r755 with profit 59
   Insn 419: point = 700
   Insn 418: point = 702
   Insn 417: point = 704
   Insn 416: point = 706
   Insn 415: point = 708
   Insn 414: point = 710
   Insn 413: point = 712
   Insn 412: point = 714
   Insn 411: point = 716
   Insn 544: point = 718
   Insn 37: point = 720
   Insn 543: point = 721
	   Creating copy r617->r755@59
   Insn 36: point = 723
   Insn 542: point = 724
   Insn 35: point = 726
   Insn 34: point = 727
   Insn 541: point = 728
   Insn 33: point = 730
   Insn 32: point = 731
   Insn 540: point = 732
   Insn 31: point = 734
   Insn 539: point = 735
   Insn 30: point = 737
   Insn 538: point = 738
   Insn 29: point = 740
   Insn 537: point = 741
   Insn 28: point = 743
   Insn 536: point = 744
   Insn 27: point = 746
   Insn 535: point = 747
   Insn 26: point = 749
   Insn 534: point = 750
   Insn 25: point = 752
   Insn 533: point = 753
   Insn 24: point = 755
   Insn 532: point = 756
   Insn 23: point = 758
   Insn 531: point = 759
   Insn 22: point = 761
   Insn 21: point = 762
   Insn 20: point = 763
   Insn 530: point = 765
   Insn 19: point = 766
   Insn 529: point = 768
   Insn 18: point = 769
   Insn 528: point = 771
   Insn 17: point = 772
   Insn 16: point = 773
   Insn 15: point = 774
   Insn 527: point = 776
   Insn 14: point = 777
   Insn 13: point = 778
   Insn 526: point = 780
   Insn 123: point = 781
  BB 3
   Insn 407: point = 783
   Insn 524: point = 783
   Insn 120: point = 785
   Insn 523: point = 786
	Hard reg 0 is preferable by r598 with profit 29
   Insn 119: point = 788
   Insn 522: point = 789
	Hard reg 3 is preferable by r597 with profit 29
   Insn 118: point = 791
   Insn 521: point = 791
	Hard reg 3 is preferable by r597 with profit 29
	Hard reg 2 is preferable by r597 with profit 29
   Insn 117: point = 793
   Insn 116: point = 794
   Insn 520: point = 796
   Insn 519: point = 797
	Hard reg 42 is preferable by r595 with profit 29
   Insn 115: point = 799
   Insn 518: point = 800
	Hard reg 42 is preferable by r595 with profit 29
	Hard reg 0 is preferable by r595 with profit 29
   Insn 114: point = 802
   Insn 517: point = 803
	Hard reg 6 is preferable by r594 with profit 29
   Insn 113: point = 805
   Insn 516: point = 805
	Hard reg 6 is preferable by r594 with profit 29
	Hard reg 39 is preferable by r594 with profit 29
   Insn 112: point = 807
   Insn 111: point = 808
   Insn 515: point = 810
  BB 4
   Insn 12: point = 812
   Insn 11: point = 813
   Insn 10: point = 814
   Insn 525: point = 815
   Insn 9: point = 817
  BB 2
   Insn 109: point = 819
   Insn 108: point = 819
   Insn 514: point = 820
   Insn 512: point = 821
   Insn 107: point = 823
   Insn 513: point = 824
	   Creating copy r591<-r737@58
   Insn 511: point = 826
	Hard reg 0 is preferable by r590 with profit 58
   Insn 106: point = 828
   Insn 717: point = 829
   Insn 510: point = 830
	   Creating copy r589->r737@58
   Insn 105: point = 832
   Insn 509: point = 834
   Insn 507: point = 835
	Hard reg 41 is preferable by r586 with profit 58
   Insn 104: point = 837
   Insn 508: point = 838
	   Creating copy r587<-r738@58
   Insn 506: point = 840
	Hard reg 41 is preferable by r586 with profit 58
	Hard reg 43 is preferable by r586 with profit 58
   Insn 103: point = 842
   Insn 718: point = 843
   Insn 505: point = 844
	   Creating copy r585->r738@58
   Insn 102: point = 846
   Insn 504: point = 848
   Insn 502: point = 849
   Insn 101: point = 851
   Insn 503: point = 852
	   Creating copy r583<-r739@58
   Insn 501: point = 854
	Hard reg 4 is preferable by r582 with profit 58
   Insn 100: point = 856
   Insn 719: point = 857
   Insn 500: point = 858
	   Creating copy r581->r739@58
   Insn 99: point = 860
   Insn 499: point = 862
   Insn 497: point = 863
	Hard reg 38 is preferable by r578 with profit 58
   Insn 98: point = 865
   Insn 498: point = 866
	   Creating copy r579<-r740@58
   Insn 496: point = 868
	Hard reg 38 is preferable by r578 with profit 58
	Hard reg 41 is preferable by r578 with profit 58
   Insn 97: point = 870
   Insn 720: point = 871
   Insn 495: point = 872
	   Creating copy r577->r740@58
   Insn 96: point = 874
   Insn 494: point = 876
   Insn 493: point = 877
   Insn 95: point = 879
   Insn 492: point = 881
   Insn 491: point = 882
   Insn 94: point = 884
   Insn 490: point = 886
   Insn 489: point = 887
   Insn 93: point = 889
   Insn 488: point = 891
   Insn 487: point = 892
   Insn 92: point = 894
   Insn 486: point = 896
   Insn 485: point = 897
   Insn 91: point = 899
   Insn 484: point = 901
   Insn 483: point = 902
   Insn 90: point = 904
   Insn 482: point = 906
   Insn 481: point = 907
   Insn 89: point = 909
   Insn 480: point = 911
   Insn 479: point = 912
   Insn 88: point = 914
   Insn 478: point = 916
   Insn 87: point = 917
   Insn 477: point = 918
	   Creating copy r559<-r741@58
   Insn 721: point = 920
   Insn 476: point = 921
	   Creating copy r558->r741@58
   Insn 86: point = 923
   Insn 475: point = 923
	Hard reg 44 is preferable by r558 with profit 58
   Insn 85: point = 925
   Insn 84: point = 927
   Insn 474: point = 928
	   Creating copy r557<-r742@58
   Insn 722: point = 930
   Insn 473: point = 931
	   Creating copy r556->r742@58
   Insn 83: point = 933
   Insn 472: point = 933
	Hard reg 44 is preferable by r556 with profit 58
   Insn 82: point = 935
   Insn 81: point = 936
   Insn 471: point = 937
	   Creating copy r555<-r743@58
   Insn 723: point = 939
   Insn 470: point = 940
	   Creating copy r554->r743@58
   Insn 80: point = 942
   Insn 469: point = 942
	Hard reg 0 is preferable by r554 with profit 58
   Insn 79: point = 944
   Insn 78: point = 945
   Insn 468: point = 946
	   Creating copy r553<-r744@58
   Insn 724: point = 948
   Insn 467: point = 949
	   Creating copy r552->r744@58
   Insn 77: point = 951
   Insn 466: point = 951
	Hard reg 0 is preferable by r552 with profit 58
   Insn 76: point = 953
   Insn 75: point = 954
   Insn 465: point = 955
	   Creating copy r551<-r745@58
   Insn 725: point = 957
   Insn 464: point = 958
	   Creating copy r550->r745@58
   Insn 74: point = 960
   Insn 463: point = 960
	Hard reg 43 is preferable by r550 with profit 58
   Insn 73: point = 962
   Insn 72: point = 963
   Insn 462: point = 964
	   Creating copy r549<-r746@58
   Insn 726: point = 966
   Insn 461: point = 967
	   Creating copy r548->r746@58
   Insn 71: point = 969
   Insn 460: point = 969
	Hard reg 43 is preferable by r548 with profit 58
   Insn 70: point = 971
   Insn 69: point = 972
   Insn 459: point = 973
	   Creating copy r547<-r747@58
   Insn 727: point = 975
   Insn 458: point = 976
	   Creating copy r546->r747@58
   Insn 68: point = 978
   Insn 457: point = 978
	Hard reg 0 is preferable by r546 with profit 58
   Insn 67: point = 980
   Insn 66: point = 981
   Insn 456: point = 982
	   Creating copy r545<-r748@58
   Insn 728: point = 984
   Insn 455: point = 985
	   Creating copy r544->r748@58
   Insn 65: point = 987
   Insn 454: point = 987
	Hard reg 0 is preferable by r544 with profit 58
   Insn 64: point = 989
   Insn 63: point = 990
   Insn 453: point = 991
	   Creating copy r543<-r749@58
   Insn 729: point = 993
   Insn 452: point = 994
	   Creating copy r542->r749@58
   Insn 62: point = 996
   Insn 451: point = 996
	Hard reg 3 is preferable by r542 with profit 58
   Insn 61: point = 998
   Insn 60: point = 999
   Insn 450: point = 1000
	   Creating copy r541<-r750@58
   Insn 730: point = 1002
   Insn 449: point = 1003
	   Creating copy r540->r750@58
   Insn 59: point = 1005
   Insn 448: point = 1005
	Hard reg 3 is preferable by r540 with profit 58
   Insn 58: point = 1007
   Insn 57: point = 1008
   Insn 447: point = 1009
	   Creating copy r539<-r751@58
   Insn 731: point = 1011
   Insn 446: point = 1012
	   Creating copy r538->r751@58
   Insn 56: point = 1014
   Insn 445: point = 1014
	Hard reg 0 is preferable by r538 with profit 58
   Insn 55: point = 1016
   Insn 54: point = 1017
   Insn 444: point = 1018
	   Creating copy r537<-r752@58
   Insn 732: point = 1020
   Insn 443: point = 1021
	   Creating copy r536->r752@58
   Insn 53: point = 1023
   Insn 442: point = 1023
	Hard reg 0 is preferable by r536 with profit 58
   Insn 52: point = 1025
   Insn 51: point = 1026
   Insn 441: point = 1027
	   Creating copy r535<-r753@58
   Insn 733: point = 1029
   Insn 440: point = 1030
	   Creating copy r534->r753@58
   Insn 50: point = 1032
   Insn 439: point = 1032
	Hard reg 0 is preferable by r534 with profit 58
   Insn 49: point = 1034
   Insn 48: point = 1035
   Insn 438: point = 1036
	   Creating copy r533<-r754@58
   Insn 734: point = 1038
   Insn 437: point = 1039
	   Creating copy r532->r754@58
   Insn 47: point = 1041
   Insn 436: point = 1041
	Hard reg 38 is preferable by r532 with profit 58
   Insn 46: point = 1043
   Insn 45: point = 1044
   Insn 435: point = 1044
	Hard reg 5 is preferable by r531 with profit 58
   Insn 44: point = 1046
   Insn 434: point = 1046
	Hard reg 5 is preferable by r531 with profit 58
	Hard reg 6 is preferable by r531 with profit 58
   Insn 43: point = 1048
   Insn 42: point = 1049
   Insn 41: point = 1049
   Insn 40: point = 1051
   Insn 7: point = 1052
   Insn 6: point = 1053
 r100: [152..762] [149..149]
 r119: [104..912]
 r120: [103..907]
 r121: [68..902]
 r122: [67..897]
 r123: [36..892]
 r124: [35..887]
 r125: [8..882]
 r126: [7..877]
 r127: [112..871]
 r128: [111..857]
 r129: [76..843]
 r130: [75..829]
 r132: [801..808]
 r133: [787..794]
 r135: [542..555]
 r137: [538..551]
 r138: [534..549]
 r140: [527..545]
 r143: [358..539]
 r145: [300..535]
 r146: [247..530]
 r148: [202..522]
 r151: [486..508]
 r153: [482..504]
 r154: [478..500]
 r156: [471..494]
 r159: [304..483]
 r161: [251..479]
 r162: [193..474]
 r164: [348..468]
 r167: [432..452]
 r169: [428..448]
 r170: [424..446]
 r172: [422..440]
 r175: [255..429]
 r177: [197..425]
 r178: [350..423]
 r180: [294..419]
 r183: [379..403]
 r185: [375..397]
 r186: [371..393]
 r188: [369..387]
 r191: [204..376]
 r193: [354..372]
 r194: [296..370]
 r196: [243..366]
 r197: [396..821] [83..271]
 r200: [337..355]
 r202: [328..351]
 r203: [319..349]
 r205: [317..345]
 r208: [558..778] [122..331]
 r210: [812..815] [402..783] [17..322]
 r211: [709..835]
 r214: [514..769] [45..312]
 r217: [283..301]
 r219: [279..297]
 r220: [275..295]
 r222: [268..291]
 r225: [691..777] [121..144]
 r227: [812..812] [717..803] [58..142]
 r230: [460..766] [26..263]
 r233: [232..252]
 r235: [223..248]
 r236: [219..244]
 r238: [217..240]
 r241: [455..774] [94..226]
 r243: [812..813] [715..797] [55..140]
 r244: [713..863] [130..138]
 r246: [411..763] [25..212]
 r250: [176..198]
 r252: [167..194]
 r253: [163..190]
 r255: [156..184]
 r258: [711..773] [93..136]
 r260: [812..814] [707..789] [20..134]
 r262: [503..849] [127..159]
 r264: [705..772] [48..132]
 r269: [703..781]
 r287: [701..1049]
 r290: [690..718] [564..682]
 r291: [693..1044]
 r295: [690..1038] [521..674]
 r298: [690..724] [519..670]
 r299: [690..1029] [491..666]
 r300: [697..727]
 r303: [690..1020] [467..658]
 r306: [690..728] [465..654]
 r307: [690..1011] [439..650]
 r308: [695..731]
 r311: [690..1002] [418..642]
 r314: [690..732] [416..638]
 r315: [690..993] [386..634]
 r316: [690..735] [384..630]
 r319: [690..984] [365..626]
 r322: [690..738] [363..622]
 r323: [690..975] [344..618]
 r324: [690..741] [342..614]
 r327: [690..966] [311..610]
 r330: [690..744] [309..606]
 r331: [690..957] [290..602]
 r332: [690..747] [288..598]
 r335: [690..948] [262..594]
 r338: [690..750] [260..590]
 r339: [690..939] [239..586]
 r340: [690..753] [237..582]
 r343: [690..930] [211..578]
 r346: [690..756] [209..574]
 r347: [690..920] [183..570]
 r348: [690..759] [181..566]
 r351: [926..1052]
 r352: [1050..1051]
 r353: [1047..1048]
 r354: [1042..1043]
 r355: [1033..1034]
 r356: [1024..1025]
 r357: [1015..1016]
 r358: [1006..1007]
 r359: [997..998]
 r360: [988..989]
 r361: [979..980]
 r362: [970..971]
 r363: [961..962]
 r364: [952..953]
 r365: [943..944]
 r366: [934..935]
 r367: [924..925]
 r368: [869..870]
 r369: [855..856]
 r370: [841..842]
 r371: [827..828]
 r372: [806..807]
 r373: [799..802]
 r374: [792..793]
 r375: [785..788]
 r376: [560..561]
 r377: [556..559]
 r378: [552..553]
 r379: [546..547]
 r380: [542..543]
 r381: [540..541]
 r382: [536..537]
 r383: [525..526]
 r384: [511..515]
 r385: [509..510]
 r386: [505..506]
 r387: [495..496]
 r388: [486..487]
 r389: [484..485]
 r390: [480..481]
 r391: [469..470]
 r392: [457..461]
 r393: [453..456]
 r394: [449..450]
 r395: [441..442]
 r396: [432..433]
 r397: [430..431]
 r398: [426..427]
 r399: [420..421]
 r400: [408..412]
 r401: [404..407]
 r402: [398..399]
 r403: [388..389]
 r404: [379..380]
 r405: [377..378]
 r406: [373..374]
 r407: [367..368]
 r408: [358..359]
 r409: [356..357]
 r410: [352..353]
 r411: [346..347]
 r412: [337..338]
 r413: [335..336]
 r414: [326..327]
 r415: [315..316]
 r416: [304..305]
 r417: [302..303]
 r418: [298..299]
 r419: [292..293]
 r420: [283..284]
 r421: [281..282]
 r422: [277..278]
 r423: [266..267]
 r424: [255..256]
 r425: [253..254]
 r426: [249..250]
 r427: [241..242]
 r428: [232..233]
 r429: [230..231]
 r430: [221..222]
 r431: [215..216]
 r432: [204..205]
 r433: [199..203]
 r434: [195..196]
 r435: [185..186]
 r436: [176..177]
 r437: [174..175]
 r438: [165..166]
 r439: [154..155]
 r440: [679..688]
 r441: [569..686]
 r442: [681..685]
 r446: [665..677]
 r448: [669..673]
 r452: [649..661]
 r454: [653..657]
 r458: [633..645]
 r460: [637..641]
 r464: [617..629]
 r466: [621..625]
 r470: [601..613]
 r472: [605..609]
 r476: [585..597]
 r478: [589..593]
 r482: [569..581]
 r484: [573..577]
 r488: [115..124]
 r489: [115..116]
 r490: [107..114]
 r491: [39..108]
 r492: [99..106]
 r493: [99..100]
 r494: [96..98]
 r495: [79..88]
 r496: [79..80]
 r497: [71..78]
 r498: [11..72]
 r499: [63..70]
 r500: [63..64]
 r501: [60..62]
 r502: [41..50]
 r503: [41..42]
 r504: [39..40]
 r506: [31..38]
 r507: [31..32]
 r508: [28..30]
 r509: [13..22]
 r510: [13..14]
 r511: [11..12]
 r513: [3..10]
 r514: [3..4]
 r515: [0..2]
 r517: [447..708] [147..318]
 r518: [509..690] [145..280]
 r519: [554..716] [143..276]
 r520: [507..714] [141..220]
 r521: [550..712] [139..218]
 r522: [406..710] [137..170]
 r523: [451..706] [135..164]
 r524: [548..704] [133..153]
 r525: [149..702]
 r526: [690..700] [562..687]
 r527: [690..692] [544..680]
 r528: [690..698] [544..678]
 r529: [690..696] [493..662]
 r530: [690..694] [437..646]
 r531: [1045..1046]
 r532: [1040..1041]
 r533: [1035..1036]
 r534: [1031..1032]
 r535: [1026..1027]
 r536: [1022..1023]
 r537: [1017..1018]
 r538: [1013..1014]
 r539: [1008..1009]
 r540: [1004..1005]
 r541: [999..1000]
 r542: [995..996]
 r543: [990..991]
 r544: [986..987]
 r545: [981..982]
 r546: [977..978]
 r547: [972..973]
 r548: [968..969]
 r549: [963..964]
 r550: [959..960]
 r551: [954..955]
 r552: [950..951]
 r553: [945..946]
 r554: [941..942]
 r555: [936..937]
 r556: [932..933]
 r557: [927..928]
 r558: [922..923]
 r559: [917..918]
 r560: [915..916]
 r561: [913..914]
 r562: [910..911]
 r563: [908..909]
 r564: [905..906]
 r565: [903..904]
 r566: [900..901]
 r567: [898..899]
 r568: [895..896]
 r569: [893..894]
 r570: [890..891]
 r571: [888..889]
 r572: [885..886]
 r573: [883..884]
 r574: [880..881]
 r575: [878..879]
 r576: [875..876]
 r577: [873..874]
 r578: [864..868]
 r579: [865..866]
 r580: [861..862]
 r581: [859..860]
 r582: [850..854]
 r583: [851..852]
 r584: [847..848]
 r585: [845..846]
 r586: [836..840]
 r587: [837..838]
 r588: [833..834]
 r589: [831..832]
 r590: [822..826]
 r591: [823..824]
 r592: [819..820]
 r593: [809..810]
 r594: [804..805]
 r595: [798..800]
 r596: [795..796]
 r597: [790..791]
 r598: [784..786]
 r599: [816..817]
 r600: [779..780]
 r601: [775..776]
 r602: [770..771]
 r603: [767..768]
 r604: [764..765]
 r605: [760..761]
 r606: [757..758]
 r607: [754..755]
 r608: [751..752]
 r609: [748..749]
 r610: [745..746]
 r611: [742..743]
 r612: [739..740]
 r613: [736..737]
 r614: [733..734]
 r615: [729..730]
 r616: [725..726]
 r617: [722..723]
 r618: [719..720]
 r621: [532..533]
 r622: [527..528]
 r623: [523..524]
 r624: [516..520]
 r626: [511..512]
 r627: [501..502]
 r628: [497..498]
 r630: [476..477]
 r631: [471..472]
 r632: [462..466]
 r634: [457..458]
 r636: [443..444]
 r637: [434..438]
 r639: [413..417]
 r641: [408..409]
 r643: [400..401]
 r644: [394..395]
 r645: [390..391]
 r646: [381..385]
 r648: [360..364]
 r650: [339..343]
 r652: [333..334]
 r653: [328..329]
 r654: [324..325]
 r655: [319..320]
 r656: [313..314]
 r657: [306..310]
 r659: [285..289]
 r661: [273..274]
 r662: [268..269]
 r663: [264..265]
 r664: [257..261]
 r666: [245..246]
 r667: [234..238]
 r669: [228..229]
 r670: [223..224]
 r671: [213..214]
 r672: [206..210]
 r674: [199..200]
 r675: [191..192]
 r676: [187..188]
 r677: [178..182]
 r679: [172..173]
 r680: [167..168]
 r681: [161..162]
 r682: [156..157]
 r684: [683..684]
 r685: [675..676]
 r686: [671..672]
 r687: [667..668]
 r688: [659..660]
 r689: [655..656]
 r690: [651..652]
 r691: [647..648]
 r692: [643..644]
 r693: [639..640]
 r694: [635..636]
 r695: [631..632]
 r696: [627..628]
 r697: [623..624]
 r698: [619..620]
 r699: [615..616]
 r700: [611..612]
 r701: [607..608]
 r702: [603..604]
 r703: [599..600]
 r704: [595..596]
 r705: [591..592]
 r706: [587..588]
 r707: [583..584]
 r708: [579..580]
 r709: [575..576]
 r710: [571..572]
 r711: [567..568]
 r712: [125..131]
 r713: [128..129]
 r714: [117..123]
 r715: [119..120]
 r716: [109..113]
 r717: [101..105]
 r718: [96..97]
 r719: [89..95]
 r720: [91..92]
 r721: [81..87]
 r722: [73..77]
 r723: [65..69]
 r724: [60..61]
 r725: [51..59]
 r726: [53..54]
 r727: [56..57]
 r728: [43..49]
 r729: [46..47]
 r730: [33..37]
 r731: [28..29]
 r732: [23..27]
 r733: [15..21]
 r734: [18..19]
 r735: [5..9]
 r736: [0..1]
 r737: [825..830]
 r738: [839..844]
 r739: [853..858]
 r740: [867..872]
 r741: [919..921]
 r742: [929..931]
 r743: [938..940]
 r744: [947..949]
 r745: [956..958]
 r746: [965..967]
 r747: [974..976]
 r748: [983..985]
 r749: [992..994]
 r750: [1001..1003]
 r751: [1010..1012]
 r752: [1019..1021]
 r753: [1028..1030]
 r754: [1037..1039]
 r755: [699..721]
 r756: [158..160]
 r757: [169..171]
 r758: [189..201]
 r759: [225..227]
 r760: [270..272]
 r761: [321..323]
 r762: [330..332]
 r763: [392..410]
 r764: [445..459]
 r766: [473..475]
 r767: [499..513]
 r770: [529..531]
 r771: [86..146]
 r772: [382..383]
 r773: [361..362]
 r774: [340..341]
 r775: [84..85]
 r776: [663..664]
 r777: [150..151]
 r778: [179..180]
 r779: [207..208]
 r780: [235..236]
 r781: [258..259]
 r782: [286..287]
 r783: [307..308]
 r784: [404..405]
 r785: [414..415]
 r786: [435..436]
 r787: [453..454]
 r788: [463..464]
 r789: [488..492]
 r790: [489..490]
 r791: [517..518]
 r792: [556..557]
 r793: [562..563]
Compressing live ranges: from 1053 to 855 - 81%
Ranges after the compression:
 r100: [94..628] [91..91]
 r119: [60..732]
 r120: [60..728]
 r121: [40..724]
 r122: [40..720]
 r123: [20..716]
 r124: [20..712]
 r125: [4..708]
 r126: [4..704]
 r127: [64..700]
 r128: [64..690]
 r129: [44..680]
 r130: [44..670]
 r132: [651..656]
 r133: [641..646]
 r135: [458..471]
 r137: [454..467]
 r138: [450..465]
 r140: [444..461]
 r143: [286..455]
 r145: [232..451]
 r146: [182..447]
 r148: [140..439]
 r151: [406..427]
 r153: [402..423]
 r154: [398..419]
 r156: [392..413]
 r159: [236..403]
 r161: [186..399]
 r162: [132..395]
 r164: [276..389]
 r167: [356..375]
 r169: [352..371]
 r170: [348..369]
 r172: [346..363]
 r175: [190..353]
 r177: [136..349]
 r178: [278..347]
 r180: [226..343]
 r183: [306..329]
 r185: [302..323]
 r186: [298..319]
 r188: [296..313]
 r191: [142..303]
 r193: [282..299]
 r194: [228..297]
 r196: [178..293]
 r197: [322..664] [48..205]
 r200: [266..283]
 r202: [258..279]
 r203: [250..277]
 r205: [248..273]
 r208: [474..636] [70..261]
 r210: [659..660] [328..638] [10..253]
 r211: [591..674]
 r214: [432..632] [26..243]
 r217: [216..233]
 r219: [212..229]
 r220: [208..227]
 r222: [202..223]
 r225: [573..636] [70..87]
 r227: [659..659] [599..652] [34..85]
 r230: [382..630] [14..197]
 r233: [168..187]
 r235: [160..183]
 r236: [156..179]
 r238: [154..175]
 r241: [378..634] [54..163]
 r243: [659..660] [597..648] [32..83]
 r244: [595..694] [74..81]
 r246: [336..628] [14..149]
 r250: [116..137]
 r252: [108..133]
 r253: [104..129]
 r255: [98..123]
 r258: [593..634] [54..79]
 r260: [659..660] [589..642] [12..77]
 r262: [422..684] [72..101]
 r264: [587..634] [28..75]
 r269: [585..638]
 r287: [583..852]
 r290: [572..600] [480..569]
 r291: [575..848]
 r295: [572..844] [438..563]
 r298: [572..604] [436..561]
 r299: [572..836] [410..557]
 r300: [579..606]
 r303: [572..828] [388..551]
 r306: [572..606] [386..549]
 r307: [572..820] [362..545]
 r308: [577..608]
 r311: [572..812] [342..539]
 r314: [572..608] [340..537]
 r315: [572..804] [312..533]
 r316: [572..610] [310..529]
 r319: [572..796] [292..527]
 r322: [572..612] [290..525]
 r323: [572..788] [272..521]
 r324: [572..614] [270..517]
 r327: [572..780] [242..515]
 r330: [572..616] [240..513]
 r331: [572..772] [222..509]
 r332: [572..618] [220..505]
 r335: [572..764] [196..503]
 r338: [572..620] [194..501]
 r339: [572..756] [174..497]
 r340: [572..622] [172..493]
 r343: [572..748] [148..491]
 r346: [572..624] [146..489]
 r347: [572..740] [122..485]
 r348: [572..626] [120..481]
 r351: [745..854]
 r352: [853..854]
 r353: [851..852]
 r354: [847..848]
 r355: [839..840]
 r356: [831..832]
 r357: [823..824]
 r358: [815..816]
 r359: [807..808]
 r360: [799..800]
 r361: [791..792]
 r362: [783..784]
 r363: [775..776]
 r364: [767..768]
 r365: [759..760]
 r366: [751..752]
 r367: [743..744]
 r368: [699..700]
 r369: [689..690]
 r370: [679..680]
 r371: [669..670]
 r372: [655..656]
 r373: [649..652]
 r374: [645..646]
 r375: [639..642]
 r376: [476..477]
 r377: [472..475]
 r378: [468..469]
 r379: [462..463]
 r380: [458..459]
 r381: [456..457]
 r382: [452..453]
 r383: [442..443]
 r384: [430..433]
 r385: [428..429]
 r386: [424..425]
 r387: [414..415]
 r388: [406..407]
 r389: [404..405]
 r390: [400..401]
 r391: [390..391]
 r392: [380..383]
 r393: [376..379]
 r394: [372..373]
 r395: [364..365]
 r396: [356..357]
 r397: [354..355]
 r398: [350..351]
 r399: [344..345]
 r400: [334..337]
 r401: [330..333]
 r402: [324..325]
 r403: [314..315]
 r404: [306..307]
 r405: [304..305]
 r406: [300..301]
 r407: [294..295]
 r408: [286..287]
 r409: [284..285]
 r410: [280..281]
 r411: [274..275]
 r412: [266..267]
 r413: [264..265]
 r414: [256..257]
 r415: [246..247]
 r416: [236..237]
 r417: [234..235]
 r418: [230..231]
 r419: [224..225]
 r420: [216..217]
 r421: [214..215]
 r422: [210..211]
 r423: [200..201]
 r424: [190..191]
 r425: [188..189]
 r426: [184..185]
 r427: [176..177]
 r428: [168..169]
 r429: [166..167]
 r430: [158..159]
 r431: [152..153]
 r432: [142..143]
 r433: [138..141]
 r434: [134..135]
 r435: [124..125]
 r436: [116..117]
 r437: [114..115]
 r438: [106..107]
 r439: [96..97]
 r440: [566..571]
 r441: [484..571]
 r442: [568..571]
 r446: [556..565]
 r448: [560..563]
 r452: [544..553]
 r454: [548..551]
 r458: [532..541]
 r460: [536..539]
 r464: [520..529]
 r466: [524..527]
 r470: [508..517]
 r472: [512..515]
 r476: [496..505]
 r478: [500..503]
 r482: [484..493]
 r484: [488..491]
 r488: [66..71]
 r489: [66..67]
 r490: [62..65]
 r491: [22..63]
 r492: [58..61]
 r493: [58..59]
 r494: [56..57]
 r495: [46..51]
 r496: [46..47]
 r497: [42..45]
 r498: [6..43]
 r499: [38..41]
 r500: [38..39]
 r501: [36..37]
 r502: [24..29]
 r503: [24..25]
 r504: [22..23]
 r506: [18..21]
 r507: [18..19]
 r508: [16..17]
 r509: [8..13]
 r510: [8..9]
 r511: [6..7]
 r513: [2..5]
 r514: [2..3]
 r515: [0..1]
 r517: [370..590] [90..249]
 r518: [428..572] [88..213]
 r519: [470..598] [86..209]
 r520: [426..596] [84..157]
 r521: [466..594] [82..155]
 r522: [332..592] [80..111]
 r523: [374..588] [78..105]
 r524: [464..586] [76..95]
 r525: [91..584]
 r526: [478..582]
 r527: [572..574] [460..567]
 r528: [572..580] [460..565]
 r529: [572..578] [412..553]
 r530: [572..576] [360..541]
 r531: [849..850]
 r532: [845..846]
 r533: [841..842]
 r534: [837..838]
 r535: [833..834]
 r536: [829..830]
 r537: [825..826]
 r538: [821..822]
 r539: [817..818]
 r540: [813..814]
 r541: [809..810]
 r542: [805..806]
 r543: [801..802]
 r544: [797..798]
 r545: [793..794]
 r546: [789..790]
 r547: [785..786]
 r548: [781..782]
 r549: [777..778]
 r550: [773..774]
 r551: [769..770]
 r552: [765..766]
 r553: [761..762]
 r554: [757..758]
 r555: [753..754]
 r556: [749..750]
 r557: [745..746]
 r558: [741..742]
 r559: [737..738]
 r560: [735..736]
 r561: [733..734]
 r562: [731..732]
 r563: [729..730]
 r564: [727..728]
 r565: [725..726]
 r566: [723..724]
 r567: [721..722]
 r568: [719..720]
 r569: [717..718]
 r570: [715..716]
 r571: [713..714]
 r572: [711..712]
 r573: [709..710]
 r574: [707..708]
 r575: [705..706]
 r576: [703..704]
 r577: [701..702]
 r578: [695..698]
 r579: [695..696]
 r580: [693..694]
 r581: [691..692]
 r582: [685..688]
 r583: [685..686]
 r584: [683..684]
 r585: [681..682]
 r586: [675..678]
 r587: [675..676]
 r588: [673..674]
 r589: [671..672]
 r590: [665..668]
 r591: [665..666]
 r592: [663..664]
 r593: [657..658]
 r594: [653..654]
 r595: [649..650]
 r596: [647..648]
 r597: [643..644]
 r598: [639..640]
 r599: [661..662]
 r600: [637..638]
 r601: [635..636]
 r602: [633..634]
 r603: [631..632]
 r604: [629..630]
 r605: [627..628]
 r606: [625..626]
 r607: [623..624]
 r608: [621..622]
 r609: [619..620]
 r610: [617..618]
 r611: [615..616]
 r612: [613..614]
 r613: [611..612]
 r614: [609..610]
 r615: [607..608]
 r616: [605..606]
 r617: [603..604]
 r618: [601..602]
 r621: [448..449]
 r622: [444..445]
 r623: [440..441]
 r624: [434..437]
 r626: [430..431]
 r627: [420..421]
 r628: [416..417]
 r630: [396..397]
 r631: [392..393]
 r632: [384..387]
 r634: [380..381]
 r636: [366..367]
 r637: [358..361]
 r639: [338..341]
 r641: [334..335]
 r643: [326..327]
 r644: [320..321]
 r645: [316..317]
 r646: [308..311]
 r648: [288..291]
 r650: [268..271]
 r652: [262..263]
 r653: [258..259]
 r654: [254..255]
 r655: [250..251]
 r656: [244..245]
 r657: [238..241]
 r659: [218..221]
 r661: [206..207]
 r662: [202..203]
 r663: [198..199]
 r664: [192..195]
 r666: [180..181]
 r667: [170..173]
 r669: [164..165]
 r670: [160..161]
 r671: [150..151]
 r672: [144..147]
 r674: [138..139]
 r675: [130..131]
 r676: [126..127]
 r677: [118..121]
 r679: [112..113]
 r680: [108..109]
 r681: [102..103]
 r682: [98..99]
 r684: [570..571]
 r685: [564..565]
 r686: [562..563]
 r687: [558..559]
 r688: [552..553]
 r689: [550..551]
 r690: [546..547]
 r691: [542..543]
 r692: [540..541]
 r693: [538..539]
 r694: [534..535]
 r695: [530..531]
 r696: [528..529]
 r697: [526..527]
 r698: [522..523]
 r699: [518..519]
 r700: [516..517]
 r701: [514..515]
 r702: [510..511]
 r703: [506..507]
 r704: [504..505]
 r705: [502..503]
 r706: [498..499]
 r707: [494..495]
 r708: [492..493]
 r709: [490..491]
 r710: [486..487]
 r711: [482..483]
 r712: [72..75]
 r713: [72..73]
 r714: [68..71]
 r715: [68..69]
 r716: [64..65]
 r717: [60..61]
 r718: [56..57]
 r719: [52..55]
 r720: [52..53]
 r721: [48..51]
 r722: [44..45]
 r723: [40..41]
 r724: [36..37]
 r725: [30..35]
 r726: [30..31]
 r727: [32..33]
 r728: [26..29]
 r729: [26..27]
 r730: [20..21]
 r731: [16..17]
 r732: [14..15]
 r733: [10..13]
 r734: [10..11]
 r735: [4..5]
 r736: [0..1]
 r737: [667..670]
 r738: [677..680]
 r739: [687..690]
 r740: [697..700]
 r741: [739..740]
 r742: [747..748]
 r743: [755..756]
 r744: [763..764]
 r745: [771..772]
 r746: [779..780]
 r747: [787..788]
 r748: [795..796]
 r749: [803..804]
 r750: [811..812]
 r751: [819..820]
 r752: [827..828]
 r753: [835..836]
 r754: [843..844]
 r755: [581..602]
 r756: [100..101]
 r757: [110..111]
 r758: [128..139]
 r759: [162..163]
 r760: [204..205]
 r761: [252..253]
 r762: [260..261]
 r763: [318..335]
 r764: [368..381]
 r766: [394..395]
 r767: [418..431]
 r770: [446..447]
 r771: [50..89]
 r772: [308..309]
 r773: [288..289]
 r774: [268..269]
 r775: [48..49]
 r776: [554..555]
 r777: [92..93]
 r778: [118..119]
 r779: [144..145]
 r780: [170..171]
 r781: [192..193]
 r782: [218..219]
 r783: [238..239]
 r784: [330..331]
 r785: [338..339]
 r786: [358..359]
 r787: [376..377]
 r788: [384..385]
 r789: [408..411]
 r790: [408..409]
 r791: [434..435]
 r792: [472..473]
 r793: [478..479]

********** Inheritance #2: **********

EBB 2 3
EBB 4
EBB 5
EBB 6 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=794 from oldreg=162, assigning class GENERAL_REGS to inheritance r794
    Original reg change 162->794 (bb6):
  745: r794:DI=r766:DI
    Add original<-inheritance after:
  776: r162:DI=r794:DI

    Inheritance reuse change 162->794 (bb6):
  624: r675:DI=r794:DI
      REG_DEAD r794:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=795 from oldreg=148, assigning class GENERAL_REGS to inheritance r795
    Original reg change 148->795 (bb6):
  550: r795:DI=r623:DI
      REG_DEAD r623:DI
    Add original<-inheritance after:
  777: r148:DI=r795:DI

    Inheritance reuse change 148->795 (bb6):
  738: r758:DI=r795:DI
      REG_DEAD r795:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=796 from oldreg=146, assigning class GENERAL_REGS to inheritance r796
    Original reg change 146->796 (bb6):
  749: r796:DI=r770:DI
    Add original<-inheritance after:
  778: r146:DI=r796:DI

    Inheritance reuse change 146->796 (bb6):
  612: r666:DI=r796:DI
      REG_DEAD r796:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   776: r162:DI=r794:DI
deleting insn with uid = 776.
	    Removing dead insn:
   777: r148:DI=r795:DI
deleting insn with uid = 777.
	    Removing dead insn:
   778: r146:DI=r796:DI
deleting insn with uid = 778.
EBB 8

********** Pseudo live ranges #6: **********

  BB 8
   Insn 401: point = 0
   Insn 400: point = 0
   Insn 395: point = 0
   Insn 716: point = 1
   Insn 394: point = 2
   Insn 715: point = 4
	Hard reg 23 is preferable by r735 with profit 58
   Insn 393: point = 6
   Insn 714: point = 8
   Insn 713: point = 9
   Insn 392: point = 10
   Insn 390: point = 12
   Insn 711: point = 14
	Hard reg 22 is preferable by r733 with profit 58
   Insn 389: point = 16
   Insn 712: point = 18
   Insn 710: point = 19
	Hard reg 3 is preferable by r734 with profit 58
   Insn 709: point = 21
   Insn 708: point = 22
	Hard reg 21 is preferable by r732 with profit 58
   Insn 388: point = 24
   Insn 707: point = 26
   Insn 706: point = 27
   Insn 386: point = 28
   Insn 705: point = 29
   Insn 385: point = 30
   Insn 704: point = 32
	Hard reg 24 is preferable by r730 with profit 58
   Insn 384: point = 34
   Insn 703: point = 36
   Insn 702: point = 37
   Insn 383: point = 38
   Insn 381: point = 40
   Insn 700: point = 42
	Hard reg 22 is preferable by r728 with profit 58
   Insn 380: point = 44
   Insn 701: point = 46
   Insn 699: point = 47
	Hard reg 37 is preferable by r729 with profit 58
   Insn 698: point = 49
   Insn 695: point = 50
	Hard reg 21 is preferable by r725 with profit 58
   Insn 379: point = 52
   Insn 696: point = 54
	Hard reg 42 is preferable by r726 with profit 58
   Insn 697: point = 56
   Insn 694: point = 57
	Hard reg 6 is preferable by r727 with profit 58
   Insn 693: point = 59
   Insn 377: point = 60
   Insn 692: point = 61
   Insn 376: point = 62
   Insn 691: point = 64
	Hard reg 22 is preferable by r723 with profit 58
   Insn 375: point = 66
   Insn 690: point = 68
   Insn 689: point = 69
   Insn 374: point = 70
   Insn 688: point = 72
	Hard reg 23 is preferable by r722 with profit 58
   Insn 373: point = 74
   Insn 687: point = 76
   Insn 686: point = 77
   Insn 372: point = 78
   Insn 685: point = 80
	Hard reg 21 is preferable by r721 with profit 58
   Insn 371: point = 82
   Insn 755: point = 84
   Insn 684: point = 85
	   Creating copy r771->r775@58
   Insn 683: point = 87
   Insn 681: point = 88
	Hard reg 22 is preferable by r719 with profit 58
   Insn 370: point = 90
   Insn 682: point = 92
	Hard reg 44 is preferable by r720 with profit 58
   Insn 680: point = 94
   Insn 679: point = 95
   Insn 368: point = 96
   Insn 678: point = 97
   Insn 367: point = 98
   Insn 677: point = 100
	Hard reg 22 is preferable by r717 with profit 58
   Insn 366: point = 102
   Insn 676: point = 104
   Insn 675: point = 105
   Insn 365: point = 106
   Insn 674: point = 108
	Hard reg 24 is preferable by r716 with profit 58
   Insn 364: point = 110
   Insn 673: point = 112
   Insn 672: point = 113
   Insn 363: point = 114
   Insn 670: point = 116
	Hard reg 21 is preferable by r714 with profit 58
   Insn 362: point = 118
   Insn 671: point = 120
	Hard reg 43 is preferable by r715 with profit 58
   Insn 669: point = 122
   Insn 668: point = 123
   Insn 666: point = 124
	Hard reg 22 is preferable by r712 with profit 58
   Insn 361: point = 126
   Insn 667: point = 128
   Insn 665: point = 129
	Hard reg 38 is preferable by r713 with profit 58
   Insn 664: point = 131
   Insn 432: point = 132
   Insn 431: point = 134
   Insn 430: point = 136
   Insn 429: point = 138
   Insn 428: point = 140
   Insn 427: point = 142
   Insn 426: point = 144
   Insn 425: point = 146
	Hard reg 44 is preferable by r771 with profit 58
  BB 6
   Insn 256: point = 149
   Insn 758: point = 149
   Insn 255: point = 151
   Insn 757: point = 151
   Insn 254: point = 153
   Insn 252: point = 153
   Insn 251: point = 155
   Insn 633: point = 157
	   Creating copy r682<-r756@941
   Insn 736: point = 159
   Insn 632: point = 160
	   Creating copy r681->r756@941
   Insn 250: point = 162
   Insn 249: point = 164
   Insn 248: point = 166
   Insn 631: point = 168
	   Creating copy r680<-r757@941
   Insn 737: point = 170
   Insn 630: point = 171
	   Creating copy r679->r757@941
   Insn 247: point = 173
   Insn 246: point = 175
   Insn 628: point = 177
	Hard reg 2 is preferable by r677 with profit 941
   Insn 245: point = 179
   Insn 759: point = 180
   Insn 627: point = 182
   Insn 244: point = 184
   Insn 626: point = 186
	Hard reg 37 is preferable by r676 with profit 941
   Insn 243: point = 188
   Insn 625: point = 188
	   Creating copy r676<-r758@941
   Insn 242: point = 190
   Insn 624: point = 192
	   Creating copy r675<-r794@941
   Insn 241: point = 194
   Insn 240: point = 196
   Insn 239: point = 198
   Insn 623: point = 200
	   Creating copy r674<-r758@941
   Insn 738: point = 201
	   Creating copy r758<-r795@941
   Insn 238: point = 203
   Insn 621: point = 205
	Hard reg 0 is preferable by r672 with profit 941
   Insn 237: point = 207
   Insn 760: point = 208
   Insn 620: point = 210
   Insn 619: point = 212
   Insn 236: point = 214
   Insn 618: point = 214
	Hard reg 37 is preferable by r671 with profit 941
   Insn 235: point = 216
   Insn 234: point = 218
   Insn 233: point = 220
   Insn 232: point = 222
   Insn 617: point = 224
	   Creating copy r670<-r759@941
   Insn 739: point = 226
   Insn 616: point = 227
	   Creating copy r669->r759@941
   Insn 231: point = 229
   Insn 230: point = 231
   Insn 614: point = 233
	Hard reg 0 is preferable by r667 with profit 941
   Insn 229: point = 235
   Insn 761: point = 236
   Insn 613: point = 238
   Insn 228: point = 240
   Insn 227: point = 242
   Insn 226: point = 244
   Insn 612: point = 246
	   Creating copy r666<-r796@941
   Insn 225: point = 248
   Insn 224: point = 250
   Insn 223: point = 252
   Insn 222: point = 254
   Insn 610: point = 256
	Hard reg 0 is preferable by r664 with profit 941
   Insn 221: point = 258
   Insn 762: point = 259
   Insn 609: point = 261
   Insn 608: point = 263
   Insn 220: point = 265
   Insn 607: point = 265
	Hard reg 38 is preferable by r663 with profit 941
   Insn 219: point = 267
   Insn 606: point = 269
	   Creating copy r662<-r760@941
   Insn 740: point = 271
   Insn 605: point = 272
	   Creating copy r661->r760@941
   Insn 218: point = 274
   Insn 217: point = 276
   Insn 216: point = 278
   Insn 215: point = 280
   Insn 214: point = 282
   Insn 603: point = 284
	Hard reg 39 is preferable by r659 with profit 941
   Insn 213: point = 286
   Insn 763: point = 287
   Insn 602: point = 289
   Insn 212: point = 291
   Insn 211: point = 293
   Insn 210: point = 295
   Insn 209: point = 297
   Insn 208: point = 299
   Insn 207: point = 301
   Insn 206: point = 303
   Insn 600: point = 305
	Hard reg 39 is preferable by r657 with profit 941
   Insn 205: point = 307
   Insn 764: point = 308
   Insn 599: point = 310
   Insn 598: point = 312
   Insn 204: point = 314
   Insn 597: point = 314
	Hard reg 40 is preferable by r656 with profit 941
   Insn 203: point = 316
   Insn 202: point = 318
   Insn 596: point = 320
	   Creating copy r655<-r761@941
   Insn 741: point = 322
   Insn 595: point = 323
	   Creating copy r654->r761@941
   Insn 201: point = 325
   Insn 594: point = 325
	Hard reg 41 is preferable by r654 with profit 941
   Insn 200: point = 327
   Insn 593: point = 329
	   Creating copy r653<-r762@941
   Insn 742: point = 331
   Insn 592: point = 332
	   Creating copy r652->r762@941
   Insn 199: point = 334
   Insn 198: point = 336
   Insn 590: point = 338
	Hard reg 5 is preferable by r650 with profit 941
   Insn 197: point = 340
   Insn 754: point = 341
   Insn 589: point = 343
   Insn 196: point = 345
   Insn 195: point = 347
   Insn 194: point = 349
   Insn 193: point = 351
   Insn 192: point = 353
   Insn 191: point = 355
   Insn 190: point = 357
   Insn 587: point = 359
	Hard reg 5 is preferable by r648 with profit 941
   Insn 189: point = 361
   Insn 753: point = 362
   Insn 586: point = 364
   Insn 188: point = 366
   Insn 187: point = 368
   Insn 186: point = 370
   Insn 185: point = 372
   Insn 184: point = 374
   Insn 183: point = 376
   Insn 182: point = 378
   Insn 584: point = 380
	Hard reg 5 is preferable by r646 with profit 941
   Insn 181: point = 382
   Insn 752: point = 383
   Insn 583: point = 385
   Insn 180: point = 387
   Insn 582: point = 389
	Hard reg 37 is preferable by r645 with profit 941
   Insn 179: point = 391
   Insn 581: point = 391
	   Creating copy r645<-r763@941
   Insn 580: point = 393
	Hard reg 43 is preferable by r644 with profit 941
   Insn 178: point = 395
   Insn 579: point = 395
   Insn 177: point = 397
   Insn 578: point = 399
	Hard reg 41 is preferable by r643 with profit 941
   Insn 176: point = 401
   Insn 577: point = 401
   Insn 175: point = 403
   Insn 765: point = 405
   Insn 174: point = 407
   Insn 575: point = 409
	   Creating copy r641<-r763@941
   Insn 743: point = 410
   Insn 573: point = 412
	Hard reg 1 is preferable by r639 with profit 941
   Insn 173: point = 414
   Insn 766: point = 415
   Insn 572: point = 417
   Insn 172: point = 419
   Insn 171: point = 421
   Insn 170: point = 423
   Insn 169: point = 425
   Insn 168: point = 427
   Insn 167: point = 429
   Insn 166: point = 431
   Insn 570: point = 433
	Hard reg 2 is preferable by r637 with profit 941
   Insn 165: point = 435
   Insn 767: point = 436
   Insn 569: point = 438
   Insn 164: point = 440
   Insn 568: point = 442
	Hard reg 38 is preferable by r636 with profit 941
   Insn 163: point = 444
   Insn 567: point = 444
	   Creating copy r636<-r764@941
   Insn 162: point = 446
   Insn 161: point = 448
   Insn 160: point = 450
   Insn 159: point = 452
   Insn 768: point = 454
   Insn 158: point = 456
   Insn 565: point = 458
	   Creating copy r634<-r764@941
   Insn 744: point = 459
   Insn 563: point = 461
	Hard reg 1 is preferable by r632 with profit 941
   Insn 157: point = 463
   Insn 769: point = 464
   Insn 562: point = 466
   Insn 156: point = 468
   Insn 155: point = 470
   Insn 561: point = 472
	   Creating copy r631<-r766@941
   Insn 745: point = 474
	   Creating copy r766->r794@941
   Insn 560: point = 475
	   Creating copy r630->r766@941
   Insn 154: point = 477
   Insn 153: point = 479
   Insn 152: point = 481
   Insn 151: point = 483
   Insn 150: point = 485
   Insn 771: point = 487
	Hard reg 0 is preferable by r789 with profit 941
   Insn 149: point = 489
   Insn 772: point = 490
   Insn 770: point = 492
   Insn 148: point = 494
   Insn 558: point = 496
	Hard reg 40 is preferable by r628 with profit 941
   Insn 147: point = 498
   Insn 557: point = 498
	   Creating copy r628<-r767@941
   Insn 556: point = 500
	Hard reg 2 is preferable by r627 with profit 941
   Insn 146: point = 502
   Insn 555: point = 502
   Insn 145: point = 504
   Insn 144: point = 506
   Insn 143: point = 508
   Insn 142: point = 510
   Insn 554: point = 512
	   Creating copy r626<-r767@941
   Insn 747: point = 513
   Insn 552: point = 515
	Hard reg 1 is preferable by r624 with profit 941
   Insn 141: point = 517
   Insn 773: point = 518
   Insn 551: point = 520
   Insn 550: point = 522
	   Creating copy r623->r795@941
   Insn 140: point = 524
   Insn 549: point = 524
	Hard reg 37 is preferable by r623 with profit 941
   Insn 139: point = 526
   Insn 548: point = 528
	   Creating copy r622<-r770@941
   Insn 749: point = 530
	   Creating copy r770->r796@941
   Insn 547: point = 531
	   Creating copy r621->r770@941
   Insn 138: point = 533
   Insn 137: point = 535
   Insn 136: point = 537
   Insn 135: point = 539
   Insn 134: point = 541
   Insn 133: point = 543
   Insn 132: point = 545
   Insn 131: point = 547
   Insn 130: point = 549
   Insn 129: point = 551
   Insn 128: point = 553
   Insn 127: point = 555
   Insn 774: point = 557
   Insn 126: point = 559
   Insn 125: point = 561
   Insn 775: point = 563
  BB 7
   Insn 409: point = 566
   Insn 663: point = 566
   Insn 354: point = 568
   Insn 662: point = 570
   Insn 351: point = 572
   Insn 661: point = 574
   Insn 349: point = 576
   Insn 348: point = 577
   Insn 660: point = 578
   Insn 345: point = 580
   Insn 344: point = 581
   Insn 659: point = 582
   Insn 342: point = 584
   Insn 658: point = 586
   Insn 339: point = 588
   Insn 657: point = 590
   Insn 337: point = 592
   Insn 336: point = 593
   Insn 656: point = 594
   Insn 333: point = 596
   Insn 332: point = 597
   Insn 655: point = 598
   Insn 330: point = 600
   Insn 654: point = 602
   Insn 327: point = 604
   Insn 653: point = 606
   Insn 325: point = 608
   Insn 324: point = 609
   Insn 652: point = 610
   Insn 321: point = 612
   Insn 320: point = 613
   Insn 651: point = 614
   Insn 318: point = 616
   Insn 650: point = 618
   Insn 315: point = 620
   Insn 649: point = 622
   Insn 313: point = 624
   Insn 312: point = 625
   Insn 648: point = 626
   Insn 309: point = 628
   Insn 308: point = 629
   Insn 647: point = 630
   Insn 306: point = 632
   Insn 646: point = 634
   Insn 303: point = 636
   Insn 645: point = 638
   Insn 301: point = 640
   Insn 300: point = 641
   Insn 644: point = 642
   Insn 297: point = 644
   Insn 296: point = 645
   Insn 643: point = 646
   Insn 294: point = 648
   Insn 642: point = 650
   Insn 291: point = 652
   Insn 641: point = 654
   Insn 289: point = 656
   Insn 288: point = 657
   Insn 640: point = 658
   Insn 285: point = 660
   Insn 284: point = 661
   Insn 756: point = 662
   Insn 282: point = 664
   Insn 639: point = 666
   Insn 279: point = 668
   Insn 638: point = 670
   Insn 277: point = 672
   Insn 276: point = 673
   Insn 637: point = 674
   Insn 273: point = 676
   Insn 272: point = 677
   Insn 270: point = 678
   Insn 267: point = 680
   Insn 636: point = 682
   Insn 265: point = 684
   Insn 264: point = 685
   Insn 263: point = 686
   Insn 261: point = 687
   Insn 260: point = 688
  BB 5
   Insn 424: point = 690
   Insn 423: point = 692
   Insn 422: point = 694
   Insn 421: point = 696
   Insn 420: point = 698
	Hard reg 39 is preferable by r755 with profit 59
   Insn 419: point = 700
   Insn 418: point = 702
   Insn 417: point = 704
   Insn 416: point = 706
   Insn 415: point = 708
   Insn 414: point = 710
   Insn 413: point = 712
   Insn 412: point = 714
   Insn 411: point = 716
   Insn 544: point = 718
   Insn 37: point = 720
   Insn 543: point = 721
	   Creating copy r617->r755@59
   Insn 36: point = 723
   Insn 542: point = 724
   Insn 35: point = 726
   Insn 34: point = 727
   Insn 541: point = 728
   Insn 33: point = 730
   Insn 32: point = 731
   Insn 540: point = 732
   Insn 31: point = 734
   Insn 539: point = 735
   Insn 30: point = 737
   Insn 538: point = 738
   Insn 29: point = 740
   Insn 537: point = 741
   Insn 28: point = 743
   Insn 536: point = 744
   Insn 27: point = 746
   Insn 535: point = 747
   Insn 26: point = 749
   Insn 534: point = 750
   Insn 25: point = 752
   Insn 533: point = 753
   Insn 24: point = 755
   Insn 532: point = 756
   Insn 23: point = 758
   Insn 531: point = 759
   Insn 22: point = 761
   Insn 21: point = 762
   Insn 20: point = 763
   Insn 530: point = 765
   Insn 19: point = 766
   Insn 529: point = 768
   Insn 18: point = 769
   Insn 528: point = 771
   Insn 17: point = 772
   Insn 16: point = 773
   Insn 15: point = 774
   Insn 527: point = 776
   Insn 14: point = 777
   Insn 13: point = 778
   Insn 526: point = 780
   Insn 123: point = 781
  BB 3
   Insn 407: point = 783
   Insn 524: point = 783
   Insn 120: point = 785
   Insn 523: point = 786
	Hard reg 0 is preferable by r598 with profit 29
   Insn 119: point = 788
   Insn 522: point = 789
	Hard reg 3 is preferable by r597 with profit 29
   Insn 118: point = 791
   Insn 521: point = 791
	Hard reg 3 is preferable by r597 with profit 29
	Hard reg 2 is preferable by r597 with profit 29
   Insn 117: point = 793
   Insn 116: point = 794
   Insn 520: point = 796
   Insn 519: point = 797
	Hard reg 42 is preferable by r595 with profit 29
   Insn 115: point = 799
   Insn 518: point = 800
	Hard reg 42 is preferable by r595 with profit 29
	Hard reg 0 is preferable by r595 with profit 29
   Insn 114: point = 802
   Insn 517: point = 803
	Hard reg 6 is preferable by r594 with profit 29
   Insn 113: point = 805
   Insn 516: point = 805
	Hard reg 6 is preferable by r594 with profit 29
	Hard reg 39 is preferable by r594 with profit 29
   Insn 112: point = 807
   Insn 111: point = 808
   Insn 515: point = 810
  BB 4
   Insn 12: point = 812
   Insn 11: point = 813
   Insn 10: point = 814
   Insn 525: point = 815
   Insn 9: point = 817
  BB 2
   Insn 109: point = 819
   Insn 108: point = 819
   Insn 514: point = 820
   Insn 512: point = 821
   Insn 107: point = 823
   Insn 513: point = 824
	   Creating copy r591<-r737@58
   Insn 511: point = 826
	Hard reg 0 is preferable by r590 with profit 58
   Insn 106: point = 828
   Insn 717: point = 829
   Insn 510: point = 830
	   Creating copy r589->r737@58
   Insn 105: point = 832
   Insn 509: point = 834
   Insn 507: point = 835
	Hard reg 41 is preferable by r586 with profit 58
   Insn 104: point = 837
   Insn 508: point = 838
	   Creating copy r587<-r738@58
   Insn 506: point = 840
	Hard reg 41 is preferable by r586 with profit 58
	Hard reg 43 is preferable by r586 with profit 58
   Insn 103: point = 842
   Insn 718: point = 843
   Insn 505: point = 844
	   Creating copy r585->r738@58
   Insn 102: point = 846
   Insn 504: point = 848
   Insn 502: point = 849
   Insn 101: point = 851
   Insn 503: point = 852
	   Creating copy r583<-r739@58
   Insn 501: point = 854
	Hard reg 4 is preferable by r582 with profit 58
   Insn 100: point = 856
   Insn 719: point = 857
   Insn 500: point = 858
	   Creating copy r581->r739@58
   Insn 99: point = 860
   Insn 499: point = 862
   Insn 497: point = 863
	Hard reg 38 is preferable by r578 with profit 58
   Insn 98: point = 865
   Insn 498: point = 866
	   Creating copy r579<-r740@58
   Insn 496: point = 868
	Hard reg 38 is preferable by r578 with profit 58
	Hard reg 41 is preferable by r578 with profit 58
   Insn 97: point = 870
   Insn 720: point = 871
   Insn 495: point = 872
	   Creating copy r577->r740@58
   Insn 96: point = 874
   Insn 494: point = 876
   Insn 493: point = 877
   Insn 95: point = 879
   Insn 492: point = 881
   Insn 491: point = 882
   Insn 94: point = 884
   Insn 490: point = 886
   Insn 489: point = 887
   Insn 93: point = 889
   Insn 488: point = 891
   Insn 487: point = 892
   Insn 92: point = 894
   Insn 486: point = 896
   Insn 485: point = 897
   Insn 91: point = 899
   Insn 484: point = 901
   Insn 483: point = 902
   Insn 90: point = 904
   Insn 482: point = 906
   Insn 481: point = 907
   Insn 89: point = 909
   Insn 480: point = 911
   Insn 479: point = 912
   Insn 88: point = 914
   Insn 478: point = 916
   Insn 87: point = 917
   Insn 477: point = 918
	   Creating copy r559<-r741@58
   Insn 721: point = 920
   Insn 476: point = 921
	   Creating copy r558->r741@58
   Insn 86: point = 923
   Insn 475: point = 923
	Hard reg 44 is preferable by r558 with profit 58
   Insn 85: point = 925
   Insn 84: point = 927
   Insn 474: point = 928
	   Creating copy r557<-r742@58
   Insn 722: point = 930
   Insn 473: point = 931
	   Creating copy r556->r742@58
   Insn 83: point = 933
   Insn 472: point = 933
	Hard reg 44 is preferable by r556 with profit 58
   Insn 82: point = 935
   Insn 81: point = 936
   Insn 471: point = 937
	   Creating copy r555<-r743@58
   Insn 723: point = 939
   Insn 470: point = 940
	   Creating copy r554->r743@58
   Insn 80: point = 942
   Insn 469: point = 942
	Hard reg 0 is preferable by r554 with profit 58
   Insn 79: point = 944
   Insn 78: point = 945
   Insn 468: point = 946
	   Creating copy r553<-r744@58
   Insn 724: point = 948
   Insn 467: point = 949
	   Creating copy r552->r744@58
   Insn 77: point = 951
   Insn 466: point = 951
	Hard reg 0 is preferable by r552 with profit 58
   Insn 76: point = 953
   Insn 75: point = 954
   Insn 465: point = 955
	   Creating copy r551<-r745@58
   Insn 725: point = 957
   Insn 464: point = 958
	   Creating copy r550->r745@58
   Insn 74: point = 960
   Insn 463: point = 960
	Hard reg 43 is preferable by r550 with profit 58
   Insn 73: point = 962
   Insn 72: point = 963
   Insn 462: point = 964
	   Creating copy r549<-r746@58
   Insn 726: point = 966
   Insn 461: point = 967
	   Creating copy r548->r746@58
   Insn 71: point = 969
   Insn 460: point = 969
	Hard reg 43 is preferable by r548 with profit 58
   Insn 70: point = 971
   Insn 69: point = 972
   Insn 459: point = 973
	   Creating copy r547<-r747@58
   Insn 727: point = 975
   Insn 458: point = 976
	   Creating copy r546->r747@58
   Insn 68: point = 978
   Insn 457: point = 978
	Hard reg 0 is preferable by r546 with profit 58
   Insn 67: point = 980
   Insn 66: point = 981
   Insn 456: point = 982
	   Creating copy r545<-r748@58
   Insn 728: point = 984
   Insn 455: point = 985
	   Creating copy r544->r748@58
   Insn 65: point = 987
   Insn 454: point = 987
	Hard reg 0 is preferable by r544 with profit 58
   Insn 64: point = 989
   Insn 63: point = 990
   Insn 453: point = 991
	   Creating copy r543<-r749@58
   Insn 729: point = 993
   Insn 452: point = 994
	   Creating copy r542->r749@58
   Insn 62: point = 996
   Insn 451: point = 996
	Hard reg 3 is preferable by r542 with profit 58
   Insn 61: point = 998
   Insn 60: point = 999
   Insn 450: point = 1000
	   Creating copy r541<-r750@58
   Insn 730: point = 1002
   Insn 449: point = 1003
	   Creating copy r540->r750@58
   Insn 59: point = 1005
   Insn 448: point = 1005
	Hard reg 3 is preferable by r540 with profit 58
   Insn 58: point = 1007
   Insn 57: point = 1008
   Insn 447: point = 1009
	   Creating copy r539<-r751@58
   Insn 731: point = 1011
   Insn 446: point = 1012
	   Creating copy r538->r751@58
   Insn 56: point = 1014
   Insn 445: point = 1014
	Hard reg 0 is preferable by r538 with profit 58
   Insn 55: point = 1016
   Insn 54: point = 1017
   Insn 444: point = 1018
	   Creating copy r537<-r752@58
   Insn 732: point = 1020
   Insn 443: point = 1021
	   Creating copy r536->r752@58
   Insn 53: point = 1023
   Insn 442: point = 1023
	Hard reg 0 is preferable by r536 with profit 58
   Insn 52: point = 1025
   Insn 51: point = 1026
   Insn 441: point = 1027
	   Creating copy r535<-r753@58
   Insn 733: point = 1029
   Insn 440: point = 1030
	   Creating copy r534->r753@58
   Insn 50: point = 1032
   Insn 439: point = 1032
	Hard reg 0 is preferable by r534 with profit 58
   Insn 49: point = 1034
   Insn 48: point = 1035
   Insn 438: point = 1036
	   Creating copy r533<-r754@58
   Insn 734: point = 1038
   Insn 437: point = 1039
	   Creating copy r532->r754@58
   Insn 47: point = 1041
   Insn 436: point = 1041
	Hard reg 38 is preferable by r532 with profit 58
   Insn 46: point = 1043
   Insn 45: point = 1044
   Insn 435: point = 1044
	Hard reg 5 is preferable by r531 with profit 58
   Insn 44: point = 1046
   Insn 434: point = 1046
	Hard reg 5 is preferable by r531 with profit 58
	Hard reg 6 is preferable by r531 with profit 58
   Insn 43: point = 1048
   Insn 42: point = 1049
   Insn 41: point = 1049
   Insn 40: point = 1051
   Insn 7: point = 1052
   Insn 6: point = 1053
 r100: [152..762] [149..149]
 r119: [104..912]
 r120: [103..907]
 r121: [68..902]
 r122: [67..897]
 r123: [36..892]
 r124: [35..887]
 r125: [8..882]
 r126: [7..877]
 r127: [112..871]
 r128: [111..857]
 r129: [76..843]
 r130: [75..829]
 r132: [801..808]
 r133: [787..794]
 r135: [542..555]
 r137: [538..551]
 r138: [534..549]
 r140: [527..545]
 r143: [358..539]
 r145: [300..535]
 r151: [486..508]
 r153: [482..504]
 r154: [478..500]
 r156: [471..494]
 r159: [304..483]
 r161: [251..479]
 r164: [348..468]
 r167: [432..452]
 r169: [428..448]
 r170: [424..446]
 r172: [422..440]
 r175: [255..429]
 r177: [197..425]
 r178: [350..423]
 r180: [294..419]
 r183: [379..403]
 r185: [375..397]
 r186: [371..393]
 r188: [369..387]
 r191: [204..376]
 r193: [354..372]
 r194: [296..370]
 r196: [243..366]
 r197: [396..821] [83..271]
 r200: [337..355]
 r202: [328..351]
 r203: [319..349]
 r205: [317..345]
 r208: [558..778] [122..331]
 r210: [812..815] [402..783] [17..322]
 r211: [709..835]
 r214: [514..769] [45..312]
 r217: [283..301]
 r219: [279..297]
 r220: [275..295]
 r222: [268..291]
 r225: [691..777] [121..144]
 r227: [812..812] [717..803] [58..142]
 r230: [460..766] [26..263]
 r233: [232..252]
 r235: [223..248]
 r236: [219..244]
 r238: [217..240]
 r241: [455..774] [94..226]
 r243: [812..813] [715..797] [55..140]
 r244: [713..863] [130..138]
 r246: [411..763] [25..212]
 r250: [176..198]
 r252: [167..194]
 r253: [163..190]
 r255: [156..184]
 r258: [711..773] [93..136]
 r260: [812..814] [707..789] [20..134]
 r262: [503..849] [127..159]
 r264: [705..772] [48..132]
 r269: [703..781]
 r287: [701..1049]
 r290: [690..718] [564..682]
 r291: [693..1044]
 r295: [690..1038] [521..674]
 r298: [690..724] [519..670]
 r299: [690..1029] [491..666]
 r300: [697..727]
 r303: [690..1020] [467..658]
 r306: [690..728] [465..654]
 r307: [690..1011] [439..650]
 r308: [695..731]
 r311: [690..1002] [418..642]
 r314: [690..732] [416..638]
 r315: [690..993] [386..634]
 r316: [690..735] [384..630]
 r319: [690..984] [365..626]
 r322: [690..738] [363..622]
 r323: [690..975] [344..618]
 r324: [690..741] [342..614]
 r327: [690..966] [311..610]
 r330: [690..744] [309..606]
 r331: [690..957] [290..602]
 r332: [690..747] [288..598]
 r335: [690..948] [262..594]
 r338: [690..750] [260..590]
 r339: [690..939] [239..586]
 r340: [690..753] [237..582]
 r343: [690..930] [211..578]
 r346: [690..756] [209..574]
 r347: [690..920] [183..570]
 r348: [690..759] [181..566]
 r351: [926..1052]
 r352: [1050..1051]
 r353: [1047..1048]
 r354: [1042..1043]
 r355: [1033..1034]
 r356: [1024..1025]
 r357: [1015..1016]
 r358: [1006..1007]
 r359: [997..998]
 r360: [988..989]
 r361: [979..980]
 r362: [970..971]
 r363: [961..962]
 r364: [952..953]
 r365: [943..944]
 r366: [934..935]
 r367: [924..925]
 r368: [869..870]
 r369: [855..856]
 r370: [841..842]
 r371: [827..828]
 r372: [806..807]
 r373: [799..802]
 r374: [792..793]
 r375: [785..788]
 r376: [560..561]
 r377: [556..559]
 r378: [552..553]
 r379: [546..547]
 r380: [542..543]
 r381: [540..541]
 r382: [536..537]
 r383: [525..526]
 r384: [511..515]
 r385: [509..510]
 r386: [505..506]
 r387: [495..496]
 r388: [486..487]
 r389: [484..485]
 r390: [480..481]
 r391: [469..470]
 r392: [457..461]
 r393: [453..456]
 r394: [449..450]
 r395: [441..442]
 r396: [432..433]
 r397: [430..431]
 r398: [426..427]
 r399: [420..421]
 r400: [408..412]
 r401: [404..407]
 r402: [398..399]
 r403: [388..389]
 r404: [379..380]
 r405: [377..378]
 r406: [373..374]
 r407: [367..368]
 r408: [358..359]
 r409: [356..357]
 r410: [352..353]
 r411: [346..347]
 r412: [337..338]
 r413: [335..336]
 r414: [326..327]
 r415: [315..316]
 r416: [304..305]
 r417: [302..303]
 r418: [298..299]
 r419: [292..293]
 r420: [283..284]
 r421: [281..282]
 r422: [277..278]
 r423: [266..267]
 r424: [255..256]
 r425: [253..254]
 r426: [249..250]
 r427: [241..242]
 r428: [232..233]
 r429: [230..231]
 r430: [221..222]
 r431: [215..216]
 r432: [204..205]
 r433: [199..203]
 r434: [195..196]
 r435: [185..186]
 r436: [176..177]
 r437: [174..175]
 r438: [165..166]
 r439: [154..155]
 r440: [679..688]
 r441: [569..686]
 r442: [681..685]
 r446: [665..677]
 r448: [669..673]
 r452: [649..661]
 r454: [653..657]
 r458: [633..645]
 r460: [637..641]
 r464: [617..629]
 r466: [621..625]
 r470: [601..613]
 r472: [605..609]
 r476: [585..597]
 r478: [589..593]
 r482: [569..581]
 r484: [573..577]
 r488: [115..124]
 r489: [115..116]
 r490: [107..114]
 r491: [39..108]
 r492: [99..106]
 r493: [99..100]
 r494: [96..98]
 r495: [79..88]
 r496: [79..80]
 r497: [71..78]
 r498: [11..72]
 r499: [63..70]
 r500: [63..64]
 r501: [60..62]
 r502: [41..50]
 r503: [41..42]
 r504: [39..40]
 r506: [31..38]
 r507: [31..32]
 r508: [28..30]
 r509: [13..22]
 r510: [13..14]
 r511: [11..12]
 r513: [3..10]
 r514: [3..4]
 r515: [0..2]
 r517: [447..708] [147..318]
 r518: [509..690] [145..280]
 r519: [554..716] [143..276]
 r520: [507..714] [141..220]
 r521: [550..712] [139..218]
 r522: [406..710] [137..170]
 r523: [451..706] [135..164]
 r524: [548..704] [133..153]
 r525: [149..702]
 r526: [690..700] [562..687]
 r527: [690..692] [544..680]
 r528: [690..698] [544..678]
 r529: [690..696] [493..662]
 r530: [690..694] [437..646]
 r531: [1045..1046]
 r532: [1040..1041]
 r533: [1035..1036]
 r534: [1031..1032]
 r535: [1026..1027]
 r536: [1022..1023]
 r537: [1017..1018]
 r538: [1013..1014]
 r539: [1008..1009]
 r540: [1004..1005]
 r541: [999..1000]
 r542: [995..996]
 r543: [990..991]
 r544: [986..987]
 r545: [981..982]
 r546: [977..978]
 r547: [972..973]
 r548: [968..969]
 r549: [963..964]
 r550: [959..960]
 r551: [954..955]
 r552: [950..951]
 r553: [945..946]
 r554: [941..942]
 r555: [936..937]
 r556: [932..933]
 r557: [927..928]
 r558: [922..923]
 r559: [917..918]
 r560: [915..916]
 r561: [913..914]
 r562: [910..911]
 r563: [908..909]
 r564: [905..906]
 r565: [903..904]
 r566: [900..901]
 r567: [898..899]
 r568: [895..896]
 r569: [893..894]
 r570: [890..891]
 r571: [888..889]
 r572: [885..886]
 r573: [883..884]
 r574: [880..881]
 r575: [878..879]
 r576: [875..876]
 r577: [873..874]
 r578: [864..868]
 r579: [865..866]
 r580: [861..862]
 r581: [859..860]
 r582: [850..854]
 r583: [851..852]
 r584: [847..848]
 r585: [845..846]
 r586: [836..840]
 r587: [837..838]
 r588: [833..834]
 r589: [831..832]
 r590: [822..826]
 r591: [823..824]
 r592: [819..820]
 r593: [809..810]
 r594: [804..805]
 r595: [798..800]
 r596: [795..796]
 r597: [790..791]
 r598: [784..786]
 r599: [816..817]
 r600: [779..780]
 r601: [775..776]
 r602: [770..771]
 r603: [767..768]
 r604: [764..765]
 r605: [760..761]
 r606: [757..758]
 r607: [754..755]
 r608: [751..752]
 r609: [748..749]
 r610: [745..746]
 r611: [742..743]
 r612: [739..740]
 r613: [736..737]
 r614: [733..734]
 r615: [729..730]
 r616: [725..726]
 r617: [722..723]
 r618: [719..720]
 r621: [532..533]
 r622: [527..528]
 r623: [523..524]
 r624: [516..520]
 r626: [511..512]
 r627: [501..502]
 r628: [497..498]
 r630: [476..477]
 r631: [471..472]
 r632: [462..466]
 r634: [457..458]
 r636: [443..444]
 r637: [434..438]
 r639: [413..417]
 r641: [408..409]
 r643: [400..401]
 r644: [394..395]
 r645: [390..391]
 r646: [381..385]
 r648: [360..364]
 r650: [339..343]
 r652: [333..334]
 r653: [328..329]
 r654: [324..325]
 r655: [319..320]
 r656: [313..314]
 r657: [306..310]
 r659: [285..289]
 r661: [273..274]
 r662: [268..269]
 r663: [264..265]
 r664: [257..261]
 r666: [245..246]
 r667: [234..238]
 r669: [228..229]
 r670: [223..224]
 r671: [213..214]
 r672: [206..210]
 r674: [199..200]
 r675: [191..192]
 r676: [187..188]
 r677: [178..182]
 r679: [172..173]
 r680: [167..168]
 r681: [161..162]
 r682: [156..157]
 r684: [683..684]
 r685: [675..676]
 r686: [671..672]
 r687: [667..668]
 r688: [659..660]
 r689: [655..656]
 r690: [651..652]
 r691: [647..648]
 r692: [643..644]
 r693: [639..640]
 r694: [635..636]
 r695: [631..632]
 r696: [627..628]
 r697: [623..624]
 r698: [619..620]
 r699: [615..616]
 r700: [611..612]
 r701: [607..608]
 r702: [603..604]
 r703: [599..600]
 r704: [595..596]
 r705: [591..592]
 r706: [587..588]
 r707: [583..584]
 r708: [579..580]
 r709: [575..576]
 r710: [571..572]
 r711: [567..568]
 r712: [125..131]
 r713: [128..129]
 r714: [117..123]
 r715: [119..120]
 r716: [109..113]
 r717: [101..105]
 r718: [96..97]
 r719: [89..95]
 r720: [91..92]
 r721: [81..87]
 r722: [73..77]
 r723: [65..69]
 r724: [60..61]
 r725: [51..59]
 r726: [53..54]
 r727: [56..57]
 r728: [43..49]
 r729: [46..47]
 r730: [33..37]
 r731: [28..29]
 r732: [23..27]
 r733: [15..21]
 r734: [18..19]
 r735: [5..9]
 r736: [0..1]
 r737: [825..830]
 r738: [839..844]
 r739: [853..858]
 r740: [867..872]
 r741: [919..921]
 r742: [929..931]
 r743: [938..940]
 r744: [947..949]
 r745: [956..958]
 r746: [965..967]
 r747: [974..976]
 r748: [983..985]
 r749: [992..994]
 r750: [1001..1003]
 r751: [1010..1012]
 r752: [1019..1021]
 r753: [1028..1030]
 r754: [1037..1039]
 r755: [699..721]
 r756: [158..160]
 r757: [169..171]
 r758: [189..201]
 r759: [225..227]
 r760: [270..272]
 r761: [321..323]
 r762: [330..332]
 r763: [392..410]
 r764: [445..459]
 r766: [473..475]
 r767: [499..513]
 r770: [529..531]
 r771: [86..146]
 r772: [382..383]
 r773: [361..362]
 r774: [340..341]
 r775: [84..85]
 r776: [663..664]
 r777: [150..151]
 r778: [179..180]
 r779: [207..208]
 r780: [235..236]
 r781: [258..259]
 r782: [286..287]
 r783: [307..308]
 r784: [404..405]
 r785: [414..415]
 r786: [435..436]
 r787: [453..454]
 r788: [463..464]
 r789: [488..492]
 r790: [489..490]
 r791: [517..518]
 r792: [556..557]
 r793: [562..563]
 r794: [193..474]
 r795: [202..522]
 r796: [247..530]
Compressing live ranges: from 1053 to 855 - 81%
Ranges after the compression:
 r100: [94..628] [91..91]
 r119: [60..732]
 r120: [60..728]
 r121: [40..724]
 r122: [40..720]
 r123: [20..716]
 r124: [20..712]
 r125: [4..708]
 r126: [4..704]
 r127: [64..700]
 r128: [64..690]
 r129: [44..680]
 r130: [44..670]
 r132: [651..656]
 r133: [641..646]
 r135: [458..471]
 r137: [454..467]
 r138: [450..465]
 r140: [444..461]
 r143: [286..455]
 r145: [232..451]
 r151: [406..427]
 r153: [402..423]
 r154: [398..419]
 r156: [392..413]
 r159: [236..403]
 r161: [186..399]
 r164: [276..389]
 r167: [356..375]
 r169: [352..371]
 r170: [348..369]
 r172: [346..363]
 r175: [190..353]
 r177: [136..349]
 r178: [278..347]
 r180: [226..343]
 r183: [306..329]
 r185: [302..323]
 r186: [298..319]
 r188: [296..313]
 r191: [142..303]
 r193: [282..299]
 r194: [228..297]
 r196: [178..293]
 r197: [322..664] [48..205]
 r200: [266..283]
 r202: [258..279]
 r203: [250..277]
 r205: [248..273]
 r208: [474..636] [70..261]
 r210: [659..660] [328..638] [10..253]
 r211: [591..674]
 r214: [432..632] [26..243]
 r217: [216..233]
 r219: [212..229]
 r220: [208..227]
 r222: [202..223]
 r225: [573..636] [70..87]
 r227: [659..659] [599..652] [34..85]
 r230: [382..630] [14..197]
 r233: [168..187]
 r235: [160..183]
 r236: [156..179]
 r238: [154..175]
 r241: [378..634] [54..163]
 r243: [659..660] [597..648] [32..83]
 r244: [595..694] [74..81]
 r246: [336..628] [14..149]
 r250: [116..137]
 r252: [108..133]
 r253: [104..129]
 r255: [98..123]
 r258: [593..634] [54..79]
 r260: [659..660] [589..642] [12..77]
 r262: [422..684] [72..101]
 r264: [587..634] [28..75]
 r269: [585..638]
 r287: [583..852]
 r290: [572..600] [480..569]
 r291: [575..848]
 r295: [572..844] [438..563]
 r298: [572..604] [436..561]
 r299: [572..836] [410..557]
 r300: [579..606]
 r303: [572..828] [388..551]
 r306: [572..606] [386..549]
 r307: [572..820] [362..545]
 r308: [577..608]
 r311: [572..812] [342..539]
 r314: [572..608] [340..537]
 r315: [572..804] [312..533]
 r316: [572..610] [310..529]
 r319: [572..796] [292..527]
 r322: [572..612] [290..525]
 r323: [572..788] [272..521]
 r324: [572..614] [270..517]
 r327: [572..780] [242..515]
 r330: [572..616] [240..513]
 r331: [572..772] [222..509]
 r332: [572..618] [220..505]
 r335: [572..764] [196..503]
 r338: [572..620] [194..501]
 r339: [572..756] [174..497]
 r340: [572..622] [172..493]
 r343: [572..748] [148..491]
 r346: [572..624] [146..489]
 r347: [572..740] [122..485]
 r348: [572..626] [120..481]
 r351: [745..854]
 r352: [853..854]
 r353: [851..852]
 r354: [847..848]
 r355: [839..840]
 r356: [831..832]
 r357: [823..824]
 r358: [815..816]
 r359: [807..808]
 r360: [799..800]
 r361: [791..792]
 r362: [783..784]
 r363: [775..776]
 r364: [767..768]
 r365: [759..760]
 r366: [751..752]
 r367: [743..744]
 r368: [699..700]
 r369: [689..690]
 r370: [679..680]
 r371: [669..670]
 r372: [655..656]
 r373: [649..652]
 r374: [645..646]
 r375: [639..642]
 r376: [476..477]
 r377: [472..475]
 r378: [468..469]
 r379: [462..463]
 r380: [458..459]
 r381: [456..457]
 r382: [452..453]
 r383: [442..443]
 r384: [430..433]
 r385: [428..429]
 r386: [424..425]
 r387: [414..415]
 r388: [406..407]
 r389: [404..405]
 r390: [400..401]
 r391: [390..391]
 r392: [380..383]
 r393: [376..379]
 r394: [372..373]
 r395: [364..365]
 r396: [356..357]
 r397: [354..355]
 r398: [350..351]
 r399: [344..345]
 r400: [334..337]
 r401: [330..333]
 r402: [324..325]
 r403: [314..315]
 r404: [306..307]
 r405: [304..305]
 r406: [300..301]
 r407: [294..295]
 r408: [286..287]
 r409: [284..285]
 r410: [280..281]
 r411: [274..275]
 r412: [266..267]
 r413: [264..265]
 r414: [256..257]
 r415: [246..247]
 r416: [236..237]
 r417: [234..235]
 r418: [230..231]
 r419: [224..225]
 r420: [216..217]
 r421: [214..215]
 r422: [210..211]
 r423: [200..201]
 r424: [190..191]
 r425: [188..189]
 r426: [184..185]
 r427: [176..177]
 r428: [168..169]
 r429: [166..167]
 r430: [158..159]
 r431: [152..153]
 r432: [142..143]
 r433: [138..141]
 r434: [134..135]
 r435: [124..125]
 r436: [116..117]
 r437: [114..115]
 r438: [106..107]
 r439: [96..97]
 r440: [566..571]
 r441: [484..571]
 r442: [568..571]
 r446: [556..565]
 r448: [560..563]
 r452: [544..553]
 r454: [548..551]
 r458: [532..541]
 r460: [536..539]
 r464: [520..529]
 r466: [524..527]
 r470: [508..517]
 r472: [512..515]
 r476: [496..505]
 r478: [500..503]
 r482: [484..493]
 r484: [488..491]
 r488: [66..71]
 r489: [66..67]
 r490: [62..65]
 r491: [22..63]
 r492: [58..61]
 r493: [58..59]
 r494: [56..57]
 r495: [46..51]
 r496: [46..47]
 r497: [42..45]
 r498: [6..43]
 r499: [38..41]
 r500: [38..39]
 r501: [36..37]
 r502: [24..29]
 r503: [24..25]
 r504: [22..23]
 r506: [18..21]
 r507: [18..19]
 r508: [16..17]
 r509: [8..13]
 r510: [8..9]
 r511: [6..7]
 r513: [2..5]
 r514: [2..3]
 r515: [0..1]
 r517: [370..590] [90..249]
 r518: [428..572] [88..213]
 r519: [470..598] [86..209]
 r520: [426..596] [84..157]
 r521: [466..594] [82..155]
 r522: [332..592] [80..111]
 r523: [374..588] [78..105]
 r524: [464..586] [76..95]
 r525: [91..584]
 r526: [478..582]
 r527: [572..574] [460..567]
 r528: [572..580] [460..565]
 r529: [572..578] [412..553]
 r530: [572..576] [360..541]
 r531: [849..850]
 r532: [845..846]
 r533: [841..842]
 r534: [837..838]
 r535: [833..834]
 r536: [829..830]
 r537: [825..826]
 r538: [821..822]
 r539: [817..818]
 r540: [813..814]
 r541: [809..810]
 r542: [805..806]
 r543: [801..802]
 r544: [797..798]
 r545: [793..794]
 r546: [789..790]
 r547: [785..786]
 r548: [781..782]
 r549: [777..778]
 r550: [773..774]
 r551: [769..770]
 r552: [765..766]
 r553: [761..762]
 r554: [757..758]
 r555: [753..754]
 r556: [749..750]
 r557: [745..746]
 r558: [741..742]
 r559: [737..738]
 r560: [735..736]
 r561: [733..734]
 r562: [731..732]
 r563: [729..730]
 r564: [727..728]
 r565: [725..726]
 r566: [723..724]
 r567: [721..722]
 r568: [719..720]
 r569: [717..718]
 r570: [715..716]
 r571: [713..714]
 r572: [711..712]
 r573: [709..710]
 r574: [707..708]
 r575: [705..706]
 r576: [703..704]
 r577: [701..702]
 r578: [695..698]
 r579: [695..696]
 r580: [693..694]
 r581: [691..692]
 r582: [685..688]
 r583: [685..686]
 r584: [683..684]
 r585: [681..682]
 r586: [675..678]
 r587: [675..676]
 r588: [673..674]
 r589: [671..672]
 r590: [665..668]
 r591: [665..666]
 r592: [663..664]
 r593: [657..658]
 r594: [653..654]
 r595: [649..650]
 r596: [647..648]
 r597: [643..644]
 r598: [639..640]
 r599: [661..662]
 r600: [637..638]
 r601: [635..636]
 r602: [633..634]
 r603: [631..632]
 r604: [629..630]
 r605: [627..628]
 r606: [625..626]
 r607: [623..624]
 r608: [621..622]
 r609: [619..620]
 r610: [617..618]
 r611: [615..616]
 r612: [613..614]
 r613: [611..612]
 r614: [609..610]
 r615: [607..608]
 r616: [605..606]
 r617: [603..604]
 r618: [601..602]
 r621: [448..449]
 r622: [444..445]
 r623: [440..441]
 r624: [434..437]
 r626: [430..431]
 r627: [420..421]
 r628: [416..417]
 r630: [396..397]
 r631: [392..393]
 r632: [384..387]
 r634: [380..381]
 r636: [366..367]
 r637: [358..361]
 r639: [338..341]
 r641: [334..335]
 r643: [326..327]
 r644: [320..321]
 r645: [316..317]
 r646: [308..311]
 r648: [288..291]
 r650: [268..271]
 r652: [262..263]
 r653: [258..259]
 r654: [254..255]
 r655: [250..251]
 r656: [244..245]
 r657: [238..241]
 r659: [218..221]
 r661: [206..207]
 r662: [202..203]
 r663: [198..199]
 r664: [192..195]
 r666: [180..181]
 r667: [170..173]
 r669: [164..165]
 r670: [160..161]
 r671: [150..151]
 r672: [144..147]
 r674: [138..139]
 r675: [130..131]
 r676: [126..127]
 r677: [118..121]
 r679: [112..113]
 r680: [108..109]
 r681: [102..103]
 r682: [98..99]
 r684: [570..571]
 r685: [564..565]
 r686: [562..563]
 r687: [558..559]
 r688: [552..553]
 r689: [550..551]
 r690: [546..547]
 r691: [542..543]
 r692: [540..541]
 r693: [538..539]
 r694: [534..535]
 r695: [530..531]
 r696: [528..529]
 r697: [526..527]
 r698: [522..523]
 r699: [518..519]
 r700: [516..517]
 r701: [514..515]
 r702: [510..511]
 r703: [506..507]
 r704: [504..505]
 r705: [502..503]
 r706: [498..499]
 r707: [494..495]
 r708: [492..493]
 r709: [490..491]
 r710: [486..487]
 r711: [482..483]
 r712: [72..75]
 r713: [72..73]
 r714: [68..71]
 r715: [68..69]
 r716: [64..65]
 r717: [60..61]
 r718: [56..57]
 r719: [52..55]
 r720: [52..53]
 r721: [48..51]
 r722: [44..45]
 r723: [40..41]
 r724: [36..37]
 r725: [30..35]
 r726: [30..31]
 r727: [32..33]
 r728: [26..29]
 r729: [26..27]
 r730: [20..21]
 r731: [16..17]
 r732: [14..15]
 r733: [10..13]
 r734: [10..11]
 r735: [4..5]
 r736: [0..1]
 r737: [667..670]
 r738: [677..680]
 r739: [687..690]
 r740: [697..700]
 r741: [739..740]
 r742: [747..748]
 r743: [755..756]
 r744: [763..764]
 r745: [771..772]
 r746: [779..780]
 r747: [787..788]
 r748: [795..796]
 r749: [803..804]
 r750: [811..812]
 r751: [819..820]
 r752: [827..828]
 r753: [835..836]
 r754: [843..844]
 r755: [581..602]
 r756: [100..101]
 r757: [110..111]
 r758: [128..139]
 r759: [162..163]
 r760: [204..205]
 r761: [252..253]
 r762: [260..261]
 r763: [318..335]
 r764: [368..381]
 r766: [394..395]
 r767: [418..431]
 r770: [446..447]
 r771: [50..89]
 r772: [308..309]
 r773: [288..289]
 r774: [268..269]
 r775: [48..49]
 r776: [554..555]
 r777: [92..93]
 r778: [118..119]
 r779: [144..145]
 r780: [170..171]
 r781: [192..193]
 r782: [218..219]
 r783: [238..239]
 r784: [330..331]
 r785: [338..339]
 r786: [358..359]
 r787: [376..377]
 r788: [384..385]
 r789: [408..411]
 r790: [408..409]
 r791: [434..435]
 r792: [472..473]
 r793: [478..479]
 r794: [132..395]
 r795: [140..439]
 r796: [182..447]

********** Assignment #2: **********

	 Assigning to 777 (cl=GENERAL_REGS, orig=100, freq=2823, tfirst=777, tfreq=2823)...
	   Assign 0 to optional reload r777 (freq=2823)
	 Assigning to 789 (cl=GENERAL_REGS, orig=388, freq=2823, tfirst=789, tfreq=2823)...
	   Assign 0 to reload r789 (freq=2823)
	 Assigning to 772 (cl=GENERAL_REGS, orig=316, freq=1882, tfirst=772, tfreq=1882)...
	 Assigning to 773 (cl=GENERAL_REGS, orig=322, freq=1882, tfirst=773, tfreq=1882)...
	 Assigning to 774 (cl=GENERAL_REGS, orig=324, freq=1882, tfirst=774, tfreq=1882)...
	 Assigning to 778 (cl=GENERAL_REGS, orig=348, freq=1882, tfirst=778, tfreq=1882)...
	   Assign 39 to optional reload r778 (freq=1882)
	 Assigning to 779 (cl=GENERAL_REGS, orig=346, freq=1882, tfirst=779, tfreq=1882)...
	   Assign 2 to optional reload r779 (freq=1882)
	 Assigning to 780 (cl=GENERAL_REGS, orig=340, freq=1882, tfirst=780, tfreq=1882)...
	   Assign 40 to optional reload r780 (freq=1882)
	 Assigning to 781 (cl=GENERAL_REGS, orig=338, freq=1882, tfirst=781, tfreq=1882)...
	   Assign 0 to optional reload r781 (freq=1882)
	 Assigning to 782 (cl=GENERAL_REGS, orig=332, freq=1882, tfirst=782, tfreq=1882)...
	   Assign 5 to optional reload r782 (freq=1882)
	 Assigning to 783 (cl=GENERAL_REGS, orig=330, freq=1882, tfirst=783, tfreq=1882)...
	   Assign 5 to optional reload r783 (freq=1882)
	 Assigning to 784 (cl=GENERAL_REGS, orig=258, freq=1882, tfirst=784, tfreq=1882)...
	   Assign 37 to optional reload r784 (freq=1882)
	 Assigning to 785 (cl=GENERAL_REGS, orig=314, freq=1882, tfirst=785, tfreq=1882)...
	   Assign 5 to optional reload r785 (freq=1882)
	 Assigning to 786 (cl=GENERAL_REGS, orig=308, freq=1882, tfirst=786, tfreq=1882)...
	   Assign 5 to optional reload r786 (freq=1882)
	 Assigning to 787 (cl=GENERAL_REGS, orig=241, freq=1882, tfirst=787, tfreq=1882)...
	   Assign 2 to optional reload r787 (freq=1882)
	 Assigning to 788 (cl=GENERAL_REGS, orig=306, freq=1882, tfirst=788, tfreq=1882)...
	   Assign 5 to optional reload r788 (freq=1882)
	 Assigning to 790 (cl=GENERAL_REGS, orig=299, freq=1882, tfirst=790, tfreq=1882)...
	   Assign 5 to optional reload r790 (freq=1882)
	 Assigning to 791 (cl=GENERAL_REGS, orig=298, freq=1882, tfirst=791, tfreq=1882)...
	   Assign 0 to optional reload r791 (freq=1882)
	 Assigning to 792 (cl=GENERAL_REGS, orig=208, freq=1882, tfirst=792, tfreq=1882)...
	   Assign 0 to optional reload r792 (freq=1882)
	 Assigning to 793 (cl=GENERAL_REGS, orig=290, freq=1882, tfirst=793, tfreq=1882)...
	   Assign 0 to optional reload r793 (freq=1882)
	 Assigning to 794 (cl=GENERAL_REGS, orig=162, freq=1882, tfirst=794, tfreq=1882)...
	 Assigning to 795 (cl=GENERAL_REGS, orig=148, freq=1882, tfirst=795, tfreq=1882)...
	 Assigning to 796 (cl=GENERAL_REGS, orig=146, freq=1882, tfirst=796, tfreq=1882)...
	 Assigning to 776 (cl=GENERAL_REGS, orig=300, freq=1770, tfirst=776, tfreq=1770)...
	   Assign 0 to reload r776 (freq=1770)
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 3 (0.00%)
   Insn after restoring regs:
  624: r675:DI=r162:DI
      REG_DEAD r162:DI
   Insn after restoring regs:
  738: r758:DI=r148:DI
      REG_DEAD r148:DI
   Insn after restoring regs:
  612: r666:DI=r146:DI
      REG_DEAD r146:DI
   Insn after restoring regs:
  745: r162:DI=r766:DI
   Insn after restoring regs:
  550: r148:DI=r623:DI
      REG_DEAD r623:DI
   Insn after restoring regs:
  749: r146:DI=r770:DI
Keep optional reload reg 579
Keep optional reload reg 583
Keep optional reload reg 587
Keep optional reload reg 591
Keep optional reload reg 619
Keep optional reload reg 620
Keep optional reload reg 622
Keep optional reload reg 625
Keep optional reload reg 626
Keep optional reload reg 629
Keep optional reload reg 631
Keep optional reload reg 633
Keep optional reload reg 634
Keep optional reload reg 635
Keep optional reload reg 638
Keep optional reload reg 640
Keep optional reload reg 641
Keep optional reload reg 642
Keep optional reload reg 647
Keep optional reload reg 649
Keep optional reload reg 651
Keep optional reload reg 653
Keep optional reload reg 655
Keep optional reload reg 658
Keep optional reload reg 660
Keep optional reload reg 662
Keep optional reload reg 665
Keep optional reload reg 668
Keep optional reload reg 670
Keep optional reload reg 673
Keep optional reload reg 674
Keep optional reload reg 678
Keep optional reload reg 680
Keep optional reload reg 682
Keep optional reload reg 683
Remove optional reload reg 772
  Restoring original insn:
  181: {r646:DI=r646:DI^r316:DI;clobber flags:CC;}
      REG_DEAD r316:DI
      REG_UNUSED flags:CC
  Deleting move 752
  752: r772:DI=r316:DI
      REG_DEAD r316:DI
deleting insn with uid = 752.
Remove optional reload reg 773
  Restoring original insn:
  189: {r648:DI=r648:DI^r322:DI;clobber flags:CC;}
      REG_DEAD r322:DI
      REG_UNUSED flags:CC
  Deleting move 753
  753: r773:DI=r322:DI
      REG_DEAD r322:DI
deleting insn with uid = 753.
Remove optional reload reg 774
  Restoring original insn:
  197: {r650:DI=r650:DI^r324:DI;clobber flags:CC;}
      REG_DEAD r324:DI
      REG_UNUSED flags:CC
  Deleting move 754
  754: r774:DI=r324:DI
      REG_DEAD r324:DI
deleting insn with uid = 754.
Remove optional reload reg 777
  Restoring original insn:
  255: {flags:CCZ=cmp(r100:SI-0x1,0);r100:SI=r100:SI-0x1;}
  Deleting move 757
  757: r777:SI=r100:SI
      REG_DEAD r100:SI
deleting insn with uid = 757.
  Deleting move 758
  758: r100:SI=r777:SI
      REG_DEAD r777:SI
deleting insn with uid = 758.
Remove optional reload reg 778
  Restoring original insn:
  245: {r677:DI=r677:DI^r348:DI;clobber flags:CC;}
      REG_DEAD r348:DI
      REG_UNUSED flags:CC
  Deleting move 759
  759: r778:DI=r348:DI
      REG_DEAD r348:DI
deleting insn with uid = 759.
Remove optional reload reg 779
  Restoring original insn:
  237: {r672:DI=r672:DI^r346:DI;clobber flags:CC;}
      REG_DEAD r346:DI
      REG_UNUSED flags:CC
  Deleting move 760
  760: r779:DI=r346:DI
      REG_DEAD r346:DI
deleting insn with uid = 760.
Remove optional reload reg 780
  Restoring original insn:
  229: {r667:DI=r667:DI^r340:DI;clobber flags:CC;}
      REG_DEAD r340:DI
      REG_UNUSED flags:CC
  Deleting move 761
  761: r780:DI=r340:DI
      REG_DEAD r340:DI
deleting insn with uid = 761.
Remove optional reload reg 781
  Restoring original insn:
  221: {r664:DI=r664:DI^r338:DI;clobber flags:CC;}
      REG_DEAD r338:DI
      REG_UNUSED flags:CC
  Deleting move 762
  762: r781:DI=r338:DI
      REG_DEAD r338:DI
deleting insn with uid = 762.
Remove optional reload reg 782
  Restoring original insn:
  213: {r659:DI=r659:DI^r332:DI;clobber flags:CC;}
      REG_DEAD r332:DI
      REG_UNUSED flags:CC
  Deleting move 763
  763: r782:DI=r332:DI
      REG_DEAD r332:DI
deleting insn with uid = 763.
Remove optional reload reg 783
  Restoring original insn:
  205: {r657:DI=r657:DI^r330:DI;clobber flags:CC;}
      REG_DEAD r330:DI
      REG_UNUSED flags:CC
  Deleting move 764
  764: r783:DI=r330:DI
      REG_DEAD r330:DI
deleting insn with uid = 764.
Remove optional reload reg 784
  Restoring original insn:
  175: {r183:DI=r401:DI+r522:DI;clobber flags:CC;}
      REG_DEAD r522:DI
      REG_DEAD r401:DI
      REG_UNUSED flags:CC
  Deleting move 765
  765: r784:DI=r522:DI
      REG_DEAD r522:DI
deleting insn with uid = 765.
Remove optional reload reg 785
  Restoring original insn:
  173: {r639:DI=r639:DI^r314:DI;clobber flags:CC;}
      REG_DEAD r314:DI
      REG_UNUSED flags:CC
  Deleting move 766
  766: r785:DI=r314:DI
      REG_DEAD r314:DI
deleting insn with uid = 766.
Remove optional reload reg 786
  Restoring original insn:
  165: {r637:DI=r637:DI^r530:DI;clobber flags:CC;}
      REG_DEAD r530:DI
      REG_UNUSED flags:CC
  Deleting move 767
  767: r786:DI=r530:DI
      REG_DEAD r530:DI
deleting insn with uid = 767.
Remove optional reload reg 787
  Restoring original insn:
  159: {r167:DI=r393:DI+r241:DI;clobber flags:CC;}
      REG_DEAD r241:DI
      REG_DEAD r393:DI
      REG_UNUSED flags:CC
  Deleting move 768
  768: r787:DI=r241:DI
      REG_DEAD r241:DI
deleting insn with uid = 768.
Remove optional reload reg 788
  Restoring original insn:
  157: {r632:DI=r632:DI^r306:DI;clobber flags:CC;}
      REG_DEAD r306:DI
      REG_UNUSED flags:CC
  Deleting move 769
  769: r788:DI=r306:DI
      REG_DEAD r306:DI
deleting insn with uid = 769.
Remove optional reload reg 790
  Restoring original insn:
  149: {r789:DI=r789:DI^r299:DI;clobber flags:CC;}
      REG_DEAD r299:DI
      REG_UNUSED flags:CC
  Deleting move 772
  772: r790:DI=r299:DI
      REG_DEAD r299:DI
deleting insn with uid = 772.
Remove optional reload reg 791
  Restoring original insn:
  141: {r624:DI=r624:DI^r298:DI;clobber flags:CC;}
      REG_DEAD r298:DI
      REG_UNUSED flags:CC
  Deleting move 773
  773: r791:DI=r298:DI
      REG_DEAD r298:DI
deleting insn with uid = 773.
Remove optional reload reg 792
  Restoring original insn:
  127: {r135:DI=r377:DI+r208:DI;clobber flags:CC;}
      REG_DEAD r208:DI
      REG_DEAD r377:DI
      REG_UNUSED flags:CC
  Deleting move 774
  774: r792:DI=r208:DI
      REG_DEAD r208:DI
deleting insn with uid = 774.
Remove optional reload reg 793
  Restoring original insn:
  125: {r376:DI=r526:DI^r290:DI;clobber flags:CC;}
      REG_DEAD r290:DI
      REG_DEAD r526:DI
      REG_UNUSED flags:CC
  Deleting move 775
  775: r793:DI=r290:DI
      REG_DEAD r290:DI
deleting insn with uid = 775.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 197:  (0) =r  (1) %0  (2) rme {*xordi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 255:  (0) rm  (1) 0  (2) re {*addsi_2}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 237:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 229:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 221:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 205:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*xordi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*xordi_1}

********** Pseudo live ranges #7: **********

  BB 8
   Insn 401: point = 0
   Insn 400: point = 0
   Insn 395: point = 0
   Insn 716: point = 1
   Insn 394: point = 2
   Insn 715: point = 4
   Insn 393: point = 6
   Insn 714: point = 8
   Insn 713: point = 9
   Insn 392: point = 10
   Insn 390: point = 12
   Insn 711: point = 14
   Insn 389: point = 16
   Insn 712: point = 18
   Insn 710: point = 19
   Insn 709: point = 21
   Insn 708: point = 22
   Insn 388: point = 24
   Insn 707: point = 26
   Insn 706: point = 27
   Insn 386: point = 28
   Insn 705: point = 29
   Insn 385: point = 30
   Insn 704: point = 32
   Insn 384: point = 34
   Insn 703: point = 36
   Insn 702: point = 37
   Insn 383: point = 38
   Insn 381: point = 40
   Insn 700: point = 42
   Insn 380: point = 44
   Insn 701: point = 46
   Insn 699: point = 47
   Insn 698: point = 49
   Insn 695: point = 50
   Insn 379: point = 52
   Insn 696: point = 54
   Insn 697: point = 56
   Insn 694: point = 57
   Insn 693: point = 59
   Insn 377: point = 60
   Insn 692: point = 61
   Insn 376: point = 62
   Insn 691: point = 64
   Insn 375: point = 66
   Insn 690: point = 68
   Insn 689: point = 69
   Insn 374: point = 70
   Insn 688: point = 72
   Insn 373: point = 74
   Insn 687: point = 76
   Insn 686: point = 77
   Insn 372: point = 78
   Insn 685: point = 80
   Insn 371: point = 82
   Insn 755: point = 84
   Insn 684: point = 85
   Insn 683: point = 87
   Insn 681: point = 88
   Insn 370: point = 90
   Insn 682: point = 92
   Insn 680: point = 94
   Insn 679: point = 95
   Insn 368: point = 96
   Insn 678: point = 97
   Insn 367: point = 98
   Insn 677: point = 100
   Insn 366: point = 102
   Insn 676: point = 104
   Insn 675: point = 105
   Insn 365: point = 106
   Insn 674: point = 108
   Insn 364: point = 110
   Insn 673: point = 112
   Insn 672: point = 113
   Insn 363: point = 114
   Insn 670: point = 116
   Insn 362: point = 118
   Insn 671: point = 120
   Insn 669: point = 122
   Insn 668: point = 123
   Insn 666: point = 124
   Insn 361: point = 126
   Insn 667: point = 128
   Insn 665: point = 129
   Insn 664: point = 131
   Insn 432: point = 132
   Insn 431: point = 134
   Insn 430: point = 136
   Insn 429: point = 138
   Insn 428: point = 140
   Insn 427: point = 142
   Insn 426: point = 144
   Insn 425: point = 146
  BB 6
   Insn 256: point = 149
   Insn 255: point = 149
   Insn 254: point = 149
   Insn 252: point = 149
   Insn 251: point = 151
   Insn 633: point = 153
   Insn 736: point = 155
   Insn 632: point = 156
   Insn 250: point = 158
   Insn 249: point = 160
   Insn 248: point = 162
   Insn 631: point = 164
   Insn 737: point = 166
   Insn 630: point = 167
   Insn 247: point = 169
   Insn 246: point = 171
   Insn 628: point = 173
   Insn 245: point = 175
   Insn 627: point = 176
   Insn 244: point = 178
   Insn 626: point = 180
   Insn 243: point = 182
   Insn 625: point = 182
   Insn 242: point = 184
   Insn 624: point = 186
   Insn 241: point = 188
   Insn 240: point = 190
   Insn 239: point = 192
   Insn 623: point = 194
   Insn 738: point = 195
   Insn 238: point = 197
   Insn 621: point = 199
   Insn 237: point = 201
   Insn 620: point = 202
   Insn 619: point = 204
   Insn 236: point = 206
   Insn 618: point = 206
   Insn 235: point = 208
   Insn 234: point = 210
   Insn 233: point = 212
   Insn 232: point = 214
   Insn 617: point = 216
   Insn 739: point = 218
   Insn 616: point = 219
   Insn 231: point = 221
   Insn 230: point = 223
   Insn 614: point = 225
   Insn 229: point = 227
   Insn 613: point = 228
   Insn 228: point = 230
   Insn 227: point = 232
   Insn 226: point = 234
   Insn 612: point = 236
   Insn 225: point = 238
   Insn 224: point = 240
   Insn 223: point = 242
   Insn 222: point = 244
   Insn 610: point = 246
   Insn 221: point = 248
   Insn 609: point = 249
   Insn 608: point = 251
   Insn 220: point = 253
   Insn 607: point = 253
   Insn 219: point = 255
   Insn 606: point = 257
   Insn 740: point = 259
   Insn 605: point = 260
   Insn 218: point = 262
   Insn 217: point = 264
   Insn 216: point = 266
   Insn 215: point = 268
   Insn 214: point = 270
   Insn 603: point = 272
   Insn 213: point = 274
   Insn 602: point = 275
   Insn 212: point = 277
   Insn 211: point = 279
   Insn 210: point = 281
   Insn 209: point = 283
   Insn 208: point = 285
   Insn 207: point = 287
   Insn 206: point = 289
   Insn 600: point = 291
   Insn 205: point = 293
   Insn 599: point = 294
   Insn 598: point = 296
   Insn 204: point = 298
   Insn 597: point = 298
   Insn 203: point = 300
   Insn 202: point = 302
   Insn 596: point = 304
   Insn 741: point = 306
   Insn 595: point = 307
   Insn 201: point = 309
   Insn 594: point = 309
   Insn 200: point = 311
   Insn 593: point = 313
   Insn 742: point = 315
   Insn 592: point = 316
   Insn 199: point = 318
   Insn 198: point = 320
   Insn 590: point = 322
   Insn 197: point = 324
   Insn 589: point = 325
   Insn 196: point = 327
   Insn 195: point = 329
   Insn 194: point = 331
   Insn 193: point = 333
   Insn 192: point = 335
   Insn 191: point = 337
   Insn 190: point = 339
   Insn 587: point = 341
   Insn 189: point = 343
   Insn 586: point = 344
   Insn 188: point = 346
   Insn 187: point = 348
   Insn 186: point = 350
   Insn 185: point = 352
   Insn 184: point = 354
   Insn 183: point = 356
   Insn 182: point = 358
   Insn 584: point = 360
   Insn 181: point = 362
   Insn 583: point = 363
   Insn 180: point = 365
   Insn 582: point = 367
   Insn 179: point = 369
   Insn 581: point = 369
   Insn 580: point = 371
   Insn 178: point = 373
   Insn 579: point = 373
   Insn 177: point = 375
   Insn 578: point = 377
   Insn 176: point = 379
   Insn 577: point = 379
   Insn 175: point = 381
   Insn 174: point = 383
   Insn 575: point = 385
   Insn 743: point = 386
   Insn 573: point = 388
   Insn 173: point = 390
   Insn 572: point = 391
   Insn 172: point = 393
   Insn 171: point = 395
   Insn 170: point = 397
   Insn 169: point = 399
   Insn 168: point = 401
   Insn 167: point = 403
   Insn 166: point = 405
   Insn 570: point = 407
   Insn 165: point = 409
   Insn 569: point = 410
   Insn 164: point = 412
   Insn 568: point = 414
   Insn 163: point = 416
   Insn 567: point = 416
   Insn 162: point = 418
   Insn 161: point = 420
   Insn 160: point = 422
   Insn 159: point = 424
   Insn 158: point = 426
   Insn 565: point = 428
   Insn 744: point = 429
   Insn 563: point = 431
   Insn 157: point = 433
   Insn 562: point = 434
   Insn 156: point = 436
   Insn 155: point = 438
   Insn 561: point = 440
   Insn 745: point = 442
   Insn 560: point = 443
   Insn 154: point = 445
   Insn 153: point = 447
   Insn 152: point = 449
   Insn 151: point = 451
   Insn 150: point = 453
   Insn 771: point = 455
   Insn 149: point = 457
   Insn 770: point = 458
   Insn 148: point = 460
   Insn 558: point = 462
   Insn 147: point = 464
   Insn 557: point = 464
   Insn 556: point = 466
   Insn 146: point = 468
   Insn 555: point = 468
   Insn 145: point = 470
   Insn 144: point = 472
   Insn 143: point = 474
   Insn 142: point = 476
   Insn 554: point = 478
   Insn 747: point = 479
   Insn 552: point = 481
   Insn 141: point = 483
   Insn 551: point = 484
   Insn 550: point = 486
   Insn 140: point = 488
   Insn 549: point = 488
   Insn 139: point = 490
   Insn 548: point = 492
   Insn 749: point = 494
   Insn 547: point = 495
   Insn 138: point = 497
   Insn 137: point = 499
   Insn 136: point = 501
   Insn 135: point = 503
   Insn 134: point = 505
   Insn 133: point = 507
   Insn 132: point = 509
   Insn 131: point = 511
   Insn 130: point = 513
   Insn 129: point = 515
   Insn 128: point = 517
   Insn 127: point = 519
   Insn 126: point = 521
   Insn 125: point = 523
  BB 7
   Insn 409: point = 526
   Insn 663: point = 526
   Insn 354: point = 528
   Insn 662: point = 530
   Insn 351: point = 532
   Insn 661: point = 534
   Insn 349: point = 536
   Insn 348: point = 537
   Insn 660: point = 538
   Insn 345: point = 540
   Insn 344: point = 541
   Insn 659: point = 542
   Insn 342: point = 544
   Insn 658: point = 546
   Insn 339: point = 548
   Insn 657: point = 550
   Insn 337: point = 552
   Insn 336: point = 553
   Insn 656: point = 554
   Insn 333: point = 556
   Insn 332: point = 557
   Insn 655: point = 558
   Insn 330: point = 560
   Insn 654: point = 562
   Insn 327: point = 564
   Insn 653: point = 566
   Insn 325: point = 568
   Insn 324: point = 569
   Insn 652: point = 570
   Insn 321: point = 572
   Insn 320: point = 573
   Insn 651: point = 574
   Insn 318: point = 576
   Insn 650: point = 578
   Insn 315: point = 580
   Insn 649: point = 582
   Insn 313: point = 584
   Insn 312: point = 585
   Insn 648: point = 586
   Insn 309: point = 588
   Insn 308: point = 589
   Insn 647: point = 590
   Insn 306: point = 592
   Insn 646: point = 594
   Insn 303: point = 596
   Insn 645: point = 598
   Insn 301: point = 600
   Insn 300: point = 601
   Insn 644: point = 602
   Insn 297: point = 604
   Insn 296: point = 605
   Insn 643: point = 606
   Insn 294: point = 608
   Insn 642: point = 610
   Insn 291: point = 612
   Insn 641: point = 614
   Insn 289: point = 616
   Insn 288: point = 617
   Insn 640: point = 618
   Insn 285: point = 620
   Insn 284: point = 621
   Insn 756: point = 622
   Insn 282: point = 624
   Insn 639: point = 626
   Insn 279: point = 628
   Insn 638: point = 630
   Insn 277: point = 632
   Insn 276: point = 633
   Insn 637: point = 634
   Insn 273: point = 636
   Insn 272: point = 637
   Insn 270: point = 638
   Insn 267: point = 640
   Insn 636: point = 642
   Insn 265: point = 644
   Insn 264: point = 645
   Insn 263: point = 646
   Insn 261: point = 647
   Insn 260: point = 648
  BB 5
   Insn 424: point = 650
   Insn 423: point = 652
   Insn 422: point = 654
   Insn 421: point = 656
   Insn 420: point = 658
   Insn 419: point = 660
   Insn 418: point = 662
   Insn 417: point = 664
   Insn 416: point = 666
   Insn 415: point = 668
   Insn 414: point = 670
   Insn 413: point = 672
   Insn 412: point = 674
   Insn 411: point = 676
   Insn 544: point = 678
   Insn 37: point = 680
   Insn 543: point = 681
   Insn 36: point = 683
   Insn 542: point = 684
   Insn 35: point = 686
   Insn 34: point = 687
   Insn 541: point = 688
   Insn 33: point = 690
   Insn 32: point = 691
   Insn 540: point = 692
   Insn 31: point = 694
   Insn 539: point = 695
   Insn 30: point = 697
   Insn 538: point = 698
   Insn 29: point = 700
   Insn 537: point = 701
   Insn 28: point = 703
   Insn 536: point = 704
   Insn 27: point = 706
   Insn 535: point = 707
   Insn 26: point = 709
   Insn 534: point = 710
   Insn 25: point = 712
   Insn 533: point = 713
   Insn 24: point = 715
   Insn 532: point = 716
   Insn 23: point = 718
   Insn 531: point = 719
   Insn 22: point = 721
   Insn 21: point = 722
   Insn 20: point = 723
   Insn 530: point = 725
   Insn 19: point = 726
   Insn 529: point = 728
   Insn 18: point = 729
   Insn 528: point = 731
   Insn 17: point = 732
   Insn 16: point = 733
   Insn 15: point = 734
   Insn 527: point = 736
   Insn 14: point = 737
   Insn 13: point = 738
   Insn 526: point = 740
   Insn 123: point = 741
  BB 3
   Insn 407: point = 743
   Insn 524: point = 743
   Insn 120: point = 745
   Insn 523: point = 746
   Insn 119: point = 748
   Insn 522: point = 749
   Insn 118: point = 751
   Insn 521: point = 751
   Insn 117: point = 753
   Insn 116: point = 754
   Insn 520: point = 756
   Insn 519: point = 757
   Insn 115: point = 759
   Insn 518: point = 760
   Insn 114: point = 762
   Insn 517: point = 763
   Insn 113: point = 765
   Insn 516: point = 765
   Insn 112: point = 767
   Insn 111: point = 768
   Insn 515: point = 770
  BB 4
   Insn 12: point = 772
   Insn 11: point = 773
   Insn 10: point = 774
   Insn 525: point = 775
   Insn 9: point = 777
  BB 2
   Insn 109: point = 779
   Insn 108: point = 779
   Insn 514: point = 780
   Insn 512: point = 781
   Insn 107: point = 783
   Insn 513: point = 784
   Insn 511: point = 786
   Insn 106: point = 788
   Insn 717: point = 789
   Insn 510: point = 790
   Insn 105: point = 792
   Insn 509: point = 794
   Insn 507: point = 795
   Insn 104: point = 797
   Insn 508: point = 798
   Insn 506: point = 800
   Insn 103: point = 802
   Insn 718: point = 803
   Insn 505: point = 804
   Insn 102: point = 806
   Insn 504: point = 808
   Insn 502: point = 809
   Insn 101: point = 811
   Insn 503: point = 812
   Insn 501: point = 814
   Insn 100: point = 816
   Insn 719: point = 817
   Insn 500: point = 818
   Insn 99: point = 820
   Insn 499: point = 822
   Insn 497: point = 823
   Insn 98: point = 825
   Insn 498: point = 826
   Insn 496: point = 828
   Insn 97: point = 830
   Insn 720: point = 831
   Insn 495: point = 832
   Insn 96: point = 834
   Insn 494: point = 836
   Insn 493: point = 837
   Insn 95: point = 839
   Insn 492: point = 841
   Insn 491: point = 842
   Insn 94: point = 844
   Insn 490: point = 846
   Insn 489: point = 847
   Insn 93: point = 849
   Insn 488: point = 851
   Insn 487: point = 852
   Insn 92: point = 854
   Insn 486: point = 856
   Insn 485: point = 857
   Insn 91: point = 859
   Insn 484: point = 861
   Insn 483: point = 862
   Insn 90: point = 864
   Insn 482: point = 866
   Insn 481: point = 867
   Insn 89: point = 869
   Insn 480: point = 871
   Insn 479: point = 872
   Insn 88: point = 874
   Insn 478: point = 876
   Insn 87: point = 877
   Insn 477: point = 878
   Insn 721: point = 880
   Insn 476: point = 881
   Insn 86: point = 883
   Insn 475: point = 883
   Insn 85: point = 885
   Insn 84: point = 887
   Insn 474: point = 888
   Insn 722: point = 890
   Insn 473: point = 891
   Insn 83: point = 893
   Insn 472: point = 893
   Insn 82: point = 895
   Insn 81: point = 896
   Insn 471: point = 897
   Insn 723: point = 899
   Insn 470: point = 900
   Insn 80: point = 902
   Insn 469: point = 902
   Insn 79: point = 904
   Insn 78: point = 905
   Insn 468: point = 906
   Insn 724: point = 908
   Insn 467: point = 909
   Insn 77: point = 911
   Insn 466: point = 911
   Insn 76: point = 913
   Insn 75: point = 914
   Insn 465: point = 915
   Insn 725: point = 917
   Insn 464: point = 918
   Insn 74: point = 920
   Insn 463: point = 920
   Insn 73: point = 922
   Insn 72: point = 923
   Insn 462: point = 924
   Insn 726: point = 926
   Insn 461: point = 927
   Insn 71: point = 929
   Insn 460: point = 929
   Insn 70: point = 931
   Insn 69: point = 932
   Insn 459: point = 933
   Insn 727: point = 935
   Insn 458: point = 936
   Insn 68: point = 938
   Insn 457: point = 938
   Insn 67: point = 940
   Insn 66: point = 941
   Insn 456: point = 942
   Insn 728: point = 944
   Insn 455: point = 945
   Insn 65: point = 947
   Insn 454: point = 947
   Insn 64: point = 949
   Insn 63: point = 950
   Insn 453: point = 951
   Insn 729: point = 953
   Insn 452: point = 954
   Insn 62: point = 956
   Insn 451: point = 956
   Insn 61: point = 958
   Insn 60: point = 959
   Insn 450: point = 960
   Insn 730: point = 962
   Insn 449: point = 963
   Insn 59: point = 965
   Insn 448: point = 965
   Insn 58: point = 967
   Insn 57: point = 968
   Insn 447: point = 969
   Insn 731: point = 971
   Insn 446: point = 972
   Insn 56: point = 974
   Insn 445: point = 974
   Insn 55: point = 976
   Insn 54: point = 977
   Insn 444: point = 978
   Insn 732: point = 980
   Insn 443: point = 981
   Insn 53: point = 983
   Insn 442: point = 983
   Insn 52: point = 985
   Insn 51: point = 986
   Insn 441: point = 987
   Insn 733: point = 989
   Insn 440: point = 990
   Insn 50: point = 992
   Insn 439: point = 992
   Insn 49: point = 994
   Insn 48: point = 995
   Insn 438: point = 996
   Insn 734: point = 998
   Insn 437: point = 999
   Insn 47: point = 1001
   Insn 436: point = 1001
   Insn 46: point = 1003
   Insn 45: point = 1004
   Insn 435: point = 1004
   Insn 44: point = 1006
   Insn 434: point = 1006
   Insn 43: point = 1008
   Insn 42: point = 1009
   Insn 41: point = 1009
   Insn 40: point = 1011
   Insn 7: point = 1012
   Insn 6: point = 1013
 r100: [149..722]
 r119: [104..872]
 r120: [103..867]
 r121: [68..862]
 r122: [67..857]
 r123: [36..852]
 r124: [35..847]
 r125: [8..842]
 r126: [7..837]
 r127: [112..831]
 r128: [111..817]
 r129: [76..803]
 r130: [75..789]
 r146: [237..494]
 r148: [196..486]
 r162: [187..442]
 r197: [374..781] [83..259]
 r208: [520..738] [122..315]
 r210: [772..775] [380..743] [17..306]
 r214: [480..729] [45..296]
 r230: [430..726] [26..251]
 r241: [425..734] [94..218]
 r246: [387..723] [25..204]
 r262: [469..809] [127..155]
 r290: [650..678] [524..642]
 r295: [650..998] [485..634]
 r298: [650..684] [483..630]
 r299: [650..989] [457..626]
 r303: [650..980] [435..618]
 r306: [650..688] [433..614]
 r307: [650..971] [411..610]
 r311: [650..962] [392..602]
 r314: [650..692] [390..598]
 r315: [650..953] [364..594]
 r316: [650..695] [362..590]
 r319: [650..944] [345..586]
 r322: [650..698] [343..582]
 r323: [650..935] [326..578]
 r324: [650..701] [324..574]
 r327: [650..926] [295..570]
 r330: [650..704] [293..566]
 r331: [650..917] [276..562]
 r332: [650..707] [274..558]
 r335: [650..908] [250..554]
 r338: [650..710] [248..550]
 r339: [650..899] [229..546]
 r340: [650..713] [227..542]
 r343: [650..890] [203..538]
 r346: [650..716] [201..534]
 r347: [650..880] [177..530]
 r348: [650..719] [175..526]
 r522: [382..670] [137..166]
 r529: [650..656] [459..622]
 r530: [650..654] [409..606]
 r713: [128..129]
 r715: [119..120]
 r720: [91..92]
 r726: [53..54]
 r727: [56..57]
 r729: [46..47]
 r734: [18..19]
 r775: [84..85]
Compressing live ranges: from 1013 to 34 - 3%
Ranges after the compression:
 r100: [16..31]
 r119: [12..33]
 r120: [12..33]
 r121: [8..33]
 r122: [8..33]
 r123: [2..33]
 r124: [2..33]
 r125: [0..33]
 r126: [0..33]
 r127: [12..33]
 r128: [12..33]
 r129: [8..33]
 r130: [8..33]
 r146: [20..27]
 r148: [18..27]
 r162: [18..25]
 r197: [24..33] [8..21]
 r208: [28..31] [14..23]
 r210: [0..33]
 r214: [26..31] [2..23]
 r230: [24..31] [2..21]
 r241: [24..31] [12..19]
 r246: [24..31] [2..19]
 r262: [26..33] [14..17]
 r290: [28..31]
 r295: [26..33]
 r298: [26..31]
 r299: [26..33]
 r303: [24..33]
 r306: [24..31]
 r307: [24..33]
 r311: [24..33]
 r314: [24..31]
 r315: [24..33]
 r316: [24..31]
 r319: [24..33]
 r322: [24..31]
 r323: [24..33]
 r324: [24..31]
 r327: [22..33]
 r330: [22..31]
 r331: [22..33]
 r332: [22..31]
 r335: [20..33]
 r338: [20..31]
 r339: [20..33]
 r340: [20..31]
 r343: [18..33]
 r346: [18..31]
 r347: [18..33]
 r348: [18..31]
 r522: [24..31] [16..17]
 r529: [26..31]
 r530: [24..31]
 r713: [14..15]
 r715: [12..13]
 r720: [10..11]
 r726: [4..5]
 r727: [6..7]
 r729: [2..3]
 r734: [0..1]
 r775: [8..9]

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)

Cands:
0 (nop=0, remat_regno=295, reload_regno=-1):
(insn 734 437 438 2 (set (reg:DI 295 [ D.5867 ])
                    (reg:DI 754 [orig:295 D.5867 ] [295])) 89 {*movdi_internal}
                 (nil))
1 (nop=0, remat_regno=299, reload_regno=-1):
(insn 733 440 441 2 (set (reg:DI 299 [ D.5867 ])
                    (reg:DI 753 [orig:299 D.5867 ] [299])) 89 {*movdi_internal}
                 (nil))
2 (nop=0, remat_regno=303, reload_regno=-1):
(insn 732 443 444 2 (set (reg:DI 303 [ D.5867 ])
                    (reg:DI 752 [orig:303 D.5867 ] [303])) 89 {*movdi_internal}
                 (nil))
3 (nop=0, remat_regno=307, reload_regno=-1):
(insn 731 446 447 2 (set (reg:DI 307 [ D.5867 ])
                    (reg:DI 751 [orig:307 D.5867 ] [307])) 89 {*movdi_internal}
                 (nil))
4 (nop=0, remat_regno=311, reload_regno=-1):
(insn 730 449 450 2 (set (reg:DI 311 [ D.5867 ])
                    (reg:DI 750 [orig:311 D.5867 ] [311])) 89 {*movdi_internal}
                 (nil))
5 (nop=0, remat_regno=315, reload_regno=-1):
(insn 729 452 453 2 (set (reg:DI 315 [ D.5867 ])
                    (reg:DI 749 [orig:315 D.5867 ] [315])) 89 {*movdi_internal}
                 (nil))
6 (nop=0, remat_regno=319, reload_regno=-1):
(insn 728 455 456 2 (set (reg:DI 319 [ D.5867 ])
                    (reg:DI 748 [orig:319 D.5867 ] [319])) 89 {*movdi_internal}
                 (nil))
7 (nop=0, remat_regno=323, reload_regno=-1):
(insn 727 458 459 2 (set (reg:DI 323 [ D.5867 ])
                    (reg:DI 747 [orig:323 D.5867 ] [323])) 89 {*movdi_internal}
                 (nil))
8 (nop=0, remat_regno=327, reload_regno=-1):
(insn 726 461 462 2 (set (reg:DI 327 [ D.5867 ])
                    (reg:DI 746 [orig:327 D.5867 ] [327])) 89 {*movdi_internal}
                 (nil))
9 (nop=0, remat_regno=331, reload_regno=-1):
(insn 725 464 465 2 (set (reg:DI 331 [ D.5867 ])
                    (reg:DI 745 [orig:331 D.5867 ] [331])) 89 {*movdi_internal}
                 (nil))
10 (nop=0, remat_regno=335, reload_regno=-1):
(insn 724 467 468 2 (set (reg:DI 335 [ D.5867 ])
                    (reg:DI 744 [orig:335 D.5867 ] [335])) 89 {*movdi_internal}
                 (nil))
11 (nop=0, remat_regno=339, reload_regno=-1):
(insn 723 470 471 2 (set (reg:DI 339 [ D.5867 ])
                    (reg:DI 743 [orig:339 D.5867 ] [339])) 89 {*movdi_internal}
                 (nil))
12 (nop=0, remat_regno=343, reload_regno=-1):
(insn 722 473 474 2 (set (reg:DI 343 [ D.5867 ])
                    (reg:DI 742 [orig:343 D.5867 ] [343])) 89 {*movdi_internal}
                 (nil))
13 (nop=0, remat_regno=347, reload_regno=-1):
(insn 721 476 477 2 (set (reg:DI 347 [ D.5867 ])
                    (reg:DI 741 [orig:347 D.5867 ] [347])) 89 {*movdi_internal}
                 (nil))
14 (nop=0, remat_regno=127, reload_regno=-1):
(insn 720 495 97 2 (set (reg:DI 127 [ D.5863 ])
                    (reg:DI 740 [orig:127 D.5863 ] [127])) blake_ref.c:155 89 {*movdi_internal}
                 (nil))
15 (nop=0, remat_regno=128, reload_regno=-1):
(insn 719 500 100 2 (set (reg:DI 128 [ D.5863 ])
                    (reg:DI 739 [orig:128 D.5863 ] [128])) blake_ref.c:156 89 {*movdi_internal}
                 (nil))
16 (nop=0, remat_regno=129, reload_regno=-1):
(insn 718 505 103 2 (set (reg:DI 129 [ D.5863 ])
                    (reg:DI 738 [orig:129 D.5863 ] [129])) blake_ref.c:157 89 {*movdi_internal}
                 (nil))
17 (nop=0, remat_regno=130, reload_regno=-1):
(insn 717 510 106 2 (set (reg:DI 130 [ D.5863 ])
                    (reg:DI 737 [orig:130 D.5863 ] [130])) blake_ref.c:158 89 {*movdi_internal}
                 (nil))
18 (nop=0, remat_regno=210, reload_regno=599):
(insn 9 405 525 4 (set (reg:DI 599 [orig:210 v$15 ] [210])
                    (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:163 89 {*movdi_internal}
                 (nil))
19 (nop=0, remat_regno=100, reload_regno=-1):
(insn 21 20 22 5 (set (reg:SI 100 [ D.5861 ])
                    (const_int 16 [0x10])) blake_ref.c:160 90 {*movsi_internal}
                 (expr_list:REG_EQUAL (const_int 16 [0x10])
                    (nil)))
20 (nop=0, remat_regno=348, reload_regno=605):
(insn 22 21 531 5 (set (reg:DI 605 [orig:348 D.5868 ] [348])
                    (const_int 577009281997405206 [0x801f2e2858efc16])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int 577009281997405206 [0x801f2e2858efc16])
                    (nil)))
21 (nop=0, remat_regno=346, reload_regno=606):
(insn 23 531 532 5 (set (reg:DI 606 [orig:346 D.5868 ] [346])
                    (const_int 7163292796296056425 [0x636920d871574e69])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int 7163292796296056425 [0x636920d871574e69])
                    (nil)))
22 (nop=0, remat_regno=340, reload_regno=607):
(insn 24 532 533 5 (set (reg:DI 607 [orig:340 D.5868 ] [340])
                    (const_int -5008970055469465703 [0xba7c9045f12c7f99])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int -5008970055469465703 [0xba7c9045f12c7f99])
                    (nil)))
23 (nop=0, remat_regno=338, reload_regno=608):
(insn 25 533 534 5 (set (reg:DI 608 [orig:338 D.5868 ] [338])
                    (const_int 2639559389850201335 [0x24a19947b3916cf7])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int 2639559389850201335 [0x24a19947b3916cf7])
                    (nil)))
24 (nop=0, remat_regno=332, reload_regno=609):
(insn 26 534 535 5 (set (reg:DI 609 [orig:332 D.5868 ] [332])
                    (const_int 3458046377305235383 [0x2ffd72dbd01adfb7])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int 3458046377305235383 [0x2ffd72dbd01adfb7])
                    (nil)))
25 (nop=0, remat_regno=330, reload_regno=610):
(insn 27 535 536 5 (set (reg:DI 610 [orig:330 D.5868 ] [330])
                    (const_int -5124621466747896170 [0xb8e1afed6a267e96])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int -5124621466747896170 [0xb8e1afed6a267e96])
                    (nil)))
26 (nop=0, remat_regno=324, reload_regno=611):
(insn 28 536 537 5 (set (reg:DI 611 [orig:324 D.5868 ] [324])
                    (const_int -7919907764393346277 [0x9216d5d98979fb1b])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int -7919907764393346277 [0x9216d5d98979fb1b])
                    (nil)))
27 (nop=0, remat_regno=322, reload_regno=612):
(insn 29 537 538 5 (set (reg:DI 612 [orig:322 D.5868 ] [322])
                    (const_int -3372901835766516308 [0xd1310ba698dfb5ac])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int -3372901835766516308 [0xd1310ba698dfb5ac])
                    (nil)))
28 (nop=0, remat_regno=316, reload_regno=613):
(insn 30 538 539 5 (set (reg:DI 613 [orig:316 D.5868 ] [316])
                    (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])
                    (nil)))
29 (nop=0, remat_regno=314, reload_regno=614):
(insn 31 539 540 5 (set (reg:DI 614 [orig:314 D.5868 ] [314])
                    (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int 4577018097722394903 [0x3f84d5b5b5470917])
                    (nil)))
30 (nop=0, remat_regno=306, reload_regno=615):
(insn 33 32 541 5 (set (reg:DI 615 [orig:306 D.5868 ] [306])
                    (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int -4732044268327596948 [0xbe5466cf34e90c6c])
                    (nil)))
31 (nop=0, remat_regno=298, reload_regno=616):
(insn 35 34 542 5 (set (reg:DI 616 [orig:298 D.5868 ] [298])
                    (const_int 589684135938649225 [0x82efa98ec4e6c89])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int 589684135938649225 [0x82efa98ec4e6c89])
                    (nil)))
32 (nop=0, remat_regno=290, reload_regno=618):
(insn 37 735 544 5 (set (reg:DI 618 [orig:290 D.5868 ] [290])
                    (const_int 1376283091369227076 [0x13198a2e03707344])) blake_ref.c:160 89 {*movdi_internal}
                 (expr_list:REG_EQUAL (const_int 1376283091369227076 [0x13198a2e03707344])
                    (nil)))
33 (nop=0, remat_regno=146, reload_regno=-1):
(insn 749 750 778 6 (set (reg:DI 146 [ D.5863 ])
                    (reg:DI 770 [orig:146 D.5863 ] [146])) blake_ref.c:176 89 {*movdi_internal}
                 (nil))
34 (nop=0, remat_regno=162, reload_regno=-1):
(insn 745 746 776 6 (set (reg:DI 162 [ D.5863 ])
                    (reg:DI 766 [orig:162 D.5863 ] [162])) blake_ref.c:177 89 {*movdi_internal}
                 (nil))
35 (nop=0, remat_regno=208, reload_regno=-1):
(insn 742 592 593 6 (set (reg:DI 208 [ v$0 ])
                    (reg:DI 762 [orig:208 v$0 ] [208])) blake_ref.c:181 89 {*movdi_internal}
                 (nil))
36 (nop=0, remat_regno=210, reload_regno=-1):
(insn 741 595 596 6 (set (reg:DI 210 [ v$15 ])
                    (reg:DI 761 [orig:210 v$15 ] [210])) blake_ref.c:181 89 {*movdi_internal}
                 (nil))
37 (nop=0, remat_regno=197, reload_regno=-1):
(insn 740 605 606 6 (set (reg:DI 197 [ v$11 ])
                    (reg:DI 760 [orig:197 v$11 ] [197])) blake_ref.c:182 89 {*movdi_internal}
                 (nil))
38 (nop=0, remat_regno=241, reload_regno=-1):
(insn 739 616 617 6 (set (reg:DI 241 [ v$2 ])
                    (reg:DI 759 [orig:241 v$2 ] [241])) blake_ref.c:183 89 {*movdi_internal}
                 (nil))
39 (nop=0, remat_regno=522, reload_regno=-1):
(insn 737 630 631 6 (set (reg:DI 522 [orig:258 v$3 ] [258])
                    (reg:DI 757 [orig:258 v$3 ] [258])) blake_ref.c:184 89 {*movdi_internal}
                 (nil))
40 (nop=0, remat_regno=262, reload_regno=-1):
(insn 736 632 633 6 (set (reg:DI 262 [ v$9 ])
                    (reg:DI 756 [orig:262 v$9 ] [262])) blake_ref.c:184 89 {*movdi_internal}
                 (nil))

BB 2:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 211 244 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347
  changed regs
  dead regs: 1 [dx] 2 [cx] 16 [argp] 17 [flags] 20 [frame] 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754
  livein cands in BB 2:

       18   19   20   21   22   23   24   25   26   27   28
       29   30   31   32

BB 3:
  register live in: 119 120 121 122 123 124 125 126 127 128 129 130 197 211 244 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 210 211 227 243 244 260 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347
  changed regs: 132 133 210 227 243 260 372 373 374 375 593 594 595 596 597 598
  dead regs: 16 [argp] 132 133 372 373 374 375 593 594 595 596 597 598
  livein cands in BB 3:

       18   19   20   21   22   23   24   25   26   27   28
       29   30   31   32

BB 4:
  register live in: 119 120 121 122 123 124 125 126 127 128 129 130 197 211 244 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 210 211 227 243 244 260 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347
  changed regs: 210 227 243 260 599
  dead regs: 599
  cands generated in BB 4:

       18
  livein cands in BB 4:

       18   19   20   21   22   23   24   25   26   27   28
       29   30   31   32
  pavout cands in BB 4:

       18
  avout cands in BB 4:

       18

BB 5:
  register live in: 119 120 121 122 123 124 125 126 127 128 129 130 197 210 211 227 243 244 260 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 214 230 241 246 262 290 295 298 299 303 306 307 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348 517 518 519 520 521 522 523 524 525 526 527 528 529 530
  changed regs: 100 208 214 225 230 241 246 258 264 269 290 298 300 306 308 314 316 322 324 330 332 338 340 346 348 517 518 519 520 521 522 523 524 525 526 527 528 529 530 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 755
  dead regs: 211 225 227 243 244 258 260 264 269 287 291 300 308 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 755
  cands generated in BB 5:

       19   20   21   22   23   24   25   26   27   28   29
       30   31   32
  livein cands in BB 5:

       18   19   20   21   22   23   24   25   26   27   28
       29   30   31   32
  pavin cands in BB 5:

       18
  pavout cands in BB 5:

       18   19   20   21   22   23   24   25   26   27   28
       29   30   31   32
  avout cands in BB 5:

       19   20   21   22   23   24   25   26   27   28   29
       30   31   32

BB 6:
  register live in: 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 214 230 241 246 262 290 295 298 299 303 306 307 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348 517 518 519 520 521 522 523 524 525 526 527 528 529 530
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 214 230 241 246 262 517 518 519 520 521 522 523 524 525
  changed regs
  dead regs: 17 [flags
  livein cands in BB 6:

       18   19   20   21   22   23   24   25   26   27   28
       29   30   31   32
  pavin cands in BB 6:

       18   19   20   21   22   23   24   25   26   27   28
       29   30   31   32

BB 7:
  register live in: 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 214 230 241 246 262 517 518 519 520 521 522 523 524 525
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 214 230 241 246 262 290 295 298 299 303 306 307 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348 517 518 519 520 521 522 523 524 525 526 527 528 529 530
  changed regs: 290 295 298 299 303 306 307 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348 440 441 442 446 448 452 454 458 460 464 466 470 472 476 478 482 484 526 527 528 529 530 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 776
  dead regs: 20 [frame] 440 441 442 446 448 452 454 458 460 464 466 470 472 476 478 482 484 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 776
  livein cands in BB 7:

       18   19   20   21   22   23   24   25   26   27   28
       29   30   31   32

BB 8:
  register live in: 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 214 230 241 246 262 517 518 519 520 521 522 523 524
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 0 [ax] 225 227 243 244 258 260 264 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 506 507 508 509 510 511 513 514 515 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 771 775
  dead regs: 16 [argp] 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 214 225 227 230 241 243 244 246 258 260 262 264 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 506 507 508 509 510 511 513 514 515 517 518 519 520 521 522 523 524 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 771 775
  livein cands in BB 8:

       18   19   20   21   22   23   24   25   26   27   28
       29   30   31   32
  Slot 0 regnos (width = 8):	 208	 775	 734	 729	 727	 726	 720	 715
  Slot 1 regnos (width = 8):	 214
  Slot 2 regnos (width = 8):	 230
  Slot 3 regnos (width = 8):	 241
  Slot 4 regnos (width = 8):	 246
  Slot 5 regnos (width = 8):	 522	 713
  Slot 6 regnos (width = 8):	 197
  Slot 7 regnos (width = 8):	 210
  Slot 8 regnos (width = 8):	 262	 162
  Slot 9 regnos (width = 8):	 290	 146
  Slot 10 regnos (width = 8):	 298
  Slot 11 regnos (width = 8):	 306
  Slot 12 regnos (width = 8):	 314
  Slot 13 regnos (width = 8):	 316
  Slot 14 regnos (width = 8):	 322
  Slot 15 regnos (width = 8):	 324
  Slot 16 regnos (width = 8):	 330
  Slot 17 regnos (width = 8):	 332
  Slot 18 regnos (width = 8):	 338
  Slot 19 regnos (width = 8):	 340
  Slot 20 regnos (width = 8):	 346
  Slot 21 regnos (width = 8):	 348
  Slot 22 regnos (width = 8):	 529
  Slot 23 regnos (width = 8):	 530
  Slot 24 regnos (width = 8):	 295
  Slot 25 regnos (width = 8):	 299
  Slot 26 regnos (width = 8):	 303
  Slot 27 regnos (width = 8):	 307
  Slot 28 regnos (width = 8):	 311
  Slot 29 regnos (width = 8):	 315
  Slot 30 regnos (width = 8):	 319
  Slot 31 regnos (width = 8):	 323
  Slot 32 regnos (width = 8):	 327
  Slot 33 regnos (width = 8):	 331
  Slot 34 regnos (width = 8):	 335
  Slot 35 regnos (width = 8):	 339
  Slot 36 regnos (width = 8):	 343
  Slot 37 regnos (width = 8):	 347
  Slot 38 regnos (width = 8):	 148
  Slot 39 regnos (width = 4):	 100
  Slot 40 regnos (width = 8):	 119
  Slot 41 regnos (width = 8):	 120
  Slot 42 regnos (width = 8):	 121
  Slot 43 regnos (width = 8):	 122
  Slot 44 regnos (width = 8):	 123
  Slot 45 regnos (width = 8):	 124
  Slot 46 regnos (width = 8):	 125
  Slot 47 regnos (width = 8):	 126
  Slot 48 regnos (width = 8):	 127
  Slot 49 regnos (width = 8):	 128
  Slot 50 regnos (width = 8):	 129
  Slot 51 regnos (width = 8):	 130
Changing spilled pseudos to memory in insn #734
Changing spilled pseudos to memory in insn #733
Changing spilled pseudos to memory in insn #732
Changing spilled pseudos to memory in insn #731
Changing spilled pseudos to memory in insn #730
Changing spilled pseudos to memory in insn #729
Changing spilled pseudos to memory in insn #728
Changing spilled pseudos to memory in insn #727
Changing spilled pseudos to memory in insn #726
Changing spilled pseudos to memory in insn #725
Changing spilled pseudos to memory in insn #724
Changing spilled pseudos to memory in insn #723
Changing spilled pseudos to memory in insn #722
Changing spilled pseudos to memory in insn #721
Changing spilled pseudos to memory in insn #479
Changing spilled pseudos to memory in insn #481
Changing spilled pseudos to memory in insn #483
Changing spilled pseudos to memory in insn #485
Changing spilled pseudos to memory in insn #487
Changing spilled pseudos to memory in insn #489
Changing spilled pseudos to memory in insn #491
Changing spilled pseudos to memory in insn #493
Changing spilled pseudos to memory in insn #720
Changing spilled pseudos to memory in insn #719
Changing spilled pseudos to memory in insn #502
Changing spilled pseudos to memory in insn #718
Changing spilled pseudos to memory in insn #717
Changing spilled pseudos to memory in insn #512
Changing spilled pseudos to memory in insn #524
Changing spilled pseudos to memory in insn #525
Changing spilled pseudos to memory in insn #526
Changing spilled pseudos to memory in insn #13
Changing spilled pseudos to memory in insn #14
Changing spilled pseudos to memory in insn #527
Changing spilled pseudos to memory in insn #15
Changing spilled pseudos to memory in insn #16
Changing spilled pseudos to memory in insn #17
Changing spilled pseudos to memory in insn #528
Changing spilled pseudos to memory in insn #18
Changing spilled pseudos to memory in insn #529
Changing spilled pseudos to memory in insn #19
Changing spilled pseudos to memory in insn #530
Changing spilled pseudos to memory in insn #20
Changing spilled pseudos to memory in insn #21
Changing spilled pseudos to memory in insn #531
Changing spilled pseudos to memory in insn #532
Changing spilled pseudos to memory in insn #533
Changing spilled pseudos to memory in insn #534
Changing spilled pseudos to memory in insn #535
Changing spilled pseudos to memory in insn #536
Changing spilled pseudos to memory in insn #537
Changing spilled pseudos to memory in insn #538
Changing spilled pseudos to memory in insn #539
Changing spilled pseudos to memory in insn #540
Changing spilled pseudos to memory in insn #541
Changing spilled pseudos to memory in insn #542
Changing spilled pseudos to memory in insn #544
Changing spilled pseudos to memory in insn #414
Changing spilled pseudos to memory in insn #421
Changing spilled pseudos to memory in insn #422
Changing spilled pseudos to memory in insn #125
Changing spilled pseudos to memory in insn #127
Changing spilled pseudos to memory in insn #749
Changing spilled pseudos to memory in insn #550
Changing spilled pseudos to memory in insn #551
Changing spilled pseudos to memory in insn #141
Changing spilled pseudos to memory in insn #747
Changing spilled pseudos to memory in insn #555
Changing spilled pseudos to memory in insn #770
Changing spilled pseudos to memory in insn #149
Changing spilled pseudos to memory in insn #745
Changing spilled pseudos to memory in insn #562
Changing spilled pseudos to memory in insn #157
Changing spilled pseudos to memory in insn #744
Changing spilled pseudos to memory in insn #159
Changing spilled pseudos to memory in insn #569
Changing spilled pseudos to memory in insn #165
Changing spilled pseudos to memory in insn #572
Changing spilled pseudos to memory in insn #173
Changing spilled pseudos to memory in insn #743
Changing spilled pseudos to memory in insn #175
Changing spilled pseudos to memory in insn #577
Changing spilled pseudos to memory in insn #579
Changing spilled pseudos to memory in insn #583
Changing spilled pseudos to memory in insn #181
Changing spilled pseudos to memory in insn #586
Changing spilled pseudos to memory in insn #189
Changing spilled pseudos to memory in insn #589
Changing spilled pseudos to memory in insn #197
Changing spilled pseudos to memory in insn #742
Changing spilled pseudos to memory in insn #741
Changing spilled pseudos to memory in insn #598
Changing spilled pseudos to memory in insn #599
Changing spilled pseudos to memory in insn #205
Changing spilled pseudos to memory in insn #602
Changing spilled pseudos to memory in insn #213
Changing spilled pseudos to memory in insn #740
Changing spilled pseudos to memory in insn #608
Changing spilled pseudos to memory in insn #609
Changing spilled pseudos to memory in insn #221
Changing spilled pseudos to memory in insn #612
Changing spilled pseudos to memory in insn #613
Changing spilled pseudos to memory in insn #229
Changing spilled pseudos to memory in insn #739
Changing spilled pseudos to memory in insn #619
Changing spilled pseudos to memory in insn #620
Changing spilled pseudos to memory in insn #237
Changing spilled pseudos to memory in insn #738
Changing spilled pseudos to memory in insn #624
Changing spilled pseudos to memory in insn #627
Changing spilled pseudos to memory in insn #245
Changing spilled pseudos to memory in insn #737
Changing spilled pseudos to memory in insn #736
Changing spilled pseudos to memory in insn #255
Changing spilled pseudos to memory in insn #636
Changing spilled pseudos to memory in insn #637
Changing spilled pseudos to memory in insn #638
Changing spilled pseudos to memory in insn #639
Changing spilled pseudos to memory in insn #756
Changing spilled pseudos to memory in insn #640
Changing spilled pseudos to memory in insn #641
Changing spilled pseudos to memory in insn #642
Changing spilled pseudos to memory in insn #643
Changing spilled pseudos to memory in insn #644
Changing spilled pseudos to memory in insn #645
Changing spilled pseudos to memory in insn #646
Changing spilled pseudos to memory in insn #647
Changing spilled pseudos to memory in insn #648
Changing spilled pseudos to memory in insn #649
Changing spilled pseudos to memory in insn #650
Changing spilled pseudos to memory in insn #651
Changing spilled pseudos to memory in insn #652
Changing spilled pseudos to memory in insn #653
Changing spilled pseudos to memory in insn #654
Changing spilled pseudos to memory in insn #655
Changing spilled pseudos to memory in insn #656
Changing spilled pseudos to memory in insn #657
Changing spilled pseudos to memory in insn #658
Changing spilled pseudos to memory in insn #659
Changing spilled pseudos to memory in insn #660
Changing spilled pseudos to memory in insn #661
Changing spilled pseudos to memory in insn #662
Changing spilled pseudos to memory in insn #663
Changing spilled pseudos to memory in insn #430
Changing spilled pseudos to memory in insn #665
Changing spilled pseudos to memory in insn #667
Changing spilled pseudos to memory in insn #361
Changing spilled pseudos to memory in insn #669
Changing spilled pseudos to memory in insn #671
Changing spilled pseudos to memory in insn #362
Changing spilled pseudos to memory in insn #673
Changing spilled pseudos to memory in insn #364
Changing spilled pseudos to memory in insn #676
Changing spilled pseudos to memory in insn #366
Changing spilled pseudos to memory in insn #680
Changing spilled pseudos to memory in insn #682
Changing spilled pseudos to memory in insn #370
Changing spilled pseudos to memory in insn #684
Changing spilled pseudos to memory in insn #755
Changing spilled pseudos to memory in insn #371
Changing spilled pseudos to memory in insn #687
Changing spilled pseudos to memory in insn #373
Changing spilled pseudos to memory in insn #690
Changing spilled pseudos to memory in insn #375
Changing spilled pseudos to memory in insn #694
Changing spilled pseudos to memory in insn #697
Changing spilled pseudos to memory in insn #696
Changing spilled pseudos to memory in insn #379
Changing spilled pseudos to memory in insn #699
Changing spilled pseudos to memory in insn #701
Changing spilled pseudos to memory in insn #380
Changing spilled pseudos to memory in insn #703
Changing spilled pseudos to memory in insn #384
Changing spilled pseudos to memory in insn #707
Changing spilled pseudos to memory in insn #388
Changing spilled pseudos to memory in insn #710
Changing spilled pseudos to memory in insn #712
Changing spilled pseudos to memory in insn #389
Changing spilled pseudos to memory in insn #714
Changing spilled pseudos to memory in insn #393
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=624, prev_offset=208)
Can eliminate 16 to 6 (offset=496, prev_offset=0)
Can eliminate 20 to 7 (offset=544, prev_offset=128)
Can eliminate 20 to 6 (offset=416, prev_offset=0)

********** Local #4: **********

	   Spilling non-eliminable hard regs: 7
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 716:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 705:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 692:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 678:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 520:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 515:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 514:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 509:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 504:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 499:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 494:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 492:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 490:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 488:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 486:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 484:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 482:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 480:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 478:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 351:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 345:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 339:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 333:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 327:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 321:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 315:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 309:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 303:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 297:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 291:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 285:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 279:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 273:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 261:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 87:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 84:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 81:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 78:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 75:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 72:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 69:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 66:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 63:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 60:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 57:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 54:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 51:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 45:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 393:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 714:  (0) *v  (1) m {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 389:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 712:  (0) *v  (1) m {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 710:  (0) m  (1) re {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 388:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 707:  (0) *v  (1) m {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 384:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 703:  (0) *v  (1) m {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 380:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 701:  (0) *v  (1) m {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 699:  (0) m  (1) re {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 379:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 696:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 697:  (0) *v  (1) m {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 694:  (0) m  (1) re {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 375:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 690:  (0) *v  (1) m {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 373:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 687:  (0) *v  (1) m {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 371:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 755:  (0) *v  (1) m {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 684:  (0) m  (1) re {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 370:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 682:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 680:  (0) *v  (1) m {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 366:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 676:  (0) *v  (1) m {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 364:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 673:  (0) *v  (1) m {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 362:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 671:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 669:  (0) *v  (1) m {*movdi_internal}
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=600
            1 Costly loser: reject++
            alt=5: Bad operand -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 361:  (0) x  (1) 0  (2) m {vec_concatv2di}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=19,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=14,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=19,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly set: reject++
            alt=12: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=611,losers=1,rld_nregs=1
            0 Costly set: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 667:  (0) *v  (1) m {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 665:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 430:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 663:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 662:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 661:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 660:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 659:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 658:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 657:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 656:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 655:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 654:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 653:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 652:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 651:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 650:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 649:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 648:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 647:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 646:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 645:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 644:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 643:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 642:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 641:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 640:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 756:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 639:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 638:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 637:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 636:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 255:  (0) rm  (1) 0  (2) re {*addsi_2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 736:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 737:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 627:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 624:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 738:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 237:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 620:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 619:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 739:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 229:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 613:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 612:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 221:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 609:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 608:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 740:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 602:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 205:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 599:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 598:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 741:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 742:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 197:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 589:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 586:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 583:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 579:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 577:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 743:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 572:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 569:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 744:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 562:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 745:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 770:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 555:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 747:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*xordi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 551:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 550:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 749:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*xordi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 422:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 421:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 414:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 544:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 542:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 541:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 540:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 539:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 538:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 537:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 536:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 535:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 534:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 533:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 532:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 531:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 530:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 529:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 528:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 527:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 526:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 525:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 524:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 512:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 717:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 718:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 502:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 719:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 720:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 493:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 491:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 489:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 487:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 485:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 483:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 481:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 479:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 721:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 722:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 723:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 724:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 725:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 726:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 727:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 728:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 729:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 730:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 731:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 732:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 733:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 734:  (0) m  (1) re {*movdi_internal}
New elimination table:
Can eliminate 16 to 7 (offset=624, prev_offset=624)
Can eliminate 16 to 6 (offset=496, prev_offset=0)
Can eliminate 20 to 7 (offset=544, prev_offset=544)
Can eliminate 20 to 6 (offset=416, prev_offset=0)
changing reg in insn 111
changing reg in insn 115
changing reg in insn 113
changing reg in insn 116
changing reg in insn 120
changing reg in insn 118
changing reg in insn 127
changing reg in insn 134
changing reg in insn 129
changing reg in insn 136
changing reg in insn 130
changing reg in insn 138
changing reg in insn 132
changing reg in insn 139
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 208
changing reg in insn 138
changing reg in insn 143
changing reg in insn 150
changing reg in insn 145
changing reg in insn 152
changing reg in insn 154
changing reg in insn 148
changing reg in insn 155
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 224
changing reg in insn 154
changing reg in insn 156
changing reg in insn 195
changing reg in insn 191
changing reg in insn 159
changing reg in insn 166
changing reg in insn 161
changing reg in insn 168
changing reg in insn 162
changing reg in insn 170
changing reg in insn 164
changing reg in insn 171
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 240
changing reg in insn 170
changing reg in insn 170
changing reg in insn 194
changing reg in insn 171
changing reg in insn 172
changing reg in insn 211
changing reg in insn 207
changing reg in insn 175
changing reg in insn 177
changing reg in insn 184
changing reg in insn 186
changing reg in insn 180
changing reg in insn 187
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 192
changing reg in insn 186
changing reg in insn 186
changing reg in insn 210
changing reg in insn 187
changing reg in insn 188
changing reg in insn 227
changing reg in insn 223
changing reg in insn 191
changing reg in insn 192
changing reg in insn 193
changing reg in insn 200
changing reg in insn 194
changing reg in insn 194
changing reg in insn 202
changing reg in insn 195
changing reg in insn 196
changing reg in insn 203
changing reg in insn 199
changing reg in insn 415
changing reg in insn 207
changing reg in insn 208
changing reg in insn 209
changing reg in insn 216
changing reg in insn 210
changing reg in insn 210
changing reg in insn 218
changing reg in insn 211
changing reg in insn 212
changing reg in insn 215
changing reg in insn 219
changing reg in insn 426
changing reg in insn 14
changing reg in insn 424
changing reg in insn 427
changing reg in insn 12
changing reg in insn 411
changing reg in insn 223
changing reg in insn 224
changing reg in insn 225
changing reg in insn 232
changing reg in insn 226
changing reg in insn 226
changing reg in insn 234
changing reg in insn 227
changing reg in insn 228
changing reg in insn 235
changing reg in insn 231
changing reg in insn 428
changing reg in insn 11
changing reg in insn 412
changing reg in insn 429
changing reg in insn 413
changing reg in insn 239
changing reg in insn 240
changing reg in insn 241
changing reg in insn 248
changing reg in insn 242
changing reg in insn 242
changing reg in insn 250
changing reg in insn 243
changing reg in insn 244
changing reg in insn 247
changing reg in insn 251
changing reg in insn 430
changing reg in insn 16
changing reg in insn 414
changing reg in insn 431
changing reg in insn 10
changing reg in insn 416
changing reg in insn 432
changing reg in insn 17
changing reg in insn 417
changing reg in insn 123
changing reg in insn 418
changing reg in insn 41
changing reg in insn 419
changing reg in insn 42
changing reg in insn 423
changing reg in insn 45
changing reg in insn 34
changing reg in insn 421
changing reg in insn 32
changing reg in insn 422
changing reg in insn 7
changing reg in insn 85
changing reg in insn 82
changing reg in insn 79
changing reg in insn 76
changing reg in insn 73
changing reg in insn 70
changing reg in insn 67
changing reg in insn 64
changing reg in insn 61
changing reg in insn 58
changing reg in insn 55
changing reg in insn 52
changing reg in insn 49
changing reg in insn 46
changing reg in insn 43
changing reg in insn 40
changing reg in insn 82
changing reg in insn 79
changing reg in insn 76
changing reg in insn 73
changing reg in insn 70
changing reg in insn 67
changing reg in insn 64
changing reg in insn 61
changing reg in insn 58
changing reg in insn 55
changing reg in insn 52
changing reg in insn 49
changing reg in insn 46
changing reg in insn 43
changing reg in insn 40
changing reg in insn 83
changing reg in insn 80
changing reg in insn 77
changing reg in insn 74
changing reg in insn 71
changing reg in insn 68
changing reg in insn 65
changing reg in insn 62
changing reg in insn 59
changing reg in insn 56
changing reg in insn 53
changing reg in insn 50
changing reg in insn 47
changing reg in insn 44
changing reg in insn 41
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 46
changing reg in insn 49
changing reg in insn 52
changing reg in insn 55
changing reg in insn 58
changing reg in insn 61
changing reg in insn 64
changing reg in insn 67
changing reg in insn 70
changing reg in insn 73
changing reg in insn 76
changing reg in insn 79
changing reg in insn 82
changing reg in insn 85
changing reg in insn 97
changing reg in insn 100
changing reg in insn 103
changing reg in insn 106
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 139
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 156
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
changing reg in insn 164
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 171
changing reg in insn 172
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 177
changing reg in insn 180
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 190
changing reg in insn 191
changing reg in insn 192
changing reg in insn 193
changing reg in insn 195
changing reg in insn 196
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 203
changing reg in insn 206
changing reg in insn 207
changing reg in insn 208
changing reg in insn 209
changing reg in insn 211
changing reg in insn 212
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 219
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 225
changing reg in insn 227
changing reg in insn 228
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
changing reg in insn 233
changing reg in insn 235
changing reg in insn 238
changing reg in insn 239
changing reg in insn 240
changing reg in insn 241
changing reg in insn 244
changing reg in insn 246
changing reg in insn 247
changing reg in insn 248
changing reg in insn 249
changing reg in insn 251
changing reg in insn 252
changing reg in insn 260
changing reg in insn 270
changing reg in insn 261
changing reg in insn 270
changing reg in insn 263
changing reg in insn 294
changing reg in insn 282
changing reg in insn 270
changing reg in insn 354
changing reg in insn 349
changing reg in insn 342
changing reg in insn 337
changing reg in insn 330
changing reg in insn 325
changing reg in insn 318
changing reg in insn 313
changing reg in insn 306
changing reg in insn 301
changing reg in insn 289
changing reg in insn 277
changing reg in insn 265
changing reg in insn 264
changing reg in insn 267
changing reg in insn 265
changing reg in insn 265
changing reg in insn 272
changing reg in insn 282
changing reg in insn 273
changing reg in insn 282
changing reg in insn 276
changing reg in insn 279
changing reg in insn 277
changing reg in insn 277
changing reg in insn 284
changing reg in insn 294
changing reg in insn 285
changing reg in insn 294
changing reg in insn 288
changing reg in insn 291
changing reg in insn 289
changing reg in insn 289
changing reg in insn 296
changing reg in insn 306
changing reg in insn 297
changing reg in insn 306
changing reg in insn 300
changing reg in insn 303
changing reg in insn 301
changing reg in insn 301
changing reg in insn 308
changing reg in insn 318
changing reg in insn 309
changing reg in insn 318
changing reg in insn 312
changing reg in insn 315
changing reg in insn 313
changing reg in insn 313
changing reg in insn 320
changing reg in insn 330
changing reg in insn 321
changing reg in insn 330
changing reg in insn 324
changing reg in insn 327
changing reg in insn 325
changing reg in insn 325
changing reg in insn 332
changing reg in insn 342
changing reg in insn 333
changing reg in insn 342
changing reg in insn 336
changing reg in insn 339
changing reg in insn 337
changing reg in insn 337
changing reg in insn 344
changing reg in insn 354
changing reg in insn 345
changing reg in insn 354
changing reg in insn 348
changing reg in insn 351
changing reg in insn 349
changing reg in insn 349
changing reg in insn 363
changing reg in insn 365
changing reg in insn 383
changing reg in insn 365
changing reg in insn 365
changing reg in insn 367
changing reg in insn 367
changing reg in insn 367
changing reg in insn 372
changing reg in insn 374
changing reg in insn 392
changing reg in insn 374
changing reg in insn 374
changing reg in insn 376
changing reg in insn 376
changing reg in insn 376
changing reg in insn 381
changing reg in insn 381
changing reg in insn 381
changing reg in insn 383
changing reg in insn 383
changing reg in insn 385
changing reg in insn 385
changing reg in insn 385
changing reg in insn 390
changing reg in insn 390
changing reg in insn 390
changing reg in insn 392
changing reg in insn 392
changing reg in insn 394
changing reg in insn 394
changing reg in insn 394
changing reg in insn 415
changing reg in insn 202
changing reg in insn 425
changing reg in insn 203
changing reg in insn 424
changing reg in insn 215
changing reg in insn 426
changing reg in insn 216
changing reg in insn 143
changing reg in insn 411
changing reg in insn 217
changing reg in insn 427
changing reg in insn 218
changing reg in insn 412
changing reg in insn 233
changing reg in insn 428
changing reg in insn 234
changing reg in insn 413
changing reg in insn 234
changing reg in insn 429
changing reg in insn 235
changing reg in insn 416
changing reg in insn 249
changing reg in insn 431
changing reg in insn 250
changing reg in insn 417
changing reg in insn 252
changing reg in insn 432
changing reg in insn 126
changing reg in insn 418
changing reg in insn 254
changing reg in insn 254
changing reg in insn 348
changing reg in insn 344
changing reg in insn 336
changing reg in insn 332
changing reg in insn 324
changing reg in insn 320
changing reg in insn 312
changing reg in insn 308
changing reg in insn 300
changing reg in insn 296
changing reg in insn 288
changing reg in insn 284
changing reg in insn 276
changing reg in insn 272
changing reg in insn 264
changing reg in insn 260
changing reg in insn 419
changing reg in insn 261
changing reg in insn 125
changing reg in insn 423
changing reg in insn 267
changing reg in insn 420
changing reg in insn 270
deleting insn with uid = 7.
deleting insn with uid = 435.
deleting insn with uid = 436.
deleting insn with uid = 437.
deleting insn with uid = 438.
deleting insn with uid = 448.
deleting insn with uid = 449.
deleting insn with uid = 450.
deleting insn with uid = 451.
deleting insn with uid = 452.
deleting insn with uid = 453.
deleting insn with uid = 460.
deleting insn with uid = 461.
deleting insn with uid = 462.
deleting insn with uid = 463.
deleting insn with uid = 464.
deleting insn with uid = 465.
deleting insn with uid = 472.
deleting insn with uid = 473.
deleting insn with uid = 474.
deleting insn with uid = 475.
deleting insn with uid = 476.
deleting insn with uid = 477.
deleting insn with uid = 497.
deleting insn with uid = 501.
deleting insn with uid = 506.
deleting insn with uid = 513.
deleting insn with uid = 516.
deleting insn with uid = 522.
deleting insn with uid = 543.
deleting insn with uid = 411.
deleting insn with uid = 412.
deleting insn with uid = 413.
deleting insn with uid = 416.
deleting insn with uid = 417.
deleting insn with uid = 418.
deleting insn with uid = 419.
deleting insn with uid = 547.
deleting insn with uid = 548.
deleting insn with uid = 549.
deleting insn with uid = 552.
deleting insn with uid = 557.
deleting insn with uid = 558.
deleting insn with uid = 560.
deleting insn with uid = 561.
deleting insn with uid = 563.
deleting insn with uid = 565.
deleting insn with uid = 568.
deleting insn with uid = 573.
deleting insn with uid = 575.
deleting insn with uid = 578.
deleting insn with uid = 580.
deleting insn with uid = 581.
deleting insn with uid = 584.
deleting insn with uid = 587.
deleting insn with uid = 590.
deleting insn with uid = 592.
deleting insn with uid = 593.
deleting insn with uid = 594.
deleting insn with uid = 595.
deleting insn with uid = 596.
deleting insn with uid = 597.
deleting insn with uid = 600.
deleting insn with uid = 603.
deleting insn with uid = 605.
deleting insn with uid = 606.
deleting insn with uid = 607.
deleting insn with uid = 616.
deleting insn with uid = 617.
deleting insn with uid = 623.
deleting insn with uid = 625.
deleting insn with uid = 626.
deleting insn with uid = 628.
deleting insn with uid = 630.
deleting insn with uid = 631.
deleting insn with uid = 427.
deleting insn with uid = 428.
deleting insn with uid = 429.
deleting insn with uid = 431.
deleting insn with uid = 432.
deleting insn with uid = 664.
deleting insn with uid = 666.
deleting insn with uid = 668.
deleting insn with uid = 670.
deleting insn with uid = 672.
deleting insn with uid = 674.
deleting insn with uid = 675.
deleting insn with uid = 677.
deleting insn with uid = 679.
deleting insn with uid = 681.
deleting insn with uid = 683.
deleting insn with uid = 685.
deleting insn with uid = 686.
deleting insn with uid = 688.
deleting insn with uid = 689.
deleting insn with uid = 691.
deleting insn with uid = 693.
deleting insn with uid = 695.
deleting insn with uid = 698.
deleting insn with uid = 700.
deleting insn with uid = 702.
deleting insn with uid = 704.
deleting insn with uid = 706.
deleting insn with uid = 708.
deleting insn with uid = 709.
deleting insn with uid = 711.
deleting insn with uid = 713.
deleting insn with uid = 715.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 11 (  1.2)


compress64

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={147d,166u,6e} r1={23d,44u,31e} r2={19d,39u} r3={15d,20u} r4={6d,22u} r5={16d,21u} r6={11d,14u} r7={1d,242u} r16={1e} r17={139d,2u} r21={21d,20u} r22={13d,12u} r23={5d,5u} r24={5d,5u} r37={19d,25u} r38={19d,25u} r39={17d,19u} r40={15d,20u} r41={18d,29u,7e} r42={10d,13u} r43={25d,37u,6e} r44={12d,18u} r127={1e} r128={1e} r129={1e} r130={1e} r350={2e} 
;;    total ref usage 1411{556d,798u,57e} in 537{537 regular + 0 call} insns.
(note 5 0 38 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 588, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 38 [r9] 40 [r11] 41 [r12] 43 [r14] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 38 [r9] 40 [r11] 41 [r12] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 38 5 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 6 38 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])
        (reg:DI 2 cx [ state ])) blake_ref.c:106 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(note 8 6 40 2 NOTE_INSN_FUNCTION_BEG)
(insn 40 8 41 2 (set (reg:DI 40 r11 [orig:352 MEM[(const BitSequence *)datablock_5(D)] ] [352])
        (mem:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8])
        (nil)))
(insn 41 40 42 2 (set (reg:DI 40 r11 [orig:287 D.5867 ] [287])
        (bswap:DI (reg:DI 40 r11 [orig:352 MEM[(const BitSequence *)datablock_5(D)] ] [352]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8]))
        (nil)))
(insn 42 41 43 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 416 [0x1a0])) [3 m+0 S8 A128])
        (reg:DI 40 r11 [orig:287 D.5867 ] [287])) blake_ref.c:129 89 {*movdi_internal}
     (nil))
(insn 43 42 434 2 (set (reg:DI 6 bp [orig:353 MEM[(const BitSequence *)datablock_5(D) + 8B] ] [353])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8])
        (nil)))
(insn 434 43 44 2 (set (reg:DI 5 di [orig:291 D.5867 ] [291])
        (reg:DI 6 bp [orig:353 MEM[(const BitSequence *)datablock_5(D) + 8B] ] [353])) 89 {*movdi_internal}
     (nil))
(insn 44 434 45 2 (set (reg:DI 5 di [orig:291 D.5867 ] [291])
        (bswap:DI (reg:DI 5 di [orig:291 D.5867 ] [291]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8]))
        (nil)))
(insn 45 44 46 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 424 [0x1a8])) [3 m+8 S8 A64])
        (reg:DI 5 di [orig:291 D.5867 ] [291])) blake_ref.c:130 89 {*movdi_internal}
     (nil))
(insn 46 45 47 2 (set (reg:DI 38 r9 [orig:354 MEM[(const BitSequence *)datablock_5(D) + 16B] ] [354])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8])
        (nil)))
(insn 47 46 734 2 (set (reg:DI 38 r9 [orig:295 D.5867 ] [295])
        (bswap:DI (reg:DI 38 r9 [orig:295 D.5867 ] [295]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8]))
        (nil)))
(insn 734 47 48 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [6 %sfp+-352 S8 A64])
        (reg:DI 38 r9 [orig:295 D.5867 ] [295])) 89 {*movdi_internal}
     (nil))
(insn 48 734 49 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 432 [0x1b0])) [3 m+16 S8 A128])
        (reg:DI 38 r9 [orig:295 D.5867 ] [295])) blake_ref.c:131 89 {*movdi_internal}
     (nil))
(insn 49 48 439 2 (set (reg:DI 0 ax [orig:355 MEM[(const BitSequence *)datablock_5(D) + 24B] ] [355])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8])
        (nil)))
(insn 439 49 50 2 (set (reg:DI 0 ax [orig:299 D.5867 ] [299])
        (reg:DI 0 ax [orig:355 MEM[(const BitSequence *)datablock_5(D) + 24B] ] [355])) 89 {*movdi_internal}
     (nil))
(insn 50 439 440 2 (set (reg:DI 0 ax [orig:299 D.5867 ] [299])
        (bswap:DI (reg:DI 0 ax [orig:299 D.5867 ] [299]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8]))
        (nil)))
(insn 440 50 733 2 (set (reg:DI 0 ax [orig:299 D.5867 ] [299])
        (reg:DI 0 ax [orig:299 D.5867 ] [299])) 89 {*movdi_internal}
     (nil))
(insn 733 440 441 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 200 [0xc8])) [6 %sfp+-344 S8 A64])
        (reg:DI 0 ax [orig:299 D.5867 ] [299])) 89 {*movdi_internal}
     (nil))
(insn 441 733 51 2 (set (reg:DI 0 ax [orig:299 D.5867 ] [299])
        (reg:DI 0 ax [orig:299 D.5867 ] [299])) blake_ref.c:132 89 {*movdi_internal}
     (nil))
(insn 51 441 52 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 440 [0x1b8])) [3 m+24 S8 A64])
        (reg:DI 0 ax [orig:299 D.5867 ] [299])) blake_ref.c:132 89 {*movdi_internal}
     (nil))
(insn 52 51 442 2 (set (reg:DI 0 ax [orig:356 MEM[(const BitSequence *)datablock_5(D) + 32B] ] [356])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8])
        (nil)))
(insn 442 52 53 2 (set (reg:DI 0 ax [orig:303 D.5867 ] [303])
        (reg:DI 0 ax [orig:356 MEM[(const BitSequence *)datablock_5(D) + 32B] ] [356])) 89 {*movdi_internal}
     (nil))
(insn 53 442 443 2 (set (reg:DI 0 ax [orig:303 D.5867 ] [303])
        (bswap:DI (reg:DI 0 ax [orig:303 D.5867 ] [303]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8]))
        (nil)))
(insn 443 53 732 2 (set (reg:DI 0 ax [orig:303 D.5867 ] [303])
        (reg:DI 0 ax [orig:303 D.5867 ] [303])) 89 {*movdi_internal}
     (nil))
(insn 732 443 444 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [6 %sfp+-336 S8 A64])
        (reg:DI 0 ax [orig:303 D.5867 ] [303])) 89 {*movdi_internal}
     (nil))
(insn 444 732 54 2 (set (reg:DI 0 ax [orig:303 D.5867 ] [303])
        (reg:DI 0 ax [orig:303 D.5867 ] [303])) blake_ref.c:133 89 {*movdi_internal}
     (nil))
(insn 54 444 55 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 448 [0x1c0])) [3 m+32 S8 A128])
        (reg:DI 0 ax [orig:303 D.5867 ] [303])) blake_ref.c:133 89 {*movdi_internal}
     (nil))
(insn 55 54 445 2 (set (reg:DI 0 ax [orig:357 MEM[(const BitSequence *)datablock_5(D) + 40B] ] [357])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8])
        (nil)))
(insn 445 55 56 2 (set (reg:DI 0 ax [orig:307 D.5867 ] [307])
        (reg:DI 0 ax [orig:357 MEM[(const BitSequence *)datablock_5(D) + 40B] ] [357])) 89 {*movdi_internal}
     (nil))
(insn 56 445 446 2 (set (reg:DI 0 ax [orig:307 D.5867 ] [307])
        (bswap:DI (reg:DI 0 ax [orig:307 D.5867 ] [307]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8]))
        (nil)))
(insn 446 56 731 2 (set (reg:DI 0 ax [orig:307 D.5867 ] [307])
        (reg:DI 0 ax [orig:307 D.5867 ] [307])) 89 {*movdi_internal}
     (nil))
(insn 731 446 447 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 216 [0xd8])) [6 %sfp+-328 S8 A64])
        (reg:DI 0 ax [orig:307 D.5867 ] [307])) 89 {*movdi_internal}
     (nil))
(insn 447 731 57 2 (set (reg:DI 0 ax [orig:307 D.5867 ] [307])
        (reg:DI 0 ax [orig:307 D.5867 ] [307])) blake_ref.c:134 89 {*movdi_internal}
     (nil))
(insn 57 447 58 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 456 [0x1c8])) [3 m+40 S8 A64])
        (reg:DI 0 ax [orig:307 D.5867 ] [307])) blake_ref.c:134 89 {*movdi_internal}
     (nil))
(insn 58 57 59 2 (set (reg:DI 3 bx [orig:358 MEM[(const BitSequence *)datablock_5(D) + 48B] ] [358])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8])
        (nil)))
(insn 59 58 730 2 (set (reg:DI 3 bx [orig:311 D.5867 ] [311])
        (bswap:DI (reg:DI 3 bx [orig:311 D.5867 ] [311]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8]))
        (nil)))
(insn 730 59 60 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [6 %sfp+-320 S8 A64])
        (reg:DI 3 bx [orig:311 D.5867 ] [311])) 89 {*movdi_internal}
     (nil))
(insn 60 730 61 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 464 [0x1d0])) [3 m+48 S8 A128])
        (reg:DI 3 bx [orig:311 D.5867 ] [311])) blake_ref.c:135 89 {*movdi_internal}
     (nil))
(insn 61 60 62 2 (set (reg:DI 3 bx [orig:359 MEM[(const BitSequence *)datablock_5(D) + 56B] ] [359])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8])
        (nil)))
(insn 62 61 729 2 (set (reg:DI 3 bx [orig:315 D.5867 ] [315])
        (bswap:DI (reg:DI 3 bx [orig:315 D.5867 ] [315]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8]))
        (nil)))
(insn 729 62 63 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 232 [0xe8])) [6 %sfp+-312 S8 A64])
        (reg:DI 3 bx [orig:315 D.5867 ] [315])) 89 {*movdi_internal}
     (nil))
(insn 63 729 64 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 472 [0x1d8])) [3 m+56 S8 A64])
        (reg:DI 3 bx [orig:315 D.5867 ] [315])) blake_ref.c:136 89 {*movdi_internal}
     (nil))
(insn 64 63 454 2 (set (reg:DI 0 ax [orig:360 MEM[(const BitSequence *)datablock_5(D) + 64B] ] [360])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8])
        (nil)))
(insn 454 64 65 2 (set (reg:DI 0 ax [orig:319 D.5867 ] [319])
        (reg:DI 0 ax [orig:360 MEM[(const BitSequence *)datablock_5(D) + 64B] ] [360])) 89 {*movdi_internal}
     (nil))
(insn 65 454 455 2 (set (reg:DI 0 ax [orig:319 D.5867 ] [319])
        (bswap:DI (reg:DI 0 ax [orig:319 D.5867 ] [319]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8]))
        (nil)))
(insn 455 65 728 2 (set (reg:DI 0 ax [orig:319 D.5867 ] [319])
        (reg:DI 0 ax [orig:319 D.5867 ] [319])) 89 {*movdi_internal}
     (nil))
(insn 728 455 456 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [6 %sfp+-304 S8 A64])
        (reg:DI 0 ax [orig:319 D.5867 ] [319])) 89 {*movdi_internal}
     (nil))
(insn 456 728 66 2 (set (reg:DI 0 ax [orig:319 D.5867 ] [319])
        (reg:DI 0 ax [orig:319 D.5867 ] [319])) blake_ref.c:137 89 {*movdi_internal}
     (nil))
(insn 66 456 67 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 480 [0x1e0])) [3 m+64 S8 A128])
        (reg:DI 0 ax [orig:319 D.5867 ] [319])) blake_ref.c:137 89 {*movdi_internal}
     (nil))
(insn 67 66 457 2 (set (reg:DI 0 ax [orig:361 MEM[(const BitSequence *)datablock_5(D) + 72B] ] [361])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8])
        (nil)))
(insn 457 67 68 2 (set (reg:DI 0 ax [orig:323 D.5867 ] [323])
        (reg:DI 0 ax [orig:361 MEM[(const BitSequence *)datablock_5(D) + 72B] ] [361])) 89 {*movdi_internal}
     (nil))
(insn 68 457 458 2 (set (reg:DI 0 ax [orig:323 D.5867 ] [323])
        (bswap:DI (reg:DI 0 ax [orig:323 D.5867 ] [323]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8]))
        (nil)))
(insn 458 68 727 2 (set (reg:DI 0 ax [orig:323 D.5867 ] [323])
        (reg:DI 0 ax [orig:323 D.5867 ] [323])) 89 {*movdi_internal}
     (nil))
(insn 727 458 459 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 248 [0xf8])) [6 %sfp+-296 S8 A64])
        (reg:DI 0 ax [orig:323 D.5867 ] [323])) 89 {*movdi_internal}
     (nil))
(insn 459 727 69 2 (set (reg:DI 0 ax [orig:323 D.5867 ] [323])
        (reg:DI 0 ax [orig:323 D.5867 ] [323])) blake_ref.c:138 89 {*movdi_internal}
     (nil))
(insn 69 459 70 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 488 [0x1e8])) [3 m+72 S8 A64])
        (reg:DI 0 ax [orig:323 D.5867 ] [323])) blake_ref.c:138 89 {*movdi_internal}
     (nil))
(insn 70 69 71 2 (set (reg:DI 43 r14 [orig:362 MEM[(const BitSequence *)datablock_5(D) + 80B] ] [362])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8])
        (nil)))
(insn 71 70 726 2 (set (reg:DI 43 r14 [orig:327 D.5867 ] [327])
        (bswap:DI (reg:DI 43 r14 [orig:327 D.5867 ] [327]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8]))
        (nil)))
(insn 726 71 72 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 256 [0x100])) [6 %sfp+-288 S8 A64])
        (reg:DI 43 r14 [orig:327 D.5867 ] [327])) 89 {*movdi_internal}
     (nil))
(insn 72 726 73 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 496 [0x1f0])) [3 m+80 S8 A128])
        (reg:DI 43 r14 [orig:327 D.5867 ] [327])) blake_ref.c:139 89 {*movdi_internal}
     (nil))
(insn 73 72 74 2 (set (reg:DI 43 r14 [orig:363 MEM[(const BitSequence *)datablock_5(D) + 88B] ] [363])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8])
        (nil)))
(insn 74 73 725 2 (set (reg:DI 43 r14 [orig:331 D.5867 ] [331])
        (bswap:DI (reg:DI 43 r14 [orig:331 D.5867 ] [331]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8]))
        (nil)))
(insn 725 74 75 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 264 [0x108])) [6 %sfp+-280 S8 A64])
        (reg:DI 43 r14 [orig:331 D.5867 ] [331])) 89 {*movdi_internal}
     (nil))
(insn 75 725 76 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 504 [0x1f8])) [3 m+88 S8 A64])
        (reg:DI 43 r14 [orig:331 D.5867 ] [331])) blake_ref.c:140 89 {*movdi_internal}
     (nil))
(insn 76 75 466 2 (set (reg:DI 0 ax [orig:364 MEM[(const BitSequence *)datablock_5(D) + 96B] ] [364])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8])
        (nil)))
(insn 466 76 77 2 (set (reg:DI 0 ax [orig:335 D.5867 ] [335])
        (reg:DI 0 ax [orig:364 MEM[(const BitSequence *)datablock_5(D) + 96B] ] [364])) 89 {*movdi_internal}
     (nil))
(insn 77 466 467 2 (set (reg:DI 0 ax [orig:335 D.5867 ] [335])
        (bswap:DI (reg:DI 0 ax [orig:335 D.5867 ] [335]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8]))
        (nil)))
(insn 467 77 724 2 (set (reg:DI 0 ax [orig:335 D.5867 ] [335])
        (reg:DI 0 ax [orig:335 D.5867 ] [335])) 89 {*movdi_internal}
     (nil))
(insn 724 467 468 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 272 [0x110])) [6 %sfp+-272 S8 A64])
        (reg:DI 0 ax [orig:335 D.5867 ] [335])) 89 {*movdi_internal}
     (nil))
(insn 468 724 78 2 (set (reg:DI 0 ax [orig:335 D.5867 ] [335])
        (reg:DI 0 ax [orig:335 D.5867 ] [335])) blake_ref.c:141 89 {*movdi_internal}
     (nil))
(insn 78 468 79 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 512 [0x200])) [3 m+96 S8 A128])
        (reg:DI 0 ax [orig:335 D.5867 ] [335])) blake_ref.c:141 89 {*movdi_internal}
     (nil))
(insn 79 78 469 2 (set (reg:DI 0 ax [orig:365 MEM[(const BitSequence *)datablock_5(D) + 104B] ] [365])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8])
        (nil)))
(insn 469 79 80 2 (set (reg:DI 0 ax [orig:339 D.5867 ] [339])
        (reg:DI 0 ax [orig:365 MEM[(const BitSequence *)datablock_5(D) + 104B] ] [365])) 89 {*movdi_internal}
     (nil))
(insn 80 469 470 2 (set (reg:DI 0 ax [orig:339 D.5867 ] [339])
        (bswap:DI (reg:DI 0 ax [orig:339 D.5867 ] [339]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8]))
        (nil)))
(insn 470 80 723 2 (set (reg:DI 0 ax [orig:339 D.5867 ] [339])
        (reg:DI 0 ax [orig:339 D.5867 ] [339])) 89 {*movdi_internal}
     (nil))
(insn 723 470 471 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 280 [0x118])) [6 %sfp+-264 S8 A64])
        (reg:DI 0 ax [orig:339 D.5867 ] [339])) 89 {*movdi_internal}
     (nil))
(insn 471 723 81 2 (set (reg:DI 0 ax [orig:339 D.5867 ] [339])
        (reg:DI 0 ax [orig:339 D.5867 ] [339])) blake_ref.c:142 89 {*movdi_internal}
     (nil))
(insn 81 471 82 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 520 [0x208])) [3 m+104 S8 A64])
        (reg:DI 0 ax [orig:339 D.5867 ] [339])) blake_ref.c:142 89 {*movdi_internal}
     (nil))
(insn 82 81 83 2 (set (reg:DI 44 r15 [orig:366 MEM[(const BitSequence *)datablock_5(D) + 112B] ] [366])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8])
        (nil)))
(insn 83 82 722 2 (set (reg:DI 44 r15 [orig:343 D.5867 ] [343])
        (bswap:DI (reg:DI 44 r15 [orig:343 D.5867 ] [343]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8]))
        (nil)))
(insn 722 83 84 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 288 [0x120])) [6 %sfp+-256 S8 A64])
        (reg:DI 44 r15 [orig:343 D.5867 ] [343])) 89 {*movdi_internal}
     (nil))
(insn 84 722 85 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 528 [0x210])) [3 m+112 S8 A128])
        (reg:DI 44 r15 [orig:343 D.5867 ] [343])) blake_ref.c:143 89 {*movdi_internal}
     (nil))
(insn 85 84 86 2 (set (reg:DI 44 r15 [orig:367 MEM[(const BitSequence *)datablock_5(D) + 120B] ] [367])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 120 [0x78])) [0 MEM[(const BitSequence *)datablock_5(D) + 120B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 86 85 721 2 (set (reg:DI 44 r15 [orig:347 D.5867 ] [347])
        (bswap:DI (reg:DI 44 r15 [orig:347 D.5867 ] [347]))) 766 {*bswapdi2}
     (nil))
(insn 721 86 87 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 296 [0x128])) [6 %sfp+-248 S8 A64])
        (reg:DI 44 r15 [orig:347 D.5867 ] [347])) 89 {*movdi_internal}
     (nil))
(insn 87 721 478 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 536 [0x218])) [3 m+120 S8 A64])
        (reg:DI 44 r15 [orig:347 D.5867 ] [347])) blake_ref.c:144 89 {*movdi_internal}
     (nil))
(insn 478 87 88 2 (set (reg:DI 0 ax [560])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:147 89 {*movdi_internal}
     (nil))
(insn 88 478 479 2 (set (reg:DI 0 ax [orig:119 v$0 ] [119])
        (mem:DI (plus:DI (reg:DI 0 ax [560])
                (const_int 136 [0x88])) [3 state_534(D)->h64+0 S8 A64])) blake_ref.c:147 89 {*movdi_internal}
     (nil))
(insn 479 88 480 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [6 %sfp+-224 S8 A64])
        (reg:DI 0 ax [orig:119 v$0 ] [119])) blake_ref.c:147 89 {*movdi_internal}
     (nil))
(insn 480 479 89 2 (set (reg:DI 0 ax [562])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:148 89 {*movdi_internal}
     (nil))
(insn 89 480 481 2 (set (reg:DI 0 ax [orig:120 v$1 ] [120])
        (mem:DI (plus:DI (reg:DI 0 ax [562])
                (const_int 144 [0x90])) [3 state_534(D)->h64+8 S8 A64])) blake_ref.c:148 89 {*movdi_internal}
     (nil))
(insn 481 89 482 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 328 [0x148])) [6 %sfp+-216 S8 A64])
        (reg:DI 0 ax [orig:120 v$1 ] [120])) blake_ref.c:148 89 {*movdi_internal}
     (nil))
(insn 482 481 90 2 (set (reg:DI 0 ax [564])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:149 89 {*movdi_internal}
     (nil))
(insn 90 482 483 2 (set (reg:DI 0 ax [orig:121 v$2 ] [121])
        (mem:DI (plus:DI (reg:DI 0 ax [564])
                (const_int 152 [0x98])) [3 state_534(D)->h64+16 S8 A64])) blake_ref.c:149 89 {*movdi_internal}
     (nil))
(insn 483 90 484 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [6 %sfp+-208 S8 A64])
        (reg:DI 0 ax [orig:121 v$2 ] [121])) blake_ref.c:149 89 {*movdi_internal}
     (nil))
(insn 484 483 91 2 (set (reg:DI 0 ax [566])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:150 89 {*movdi_internal}
     (nil))
(insn 91 484 485 2 (set (reg:DI 0 ax [orig:122 v$3 ] [122])
        (mem:DI (plus:DI (reg:DI 0 ax [566])
                (const_int 160 [0xa0])) [3 state_534(D)->h64+24 S8 A64])) blake_ref.c:150 89 {*movdi_internal}
     (nil))
(insn 485 91 486 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 344 [0x158])) [6 %sfp+-200 S8 A64])
        (reg:DI 0 ax [orig:122 v$3 ] [122])) blake_ref.c:150 89 {*movdi_internal}
     (nil))
(insn 486 485 92 2 (set (reg:DI 0 ax [568])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:151 89 {*movdi_internal}
     (nil))
(insn 92 486 487 2 (set (reg:DI 0 ax [orig:123 v$4 ] [123])
        (mem:DI (plus:DI (reg:DI 0 ax [568])
                (const_int 168 [0xa8])) [3 state_534(D)->h64+32 S8 A64])) blake_ref.c:151 89 {*movdi_internal}
     (nil))
(insn 487 92 488 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [6 %sfp+-192 S8 A64])
        (reg:DI 0 ax [orig:123 v$4 ] [123])) blake_ref.c:151 89 {*movdi_internal}
     (nil))
(insn 488 487 93 2 (set (reg:DI 0 ax [570])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:152 89 {*movdi_internal}
     (nil))
(insn 93 488 489 2 (set (reg:DI 0 ax [orig:124 v$5 ] [124])
        (mem:DI (plus:DI (reg:DI 0 ax [570])
                (const_int 176 [0xb0])) [3 state_534(D)->h64+40 S8 A64])) blake_ref.c:152 89 {*movdi_internal}
     (nil))
(insn 489 93 490 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 360 [0x168])) [6 %sfp+-184 S8 A64])
        (reg:DI 0 ax [orig:124 v$5 ] [124])) blake_ref.c:152 89 {*movdi_internal}
     (nil))
(insn 490 489 94 2 (set (reg:DI 0 ax [572])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:153 89 {*movdi_internal}
     (nil))
(insn 94 490 491 2 (set (reg:DI 0 ax [orig:125 v$6 ] [125])
        (mem:DI (plus:DI (reg:DI 0 ax [572])
                (const_int 184 [0xb8])) [3 state_534(D)->h64+48 S8 A64])) blake_ref.c:153 89 {*movdi_internal}
     (nil))
(insn 491 94 492 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 368 [0x170])) [6 %sfp+-176 S8 A64])
        (reg:DI 0 ax [orig:125 v$6 ] [125])) blake_ref.c:153 89 {*movdi_internal}
     (nil))
(insn 492 491 95 2 (set (reg:DI 0 ax [574])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:154 89 {*movdi_internal}
     (nil))
(insn 95 492 493 2 (set (reg:DI 0 ax [orig:126 v$7 ] [126])
        (mem:DI (plus:DI (reg:DI 0 ax [574])
                (const_int 192 [0xc0])) [3 state_534(D)->h64+56 S8 A64])) blake_ref.c:154 89 {*movdi_internal}
     (nil))
(insn 493 95 494 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 376 [0x178])) [6 %sfp+-168 S8 A64])
        (reg:DI 0 ax [orig:126 v$7 ] [126])) blake_ref.c:154 89 {*movdi_internal}
     (nil))
(insn 494 493 96 2 (set (reg:DI 0 ax [576])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:155 89 {*movdi_internal}
     (nil))
(insn 96 494 495 2 (set (reg:DI 0 ax [orig:127 D.5863 ] [127])
        (mem:DI (plus:DI (reg:DI 0 ax [576])
                (const_int 344 [0x158])) [3 state_534(D)->salt64+0 S8 A64])) blake_ref.c:155 89 {*movdi_internal}
     (nil))
(insn 495 96 720 2 (set (reg:DI 0 ax [orig:127 D.5863 ] [127])
        (reg:DI 0 ax [orig:127 D.5863 ] [127])) blake_ref.c:155 89 {*movdi_internal}
     (nil))
(insn 720 495 97 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 384 [0x180])) [6 %sfp+-160 S8 A64])
        (reg:DI 0 ax [orig:127 D.5863 ] [127])) blake_ref.c:155 89 {*movdi_internal}
     (nil))
(insn 97 720 496 2 (set (reg:DI 41 r12 [368])
        (const_int 2611923443488327891 [0x243f6a8885a308d3])) blake_ref.c:155 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 2611923443488327891 [0x243f6a8885a308d3])
        (nil)))
(insn 496 97 498 2 (set (reg:DI 38 r9 [orig:244 v$8 ] [244])
        (reg:DI 41 r12 [368])) blake_ref.c:155 89 {*movdi_internal}
     (nil))
(insn 498 496 98 2 (set (reg:DI 0 ax [orig:127 D.5863 ] [127])
        (reg:DI 0 ax [orig:127 D.5863 ] [127])) blake_ref.c:155 89 {*movdi_internal}
     (nil))
(insn 98 498 499 2 (parallel [
            (set (reg:DI 38 r9 [orig:244 v$8 ] [244])
                (xor:DI (reg:DI 38 r9 [orig:244 v$8 ] [244])
                    (reg:DI 0 ax [orig:127 D.5863 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:155 402 {*xordi_1}
     (expr_list:REG_EQUAL (xor:DI (reg:DI 127 [ D.5863 ])
            (const_int 2611923443488327891 [0x243f6a8885a308d3]))
        (nil)))
(insn 499 98 99 2 (set (reg:DI 0 ax [580])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:156 89 {*movdi_internal}
     (nil))
(insn 99 499 500 2 (set (reg:DI 0 ax [orig:128 D.5863 ] [128])
        (mem:DI (plus:DI (reg:DI 0 ax [580])
                (const_int 352 [0x160])) [3 state_534(D)->salt64+8 S8 A64])) blake_ref.c:156 89 {*movdi_internal}
     (nil))
(insn 500 99 719 2 (set (reg:DI 0 ax [orig:128 D.5863 ] [128])
        (reg:DI 0 ax [orig:128 D.5863 ] [128])) blake_ref.c:156 89 {*movdi_internal}
     (nil))
(insn 719 500 100 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 392 [0x188])) [6 %sfp+-152 S8 A64])
        (reg:DI 0 ax [orig:128 D.5863 ] [128])) blake_ref.c:156 89 {*movdi_internal}
     (nil))
(insn 100 719 503 2 (set (reg:DI 4 si [369])
        (const_int 1376283091369227076 [0x13198a2e03707344])) blake_ref.c:156 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 1376283091369227076 [0x13198a2e03707344])
        (nil)))
(insn 503 100 101 2 (set (reg:DI 0 ax [orig:128 D.5863 ] [128])
        (reg:DI 0 ax [orig:128 D.5863 ] [128])) blake_ref.c:156 89 {*movdi_internal}
     (nil))
(insn 101 503 502 2 (parallel [
            (set (reg:DI 4 si [orig:262 v$9 ] [262])
                (xor:DI (reg:DI 4 si [orig:262 v$9 ] [262])
                    (reg:DI 0 ax [orig:128 D.5863 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:156 402 {*xordi_1}
     (expr_list:REG_EQUAL (xor:DI (reg:DI 128 [ D.5863 ])
            (const_int 1376283091369227076 [0x13198a2e03707344]))
        (nil)))
(insn 502 101 504 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-480 S8 A64])
        (reg:DI 4 si [orig:262 v$9 ] [262])) blake_ref.c:156 89 {*movdi_internal}
     (nil))
(insn 504 502 102 2 (set (reg:DI 0 ax [584])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:157 89 {*movdi_internal}
     (nil))
(insn 102 504 505 2 (set (reg:DI 0 ax [orig:129 D.5863 ] [129])
        (mem:DI (plus:DI (reg:DI 0 ax [584])
                (const_int 360 [0x168])) [3 state_534(D)->salt64+16 S8 A64])) blake_ref.c:157 89 {*movdi_internal}
     (nil))
(insn 505 102 718 2 (set (reg:DI 0 ax [orig:129 D.5863 ] [129])
        (reg:DI 0 ax [orig:129 D.5863 ] [129])) blake_ref.c:157 89 {*movdi_internal}
     (nil))
(insn 718 505 103 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 400 [0x190])) [6 %sfp+-144 S8 A64])
        (reg:DI 0 ax [orig:129 D.5863 ] [129])) blake_ref.c:157 89 {*movdi_internal}
     (nil))
(insn 103 718 508 2 (set (reg:DI 43 r14 [370])
        (const_int -6626703657320631856 [0xa4093822299f31d0])) blake_ref.c:157 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int -6626703657320631856 [0xa4093822299f31d0])
        (nil)))
(insn 508 103 104 2 (set (reg:DI 0 ax [orig:129 D.5863 ] [129])
        (reg:DI 0 ax [orig:129 D.5863 ] [129])) blake_ref.c:157 89 {*movdi_internal}
     (nil))
(insn 104 508 507 2 (parallel [
            (set (reg:DI 43 r14 [orig:211 v$10 ] [211])
                (xor:DI (reg:DI 43 r14 [orig:211 v$10 ] [211])
                    (reg:DI 0 ax [orig:129 D.5863 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:157 402 {*xordi_1}
     (expr_list:REG_EQUAL (xor:DI (reg:DI 129 [ D.5863 ])
            (const_int -6626703657320631856 [0xa4093822299f31d0]))
        (nil)))
(insn 507 104 509 2 (set (reg:DI 41 r12 [orig:211 v$10 ] [211])
        (reg:DI 43 r14 [orig:211 v$10 ] [211])) blake_ref.c:157 89 {*movdi_internal}
     (nil))
(insn 509 507 105 2 (set (reg:DI 0 ax [588])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:158 89 {*movdi_internal}
     (nil))
(insn 105 509 510 2 (set (reg:DI 0 ax [orig:130 D.5863 ] [130])
        (mem:DI (plus:DI (reg:DI 0 ax [588])
                (const_int 368 [0x170])) [3 state_534(D)->salt64+24 S8 A64])) blake_ref.c:158 89 {*movdi_internal}
     (nil))
(insn 510 105 717 2 (set (reg:DI 4 si [orig:130 D.5863 ] [130])
        (reg:DI 0 ax [orig:130 D.5863 ] [130])) blake_ref.c:158 89 {*movdi_internal}
     (nil))
(insn 717 510 106 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 408 [0x198])) [6 %sfp+-136 S8 A64])
        (reg:DI 4 si [orig:130 D.5863 ] [130])) blake_ref.c:158 89 {*movdi_internal}
     (nil))
(insn 106 717 511 2 (set (reg:DI 0 ax [371])
        (const_int 589684135938649225 [0x82efa98ec4e6c89])) blake_ref.c:158 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 589684135938649225 [0x82efa98ec4e6c89])
        (nil)))
(insn 511 106 107 2 (set (reg:DI 0 ax [orig:197 v$11 ] [197])
        (reg:DI 0 ax [371])) blake_ref.c:158 89 {*movdi_internal}
     (nil))
(insn 107 511 512 2 (parallel [
            (set (reg:DI 0 ax [orig:197 v$11 ] [197])
                (xor:DI (reg:DI 0 ax [orig:197 v$11 ] [197])
                    (reg:DI 4 si [orig:130 D.5863 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:158 402 {*xordi_1}
     (expr_list:REG_EQUAL (xor:DI (reg:DI 130 [ D.5863 ])
            (const_int 589684135938649225 [0x82efa98ec4e6c89]))
        (nil)))
(insn 512 107 514 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [6 %sfp+-496 S8 A64])
        (reg:DI 0 ax [orig:197 v$11 ] [197])) blake_ref.c:158 89 {*movdi_internal}
     (nil))
(insn 514 512 108 2 (set (reg:DI 0 ax [592])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:159 89 {*movdi_internal}
     (nil))
(insn 108 514 109 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg:DI 0 ax [592])
                    (const_int 12 [0xc])) [2 state_534(D)->nullt+0 S4 A32])
            (const_int 0 [0]))) blake_ref.c:159 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 109 108 110 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 406)
            (pc))) blake_ref.c:159 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 406)
;;  succ:       4 [50.0%] 
;;              3 [50.0%]  (FALLTHRU)
;; lr  out 	 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; live  out 	 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 294, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 17 [flags] 37 [r8] 39 [r10] 42 [r13] 44 [r15]
;; live  in  	 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 37 [r8] 39 [r10] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
(note 110 109 515 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 515 110 111 3 (set (reg:DI 0 ax [593])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:166 89 {*movdi_internal}
     (nil))
(insn 111 515 112 3 (set (reg:DI 0 ax [orig:132 D.5863 ] [132])
        (mem:DI (plus:DI (reg:DI 0 ax [593])
                (const_int 200 [0xc8])) [3 state_534(D)->t64+0 S8 A64])) blake_ref.c:166 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 200 [0xc8])) [3 state_534(D)->t64+0 S8 A64])
        (nil)))
(insn 112 111 113 3 (set (reg:DI 39 r10 [372])
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:166 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 4983270260364809079 [0x452821e638d01377])
        (nil)))
(insn 113 112 517 3 (parallel [
            (set (reg:DI 39 r10 [orig:227 v$12 ] [227])
                (xor:DI (reg:DI 39 r10 [orig:227 v$12 ] [227])
                    (reg:DI 0 ax [orig:132 D.5863 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:166 402 {*xordi_1}
     (expr_list:REG_EQUAL (xor:DI (reg:DI 0 ax [orig:132 D.5863 ] [132])
            (const_int 4983270260364809079 [0x452821e638d01377]))
        (nil)))
(insn 517 113 114 3 (set (reg:DI 6 bp [orig:227 v$12 ] [227])
        (reg:DI 39 r10 [orig:227 v$12 ] [227])) blake_ref.c:166 89 {*movdi_internal}
     (nil))
(insn 114 517 518 3 (set (reg:DI 37 r8 [373])
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:167 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int -4732044268327596948 [0xbe5466cf34e90c6c])
        (nil)))
(insn 518 114 115 3 (set (reg:DI 0 ax [orig:243 v$13 ] [243])
        (reg:DI 0 ax [orig:132 D.5863 ] [132])) blake_ref.c:167 89 {*movdi_internal}
     (nil))
(insn 115 518 519 3 (parallel [
            (set (reg:DI 0 ax [orig:243 v$13 ] [243])
                (xor:DI (reg:DI 0 ax [orig:243 v$13 ] [243])
                    (reg:DI 37 r8 [373])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:167 402 {*xordi_1}
     (expr_list:REG_EQUAL (xor:DI (reg:DI 0 ax [orig:132 D.5863 ] [132])
            (const_int -4732044268327596948 [0xbe5466cf34e90c6c]))
        (nil)))
(insn 519 115 520 3 (set (reg:DI 42 r13 [orig:243 v$13 ] [243])
        (reg:DI 0 ax [orig:243 v$13 ] [243])) blake_ref.c:167 89 {*movdi_internal}
     (nil))
(insn 520 519 116 3 (set (reg:DI 0 ax [596])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:168 89 {*movdi_internal}
     (nil))
(insn 116 520 117 3 (set (reg:DI 0 ax [orig:133 D.5863 ] [133])
        (mem:DI (plus:DI (reg:DI 0 ax [596])
                (const_int 208 [0xd0])) [3 state_534(D)->t64+8 S8 A64])) blake_ref.c:168 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 208 [0xd0])) [3 state_534(D)->t64+8 S8 A64])
        (nil)))
(insn 117 116 521 3 (set (reg:DI 2 cx [374])
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:168 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])
        (nil)))
(insn 521 117 118 3 (set (reg:DI 3 bx [orig:260 v$14 ] [260])
        (reg:DI 2 cx [374])) blake_ref.c:168 89 {*movdi_internal}
     (nil))
(insn 118 521 119 3 (parallel [
            (set (reg:DI 3 bx [orig:260 v$14 ] [260])
                (xor:DI (reg:DI 3 bx [orig:260 v$14 ] [260])
                    (reg:DI 0 ax [orig:133 D.5863 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:168 402 {*xordi_1}
     (expr_list:REG_EQUAL (xor:DI (reg:DI 0 ax [orig:133 D.5863 ] [133])
            (const_int -4563226453097033507 [0xc0ac29b7c97c50dd]))
        (nil)))
(insn 119 118 523 3 (set (reg:DI 44 r15 [375])
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:169 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 4577018097722394903 [0x3f84d5b5b5470917])
        (nil)))
(insn 523 119 120 3 (set (reg:DI 0 ax [orig:210 v$15 ] [210])
        (reg:DI 0 ax [orig:133 D.5863 ] [133])) blake_ref.c:169 89 {*movdi_internal}
     (nil))
(insn 120 523 524 3 (parallel [
            (set (reg:DI 0 ax [orig:210 v$15 ] [210])
                (xor:DI (reg:DI 0 ax [orig:210 v$15 ] [210])
                    (reg:DI 44 r15 [375])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:169 402 {*xordi_1}
     (expr_list:REG_EQUAL (xor:DI (reg:DI 0 ax [orig:133 D.5863 ] [133])
            (const_int 4577018097722394903 [0x3f84d5b5b5470917]))
        (nil)))
(insn 524 120 407 3 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [6 %sfp+-488 S8 A64])
        (reg:DI 0 ax [orig:210 v$15 ] [210])) blake_ref.c:169 89 {*movdi_internal}
     (nil))
(jump_insn 407 524 408 3 (set (pc)
        (label_ref 121)) 654 {jump}
     (nil)
 -> 121)
;;  succ:       5 [100.0%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]

(barrier 408 407 406)
;; basic block 4, loop depth 0, count 0, freq 294, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 42 [r13]
;; live  in  	 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 42 [r13]
;; live  kill	
(code_label 406 408 405 4 12 "" [1 uses])
(note 405 406 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 405 525 4 (set (reg:DI 0 ax [orig:210 v$15 ] [210])
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:163 89 {*movdi_internal}
     (nil))
(insn 525 9 10 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [6 %sfp+-488 S8 A64])
        (reg:DI 0 ax [orig:210 v$15 ] [210])) blake_ref.c:163 89 {*movdi_internal}
     (nil))
(insn 10 525 11 4 (set (reg:DI 3 bx [orig:260 v$14 ] [260])
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:162 89 {*movdi_internal}
     (nil))
(insn 11 10 12 4 (set (reg:DI 42 r13 [orig:243 v$13 ] [243])
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:161 89 {*movdi_internal}
     (nil))
(insn 12 11 121 4 (set (reg:DI 6 bp [orig:227 v$12 ] [227])
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]

;; basic block 5, loop depth 0, count 0, freq 590, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 5 [di] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 39 [r10] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 39 [r10] 43 [r14] 44 [r15]
;; live  kill	
(code_label 121 12 122 5 9 "" [1 uses])
(note 122 121 123 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 526 5 (set (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
        (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)
        (nil)))
(insn 526 123 13 5 (set (reg:DI 0 ax [orig:119 v$0 ] [119])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [6 %sfp+-224 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 13 526 14 5 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 0 ax [orig:119 v$0 ] [119])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 14 13 527 5 (set (reg:DI 43 r14 [orig:225 v$1 ] [225])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 328 [0x148])) [6 %sfp+-216 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 527 14 15 5 (set (reg:DI 0 ax [orig:121 v$2 ] [121])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [6 %sfp+-208 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 15 527 16 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-520 S8 A64])
        (reg:DI 0 ax [orig:121 v$2 ] [121])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 16 15 17 5 (set (reg:DI 44 r15 [orig:258 v$3 ] [258])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 344 [0x158])) [6 %sfp+-200 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 17 16 528 5 (set (reg:DI 37 r8 [orig:264 v$4 ] [264])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [6 %sfp+-192 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 528 17 18 5 (set (reg:DI 0 ax [orig:124 v$5 ] [124])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 360 [0x168])) [6 %sfp+-184 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 18 528 529 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-536 S8 A64])
        (reg:DI 0 ax [orig:124 v$5 ] [124])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 529 18 19 5 (set (reg:DI 0 ax [orig:125 v$6 ] [125])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 368 [0x170])) [6 %sfp+-176 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 19 529 530 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-528 S8 A64])
        (reg:DI 0 ax [orig:125 v$6 ] [125])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 530 19 20 5 (set (reg:DI 0 ax [orig:126 v$7 ] [126])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 376 [0x178])) [6 %sfp+-168 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 20 530 21 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-512 S8 A64])
        (reg:DI 0 ax [orig:126 v$7 ] [126])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 21 20 22 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 316 [0x13c])) [6 %sfp+-228 S4 A32])
        (const_int 16 [0x10])) blake_ref.c:160 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 16 [0x10])
        (nil)))
(insn 22 21 531 5 (set (reg:DI 0 ax [orig:348 D.5868 ] [348])
        (const_int 577009281997405206 [0x801f2e2858efc16])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 577009281997405206 [0x801f2e2858efc16])
        (nil)))
(insn 531 22 23 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [6 %sfp+-376 S8 A64])
        (reg:DI 0 ax [orig:348 D.5868 ] [348])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 23 531 532 5 (set (reg:DI 0 ax [orig:346 D.5868 ] [346])
        (const_int 7163292796296056425 [0x636920d871574e69])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 7163292796296056425 [0x636920d871574e69])
        (nil)))
(insn 532 23 24 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [6 %sfp+-384 S8 A64])
        (reg:DI 0 ax [orig:346 D.5868 ] [346])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 24 532 533 5 (set (reg:DI 0 ax [orig:340 D.5868 ] [340])
        (const_int -5008970055469465703 [0xba7c9045f12c7f99])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -5008970055469465703 [0xba7c9045f12c7f99])
        (nil)))
(insn 533 24 25 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 152 [0x98])) [6 %sfp+-392 S8 A64])
        (reg:DI 0 ax [orig:340 D.5868 ] [340])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 25 533 534 5 (set (reg:DI 0 ax [orig:338 D.5868 ] [338])
        (const_int 2639559389850201335 [0x24a19947b3916cf7])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 2639559389850201335 [0x24a19947b3916cf7])
        (nil)))
(insn 534 25 26 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [6 %sfp+-400 S8 A64])
        (reg:DI 0 ax [orig:338 D.5868 ] [338])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 26 534 535 5 (set (reg:DI 0 ax [orig:332 D.5868 ] [332])
        (const_int 3458046377305235383 [0x2ffd72dbd01adfb7])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 3458046377305235383 [0x2ffd72dbd01adfb7])
        (nil)))
(insn 535 26 27 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 136 [0x88])) [6 %sfp+-408 S8 A64])
        (reg:DI 0 ax [orig:332 D.5868 ] [332])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 27 535 536 5 (set (reg:DI 0 ax [orig:330 D.5868 ] [330])
        (const_int -5124621466747896170 [0xb8e1afed6a267e96])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -5124621466747896170 [0xb8e1afed6a267e96])
        (nil)))
(insn 536 27 28 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [6 %sfp+-416 S8 A64])
        (reg:DI 0 ax [orig:330 D.5868 ] [330])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 28 536 537 5 (set (reg:DI 0 ax [orig:324 D.5868 ] [324])
        (const_int -7919907764393346277 [0x9216d5d98979fb1b])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -7919907764393346277 [0x9216d5d98979fb1b])
        (nil)))
(insn 537 28 29 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 120 [0x78])) [6 %sfp+-424 S8 A64])
        (reg:DI 0 ax [orig:324 D.5868 ] [324])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 29 537 538 5 (set (reg:DI 0 ax [orig:322 D.5868 ] [322])
        (const_int -3372901835766516308 [0xd1310ba698dfb5ac])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -3372901835766516308 [0xd1310ba698dfb5ac])
        (nil)))
(insn 538 29 30 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [6 %sfp+-432 S8 A64])
        (reg:DI 0 ax [orig:322 D.5868 ] [322])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 30 538 539 5 (set (reg:DI 0 ax [orig:316 D.5868 ] [316])
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])
        (nil)))
(insn 539 30 31 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 104 [0x68])) [6 %sfp+-440 S8 A64])
        (reg:DI 0 ax [orig:316 D.5868 ] [316])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 31 539 540 5 (set (reg:DI 0 ax [orig:314 D.5868 ] [314])
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 4577018097722394903 [0x3f84d5b5b5470917])
        (nil)))
(insn 540 31 32 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [6 %sfp+-448 S8 A64])
        (reg:DI 0 ax [orig:314 D.5868 ] [314])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 32 540 33 5 (set (reg:DI 1 dx [orig:308 D.5868 ] [308])
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 4983270260364809079 [0x452821e638d01377])
        (nil)))
(insn 33 32 541 5 (set (reg:DI 0 ax [orig:306 D.5868 ] [306])
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -4732044268327596948 [0xbe5466cf34e90c6c])
        (nil)))
(insn 541 33 34 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 88 [0x58])) [6 %sfp+-456 S8 A64])
        (reg:DI 0 ax [orig:306 D.5868 ] [306])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 34 541 35 5 (set (reg:DI 0 ax [orig:300 D.5868 ] [300])
        (const_int -6626703657320631856 [0xa4093822299f31d0])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -6626703657320631856 [0xa4093822299f31d0])
        (nil)))
(insn 35 34 542 5 (set (reg:DI 2 cx [orig:298 D.5868 ] [298])
        (const_int 589684135938649225 [0x82efa98ec4e6c89])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 589684135938649225 [0x82efa98ec4e6c89])
        (nil)))
(insn 542 35 36 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [6 %sfp+-464 S8 A64])
        (reg:DI 2 cx [orig:298 D.5868 ] [298])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 36 542 735 5 (set (reg:DI 2 cx [orig:292 D.5868 ] [292])
        (const_int 2611923443488327891 [0x243f6a8885a308d3])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 2611923443488327891 [0x243f6a8885a308d3])
        (nil)))
(note 735 36 37 5 NOTE_INSN_DELETED)
(insn 37 735 544 5 (set (reg:DI 39 r10 [orig:290 D.5868 ] [290])
        (const_int 1376283091369227076 [0x13198a2e03707344])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 1376283091369227076 [0x13198a2e03707344])
        (nil)))
(insn 544 37 414 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [6 %sfp+-472 S8 A64])
        (reg:DI 39 r10 [orig:290 D.5868 ] [290])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 414 544 415 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-504 S8 A64])
        (reg:DI 44 r15 [orig:258 v$3 ] [258])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 415 414 420 5 (set (reg:DI 44 r15 [orig:211 v$10 ] [211])
        (reg:DI 41 r12 [orig:211 v$10 ] [211])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 420 415 421 5 (set (reg:DI 39 r10 [orig:292 D.5868 ] [292])
        (reg:DI 2 cx [orig:292 D.5868 ] [292])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 421 420 422 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [6 %sfp+-368 S8 A64])
        (reg:DI 0 ax [orig:300 D.5868 ] [300])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 422 421 423 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [6 %sfp+-360 S8 A64])
        (reg:DI 1 dx [orig:308 D.5868 ] [308])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 423 422 424 5 (set (reg:DI 1 dx [orig:291 D.5867 ] [291])
        (reg:DI 5 di [orig:291 D.5867 ] [291])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 424 423 355 5 (set (reg:DI 5 di [orig:225 v$1 ] [225])
        (reg:DI 43 r14 [orig:225 v$1 ] [225])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]

;; basic block 6, loop depth 0, count 0, freq 9412, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              7 [100.0%]  (DFS_BACK)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; lr  use 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 355 424 124 6 11 "" [1 uses])
(note 124 355 545 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(note 545 124 775 6 NOTE_INSN_DELETED)
(note 775 545 125 6 NOTE_INSN_DELETED)
(insn 125 775 126 6 (parallel [
            (set (reg:DI 40 r11 [orig:376 D.5863 ] [376])
                (xor:DI (reg:DI 40 r11 [orig:287 D.5867 ] [287])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 72 [0x48])) [6 %sfp+-472 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (nil))
(insn 126 125 546 6 (parallel [
            (set (reg:DI 40 r11 [orig:377 D.5863 ] [377])
                (plus:DI (reg:DI 40 r11 [orig:376 D.5863 ] [376])
                    (reg:DI 37 r8 [orig:264 v$4 ] [264])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (nil))
(note 546 126 774 6 NOTE_INSN_DELETED)
(note 774 546 127 6 NOTE_INSN_DELETED)
(insn 127 774 128 6 (parallel [
            (set (reg:DI 40 r11 [orig:135 D.5863 ] [135])
                (plus:DI (reg:DI 40 r11 [orig:377 D.5863 ] [377])
                    (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (nil))
(insn 128 127 129 6 (parallel [
            (set (reg:DI 6 bp [orig:378 D.5863 ] [378])
                (xor:DI (reg:DI 6 bp [orig:227 v$12 ] [227])
                    (reg:DI 40 r11 [orig:135 D.5863 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (nil))
(insn 129 128 130 6 (parallel [
            (set (reg:DI 6 bp [orig:137 D.5863 ] [137])
                (rotate:DI (reg:DI 6 bp [orig:378 D.5863 ] [378])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 588 {*rotldi3_1}
     (nil))
(insn 130 129 131 6 (parallel [
            (set (reg:DI 38 r9 [orig:138 D.5863 ] [138])
                (plus:DI (reg:DI 38 r9 [orig:244 v$8 ] [244])
                    (reg:DI 6 bp [orig:137 D.5863 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (nil))
(insn 131 130 132 6 (parallel [
            (set (reg:DI 37 r8 [orig:379 D.5863 ] [379])
                (xor:DI (reg:DI 37 r8 [orig:264 v$4 ] [264])
                    (reg:DI 38 r9 [orig:138 D.5863 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (nil))
(insn 132 131 133 6 (parallel [
            (set (reg:DI 37 r8 [orig:140 D.5863 ] [140])
                (rotatert:DI (reg:DI 37 r8 [orig:379 D.5863 ] [379])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 589 {*rotrdi3_1}
     (nil))
(insn 133 132 134 6 (parallel [
            (set (reg:DI 39 r10 [orig:380 D.5863 ] [380])
                (xor:DI (reg:DI 39 r10 [orig:292 D.5868 ] [292])
                    (reg:DI 1 dx [orig:291 D.5867 ] [291])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (nil))
(insn 134 133 135 6 (parallel [
            (set (reg:DI 39 r10 [orig:381 D.5863 ] [381])
                (plus:DI (reg:DI 39 r10 [orig:380 D.5863 ] [380])
                    (reg:DI 40 r11 [orig:135 D.5863 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (nil))
(insn 135 134 136 6 (parallel [
            (set (reg:DI 39 r10 [orig:143 D.5863 ] [143])
                (plus:DI (reg:DI 39 r10 [orig:381 D.5863 ] [381])
                    (reg:DI 37 r8 [orig:140 D.5863 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (nil))
(insn 136 135 137 6 (parallel [
            (set (reg:DI 6 bp [orig:382 D.5863 ] [382])
                (xor:DI (reg:DI 6 bp [orig:137 D.5863 ] [137])
                    (reg:DI 39 r10 [orig:143 D.5863 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (nil))
(insn 137 136 138 6 (parallel [
            (set (reg:DI 6 bp [orig:145 D.5863 ] [145])
                (rotatert:DI (reg:DI 6 bp [orig:382 D.5863 ] [382])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 589 {*rotrdi3_1}
     (nil))
(insn 138 137 750 6 (parallel [
            (set (reg:DI 2 cx [orig:146 D.5863 ] [146])
                (plus:DI (reg:DI 38 r9 [orig:138 D.5863 ] [138])
                    (reg:DI 6 bp [orig:145 D.5863 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (nil))
(note 750 138 749 6 NOTE_INSN_DELETED)
(insn 749 750 778 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [6 %sfp+-472 S8 A64])
        (reg:DI 2 cx [orig:146 D.5863 ] [146])) blake_ref.c:176 89 {*movdi_internal}
     (nil))
(note 778 749 139 6 NOTE_INSN_DELETED)
(insn 139 778 140 6 (parallel [
            (set (reg:DI 37 r8 [orig:383 D.5863 ] [383])
                (xor:DI (reg:DI 37 r8 [orig:140 D.5863 ] [140])
                    (reg:DI 2 cx [orig:146 D.5863 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (nil))
(insn 140 139 550 6 (parallel [
            (set (reg:DI 37 r8 [orig:148 D.5863 ] [148])
                (rotatert:DI (reg:DI 37 r8 [orig:148 D.5863 ] [148])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 589 {*rotrdi3_1}
     (nil))
(insn 550 140 777 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [6 %sfp+-240 S8 A64])
        (reg:DI 37 r8 [orig:148 D.5863 ] [148])) blake_ref.c:176 89 {*movdi_internal}
     (nil))
(note 777 550 748 6 NOTE_INSN_DELETED)
(note 748 777 551 6 NOTE_INSN_DELETED)
(insn 551 748 553 6 (set (reg:DI 1 dx [orig:384 D.5863 ] [384])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [6 %sfp+-352 S8 A64])) blake_ref.c:177 89 {*movdi_internal}
     (nil))
(note 553 551 773 6 NOTE_INSN_DELETED)
(note 773 553 141 6 NOTE_INSN_DELETED)
(insn 141 773 747 6 (parallel [
            (set (reg:DI 1 dx [orig:384 D.5863 ] [384])
                (xor:DI (reg:DI 1 dx [orig:384 D.5863 ] [384])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 80 [0x50])) [6 %sfp+-464 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (nil))
(insn 747 141 554 6 (set (reg:DI 40 r11 [orig:214 v$5 ] [214])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-536 S8 A64])) blake_ref.c:177 89 {*movdi_internal}
     (nil))
(insn 554 747 142 6 (set (reg:DI 2 cx [orig:214 v$5 ] [214])
        (reg:DI 40 r11 [orig:214 v$5 ] [214])) blake_ref.c:177 89 {*movdi_internal}
     (nil))
(insn 142 554 143 6 (parallel [
            (set (reg:DI 1 dx [orig:385 D.5863 ] [385])
                (plus:DI (reg:DI 1 dx [orig:384 D.5863 ] [384])
                    (reg:DI 2 cx [orig:214 v$5 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (nil))
(insn 143 142 144 6 (parallel [
            (set (reg:DI 1 dx [orig:151 D.5863 ] [151])
                (plus:DI (reg:DI 1 dx [orig:385 D.5863 ] [385])
                    (reg:DI 5 di [orig:225 v$1 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (nil))
(insn 144 143 145 6 (parallel [
            (set (reg:DI 42 r13 [orig:386 D.5863 ] [386])
                (xor:DI (reg:DI 42 r13 [orig:243 v$13 ] [243])
                    (reg:DI 1 dx [orig:151 D.5863 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (nil))
(insn 145 144 555 6 (parallel [
            (set (reg:DI 42 r13 [orig:153 D.5863 ] [153])
                (rotate:DI (reg:DI 42 r13 [orig:386 D.5863 ] [386])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 588 {*rotldi3_1}
     (nil))
(insn 555 145 146 6 (set (reg:DI 5 di [orig:154 D.5863 ] [154])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-480 S8 A64])) blake_ref.c:177 89 {*movdi_internal}
     (nil))
(insn 146 555 556 6 (parallel [
            (set (reg:DI 5 di [orig:154 D.5863 ] [154])
                (plus:DI (reg:DI 5 di [orig:154 D.5863 ] [154])
                    (reg:DI 42 r13 [orig:153 D.5863 ] [153])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (nil))
(insn 556 146 147 6 (set (reg:DI 2 cx [orig:154 D.5863 ] [154])
        (reg:DI 5 di [orig:154 D.5863 ] [154])) blake_ref.c:177 89 {*movdi_internal}
     (nil))
(insn 147 556 148 6 (parallel [
            (set (reg:DI 40 r11 [orig:387 D.5863 ] [387])
                (xor:DI (reg:DI 40 r11 [orig:387 D.5863 ] [387])
                    (reg:DI 2 cx [orig:154 D.5863 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (nil))
(insn 148 147 559 6 (parallel [
            (set (reg:DI 40 r11 [orig:156 D.5863 ] [156])
                (rotatert:DI (reg:DI 40 r11 [orig:387 D.5863 ] [387])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 589 {*rotrdi3_1}
     (nil))
(note 559 148 770 6 NOTE_INSN_DELETED)
(insn 770 559 772 6 (set (reg:DI 0 ax [orig:388 D.5863 ] [388])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [6 %sfp+-368 S8 A64])) blake_ref.c:177 89 {*movdi_internal}
     (nil))
(note 772 770 149 6 NOTE_INSN_DELETED)
(insn 149 772 771 6 (parallel [
            (set (reg:DI 0 ax [orig:388 D.5863 ] [388])
                (xor:DI (reg:DI 0 ax [orig:388 D.5863 ] [388])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 200 [0xc8])) [6 %sfp+-344 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (nil))
(insn 771 149 150 6 (set (reg:DI 0 ax [orig:388 D.5863 ] [388])
        (reg:DI 0 ax [orig:388 D.5863 ] [388])) blake_ref.c:177 89 {*movdi_internal}
     (nil))
(insn 150 771 151 6 (parallel [
            (set (reg:DI 0 ax [orig:389 D.5863 ] [389])
                (plus:DI (reg:DI 0 ax [orig:388 D.5863 ] [388])
                    (reg:DI 1 dx [orig:151 D.5863 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (nil))
(insn 151 150 152 6 (parallel [
            (set (reg:DI 0 ax [orig:159 D.5863 ] [159])
                (plus:DI (reg:DI 0 ax [orig:389 D.5863 ] [389])
                    (reg:DI 40 r11 [orig:156 D.5863 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (nil))
(insn 152 151 153 6 (parallel [
            (set (reg:DI 42 r13 [orig:390 D.5863 ] [390])
                (xor:DI (reg:DI 42 r13 [orig:153 D.5863 ] [153])
                    (reg:DI 0 ax [orig:159 D.5863 ] [159])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (nil))
(insn 153 152 154 6 (parallel [
            (set (reg:DI 42 r13 [orig:161 D.5863 ] [161])
                (rotatert:DI (reg:DI 42 r13 [orig:390 D.5863 ] [390])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 589 {*rotrdi3_1}
     (nil))
(insn 154 153 746 6 (parallel [
            (set (reg:DI 5 di [orig:162 D.5863 ] [162])
                (plus:DI (reg:DI 2 cx [orig:154 D.5863 ] [154])
                    (reg:DI 42 r13 [orig:161 D.5863 ] [161])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (nil))
(note 746 154 745 6 NOTE_INSN_DELETED)
(insn 745 746 776 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-480 S8 A64])
        (reg:DI 5 di [orig:162 D.5863 ] [162])) blake_ref.c:177 89 {*movdi_internal}
     (nil))
(note 776 745 155 6 NOTE_INSN_DELETED)
(insn 155 776 156 6 (parallel [
            (set (reg:DI 40 r11 [orig:391 D.5863 ] [391])
                (xor:DI (reg:DI 40 r11 [orig:156 D.5863 ] [156])
                    (reg:DI 5 di [orig:162 D.5863 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (nil))
(insn 156 155 562 6 (parallel [
            (set (reg:DI 40 r11 [orig:164 D.5863 ] [164])
                (rotatert:DI (reg:DI 40 r11 [orig:391 D.5863 ] [391])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 589 {*rotrdi3_1}
     (nil))
(insn 562 156 564 6 (set (reg:DI 1 dx [orig:392 D.5863 ] [392])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [6 %sfp+-336 S8 A64])) blake_ref.c:178 89 {*movdi_internal}
     (nil))
(note 564 562 769 6 NOTE_INSN_DELETED)
(note 769 564 157 6 NOTE_INSN_DELETED)
(insn 157 769 744 6 (parallel [
            (set (reg:DI 1 dx [orig:392 D.5863 ] [392])
                (xor:DI (reg:DI 1 dx [orig:392 D.5863 ] [392])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 88 [0x58])) [6 %sfp+-456 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (nil))
(insn 744 157 158 6 (set (reg:DI 5 di [orig:230 v$6 ] [230])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-528 S8 A64])) blake_ref.c:178 89 {*movdi_internal}
     (nil))
(insn 158 744 566 6 (parallel [
            (set (reg:DI 1 dx [orig:393 D.5863 ] [393])
                (plus:DI (reg:DI 1 dx [orig:392 D.5863 ] [392])
                    (reg:DI 5 di [orig:230 v$6 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (nil))
(note 566 158 768 6 NOTE_INSN_DELETED)
(note 768 566 159 6 NOTE_INSN_DELETED)
(insn 159 768 160 6 (parallel [
            (set (reg:DI 1 dx [orig:167 D.5863 ] [167])
                (plus:DI (reg:DI 1 dx [orig:393 D.5863 ] [393])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 24 [0x18])) [6 %sfp+-520 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (nil))
(insn 160 159 161 6 (parallel [
            (set (reg:DI 3 bx [orig:394 D.5863 ] [394])
                (xor:DI (reg:DI 3 bx [orig:260 v$14 ] [260])
                    (reg:DI 1 dx [orig:167 D.5863 ] [167])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (nil))
(insn 161 160 162 6 (parallel [
            (set (reg:DI 3 bx [orig:169 D.5863 ] [169])
                (rotate:DI (reg:DI 3 bx [orig:394 D.5863 ] [394])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 588 {*rotldi3_1}
     (nil))
(insn 162 161 567 6 (parallel [
            (set (reg:DI 44 r15 [orig:170 D.5863 ] [170])
                (plus:DI (reg:DI 44 r15 [orig:211 v$10 ] [211])
                    (reg:DI 3 bx [orig:169 D.5863 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (nil))
(insn 567 162 163 6 (set (reg:DI 38 r9 [orig:395 D.5863 ] [395])
        (reg:DI 5 di [orig:230 v$6 ] [230])) blake_ref.c:178 89 {*movdi_internal}
     (nil))
(insn 163 567 164 6 (parallel [
            (set (reg:DI 38 r9 [orig:395 D.5863 ] [395])
                (xor:DI (reg:DI 38 r9 [orig:395 D.5863 ] [395])
                    (reg:DI 44 r15 [orig:170 D.5863 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (nil))
(insn 164 163 569 6 (parallel [
            (set (reg:DI 38 r9 [orig:172 D.5863 ] [172])
                (rotatert:DI (reg:DI 38 r9 [orig:395 D.5863 ] [395])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 589 {*rotrdi3_1}
     (nil))
(insn 569 164 571 6 (set (reg:DI 43 r14 [orig:396 D.5863 ] [396])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 216 [0xd8])) [6 %sfp+-328 S8 A64])) blake_ref.c:178 89 {*movdi_internal}
     (nil))
(note 571 569 767 6 NOTE_INSN_DELETED)
(note 767 571 165 6 NOTE_INSN_DELETED)
(insn 165 767 570 6 (parallel [
            (set (reg:DI 43 r14 [orig:396 D.5863 ] [396])
                (xor:DI (reg:DI 43 r14 [orig:396 D.5863 ] [396])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 184 [0xb8])) [6 %sfp+-360 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (nil))
(insn 570 165 166 6 (set (reg:DI 2 cx [orig:396 D.5863 ] [396])
        (reg:DI 43 r14 [orig:396 D.5863 ] [396])) blake_ref.c:178 89 {*movdi_internal}
     (nil))
(insn 166 570 167 6 (parallel [
            (set (reg:DI 2 cx [orig:397 D.5863 ] [397])
                (plus:DI (reg:DI 2 cx [orig:396 D.5863 ] [396])
                    (reg:DI 1 dx [orig:167 D.5863 ] [167])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (nil))
(insn 167 166 168 6 (parallel [
            (set (reg:DI 2 cx [orig:175 D.5863 ] [175])
                (plus:DI (reg:DI 2 cx [orig:397 D.5863 ] [397])
                    (reg:DI 38 r9 [orig:172 D.5863 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (nil))
(insn 168 167 169 6 (parallel [
            (set (reg:DI 3 bx [orig:398 D.5863 ] [398])
                (xor:DI (reg:DI 3 bx [orig:169 D.5863 ] [169])
                    (reg:DI 2 cx [orig:175 D.5863 ] [175])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (nil))
(insn 169 168 170 6 (parallel [
            (set (reg:DI 3 bx [orig:177 D.5863 ] [177])
                (rotatert:DI (reg:DI 3 bx [orig:398 D.5863 ] [398])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 589 {*rotrdi3_1}
     (nil))
(insn 170 169 171 6 (parallel [
            (set (reg:DI 44 r15 [orig:178 D.5863 ] [178])
                (plus:DI (reg:DI 44 r15 [orig:170 D.5863 ] [170])
                    (reg:DI 3 bx [orig:177 D.5863 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (nil))
(insn 171 170 172 6 (parallel [
            (set (reg:DI 38 r9 [orig:399 D.5863 ] [399])
                (xor:DI (reg:DI 38 r9 [orig:172 D.5863 ] [172])
                    (reg:DI 44 r15 [orig:178 D.5863 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (nil))
(insn 172 171 572 6 (parallel [
            (set (reg:DI 38 r9 [orig:180 D.5863 ] [180])
                (rotatert:DI (reg:DI 38 r9 [orig:399 D.5863 ] [399])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 589 {*rotrdi3_1}
     (nil))
(insn 572 172 574 6 (set (reg:DI 1 dx [orig:400 D.5863 ] [400])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [6 %sfp+-320 S8 A64])) blake_ref.c:179 89 {*movdi_internal}
     (nil))
(note 574 572 766 6 NOTE_INSN_DELETED)
(note 766 574 173 6 NOTE_INSN_DELETED)
(insn 173 766 743 6 (parallel [
            (set (reg:DI 1 dx [orig:400 D.5863 ] [400])
                (xor:DI (reg:DI 1 dx [orig:400 D.5863 ] [400])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 96 [0x60])) [6 %sfp+-448 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (nil))
(insn 743 173 174 6 (set (reg:DI 5 di [orig:246 v$7 ] [246])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-512 S8 A64])) blake_ref.c:179 89 {*movdi_internal}
     (nil))
(insn 174 743 576 6 (parallel [
            (set (reg:DI 1 dx [orig:401 D.5863 ] [401])
                (plus:DI (reg:DI 1 dx [orig:400 D.5863 ] [400])
                    (reg:DI 5 di [orig:246 v$7 ] [246])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (nil))
(note 576 174 765 6 NOTE_INSN_DELETED)
(note 765 576 175 6 NOTE_INSN_DELETED)
(insn 175 765 577 6 (parallel [
            (set (reg:DI 1 dx [orig:183 D.5863 ] [183])
                (plus:DI (reg:DI 1 dx [orig:401 D.5863 ] [401])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 40 [0x28])) [6 %sfp+-504 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (nil))
(insn 577 175 176 6 (set (reg:DI 41 r12 [orig:402 D.5863 ] [402])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [6 %sfp+-488 S8 A64])) blake_ref.c:179 89 {*movdi_internal}
     (nil))
(insn 176 577 177 6 (parallel [
            (set (reg:DI 41 r12 [orig:402 D.5863 ] [402])
                (xor:DI (reg:DI 41 r12 [orig:402 D.5863 ] [402])
                    (reg:DI 1 dx [orig:183 D.5863 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (nil))
(insn 177 176 579 6 (parallel [
            (set (reg:DI 41 r12 [orig:185 D.5863 ] [185])
                (rotate:DI (reg:DI 41 r12 [orig:402 D.5863 ] [402])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 588 {*rotldi3_1}
     (nil))
(insn 579 177 178 6 (set (reg:DI 43 r14 [orig:186 D.5863 ] [186])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [6 %sfp+-496 S8 A64])) blake_ref.c:179 89 {*movdi_internal}
     (nil))
(insn 178 579 179 6 (parallel [
            (set (reg:DI 43 r14 [orig:186 D.5863 ] [186])
                (plus:DI (reg:DI 43 r14 [orig:186 D.5863 ] [186])
                    (reg:DI 41 r12 [orig:185 D.5863 ] [185])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (nil))
(insn 179 178 582 6 (parallel [
            (set (reg:DI 5 di [orig:403 D.5863 ] [403])
                (xor:DI (reg:DI 5 di [orig:403 D.5863 ] [403])
                    (reg:DI 43 r14 [orig:186 D.5863 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (nil))
(insn 582 179 180 6 (set (reg:DI 37 r8 [orig:403 D.5863 ] [403])
        (reg:DI 5 di [orig:403 D.5863 ] [403])) blake_ref.c:179 89 {*movdi_internal}
     (nil))
(insn 180 582 583 6 (parallel [
            (set (reg:DI 37 r8 [orig:188 D.5863 ] [188])
                (rotatert:DI (reg:DI 37 r8 [orig:403 D.5863 ] [403])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 589 {*rotrdi3_1}
     (nil))
(insn 583 180 585 6 (set (reg:DI 5 di [orig:404 D.5863 ] [404])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 232 [0xe8])) [6 %sfp+-312 S8 A64])) blake_ref.c:179 89 {*movdi_internal}
     (nil))
(note 585 583 752 6 NOTE_INSN_DELETED)
(note 752 585 181 6 NOTE_INSN_DELETED)
(insn 181 752 182 6 (parallel [
            (set (reg:DI 5 di [orig:404 D.5863 ] [404])
                (xor:DI (reg:DI 5 di [orig:404 D.5863 ] [404])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 104 [0x68])) [6 %sfp+-440 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (nil))
(insn 182 181 183 6 (parallel [
            (set (reg:DI 1 dx [orig:405 D.5863 ] [405])
                (plus:DI (reg:DI 1 dx [orig:183 D.5863 ] [183])
                    (reg:DI 5 di [orig:404 D.5863 ] [404])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (nil))
(insn 183 182 184 6 (parallel [
            (set (reg:DI 1 dx [orig:191 D.5863 ] [191])
                (plus:DI (reg:DI 1 dx [orig:405 D.5863 ] [405])
                    (reg:DI 37 r8 [orig:188 D.5863 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (nil))
(insn 184 183 185 6 (parallel [
            (set (reg:DI 41 r12 [orig:406 D.5863 ] [406])
                (xor:DI (reg:DI 41 r12 [orig:185 D.5863 ] [185])
                    (reg:DI 1 dx [orig:191 D.5863 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (nil))
(insn 185 184 186 6 (parallel [
            (set (reg:DI 41 r12 [orig:193 D.5863 ] [193])
                (rotatert:DI (reg:DI 41 r12 [orig:406 D.5863 ] [406])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 589 {*rotrdi3_1}
     (nil))
(insn 186 185 187 6 (parallel [
            (set (reg:DI 43 r14 [orig:194 D.5863 ] [194])
                (plus:DI (reg:DI 43 r14 [orig:186 D.5863 ] [186])
                    (reg:DI 41 r12 [orig:193 D.5863 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (nil))
(insn 187 186 188 6 (parallel [
            (set (reg:DI 37 r8 [orig:407 D.5863 ] [407])
                (xor:DI (reg:DI 37 r8 [orig:188 D.5863 ] [188])
                    (reg:DI 43 r14 [orig:194 D.5863 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (nil))
(insn 188 187 586 6 (parallel [
            (set (reg:DI 37 r8 [orig:196 D.5863 ] [196])
                (rotatert:DI (reg:DI 37 r8 [orig:407 D.5863 ] [407])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 589 {*rotrdi3_1}
     (nil))
(insn 586 188 588 6 (set (reg:DI 5 di [orig:408 D.5863 ] [408])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [6 %sfp+-304 S8 A64])) blake_ref.c:181 89 {*movdi_internal}
     (nil))
(note 588 586 753 6 NOTE_INSN_DELETED)
(note 753 588 189 6 NOTE_INSN_DELETED)
(insn 189 753 190 6 (parallel [
            (set (reg:DI 5 di [orig:408 D.5863 ] [408])
                (xor:DI (reg:DI 5 di [orig:408 D.5863 ] [408])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 112 [0x70])) [6 %sfp+-432 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (nil))
(insn 190 189 191 6 (parallel [
            (set (reg:DI 39 r10 [orig:409 D.5863 ] [409])
                (plus:DI (reg:DI 39 r10 [orig:143 D.5863 ] [143])
                    (reg:DI 5 di [orig:408 D.5863 ] [408])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (nil))
(insn 191 190 192 6 (parallel [
            (set (reg:DI 39 r10 [orig:200 D.5863 ] [200])
                (plus:DI (reg:DI 39 r10 [orig:409 D.5863 ] [409])
                    (reg:DI 40 r11 [orig:164 D.5863 ] [164])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (nil))
(insn 192 191 193 6 (parallel [
            (set (reg:DI 41 r12 [orig:410 D.5863 ] [410])
                (xor:DI (reg:DI 41 r12 [orig:193 D.5863 ] [193])
                    (reg:DI 39 r10 [orig:200 D.5863 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (nil))
(insn 193 192 194 6 (parallel [
            (set (reg:DI 41 r12 [orig:202 D.5863 ] [202])
                (rotate:DI (reg:DI 41 r12 [orig:410 D.5863 ] [410])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 588 {*rotldi3_1}
     (nil))
(insn 194 193 195 6 (parallel [
            (set (reg:DI 44 r15 [orig:203 D.5863 ] [203])
                (plus:DI (reg:DI 44 r15 [orig:178 D.5863 ] [178])
                    (reg:DI 41 r12 [orig:202 D.5863 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (nil))
(insn 195 194 196 6 (parallel [
            (set (reg:DI 40 r11 [orig:411 D.5863 ] [411])
                (xor:DI (reg:DI 40 r11 [orig:164 D.5863 ] [164])
                    (reg:DI 44 r15 [orig:203 D.5863 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (nil))
(insn 196 195 589 6 (parallel [
            (set (reg:DI 40 r11 [orig:205 D.5863 ] [205])
                (rotatert:DI (reg:DI 40 r11 [orig:411 D.5863 ] [411])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 589 {*rotrdi3_1}
     (nil))
(insn 589 196 591 6 (set (reg:DI 5 di [orig:412 D.5863 ] [412])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 248 [0xf8])) [6 %sfp+-296 S8 A64])) blake_ref.c:181 89 {*movdi_internal}
     (nil))
(note 591 589 754 6 NOTE_INSN_DELETED)
(note 754 591 197 6 NOTE_INSN_DELETED)
(insn 197 754 198 6 (parallel [
            (set (reg:DI 5 di [orig:412 D.5863 ] [412])
                (xor:DI (reg:DI 5 di [orig:412 D.5863 ] [412])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 120 [0x78])) [6 %sfp+-424 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (nil))
(insn 198 197 199 6 (parallel [
            (set (reg:DI 39 r10 [orig:413 D.5863 ] [413])
                (plus:DI (reg:DI 39 r10 [orig:200 D.5863 ] [200])
                    (reg:DI 5 di [orig:412 D.5863 ] [412])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (nil))
(insn 199 198 742 6 (parallel [
            (set (reg:DI 39 r10 [orig:208 v$0 ] [208])
                (plus:DI (reg:DI 39 r10 [orig:413 D.5863 ] [413])
                    (reg:DI 40 r11 [orig:205 D.5863 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (nil))
(insn 742 199 200 6 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 39 r10 [orig:208 v$0 ] [208])) blake_ref.c:181 89 {*movdi_internal}
     (nil))
(insn 200 742 201 6 (parallel [
            (set (reg:DI 41 r12 [orig:414 D.5863 ] [414])
                (xor:DI (reg:DI 41 r12 [orig:202 D.5863 ] [202])
                    (reg:DI 39 r10 [orig:208 v$0 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (nil))
(insn 201 200 741 6 (parallel [
            (set (reg:DI 41 r12 [orig:210 v$15 ] [210])
                (rotatert:DI (reg:DI 41 r12 [orig:210 v$15 ] [210])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 589 {*rotrdi3_1}
     (nil))
(insn 741 201 202 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [6 %sfp+-488 S8 A64])
        (reg:DI 41 r12 [orig:210 v$15 ] [210])) blake_ref.c:181 89 {*movdi_internal}
     (nil))
(insn 202 741 203 6 (parallel [
            (set (reg:DI 44 r15 [orig:211 v$10 ] [211])
                (plus:DI (reg:DI 44 r15 [orig:203 D.5863 ] [203])
                    (reg:DI 41 r12 [orig:210 v$15 ] [210])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (nil))
(insn 203 202 204 6 (parallel [
            (set (reg:DI 40 r11 [orig:415 D.5863 ] [415])
                (xor:DI (reg:DI 40 r11 [orig:205 D.5863 ] [205])
                    (reg:DI 44 r15 [orig:211 v$10 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (nil))
(insn 204 203 598 6 (parallel [
            (set (reg:DI 40 r11 [orig:214 v$5 ] [214])
                (rotatert:DI (reg:DI 40 r11 [orig:214 v$5 ] [214])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 589 {*rotrdi3_1}
     (nil))
(insn 598 204 599 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-536 S8 A64])
        (reg:DI 40 r11 [orig:214 v$5 ] [214])) blake_ref.c:181 89 {*movdi_internal}
     (nil))
(insn 599 598 601 6 (set (reg:DI 39 r10 [orig:416 D.5863 ] [416])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 256 [0x100])) [6 %sfp+-288 S8 A64])) blake_ref.c:182 89 {*movdi_internal}
     (nil))
(note 601 599 764 6 NOTE_INSN_DELETED)
(note 764 601 205 6 NOTE_INSN_DELETED)
(insn 205 764 206 6 (parallel [
            (set (reg:DI 39 r10 [orig:416 D.5863 ] [416])
                (xor:DI (reg:DI 39 r10 [orig:416 D.5863 ] [416])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 128 [0x80])) [6 %sfp+-416 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (nil))
(insn 206 205 207 6 (parallel [
            (set (reg:DI 0 ax [orig:417 D.5863 ] [417])
                (plus:DI (reg:DI 0 ax [orig:159 D.5863 ] [159])
                    (reg:DI 39 r10 [orig:416 D.5863 ] [416])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (nil))
(insn 207 206 208 6 (parallel [
            (set (reg:DI 0 ax [orig:217 D.5863 ] [217])
                (plus:DI (reg:DI 0 ax [orig:417 D.5863 ] [417])
                    (reg:DI 38 r9 [orig:180 D.5863 ] [180])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (nil))
(insn 208 207 209 6 (parallel [
            (set (reg:DI 6 bp [orig:418 D.5863 ] [418])
                (xor:DI (reg:DI 6 bp [orig:145 D.5863 ] [145])
                    (reg:DI 0 ax [orig:217 D.5863 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (nil))
(insn 209 208 210 6 (parallel [
            (set (reg:DI 6 bp [orig:219 D.5863 ] [219])
                (rotate:DI (reg:DI 6 bp [orig:418 D.5863 ] [418])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 588 {*rotldi3_1}
     (nil))
(insn 210 209 211 6 (parallel [
            (set (reg:DI 43 r14 [orig:220 D.5863 ] [220])
                (plus:DI (reg:DI 43 r14 [orig:194 D.5863 ] [194])
                    (reg:DI 6 bp [orig:219 D.5863 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (nil))
(insn 211 210 212 6 (parallel [
            (set (reg:DI 38 r9 [orig:419 D.5863 ] [419])
                (xor:DI (reg:DI 38 r9 [orig:180 D.5863 ] [180])
                    (reg:DI 43 r14 [orig:220 D.5863 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (nil))
(insn 212 211 602 6 (parallel [
            (set (reg:DI 38 r9 [orig:222 D.5863 ] [222])
                (rotatert:DI (reg:DI 38 r9 [orig:419 D.5863 ] [419])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 589 {*rotrdi3_1}
     (nil))
(insn 602 212 604 6 (set (reg:DI 39 r10 [orig:420 D.5863 ] [420])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 264 [0x108])) [6 %sfp+-280 S8 A64])) blake_ref.c:182 89 {*movdi_internal}
     (nil))
(note 604 602 763 6 NOTE_INSN_DELETED)
(note 763 604 213 6 NOTE_INSN_DELETED)
(insn 213 763 214 6 (parallel [
            (set (reg:DI 39 r10 [orig:420 D.5863 ] [420])
                (xor:DI (reg:DI 39 r10 [orig:420 D.5863 ] [420])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 136 [0x88])) [6 %sfp+-408 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (nil))
(insn 214 213 215 6 (parallel [
            (set (reg:DI 0 ax [orig:421 D.5863 ] [421])
                (plus:DI (reg:DI 0 ax [orig:217 D.5863 ] [217])
                    (reg:DI 39 r10 [orig:420 D.5863 ] [420])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (nil))
(insn 215 214 216 6 (parallel [
            (set (reg:DI 5 di [orig:225 v$1 ] [225])
                (plus:DI (reg:DI 0 ax [orig:421 D.5863 ] [421])
                    (reg:DI 38 r9 [orig:222 D.5863 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (nil))
(insn 216 215 217 6 (parallel [
            (set (reg:DI 6 bp [orig:422 D.5863 ] [422])
                (xor:DI (reg:DI 6 bp [orig:219 D.5863 ] [219])
                    (reg:DI 5 di [orig:225 v$1 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (nil))
(insn 217 216 218 6 (parallel [
            (set (reg:DI 6 bp [orig:227 v$12 ] [227])
                (rotatert:DI (reg:DI 6 bp [orig:422 D.5863 ] [422])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 589 {*rotrdi3_1}
     (nil))
(insn 218 217 740 6 (parallel [
            (set (reg:DI 43 r14 [orig:197 v$11 ] [197])
                (plus:DI (reg:DI 43 r14 [orig:220 D.5863 ] [220])
                    (reg:DI 6 bp [orig:227 v$12 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (nil))
(insn 740 218 219 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [6 %sfp+-496 S8 A64])
        (reg:DI 43 r14 [orig:197 v$11 ] [197])) blake_ref.c:182 89 {*movdi_internal}
     (nil))
(insn 219 740 220 6 (parallel [
            (set (reg:DI 38 r9 [orig:423 D.5863 ] [423])
                (xor:DI (reg:DI 38 r9 [orig:222 D.5863 ] [222])
                    (reg:DI 43 r14 [orig:197 v$11 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (nil))
(insn 220 219 608 6 (parallel [
            (set (reg:DI 38 r9 [orig:230 v$6 ] [230])
                (rotatert:DI (reg:DI 38 r9 [orig:230 v$6 ] [230])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 589 {*rotrdi3_1}
     (nil))
(insn 608 220 609 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-528 S8 A64])
        (reg:DI 38 r9 [orig:230 v$6 ] [230])) blake_ref.c:182 89 {*movdi_internal}
     (nil))
(insn 609 608 611 6 (set (reg:DI 38 r9 [orig:424 D.5863 ] [424])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 272 [0x110])) [6 %sfp+-272 S8 A64])) blake_ref.c:183 89 {*movdi_internal}
     (nil))
(note 611 609 762 6 NOTE_INSN_DELETED)
(note 762 611 221 6 NOTE_INSN_DELETED)
(insn 221 762 610 6 (parallel [
            (set (reg:DI 38 r9 [orig:424 D.5863 ] [424])
                (xor:DI (reg:DI 38 r9 [orig:424 D.5863 ] [424])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 144 [0x90])) [6 %sfp+-400 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (nil))
(insn 610 221 222 6 (set (reg:DI 0 ax [orig:424 D.5863 ] [424])
        (reg:DI 38 r9 [orig:424 D.5863 ] [424])) blake_ref.c:183 89 {*movdi_internal}
     (nil))
(insn 222 610 223 6 (parallel [
            (set (reg:DI 2 cx [orig:425 D.5863 ] [425])
                (plus:DI (reg:DI 2 cx [orig:175 D.5863 ] [175])
                    (reg:DI 0 ax [orig:424 D.5863 ] [424])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (nil))
(insn 223 222 224 6 (parallel [
            (set (reg:DI 2 cx [orig:233 D.5863 ] [233])
                (plus:DI (reg:DI 2 cx [orig:425 D.5863 ] [425])
                    (reg:DI 37 r8 [orig:196 D.5863 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (nil))
(insn 224 223 225 6 (parallel [
            (set (reg:DI 42 r13 [orig:426 D.5863 ] [426])
                (xor:DI (reg:DI 42 r13 [orig:161 D.5863 ] [161])
                    (reg:DI 2 cx [orig:233 D.5863 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (nil))
(insn 225 224 612 6 (parallel [
            (set (reg:DI 42 r13 [orig:235 D.5863 ] [235])
                (rotate:DI (reg:DI 42 r13 [orig:426 D.5863 ] [426])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 588 {*rotldi3_1}
     (nil))
(insn 612 225 226 6 (set (reg:DI 0 ax [orig:146 D.5863 ] [146])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [6 %sfp+-472 S8 A64])) blake_ref.c:183 89 {*movdi_internal}
     (nil))
(insn 226 612 227 6 (parallel [
            (set (reg:DI 38 r9 [orig:236 D.5863 ] [236])
                (plus:DI (reg:DI 0 ax [orig:146 D.5863 ] [146])
                    (reg:DI 42 r13 [orig:235 D.5863 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (nil))
(insn 227 226 228 6 (parallel [
            (set (reg:DI 37 r8 [orig:427 D.5863 ] [427])
                (xor:DI (reg:DI 37 r8 [orig:196 D.5863 ] [196])
                    (reg:DI 38 r9 [orig:236 D.5863 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (nil))
(insn 228 227 613 6 (parallel [
            (set (reg:DI 37 r8 [orig:238 D.5863 ] [238])
                (rotatert:DI (reg:DI 37 r8 [orig:427 D.5863 ] [427])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 589 {*rotrdi3_1}
     (nil))
(insn 613 228 615 6 (set (reg:DI 0 ax [orig:428 D.5863 ] [428])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 280 [0x118])) [6 %sfp+-264 S8 A64])) blake_ref.c:183 89 {*movdi_internal}
     (nil))
(note 615 613 761 6 NOTE_INSN_DELETED)
(note 761 615 229 6 NOTE_INSN_DELETED)
(insn 229 761 614 6 (parallel [
            (set (reg:DI 0 ax [orig:428 D.5863 ] [428])
                (xor:DI (reg:DI 0 ax [orig:428 D.5863 ] [428])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 152 [0x98])) [6 %sfp+-392 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (nil))
(insn 614 229 230 6 (set (reg:DI 0 ax [orig:428 D.5863 ] [428])
        (reg:DI 0 ax [orig:428 D.5863 ] [428])) blake_ref.c:183 89 {*movdi_internal}
     (nil))
(insn 230 614 231 6 (parallel [
            (set (reg:DI 2 cx [orig:429 D.5863 ] [429])
                (plus:DI (reg:DI 2 cx [orig:233 D.5863 ] [233])
                    (reg:DI 0 ax [orig:428 D.5863 ] [428])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (nil))
(insn 231 230 739 6 (parallel [
            (set (reg:DI 2 cx [orig:241 v$2 ] [241])
                (plus:DI (reg:DI 2 cx [orig:429 D.5863 ] [429])
                    (reg:DI 37 r8 [orig:238 D.5863 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (nil))
(insn 739 231 232 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-520 S8 A64])
        (reg:DI 2 cx [orig:241 v$2 ] [241])) blake_ref.c:183 89 {*movdi_internal}
     (nil))
(insn 232 739 233 6 (parallel [
            (set (reg:DI 42 r13 [orig:430 D.5863 ] [430])
                (xor:DI (reg:DI 42 r13 [orig:235 D.5863 ] [235])
                    (reg:DI 2 cx [orig:241 v$2 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (nil))
(insn 233 232 234 6 (parallel [
            (set (reg:DI 42 r13 [orig:243 v$13 ] [243])
                (rotatert:DI (reg:DI 42 r13 [orig:430 D.5863 ] [430])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 589 {*rotrdi3_1}
     (nil))
(insn 234 233 235 6 (parallel [
            (set (reg:DI 38 r9 [orig:244 v$8 ] [244])
                (plus:DI (reg:DI 38 r9 [orig:236 D.5863 ] [236])
                    (reg:DI 42 r13 [orig:243 v$13 ] [243])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (nil))
(insn 235 234 618 6 (parallel [
            (set (reg:DI 37 r8 [orig:431 D.5863 ] [431])
                (xor:DI (reg:DI 37 r8 [orig:238 D.5863 ] [238])
                    (reg:DI 38 r9 [orig:244 v$8 ] [244])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (nil))
(insn 618 235 236 6 (set (reg:DI 2 cx [orig:246 v$7 ] [246])
        (reg:DI 37 r8 [orig:431 D.5863 ] [431])) blake_ref.c:183 89 {*movdi_internal}
     (nil))
(insn 236 618 619 6 (parallel [
            (set (reg:DI 2 cx [orig:246 v$7 ] [246])
                (rotatert:DI (reg:DI 2 cx [orig:246 v$7 ] [246])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 589 {*rotrdi3_1}
     (nil))
(insn 619 236 620 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-512 S8 A64])
        (reg:DI 2 cx [orig:246 v$7 ] [246])) blake_ref.c:183 89 {*movdi_internal}
     (nil))
(insn 620 619 622 6 (set (reg:DI 0 ax [orig:432 D.5863 ] [432])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 288 [0x120])) [6 %sfp+-256 S8 A64])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(note 622 620 760 6 NOTE_INSN_DELETED)
(note 760 622 237 6 NOTE_INSN_DELETED)
(insn 237 760 621 6 (parallel [
            (set (reg:DI 0 ax [orig:432 D.5863 ] [432])
                (xor:DI (reg:DI 0 ax [orig:432 D.5863 ] [432])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 160 [0xa0])) [6 %sfp+-384 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (nil))
(insn 621 237 238 6 (set (reg:DI 0 ax [orig:432 D.5863 ] [432])
        (reg:DI 0 ax [orig:432 D.5863 ] [432])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn 238 621 738 6 (parallel [
            (set (reg:DI 1 dx [orig:433 D.5863 ] [433])
                (plus:DI (reg:DI 1 dx [orig:191 D.5863 ] [191])
                    (reg:DI 0 ax [orig:432 D.5863 ] [432])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (nil))
(insn 738 238 239 6 (set (reg:DI 37 r8 [orig:148 D.5863 ] [148])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [6 %sfp+-240 S8 A64])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn 239 738 240 6 (parallel [
            (set (reg:DI 1 dx [orig:250 D.5863 ] [250])
                (plus:DI (reg:DI 1 dx [orig:433 D.5863 ] [433])
                    (reg:DI 37 r8 [orig:148 D.5863 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (nil))
(insn 240 239 241 6 (parallel [
            (set (reg:DI 3 bx [orig:434 D.5863 ] [434])
                (xor:DI (reg:DI 3 bx [orig:177 D.5863 ] [177])
                    (reg:DI 1 dx [orig:250 D.5863 ] [250])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (nil))
(insn 241 240 624 6 (parallel [
            (set (reg:DI 3 bx [orig:252 D.5863 ] [252])
                (rotate:DI (reg:DI 3 bx [orig:434 D.5863 ] [434])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 588 {*rotldi3_1}
     (nil))
(insn 624 241 242 6 (set (reg:DI 0 ax [orig:162 D.5863 ] [162])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-480 S8 A64])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn 242 624 243 6 (parallel [
            (set (reg:DI 0 ax [orig:253 D.5863 ] [253])
                (plus:DI (reg:DI 0 ax [orig:162 D.5863 ] [162])
                    (reg:DI 3 bx [orig:252 D.5863 ] [252])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (nil))
(insn 243 242 244 6 (parallel [
            (set (reg:DI 37 r8 [orig:435 D.5863 ] [435])
                (xor:DI (reg:DI 37 r8 [orig:435 D.5863 ] [435])
                    (reg:DI 0 ax [orig:253 D.5863 ] [253])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (nil))
(insn 244 243 627 6 (parallel [
            (set (reg:DI 37 r8 [orig:255 D.5863 ] [255])
                (rotatert:DI (reg:DI 37 r8 [orig:435 D.5863 ] [435])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 589 {*rotrdi3_1}
     (nil))
(insn 627 244 629 6 (set (reg:DI 2 cx [orig:436 D.5863 ] [436])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 296 [0x128])) [6 %sfp+-248 S8 A64])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(note 629 627 759 6 NOTE_INSN_DELETED)
(note 759 629 245 6 NOTE_INSN_DELETED)
(insn 245 759 246 6 (parallel [
            (set (reg:DI 2 cx [orig:436 D.5863 ] [436])
                (xor:DI (reg:DI 2 cx [orig:436 D.5863 ] [436])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 168 [0xa8])) [6 %sfp+-376 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (nil))
(insn 246 245 247 6 (parallel [
            (set (reg:DI 1 dx [orig:437 D.5863 ] [437])
                (plus:DI (reg:DI 1 dx [orig:250 D.5863 ] [250])
                    (reg:DI 2 cx [orig:436 D.5863 ] [436])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (nil))
(insn 247 246 737 6 (parallel [
            (set (reg:DI 1 dx [orig:258 v$3 ] [258])
                (plus:DI (reg:DI 1 dx [orig:437 D.5863 ] [437])
                    (reg:DI 37 r8 [orig:255 D.5863 ] [255])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (nil))
(insn 737 247 248 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-504 S8 A64])
        (reg:DI 1 dx [orig:258 v$3 ] [258])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn 248 737 249 6 (parallel [
            (set (reg:DI 3 bx [orig:438 D.5863 ] [438])
                (xor:DI (reg:DI 3 bx [orig:252 D.5863 ] [252])
                    (reg:DI 1 dx [orig:258 v$3 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (nil))
(insn 249 248 250 6 (parallel [
            (set (reg:DI 3 bx [orig:260 v$14 ] [260])
                (rotatert:DI (reg:DI 3 bx [orig:438 D.5863 ] [438])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 589 {*rotrdi3_1}
     (nil))
(insn 250 249 632 6 (parallel [
            (set (reg:DI 0 ax [orig:262 v$9 ] [262])
                (plus:DI (reg:DI 0 ax [orig:253 D.5863 ] [253])
                    (reg:DI 3 bx [orig:260 v$14 ] [260])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (nil))
(insn 632 250 736 6 (set (reg:DI 0 ax [orig:262 v$9 ] [262])
        (reg:DI 0 ax [orig:262 v$9 ] [262])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn 736 632 633 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-480 S8 A64])
        (reg:DI 0 ax [orig:262 v$9 ] [262])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn 633 736 251 6 (set (reg:DI 0 ax [orig:262 v$9 ] [262])
        (reg:DI 0 ax [orig:262 v$9 ] [262])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn 251 633 252 6 (parallel [
            (set (reg:DI 37 r8 [orig:439 D.5863 ] [439])
                (xor:DI (reg:DI 37 r8 [orig:255 D.5863 ] [255])
                    (reg:DI 0 ax [orig:262 v$9 ] [262])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (nil))
(insn 252 251 253 6 (parallel [
            (set (reg:DI 37 r8 [orig:264 v$4 ] [264])
                (rotatert:DI (reg:DI 37 r8 [orig:439 D.5863 ] [439])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 589 {*rotrdi3_1}
     (nil))
(note 253 252 254 6 NOTE_INSN_DELETED)
(insn 254 253 634 6 (parallel [
            (set (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(note 634 254 757 6 NOTE_INSN_DELETED)
(note 757 634 255 6 NOTE_INSN_DELETED)
(insn 255 757 758 6 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                                (const_int 316 [0x13c])) [6 %sfp+-228 S4 A32])
                        (const_int -1 [0xffffffffffffffff]))
                    (const_int 0 [0])))
            (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                        (const_int 316 [0x13c])) [6 %sfp+-228 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 316 [0x13c])) [6 %sfp+-228 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
        ]) blake_ref.c:173 225 {*addsi_2}
     (nil))
(note 758 255 635 6 NOTE_INSN_DELETED)
(note 635 758 256 6 NOTE_INSN_DELETED)
(jump_insn 256 635 257 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 358)
            (pc))) blake_ref.c:173 612 {*jcc_1}
     (int_list:REG_BR_PROB 588 (nil))
 -> 358)
;;  succ:       7 [94.1%]  (FALLTHRU)
;;              8 [5.9%]  (LOOP_EXIT)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]

;; basic block 7, loop depth 0, count 0, freq 8859, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [94.1%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  kill	
(note 257 256 259 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 259 257 260 7 NOTE_INSN_DELETED)
(insn 260 259 261 7 (set (reg:DI 0 ax [orig:440 D.5864 ] [440])
        (zero_extend:DI (mem:QI (reg:DI 4 si [orig:269 ivtmp.149 ] [269]) [0 MEM[base: _802, offset: 0B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 261 260 262 7 (set (reg:DI 40 r11 [orig:287 D.5867 ] [287])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:440 D.5864 ] [440])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(note 262 261 263 7 NOTE_INSN_DELETED)
(insn 263 262 264 7 (set (reg/f:DI 2 cx [441])
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)
        (nil)))
(insn 264 263 265 7 (set (reg:DI 1 dx [orig:442 D.5864 ] [442])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 1 [0x1])) [0 MEM[base: _802, offset: 1B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 265 264 636 7 (set (reg:DI 39 r10 [orig:290 D.5868 ] [290])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:442 D.5864 ] [442])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:442 D.5864 ] [442])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 636 265 267 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [6 %sfp+-472 S8 A64])
        (reg:DI 39 r10 [orig:290 D.5868 ] [290])) 89 {*movdi_internal}
     (nil))
(insn 267 636 270 7 (set (reg:DI 1 dx [orig:291 D.5867 ] [291])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:442 D.5864 ] [442])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 270 267 271 7 (set (reg:DI 39 r10 [orig:292 D.5868 ] [292])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:440 D.5864 ] [440])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:440 D.5864 ] [440])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(note 271 270 272 7 NOTE_INSN_DELETED)
(insn 272 271 273 7 (set (reg:DI 0 ax [orig:446 D.5864 ] [446])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 2 [0x2])) [0 MEM[base: _802, offset: 2B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 273 272 637 7 (set (reg:DI 43 r14 [orig:295 D.5867 ] [295])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:446 D.5864 ] [446])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 637 273 274 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [6 %sfp+-352 S8 A64])
        (reg:DI 43 r14 [orig:295 D.5867 ] [295])) 89 {*movdi_internal}
     (nil))
(note 274 637 276 7 NOTE_INSN_DELETED)
(insn 276 274 277 7 (set (reg:DI 41 r12 [orig:448 D.5864 ] [448])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 3 [0x3])) [0 MEM[base: _802, offset: 3B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 277 276 638 7 (set (reg:DI 43 r14 [orig:298 D.5868 ] [298])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:448 D.5864 ] [448])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:448 D.5864 ] [448])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 638 277 279 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [6 %sfp+-464 S8 A64])
        (reg:DI 43 r14 [orig:298 D.5868 ] [298])) 89 {*movdi_internal}
     (nil))
(insn 279 638 639 7 (set (reg:DI 43 r14 [orig:299 D.5867 ] [299])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:448 D.5864 ] [448])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 639 279 282 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 200 [0xc8])) [6 %sfp+-344 S8 A64])
        (reg:DI 43 r14 [orig:299 D.5867 ] [299])) 89 {*movdi_internal}
     (nil))
(insn 282 639 756 7 (set (reg:DI 0 ax [orig:300 D.5868 ] [300])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:446 D.5864 ] [446])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:446 D.5864 ] [446])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 756 282 283 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [6 %sfp+-368 S8 A64])
        (reg:DI 0 ax [orig:300 D.5868 ] [300])) 89 {*movdi_internal}
     (nil))
(note 283 756 284 7 NOTE_INSN_DELETED)
(insn 284 283 285 7 (set (reg:DI 41 r12 [orig:452 D.5864 ] [452])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 4 [0x4])) [0 MEM[base: _802, offset: 4B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 285 284 640 7 (set (reg:DI 43 r14 [orig:303 D.5867 ] [303])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:452 D.5864 ] [452])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 640 285 286 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [6 %sfp+-336 S8 A64])
        (reg:DI 43 r14 [orig:303 D.5867 ] [303])) 89 {*movdi_internal}
     (nil))
(note 286 640 288 7 NOTE_INSN_DELETED)
(insn 288 286 289 7 (set (reg:DI 43 r14 [orig:454 D.5864 ] [454])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 5 [0x5])) [0 MEM[base: _802, offset: 5B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 289 288 641 7 (set (reg:DI 0 ax [orig:306 D.5868 ] [306])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:454 D.5864 ] [454])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:454 D.5864 ] [454])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 641 289 291 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 88 [0x58])) [6 %sfp+-456 S8 A64])
        (reg:DI 0 ax [orig:306 D.5868 ] [306])) 89 {*movdi_internal}
     (nil))
(insn 291 641 642 7 (set (reg:DI 0 ax [orig:307 D.5867 ] [307])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:454 D.5864 ] [454])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 642 291 294 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 216 [0xd8])) [6 %sfp+-328 S8 A64])
        (reg:DI 0 ax [orig:307 D.5867 ] [307])) 89 {*movdi_internal}
     (nil))
(insn 294 642 643 7 (set (reg:DI 0 ax [orig:308 D.5868 ] [308])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:452 D.5864 ] [452])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:452 D.5864 ] [452])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 643 294 295 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [6 %sfp+-360 S8 A64])
        (reg:DI 0 ax [orig:308 D.5868 ] [308])) 89 {*movdi_internal}
     (nil))
(note 295 643 296 7 NOTE_INSN_DELETED)
(insn 296 295 297 7 (set (reg:DI 41 r12 [orig:458 D.5864 ] [458])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 6 [0x6])) [0 MEM[base: _802, offset: 6B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 297 296 644 7 (set (reg:DI 0 ax [orig:311 D.5867 ] [311])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:458 D.5864 ] [458])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 644 297 298 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [6 %sfp+-320 S8 A64])
        (reg:DI 0 ax [orig:311 D.5867 ] [311])) 89 {*movdi_internal}
     (nil))
(note 298 644 300 7 NOTE_INSN_DELETED)
(insn 300 298 301 7 (set (reg:DI 43 r14 [orig:460 D.5864 ] [460])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 7 [0x7])) [0 MEM[base: _802, offset: 7B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 301 300 645 7 (set (reg:DI 0 ax [orig:314 D.5868 ] [314])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:460 D.5864 ] [460])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:460 D.5864 ] [460])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 645 301 303 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [6 %sfp+-448 S8 A64])
        (reg:DI 0 ax [orig:314 D.5868 ] [314])) 89 {*movdi_internal}
     (nil))
(insn 303 645 646 7 (set (reg:DI 0 ax [orig:315 D.5867 ] [315])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:460 D.5864 ] [460])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 646 303 306 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 232 [0xe8])) [6 %sfp+-312 S8 A64])
        (reg:DI 0 ax [orig:315 D.5867 ] [315])) 89 {*movdi_internal}
     (nil))
(insn 306 646 647 7 (set (reg:DI 0 ax [orig:316 D.5868 ] [316])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:458 D.5864 ] [458])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:458 D.5864 ] [458])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 647 306 307 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 104 [0x68])) [6 %sfp+-440 S8 A64])
        (reg:DI 0 ax [orig:316 D.5868 ] [316])) 89 {*movdi_internal}
     (nil))
(note 307 647 308 7 NOTE_INSN_DELETED)
(insn 308 307 309 7 (set (reg:DI 41 r12 [orig:464 D.5864 ] [464])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 8 [0x8])) [0 MEM[base: _802, offset: 8B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 309 308 648 7 (set (reg:DI 0 ax [orig:319 D.5867 ] [319])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:464 D.5864 ] [464])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 648 309 310 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [6 %sfp+-304 S8 A64])
        (reg:DI 0 ax [orig:319 D.5867 ] [319])) 89 {*movdi_internal}
     (nil))
(note 310 648 312 7 NOTE_INSN_DELETED)
(insn 312 310 313 7 (set (reg:DI 43 r14 [orig:466 D.5864 ] [466])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 9 [0x9])) [0 MEM[base: _802, offset: 9B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 313 312 649 7 (set (reg:DI 0 ax [orig:322 D.5868 ] [322])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:466 D.5864 ] [466])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:466 D.5864 ] [466])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 649 313 315 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [6 %sfp+-432 S8 A64])
        (reg:DI 0 ax [orig:322 D.5868 ] [322])) 89 {*movdi_internal}
     (nil))
(insn 315 649 650 7 (set (reg:DI 0 ax [orig:323 D.5867 ] [323])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:466 D.5864 ] [466])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 650 315 318 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 248 [0xf8])) [6 %sfp+-296 S8 A64])
        (reg:DI 0 ax [orig:323 D.5867 ] [323])) 89 {*movdi_internal}
     (nil))
(insn 318 650 651 7 (set (reg:DI 0 ax [orig:324 D.5868 ] [324])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:464 D.5864 ] [464])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:464 D.5864 ] [464])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 651 318 319 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 120 [0x78])) [6 %sfp+-424 S8 A64])
        (reg:DI 0 ax [orig:324 D.5868 ] [324])) 89 {*movdi_internal}
     (nil))
(note 319 651 320 7 NOTE_INSN_DELETED)
(insn 320 319 321 7 (set (reg:DI 41 r12 [orig:470 D.5864 ] [470])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 10 [0xa])) [0 MEM[base: _802, offset: 10B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 321 320 652 7 (set (reg:DI 0 ax [orig:327 D.5867 ] [327])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:470 D.5864 ] [470])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 652 321 322 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 256 [0x100])) [6 %sfp+-288 S8 A64])
        (reg:DI 0 ax [orig:327 D.5867 ] [327])) 89 {*movdi_internal}
     (nil))
(note 322 652 324 7 NOTE_INSN_DELETED)
(insn 324 322 325 7 (set (reg:DI 43 r14 [orig:472 D.5864 ] [472])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 11 [0xb])) [0 MEM[base: _802, offset: 11B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 325 324 653 7 (set (reg:DI 0 ax [orig:330 D.5868 ] [330])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:472 D.5864 ] [472])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:472 D.5864 ] [472])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 653 325 327 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [6 %sfp+-416 S8 A64])
        (reg:DI 0 ax [orig:330 D.5868 ] [330])) 89 {*movdi_internal}
     (nil))
(insn 327 653 654 7 (set (reg:DI 0 ax [orig:331 D.5867 ] [331])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:472 D.5864 ] [472])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 654 327 330 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 264 [0x108])) [6 %sfp+-280 S8 A64])
        (reg:DI 0 ax [orig:331 D.5867 ] [331])) 89 {*movdi_internal}
     (nil))
(insn 330 654 655 7 (set (reg:DI 0 ax [orig:332 D.5868 ] [332])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:470 D.5864 ] [470])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:470 D.5864 ] [470])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 655 330 331 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 136 [0x88])) [6 %sfp+-408 S8 A64])
        (reg:DI 0 ax [orig:332 D.5868 ] [332])) 89 {*movdi_internal}
     (nil))
(note 331 655 332 7 NOTE_INSN_DELETED)
(insn 332 331 333 7 (set (reg:DI 41 r12 [orig:476 D.5864 ] [476])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 12 [0xc])) [0 MEM[base: _802, offset: 12B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 333 332 656 7 (set (reg:DI 0 ax [orig:335 D.5867 ] [335])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:476 D.5864 ] [476])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 656 333 334 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 272 [0x110])) [6 %sfp+-272 S8 A64])
        (reg:DI 0 ax [orig:335 D.5867 ] [335])) 89 {*movdi_internal}
     (nil))
(note 334 656 336 7 NOTE_INSN_DELETED)
(insn 336 334 337 7 (set (reg:DI 43 r14 [orig:478 D.5864 ] [478])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 13 [0xd])) [0 MEM[base: _802, offset: 13B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 337 336 657 7 (set (reg:DI 0 ax [orig:338 D.5868 ] [338])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:478 D.5864 ] [478])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:478 D.5864 ] [478])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 657 337 339 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [6 %sfp+-400 S8 A64])
        (reg:DI 0 ax [orig:338 D.5868 ] [338])) 89 {*movdi_internal}
     (nil))
(insn 339 657 658 7 (set (reg:DI 0 ax [orig:339 D.5867 ] [339])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:478 D.5864 ] [478])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 658 339 342 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 280 [0x118])) [6 %sfp+-264 S8 A64])
        (reg:DI 0 ax [orig:339 D.5867 ] [339])) 89 {*movdi_internal}
     (nil))
(insn 342 658 659 7 (set (reg:DI 0 ax [orig:340 D.5868 ] [340])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:476 D.5864 ] [476])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:476 D.5864 ] [476])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 659 342 343 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 152 [0x98])) [6 %sfp+-392 S8 A64])
        (reg:DI 0 ax [orig:340 D.5868 ] [340])) 89 {*movdi_internal}
     (nil))
(note 343 659 344 7 NOTE_INSN_DELETED)
(insn 344 343 345 7 (set (reg:DI 41 r12 [orig:482 D.5864 ] [482])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 14 [0xe])) [0 MEM[base: _802, offset: 14B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 345 344 660 7 (set (reg:DI 0 ax [orig:343 D.5867 ] [343])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:482 D.5864 ] [482])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 660 345 346 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 288 [0x120])) [6 %sfp+-256 S8 A64])
        (reg:DI 0 ax [orig:343 D.5867 ] [343])) 89 {*movdi_internal}
     (nil))
(note 346 660 348 7 NOTE_INSN_DELETED)
(insn 348 346 349 7 (set (reg:DI 43 r14 [orig:484 D.5864 ] [484])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 15 [0xf])) [0 MEM[base: _802, offset: 15B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 349 348 661 7 (set (reg:DI 0 ax [orig:346 D.5868 ] [346])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:484 D.5864 ] [484])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:484 D.5864 ] [484])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 661 349 351 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [6 %sfp+-384 S8 A64])
        (reg:DI 0 ax [orig:346 D.5868 ] [346])) 89 {*movdi_internal}
     (nil))
(insn 351 661 662 7 (set (reg:DI 0 ax [orig:347 D.5867 ] [347])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:484 D.5864 ] [484])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 662 351 354 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 296 [0x128])) [6 %sfp+-248 S8 A64])
        (reg:DI 0 ax [orig:347 D.5867 ] [347])) 89 {*movdi_internal}
     (nil))
(insn 354 662 663 7 (set (reg:DI 0 ax [orig:348 D.5868 ] [348])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:482 D.5864 ] [482])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:482 D.5864 ] [482])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 663 354 409 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [6 %sfp+-376 S8 A64])
        (reg:DI 0 ax [orig:348 D.5868 ] [348])) 89 {*movdi_internal}
     (nil))
(jump_insn 409 663 410 7 (set (pc)
        (label_ref 355)) 654 {jump}
     (nil)
 -> 355)
;;  succ:       6 [100.0%]  (DFS_BACK)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]

(barrier 410 409 358)
;; basic block 8, loop depth 0, count 0, freq 588, maybe hot
;;  prev block 7, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [5.9%]  (LOOP_EXIT)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; lr  use 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 4 [si] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 43 [r14] 44 [r15]
;; live  kill	
(code_label 358 410 359 8 10 "" [1 uses])
(note 359 358 425 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 425 359 751 8 (set (reg:DI 4 si [orig:211 v$10 ] [211])
        (reg:DI 44 r15 [orig:211 v$10 ] [211])) 89 {*movdi_internal}
     (nil))
(note 751 425 426 8 NOTE_INSN_DELETED)
(insn 426 751 430 8 (set (reg:DI 43 r14 [orig:225 v$1 ] [225])
        (reg:DI 5 di [orig:225 v$1 ] [225])) 89 {*movdi_internal}
     (nil))
(insn 430 426 665 8 (set (reg:DI 44 r15 [orig:258 v$3 ] [258])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-504 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 665 430 667 8 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-504 S8 A64])
        (reg:DI 38 r9 [orig:244 v$8 ] [244])) 89 {*movdi_internal}
     (nil))
(insn 667 665 361 8 (set (reg:DI 22 xmm1 [orig:488 vect_cst_.130 ] [488])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-504 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 361 667 669 8 (set (reg:V2DI 22 xmm1 [orig:488 vect_cst_.130 ] [488])
        (vec_concat:V2DI (reg:DI 22 xmm1 [orig:488 vect_cst_.130 ] [488])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 64 [0x40])) [6 %sfp+-480 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 669 361 671 8 (set (reg:DI 21 xmm0 [orig:489 vect_cst_.125 ] [489])
        (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 671 669 362 8 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 43 r14 [orig:225 v$1 ] [225])) 89 {*movdi_internal}
     (nil))
(insn 362 671 363 8 (set (reg:V2DI 21 xmm0 [orig:489 vect_cst_.125 ] [489])
        (vec_concat:V2DI (reg:DI 21 xmm0 [orig:489 vect_cst_.125 ] [489])
            (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 363 362 673 8 (set (reg:V2DI 21 xmm0 [orig:490 D.5862 ] [490])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:489 vect_cst_.125 ] [489])
            (reg:V2DI 22 xmm1 [orig:488 vect_cst_.130 ] [488]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 673 363 364 8 (set (reg:DI 24 xmm3 [orig:491 vect_cst_.120 ] [491])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 384 [0x180])) [6 %sfp+-160 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 364 673 365 8 (set (reg:V2DI 24 xmm3 [orig:491 vect_cst_.120 ] [491])
        (vec_concat:V2DI (reg:DI 24 xmm3 [orig:491 vect_cst_.120 ] [491])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 392 [0x188])) [6 %sfp+-152 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 365 364 676 8 (set (reg:V2DI 21 xmm0 [orig:492 D.5862 ] [492])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:490 D.5862 ] [490])
            (reg:V2DI 24 xmm3 [orig:491 vect_cst_.120 ] [491]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 676 365 366 8 (set (reg:DI 22 xmm1 [orig:493 vect_cst_.116 ] [493])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [6 %sfp+-224 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 366 676 367 8 (set (reg:V2DI 22 xmm1 [orig:493 vect_cst_.116 ] [493])
        (vec_concat:V2DI (reg:DI 22 xmm1 [orig:493 vect_cst_.116 ] [493])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 328 [0x148])) [6 %sfp+-216 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 367 366 678 8 (set (reg:V2DI 21 xmm0 [orig:494 vect__785.126 ] [494])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:492 D.5862 ] [492])
            (reg:V2DI 22 xmm1 [orig:493 vect_cst_.116 ] [493]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 678 367 368 8 (set (reg:DI 0 ax [718])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:189 89 {*movdi_internal}
     (nil))
(insn 368 678 680 8 (set (mem:V16QI (plus:DI (reg:DI 0 ax [718])
                (const_int 136 [0x88])) [3 MEM[(long long unsigned int *)state_534(D) + 136B]+0 S16 A64])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [orig:494 vect__785.126 ] [494])
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (nil))
(insn 680 368 682 8 (set (reg:DI 22 xmm1 [orig:495 vect_cst_.124 ] [495])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-520 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 682 680 370 8 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 44 r15 [orig:258 v$3 ] [258])) 89 {*movdi_internal}
     (nil))
(insn 370 682 684 8 (set (reg:V2DI 22 xmm1 [orig:495 vect_cst_.124 ] [495])
        (vec_concat:V2DI (reg:DI 22 xmm1 [orig:495 vect_cst_.124 ] [495])
            (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 684 370 755 8 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 4 si [orig:211 v$10 ] [211])) 89 {*movdi_internal}
     (nil))
(insn 755 684 371 8 (set (reg:DI 21 xmm0 [orig:496 vect_cst_.129 ] [496])
        (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 371 755 372 8 (set (reg:V2DI 21 xmm0 [orig:496 vect_cst_.129 ] [496])
        (vec_concat:V2DI (reg:DI 21 xmm0 [orig:496 vect_cst_.129 ] [496])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])) [6 %sfp+-496 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 372 371 687 8 (set (reg:V2DI 21 xmm0 [orig:497 D.5862 ] [497])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:496 vect_cst_.129 ] [496])
            (reg:V2DI 22 xmm1 [orig:495 vect_cst_.124 ] [495]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 687 372 373 8 (set (reg:DI 23 xmm2 [orig:498 vect_cst_.119 ] [498])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 400 [0x190])) [6 %sfp+-144 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 373 687 374 8 (set (reg:V2DI 23 xmm2 [orig:498 vect_cst_.119 ] [498])
        (vec_concat:V2DI (reg:DI 23 xmm2 [orig:498 vect_cst_.119 ] [498])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 408 [0x198])) [6 %sfp+-136 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 374 373 690 8 (set (reg:V2DI 21 xmm0 [orig:499 D.5862 ] [499])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:497 D.5862 ] [497])
            (reg:V2DI 23 xmm2 [orig:498 vect_cst_.119 ] [498]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 690 374 375 8 (set (reg:DI 22 xmm1 [orig:500 vect_cst_.115 ] [500])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [6 %sfp+-208 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 375 690 376 8 (set (reg:V2DI 22 xmm1 [orig:500 vect_cst_.115 ] [500])
        (vec_concat:V2DI (reg:DI 22 xmm1 [orig:500 vect_cst_.115 ] [500])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 344 [0x158])) [6 %sfp+-200 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 376 375 692 8 (set (reg:V2DI 21 xmm0 [orig:501 vect__785.126 ] [501])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:499 D.5862 ] [499])
            (reg:V2DI 22 xmm1 [orig:500 vect_cst_.115 ] [500]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 692 376 377 8 (set (reg:DI 0 ax [724])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:189 89 {*movdi_internal}
     (nil))
(insn 377 692 694 8 (set (mem:V16QI (plus:DI (reg:DI 0 ax [724])
                (const_int 152 [0x98])) [3 MEM[(long long unsigned int *)state_534(D) + 152B]+0 S16 A64])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [orig:501 vect__785.126 ] [501])
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (nil))
(insn 694 377 697 8 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 6 bp [orig:227 v$12 ] [227])) 89 {*movdi_internal}
     (nil))
(insn 697 694 696 8 (set (reg:DI 21 xmm0 [orig:502 vect_cst_.123 ] [502])
        (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 696 697 379 8 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 42 r13 [orig:243 v$13 ] [243])) 89 {*movdi_internal}
     (nil))
(insn 379 696 699 8 (set (reg:V2DI 21 xmm0 [orig:502 vect_cst_.123 ] [502])
        (vec_concat:V2DI (reg:DI 21 xmm0 [orig:502 vect_cst_.123 ] [502])
            (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 699 379 701 8 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 37 r8 [orig:264 v$4 ] [264])) 89 {*movdi_internal}
     (nil))
(insn 701 699 380 8 (set (reg:DI 22 xmm1 [orig:503 vect_cst_.128 ] [503])
        (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 380 701 381 8 (set (reg:V2DI 22 xmm1 [orig:503 vect_cst_.128 ] [503])
        (vec_concat:V2DI (reg:DI 22 xmm1 [orig:503 vect_cst_.128 ] [503])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])) [6 %sfp+-536 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 381 380 383 8 (set (reg:V2DI 21 xmm0 [orig:504 D.5862 ] [504])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:502 vect_cst_.123 ] [502])
            (reg:V2DI 22 xmm1 [orig:503 vect_cst_.128 ] [503]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 383 381 703 8 (set (reg:V2DI 21 xmm0 [orig:506 D.5862 ] [506])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:504 D.5862 ] [504])
            (reg:V2DI 24 xmm3 [orig:491 vect_cst_.120 ] [491]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 703 383 384 8 (set (reg:DI 24 xmm3 [orig:507 vect_cst_.114 ] [507])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [6 %sfp+-192 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 384 703 385 8 (set (reg:V2DI 24 xmm3 [orig:507 vect_cst_.114 ] [507])
        (vec_concat:V2DI (reg:DI 24 xmm3 [orig:507 vect_cst_.114 ] [507])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 360 [0x168])) [6 %sfp+-184 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 385 384 705 8 (set (reg:V2DI 21 xmm0 [orig:508 vect__785.126 ] [508])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:506 D.5862 ] [506])
            (reg:V2DI 24 xmm3 [orig:507 vect_cst_.114 ] [507]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 705 385 386 8 (set (reg:DI 0 ax [731])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:189 89 {*movdi_internal}
     (nil))
(insn 386 705 707 8 (set (mem:V16QI (plus:DI (reg:DI 0 ax [731])
                (const_int 168 [0xa8])) [3 MEM[(long long unsigned int *)state_534(D) + 168B]+0 S16 A64])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [orig:508 vect__785.126 ] [508])
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (nil))
(insn 707 386 388 8 (set (reg:DI 21 xmm0 [orig:509 vect_cst_.127 ] [509])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-528 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 388 707 710 8 (set (reg:V2DI 21 xmm0 [orig:509 vect_cst_.127 ] [509])
        (vec_concat:V2DI (reg:DI 21 xmm0 [orig:509 vect_cst_.127 ] [509])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])) [6 %sfp+-512 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 710 388 712 8 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 3 bx [orig:260 v$14 ] [260])) 89 {*movdi_internal}
     (nil))
(insn 712 710 389 8 (set (reg:DI 22 xmm1 [orig:510 vect_cst_.122 ] [510])
        (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 389 712 390 8 (set (reg:V2DI 22 xmm1 [orig:510 vect_cst_.122 ] [510])
        (vec_concat:V2DI (reg:DI 22 xmm1 [orig:510 vect_cst_.122 ] [510])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 56 [0x38])) [6 %sfp+-488 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 390 389 392 8 (set (reg:V2DI 21 xmm0 [orig:511 D.5862 ] [511])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:509 vect_cst_.127 ] [509])
            (reg:V2DI 22 xmm1 [orig:510 vect_cst_.122 ] [510]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 392 390 714 8 (set (reg:V2DI 21 xmm0 [orig:513 D.5862 ] [513])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:511 D.5862 ] [511])
            (reg:V2DI 23 xmm2 [orig:498 vect_cst_.119 ] [498]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 714 392 393 8 (set (reg:DI 23 xmm2 [orig:514 vect_cst_.113 ] [514])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 368 [0x170])) [6 %sfp+-176 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 393 714 394 8 (set (reg:V2DI 23 xmm2 [orig:514 vect_cst_.113 ] [514])
        (vec_concat:V2DI (reg:DI 23 xmm2 [orig:514 vect_cst_.113 ] [514])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 376 [0x178])) [6 %sfp+-168 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 394 393 716 8 (set (reg:V2DI 21 xmm0 [orig:515 vect__785.126 ] [515])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:513 D.5862 ] [513])
            (reg:V2DI 23 xmm2 [orig:514 vect_cst_.113 ] [514]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 716 394 395 8 (set (reg:DI 0 ax [736])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:189 89 {*movdi_internal}
     (nil))
(insn 395 716 400 8 (set (mem:V16QI (plus:DI (reg:DI 0 ax [736])
                (const_int 184 [0xb8])) [3 MEM[(long long unsigned int *)state_534(D) + 184B]+0 S16 A64])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [orig:515 vect__785.126 ] [515])
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (nil))
(insn 400 395 401 8 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) blake_ref.c:199 90 {*movsi_internal}
     (nil))
(insn 401 400 433 8 (use (reg/i:SI 0 ax)) blake_ref.c:199 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 433 401 0 NOTE_INSN_DELETED)

;; Function Update32.part.0 (Update32.part.0, funcdef_no=22, decl_uid=5562, cgraph_uid=0, symbol_order=31)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=64, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
      Removing equiv init insn 10 (freq=90)
   10: r127:SI=[r124:DI+0x4]
      REG_EQUIV [r124:DI+0x4]
deleting insn with uid = 10.
Changing pseudo 127 in operand 1 of insn 11 on equiv [r124:DI+0x4]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 11:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=192 from oldreg=88, assigning class GENERAL_REGS to r192
   11: {r192:SI=r192:SI>>0x3;clobber flags:CC;}
      REG_DEAD r127:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r124:DI+0x4]>>0x3
    Inserting insn reload before:
  235: r192:SI=[r124:DI+0x4]
    Inserting insn reload after:
  236: r88:SI=r192:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=193 from oldreg=129, assigning class GENERAL_REGS to r193
   18: {r193:DI=r193:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  237: r193:DI=r126:DI
    Inserting insn reload after:
  238: r129:DI=r193:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rm  (1) re {*cmpdi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 22:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
      Removing equiv init insn 34 (freq=13)
   34: r137:SI=[r124:DI+0x30]
      REG_EQUIV [r124:DI+0x30]
deleting insn with uid = 34.
Changing pseudo 137 in operand 1 of insn 35 on equiv [r124:DI+0x30]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
	 Choosing alt 3 in insn 35:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=194, assigning class GENERAL_REGS to r194
   35: {r96:SI=r194:SI+0x200;clobber flags:CC;}
      REG_DEAD r137:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r124:DI+0x30]+0x200
    Inserting insn reload before:
  239: r194:SI=[r124:DI+0x30]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 40:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) l  (2) M {*ashlsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =rm  (1) 0  (2) re {*subdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) rm  (1) re {*cmpdi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 55:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Removing equiv init insn 61 (freq=910)
   61: r144:SI=[r124:DI+0x30]
      REG_EQUIV [r124:DI+0x30]
deleting insn with uid = 61.
Changing pseudo 144 in operand 1 of insn 62 on equiv [r124:DI+0x30]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
	 Choosing alt 3 in insn 62:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=195, assigning class GENERAL_REGS to r195
   62: {r102:SI=r195:SI+0x200;clobber flags:CC;}
      REG_DEAD r144:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r124:DI+0x30]+0x200
    Inserting insn reload before:
  240: r195:SI=[r124:DI+0x30]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 67:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=4: Bad operand -- refuse
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) Z {*anddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) r {*cmpdi_ccno_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=196 from oldreg=107, assigning class GENERAL_REGS to r196
   84: {r196:DI=r196:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  241: r196:DI=r126:DI
    Inserting insn reload after:
  242: r107:DI=r196:DI

            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) rm  (1) re {*cmpsi_1}
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Small class reload: reject+=3
          alt=0,overall=610,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=0,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=2,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 233:  (0) r  (1) Z {*testdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) m  (1) re {*movsi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) r {*cmpsi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 112:  (0) m  (1) qn {*movqi_internal}
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Small class reload: reject+=3
          alt=0,overall=610,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=0,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=2,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 232:  (0) r  (1) Z {*testdi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rmWz {*zero_extendsidi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 122:  (0) r  (1) rm {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 129:  (0) m  (1) re {*movdi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rmWz {*zero_extendsidi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 137:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 138:  (0) r  (1) r  (2) le {*adddi_1}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=4: Bad operand -- refuse
	 Choosing alt 1 in insn 139:  (0) rm  (1) 0  (2) re {*anddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =rm  (1) 0  (2) re {*subdi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 141:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=197 from oldreg=149, assigning class GENERAL_REGS to r197
  141: {r197:DI=r197:DI-r148:DI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  243: r197:DI=r122:DI
    Inserting insn reload after:
  244: r149:DI=r197:DI

            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 142
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 143:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 146:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rmWz {*zero_extendsidi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 151:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 152:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) Ts {*leasi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) m  (1) re {*movsi_internal}
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Small class reload: reject+=3
          alt=0,overall=610,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=0,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=2,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 231:  (0) r  (1) Z {*testdi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 167:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 168
	 Choosing alt 0 in insn 168:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 171:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 27
   Insn 183: point = 0
   Insn 180: point = 0
   Insn 182: point = 1
   Insn 181: point = 2
  BB 25
   Insn 229: point = 2
   Insn 171: point = 2
   Insn 168: point = 3
   Insn 167: point = 5
  BB 26
   Insn 176: point = 8
  BB 24
   Insn 165: point = 10
   Insn 231: point = 10
   Insn 162: point = 11
   Insn 161: point = 12
  BB 20
   Insn 227: point = 15
   Insn 123: point = 15
   Insn 122: point = 16
   Insn 116: point = 17
  BB 23
   Insn 154: point = 19
   Insn 153: point = 19
   Insn 152: point = 19
   Insn 151: point = 19
   Insn 150: point = 20
   Insn 149: point = 21
  BB 22
   Insn 147: point = 23
   Insn 146: point = 24
  BB 21
   Insn 145: point = 27
   Insn 144: point = 27
   Insn 143: point = 27
   Insn 142: point = 27
   Insn 244: point = 29
	Hard reg 40 is preferable by r197 with profit 13
   Insn 141: point = 31
   Insn 243: point = 31
   Insn 140: point = 32
   Insn 139: point = 34
   Insn 138: point = 34
   Insn 137: point = 35
   Insn 136: point = 36
   Insn 130: point = 37
   Insn 129: point = 38
   Insn 128: point = 39
  BB 17
   Insn 225: point = 41
   Insn 105: point = 41
   Insn 104: point = 42
   Insn 98: point = 43
   Insn 97: point = 44
   Insn 96: point = 45
  BB 19
   Insn 115: point = 47
   Insn 232: point = 47
   Insn 112: point = 47
   Insn 111: point = 48
  BB 18
   Insn 110: point = 50
   Insn 109: point = 50
  BB 16
   Insn 95: point = 51
   Insn 233: point = 51
  BB 15
   Insn 92: point = 52
   Insn 91: point = 52
   Insn 87: point = 52
   Insn 85: point = 53
   Insn 242: point = 54
	Hard reg 1 is preferable by r196 with profit 26
   Insn 84: point = 56
   Insn 241: point = 56
  BB 14
   Insn 82: point = 58
   Insn 81: point = 58
  BB 12
   Insn 223: point = 59
   Insn 78: point = 59
  BB 11
   Insn 76: point = 60
   Insn 75: point = 60
   Insn 73: point = 60
   Insn 72: point = 60
   Insn 71: point = 60
   Insn 70: point = 60
  BB 10
   Insn 67: point = 61
  BB 9
   Insn 65: point = 62
   Insn 64: point = 62
   Insn 63: point = 63
   Insn 62: point = 63
   Insn 240: point = 65
  BB 8
   Insn 59: point = 67
   Insn 58: point = 69
   Insn 57: point = 71
   Insn 56: point = 73
   Insn 55: point = 75
  BB 13
   Insn 7: point = 77
  BB 7
   Insn 53: point = 80
   Insn 52: point = 80
  BB 6
   Insn 6: point = 81
   Insn 49: point = 82
   Insn 48: point = 83
   Insn 47: point = 85
   Insn 46: point = 87
   Insn 45: point = 88
   Insn 44: point = 88
   Insn 43: point = 88
  BB 5
   Insn 40: point = 90
  BB 4
   Insn 38: point = 91
   Insn 37: point = 91
   Insn 36: point = 92
   Insn 35: point = 92
   Insn 239: point = 94
   Insn 31: point = 95
   Insn 30: point = 95
   Insn 29: point = 96
   Insn 28: point = 96
   Insn 24: point = 96
   Insn 23: point = 98
   Insn 22: point = 100
  BB 3
   Insn 20: point = 102
   Insn 19: point = 102
   Insn 238: point = 103
	Hard reg 0 is preferable by r193 with profit 45
   Insn 18: point = 105
   Insn 237: point = 105
   Insn 17: point = 106
   Insn 16: point = 107
   Insn 15: point = 109
  BB 2
   Insn 13: point = 111
   Insn 12: point = 111
   Insn 236: point = 111
	Hard reg 41 is preferable by r192 with profit 90
   Insn 11: point = 113
   Insn 235: point = 113
   Insn 4: point = 114
   Insn 3: point = 115
   Insn 2: point = 116
 r88: [99..111] [13..81]
 r89: [86..107]
 r91: [87..106]
 r92: [88..100]
 r96: [91..92]
 r102: [62..63]
 r107: [10..54] [4..7]
 r109: [10..53] [2..7]
 r119: [2..5]
 r122: [77..77] [10..67] [6..7]
 r123: [0..1]
 r124: [4..116]
 r125: [78..115] [60..76]
 r126: [10..114]
 r128: [108..109]
 r129: [102..103]
 r130: [97..98]
 r131: [95..96]
 r138: [84..85]
 r139: [82..83]
 r140: [74..75]
 r141: [72..73]
 r142: [70..71]
 r143: [68..69]
 r146: [33..52] [15..18]
 r147: [25..27]
 r148: [28..32]
 r149: [19..29]
 r151: [44..45]
 r152: [41..43]
 r158: [41..42]
 r159: [47..48]
 r162: [15..17]
 r167: [15..16]
 r168: [38..39]
 r169: [35..37]
 r175: [35..36]
 r176: [19..34]
 r177: [19..23]
 r178: [19..24]
 r179: [19..21]
 r180: [19..20]
 r183: [11..12]
 r185: [2..3]
 r192: [112..113]
 r193: [104..105]
 r194: [93..94]
 r195: [64..65]
 r196: [55..56]
 r197: [30..31]
Compressing live ranges: from 117 to 71 - 60%
Ranges after the compression:
 r88: [61..68] [10..48]
 r89: [53..66]
 r91: [53..66]
 r92: [53..62]
 r96: [53..54]
 r102: [34..35]
 r107: [4..31]
 r109: [2..31]
 r119: [2..5]
 r122: [46..46] [6..37]
 r123: [0..1]
 r124: [4..70]
 r125: [47..70] [34..45]
 r126: [8..70]
 r128: [67..68]
 r129: [63..64]
 r130: [59..60]
 r131: [57..58]
 r138: [51..52]
 r139: [49..50]
 r140: [44..45]
 r141: [42..43]
 r142: [40..41]
 r143: [38..39]
 r146: [20..31] [10..11]
 r147: [14..15]
 r148: [16..19]
 r149: [12..17]
 r151: [28..29]
 r152: [26..27]
 r158: [26..27]
 r159: [30..31]
 r162: [10..11]
 r167: [10..11]
 r168: [24..25]
 r169: [22..23]
 r175: [22..23]
 r176: [12..21]
 r177: [12..13]
 r178: [12..13]
 r179: [12..13]
 r180: [12..13]
 r183: [8..9]
 r185: [2..3]
 r192: [69..70]
 r193: [65..66]
 r194: [55..56]
 r195: [36..37]
 r196: [32..33]
 r197: [18..19]

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7 8
EBB 9 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15 16
EBB 17
EBB 18 19
EBB 20
EBB 21 22
EBB 23
EBB 24 25
EBB 26
EBB 27

********** Pseudo live ranges #2: **********

  BB 27
   Insn 183: point = 0
   Insn 180: point = 0
   Insn 182: point = 1
   Insn 181: point = 2
  BB 25
   Insn 229: point = 2
   Insn 171: point = 2
   Insn 168: point = 3
   Insn 167: point = 5
  BB 26
   Insn 176: point = 8
  BB 24
   Insn 165: point = 10
   Insn 231: point = 10
   Insn 162: point = 11
   Insn 161: point = 12
  BB 20
   Insn 227: point = 15
   Insn 123: point = 15
   Insn 122: point = 16
   Insn 116: point = 17
  BB 23
   Insn 154: point = 19
   Insn 153: point = 19
   Insn 152: point = 19
   Insn 151: point = 19
   Insn 150: point = 20
   Insn 149: point = 21
  BB 22
   Insn 147: point = 23
   Insn 146: point = 24
  BB 21
   Insn 145: point = 27
   Insn 144: point = 27
   Insn 143: point = 27
   Insn 142: point = 27
   Insn 244: point = 29
	Hard reg 40 is preferable by r197 with profit 13
   Insn 141: point = 31
   Insn 243: point = 31
   Insn 140: point = 32
   Insn 139: point = 34
   Insn 138: point = 34
   Insn 137: point = 35
   Insn 136: point = 36
   Insn 130: point = 37
   Insn 129: point = 38
   Insn 128: point = 39
  BB 17
   Insn 225: point = 41
   Insn 105: point = 41
   Insn 104: point = 42
   Insn 98: point = 43
   Insn 97: point = 44
   Insn 96: point = 45
  BB 19
   Insn 115: point = 47
   Insn 232: point = 47
   Insn 112: point = 47
   Insn 111: point = 48
  BB 18
   Insn 110: point = 50
   Insn 109: point = 50
  BB 16
   Insn 95: point = 51
   Insn 233: point = 51
  BB 15
   Insn 92: point = 52
   Insn 91: point = 52
   Insn 87: point = 52
   Insn 85: point = 53
   Insn 242: point = 54
	Hard reg 1 is preferable by r196 with profit 26
   Insn 84: point = 56
   Insn 241: point = 56
  BB 14
   Insn 82: point = 58
   Insn 81: point = 58
  BB 12
   Insn 223: point = 59
   Insn 78: point = 59
  BB 11
   Insn 76: point = 60
   Insn 75: point = 60
   Insn 73: point = 60
   Insn 72: point = 60
   Insn 71: point = 60
   Insn 70: point = 60
  BB 10
   Insn 67: point = 61
  BB 9
   Insn 65: point = 62
   Insn 64: point = 62
   Insn 63: point = 63
   Insn 62: point = 63
   Insn 240: point = 65
  BB 8
   Insn 59: point = 67
   Insn 58: point = 69
   Insn 57: point = 71
   Insn 56: point = 73
   Insn 55: point = 75
  BB 13
   Insn 7: point = 77
  BB 7
   Insn 53: point = 80
   Insn 52: point = 80
  BB 6
   Insn 6: point = 81
   Insn 49: point = 82
   Insn 48: point = 83
   Insn 47: point = 85
   Insn 46: point = 87
   Insn 45: point = 88
   Insn 44: point = 88
   Insn 43: point = 88
  BB 5
   Insn 40: point = 90
  BB 4
   Insn 38: point = 91
   Insn 37: point = 91
   Insn 36: point = 92
   Insn 35: point = 92
   Insn 239: point = 94
   Insn 31: point = 95
   Insn 30: point = 95
   Insn 29: point = 96
   Insn 28: point = 96
   Insn 24: point = 96
   Insn 23: point = 98
   Insn 22: point = 100
  BB 3
   Insn 20: point = 102
   Insn 19: point = 102
   Insn 238: point = 103
	Hard reg 0 is preferable by r193 with profit 45
   Insn 18: point = 105
   Insn 237: point = 105
   Insn 17: point = 106
   Insn 16: point = 107
   Insn 15: point = 109
  BB 2
   Insn 13: point = 111
   Insn 12: point = 111
   Insn 236: point = 111
	Hard reg 41 is preferable by r192 with profit 90
   Insn 11: point = 113
   Insn 235: point = 113
   Insn 4: point = 114
   Insn 3: point = 115
   Insn 2: point = 116
 r88: [99..111] [13..81]
 r89: [86..107]
 r91: [87..106]
 r92: [88..100]
 r96: [91..92]
 r102: [62..63]
 r107: [10..54] [4..7]
 r109: [10..53] [2..7]
 r119: [2..5]
 r122: [77..77] [10..67] [6..7]
 r123: [0..1]
 r124: [4..116]
 r125: [78..115] [60..76]
 r126: [10..114]
 r128: [108..109]
 r129: [102..103]
 r130: [97..98]
 r131: [95..96]
 r138: [84..85]
 r139: [82..83]
 r140: [74..75]
 r141: [72..73]
 r142: [70..71]
 r143: [68..69]
 r146: [33..52] [15..18]
 r147: [25..27]
 r148: [28..32]
 r149: [19..29]
 r151: [44..45]
 r152: [41..43]
 r158: [41..42]
 r159: [47..48]
 r162: [15..17]
 r167: [15..16]
 r168: [38..39]
 r169: [35..37]
 r175: [35..36]
 r176: [19..34]
 r177: [19..23]
 r178: [19..24]
 r179: [19..21]
 r180: [19..20]
 r183: [11..12]
 r185: [2..3]
 r192: [112..113]
 r193: [104..105]
 r194: [93..94]
 r195: [64..65]
 r196: [55..56]
 r197: [30..31]
Compressing live ranges: from 117 to 71 - 60%
Ranges after the compression:
 r88: [61..68] [10..48]
 r89: [53..66]
 r91: [53..66]
 r92: [53..62]
 r96: [53..54]
 r102: [34..35]
 r107: [4..31]
 r109: [2..31]
 r119: [2..5]
 r122: [46..46] [6..37]
 r123: [0..1]
 r124: [4..70]
 r125: [47..70] [34..45]
 r126: [8..70]
 r128: [67..68]
 r129: [63..64]
 r130: [59..60]
 r131: [57..58]
 r138: [51..52]
 r139: [49..50]
 r140: [44..45]
 r141: [42..43]
 r142: [40..41]
 r143: [38..39]
 r146: [20..31] [10..11]
 r147: [14..15]
 r148: [16..19]
 r149: [12..17]
 r151: [28..29]
 r152: [26..27]
 r158: [26..27]
 r159: [30..31]
 r162: [10..11]
 r167: [10..11]
 r168: [24..25]
 r169: [22..23]
 r175: [22..23]
 r176: [12..21]
 r177: [12..13]
 r178: [12..13]
 r179: [12..13]
 r180: [12..13]
 r183: [8..9]
 r185: [2..3]
 r192: [69..70]
 r193: [65..66]
 r194: [55..56]
 r195: [36..37]
 r196: [32..33]
 r197: [18..19]

********** Assignment #1: **********

	 Assigning to 195 (cl=GENERAL_REGS, orig=195, freq=1820, tfirst=195, tfreq=1820)...
	   Assign 0 to reload r195 (freq=1820)
	 Assigning to 192 (cl=GENERAL_REGS, orig=88, freq=270, tfirst=192, tfreq=270)...
	   Assign 41 to reload r192 (freq=270)
	 Assigning to 193 (cl=GENERAL_REGS, orig=129, freq=135, tfirst=193, tfreq=135)...
	   Assign 0 to reload r193 (freq=135)
	 Assigning to 196 (cl=GENERAL_REGS, orig=107, freq=78, tfirst=196, tfreq=78)...
	   Assign 1 to reload r196 (freq=78)
	 Assigning to 197 (cl=GENERAL_REGS, orig=149, freq=39, tfirst=197, tfreq=39)...
	   Assign 40 to reload r197 (freq=39)
	 Assigning to 194 (cl=GENERAL_REGS, orig=194, freq=26, tfirst=194, tfreq=26)...
	   Assign 0 to reload r194 (freq=26)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=96)
Can eliminate 16 to 6 (offset=64, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=32)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 161
changing reg in insn 85
changing reg in insn 23
changing reg in insn 16
changing reg in insn 12
changing reg in insn 16
changing reg in insn 16
changing reg in insn 47
changing reg in insn 17
changing reg in insn 17
changing reg in insn 28
changing reg in insn 46
changing reg in insn 19
changing reg in insn 22
changing reg in insn 43
changing reg in insn 35
changing reg in insn 37
changing reg in insn 36
changing reg in insn 62
changing reg in insn 64
changing reg in insn 63
changing reg in insn 233
changing reg in insn 232
changing reg in insn 167
changing reg in insn 85
changing reg in insn 171
changing reg in insn 87
changing reg in insn 167
changing reg in insn 171
changing reg in insn 7
changing reg in insn 59
changing reg in insn 136
changing reg in insn 122
changing reg in insn 104
changing reg in insn 128
changing reg in insn 111
changing reg in insn 96
changing reg in insn 167
changing reg in insn 75
changing reg in insn 136
changing reg in insn 128
changing reg in insn 122
changing reg in insn 111
changing reg in insn 104
changing reg in insn 96
changing reg in insn 182
changing reg in insn 180
changing reg in insn 2
changing reg in insn 87
changing reg in insn 176
changing reg in insn 162
changing reg in insn 71
changing reg in insn 67
changing reg in insn 67
changing reg in insn 63
changing reg in insn 44
changing reg in insn 40
changing reg in insn 40
changing reg in insn 36
changing reg in insn 22
changing reg in insn 161
changing reg in insn 62
changing reg in insn 35
changing reg in insn 11
changing reg in insn 73
changing reg in insn 46
changing reg in insn 3
changing reg in insn 29
changing reg in insn 7
changing reg in insn 75
changing reg in insn 73
changing reg in insn 70
changing reg in insn 46
changing reg in insn 78
changing reg in insn 49
changing reg in insn 4
changing reg in insn 231
changing reg in insn 81
changing reg in insn 78
changing reg in insn 55
changing reg in insn 52
changing reg in insn 49
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 30
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 87
changing reg in insn 137
changing reg in insn 123
changing reg in insn 105
changing reg in insn 140
changing reg in insn 138
changing reg in insn 129
changing reg in insn 112
changing reg in insn 97
changing reg in insn 142
changing reg in insn 143
changing reg in insn 146
changing reg in insn 144
changing reg in insn 143
changing reg in insn 140
changing reg in insn 141
changing reg in insn 150
changing reg in insn 150
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 105
changing reg in insn 104
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 111
changing reg in insn 112
changing reg in insn 116
changing reg in insn 123
changing reg in insn 122
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 137
changing reg in insn 136
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 151
changing reg in insn 139
changing reg in insn 152
changing reg in insn 147
changing reg in insn 153
changing reg in insn 152
changing reg in insn 149
changing reg in insn 146
changing reg in insn 153
changing reg in insn 149
changing reg in insn 151
changing reg in insn 150
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 161
changing reg in insn 162
changing reg in insn 168
changing reg in insn 171
deleting insn with uid = 236.
deleting insn with uid = 30.
deleting insn with uid = 242.
deleting insn with uid = 244.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 72.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 28 n_edges 41 count 30 (  1.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 28 n_edges 41 count 30 (  1.1)


Update32.part.0

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14]
;;  ref usage 	r0={22d,30u} r1={10d,16u} r2={9d,7u} r3={1d,16u,4e} r4={4d,8u} r5={8d,16u,6e} r6={3d,9u} r7={1d,30u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={3e} r17={46d,14u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={3d} r26={3d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={13d,14u,3e} r38={9d,6u} r39={4d,2u,1e} r40={5d,2u,1e} r41={3d,6u,1e} r42={1d,3u} r43={1d,2u} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 484{284d,181u,19e} in 118{115 regular + 3 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 3 [bx] 4 [si] 6 [bp] 17 [flags] 41 [r12]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 3 [bx] 4 [si] 6 [bp] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 3 bx [orig:124 state ] [124])
        (reg:DI 2 cx [ state ])) blake_ref.c:289 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 4 si [orig:125 data ] [125])
        (reg:DI 1 dx [ data ])) blake_ref.c:289 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 data+0 S8 A64])
        (nil)))
(insn 4 3 5 2 (set (reg/v:DI 6 bp [orig:126 databitlen ] [126])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:289 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
        (nil)))
(note 5 4 10 2 NOTE_INSN_FUNCTION_BEG)
(note 10 5 235 2 NOTE_INSN_DELETED)
(insn 235 10 11 2 (set (reg/v:SI 41 r12 [orig:88 left ] [88])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])) blake_ref.c:298 90 {*movsi_internal}
     (nil))
(insn 11 235 12 2 (parallel [
            (set (reg/v:SI 41 r12 [orig:88 left ] [88])
                (ashiftrt:SI (reg/v:SI 41 r12 [orig:88 left ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:298 545 {*ashrsi3_1}
     (expr_list:REG_EQUAL (ashiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                    (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 41 r12 [orig:88 left ] [88])
            (const_int 0 [0]))) blake_ref.c:302 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 50)
            (pc))) blake_ref.c:302 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 50)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 5 [di] 17 [flags] 42 [r13]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 42 [r13]
;; live  kill	 17 [flags]
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 5 di [128])
        (const_int 64 [0x40])) blake_ref.c:299 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 64 [0x40])
        (nil)))
(insn 16 15 17 3 (parallel [
            (set (reg/v:SI 5 di [orig:89 fill ] [89])
                (minus:SI (reg:SI 5 di [128])
                    (reg/v:SI 41 r12 [orig:88 left ] [88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:299 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 64 [0x40])
            (reg/v:SI 41 r12 [orig:88 left ] [88]))
        (nil)))
(insn 17 16 237 3 (set (reg:DI 42 r13 [orig:91 D.5880 ] [91])
        (sign_extend:DI (reg/v:SI 5 di [orig:89 fill ] [89]))) blake_ref.c:302 142 {*extendsidi2_rex64}
     (nil))
(insn 237 17 18 3 (set (reg:DI 0 ax [orig:129 D.5880 ] [129])
        (reg/v:DI 6 bp [orig:126 databitlen ] [126])) blake_ref.c:302 89 {*movdi_internal}
     (nil))
(insn 18 237 238 3 (parallel [
            (set (reg:DI 0 ax [orig:129 D.5880 ] [129])
                (lshiftrt:DI (reg:DI 0 ax [orig:129 D.5880 ] [129])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:302 546 {*lshrdi3_1}
     (nil))
(insn 238 18 19 3 (set (reg:DI 0 ax [orig:129 D.5880 ] [129])
        (reg:DI 0 ax [orig:129 D.5880 ] [129])) blake_ref.c:302 89 {*movdi_internal}
     (nil))
(insn 19 238 20 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:129 D.5880 ] [129])
            (reg:DI 42 r13 [orig:91 D.5880 ] [91]))) blake_ref.c:302 8 {*cmpdi_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) blake_ref.c:302 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 50)
;;  succ:       4 [29.0%]  (FALLTHRU)
;;              7 [71.0%] 
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 4, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [29.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 43 [r14]
;; live  kill	 17 [flags]
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (parallel [
            (set (reg/f:DI 43 r14 [orig:92 D.5881 ] [92])
                (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:303 218 {*adddi_1}
     (nil))
(insn 23 22 24 4 (set (reg:DI 2 cx [orig:130 D.5882 ] [130])
        (sign_extend:DI (reg/v:SI 41 r12 [orig:88 left ] [88]))) blake_ref.c:303 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 28 4 (parallel [
            (set (reg:DI 2 cx [orig:131 D.5883 ] [131])
                (plus:DI (reg:DI 2 cx [orig:130 D.5882 ] [130])
                    (reg/f:DI 43 r14 [orig:92 D.5881 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:303 218 {*adddi_1}
     (nil))
(insn 28 24 29 4 (set (reg:DI 37 r8)
        (reg:DI 42 r13 [orig:91 D.5880 ] [91])) blake_ref.c:303 89 {*movdi_internal}
     (nil))
(insn 29 28 31 4 (set (reg:DI 1 dx)
        (reg/v/f:DI 4 si [orig:125 data ] [125])) blake_ref.c:303 89 {*movdi_internal}
     (nil))
(call_insn 31 29 34 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>) [0 memcpy S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:303 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 2 cx))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 37 r8))
                    (nil))))))
(note 34 31 239 4 NOTE_INSN_DELETED)
(insn 239 34 35 4 (set (reg:SI 0 ax [194])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])) blake_ref.c:306 90 {*movsi_internal}
     (nil))
(insn 35 239 36 4 (parallel [
            (set (reg:SI 0 ax [orig:96 D.5884 ] [96])
                (plus:SI (reg:SI 0 ax [194])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:306 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                    (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 36 35 37 4 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
        (reg:SI 0 ax [orig:96 D.5884 ] [96])) blake_ref.c:306 90 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:96 D.5884 ] [96])
            (const_int 0 [0]))) blake_ref.c:307 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 38 37 39 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) blake_ref.c:307 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 41)
;;  succ:       5 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 5, loop depth 0, count 0, freq 65, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [50.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	
;; live  kill	 17 [flags]
(note 39 38 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 5 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                        (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                            (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:308 217 {*addsi_1}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 6, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [50.0%] 
;;              5 [100.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 6 [bp] 41 [r12]
;; live  kill	 17 [flags]
(code_label 41 40 42 6 16 "" [1 uses])
(note 42 41 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 6 (set (reg:DI 1 dx)
        (reg/f:DI 43 r14 [orig:92 D.5881 ] [92])) blake_ref.c:310 89 {*movdi_internal}
     (nil))
(insn 44 43 45 6 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:124 state ] [124])) blake_ref.c:310 89 {*movdi_internal}
     (nil))
(call_insn 45 44 46 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>) [0 compress32 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:310 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 46 45 47 6 (parallel [
            (set (reg/v/f:DI 4 si [orig:125 data ] [125])
                (plus:DI (reg/v/f:DI 4 si [orig:125 data ] [125])
                    (reg:DI 42 r13 [orig:91 D.5880 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:311 218 {*adddi_1}
     (nil))
(insn 47 46 48 6 (parallel [
            (set (reg:SI 0 ax [orig:138 D.5879 ] [138])
                (ashift:SI (reg/v:SI 5 di [orig:89 fill ] [89])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:312 511 {*ashlsi3_1}
     (nil))
(insn 48 47 49 6 (set (reg:DI 0 ax [orig:139 D.5880 ] [139])
        (sign_extend:DI (reg:SI 0 ax [orig:138 D.5879 ] [138]))) blake_ref.c:312 142 {*extendsidi2_rex64}
     (nil))
(insn 49 48 6 6 (parallel [
            (set (reg/v:DI 6 bp [orig:126 databitlen ] [126])
                (minus:DI (reg/v:DI 6 bp [orig:126 databitlen ] [126])
                    (reg:DI 0 ax [orig:139 D.5880 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:312 261 {*subdi_1}
     (nil))
(insn 6 49 50 6 (set (reg/v:SI 41 r12 [orig:88 left ] [88])
        (const_int 0 [0])) blake_ref.c:314 90 {*movsi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]

;; basic block 7, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;;              3 [71.0%] 
;;              6 [100.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 50 6 51 7 15 "" [2 uses])
(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 7 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 6 bp [orig:126 databitlen ] [126])
            (const_int 511 [0x1ff]))) blake_ref.c:318 8 {*cmpdi_1}
     (nil))
(jump_insn 53 52 54 7 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 188)
            (pc))) blake_ref.c:318 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 188)
;;  succ:       8 [91.0%]  (FALLTHRU)
;;              13 [9.0%] 
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]

;; basic block 8, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [91.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 5 [di]
;; live  kill	 17 [flags]
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 8 (parallel [
            (set (reg:DI 5 di [orig:140 D.5880 ] [140])
                (plus:DI (reg/v:DI 6 bp [orig:126 databitlen ] [126])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 56 55 57 8 (parallel [
            (set (reg:DI 5 di [orig:141 D.5880 ] [141])
                (lshiftrt:DI (reg:DI 5 di [orig:140 D.5880 ] [140])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) 546 {*lshrdi3_1}
     (nil))
(insn 57 56 58 8 (parallel [
            (set (reg:DI 5 di [orig:142 D.5882 ] [142])
                (plus:DI (reg:DI 5 di [orig:141 D.5880 ] [141])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 58 57 59 8 (parallel [
            (set (reg:DI 5 di [orig:143 D.5882 ] [143])
                (ashift:DI (reg:DI 5 di [orig:142 D.5882 ] [142])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (nil))
(insn 59 58 74 8 (parallel [
            (set (reg/v/f:DI 5 di [orig:122 data ] [122])
                (plus:DI (reg:DI 5 di [orig:143 D.5882 ] [143])
                    (reg/v/f:DI 4 si [orig:125 data ] [125])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 9, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              11 [91.0%]  (DFS_BACK)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 74 59 60 9 19 "" [1 uses])
(note 60 74 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(note 61 60 240 9 NOTE_INSN_DELETED)
(insn 240 61 62 9 (set (reg:SI 0 ax [195])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])) blake_ref.c:321 90 {*movsi_internal}
     (nil))
(insn 62 240 63 9 (parallel [
            (set (reg:SI 0 ax [orig:102 D.5884 ] [102])
                (plus:SI (reg:SI 0 ax [195])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:321 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                    (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 63 62 64 9 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
        (reg:SI 0 ax [orig:102 D.5884 ] [102])) blake_ref.c:321 90 {*movsi_internal}
     (nil))
(insn 64 63 65 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:102 D.5884 ] [102])
            (const_int 0 [0]))) blake_ref.c:323 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 65 64 66 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) blake_ref.c:323 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 68)
;;  succ:       10 [50.0%]  (FALLTHRU)
;;              11 [50.0%] 
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 10, loop depth 0, count 0, freq 4550, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [50.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	 17 [flags]
(note 66 65 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 10 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                        (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                            (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:324 217 {*addsi_1}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 11, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [50.0%] 
;;              10 [100.0%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(code_label 68 67 69 11 18 "" [1 uses])
(note 69 68 70 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 11 (set (reg:DI 1 dx)
        (reg/v/f:DI 4 si [orig:125 data ] [125])) blake_ref.c:325 89 {*movdi_internal}
     (nil))
(insn 71 70 72 11 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:124 state ] [124])) blake_ref.c:325 89 {*movdi_internal}
     (nil))
(call_insn 72 71 73 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>) [0 compress32 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:325 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 73 72 75 11 (parallel [
            (set (reg/v/f:DI 4 si [orig:125 data ] [125])
                (plus:DI (reg/v/f:DI 4 si [orig:125 data ] [125])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:326 218 {*adddi_1}
     (nil))
(insn 75 73 76 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 4 si [orig:125 data ] [125])
            (reg/v/f:DI 5 di [orig:122 data ] [122]))) blake_ref.c:318 8 {*cmpdi_1}
     (nil))
(jump_insn 76 75 77 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 74)
            (pc))) blake_ref.c:318 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 74)
;;  succ:       9 [91.0%]  (DFS_BACK)
;;              12 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 6 [bp]
;; live  kill	 17 [flags]
(note 77 76 78 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 223 12 (parallel [
            (set (reg/v:DI 6 bp [orig:126 databitlen ] [126])
                (and:DI (reg/v:DI 6 bp [orig:126 databitlen ] [126])
                    (const_int 511 [0x1ff])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (nil))
(jump_insn 223 78 224 12 (set (pc)
        (label_ref 79)) 654 {jump}
     (nil)
 -> 79)
;;  succ:       14 [100.0%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

(barrier 224 223 188)
;; basic block 13, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [9.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 188 224 187 13 28 "" [1 uses])
(note 187 188 7 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 7 187 79 13 (set (reg/v/f:DI 5 di [orig:122 data ] [122])
        (reg/v/f:DI 4 si [orig:125 data ] [125])) blake_ref.c:318 89 {*movdi_internal}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 14, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [100.0%]  (FALLTHRU)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 79 7 80 14 17 "" [1 uses])
(note 80 79 81 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 6 bp [orig:126 databitlen ] [126])
            (const_int 0 [0]))) blake_ref.c:330 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 82 81 83 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 174)
            (pc))) blake_ref.c:330 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 174)
;;  succ:       15 [29.0%]  (FALLTHRU)
;;              26 [71.0%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 15, loop depth 0, count 0, freq 261, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [29.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(note 83 82 241 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 241 83 84 15 (set (reg:DI 1 dx [orig:107 D.5880 ] [107])
        (reg/v:DI 6 bp [orig:126 databitlen ] [126])) blake_ref.c:332 89 {*movdi_internal}
     (nil))
(insn 84 241 85 15 (parallel [
            (set (reg:DI 1 dx [orig:107 D.5880 ] [107])
                (lshiftrt:DI (reg:DI 1 dx [orig:107 D.5880 ] [107])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:332 546 {*lshrdi3_1}
     (nil))
(insn 85 84 86 15 (set (reg:DI 2 cx [orig:109 D.5882 ] [109])
        (sign_extend:DI (reg/v:SI 41 r12 [orig:88 left ] [88]))) blake_ref.c:331 142 {*extendsidi2_rex64}
     (nil))
(note 86 85 87 15 NOTE_INSN_DELETED)
(insn 87 86 91 15 (set (reg:DI 0 ax [orig:146 D.5883 ] [146])
        (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                (reg:DI 2 cx [orig:109 D.5882 ] [109]))
            (const_int 56 [0x38]))) blake_ref.c:331 214 {*leadi}
     (nil))
(insn 91 87 92 15 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:107 D.5880 ] [107])
            (const_int 8 [0x8]))) blake_ref.c:331 7 {*cmpsi_1}
     (nil))
(jump_insn 92 91 189 15 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 127)
;;  succ:       21 [50.0%] 
;;              16 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 16, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [50.0%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(note 189 92 93 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(note 93 189 233 16 NOTE_INSN_DELETED)
(insn 233 93 95 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:DI (reg:DI 1 dx [orig:107 D.5880 ] [107])
                (const_int 4 [0x4]))
            (const_int 0 [0]))) blake_ref.c:331 358 {*testdi_1}
     (nil))
(jump_insn 95 233 190 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 9000 (nil))
 -> 108)
;;  succ:       18 [90.0%] 
;;              17 [10.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 17, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [10.0%]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 37 [r8] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 37 [r8] 38 [r9]
;; live  kill	
(note 190 95 96 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 96 190 97 17 (set (reg:SI 37 r8 [151])
        (mem:SI (reg/v/f:DI 5 di [orig:122 data ] [122]) [0  S4 A8])) blake_ref.c:331 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:DI 5 di [orig:122 data ] [122]) [0  S4 A8])
        (nil)))
(insn 97 96 98 17 (set (mem:SI (reg:DI 0 ax [orig:146 D.5883 ] [146]) [0  S4 A8])
        (reg:SI 37 r8 [151])) blake_ref.c:331 90 {*movsi_internal}
     (nil))
(insn 98 97 99 17 (set (reg:DI 37 r8 [orig:152 D.5880 ] [152])
        (zero_extend:DI (reg:SI 1 dx [orig:107 D.5880 ] [107]))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(note 99 98 100 17 NOTE_INSN_DELETED)
(note 100 99 102 17 NOTE_INSN_DELETED)
(note 102 100 103 17 NOTE_INSN_DELETED)
(note 103 102 104 17 NOTE_INSN_DELETED)
(insn 104 103 105 17 (set (reg:SI 38 r9 [158])
        (mem:SI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                    (reg:DI 37 r8 [orig:152 D.5880 ] [152]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])) blake_ref.c:331 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                    (reg:DI 37 r8 [orig:152 D.5880 ] [152]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])
        (nil)))
(insn 105 104 225 17 (set (mem:SI (plus:DI (plus:DI (reg:DI 0 ax [orig:146 D.5883 ] [146])
                    (reg:DI 37 r8 [orig:152 D.5880 ] [152]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])
        (reg:SI 38 r9 [158])) blake_ref.c:331 90 {*movsi_internal}
     (nil))
(jump_insn 225 105 226 17 (set (pc)
        (label_ref 159)) 654 {jump}
     (nil)
 -> 159)
;;  succ:       24 [100.0%] 
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

(barrier 226 225 108)
;; basic block 18, loop depth 0, count 0, freq 118, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [90.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 108 226 191 18 23 "" [1 uses])
(note 191 108 109 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 109 191 110 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:107 D.5880 ] [107])
            (const_int 0 [0]))) blake_ref.c:331 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 110 109 192 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 159)
;;  succ:       24 [50.0%] 
;;              19 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 19, loop depth 0, count 0, freq 59, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       18 [50.0%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags] 37 [r8]
;; live  kill	
(note 192 110 111 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 111 192 112 19 (set (reg:QI 37 r8 [159])
        (mem:QI (reg/v/f:DI 5 di [orig:122 data ] [122]) [0  S1 A8])) blake_ref.c:331 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem:QI (reg/v/f:DI 5 di [orig:122 data ] [122]) [0  S1 A8])
        (nil)))
(insn 112 111 113 19 (set (mem:QI (reg:DI 0 ax [orig:146 D.5883 ] [146]) [0  S1 A8])
        (reg:QI 37 r8 [159])) blake_ref.c:331 93 {*movqi_internal}
     (nil))
(note 113 112 232 19 NOTE_INSN_DELETED)
(insn 232 113 115 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:DI (reg:DI 1 dx [orig:107 D.5880 ] [107])
                (const_int 2 [0x2]))
            (const_int 0 [0]))) blake_ref.c:331 358 {*testdi_1}
     (nil))
(jump_insn 115 232 193 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 159)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 9000 (nil))
 -> 159)
;;  succ:       24 [90.0%] 
;;              20 [10.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 20, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [10.0%]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 37 [r8] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 37 [r8] 38 [r9]
;; live  kill	
(note 193 115 116 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 116 193 118 20 (set (reg:DI 37 r8 [orig:162 D.5880 ] [162])
        (zero_extend:DI (reg:SI 1 dx [orig:107 D.5880 ] [107]))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(note 118 116 121 20 NOTE_INSN_DELETED)
(note 121 118 122 20 NOTE_INSN_DELETED)
(insn 122 121 123 20 (set (reg:HI 38 r9 [167])
        (mem:HI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                    (reg:DI 37 r8 [orig:162 D.5880 ] [162]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])) blake_ref.c:331 92 {*movhi_internal}
     (expr_list:REG_EQUIV (mem:HI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                    (reg:DI 37 r8 [orig:162 D.5880 ] [162]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (nil)))
(insn 123 122 227 20 (set (mem:HI (plus:DI (plus:DI (reg:DI 0 ax [orig:146 D.5883 ] [146])
                    (reg:DI 37 r8 [orig:162 D.5880 ] [162]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (reg:HI 38 r9 [167])) blake_ref.c:331 92 {*movhi_internal}
     (nil))
(jump_insn 227 123 228 20 (set (pc)
        (label_ref 159)) 654 {jump}
     (nil)
 -> 159)
;;  succ:       24 [100.0%] 
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

(barrier 228 227 127)
;; basic block 21, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [50.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
(code_label 127 228 195 21 21 "" [1 uses])
(note 195 127 128 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 128 195 129 21 (set (reg:DI 37 r8 [168])
        (mem:DI (reg/v/f:DI 5 di [orig:122 data ] [122]) [0  S8 A8])) blake_ref.c:331 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (reg/v/f:DI 5 di [orig:122 data ] [122]) [0  S8 A8])
        (nil)))
(insn 129 128 130 21 (set (mem:DI (reg:DI 0 ax [orig:146 D.5883 ] [146]) [0  S8 A8])
        (reg:DI 37 r8 [168])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 130 129 131 21 (set (reg:DI 37 r8 [orig:169 D.5880 ] [169])
        (zero_extend:DI (reg:SI 1 dx [orig:107 D.5880 ] [107]))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(note 131 130 132 21 NOTE_INSN_DELETED)
(note 132 131 134 21 NOTE_INSN_DELETED)
(note 134 132 135 21 NOTE_INSN_DELETED)
(note 135 134 136 21 NOTE_INSN_DELETED)
(insn 136 135 137 21 (set (reg:DI 38 r9 [175])
        (mem:DI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                    (reg:DI 37 r8 [orig:169 D.5880 ] [169]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])) blake_ref.c:331 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                    (reg:DI 37 r8 [orig:169 D.5880 ] [169]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])
        (nil)))
(insn 137 136 138 21 (set (mem:DI (plus:DI (plus:DI (reg:DI 0 ax [orig:146 D.5883 ] [146])
                    (reg:DI 37 r8 [orig:169 D.5880 ] [169]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])
        (reg:DI 38 r9 [175])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 138 137 139 21 (parallel [
            (set (reg/f:DI 37 r8 [176])
                (plus:DI (reg:DI 0 ax [orig:146 D.5883 ] [146])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 139 138 140 21 (parallel [
            (set (reg/f:DI 37 r8 [176])
                (and:DI (reg/f:DI 37 r8 [176])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 380 {*anddi_1}
     (nil))
(insn 140 139 243 21 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.5883 ] [148])
                (minus:DI (reg:DI 0 ax [orig:146 D.5883 ] [146])
                    (reg/f:DI 37 r8 [176])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 261 {*subdi_1}
     (nil))
(insn 243 140 141 21 (set (reg/f:DI 40 r11 [orig:149 data ] [149])
        (reg/v/f:DI 5 di [orig:122 data ] [122])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 141 243 142 21 (parallel [
            (set (reg/f:DI 40 r11 [orig:149 data ] [149])
                (minus:DI (reg/f:DI 40 r11 [orig:149 data ] [149])
                    (reg/f:DI 0 ax [orig:148 D.5883 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 261 {*subdi_1}
     (nil))
(insn 142 141 143 21 (parallel [
            (set (reg:SI 0 ax [orig:147 D.5880 ] [147])
                (plus:SI (reg:SI 0 ax [orig:148 D.5883 ] [148])
                    (reg:SI 1 dx [orig:107 D.5880 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 217 {*addsi_1}
     (nil))
(insn 143 142 144 21 (parallel [
            (set (reg:SI 0 ax [orig:147 D.5880 ] [147])
                (and:SI (reg:SI 0 ax [orig:147 D.5880 ] [147])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 381 {*andsi_1}
     (nil))
(insn 144 143 145 21 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:147 D.5880 ] [147])
            (const_int 8 [0x8]))) blake_ref.c:331 7 {*cmpsi_1}
     (nil))
(jump_insn 145 144 196 21 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 2000 (nil))
 -> 159)
;;  succ:       24 [20.0%] 
;;              22 [80.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]

;; basic block 22, loop depth 0, count 0, freq 105, maybe hot
;;  prev block 21, next block 23, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       21 [80.0%]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]
;; live  gen 	 0 [ax] 38 [r9]
;; live  kill	 17 [flags]
(note 196 145 146 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 146 196 147 22 (parallel [
            (set (reg:SI 0 ax [178])
                (and:SI (reg:SI 0 ax [orig:147 D.5880 ] [147])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 381 {*andsi_1}
     (nil))
(insn 147 146 148 22 (set (reg:SI 38 r9 [177])
        (const_int 0 [0])) blake_ref.c:331 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       23 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]

;; basic block 23, loop depth 0, count 0, freq 105, maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       22 [100.0%]  (FALLTHRU)
;;              23 [80.0%]  (DFS_BACK)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
;; lr  use 	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
;; lr  def 	 4 [si] 17 [flags] 38 [r9] 39 [r10]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
;; live  gen 	 4 [si] 17 [flags] 38 [r9] 39 [r10]
;; live  kill	 17 [flags]
(code_label 148 147 197 23 25 "" [1 uses])
(note 197 148 149 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 149 197 150 23 (set (reg:DI 39 r10 [179])
        (zero_extend:DI (reg:SI 38 r9 [177]))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn 150 149 151 23 (set (reg:DI 4 si [180])
        (mem:DI (plus:DI (reg/f:DI 40 r11 [orig:149 data ] [149])
                (reg:DI 39 r10 [179])) [0  S8 A8])) blake_ref.c:331 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/f:DI 40 r11 [orig:149 data ] [149])
                (reg:DI 39 r10 [179])) [0  S8 A8])
        (nil)))
(insn 151 150 152 23 (set (mem:DI (plus:DI (reg/f:DI 37 r8 [176])
                (reg:DI 39 r10 [179])) [0  S8 A64])
        (reg:DI 4 si [180])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 152 151 153 23 (parallel [
            (set (reg:SI 38 r9 [177])
                (plus:SI (reg:SI 38 r9 [177])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 217 {*addsi_1}
     (nil))
(insn 153 152 154 23 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 38 r9 [177])
            (reg:SI 0 ax [178]))) blake_ref.c:331 7 {*cmpsi_1}
     (nil))
(jump_insn 154 153 159 23 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 148)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 8000 (nil))
 -> 148)
;;  succ:       23 [80.0%]  (DFS_BACK)
;;              24 [20.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]

;; basic block 24, loop depth 0, count 0, freq 178, maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [90.0%] 
;;              18 [50.0%] 
;;              17 [100.0%] 
;;              21 [20.0%] 
;;              23 [20.0%]  (FALLTHRU,LOOP_EXIT)
;;              20 [100.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 159 154 200 24 22 "" [5 uses])
(note 200 159 160 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(note 160 200 161 24 NOTE_INSN_DELETED)
(insn 161 160 162 24 (set (reg:SI 0 ax [183])
        (plus:SI (mult:SI (reg/v:SI 41 r12 [orig:88 left ] [88])
                (const_int 8 [0x8]))
            (reg:SI 6 bp [orig:126 databitlen ] [126]))) blake_ref.c:333 213 {*leasi}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (nil)))
(insn 162 161 163 24 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (reg:SI 0 ax [183])) blake_ref.c:333 90 {*movsi_internal}
     (nil))
(note 163 162 231 24 NOTE_INSN_DELETED)
(insn 231 163 165 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:DI (reg/v:DI 6 bp [orig:126 databitlen ] [126])
                (const_int 7 [0x7]))
            (const_int 0 [0]))) blake_ref.c:335 358 {*testdi_1}
     (nil))
(jump_insn 165 231 166 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 177)
            (pc))) blake_ref.c:335 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 177)
;;  succ:       25 [50.0%]  (FALLTHRU)
;;              27 [50.0%] 
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]

;; basic block 25, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       24 [50.0%]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
(note 166 165 167 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 25 (set (reg:QI 0 ax [orig:119 D.5887 ] [119])
        (mem:QI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                (reg:DI 1 dx [orig:107 D.5880 ] [107])) [0 *_40+0 S1 A8])) blake_ref.c:336 93 {*movqi_internal}
     (nil))
(insn 168 167 169 25 (parallel [
            (set (reg:DI 1 dx [185])
                (plus:DI (reg:DI 1 dx [orig:107 D.5880 ] [107])
                    (reg/v/f:DI 3 bx [orig:124 state ] [124])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:336 218 {*adddi_1}
     (nil))
(note 169 168 171 25 NOTE_INSN_DELETED)
(insn 171 169 229 25 (set (mem/j:QI (plus:DI (plus:DI (reg:DI 2 cx [orig:109 D.5882 ] [109])
                    (reg:DI 1 dx [185]))
                (const_int 56 [0x38])) [0 state_1(D)->data32 S1 A8])
        (reg:QI 0 ax [orig:119 D.5887 ] [119])) blake_ref.c:336 93 {*movqi_internal}
     (nil))
(jump_insn 229 171 230 25 (set (pc)
        (label_ref 177)) 654 {jump}
     (nil)
 -> 177)
;;  succ:       27 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 230 229 174)
;; basic block 26, loop depth 0, count 0, freq 639, maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [71.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 174 230 175 26 20 "" [1 uses])
(note 175 174 176 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 26 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:339 90 {*movsi_internal}
     (nil))
;;  succ:       27 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 27, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 26, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       24 [50.0%] 
;;              26 [100.0%]  (FALLTHRU)
;;              25 [100.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 0 [ax]
(code_label 177 176 178 27 27 "" [2 uses])
(note 178 177 181 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 181 178 182 27 (clobber (reg/i:SI 0 ax)) blake_ref.c:343 -1
     (nil))
(insn 182 181 180 27 (clobber (reg:SI 0 ax [orig:123 <retval> ] [123])) blake_ref.c:343 -1
     (nil))
(insn 180 182 183 27 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:123 <retval> ] [123])) blake_ref.c:343 90 {*movsi_internal}
     (nil))
(insn 183 180 234 27 (use (reg/i:SI 0 ax)) blake_ref.c:343 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 234 183 0 NOTE_INSN_DELETED)

;; Function Update64.part.1 (Update64.part.1, funcdef_no=23, decl_uid=5571, cgraph_uid=1, symbol_order=32)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=64, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
      Removing equiv init insn 10 (freq=90)
   10: r123:SI=[r120:DI+0x4]
      REG_EQUIV [r120:DI+0x4]
deleting insn with uid = 10.
Changing pseudo 123 in operand 1 of insn 11 on equiv [r120:DI+0x4]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 11:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=179 from oldreg=88, assigning class GENERAL_REGS to r179
   11: {r179:SI=r179:SI>>0x3;clobber flags:CC;}
      REG_DEAD r123:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r120:DI+0x4]>>0x3
    Inserting insn reload before:
  201: r179:SI=[r120:DI+0x4]
    Inserting insn reload after:
  202: r88:SI=r179:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=180 from oldreg=125, assigning class GENERAL_REGS to r180
   18: {r180:DI=r180:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  203: r180:DI=r122:DI
    Inserting insn reload after:
  204: r125:DI=r180:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rm  (1) re {*cmpdi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 22:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 34:  (0) rm  (1) 0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) l  (2) M {*ashlsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) re {*subdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rm  (1) re {*cmpdi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 47:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 51
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 53:  (0) rm  (1) 0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=4: Bad operand -- refuse
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) Z {*anddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) r {*cmpdi_ccno_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=181 from oldreg=103, assigning class GENERAL_REGS to r181
   68: {r181:DI=r181:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  205: r181:DI=r122:DI
    Inserting insn reload after:
  206: r103:DI=r181:DI

            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rm  (1) re {*cmpsi_1}
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Small class reload: reject+=3
          alt=0,overall=610,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=0,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=2,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 199:  (0) r  (1) Z {*testdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) m  (1) re {*movsi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) r {*cmpsi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 95:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 96:  (0) m  (1) qn {*movqi_internal}
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Small class reload: reject+=3
          alt=0,overall=610,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=0,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=2,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 198:  (0) r  (1) Z {*testdi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rmWz {*zero_extendsidi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 106:  (0) r  (1) rm {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 113:  (0) m  (1) re {*movdi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rmWz {*zero_extendsidi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 121:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 122:  (0) r  (1) r  (2) le {*adddi_1}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=4: Bad operand -- refuse
	 Choosing alt 1 in insn 123:  (0) rm  (1) 0  (2) re {*anddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =rm  (1) 0  (2) re {*subdi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 125:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=182 from oldreg=143, assigning class GENERAL_REGS to r182
  125: {r182:DI=r182:DI-r142:DI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  207: r182:DI=r117:DI
    Inserting insn reload after:
  208: r143:DI=r182:DI

            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 126
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) Ts {*leasi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) m  (1) re {*movsi_internal}
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Small class reload: reject+=3
          alt=0,overall=610,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=0,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=2,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 197:  (0) r  (1) Z {*testdi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 139:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 140
	 Choosing alt 0 in insn 140:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 143:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 21
   Insn 155: point = 0
   Insn 152: point = 0
   Insn 154: point = 1
   Insn 153: point = 2
  BB 19
   Insn 195: point = 2
   Insn 143: point = 2
   Insn 140: point = 3
   Insn 139: point = 5
  BB 20
   Insn 148: point = 8
  BB 18
   Insn 137: point = 10
   Insn 197: point = 10
   Insn 134: point = 11
   Insn 133: point = 12
  BB 16
   Insn 193: point = 15
   Insn 107: point = 15
   Insn 106: point = 16
   Insn 100: point = 17
  BB 17
   Insn 130: point = 19
   Insn 129: point = 20
   Insn 128: point = 22
   Insn 126: point = 24
   Insn 208: point = 26
	Hard reg 4 is preferable by r182 with profit 13
   Insn 125: point = 28
   Insn 207: point = 28
   Insn 124: point = 29
   Insn 123: point = 31
   Insn 122: point = 31
   Insn 121: point = 32
   Insn 120: point = 33
   Insn 114: point = 34
   Insn 113: point = 35
   Insn 112: point = 36
  BB 13
   Insn 191: point = 38
   Insn 89: point = 38
   Insn 88: point = 39
   Insn 82: point = 40
   Insn 81: point = 41
   Insn 80: point = 42
  BB 15
   Insn 99: point = 44
   Insn 198: point = 44
   Insn 96: point = 44
   Insn 95: point = 45
  BB 14
   Insn 94: point = 47
   Insn 93: point = 47
  BB 12
   Insn 79: point = 48
   Insn 199: point = 48
  BB 11
   Insn 76: point = 49
   Insn 75: point = 49
   Insn 71: point = 49
   Insn 69: point = 50
   Insn 206: point = 51
	Hard reg 1 is preferable by r181 with profit 26
   Insn 68: point = 53
   Insn 205: point = 53
  BB 10
   Insn 66: point = 55
   Insn 65: point = 55
  BB 8
   Insn 189: point = 56
   Insn 62: point = 56
  BB 7
   Insn 60: point = 57
   Insn 59: point = 57
   Insn 57: point = 57
   Insn 56: point = 57
   Insn 55: point = 57
   Insn 54: point = 57
   Insn 53: point = 57
  BB 6
   Insn 51: point = 58
   Insn 50: point = 60
   Insn 49: point = 62
   Insn 48: point = 64
   Insn 47: point = 66
  BB 9
   Insn 7: point = 68
  BB 5
   Insn 45: point = 71
   Insn 44: point = 71
  BB 4
   Insn 6: point = 72
   Insn 41: point = 73
   Insn 40: point = 74
   Insn 39: point = 76
   Insn 38: point = 78
   Insn 37: point = 79
   Insn 36: point = 79
   Insn 35: point = 79
   Insn 34: point = 80
   Insn 31: point = 80
   Insn 30: point = 80
   Insn 29: point = 81
   Insn 28: point = 81
   Insn 24: point = 81
   Insn 23: point = 83
   Insn 22: point = 85
  BB 3
   Insn 20: point = 87
   Insn 19: point = 87
   Insn 204: point = 88
	Hard reg 0 is preferable by r180 with profit 45
   Insn 18: point = 90
   Insn 203: point = 90
   Insn 17: point = 91
   Insn 16: point = 92
   Insn 15: point = 94
  BB 2
   Insn 13: point = 96
   Insn 12: point = 96
   Insn 202: point = 96
	Hard reg 43 is preferable by r179 with profit 90
   Insn 11: point = 98
   Insn 201: point = 98
   Insn 4: point = 99
   Insn 3: point = 100
   Insn 2: point = 101
 r88: [84..96] [13..72]
 r89: [77..92]
 r91: [78..91]
 r92: [79..85]
 r103: [10..51] [4..7]
 r106: [10..50] [2..7]
 r116: [2..5]
 r117: [68..68] [10..58] [6..7]
 r119: [0..1]
 r120: [4..101]
 r121: [69..100] [57..67]
 r122: [10..99]
 r124: [93..94]
 r125: [87..88]
 r126: [82..83]
 r127: [80..81]
 r133: [75..76]
 r134: [73..74]
 r135: [65..66]
 r136: [63..64]
 r137: [61..62]
 r138: [59..60]
 r140: [30..49] [15..18]
 r141: [23..24]
 r142: [25..29]
 r143: [19..26]
 r145: [41..42]
 r146: [38..40]
 r152: [38..39]
 r153: [44..45]
 r156: [15..17]
 r161: [15..16]
 r162: [35..36]
 r163: [32..34]
 r169: [32..33]
 r170: [19..31]
 r171: [21..22]
 r172: [19..20]
 r174: [11..12]
 r176: [2..3]
 r179: [97..98]
 r180: [89..90]
 r181: [52..53]
 r182: [27..28]
Compressing live ranges: from 102 to 67 - 65%
Ranges after the compression:
 r88: [57..64] [10..48]
 r89: [53..62]
 r91: [53..62]
 r92: [53..58]
 r103: [4..33]
 r106: [2..33]
 r116: [2..5]
 r117: [46..46] [6..37]
 r119: [0..1]
 r120: [4..66]
 r121: [47..66] [36..45]
 r122: [8..66]
 r124: [63..64]
 r125: [59..60]
 r126: [55..56]
 r127: [53..54]
 r133: [51..52]
 r134: [49..50]
 r135: [44..45]
 r136: [42..43]
 r137: [40..41]
 r138: [38..39]
 r140: [22..33] [10..11]
 r141: [16..17]
 r142: [18..21]
 r143: [12..19]
 r145: [30..31]
 r146: [28..29]
 r152: [28..29]
 r153: [32..33]
 r156: [10..11]
 r161: [10..11]
 r162: [26..27]
 r163: [24..25]
 r169: [24..25]
 r170: [12..23]
 r171: [14..15]
 r172: [12..13]
 r174: [8..9]
 r176: [2..3]
 r179: [65..66]
 r180: [61..62]
 r181: [34..35]
 r182: [20..21]

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11 12
EBB 13
EBB 14 15
EBB 16
EBB 17
EBB 18 19
EBB 20
EBB 21

********** Pseudo live ranges #2: **********

  BB 21
   Insn 155: point = 0
   Insn 152: point = 0
   Insn 154: point = 1
   Insn 153: point = 2
  BB 19
   Insn 195: point = 2
   Insn 143: point = 2
   Insn 140: point = 3
   Insn 139: point = 5
  BB 20
   Insn 148: point = 8
  BB 18
   Insn 137: point = 10
   Insn 197: point = 10
   Insn 134: point = 11
   Insn 133: point = 12
  BB 16
   Insn 193: point = 15
   Insn 107: point = 15
   Insn 106: point = 16
   Insn 100: point = 17
  BB 17
   Insn 130: point = 19
   Insn 129: point = 20
   Insn 128: point = 22
   Insn 126: point = 24
   Insn 208: point = 26
	Hard reg 4 is preferable by r182 with profit 13
   Insn 125: point = 28
   Insn 207: point = 28
   Insn 124: point = 29
   Insn 123: point = 31
   Insn 122: point = 31
   Insn 121: point = 32
   Insn 120: point = 33
   Insn 114: point = 34
   Insn 113: point = 35
   Insn 112: point = 36
  BB 13
   Insn 191: point = 38
   Insn 89: point = 38
   Insn 88: point = 39
   Insn 82: point = 40
   Insn 81: point = 41
   Insn 80: point = 42
  BB 15
   Insn 99: point = 44
   Insn 198: point = 44
   Insn 96: point = 44
   Insn 95: point = 45
  BB 14
   Insn 94: point = 47
   Insn 93: point = 47
  BB 12
   Insn 79: point = 48
   Insn 199: point = 48
  BB 11
   Insn 76: point = 49
   Insn 75: point = 49
   Insn 71: point = 49
   Insn 69: point = 50
   Insn 206: point = 51
	Hard reg 1 is preferable by r181 with profit 26
   Insn 68: point = 53
   Insn 205: point = 53
  BB 10
   Insn 66: point = 55
   Insn 65: point = 55
  BB 8
   Insn 189: point = 56
   Insn 62: point = 56
  BB 7
   Insn 60: point = 57
   Insn 59: point = 57
   Insn 57: point = 57
   Insn 56: point = 57
   Insn 55: point = 57
   Insn 54: point = 57
   Insn 53: point = 57
  BB 6
   Insn 51: point = 58
   Insn 50: point = 60
   Insn 49: point = 62
   Insn 48: point = 64
   Insn 47: point = 66
  BB 9
   Insn 7: point = 68
  BB 5
   Insn 45: point = 71
   Insn 44: point = 71
  BB 4
   Insn 6: point = 72
   Insn 41: point = 73
   Insn 40: point = 74
   Insn 39: point = 76
   Insn 38: point = 78
   Insn 37: point = 79
   Insn 36: point = 79
   Insn 35: point = 79
   Insn 34: point = 80
   Insn 31: point = 80
   Insn 30: point = 80
   Insn 29: point = 81
   Insn 28: point = 81
   Insn 24: point = 81
   Insn 23: point = 83
   Insn 22: point = 85
  BB 3
   Insn 20: point = 87
   Insn 19: point = 87
   Insn 204: point = 88
	Hard reg 0 is preferable by r180 with profit 45
   Insn 18: point = 90
   Insn 203: point = 90
   Insn 17: point = 91
   Insn 16: point = 92
   Insn 15: point = 94
  BB 2
   Insn 13: point = 96
   Insn 12: point = 96
   Insn 202: point = 96
	Hard reg 43 is preferable by r179 with profit 90
   Insn 11: point = 98
   Insn 201: point = 98
   Insn 4: point = 99
   Insn 3: point = 100
   Insn 2: point = 101
 r88: [84..96] [13..72]
 r89: [77..92]
 r91: [78..91]
 r92: [79..85]
 r103: [10..51] [4..7]
 r106: [10..50] [2..7]
 r116: [2..5]
 r117: [68..68] [10..58] [6..7]
 r119: [0..1]
 r120: [4..101]
 r121: [69..100] [57..67]
 r122: [10..99]
 r124: [93..94]
 r125: [87..88]
 r126: [82..83]
 r127: [80..81]
 r133: [75..76]
 r134: [73..74]
 r135: [65..66]
 r136: [63..64]
 r137: [61..62]
 r138: [59..60]
 r140: [30..49] [15..18]
 r141: [23..24]
 r142: [25..29]
 r143: [19..26]
 r145: [41..42]
 r146: [38..40]
 r152: [38..39]
 r153: [44..45]
 r156: [15..17]
 r161: [15..16]
 r162: [35..36]
 r163: [32..34]
 r169: [32..33]
 r170: [19..31]
 r171: [21..22]
 r172: [19..20]
 r174: [11..12]
 r176: [2..3]
 r179: [97..98]
 r180: [89..90]
 r181: [52..53]
 r182: [27..28]
Compressing live ranges: from 102 to 67 - 65%
Ranges after the compression:
 r88: [57..64] [10..48]
 r89: [53..62]
 r91: [53..62]
 r92: [53..58]
 r103: [4..33]
 r106: [2..33]
 r116: [2..5]
 r117: [46..46] [6..37]
 r119: [0..1]
 r120: [4..66]
 r121: [47..66] [36..45]
 r122: [8..66]
 r124: [63..64]
 r125: [59..60]
 r126: [55..56]
 r127: [53..54]
 r133: [51..52]
 r134: [49..50]
 r135: [44..45]
 r136: [42..43]
 r137: [40..41]
 r138: [38..39]
 r140: [22..33] [10..11]
 r141: [16..17]
 r142: [18..21]
 r143: [12..19]
 r145: [30..31]
 r146: [28..29]
 r152: [28..29]
 r153: [32..33]
 r156: [10..11]
 r161: [10..11]
 r162: [26..27]
 r163: [24..25]
 r169: [24..25]
 r170: [12..23]
 r171: [14..15]
 r172: [12..13]
 r174: [8..9]
 r176: [2..3]
 r179: [65..66]
 r180: [61..62]
 r181: [34..35]
 r182: [20..21]

********** Assignment #1: **********

	 Assigning to 179 (cl=GENERAL_REGS, orig=88, freq=270, tfirst=179, tfreq=270)...
	   Assign 43 to reload r179 (freq=270)
	 Assigning to 180 (cl=GENERAL_REGS, orig=125, freq=135, tfirst=180, tfreq=135)...
	   Assign 0 to reload r180 (freq=135)
	 Assigning to 181 (cl=GENERAL_REGS, orig=103, freq=78, tfirst=181, tfreq=78)...
	   Assign 1 to reload r181 (freq=78)
	 Assigning to 182 (cl=GENERAL_REGS, orig=143, freq=39, tfirst=182, tfreq=39)...
	   Assign 4 to reload r182 (freq=39)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=96)
Can eliminate 16 to 6 (offset=64, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=32)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 133
changing reg in insn 69
changing reg in insn 23
changing reg in insn 16
changing reg in insn 12
changing reg in insn 16
changing reg in insn 16
changing reg in insn 39
changing reg in insn 17
changing reg in insn 17
changing reg in insn 28
changing reg in insn 38
changing reg in insn 19
changing reg in insn 22
changing reg in insn 35
changing reg in insn 199
changing reg in insn 198
changing reg in insn 139
changing reg in insn 69
changing reg in insn 143
changing reg in insn 71
changing reg in insn 139
changing reg in insn 143
changing reg in insn 7
changing reg in insn 51
changing reg in insn 120
changing reg in insn 106
changing reg in insn 88
changing reg in insn 112
changing reg in insn 95
changing reg in insn 80
changing reg in insn 139
changing reg in insn 59
changing reg in insn 120
changing reg in insn 112
changing reg in insn 106
changing reg in insn 95
changing reg in insn 88
changing reg in insn 80
changing reg in insn 154
changing reg in insn 152
changing reg in insn 2
changing reg in insn 71
changing reg in insn 148
changing reg in insn 134
changing reg in insn 55
changing reg in insn 53
changing reg in insn 53
changing reg in insn 36
changing reg in insn 34
changing reg in insn 34
changing reg in insn 22
changing reg in insn 133
changing reg in insn 11
changing reg in insn 57
changing reg in insn 38
changing reg in insn 3
changing reg in insn 29
changing reg in insn 7
changing reg in insn 59
changing reg in insn 57
changing reg in insn 54
changing reg in insn 38
changing reg in insn 62
changing reg in insn 41
changing reg in insn 4
changing reg in insn 197
changing reg in insn 65
changing reg in insn 62
changing reg in insn 47
changing reg in insn 44
changing reg in insn 41
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 30
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 71
changing reg in insn 121
changing reg in insn 107
changing reg in insn 89
changing reg in insn 124
changing reg in insn 122
changing reg in insn 113
changing reg in insn 96
changing reg in insn 81
changing reg in insn 126
changing reg in insn 128
changing reg in insn 124
changing reg in insn 125
changing reg in insn 130
changing reg in insn 130
changing reg in insn 130
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 89
changing reg in insn 88
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 95
changing reg in insn 96
changing reg in insn 100
changing reg in insn 107
changing reg in insn 106
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 121
changing reg in insn 120
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 130
changing reg in insn 123
changing reg in insn 124
changing reg in insn 130
changing reg in insn 130
changing reg in insn 123
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 130
changing reg in insn 133
changing reg in insn 134
changing reg in insn 140
changing reg in insn 143
deleting insn with uid = 202.
deleting insn with uid = 30.
deleting insn with uid = 206.
deleting insn with uid = 208.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 56.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 31 count 23 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 31 count 23 (    1)


Update64.part.1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14]
;;  ref usage 	r0={17d,22u} r1={10d,16u} r2={16d,17u,3e} r3={3d,7u} r4={4d,6u} r5={4d,6u} r6={1d,12u,2e} r7={1d,24u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={3e} r17={38d,10u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={1d} r26={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={6d,4u} r38={7d,3u} r39={3d} r40={3d} r41={8d,16u,6e} r42={3d,9u} r43={3d,6u,1e} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 440{267d,158u,15e} in 100{97 regular + 3 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 3 [bx] 6 [bp] 17 [flags] 42 [r13] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 3 [bx] 6 [bp] 17 [flags] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 6 bp [orig:120 state ] [120])
        (reg:DI 2 cx [ state ])) blake_ref.c:345 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 3 bx [orig:121 data ] [121])
        (reg:DI 1 dx [ data ])) blake_ref.c:345 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 data+0 S8 A64])
        (nil)))
(insn 4 3 5 2 (set (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:345 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
        (nil)))
(note 5 4 10 2 NOTE_INSN_FUNCTION_BEG)
(note 10 5 201 2 NOTE_INSN_DELETED)
(insn 201 10 11 2 (set (reg/v:SI 43 r14 [orig:88 left ] [88])
        (mem:SI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])) blake_ref.c:354 90 {*movsi_internal}
     (nil))
(insn 11 201 12 2 (parallel [
            (set (reg/v:SI 43 r14 [orig:88 left ] [88])
                (ashiftrt:SI (reg/v:SI 43 r14 [orig:88 left ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:354 545 {*ashrsi3_1}
     (expr_list:REG_EQUAL (ashiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                    (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 43 r14 [orig:88 left ] [88])
            (const_int 0 [0]))) blake_ref.c:358 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) blake_ref.c:358 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 42)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              5 [50.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 4 [si] 17 [flags] 41 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 41 r12 [124])
        (const_int 128 [0x80])) blake_ref.c:355 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 128 [0x80])
        (nil)))
(insn 16 15 17 3 (parallel [
            (set (reg/v:SI 41 r12 [orig:89 fill ] [89])
                (minus:SI (reg:SI 41 r12 [124])
                    (reg/v:SI 43 r14 [orig:88 left ] [88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:355 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 128 [0x80])
            (reg/v:SI 43 r14 [orig:88 left ] [88]))
        (nil)))
(insn 17 16 203 3 (set (reg:DI 4 si [orig:91 D.5911 ] [91])
        (sign_extend:DI (reg/v:SI 41 r12 [orig:89 fill ] [89]))) blake_ref.c:358 142 {*extendsidi2_rex64}
     (nil))
(insn 203 17 18 3 (set (reg:DI 0 ax [orig:125 D.5911 ] [125])
        (reg/v:DI 42 r13 [orig:122 databitlen ] [122])) blake_ref.c:358 89 {*movdi_internal}
     (nil))
(insn 18 203 204 3 (parallel [
            (set (reg:DI 0 ax [orig:125 D.5911 ] [125])
                (lshiftrt:DI (reg:DI 0 ax [orig:125 D.5911 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:358 546 {*lshrdi3_1}
     (nil))
(insn 204 18 19 3 (set (reg:DI 0 ax [orig:125 D.5911 ] [125])
        (reg:DI 0 ax [orig:125 D.5911 ] [125])) blake_ref.c:358 89 {*movdi_internal}
     (nil))
(insn 19 204 20 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:125 D.5911 ] [125])
            (reg:DI 4 si [orig:91 D.5911 ] [91]))) blake_ref.c:358 8 {*cmpdi_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) blake_ref.c:358 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 42)
;;  succ:       4 [29.0%]  (FALLTHRU)
;;              5 [71.0%] 
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 4, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [29.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 43 [r14] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 37 [r8] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (parallel [
            (set (reg/f:DI 5 di [orig:92 D.5912 ] [92])
                (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 218 {*adddi_1}
     (nil))
(insn 23 22 24 4 (set (reg:DI 2 cx [orig:126 D.5913 ] [126])
        (sign_extend:DI (reg/v:SI 43 r14 [orig:88 left ] [88]))) blake_ref.c:359 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 28 4 (parallel [
            (set (reg:DI 2 cx [orig:127 D.5914 ] [127])
                (plus:DI (reg:DI 2 cx [orig:126 D.5913 ] [126])
                    (reg/f:DI 5 di [orig:92 D.5912 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 218 {*adddi_1}
     (nil))
(insn 28 24 29 4 (set (reg:DI 37 r8)
        (reg:DI 4 si [orig:91 D.5911 ] [91])) blake_ref.c:359 89 {*movdi_internal}
     (nil))
(insn 29 28 31 4 (set (reg:DI 1 dx)
        (reg/v/f:DI 3 bx [orig:121 data ] [121])) blake_ref.c:359 89 {*movdi_internal}
     (nil))
(call_insn 31 29 34 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>) [0 memcpy S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:359 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 2 cx))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 37 r8))
                    (nil))))))
(insn 34 31 35 4 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                        (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                            (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 218 {*adddi_1}
     (nil))
(insn 35 34 36 4 (set (reg:DI 1 dx)
        (reg/f:DI 5 di [orig:92 D.5912 ] [92])) blake_ref.c:364 89 {*movdi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 2 cx)
        (reg/v/f:DI 6 bp [orig:120 state ] [120])) blake_ref.c:364 89 {*movdi_internal}
     (nil))
(call_insn 37 36 38 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 38 37 39 4 (parallel [
            (set (reg/v/f:DI 3 bx [orig:121 data ] [121])
                (plus:DI (reg/v/f:DI 3 bx [orig:121 data ] [121])
                    (reg:DI 4 si [orig:91 D.5911 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:365 218 {*adddi_1}
     (nil))
(insn 39 38 40 4 (parallel [
            (set (reg:SI 0 ax [orig:133 D.5910 ] [133])
                (ashift:SI (reg/v:SI 41 r12 [orig:89 fill ] [89])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:366 511 {*ashlsi3_1}
     (nil))
(insn 40 39 41 4 (set (reg:DI 0 ax [orig:134 D.5911 ] [134])
        (sign_extend:DI (reg:SI 0 ax [orig:133 D.5910 ] [133]))) blake_ref.c:366 142 {*extendsidi2_rex64}
     (nil))
(insn 41 40 6 4 (parallel [
            (set (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
                (minus:DI (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
                    (reg:DI 0 ax [orig:134 D.5911 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:366 261 {*subdi_1}
     (nil))
(insn 6 41 42 4 (set (reg/v:SI 43 r14 [orig:88 left ] [88])
        (const_int 0 [0])) blake_ref.c:368 90 {*movsi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;;              3 [71.0%] 
;;              4 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 42 6 43 5 45 "" [2 uses])
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 5 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
            (const_int 1023 [0x3ff]))) blake_ref.c:372 8 {*cmpdi_1}
     (nil))
(jump_insn 45 44 46 5 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 160)
            (pc))) blake_ref.c:372 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 160)
;;  succ:       6 [91.0%]  (FALLTHRU)
;;              9 [9.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 6, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [91.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp] 42 [r13]
;; lr  def 	 17 [flags] 41 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 41 [r12]
;; live  kill	 17 [flags]
(note 46 45 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 6 (parallel [
            (set (reg:DI 41 r12 [orig:135 D.5911 ] [135])
                (plus:DI (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
                    (const_int -1024 [0xfffffffffffffc00])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 48 47 49 6 (parallel [
            (set (reg:DI 41 r12 [orig:136 D.5911 ] [136])
                (lshiftrt:DI (reg:DI 41 r12 [orig:135 D.5911 ] [135])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) 546 {*lshrdi3_1}
     (nil))
(insn 49 48 50 6 (parallel [
            (set (reg:DI 41 r12 [orig:137 D.5913 ] [137])
                (plus:DI (reg:DI 41 r12 [orig:136 D.5911 ] [136])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 50 49 51 6 (parallel [
            (set (reg:DI 41 r12 [orig:138 D.5913 ] [138])
                (ashift:DI (reg:DI 41 r12 [orig:137 D.5913 ] [137])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (nil))
(insn 51 50 58 6 (parallel [
            (set (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                (plus:DI (reg:DI 41 r12 [orig:138 D.5913 ] [138])
                    (reg/v/f:DI 3 bx [orig:121 data ] [121])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 7, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;;              7 [91.0%]  (DFS_BACK)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 58 51 52 7 47 "" [1 uses])
(note 52 58 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                        (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                            (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:375 218 {*adddi_1}
     (nil))
(insn 54 53 55 7 (set (reg:DI 1 dx)
        (reg/v/f:DI 3 bx [orig:121 data ] [121])) blake_ref.c:376 89 {*movdi_internal}
     (nil))
(insn 55 54 56 7 (set (reg:DI 2 cx)
        (reg/v/f:DI 6 bp [orig:120 state ] [120])) blake_ref.c:376 89 {*movdi_internal}
     (nil))
(call_insn 56 55 57 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:376 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 57 56 59 7 (parallel [
            (set (reg/v/f:DI 3 bx [orig:121 data ] [121])
                (plus:DI (reg/v/f:DI 3 bx [orig:121 data ] [121])
                    (const_int 128 [0x80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:377 218 {*adddi_1}
     (nil))
(insn 59 57 60 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 3 bx [orig:121 data ] [121])
            (reg/v/f:DI 41 r12 [orig:117 data ] [117]))) blake_ref.c:372 8 {*cmpdi_1}
     (nil))
(jump_insn 60 59 61 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 58)
            (pc))) blake_ref.c:372 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 58)
;;  succ:       7 [91.0%]  (DFS_BACK)
;;              8 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 8, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 17 [flags] 42 [r13]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 42 [r13]
;; live  kill	 17 [flags]
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 189 8 (parallel [
            (set (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
                (and:DI (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
                    (const_int 1023 [0x3ff])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (nil))
(jump_insn 189 62 190 8 (set (pc)
        (label_ref 63)) 654 {jump}
     (nil)
 -> 63)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

(barrier 190 189 160)
;; basic block 9, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [9.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 41 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 41 [r12]
;; live  kill	
(code_label 160 190 159 9 54 "" [1 uses])
(note 159 160 7 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 7 159 63 9 (set (reg/v/f:DI 41 r12 [orig:117 data ] [117])
        (reg/v/f:DI 3 bx [orig:121 data ] [121])) blake_ref.c:372 89 {*movdi_internal}
     (nil))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 63 7 64 10 46 "" [1 uses])
(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
            (const_int 0 [0]))) blake_ref.c:381 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 66 65 67 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) blake_ref.c:381 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 146)
;;  succ:       11 [29.0%]  (FALLTHRU)
;;              20 [71.0%] 
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 11, loop depth 0, count 0, freq 261, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [29.0%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(note 67 66 205 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 205 67 68 11 (set (reg:DI 1 dx [orig:103 D.5911 ] [103])
        (reg/v:DI 42 r13 [orig:122 databitlen ] [122])) blake_ref.c:383 89 {*movdi_internal}
     (nil))
(insn 68 205 69 11 (parallel [
            (set (reg:DI 1 dx [orig:103 D.5911 ] [103])
                (lshiftrt:DI (reg:DI 1 dx [orig:103 D.5911 ] [103])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:383 546 {*lshrdi3_1}
     (nil))
(insn 69 68 70 11 (set (reg:DI 37 r8 [orig:106 D.5913 ] [106])
        (sign_extend:DI (reg/v:SI 43 r14 [orig:88 left ] [88]))) blake_ref.c:382 142 {*extendsidi2_rex64}
     (nil))
(note 70 69 71 11 NOTE_INSN_DELETED)
(insn 71 70 75 11 (set (reg:DI 0 ax [orig:140 D.5914 ] [140])
        (plus:DI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                (reg:DI 37 r8 [orig:106 D.5913 ] [106]))
            (const_int 216 [0xd8]))) blake_ref.c:382 214 {*leadi}
     (nil))
(insn 75 71 76 11 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:103 D.5911 ] [103])
            (const_int 8 [0x8]))) blake_ref.c:382 7 {*cmpsi_1}
     (nil))
(jump_insn 76 75 161 11 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 111)
;;  succ:       17 [50.0%] 
;;              12 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

;; basic block 12, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [50.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(note 161 76 77 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 77 161 199 12 NOTE_INSN_DELETED)
(insn 199 77 79 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:DI (reg:DI 1 dx [orig:103 D.5911 ] [103])
                (const_int 4 [0x4]))
            (const_int 0 [0]))) blake_ref.c:382 358 {*testdi_1}
     (nil))
(jump_insn 79 199 162 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (int_list:REG_BR_PROB 9000 (nil))
 -> 92)
;;  succ:       14 [90.0%] 
;;              13 [10.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

;; basic block 13, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [10.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 2 [cx] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 2 [cx] 38 [r9]
;; live  kill	
(note 162 79 80 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 80 162 81 13 (set (reg:SI 2 cx [145])
        (mem:SI (reg/v/f:DI 41 r12 [orig:117 data ] [117]) [0  S4 A8])) blake_ref.c:382 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:DI 41 r12 [orig:117 data ] [117]) [0  S4 A8])
        (nil)))
(insn 81 80 82 13 (set (mem:SI (reg:DI 0 ax [orig:140 D.5914 ] [140]) [0  S4 A8])
        (reg:SI 2 cx [145])) blake_ref.c:382 90 {*movsi_internal}
     (nil))
(insn 82 81 83 13 (set (reg:DI 2 cx [orig:146 D.5911 ] [146])
        (zero_extend:DI (reg:SI 1 dx [orig:103 D.5911 ] [103]))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(note 83 82 84 13 NOTE_INSN_DELETED)
(note 84 83 86 13 NOTE_INSN_DELETED)
(note 86 84 87 13 NOTE_INSN_DELETED)
(note 87 86 88 13 NOTE_INSN_DELETED)
(insn 88 87 89 13 (set (reg:SI 38 r9 [152])
        (mem:SI (plus:DI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                    (reg:DI 2 cx [orig:146 D.5911 ] [146]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])) blake_ref.c:382 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                    (reg:DI 2 cx [orig:146 D.5911 ] [146]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])
        (nil)))
(insn 89 88 191 13 (set (mem:SI (plus:DI (plus:DI (reg:DI 0 ax [orig:140 D.5914 ] [140])
                    (reg:DI 2 cx [orig:146 D.5911 ] [146]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])
        (reg:SI 38 r9 [152])) blake_ref.c:382 90 {*movsi_internal}
     (nil))
(jump_insn 191 89 192 13 (set (pc)
        (label_ref 131)) 654 {jump}
     (nil)
 -> 131)
;;  succ:       18 [100.0%] 
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

(barrier 192 191 92)
;; basic block 14, loop depth 0, count 0, freq 118, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [90.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 92 192 163 14 51 "" [1 uses])
(note 163 92 93 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 93 163 94 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:103 D.5911 ] [103])
            (const_int 0 [0]))) blake_ref.c:382 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 94 93 164 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 131)
;;  succ:       18 [50.0%] 
;;              15 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

;; basic block 15, loop depth 0, count 0, freq 59, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [50.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 2 [cx] 17 [flags]
;; live  kill	
(note 164 94 95 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 95 164 96 15 (set (reg:QI 2 cx [153])
        (mem:QI (reg/v/f:DI 41 r12 [orig:117 data ] [117]) [0  S1 A8])) blake_ref.c:382 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem:QI (reg/v/f:DI 41 r12 [orig:117 data ] [117]) [0  S1 A8])
        (nil)))
(insn 96 95 97 15 (set (mem:QI (reg:DI 0 ax [orig:140 D.5914 ] [140]) [0  S1 A8])
        (reg:QI 2 cx [153])) blake_ref.c:382 93 {*movqi_internal}
     (nil))
(note 97 96 198 15 NOTE_INSN_DELETED)
(insn 198 97 99 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:DI (reg:DI 1 dx [orig:103 D.5911 ] [103])
                (const_int 2 [0x2]))
            (const_int 0 [0]))) blake_ref.c:382 358 {*testdi_1}
     (nil))
(jump_insn 99 198 165 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 131)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (int_list:REG_BR_PROB 9000 (nil))
 -> 131)
;;  succ:       18 [90.0%] 
;;              16 [10.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

;; basic block 16, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [10.0%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 2 [cx] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 2 [cx] 38 [r9]
;; live  kill	
(note 165 99 100 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 100 165 102 16 (set (reg:DI 2 cx [orig:156 D.5911 ] [156])
        (zero_extend:DI (reg:SI 1 dx [orig:103 D.5911 ] [103]))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(note 102 100 105 16 NOTE_INSN_DELETED)
(note 105 102 106 16 NOTE_INSN_DELETED)
(insn 106 105 107 16 (set (reg:HI 38 r9 [161])
        (mem:HI (plus:DI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                    (reg:DI 2 cx [orig:156 D.5911 ] [156]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])) blake_ref.c:382 92 {*movhi_internal}
     (expr_list:REG_EQUIV (mem:HI (plus:DI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                    (reg:DI 2 cx [orig:156 D.5911 ] [156]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (nil)))
(insn 107 106 193 16 (set (mem:HI (plus:DI (plus:DI (reg:DI 0 ax [orig:140 D.5914 ] [140])
                    (reg:DI 2 cx [orig:156 D.5911 ] [156]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (reg:HI 38 r9 [161])) blake_ref.c:382 92 {*movhi_internal}
     (nil))
(jump_insn 193 107 194 16 (set (pc)
        (label_ref 131)) 654 {jump}
     (nil)
 -> 131)
;;  succ:       18 [100.0%] 
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

(barrier 194 193 111)
;; basic block 17, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [50.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 5 [di] 17 [flags] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 5 [di] 38 [r9]
;; live  kill	 17 [flags]
(code_label 111 194 167 17 49 "" [1 uses])
(note 167 111 112 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 112 167 113 17 (set (reg:DI 2 cx [162])
        (mem:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117]) [0  S8 A8])) blake_ref.c:382 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117]) [0  S8 A8])
        (nil)))
(insn 113 112 114 17 (set (mem:DI (reg:DI 0 ax [orig:140 D.5914 ] [140]) [0  S8 A8])
        (reg:DI 2 cx [162])) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 114 113 115 17 (set (reg:DI 2 cx [orig:163 D.5911 ] [163])
        (zero_extend:DI (reg:SI 1 dx [orig:103 D.5911 ] [103]))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(note 115 114 116 17 NOTE_INSN_DELETED)
(note 116 115 118 17 NOTE_INSN_DELETED)
(note 118 116 119 17 NOTE_INSN_DELETED)
(note 119 118 120 17 NOTE_INSN_DELETED)
(insn 120 119 121 17 (set (reg:DI 38 r9 [169])
        (mem:DI (plus:DI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                    (reg:DI 2 cx [orig:163 D.5911 ] [163]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])) blake_ref.c:382 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                    (reg:DI 2 cx [orig:163 D.5911 ] [163]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])
        (nil)))
(insn 121 120 122 17 (set (mem:DI (plus:DI (plus:DI (reg:DI 0 ax [orig:140 D.5914 ] [140])
                    (reg:DI 2 cx [orig:163 D.5911 ] [163]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])
        (reg:DI 38 r9 [169])) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 122 121 123 17 (parallel [
            (set (reg/f:DI 5 di [170])
                (plus:DI (reg:DI 0 ax [orig:140 D.5914 ] [140])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 123 122 124 17 (parallel [
            (set (reg/f:DI 5 di [170])
                (and:DI (reg/f:DI 5 di [170])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 380 {*anddi_1}
     (nil))
(insn 124 123 207 17 (parallel [
            (set (reg/f:DI 0 ax [orig:142 D.5914 ] [142])
                (minus:DI (reg:DI 0 ax [orig:140 D.5914 ] [140])
                    (reg/f:DI 5 di [170])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 261 {*subdi_1}
     (nil))
(insn 207 124 125 17 (set (reg/f:DI 4 si [orig:143 data ] [143])
        (reg/v/f:DI 41 r12 [orig:117 data ] [117])) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 125 207 126 17 (parallel [
            (set (reg/f:DI 4 si [orig:143 data ] [143])
                (minus:DI (reg/f:DI 4 si [orig:143 data ] [143])
                    (reg/f:DI 0 ax [orig:142 D.5914 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 261 {*subdi_1}
     (nil))
(insn 126 125 127 17 (parallel [
            (set (reg:SI 0 ax [orig:141 D.5911 ] [141])
                (plus:SI (reg:SI 0 ax [orig:142 D.5914 ] [142])
                    (reg:SI 1 dx [orig:103 D.5911 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 217 {*addsi_1}
     (nil))
(note 127 126 128 17 NOTE_INSN_DELETED)
(insn 128 127 129 17 (parallel [
            (set (reg:SI 0 ax [171])
                (lshiftrt:SI (reg:SI 0 ax [orig:141 D.5911 ] [141])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 544 {*lshrsi3_1}
     (nil))
(insn 129 128 130 17 (set (reg:DI 2 cx [172])
        (zero_extend:DI (reg:SI 0 ax [171]))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(insn 130 129 131 17 (parallel [
            (set (reg:DI 2 cx [172])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [170])
                (plus:DI (ashift:DI (reg:DI 2 cx [172])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [170])))
            (set (reg/f:DI 4 si [orig:143 data ] [143])
                (plus:DI (ashift:DI (reg:DI 2 cx [172])
                        (const_int 3 [0x3]))
                    (reg/f:DI 4 si [orig:143 data ] [143])))
            (set (mem:BLK (reg/f:DI 5 di [170]) [0  A64])
                (mem:BLK (reg/f:DI 4 si [orig:143 data ] [143]) [0  A8]))
            (use (reg:DI 2 cx [172]))
        ]) blake_ref.c:382 919 {*rep_movdi_rex64}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

;; basic block 18, loop depth 0, count 0, freq 262, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [90.0%] 
;;              14 [50.0%] 
;;              13 [100.0%] 
;;              17 [100.0%]  (FALLTHRU)
;;              16 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 131 130 168 18 50 "" [4 uses])
(note 168 131 132 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(note 132 168 133 18 NOTE_INSN_DELETED)
(insn 133 132 134 18 (set (reg:SI 0 ax [174])
        (plus:SI (mult:SI (reg/v:SI 43 r14 [orig:88 left ] [88])
                (const_int 8 [0x8]))
            (reg:SI 42 r13 [orig:122 databitlen ] [122]))) blake_ref.c:384 213 {*leasi}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (nil)))
(insn 134 133 135 18 (set (mem:SI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (reg:SI 0 ax [174])) blake_ref.c:384 90 {*movsi_internal}
     (nil))
(note 135 134 197 18 NOTE_INSN_DELETED)
(insn 197 135 137 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:DI (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
                (const_int 7 [0x7]))
            (const_int 0 [0]))) blake_ref.c:387 358 {*testdi_1}
     (nil))
(jump_insn 137 197 138 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 149)
            (pc))) blake_ref.c:387 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 149)
;;  succ:       19 [50.0%]  (FALLTHRU)
;;              21 [50.0%] 
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]

;; basic block 19, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       18 [50.0%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
(note 138 137 139 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 19 (set (reg:QI 0 ax [orig:116 D.5917 ] [116])
        (mem:QI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                (reg:DI 1 dx [orig:103 D.5911 ] [103])) [0 *_37+0 S1 A8])) blake_ref.c:388 93 {*movqi_internal}
     (nil))
(insn 140 139 141 19 (parallel [
            (set (reg:DI 1 dx [176])
                (plus:DI (reg:DI 1 dx [orig:103 D.5911 ] [103])
                    (reg/v/f:DI 6 bp [orig:120 state ] [120])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:388 218 {*adddi_1}
     (nil))
(note 141 140 143 19 NOTE_INSN_DELETED)
(insn 143 141 195 19 (set (mem/j:QI (plus:DI (plus:DI (reg:DI 37 r8 [orig:106 D.5913 ] [106])
                    (reg:DI 1 dx [176]))
                (const_int 216 [0xd8])) [0 state_1(D)->data64 S1 A8])
        (reg:QI 0 ax [orig:116 D.5917 ] [116])) blake_ref.c:388 93 {*movqi_internal}
     (nil))
(jump_insn 195 143 196 19 (set (pc)
        (label_ref 149)) 654 {jump}
     (nil)
 -> 149)
;;  succ:       21 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 196 195 146)
;; basic block 20, loop depth 0, count 0, freq 639, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [71.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 146 196 147 20 48 "" [1 uses])
(note 147 146 148 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 20 (set (mem:SI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:391 90 {*movsi_internal}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 20, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       18 [50.0%] 
;;              20 [100.0%]  (FALLTHRU)
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 0 [ax]
(code_label 149 148 150 21 53 "" [2 uses])
(note 150 149 153 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 153 150 154 21 (clobber (reg/i:SI 0 ax)) blake_ref.c:394 -1
     (nil))
(insn 154 153 152 21 (clobber (reg:SI 0 ax [orig:119 <retval> ] [119])) blake_ref.c:394 -1
     (nil))
(insn 152 154 155 21 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:119 <retval> ] [119])) blake_ref.c:394 90 {*movsi_internal}
     (nil))
(insn 155 152 200 21 (use (reg/i:SI 0 ax)) blake_ref.c:394 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 200 155 0 NOTE_INSN_DELETED)

;; Function GetHashStateSize (GetHashStateSize, funcdef_no=10, decl_uid=3156, cgraph_uid=10, symbol_order=18)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


GetHashStateSize

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={1d,2u} r1={1d} r2={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r37={1d} r38={1d} 
;;    total ref usage 14{10d,4u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 2 10 2 (set (reg/i:SI 0 ax)
        (const_int 376 [0x178])) blake_ref.c:7 90 {*movsi_internal}
     (nil))
(insn 10 9 12 2 (use (reg/i:SI 0 ax)) blake_ref.c:7 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 12 10 0 NOTE_INSN_DELETED)

;; Function Init (Init, funcdef_no=13, decl_uid=3182, cgraph_uid=13, symbol_order=21)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 10:  (0) r  (1) r  (2) le {*addsi_1}
            Staticly defined alt reject+=600
            0 Costly set: reject++
          alt=0,overall=601,losers=0,rld_nregs=0
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=0,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 12:  (0) %!*a  (1) e {*testsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 32:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 41:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 50:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 54:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 55:  (0) r  (1) r  (2) le {*adddi_1}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=4: Bad operand -- refuse
	 Choosing alt 1 in insn 56:  (0) rm  (1) 0  (2) re {*anddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=160 from oldreg=117, assigning class GENERAL_REGS to r160
   57: {r160:SI=r160:SI-r123:DI#0;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  170: r160:SI=r100:DI#0
    Inserting insn reload after:
  171: r117:SI=r160:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 168:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =D  (1) =c  (2) a  (3) 0  (4) 1 {*rep_stosdi_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =v  (1) C {*movv4si_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =m  (1) v {sse2_storedquv16qi}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 69:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Small class reload: reject+=3
          alt=0,overall=610,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=0,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 71:  (0) r  (1) e {*testsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 77:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 80:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 82:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 84:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 86:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 88:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 90:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 92:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 94:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 99:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 102:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 104:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 106:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 108:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 110:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 112:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 114:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 116:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 119:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 120:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 125:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 129:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 130:  (0) r  (1) r  (2) le {*adddi_1}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=4: Bad operand -- refuse
	 Choosing alt 1 in insn 131:  (0) rm  (1) 0  (2) re {*anddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 132:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=161 from oldreg=150, assigning class GENERAL_REGS to r161
  132: {r161:SI=r161:SI-r156:DI#0;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  172: r161:SI=r100:DI#0
    Inserting insn reload after:
  173: r150:SI=r161:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 167:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =D  (1) =c  (2) a  (3) 0  (4) 1 {*rep_stosdi_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 138:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 139:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 140:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 141:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 13
   Insn 155: point = 0
   Insn 154: point = 0
  BB 12
   Insn 6: point = 2
   Insn 147: point = 3
   Insn 146: point = 4
   Insn 145: point = 4
   Insn 144: point = 4
  BB 6
   Insn 163: point = 6
   Insn 64: point = 6
   Insn 63: point = 7
   Insn 62: point = 8
   Insn 168: point = 10
   Insn 61: point = 11
   Insn 60: point = 13
   Insn 58: point = 15
   Insn 171: point = 17
	Hard reg 0 is preferable by r160 with profit 15
   Insn 57: point = 19
   Insn 170: point = 19
   Insn 56: point = 20
   Insn 55: point = 20
   Insn 54: point = 21
   Insn 50: point = 21
   Insn 45: point = 21
   Insn 44: point = 21
  BB 4
   Insn 161: point = 22
   Insn 27: point = 22
   Insn 26: point = 23
   Insn 25: point = 24
   Insn 24: point = 25
   Insn 23: point = 26
   Insn 22: point = 27
   Insn 21: point = 28
   Insn 20: point = 29
   Insn 18: point = 30
  BB 5
   Insn 41: point = 32
   Insn 40: point = 33
   Insn 39: point = 34
   Insn 38: point = 35
   Insn 37: point = 36
   Insn 36: point = 37
   Insn 35: point = 38
   Insn 34: point = 39
   Insn 32: point = 40
  BB 3
   Insn 16: point = 42
   Insn 15: point = 42
  BB 11
   Insn 141: point = 43
   Insn 140: point = 43
   Insn 139: point = 43
   Insn 138: point = 43
   Insn 137: point = 43
   Insn 167: point = 45
   Insn 136: point = 46
   Insn 135: point = 48
   Insn 133: point = 50
   Insn 173: point = 52
	Hard reg 0 is preferable by r161 with profit 5
   Insn 132: point = 54
   Insn 172: point = 54
   Insn 131: point = 55
   Insn 130: point = 55
   Insn 129: point = 56
   Insn 125: point = 56
   Insn 120: point = 56
   Insn 119: point = 56
  BB 9
   Insn 165: point = 57
   Insn 94: point = 57
   Insn 93: point = 58
   Insn 92: point = 59
   Insn 91: point = 60
   Insn 90: point = 61
   Insn 89: point = 62
   Insn 88: point = 63
   Insn 87: point = 64
   Insn 86: point = 65
   Insn 85: point = 66
   Insn 84: point = 67
   Insn 83: point = 68
   Insn 82: point = 69
   Insn 81: point = 70
   Insn 80: point = 71
   Insn 79: point = 72
   Insn 77: point = 73
  BB 10
   Insn 116: point = 75
   Insn 115: point = 76
   Insn 114: point = 77
   Insn 113: point = 78
   Insn 112: point = 79
   Insn 111: point = 80
   Insn 110: point = 81
   Insn 109: point = 82
   Insn 108: point = 83
   Insn 107: point = 84
   Insn 106: point = 85
   Insn 105: point = 86
   Insn 104: point = 87
   Insn 103: point = 88
   Insn 102: point = 89
   Insn 101: point = 90
   Insn 99: point = 91
  BB 8
   Insn 75: point = 93
   Insn 74: point = 93
  BB 7
   Insn 72: point = 94
   Insn 71: point = 94
   Insn 5: point = 95
   Insn 69: point = 96
  BB 2
   Insn 13: point = 98
   Insn 12: point = 98
   Insn 10: point = 99
   Insn 3: point = 100
   Insn 2: point = 101
 r88: [94..95] [0..2]
 r100: [3..101]
 r101: [4..100]
 r102: [98..99]
 r104: [22..30]
 r106: [28..29]
 r107: [26..27]
 r108: [24..25]
 r109: [22..23]
 r110: [32..40]
 r112: [38..39]
 r113: [36..37]
 r114: [34..35]
 r115: [32..33]
 r117: [16..17]
 r118: [14..15]
 r119: [9..10]
 r123: [8..20]
 r124: [12..13]
 r125: [8..11]
 r126: [6..7]
 r127: [94..96]
 r129: [57..73]
 r131: [71..72]
 r132: [69..70]
 r133: [67..68]
 r134: [65..66]
 r135: [63..64]
 r136: [61..62]
 r137: [59..60]
 r138: [57..58]
 r139: [75..91]
 r141: [89..90]
 r142: [87..88]
 r143: [85..86]
 r144: [83..84]
 r145: [81..82]
 r146: [79..80]
 r147: [77..78]
 r148: [75..76]
 r150: [51..52]
 r151: [49..50]
 r152: [44..45]
 r156: [43..55]
 r157: [47..48]
 r158: [43..46]
 r160: [18..19]
 r161: [53..54]
Compressing live ranges: from 102 to 76 - 74%
Ranges after the compression:
 r88: [72..73] [0..1]
 r100: [2..75]
 r101: [2..75]
 r102: [74..75]
 r104: [14..21]
 r106: [20..21]
 r107: [18..19]
 r108: [16..17]
 r109: [14..15]
 r110: [22..29]
 r112: [28..29]
 r113: [26..27]
 r114: [24..25]
 r115: [22..23]
 r117: [10..11]
 r118: [8..9]
 r119: [4..5]
 r123: [4..13]
 r124: [6..7]
 r125: [4..5]
 r126: [2..3]
 r127: [72..73]
 r129: [40..55]
 r131: [54..55]
 r132: [52..53]
 r133: [50..51]
 r134: [48..49]
 r135: [46..47]
 r136: [44..45]
 r137: [42..43]
 r138: [40..41]
 r139: [56..71]
 r141: [70..71]
 r142: [68..69]
 r143: [66..67]
 r144: [64..65]
 r145: [62..63]
 r146: [60..61]
 r147: [58..59]
 r148: [56..57]
 r150: [36..37]
 r151: [34..35]
 r152: [30..31]
 r156: [30..39]
 r157: [32..33]
 r158: [30..31]
 r160: [12..13]
 r161: [38..39]

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #2: **********

  BB 13
   Insn 155: point = 0
   Insn 154: point = 0
  BB 12
   Insn 6: point = 2
   Insn 147: point = 3
   Insn 146: point = 4
   Insn 145: point = 4
   Insn 144: point = 4
  BB 6
   Insn 163: point = 6
   Insn 64: point = 6
   Insn 63: point = 7
   Insn 62: point = 8
   Insn 168: point = 10
   Insn 61: point = 11
   Insn 60: point = 13
   Insn 58: point = 15
   Insn 171: point = 17
	Hard reg 0 is preferable by r160 with profit 15
   Insn 57: point = 19
   Insn 170: point = 19
   Insn 56: point = 20
   Insn 55: point = 20
   Insn 54: point = 21
   Insn 50: point = 21
   Insn 45: point = 21
   Insn 44: point = 21
  BB 4
   Insn 161: point = 22
   Insn 27: point = 22
   Insn 26: point = 23
   Insn 25: point = 24
   Insn 24: point = 25
   Insn 23: point = 26
   Insn 22: point = 27
   Insn 21: point = 28
   Insn 20: point = 29
   Insn 18: point = 30
  BB 5
   Insn 41: point = 32
   Insn 40: point = 33
   Insn 39: point = 34
   Insn 38: point = 35
   Insn 37: point = 36
   Insn 36: point = 37
   Insn 35: point = 38
   Insn 34: point = 39
   Insn 32: point = 40
  BB 3
   Insn 16: point = 42
   Insn 15: point = 42
  BB 11
   Insn 141: point = 43
   Insn 140: point = 43
   Insn 139: point = 43
   Insn 138: point = 43
   Insn 137: point = 43
   Insn 167: point = 45
   Insn 136: point = 46
   Insn 135: point = 48
   Insn 133: point = 50
   Insn 173: point = 52
	Hard reg 0 is preferable by r161 with profit 5
   Insn 132: point = 54
   Insn 172: point = 54
   Insn 131: point = 55
   Insn 130: point = 55
   Insn 129: point = 56
   Insn 125: point = 56
   Insn 120: point = 56
   Insn 119: point = 56
  BB 9
   Insn 165: point = 57
   Insn 94: point = 57
   Insn 93: point = 58
   Insn 92: point = 59
   Insn 91: point = 60
   Insn 90: point = 61
   Insn 89: point = 62
   Insn 88: point = 63
   Insn 87: point = 64
   Insn 86: point = 65
   Insn 85: point = 66
   Insn 84: point = 67
   Insn 83: point = 68
   Insn 82: point = 69
   Insn 81: point = 70
   Insn 80: point = 71
   Insn 79: point = 72
   Insn 77: point = 73
  BB 10
   Insn 116: point = 75
   Insn 115: point = 76
   Insn 114: point = 77
   Insn 113: point = 78
   Insn 112: point = 79
   Insn 111: point = 80
   Insn 110: point = 81
   Insn 109: point = 82
   Insn 108: point = 83
   Insn 107: point = 84
   Insn 106: point = 85
   Insn 105: point = 86
   Insn 104: point = 87
   Insn 103: point = 88
   Insn 102: point = 89
   Insn 101: point = 90
   Insn 99: point = 91
  BB 8
   Insn 75: point = 93
   Insn 74: point = 93
  BB 7
   Insn 72: point = 94
   Insn 71: point = 94
   Insn 5: point = 95
   Insn 69: point = 96
  BB 2
   Insn 13: point = 98
   Insn 12: point = 98
   Insn 10: point = 99
   Insn 3: point = 100
   Insn 2: point = 101
 r88: [94..95] [0..2]
 r100: [3..101]
 r101: [4..100]
 r102: [98..99]
 r104: [22..30]
 r106: [28..29]
 r107: [26..27]
 r108: [24..25]
 r109: [22..23]
 r110: [32..40]
 r112: [38..39]
 r113: [36..37]
 r114: [34..35]
 r115: [32..33]
 r117: [16..17]
 r118: [14..15]
 r119: [9..10]
 r123: [8..20]
 r124: [12..13]
 r125: [8..11]
 r126: [6..7]
 r127: [94..96]
 r129: [57..73]
 r131: [71..72]
 r132: [69..70]
 r133: [67..68]
 r134: [65..66]
 r135: [63..64]
 r136: [61..62]
 r137: [59..60]
 r138: [57..58]
 r139: [75..91]
 r141: [89..90]
 r142: [87..88]
 r143: [85..86]
 r144: [83..84]
 r145: [81..82]
 r146: [79..80]
 r147: [77..78]
 r148: [75..76]
 r150: [51..52]
 r151: [49..50]
 r152: [44..45]
 r156: [43..55]
 r157: [47..48]
 r158: [43..46]
 r160: [18..19]
 r161: [53..54]
Compressing live ranges: from 102 to 76 - 74%
Ranges after the compression:
 r88: [72..73] [0..1]
 r100: [2..75]
 r101: [2..75]
 r102: [74..75]
 r104: [14..21]
 r106: [20..21]
 r107: [18..19]
 r108: [16..17]
 r109: [14..15]
 r110: [22..29]
 r112: [28..29]
 r113: [26..27]
 r114: [24..25]
 r115: [22..23]
 r117: [10..11]
 r118: [8..9]
 r119: [4..5]
 r123: [4..13]
 r124: [6..7]
 r125: [4..5]
 r126: [2..3]
 r127: [72..73]
 r129: [40..55]
 r131: [54..55]
 r132: [52..53]
 r133: [50..51]
 r134: [48..49]
 r135: [46..47]
 r136: [44..45]
 r137: [42..43]
 r138: [40..41]
 r139: [56..71]
 r141: [70..71]
 r142: [68..69]
 r143: [66..67]
 r144: [64..65]
 r145: [62..63]
 r146: [60..61]
 r147: [58..59]
 r148: [56..57]
 r150: [36..37]
 r151: [34..35]
 r152: [30..31]
 r156: [30..39]
 r157: [32..33]
 r158: [30..31]
 r160: [12..13]
 r161: [38..39]

********** Assignment #1: **********

	 Assigning to 160 (cl=GENERAL_REGS, orig=117, freq=45, tfirst=160, tfreq=45)...
	   Assign 0 to reload r160 (freq=45)
	 Assigning to 161 (cl=GENERAL_REGS, orig=150, freq=15, tfirst=161, tfreq=15)...
	   Assign 0 to reload r161 (freq=15)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 6
changing reg in insn 154
changing reg in insn 2
changing reg in insn 129
changing reg in insn 54
changing reg in insn 125
changing reg in insn 102
changing reg in insn 80
changing reg in insn 50
changing reg in insn 35
changing reg in insn 21
changing reg in insn 130
changing reg in insn 55
changing reg in insn 147
changing reg in insn 146
changing reg in insn 145
changing reg in insn 144
changing reg in insn 141
changing reg in insn 140
changing reg in insn 139
changing reg in insn 138
changing reg in insn 120
changing reg in insn 119
changing reg in insn 99
changing reg in insn 77
changing reg in insn 64
changing reg in insn 45
changing reg in insn 44
changing reg in insn 32
changing reg in insn 18
changing reg in insn 3
changing reg in insn 69
changing reg in insn 10
changing reg in insn 144
changing reg in insn 74
changing reg in insn 15
changing reg in insn 10
changing reg in insn 12
changing reg in insn 18
changing reg in insn 27
changing reg in insn 25
changing reg in insn 23
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 41
changing reg in insn 39
changing reg in insn 37
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 58
changing reg in insn 58
changing reg in insn 60
changing reg in insn 168
changing reg in insn 62
changing reg in insn 55
changing reg in insn 62
changing reg in insn 56
changing reg in insn 62
changing reg in insn 62
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 69
changing reg in insn 71
changing reg in insn 77
changing reg in insn 94
changing reg in insn 92
changing reg in insn 90
changing reg in insn 88
changing reg in insn 86
changing reg in insn 84
changing reg in insn 82
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 99
changing reg in insn 116
changing reg in insn 114
changing reg in insn 112
changing reg in insn 110
changing reg in insn 108
changing reg in insn 106
changing reg in insn 104
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 167
changing reg in insn 137
changing reg in insn 130
changing reg in insn 137
changing reg in insn 131
changing reg in insn 137
changing reg in insn 137
changing reg in insn 131
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 17 count 14 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 17 count 14 (    1)


Init

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 5[di] 17[flags] 21[xmm0] 37[r8]
;;  ref usage 	r0={16d,32u} r1={1d,5u} r2={34d,34u} r5={6d,8u} r7={1d,13u} r16={1e} r17={18d,4u} r21={2d,1u} r22={1d} r23={1d} r24={1d} r37={2d,29u} r38={1d} 
;;    total ref usage 211{84d,126u,1e} in 108{108 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 37 [r8]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 4 2 (set (reg/v/f:DI 37 r8 [orig:100 state ] [100])
        (reg:DI 2 cx [ state ])) blake_ref.c:203 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(note 4 2 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 4 11 2 (parallel [
            (set (reg:SI 0 ax [orig:102 D.5934 ] [102])
                (plus:SI (reg/v:SI 1 dx [orig:101 hashbitlen ] [101])
                    (const_int -224 [0xffffffffffffff20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 217 {*addsi_1}
     (nil))
(note 11 10 12 2 NOTE_INSN_DELETED)
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 0 ax [orig:102 D.5934 ] [102])
                (const_int -33 [0xffffffffffffffdf]))
            (const_int 0 [0]))) blake_ref.c:207 362 {*testsi_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) blake_ref.c:207 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 67)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

;; basic block 3, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 1 dx [orig:101 hashbitlen ] [101])
            (const_int 224 [0xe0]))) blake_ref.c:210 7 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) blake_ref.c:210 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 30)
;;  succ:       4 [28.0%]  (FALLTHRU)
;;              5 [72.0%] 
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

;; basic block 4, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [28.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx]
;; live  kill	 17 [flags]
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 20 4 (parallel [
            (set (reg/f:DI 0 ax [104])
                (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:211 218 {*adddi_1}
     (nil))
(insn 20 18 21 4 (set (reg:DI 2 cx [orig:106 MEM[(void *)&IV224] ] [106])
        (mem/u/c:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>) [0 MEM[(void *)&IV224]+0 S8 A256])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>) [0 MEM[(void *)&IV224]+0 S8 A256])
        (nil)))
(insn 21 20 22 4 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+0 S8 A8])
        (reg:DI 2 cx [orig:106 MEM[(void *)&IV224] ] [106])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 2 cx [orig:107 MEM[(void *)&IV224]+8 ] [107])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV224]+8 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV224]+8 S8 A64])
        (nil)))
(insn 23 22 24 4 (set (mem:DI (plus:DI (reg/f:DI 0 ax [104])
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 16B]+8 S8 A8])
        (reg:DI 2 cx [orig:107 MEM[(void *)&IV224]+8 ] [107])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 2 cx [orig:108 MEM[(void *)&IV224]+16 ] [108])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV224]+16 S8 A128])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV224]+16 S8 A128])
        (nil)))
(insn 25 24 26 4 (set (mem:DI (plus:DI (reg/f:DI 0 ax [104])
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+16 S8 A8])
        (reg:DI 2 cx [orig:108 MEM[(void *)&IV224]+16 ] [108])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 2 cx [orig:109 MEM[(void *)&IV224]+24 ] [109])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV224]+24 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV224]+24 S8 A64])
        (nil)))
(insn 27 26 161 4 (set (mem:DI (plus:DI (reg/f:DI 0 ax [104])
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 16B]+24 S8 A8])
        (reg:DI 2 cx [orig:109 MEM[(void *)&IV224]+24 ] [109])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(jump_insn 161 27 162 4 (set (pc)
        (label_ref 42)) 654 {jump}
     (nil)
 -> 42)
;;  succ:       6 [100.0%] 
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

(barrier 162 161 30)
;; basic block 5, loop depth 0, count 0, freq 111, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [72.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx]
;; live  kill	 17 [flags]
(code_label 30 162 31 5 72 "" [1 uses])
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 34 5 (parallel [
            (set (reg/f:DI 0 ax [110])
                (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:213 218 {*adddi_1}
     (nil))
(insn 34 32 35 5 (set (reg:DI 2 cx [orig:112 MEM[(void *)&IV256] ] [112])
        (mem/u/c:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>) [0 MEM[(void *)&IV256]+0 S8 A256])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>) [0 MEM[(void *)&IV256]+0 S8 A256])
        (nil)))
(insn 35 34 36 5 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+0 S8 A8])
        (reg:DI 2 cx [orig:112 MEM[(void *)&IV256] ] [112])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:DI 2 cx [orig:113 MEM[(void *)&IV256]+8 ] [113])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV256]+8 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV256]+8 S8 A64])
        (nil)))
(insn 37 36 38 5 (set (mem:DI (plus:DI (reg/f:DI 0 ax [110])
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 16B]+8 S8 A8])
        (reg:DI 2 cx [orig:113 MEM[(void *)&IV256]+8 ] [113])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 2 cx [orig:114 MEM[(void *)&IV256]+16 ] [114])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV256]+16 S8 A128])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV256]+16 S8 A128])
        (nil)))
(insn 39 38 40 5 (set (mem:DI (plus:DI (reg/f:DI 0 ax [110])
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+16 S8 A8])
        (reg:DI 2 cx [orig:114 MEM[(void *)&IV256]+16 ] [114])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:DI 2 cx [orig:115 MEM[(void *)&IV256]+24 ] [115])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV256]+24 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV256]+24 S8 A64])
        (nil)))
(insn 41 40 42 5 (set (mem:DI (plus:DI (reg/f:DI 0 ax [110])
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 16B]+24 S8 A8])
        (reg:DI 2 cx [orig:115 MEM[(void *)&IV256]+24 ] [115])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

;; basic block 6, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 2 [cx] 5 [di] 17 [flags] 21 [xmm0]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 5 [di] 21 [xmm0]
;; live  kill	 17 [flags]
(code_label 42 41 43 6 73 "" [1 uses])
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 6 (set (mem:SI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 48 [0x30])) [2 state_18(D)->t32+0 S4 A64])
        (const_int 0 [0])) blake_ref.c:215 90 {*movsi_internal}
     (nil))
(insn 45 44 46 6 (set (mem:SI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 52 [0x34])) [2 state_18(D)->t32+4 S4 A32])
        (const_int 0 [0])) blake_ref.c:216 90 {*movsi_internal}
     (nil))
(note 46 45 50 6 NOTE_INSN_DELETED)
(insn 50 46 53 6 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 56 [0x38])) [0  S8 A8])
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(note 53 50 54 6 NOTE_INSN_DELETED)
(insn 54 53 55 6 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 112 [0x70])) [0  S8 A8])
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 55 54 56 6 (parallel [
            (set (reg/f:DI 5 di [123])
                (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 56 55 170 6 (parallel [
            (set (reg/f:DI 5 di [123])
                (and:DI (reg/f:DI 5 di [123])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (nil))
(insn 170 56 57 6 (set (reg/f:SI 0 ax [orig:117 D.5936 ] [117])
        (reg:SI 37 r8 [orig:100 state ] [100])) 90 {*movsi_internal}
     (nil))
(insn 57 170 171 6 (parallel [
            (set (reg/f:SI 0 ax [orig:117 D.5936 ] [117])
                (minus:SI (reg/f:SI 0 ax [orig:117 D.5936 ] [117])
                    (reg:SI 5 di [123])))
            (clobber (reg:CC 17 flags))
        ]) 260 {*subsi_1}
     (nil))
(insn 171 57 58 6 (set (reg/f:SI 0 ax [orig:117 D.5936 ] [117])
        (reg/f:SI 0 ax [orig:117 D.5936 ] [117])) 90 {*movsi_internal}
     (nil))
(insn 58 171 59 6 (set (reg:SI 2 cx [118])
        (plus:SI (reg/f:SI 0 ax [orig:117 D.5936 ] [117])
            (const_int 120 [0x78]))) 213 {*leasi}
     (nil))
(note 59 58 60 6 NOTE_INSN_DELETED)
(insn 60 59 61 6 (parallel [
            (set (reg:SI 2 cx [124])
                (lshiftrt:SI (reg:SI 2 cx [118])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 544 {*lshrsi3_1}
     (nil))
(insn 61 60 168 6 (set (reg:DI 2 cx [125])
        (zero_extend:DI (reg:SI 2 cx [124]))) 133 {*zero_extendsidi2}
     (nil))
(insn 168 61 62 6 (set (reg:DI 0 ax [119])
        (const_int 0 [0])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn 62 168 63 6 (parallel [
            (set (reg:DI 2 cx [125])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [123])
                (plus:DI (ashift:DI (reg:DI 2 cx [125])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [123])))
            (set (mem:BLK (reg/f:DI 5 di [123]) [0  A64])
                (const_int 0 [0]))
            (use (reg:DI 0 ax [119]))
            (use (reg:DI 2 cx [125]))
        ]) 933 {*rep_stosdi_rex64}
     (nil))
(insn 63 62 64 6 (set (reg:V4SI 21 xmm0 [126])
        (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])) blake_ref.c:221 1194 {*movv4si_internal}
     (expr_list:REG_EQUIV (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])
        (nil)))
(insn 64 63 163 6 (set (mem:V16QI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 120 [0x78])) [2 MEM[(unsigned int *)state_18(D) + 120B]+0 S16 A32])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [126])
            ] UNSPEC_STOREU)) blake_ref.c:221 1312 {sse2_storedquv16qi}
     (nil))
(jump_insn 163 64 164 6 (set (pc)
        (label_ref 142)) 654 {jump}
     (nil)
 -> 142)
;;  succ:       12 [100.0%] 
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

(barrier 164 163 67)
;; basic block 7, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 67 164 68 7 71 "" [1 uses])
(note 68 67 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 7 (parallel [
            (set (reg:SI 2 cx [orig:127 D.5934 ] [127])
                (plus:SI (reg/v:SI 1 dx [orig:101 hashbitlen ] [101])
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 217 {*addsi_1}
     (nil))
(note 70 69 5 7 NOTE_INSN_DELETED)
(insn 5 70 71 7 (set (reg:SI 0 ax [orig:88 D.5935 ] [88])
        (const_int 2 [0x2])) blake_ref.c:249 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))
(insn 71 5 72 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 2 cx [orig:127 D.5934 ] [127])
                (const_int -129 [0xffffffffffffff7f]))
            (const_int 0 [0]))) blake_ref.c:227 362 {*testsi_1}
     (nil))
(jump_insn 72 71 73 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 148)
            (pc))) blake_ref.c:227 612 {*jcc_1}
     (int_list:REG_BR_PROB 6700 (nil))
 -> 148)
;;  succ:       8 [33.0%]  (FALLTHRU)
;;              13 [67.0%] 
;; lr  out 	 0 [ax] 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 1 [dx] 7 [sp] 37 [r8]

;; basic block 8, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [33.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 73 72 74 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 1 dx [orig:101 hashbitlen ] [101])
            (const_int 384 [0x180]))) blake_ref.c:230 7 {*cmpsi_1}
     (nil))
(jump_insn 75 74 76 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 97)
            (pc))) blake_ref.c:230 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 97)
;;  succ:       9 [28.0%]  (FALLTHRU)
;;              10 [72.0%] 
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

;; basic block 9, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [28.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx]
;; live  kill	 17 [flags]
(note 76 75 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 79 9 (parallel [
            (set (reg/f:DI 0 ax [129])
                (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:231 218 {*adddi_1}
     (nil))
(insn 79 77 80 9 (set (reg:DI 2 cx [orig:131 MEM[(void *)&IV384] ] [131])
        (mem/u/c:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>) [0 MEM[(void *)&IV384]+0 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>) [0 MEM[(void *)&IV384]+0 S8 A256])
        (nil)))
(insn 80 79 81 9 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 136 [0x88])) [0 MEM[(void *)state_18(D) + 136B]+0 S8 A8])
        (reg:DI 2 cx [orig:131 MEM[(void *)&IV384] ] [131])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 81 80 82 9 (set (reg:DI 2 cx [orig:132 MEM[(void *)&IV384]+8 ] [132])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV384]+8 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV384]+8 S8 A64])
        (nil)))
(insn 82 81 83 9 (set (mem:DI (plus:DI (reg/f:DI 0 ax [129])
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 136B]+8 S8 A8])
        (reg:DI 2 cx [orig:132 MEM[(void *)&IV384]+8 ] [132])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 83 82 84 9 (set (reg:DI 2 cx [orig:133 MEM[(void *)&IV384]+16 ] [133])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV384]+16 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV384]+16 S8 A128])
        (nil)))
(insn 84 83 85 9 (set (mem:DI (plus:DI (reg/f:DI 0 ax [129])
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 136B]+16 S8 A8])
        (reg:DI 2 cx [orig:133 MEM[(void *)&IV384]+16 ] [133])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 85 84 86 9 (set (reg:DI 2 cx [orig:134 MEM[(void *)&IV384]+24 ] [134])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV384]+24 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV384]+24 S8 A64])
        (nil)))
(insn 86 85 87 9 (set (mem:DI (plus:DI (reg/f:DI 0 ax [129])
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 136B]+24 S8 A8])
        (reg:DI 2 cx [orig:134 MEM[(void *)&IV384]+24 ] [134])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 87 86 88 9 (set (reg:DI 2 cx [orig:135 MEM[(void *)&IV384]+32 ] [135])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 32 [0x20]))) [0 MEM[(void *)&IV384]+32 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 32 [0x20]))) [0 MEM[(void *)&IV384]+32 S8 A256])
        (nil)))
(insn 88 87 89 9 (set (mem:DI (plus:DI (reg/f:DI 0 ax [129])
                (const_int 32 [0x20])) [0 MEM[(void *)state_18(D) + 136B]+32 S8 A8])
        (reg:DI 2 cx [orig:135 MEM[(void *)&IV384]+32 ] [135])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 89 88 90 9 (set (reg:DI 2 cx [orig:136 MEM[(void *)&IV384]+40 ] [136])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 40 [0x28]))) [0 MEM[(void *)&IV384]+40 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 40 [0x28]))) [0 MEM[(void *)&IV384]+40 S8 A64])
        (nil)))
(insn 90 89 91 9 (set (mem:DI (plus:DI (reg/f:DI 0 ax [129])
                (const_int 40 [0x28])) [0 MEM[(void *)state_18(D) + 136B]+40 S8 A8])
        (reg:DI 2 cx [orig:136 MEM[(void *)&IV384]+40 ] [136])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 91 90 92 9 (set (reg:DI 2 cx [orig:137 MEM[(void *)&IV384]+48 ] [137])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 48 [0x30]))) [0 MEM[(void *)&IV384]+48 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 48 [0x30]))) [0 MEM[(void *)&IV384]+48 S8 A128])
        (nil)))
(insn 92 91 93 9 (set (mem:DI (plus:DI (reg/f:DI 0 ax [129])
                (const_int 48 [0x30])) [0 MEM[(void *)state_18(D) + 136B]+48 S8 A8])
        (reg:DI 2 cx [orig:137 MEM[(void *)&IV384]+48 ] [137])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 93 92 94 9 (set (reg:DI 2 cx [orig:138 MEM[(void *)&IV384]+56 ] [138])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 56 [0x38]))) [0 MEM[(void *)&IV384]+56 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 56 [0x38]))) [0 MEM[(void *)&IV384]+56 S8 A64])
        (nil)))
(insn 94 93 165 9 (set (mem:DI (plus:DI (reg/f:DI 0 ax [129])
                (const_int 56 [0x38])) [0 MEM[(void *)state_18(D) + 136B]+56 S8 A8])
        (reg:DI 2 cx [orig:138 MEM[(void *)&IV384]+56 ] [138])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(jump_insn 165 94 166 9 (set (pc)
        (label_ref 117)) 654 {jump}
     (nil)
 -> 117)
;;  succ:       11 [100.0%] 
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

(barrier 166 165 97)
;; basic block 10, loop depth 0, count 0, freq 37, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [72.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx]
;; live  kill	 17 [flags]
(code_label 97 166 98 10 76 "" [1 uses])
(note 98 97 99 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 101 10 (parallel [
            (set (reg/f:DI 0 ax [139])
                (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:233 218 {*adddi_1}
     (nil))
(insn 101 99 102 10 (set (reg:DI 2 cx [orig:141 MEM[(void *)&IV512] ] [141])
        (mem/u/c:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>) [0 MEM[(void *)&IV512]+0 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>) [0 MEM[(void *)&IV512]+0 S8 A256])
        (nil)))
(insn 102 101 103 10 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 136 [0x88])) [0 MEM[(void *)state_18(D) + 136B]+0 S8 A8])
        (reg:DI 2 cx [orig:141 MEM[(void *)&IV512] ] [141])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 103 102 104 10 (set (reg:DI 2 cx [orig:142 MEM[(void *)&IV512]+8 ] [142])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV512]+8 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV512]+8 S8 A64])
        (nil)))
(insn 104 103 105 10 (set (mem:DI (plus:DI (reg/f:DI 0 ax [139])
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 136B]+8 S8 A8])
        (reg:DI 2 cx [orig:142 MEM[(void *)&IV512]+8 ] [142])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 105 104 106 10 (set (reg:DI 2 cx [orig:143 MEM[(void *)&IV512]+16 ] [143])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV512]+16 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV512]+16 S8 A128])
        (nil)))
(insn 106 105 107 10 (set (mem:DI (plus:DI (reg/f:DI 0 ax [139])
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 136B]+16 S8 A8])
        (reg:DI 2 cx [orig:143 MEM[(void *)&IV512]+16 ] [143])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 107 106 108 10 (set (reg:DI 2 cx [orig:144 MEM[(void *)&IV512]+24 ] [144])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV512]+24 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV512]+24 S8 A64])
        (nil)))
(insn 108 107 109 10 (set (mem:DI (plus:DI (reg/f:DI 0 ax [139])
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 136B]+24 S8 A8])
        (reg:DI 2 cx [orig:144 MEM[(void *)&IV512]+24 ] [144])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 109 108 110 10 (set (reg:DI 2 cx [orig:145 MEM[(void *)&IV512]+32 ] [145])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 32 [0x20]))) [0 MEM[(void *)&IV512]+32 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 32 [0x20]))) [0 MEM[(void *)&IV512]+32 S8 A256])
        (nil)))
(insn 110 109 111 10 (set (mem:DI (plus:DI (reg/f:DI 0 ax [139])
                (const_int 32 [0x20])) [0 MEM[(void *)state_18(D) + 136B]+32 S8 A8])
        (reg:DI 2 cx [orig:145 MEM[(void *)&IV512]+32 ] [145])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 111 110 112 10 (set (reg:DI 2 cx [orig:146 MEM[(void *)&IV512]+40 ] [146])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 40 [0x28]))) [0 MEM[(void *)&IV512]+40 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 40 [0x28]))) [0 MEM[(void *)&IV512]+40 S8 A64])
        (nil)))
(insn 112 111 113 10 (set (mem:DI (plus:DI (reg/f:DI 0 ax [139])
                (const_int 40 [0x28])) [0 MEM[(void *)state_18(D) + 136B]+40 S8 A8])
        (reg:DI 2 cx [orig:146 MEM[(void *)&IV512]+40 ] [146])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 113 112 114 10 (set (reg:DI 2 cx [orig:147 MEM[(void *)&IV512]+48 ] [147])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 48 [0x30]))) [0 MEM[(void *)&IV512]+48 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 48 [0x30]))) [0 MEM[(void *)&IV512]+48 S8 A128])
        (nil)))
(insn 114 113 115 10 (set (mem:DI (plus:DI (reg/f:DI 0 ax [139])
                (const_int 48 [0x30])) [0 MEM[(void *)state_18(D) + 136B]+48 S8 A8])
        (reg:DI 2 cx [orig:147 MEM[(void *)&IV512]+48 ] [147])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 115 114 116 10 (set (reg:DI 2 cx [orig:148 MEM[(void *)&IV512]+56 ] [148])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 56 [0x38]))) [0 MEM[(void *)&IV512]+56 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 56 [0x38]))) [0 MEM[(void *)&IV512]+56 S8 A64])
        (nil)))
(insn 116 115 117 10 (set (mem:DI (plus:DI (reg/f:DI 0 ax [139])
                (const_int 56 [0x38])) [0 MEM[(void *)state_18(D) + 136B]+56 S8 A8])
        (reg:DI 2 cx [orig:148 MEM[(void *)&IV512]+56 ] [148])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

;; basic block 11, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 2 [cx] 5 [di] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 5 [di]
;; live  kill	 17 [flags]
(code_label 117 116 118 11 77 "" [1 uses])
(note 118 117 119 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 200 [0xc8])) [3 state_18(D)->t64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:235 89 {*movdi_internal}
     (nil))
(insn 120 119 121 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 208 [0xd0])) [3 state_18(D)->t64+8 S8 A64])
        (const_int 0 [0])) blake_ref.c:236 89 {*movdi_internal}
     (nil))
(note 121 120 125 11 NOTE_INSN_DELETED)
(insn 125 121 128 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 216 [0xd8])) [0  S8 A8])
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(note 128 125 129 11 NOTE_INSN_DELETED)
(insn 129 128 130 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 272 [0x110])) [0  S8 A8])
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 130 129 131 11 (parallel [
            (set (reg/f:DI 5 di [156])
                (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                    (const_int 224 [0xe0])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 131 130 172 11 (parallel [
            (set (reg/f:DI 5 di [156])
                (and:DI (reg/f:DI 5 di [156])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (nil))
(insn 172 131 132 11 (set (reg/f:SI 0 ax [orig:150 D.5936 ] [150])
        (reg:SI 37 r8 [orig:100 state ] [100])) 90 {*movsi_internal}
     (nil))
(insn 132 172 173 11 (parallel [
            (set (reg/f:SI 0 ax [orig:150 D.5936 ] [150])
                (minus:SI (reg/f:SI 0 ax [orig:150 D.5936 ] [150])
                    (reg:SI 5 di [156])))
            (clobber (reg:CC 17 flags))
        ]) 260 {*subsi_1}
     (nil))
(insn 173 132 133 11 (set (reg/f:SI 0 ax [orig:150 D.5936 ] [150])
        (reg/f:SI 0 ax [orig:150 D.5936 ] [150])) 90 {*movsi_internal}
     (nil))
(insn 133 173 134 11 (set (reg:SI 2 cx [151])
        (plus:SI (reg/f:SI 0 ax [orig:150 D.5936 ] [150])
            (const_int 280 [0x118]))) 213 {*leasi}
     (nil))
(note 134 133 135 11 NOTE_INSN_DELETED)
(insn 135 134 136 11 (parallel [
            (set (reg:SI 2 cx [157])
                (lshiftrt:SI (reg:SI 2 cx [151])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 544 {*lshrsi3_1}
     (nil))
(insn 136 135 167 11 (set (reg:DI 2 cx [158])
        (zero_extend:DI (reg:SI 2 cx [157]))) 133 {*zero_extendsidi2}
     (nil))
(insn 167 136 137 11 (set (reg:DI 0 ax [152])
        (const_int 0 [0])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn 137 167 138 11 (parallel [
            (set (reg:DI 2 cx [158])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [156])
                (plus:DI (ashift:DI (reg:DI 2 cx [158])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [156])))
            (set (mem:BLK (reg/f:DI 5 di [156]) [0  A64])
                (const_int 0 [0]))
            (use (reg:DI 0 ax [152]))
            (use (reg:DI 2 cx [158]))
        ]) 933 {*rep_stosdi_rex64}
     (nil))
(insn 138 137 139 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 344 [0x158])) [3 state_18(D)->salt64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:241 89 {*movdi_internal}
     (nil))
(insn 139 138 140 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 352 [0x160])) [3 state_18(D)->salt64+8 S8 A64])
        (const_int 0 [0])) blake_ref.c:242 89 {*movdi_internal}
     (nil))
(insn 140 139 141 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 360 [0x168])) [3 state_18(D)->salt64+16 S8 A64])
        (const_int 0 [0])) blake_ref.c:243 89 {*movdi_internal}
     (nil))
(insn 141 140 142 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 368 [0x170])) [3 state_18(D)->salt64+24 S8 A64])
        (const_int 0 [0])) blake_ref.c:244 89 {*movdi_internal}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

;; basic block 12, loop depth 0, count 0, freq 205, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 142 141 143 12 74 "" [1 uses])
(note 143 142 144 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 12 (set (mem:SI (reg/v/f:DI 37 r8 [orig:100 state ] [100]) [2 state_18(D)->hashbitlen+0 S4 A64])
        (reg/v:SI 1 dx [orig:101 hashbitlen ] [101])) blake_ref.c:251 90 {*movsi_internal}
     (nil))
(insn 145 144 146 12 (set (mem:SI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 4 [0x4])) [2 state_18(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:252 90 {*movsi_internal}
     (nil))
(insn 146 145 147 12 (set (mem:SI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 8 [0x8])) [2 state_18(D)->init+0 S4 A64])
        (const_int 1 [0x1])) blake_ref.c:253 90 {*movsi_internal}
     (nil))
(insn 147 146 6 12 (set (mem:SI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 12 [0xc])) [2 state_18(D)->nullt+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:254 90 {*movsi_internal}
     (nil))
(insn 6 147 148 12 (set (reg:SI 0 ax [orig:88 D.5935 ] [88])
        (const_int 0 [0])) blake_ref.c:256 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       13 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 12, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [67.0%] 
;;              12 [100.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 148 6 149 13 75 "" [1 uses])
(note 149 148 154 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 154 149 155 13 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:88 D.5935 ] [88])) blake_ref.c:257 90 {*movsi_internal}
     (nil))
(insn 155 154 169 13 (use (reg/i:SI 0 ax)) blake_ref.c:257 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 169 155 0 NOTE_INSN_DELETED)

;; Function AddSalt (AddSalt, funcdef_no=14, decl_uid=3185, cgraph_uid=14, symbol_order=22)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) 0 {*bswapsi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) 0 {*bswapsi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) 0 {*bswapsi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) 0 {*bswapsi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) 0 {*bswapdi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 34:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) 0 {*bswapdi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) 0 {*bswapdi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 40:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) 0 {*bswapdi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 6
   Insn 51: point = 0
   Insn 50: point = 0
  BB 4
   Insn 57: point = 2
   Insn 7: point = 2
   Insn 27: point = 3
   Insn 26: point = 4
   Insn 25: point = 6
   Insn 24: point = 8
   Insn 23: point = 9
   Insn 22: point = 11
   Insn 21: point = 12
   Insn 20: point = 13
   Insn 19: point = 15
   Insn 18: point = 16
   Insn 17: point = 17
   Insn 16: point = 19
  BB 5
   Insn 6: point = 21
   Insn 43: point = 22
   Insn 42: point = 23
   Insn 41: point = 25
   Insn 40: point = 27
   Insn 39: point = 28
   Insn 38: point = 30
   Insn 37: point = 31
   Insn 36: point = 32
   Insn 35: point = 34
   Insn 34: point = 35
   Insn 33: point = 36
   Insn 32: point = 38
  BB 3
   Insn 14: point = 40
   Insn 13: point = 40
  BB 2
   Insn 11: point = 41
   Insn 10: point = 41
   Insn 5: point = 41
   Insn 3: point = 42
   Insn 2: point = 43
Compressing live ranges: from 44 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 50
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 2
changing reg in insn 43
changing reg in insn 40
changing reg in insn 37
changing reg in insn 34
changing reg in insn 27
changing reg in insn 24
changing reg in insn 21
changing reg in insn 18
changing reg in insn 13
changing reg in insn 10
changing reg in insn 42
changing reg in insn 39
changing reg in insn 36
changing reg in insn 33
changing reg in insn 26
changing reg in insn 23
changing reg in insn 20
changing reg in insn 17
changing reg in insn 3
changing reg in insn 41
changing reg in insn 38
changing reg in insn 35
changing reg in insn 32
changing reg in insn 25
changing reg in insn 22
changing reg in insn 19
changing reg in insn 16
changing reg in insn 39
changing reg in insn 36
changing reg in insn 33
changing reg in insn 23
changing reg in insn 20
changing reg in insn 17
changing reg in insn 38
changing reg in insn 35
changing reg in insn 32
changing reg in insn 22
changing reg in insn 19
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)


AddSalt

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 17[flags]
;;  ref usage 	r0={20d,19u} r1={1d,8u,12e} r2={1d,10u,8e} r7={1d,6u} r17={2d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r37={1d} r38={1d} 
;;    total ref usage 96{31d,45u,20e} in 34{34 regular + 0 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 8 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 8 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 10 2 (set (reg:SI 0 ax [orig:87 D.5941 ] [87])
        (const_int 1 [0x1])) blake_ref.c:269 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 10 5 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                    (const_int 8 [0x8])) [2 state_4(D)->init+0 S4 A64])
            (const_int 1 [0x1]))) blake_ref.c:268 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 44)
            (pc))) blake_ref.c:268 612 {*jcc_1}
     (int_list:REG_BR_PROB 6218 (nil))
 -> 44)
;;  succ:       6 [62.2%] 
;;              3 [37.8%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 3782, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [37.8%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 2 cx [orig:143 state ] [143]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:271 7 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) blake_ref.c:271 612 {*jcc_1}
     (int_list:REG_BR_PROB 6100 (nil))
 -> 30)
;;  succ:       4 [39.0%]  (FALLTHRU)
;;              5 [61.0%] 
;; lr  out 	 1 [dx] 2 [cx] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 1475, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [39.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 0 ax [orig:145 MEM[(const BitSequence *)salt_7(D)] ] [145])
        (mem:SI (reg/v/f:DI 1 dx [orig:144 salt ] [144]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:DI 1 dx [orig:144 salt ] [144]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8])
        (nil)))
(insn 17 16 18 4 (set (reg:SI 0 ax [orig:90 D.5943 ] [90])
        (bswap:SI (reg:SI 0 ax [orig:145 MEM[(const BitSequence *)salt_7(D)] ] [145]))) 765 {*bswapsi2}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 120 [0x78])) [2 state_4(D)->salt32+0 S4 A64])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/v/f:DI 1 dx [orig:144 salt ] [144]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8]))
            (nil))))
(insn 18 17 19 4 (set (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 120 [0x78])) [2 state_4(D)->salt32+0 S4 A64])
        (reg:SI 0 ax [orig:90 D.5943 ] [90])) blake_ref.c:272 90 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:SI 0 ax [orig:146 MEM[(const BitSequence *)salt_7(D) + 4B] ] [146])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8])
        (nil)))
(insn 20 19 21 4 (set (reg:SI 0 ax [orig:91 D.5943 ] [91])
        (bswap:SI (reg:SI 0 ax [orig:146 MEM[(const BitSequence *)salt_7(D) + 4B] ] [146]))) 765 {*bswapsi2}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 124 [0x7c])) [2 state_4(D)->salt32+4 S4 A32])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                        (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8]))
            (nil))))
(insn 21 20 22 4 (set (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 124 [0x7c])) [2 state_4(D)->salt32+4 S4 A32])
        (reg:SI 0 ax [orig:91 D.5943 ] [91])) blake_ref.c:273 90 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 ax [orig:147 MEM[(const BitSequence *)salt_7(D) + 8B] ] [147])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8])
        (nil)))
(insn 23 22 24 4 (set (reg:SI 0 ax [orig:92 D.5943 ] [92])
        (bswap:SI (reg:SI 0 ax [orig:147 MEM[(const BitSequence *)salt_7(D) + 8B] ] [147]))) 765 {*bswapsi2}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 128 [0x80])) [2 state_4(D)->salt32+8 S4 A64])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                        (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8]))
            (nil))))
(insn 24 23 25 4 (set (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 128 [0x80])) [2 state_4(D)->salt32+8 S4 A64])
        (reg:SI 0 ax [orig:92 D.5943 ] [92])) blake_ref.c:274 90 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:SI 0 ax [orig:148 MEM[(const BitSequence *)salt_7(D) + 12B] ] [148])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)salt_7(D) + 12B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:SI 0 ax [orig:93 D.5943 ] [93])
        (bswap:SI (reg:SI 0 ax [orig:148 MEM[(const BitSequence *)salt_7(D) + 12B] ] [148]))) 765 {*bswapsi2}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 132 [0x84])) [2 state_4(D)->salt32+12 S4 A32])
        (nil)))
(insn 27 26 7 4 (set (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 132 [0x84])) [2 state_4(D)->salt32+12 S4 A32])
        (reg:SI 0 ax [orig:93 D.5943 ] [93])) blake_ref.c:275 90 {*movsi_internal}
     (nil))
(insn 7 27 57 4 (set (reg:SI 0 ax [orig:87 D.5941 ] [87])
        (const_int 0 [0])) blake_ref.c:284 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 57 7 58 4 (set (pc)
        (label_ref 44)) 654 {jump}
     (nil)
 -> 44)
;;  succ:       6 [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 58 57 30)
;; basic block 5, loop depth 0, count 0, freq 2307, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [61.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 30 58 31 5 83 "" [1 uses])
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:DI 0 ax [orig:149 MEM[(const BitSequence *)salt_7(D)] ] [149])
        (mem:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8])
        (nil)))
(insn 33 32 34 5 (set (reg:DI 0 ax [orig:94 D.5944 ] [94])
        (bswap:DI (reg:DI 0 ax [orig:149 MEM[(const BitSequence *)salt_7(D)] ] [149]))) 766 {*bswapdi2}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 344 [0x158])) [3 state_4(D)->salt64+0 S8 A64])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8]))
            (nil))))
(insn 34 33 35 5 (set (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 344 [0x158])) [3 state_4(D)->salt64+0 S8 A64])
        (reg:DI 0 ax [orig:94 D.5944 ] [94])) blake_ref.c:278 89 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:DI 0 ax [orig:150 MEM[(const BitSequence *)salt_7(D) + 8B] ] [150])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8])
        (nil)))
(insn 36 35 37 5 (set (reg:DI 0 ax [orig:95 D.5944 ] [95])
        (bswap:DI (reg:DI 0 ax [orig:150 MEM[(const BitSequence *)salt_7(D) + 8B] ] [150]))) 766 {*bswapdi2}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 352 [0x160])) [3 state_4(D)->salt64+8 S8 A64])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                        (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8]))
            (nil))))
(insn 37 36 38 5 (set (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 352 [0x160])) [3 state_4(D)->salt64+8 S8 A64])
        (reg:DI 0 ax [orig:95 D.5944 ] [95])) blake_ref.c:279 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 0 ax [orig:151 MEM[(const BitSequence *)salt_7(D) + 16B] ] [151])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8])
        (nil)))
(insn 39 38 40 5 (set (reg:DI 0 ax [orig:96 D.5944 ] [96])
        (bswap:DI (reg:DI 0 ax [orig:151 MEM[(const BitSequence *)salt_7(D) + 16B] ] [151]))) 766 {*bswapdi2}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 360 [0x168])) [3 state_4(D)->salt64+16 S8 A64])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                        (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8]))
            (nil))))
(insn 40 39 41 5 (set (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 360 [0x168])) [3 state_4(D)->salt64+16 S8 A64])
        (reg:DI 0 ax [orig:96 D.5944 ] [96])) blake_ref.c:280 89 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:DI 0 ax [orig:152 MEM[(const BitSequence *)salt_7(D) + 24B] ] [152])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)salt_7(D) + 24B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (set (reg:DI 0 ax [orig:97 D.5944 ] [97])
        (bswap:DI (reg:DI 0 ax [orig:152 MEM[(const BitSequence *)salt_7(D) + 24B] ] [152]))) 766 {*bswapdi2}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 368 [0x170])) [3 state_4(D)->salt64+24 S8 A64])
        (nil)))
(insn 43 42 6 5 (set (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 368 [0x170])) [3 state_4(D)->salt64+24 S8 A64])
        (reg:DI 0 ax [orig:97 D.5944 ] [97])) blake_ref.c:281 89 {*movdi_internal}
     (nil))
(insn 6 43 44 5 (set (reg:SI 0 ax [orig:87 D.5941 ] [87])
        (const_int 0 [0])) blake_ref.c:284 90 {*movsi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 5, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [62.2%] 
;;              5 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 44 6 45 6 82 "" [2 uses])
(note 45 44 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 45 51 6 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:87 D.5941 ] [87])) blake_ref.c:285 90 {*movsi_internal}
     (nil))
(insn 51 50 59 6 (use (reg/i:SI 0 ax)) blake_ref.c:285 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 59 51 0 NOTE_INSN_DELETED)

;; Function Update (Update, funcdef_no=17, decl_uid=3189, cgraph_uid=17, symbol_order=25)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=-80, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-96, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 9
   Insn 44: point = 0
   Insn 43: point = 0
  BB 5
   Insn 46: point = 0
   Insn 21: point = 0
   Insn 20: point = 0
   Insn 19: point = 1
   Insn 18: point = 2
  BB 4
   Insn 15: point = 4
   Insn 14: point = 4
  BB 3
   Insn 12: point = 5
   Insn 11: point = 5
  BB 8
   Insn 36: point = 6
   Insn 35: point = 6
   Insn 34: point = 7
   Insn 33: point = 8
  BB 7
   Insn 30: point = 10
   Insn 29: point = 10
  BB 6
   Insn 27: point = 11
   Insn 26: point = 11
  BB 2
   Insn 9: point = 12
   Insn 8: point = 12
   Insn 4: point = 12
   Insn 3: point = 13
   Insn 2: point = 14
Compressing live ranges: from 15 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=-80, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-96, prev_offset=0)
changing reg in insn 2
changing reg in insn 35
changing reg in insn 29
changing reg in insn 20
changing reg in insn 14
changing reg in insn 8
changing reg in insn 3
changing reg in insn 34
changing reg in insn 19
changing reg in insn 4
changing reg in insn 33
changing reg in insn 26
changing reg in insn 18
changing reg in insn 11
deleting insn with uid = 2.
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 18.
deleting insn with uid = 19.
deleting insn with uid = 20.
deleting insn with uid = 33.
deleting insn with uid = 34.
deleting insn with uid = 35.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 14 count 10 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 14 count 10 (    1)


Update

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={3d,2u} r1={3d,2u} r2={3d,5u} r7={1d,11u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={7d,5u} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={2d} r26={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d,4u} r38={3d} r39={2d} r40={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 164{135d,29u,0e} in 15{13 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 2 cx [orig:91 state ] [91]) [2 state_2(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 24)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

;; basic block 3, loop depth 0, count 0, freq 5000, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 37 r8 [orig:93 databitlen ] [93])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 2071 (nil))
 -> 16)
;;  succ:       4 [79.3%]  (FALLTHRU)
;;              5 [20.7%] 
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

;; basic block 4, loop depth 0, count 0, freq 3964, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [79.3%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:91 state ] [91])
                    (const_int 4 [0x4])) [2 state_2(D)->datalen+0 S4 A32])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 37)
;;  succ:       9 [72.0%] 
;;              5 [28.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

;; basic block 5, loop depth 0, count 0, freq 2146, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [28.0%]  (FALLTHRU)
;;              3 [20.7%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 16 15 17 5 89 "" [1 uses])
(note 17 16 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 21 17 46 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 46 21 47 5 (set (pc)
        (label_ref 37)) 654 {jump}
     (nil)
 -> 37)
;;  succ:       9 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 47 46 24)
;; basic block 6, loop depth 0, count 0, freq 5000, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 24 47 25 6 88 "" [1 uses])
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 37 r8 [orig:93 databitlen ] [93])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 27 26 28 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 2900 (nil))
 -> 31)
;;  succ:       7 [71.0%]  (FALLTHRU)
;;              8 [29.0%] 
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

;; basic block 7, loop depth 0, count 0, freq 3550, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [71.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:91 state ] [91])
                    (const_int 4 [0x4])) [2 state_2(D)->datalen+0 S4 A32])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (nil))
(jump_insn 30 29 31 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 6218 (nil))
 -> 37)
;;  succ:       9 [62.2%] 
;;              8 [37.8%]  (FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

;; basic block 8, loop depth 0, count 0, freq 2793, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [37.8%]  (FALLTHRU)
;;              6 [29.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 31 30 32 8 91 "" [1 uses])
(note 32 31 36 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(call_insn 36 32 37 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 8, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [62.2%] 
;;              8 [100.0%]  (FALLTHRU)
;;              4 [72.0%] 
;;              5 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 37 36 38 9 90 "" [3 uses])
(note 38 37 43 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 43 38 44 9 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) blake_ref.c:403 90 {*movsi_internal}
     (nil))
(insn 44 43 48 9 (use (reg/i:SI 0 ax)) blake_ref.c:403 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 48 44 0 NOTE_INSN_DELETED)

;; Function Final (Final, funcdef_no=20, decl_uid=3192, cgraph_uid=20, symbol_order=28)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=-16, prev_offset=0)
Can eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-64, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 11:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 13:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 14:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 1081:  (0) =rm  (1) %0  (2) re {*addsi3_cc_overflow}
      Creating newreg=996 from oldreg=91, assigning class GENERAL_REGS to r996
 1081: {flags:CCC=cmp(r996:SI+r89:SI,r996:SI);r996:SI=r996:SI+r89:SI;}
    Inserting insn reload before:
 1161: r996:SI=r88:SI
    Inserting insn reload after:
 1162: r91:SI=r996:SI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1082:  (0) =rm  (1) %0  (2) re {addsi3_carry}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 26:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=997 from oldreg=635, assigning class GENERAL_REGS to r997
   26: {r997:SI=r997:SI 0>>0x18;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1163: r997:SI=r92:SI
    Inserting insn reload after:
 1164: r635:SI=r997:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 27:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=998 from oldreg=636, assigning class GENERAL_REGS to r998
   28: {r998:SI=r998:SI 0>>0x10;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1165: r998:SI=r92:SI
    Inserting insn reload after:
 1166: r636:SI=r998:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 29:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 30:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=999 from oldreg=637, assigning class GENERAL_REGS to r999
   30: {r999:SI=r999:SI 0>>0x8;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1167: r999:SI=r92:SI
    Inserting insn reload after:
 1168: r637:SI=r999:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 31:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 32:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 33:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1000 from oldreg=638, assigning class GENERAL_REGS to r1000
   33: {r1000:SI=r1000:SI 0>>0x18;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1169: r1000:SI=r91:SI
    Inserting insn reload after:
 1170: r638:SI=r1000:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 34:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1001 from oldreg=639, assigning class GENERAL_REGS to r1001
   35: {r1001:SI=r1001:SI 0>>0x10;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1171: r1001:SI=r91:SI
    Inserting insn reload after:
 1172: r639:SI=r1001:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 36:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1002 from oldreg=640, assigning class GENERAL_REGS to r1002
   37: {r1002:SI=r1002:SI 0>>0x8;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1173: r1002:SI=r91:SI
    Inserting insn reload after:
 1174: r640:SI=r1002:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 38:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 39:  (0) m  (1) qn {*movqi_internal}
            Staticly defined alt reject+=600
            0 Costly set: reject++
          alt=0,overall=601,losers=0,rld_nregs=0
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=0,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 1159:  (0) %!*a  (1) e {*testsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 52:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 53:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 62:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 99:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) m  (1) re {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 107:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 108:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 116:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 117:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 125:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 126:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (1) rBwBz {*call_value}
      Removing equiv init insn 132 (freq=140)
  132: r654:SI=[r633:DI+0x30]
      REG_EQUIV [r633:DI+0x30]
deleting insn with uid = 132.
Changing pseudo 654 in operand 1 of insn 133 on equiv [r633:DI+0x30]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=1003, assigning class GENERAL_REGS to r1003
  133: {r115:SI=r1003:SI-0x8;clobber flags:CC;}
      REG_DEAD r654:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r633:DI+0x30]-0x8
    Inserting insn reload before:
 1175: r1003:SI=[r633:DI+0x30]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1175:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 138:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 139:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 148:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) r {*cmpsi_ccno_1}
            3 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) r  (2) 0  (3) rm {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=0,overall=12,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 153:  (0) rm  (1) 0 {ashrsi3_cvt}
      Creating newreg=1004 from oldreg=660, assigning class GENERAL_REGS to r1004
  153: {r1004:SI=r1004:SI>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1176: r1004:SI=r89:SI
    Inserting insn reload after:
 1177: r660:SI=r1004:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 156:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 163:  (0) r  (1) rm {*extendsidi2_rex64}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 1 in insn 164:  (0) q  (1) 0  (2) qmn {*andqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=15,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 166:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=1005 from oldreg=671, assigning class GENERAL_REGS to r1005
      Creating newreg=1006, assigning class CREG to r1006
  166: {r1005:SI=r1005:SI>>r1006:QI;clobber flags:CC;}
      REG_DEAD r672:SI
      REG_UNUSED flags:CC
      REG_EQUAL 0x80>>r664:SI#0
    Inserting insn reload before:
 1178: r1005:SI=r672:SI
 1180: r1006:QI=r664:SI#0
    Inserting insn reload after:
 1179: r671:SI=r1005:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1180:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 167
	 Choosing alt 0 in insn 167:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 169:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 170:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 178:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 179:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) Ts {*leasi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 192:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 193:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 194:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 199:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 211:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 225:  (0) m  (1) re {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 226:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 227:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 230:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 231:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 232:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 235:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 242:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 243:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 244:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 246:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 261:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 267:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 268:  (0) m  (1) re {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 269:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 270:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 273:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 278:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 283:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 284:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 293:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 294:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 301:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 302:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 303:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 304:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 312:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 315:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 316 (freq=390)
  316: r704:SI=[r633:DI+0x10]
      REG_EQUIV [r633:DI+0x10]
deleting insn with uid = 316.
Changing pseudo 704 in operand 1 of insn 317 on equiv [r633:DI+0x10]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 317:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1007 from oldreg=703, assigning class GENERAL_REGS to r1007
  317: {r1007:SI=r1007:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r704:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r633:DI+0x10] 0>>0x8
    Inserting insn reload before:
 1181: r1007:SI=[r633:DI+0x10]
    Inserting insn reload after:
 1182: r703:SI=r1007:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1181:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 318:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 320:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 323:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 326:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 327 (freq=390)
  327: r711:SI=[r633:DI+0x14]
      REG_EQUIV [r633:DI+0x14]
deleting insn with uid = 327.
Changing pseudo 711 in operand 1 of insn 328 on equiv [r633:DI+0x14]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 328:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1008 from oldreg=710, assigning class GENERAL_REGS to r1008
  328: {r1008:SI=r1008:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r711:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r633:DI+0x14] 0>>0x8
    Inserting insn reload before:
 1183: r1008:SI=[r633:DI+0x14]
    Inserting insn reload after:
 1184: r710:SI=r1008:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1183:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 329:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 331:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 334:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 337:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 338 (freq=390)
  338: r718:SI=[r633:DI+0x18]
      REG_EQUIV [r633:DI+0x18]
deleting insn with uid = 338.
Changing pseudo 718 in operand 1 of insn 339 on equiv [r633:DI+0x18]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 339:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1009 from oldreg=717, assigning class GENERAL_REGS to r1009
  339: {r1009:SI=r1009:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r718:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r633:DI+0x18] 0>>0x8
    Inserting insn reload before:
 1185: r1009:SI=[r633:DI+0x18]
    Inserting insn reload after:
 1186: r717:SI=r1009:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1185:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 340:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 342:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 345:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 348:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 349 (freq=390)
  349: r725:SI=[r633:DI+0x1c]
      REG_EQUIV [r633:DI+0x1c]
deleting insn with uid = 349.
Changing pseudo 725 in operand 1 of insn 350 on equiv [r633:DI+0x1c]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 350:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1010 from oldreg=724, assigning class GENERAL_REGS to r1010
  350: {r1010:SI=r1010:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r725:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r633:DI+0x1c] 0>>0x8
    Inserting insn reload before:
 1187: r1010:SI=[r633:DI+0x1c]
    Inserting insn reload after:
 1188: r724:SI=r1010:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1187:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 351:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 353:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 356:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 359:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 360 (freq=390)
  360: r732:SI=[r633:DI+0x20]
      REG_EQUIV [r633:DI+0x20]
deleting insn with uid = 360.
Changing pseudo 732 in operand 1 of insn 361 on equiv [r633:DI+0x20]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 361:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1011 from oldreg=731, assigning class GENERAL_REGS to r1011
  361: {r1011:SI=r1011:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r732:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r633:DI+0x20] 0>>0x8
    Inserting insn reload before:
 1189: r1011:SI=[r633:DI+0x20]
    Inserting insn reload after:
 1190: r731:SI=r1011:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1189:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 362:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 364:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 367:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 370:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 371 (freq=390)
  371: r739:SI=[r633:DI+0x24]
      REG_EQUIV [r633:DI+0x24]
deleting insn with uid = 371.
Changing pseudo 739 in operand 1 of insn 372 on equiv [r633:DI+0x24]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 372:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1012 from oldreg=738, assigning class GENERAL_REGS to r1012
  372: {r1012:SI=r1012:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r739:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r633:DI+0x24] 0>>0x8
    Inserting insn reload before:
 1191: r1012:SI=[r633:DI+0x24]
    Inserting insn reload after:
 1192: r738:SI=r1012:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1191:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 373:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 375:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 378:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 381:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 382 (freq=390)
  382: r746:SI=[r633:DI+0x28]
      REG_EQUIV [r633:DI+0x28]
deleting insn with uid = 382.
Changing pseudo 746 in operand 1 of insn 383 on equiv [r633:DI+0x28]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 383:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1013 from oldreg=745, assigning class GENERAL_REGS to r1013
  383: {r1013:SI=r1013:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r746:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r633:DI+0x28] 0>>0x8
    Inserting insn reload before:
 1193: r1013:SI=[r633:DI+0x28]
    Inserting insn reload after:
 1194: r745:SI=r1013:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1193:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 384:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 386:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 392:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 395:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 396 (freq=147)
  396: r753:SI=[r633:DI+0x2c]
      REG_EQUIV [r633:DI+0x2c]
deleting insn with uid = 396.
Changing pseudo 753 in operand 1 of insn 397 on equiv [r633:DI+0x2c]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 397:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1014 from oldreg=752, assigning class GENERAL_REGS to r1014
  397: {r1014:SI=r1014:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r753:SI
      REG_UNUSED flags:CC
      REG_EQUAL [r633:DI+0x2c] 0>>0x8
    Inserting insn reload before:
 1195: r1014:SI=[r633:DI+0x2c]
    Inserting insn reload after:
 1196: r752:SI=r1014:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1195:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 398:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 400:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 407:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 408:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 409:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 410:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 411:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 413:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 415:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1083
	 Choosing alt 0 in insn 1083:  (0) =rm  (1) %0  (2) re {*adddi3_cc_overflow}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 1084:  (0) =rm  (1) %0  (2) re {adddi3_carry}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 422:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=1015 from oldreg=246, assigning class GENERAL_REGS to r1015
  422: {r1015:DI=r1015:DI 0>>0x20;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1197: r1015:DI=r245:DI
    Inserting insn reload after:
 1198: r246:DI=r1015:DI

            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 424:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1016 from oldreg=755, assigning class GENERAL_REGS to r1016
  424: {r1016:SI=r1016:SI 0>>0x18;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1199: r1016:SI=r246:DI#0
    Inserting insn reload after:
 1200: r755:SI=r1016:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1199:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 425:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 426:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1017 from oldreg=756, assigning class GENERAL_REGS to r1017
  426: {r1017:SI=r1017:SI 0>>0x10;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1201: r1017:SI=r246:DI#0
    Inserting insn reload after:
 1202: r756:SI=r1017:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1201:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 427:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 428:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1018 from oldreg=757, assigning class GENERAL_REGS to r1018
  428: {r1018:SI=r1018:SI 0>>0x8;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1203: r1018:SI=r246:DI#0
    Inserting insn reload after:
 1204: r757:SI=r1018:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1203:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 429:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 430:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 432:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1019 from oldreg=758, assigning class GENERAL_REGS to r1019
  432: {r1019:SI=r1019:SI 0>>0x18;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1205: r1019:SI=r245:DI#0
    Inserting insn reload after:
 1206: r758:SI=r1019:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1205:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 433:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 434:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1020 from oldreg=759, assigning class GENERAL_REGS to r1020
  434: {r1020:SI=r1020:SI 0>>0x10;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1207: r1020:SI=r245:DI#0
    Inserting insn reload after:
 1208: r759:SI=r1020:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1207:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 435:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 436:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1021 from oldreg=760, assigning class GENERAL_REGS to r1021
  436: {r1021:SI=r1021:SI 0>>0x8;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1209: r1021:SI=r245:DI#0
    Inserting insn reload after:
 1210: r760:SI=r1021:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1209:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 437:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 438:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 439:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=1022 from oldreg=263, assigning class GENERAL_REGS to r1022
  439: {r1022:DI=r1022:DI 0>>0x20;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1211: r1022:DI=r244:DI
    Inserting insn reload after:
 1212: r263:DI=r1022:DI

            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 441:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1023 from oldreg=761, assigning class GENERAL_REGS to r1023
  441: {r1023:SI=r1023:SI 0>>0x18;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1213: r1023:SI=r263:DI#0
    Inserting insn reload after:
 1214: r761:SI=r1023:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1213:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 442:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 443:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1024 from oldreg=762, assigning class GENERAL_REGS to r1024
  443: {r1024:SI=r1024:SI 0>>0x10;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1215: r1024:SI=r263:DI#0
    Inserting insn reload after:
 1216: r762:SI=r1024:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1215:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 444:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 445:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1025 from oldreg=763, assigning class GENERAL_REGS to r1025
  445: {r1025:SI=r1025:SI 0>>0x8;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1217: r1025:SI=r263:DI#0
    Inserting insn reload after:
 1218: r763:SI=r1025:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1217:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 446:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 447:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 449:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1026 from oldreg=764, assigning class GENERAL_REGS to r1026
  449: {r1026:SI=r1026:SI 0>>0x18;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1219: r1026:SI=r244:DI#0
    Inserting insn reload after:
 1220: r764:SI=r1026:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1219:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 450:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 451:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1027 from oldreg=765, assigning class GENERAL_REGS to r1027
  451: {r1027:SI=r1027:SI 0>>0x10;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1221: r1027:SI=r244:DI#0
    Inserting insn reload after:
 1222: r765:SI=r1027:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1221:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 452:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 453:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1028 from oldreg=766, assigning class GENERAL_REGS to r1028
  453: {r1028:SI=r1028:SI 0>>0x8;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1223: r1028:SI=r244:DI#0
    Inserting insn reload after:
 1224: r766:SI=r1028:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1223:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 454:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 455:  (0) m  (1) qn {*movqi_internal}
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Small class reload: reject+=3
          alt=0,overall=610,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=0,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1158:  (0) r  (1) e {*testsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 464:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 465:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 469:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 470:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 473:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 474:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 479:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 480:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 484:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 495:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 502:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =rm  (1) 0  (2) re {*subdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 504:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 511:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 516:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 519:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 522:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 523:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 524:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 525:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 528:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 534:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 535:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 546:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 547:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 550:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 555:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 556:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (1) rBwBz {*call_value}
      Removing equiv init insn 562 (freq=219)
  562: r781:DI=[r633:DI+0xc8]
      REG_EQUIV [r633:DI+0xc8]
deleting insn with uid = 562.
Changing pseudo 781 in operand 1 of insn 563 on equiv [r633:DI+0xc8]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
	 Choosing alt 3 in insn 563:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=1029, assigning class GENERAL_REGS to r1029
  563: {r292:DI=r1029:DI-0x8;clobber flags:CC;}
      REG_DEAD r781:DI
      REG_UNUSED flags:CC
      REG_EQUAL [r633:DI+0xc8]-0x8
    Inserting insn reload before:
 1225: r1029:DI=[r633:DI+0xc8]

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1225:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 566:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 567:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 568:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 571:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 572:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 575:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 580:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 581:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 584:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 590:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) r {*cmpsi_ccno_1}
            3 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 592:  (0) r  (2) 0  (3) rm {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 593:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Small class reload: reject+=3
          alt=0,overall=21,losers=2,rld_nregs=2
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 595:  (0) rm  (1) 0 {ashrsi3_cvt}
      Creating newreg=1030 from oldreg=788, assigning class GENERAL_REGS to r1030
  595: {r1030:SI=r1030:SI>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1226: r1030:SI=r242:SI
    Inserting insn reload after:
 1227: r788:SI=r1030:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 596:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 597:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 598:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 603:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 604:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 605:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=1031, assigning class CREG to r1031
  605: {r795:SI=r796:SI<<r1031:QI;clobber flags:CC;}
      REG_DEAD r796:SI
      REG_UNUSED flags:CC
      REG_EQUAL 0xff<<r298:SI#0
    Inserting insn reload before:
 1228: r1031:QI=r298:SI#0

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1228:  (0) =q  (1) q {*movqi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 1 in insn 606:  (0) q  (1) 0  (2) qmn {*andqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=15,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 608:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=1032 from oldreg=798, assigning class GENERAL_REGS to r1032
      Creating newreg=1033, assigning class CREG to r1033
  608: {r1032:SI=r1032:SI>>r1033:QI;clobber flags:CC;}
      REG_DEAD r799:SI
      REG_DEAD r792:SI
      REG_UNUSED flags:CC
      REG_EQUAL 0x80>>r792:SI#0
    Inserting insn reload before:
 1229: r1032:SI=r799:SI
 1231: r1033:QI=r792:SI#0
    Inserting insn reload after:
 1230: r798:SI=r1032:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1231:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 609
	 Choosing alt 0 in insn 609:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 611:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 612:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 616:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 620:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 621:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 624:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 625:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (0) =rm  (1) 0  (2) re {*subdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 627:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 628:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 636:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 637:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=1034 from oldreg=807, assigning class GENERAL_REGS to r1034
  637: {r1034:SI=r1034:SI-r242:SI;clobber flags:CC;}
      REG_UNUSED flags:CC
      REG_EQUAL 0x378-r242:SI
    Inserting insn reload before:
 1232: r1034:SI=r808:SI
    Inserting insn reload after:
 1233: r807:SI=r1034:SI

            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 638:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 639:  (0) =rm  (1) 0  (2) re {*subdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 640:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 641:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 642:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 643:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 645:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 646:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 649:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 653:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 658:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 660:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 661:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 662:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 667:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 670:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 671:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 672:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=1035 from oldreg=817, assigning class GENERAL_REGS to r1035
  672: {r1035:SI=r1035:SI-r242:SI;clobber flags:CC;}
      REG_DEAD r818:SI
      REG_DEAD r242:SI
      REG_UNUSED flags:CC
      REG_EQUAL 0x400-r242:SI
    Inserting insn reload before:
 1234: r1035:SI=r818:SI
    Inserting insn reload after:
 1235: r817:SI=r1035:SI

            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 673:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 674:  (0) =rm  (1) 0  (2) re {*subdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 675:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 676:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 677:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 681:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 682:  (0) rm  (1) 0  (2) re {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 683:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 684:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 686:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 687:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 688:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 689:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 694:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 695:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=1036 from oldreg=823, assigning class GENERAL_REGS to r1036
  695: {r1036:SI=r1036:SI-r242:SI;clobber flags:CC;}
      REG_UNUSED flags:CC
      REG_EQUAL 0x400-r242:SI
    Inserting insn reload before:
 1236: r1036:SI=r824:SI
    Inserting insn reload after:
 1237: r823:SI=r1036:SI

            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 696:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (0) =rm  (1) 0  (2) re {*subdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 698:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 699:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 700:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 701:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 703:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 704:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 707:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 711:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 716:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 718:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 719:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 722:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 723:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 724:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 725:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 727:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 728:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 729:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 730:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 733:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 734:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 735:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 738:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 739:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 742:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 743:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 744:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 749:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 750:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 753:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 754:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 755:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 758:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 759:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 761:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 770:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 771:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 774:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 775:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 777:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 778:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 779:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 781:  (0) r  (1) rmWz {*zero_extendsidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 782:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 784:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 785:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 787:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 788:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 789 (freq=610)
  789: r853:DI=[r633:DI+0x88]
      REG_EQUIV [r633:DI+0x88]
deleting insn with uid = 789.
Changing pseudo 853 in operand 1 of insn 790 on equiv [r633:DI+0x88]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 790:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1037 from oldreg=854, assigning class GENERAL_REGS to r1037
  790: {r1037:SI=r1037:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r853:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1238: r1037:SI=[r633:DI+0x88]
    Inserting insn reload after:
 1239: r854:SI=r1037:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1238:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 791:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 792:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 793:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 796:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 797:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 800:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 801:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 803:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 804:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 805:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 807:  (0) r  (1) rmWz {*zero_extendsidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 808:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 810:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 811:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 813:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 814:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 815 (freq=610)
  815: r871:DI=[r633:DI+0x90]
      REG_EQUIV [r633:DI+0x90]
deleting insn with uid = 815.
Changing pseudo 871 in operand 1 of insn 816 on equiv [r633:DI+0x90]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 816:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1038 from oldreg=872, assigning class GENERAL_REGS to r1038
  816: {r1038:SI=r1038:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r871:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1240: r1038:SI=[r633:DI+0x90]
    Inserting insn reload after:
 1241: r872:SI=r1038:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1240:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 817:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 818:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 819:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 822:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 823:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 826:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 827:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 829:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 830:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 831:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 833:  (0) r  (1) rmWz {*zero_extendsidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 834:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 836:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 837:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 839:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 840:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 841 (freq=610)
  841: r889:DI=[r633:DI+0x98]
      REG_EQUIV [r633:DI+0x98]
deleting insn with uid = 841.
Changing pseudo 889 in operand 1 of insn 842 on equiv [r633:DI+0x98]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 842:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1039 from oldreg=890, assigning class GENERAL_REGS to r1039
  842: {r1039:SI=r1039:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r889:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1242: r1039:SI=[r633:DI+0x98]
    Inserting insn reload after:
 1243: r890:SI=r1039:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1242:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 843:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 844:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 845:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 848:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 849:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 852:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 853:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 855:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 856:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 857:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 859:  (0) r  (1) rmWz {*zero_extendsidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 860:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 862:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 863:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 865:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 866:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 867 (freq=610)
  867: r907:DI=[r633:DI+0xa0]
      REG_EQUIV [r633:DI+0xa0]
deleting insn with uid = 867.
Changing pseudo 907 in operand 1 of insn 868 on equiv [r633:DI+0xa0]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 868:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1040 from oldreg=908, assigning class GENERAL_REGS to r1040
  868: {r1040:SI=r1040:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r907:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1244: r1040:SI=[r633:DI+0xa0]
    Inserting insn reload after:
 1245: r908:SI=r1040:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1244:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 869:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 870:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 871:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 874:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 875:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 878:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 879:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 881:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 882:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 883:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 885:  (0) r  (1) rmWz {*zero_extendsidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 886:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 888:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 889:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 891:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 892:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 893 (freq=610)
  893: r925:DI=[r633:DI+0xa8]
      REG_EQUIV [r633:DI+0xa8]
deleting insn with uid = 893.
Changing pseudo 925 in operand 1 of insn 894 on equiv [r633:DI+0xa8]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 894:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1041 from oldreg=926, assigning class GENERAL_REGS to r1041
  894: {r1041:SI=r1041:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r925:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1246: r1041:SI=[r633:DI+0xa8]
    Inserting insn reload after:
 1247: r926:SI=r1041:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1246:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 895:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 896:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 897:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 900:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 901:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 904:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 905:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 907:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 908:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 909:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 911:  (0) r  (1) rmWz {*zero_extendsidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 912:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 914:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 915:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 917:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 918:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 919 (freq=610)
  919: r943:DI=[r633:DI+0xb0]
      REG_EQUIV [r633:DI+0xb0]
deleting insn with uid = 919.
Changing pseudo 943 in operand 1 of insn 920 on equiv [r633:DI+0xb0]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 920:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1042 from oldreg=944, assigning class GENERAL_REGS to r1042
  920: {r1042:SI=r1042:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r943:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1248: r1042:SI=[r633:DI+0xb0]
    Inserting insn reload after:
 1249: r944:SI=r1042:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1248:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 921:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 922:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 923:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 924:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 929:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 930:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 933:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 934:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 936:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 937:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 938:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 940:  (0) r  (1) rmWz {*zero_extendsidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 941:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 943:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 944:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 946:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 947:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 948 (freq=230)
  948: r961:DI=[r633:DI+0xb8]
      REG_EQUIV [r633:DI+0xb8]
deleting insn with uid = 948.
Changing pseudo 961 in operand 1 of insn 949 on equiv [r633:DI+0xb8]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 949:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1043 from oldreg=962, assigning class GENERAL_REGS to r1043
  949: {r1043:SI=r1043:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r961:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1250: r1043:SI=[r633:DI+0xb8]
    Inserting insn reload after:
 1251: r962:SI=r1043:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1250:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 950:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 951:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 952:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 955:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 956:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 959:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 960:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 962:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 963:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 964:  (0) m  (1) qn {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 966:  (0) r  (1) rmWz {*zero_extendsidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 967:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 969:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 970:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 972:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 973:  (0) m  (1) qn {*movqi_internal}
      Removing equiv init insn 974 (freq=230)
  974: r979:DI=[r633:DI+0xc0]
      REG_EQUIV [r633:DI+0xc0]
deleting insn with uid = 974.
Changing pseudo 979 in operand 1 of insn 975 on equiv [r633:DI+0xc0]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 975:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=1044 from oldreg=980, assigning class GENERAL_REGS to r1044
  975: {r1044:SI=r1044:SI 0>>0x8;clobber flags:CC;}
      REG_DEAD r979:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1252: r1044:SI=[r633:DI+0xc0]
    Inserting insn reload after:
 1253: r980:SI=r1044:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1252:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 976:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 977:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 978:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 988:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 989:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 990:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 991:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 993:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 994:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 996:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1002:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1003:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1004:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1005:  (0) =rm  (1) 0  (2) re {*subdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1006:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1008:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1010:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1015:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 84
   Insn 1016: point = 0
   Insn 1015: point = 0
  BB 81
   Insn 1152: point = 0
   Insn 978: point = 0
   Insn 977: point = 1
   Insn 976: point = 3
   Insn 1253: point = 4
	Hard reg 0 is preferable by r1044 with profit 230
   Insn 975: point = 6
   Insn 1252: point = 6
   Insn 973: point = 7
   Insn 972: point = 8
   Insn 970: point = 9
   Insn 969: point = 10
   Insn 967: point = 11
   Insn 966: point = 12
   Insn 964: point = 13
   Insn 963: point = 14
   Insn 962: point = 16
   Insn 960: point = 17
   Insn 959: point = 18
   Insn 956: point = 19
   Insn 955: point = 20
   Insn 952: point = 21
   Insn 951: point = 22
   Insn 950: point = 23
   Insn 1251: point = 24
	Hard reg 0 is preferable by r1043 with profit 230
   Insn 949: point = 26
   Insn 1250: point = 26
   Insn 947: point = 27
   Insn 946: point = 28
   Insn 944: point = 29
   Insn 943: point = 30
   Insn 941: point = 31
   Insn 940: point = 32
   Insn 938: point = 33
   Insn 937: point = 34
   Insn 936: point = 36
   Insn 934: point = 37
   Insn 933: point = 38
   Insn 930: point = 39
   Insn 929: point = 40
  BB 80
   Insn 925: point = 42
   Insn 924: point = 42
   Insn 923: point = 42
   Insn 922: point = 43
   Insn 921: point = 44
   Insn 1249: point = 45
	Hard reg 0 is preferable by r1042 with profit 610
   Insn 920: point = 47
   Insn 1248: point = 47
   Insn 918: point = 48
   Insn 917: point = 49
   Insn 915: point = 50
   Insn 914: point = 51
   Insn 912: point = 52
   Insn 911: point = 53
   Insn 909: point = 54
   Insn 908: point = 55
   Insn 907: point = 57
   Insn 905: point = 58
   Insn 904: point = 59
   Insn 901: point = 60
   Insn 900: point = 61
   Insn 897: point = 62
   Insn 896: point = 63
   Insn 895: point = 64
   Insn 1247: point = 65
	Hard reg 0 is preferable by r1041 with profit 610
   Insn 894: point = 67
   Insn 1246: point = 67
   Insn 892: point = 68
   Insn 891: point = 69
   Insn 889: point = 70
   Insn 888: point = 71
   Insn 886: point = 72
   Insn 885: point = 73
   Insn 883: point = 74
   Insn 882: point = 75
   Insn 881: point = 77
   Insn 879: point = 78
   Insn 878: point = 79
   Insn 875: point = 80
   Insn 874: point = 81
   Insn 871: point = 82
   Insn 870: point = 83
   Insn 869: point = 84
   Insn 1245: point = 85
	Hard reg 0 is preferable by r1040 with profit 610
   Insn 868: point = 87
   Insn 1244: point = 87
   Insn 866: point = 88
   Insn 865: point = 89
   Insn 863: point = 90
   Insn 862: point = 91
   Insn 860: point = 92
   Insn 859: point = 93
   Insn 857: point = 94
   Insn 856: point = 95
   Insn 855: point = 97
   Insn 853: point = 98
   Insn 852: point = 99
   Insn 849: point = 100
   Insn 848: point = 101
   Insn 845: point = 102
   Insn 844: point = 103
   Insn 843: point = 104
   Insn 1243: point = 105
	Hard reg 0 is preferable by r1039 with profit 610
   Insn 842: point = 107
   Insn 1242: point = 107
   Insn 840: point = 108
   Insn 839: point = 109
   Insn 837: point = 110
   Insn 836: point = 111
   Insn 834: point = 112
   Insn 833: point = 113
   Insn 831: point = 114
   Insn 830: point = 115
   Insn 829: point = 117
   Insn 827: point = 118
   Insn 826: point = 119
   Insn 823: point = 120
   Insn 822: point = 121
   Insn 819: point = 122
   Insn 818: point = 123
   Insn 817: point = 124
   Insn 1241: point = 125
	Hard reg 0 is preferable by r1038 with profit 610
   Insn 816: point = 127
   Insn 1240: point = 127
   Insn 814: point = 128
   Insn 813: point = 129
   Insn 811: point = 130
   Insn 810: point = 131
   Insn 808: point = 132
   Insn 807: point = 133
   Insn 805: point = 134
   Insn 804: point = 135
   Insn 803: point = 137
   Insn 801: point = 138
   Insn 800: point = 139
   Insn 797: point = 140
   Insn 796: point = 141
   Insn 793: point = 142
   Insn 792: point = 143
   Insn 791: point = 144
   Insn 1239: point = 145
	Hard reg 0 is preferable by r1037 with profit 610
   Insn 790: point = 147
   Insn 1238: point = 147
   Insn 788: point = 148
   Insn 787: point = 149
   Insn 785: point = 150
   Insn 784: point = 151
   Insn 782: point = 152
   Insn 781: point = 153
   Insn 779: point = 154
   Insn 778: point = 155
   Insn 777: point = 157
   Insn 775: point = 158
   Insn 774: point = 159
   Insn 771: point = 160
   Insn 770: point = 161
  BB 60
   Insn 1139: point = 163
   Insn 584: point = 163
   Insn 583: point = 163
   Insn 582: point = 163
   Insn 581: point = 164
   Insn 580: point = 164
  BB 79
   Insn 1150: point = 166
  BB 64
   Insn 1141: point = 167
   Insn 628: point = 167
   Insn 627: point = 168
   Insn 626: point = 170
   Insn 625: point = 172
   Insn 624: point = 174
  BB 63
   Insn 621: point = 175
   Insn 620: point = 176
  BB 62
   Insn 617: point = 179
   Insn 616: point = 179
  BB 59
   Insn 1137: point = 181
   Insn 575: point = 181
   Insn 574: point = 181
   Insn 573: point = 181
   Insn 572: point = 182
   Insn 571: point = 182
  BB 78
   Insn 762: point = 184
   Insn 761: point = 184
   Insn 759: point = 185
   Insn 758: point = 186
  BB 76
   Insn 1147: point = 189
   Insn 744: point = 189
   Insn 743: point = 190
   Insn 742: point = 191
   Insn 741: point = 191
   Insn 740: point = 191
   Insn 739: point = 192
   Insn 738: point = 192
  BB 77
   Insn 755: point = 194
   Insn 754: point = 195
   Insn 753: point = 196
   Insn 752: point = 196
   Insn 751: point = 196
   Insn 750: point = 197
   Insn 749: point = 197
  BB 75
   Insn 736: point = 199
   Insn 735: point = 199
   Insn 734: point = 200
   Insn 733: point = 201
  BB 70
   Insn 1145: point = 204
   Insn 689: point = 204
   Insn 688: point = 205
   Insn 687: point = 206
   Insn 686: point = 206
   Insn 685: point = 206
   Insn 684: point = 206
   Insn 683: point = 206
   Insn 682: point = 206
   Insn 681: point = 206
   Insn 680: point = 206
   Insn 679: point = 206
   Insn 678: point = 206
   Insn 677: point = 207
   Insn 676: point = 208
   Insn 675: point = 209
   Insn 674: point = 211
   Insn 673: point = 213
   Insn 1235: point = 215
	Hard reg 1 is preferable by r1035 with profit 245
   Insn 672: point = 217
   Insn 1234: point = 218
	Hard reg 1 is preferable by r1035 with profit 245
	Hard reg 2 is preferable by r1035 with profit 245
   Insn 671: point = 220
   Insn 670: point = 221
  BB 68
   Insn 1143: point = 222
   Insn 662: point = 222
   Insn 661: point = 223
   Insn 660: point = 224
   Insn 659: point = 224
   Insn 658: point = 224
   Insn 657: point = 224
  BB 67
   Insn 654: point = 226
   Insn 653: point = 226
  BB 66
   Insn 650: point = 228
   Insn 649: point = 228
   Insn 646: point = 228
   Insn 645: point = 230
   Insn 643: point = 232
   Insn 642: point = 232
   Insn 641: point = 234
   Insn 640: point = 236
   Insn 639: point = 236
   Insn 638: point = 238
   Insn 1233: point = 240
	Hard reg 2 is preferable by r1034 with profit 76
   Insn 637: point = 242
   Insn 1232: point = 242
   Insn 636: point = 243
  BB 74
   Insn 730: point = 245
   Insn 729: point = 246
   Insn 728: point = 247
   Insn 727: point = 247
   Insn 726: point = 247
   Insn 725: point = 247
   Insn 724: point = 247
   Insn 723: point = 247
   Insn 722: point = 248
  BB 73
   Insn 719: point = 251
   Insn 718: point = 252
   Insn 717: point = 252
   Insn 716: point = 252
   Insn 715: point = 252
  BB 72
   Insn 712: point = 254
   Insn 711: point = 254
  BB 71
   Insn 708: point = 256
   Insn 707: point = 256
   Insn 704: point = 256
   Insn 703: point = 258
   Insn 701: point = 260
   Insn 700: point = 260
   Insn 699: point = 262
   Insn 698: point = 264
   Insn 697: point = 264
   Insn 696: point = 266
   Insn 1237: point = 268
	Hard reg 2 is preferable by r1036 with profit 54
   Insn 695: point = 270
   Insn 1236: point = 270
   Insn 694: point = 271
  BB 69
   Insn 668: point = 273
   Insn 667: point = 273
  BB 65
   Insn 634: point = 274
   Insn 633: point = 274
  BB 61
   Insn 614: point = 275
   Insn 613: point = 275
   Insn 612: point = 276
   Insn 611: point = 277
   Insn 609: point = 277
   Insn 1230: point = 279
	Hard reg 2 is preferable by r1032 with profit 305
   Insn 608: point = 281
   Insn 1231: point = 282
   Insn 1229: point = 284
	Hard reg 2 is preferable by r1032 with profit 305
	Hard reg 38 is preferable by r1032 with profit 305
   Insn 607: point = 286
   Insn 606: point = 287
   Insn 605: point = 289
   Insn 1228: point = 291
   Insn 604: point = 292
   Insn 603: point = 293
   Insn 602: point = 295
   Insn 601: point = 297
   Insn 599: point = 298
   Insn 598: point = 300
   Insn 597: point = 302
   Insn 596: point = 303
   Insn 1227: point = 305
	Hard reg 2 is preferable by r1030 with profit 305
   Insn 595: point = 307
   Insn 1226: point = 307
   Insn 593: point = 308
   Insn 592: point = 310
   Insn 591: point = 312
   Insn 590: point = 312
  BB 58
   Insn 569: point = 314
   Insn 568: point = 314
   Insn 567: point = 314
   Insn 566: point = 315
  BB 44
   Insn 1129: point = 318
   Insn 484: point = 318
   Insn 483: point = 319
   Insn 482: point = 319
   Insn 481: point = 319
   Insn 480: point = 320
   Insn 479: point = 320
  BB 43
   Insn 1127: point = 322
   Insn 474: point = 322
   Insn 473: point = 323
   Insn 472: point = 323
   Insn 471: point = 323
   Insn 470: point = 324
   Insn 469: point = 324
  BB 42
   Insn 467: point = 326
   Insn 466: point = 326
   Insn 465: point = 327
   Insn 464: point = 328
  BB 57
   Insn 563: point = 331
   Insn 1225: point = 333
  BB 55
   Insn 1135: point = 335
   Insn 550: point = 335
   Insn 549: point = 335
   Insn 548: point = 335
   Insn 547: point = 336
   Insn 546: point = 336
  BB 56
   Insn 559: point = 338
   Insn 558: point = 338
   Insn 557: point = 338
   Insn 556: point = 339
   Insn 555: point = 339
  BB 54
   Insn 544: point = 341
   Insn 543: point = 341
  BB 53
   Insn 1133: point = 343
   Insn 538: point = 343
   Insn 537: point = 343
   Insn 536: point = 343
   Insn 535: point = 344
   Insn 534: point = 344
  BB 52
   Insn 532: point = 346
   Insn 531: point = 346
   Insn 530: point = 346
  BB 83
   Insn 1156: point = 348
   Insn 1010: point = 348
   Insn 1009: point = 348
   Insn 1008: point = 348
   Insn 1007: point = 348
   Insn 1006: point = 349
   Insn 1005: point = 350
   Insn 1004: point = 352
   Insn 1003: point = 354
   Insn 1002: point = 356
  BB 47
   Insn 1131: point = 358
   Insn 495: point = 358
  BB 46
   Insn 493: point = 359
   Insn 492: point = 359
  BB 51
   Insn 528: point = 360
   Insn 527: point = 360
   Insn 526: point = 360
   Insn 525: point = 360
   Insn 524: point = 360
   Insn 523: point = 360
   Insn 522: point = 361
  BB 50
   Insn 519: point = 364
   Insn 518: point = 365
   Insn 517: point = 365
   Insn 516: point = 365
   Insn 515: point = 365
  BB 49
   Insn 512: point = 367
   Insn 511: point = 367
  BB 48
   Insn 508: point = 368
   Insn 507: point = 368
   Insn 504: point = 369
   Insn 503: point = 369
   Insn 502: point = 371
   Insn 501: point = 373
   Insn 500: point = 375
  BB 45
   Insn 490: point = 377
   Insn 489: point = 377
  BB 41
   Insn 462: point = 378
   Insn 461: point = 378
  BB 40
   Insn 459: point = 379
   Insn 1158: point = 379
   Insn 455: point = 379
   Insn 454: point = 380
   Insn 1224: point = 381
	Hard reg 37 is preferable by r1028 with profit 610
   Insn 453: point = 383
   Insn 1223: point = 383
   Insn 452: point = 384
   Insn 1222: point = 385
	Hard reg 37 is preferable by r1027 with profit 610
   Insn 451: point = 387
   Insn 1221: point = 387
   Insn 450: point = 388
   Insn 1220: point = 389
	Hard reg 37 is preferable by r1026 with profit 610
   Insn 449: point = 391
   Insn 1219: point = 391
   Insn 447: point = 392
   Insn 446: point = 393
   Insn 1218: point = 394
	Hard reg 38 is preferable by r1025 with profit 610
   Insn 445: point = 396
   Insn 1217: point = 396
   Insn 444: point = 397
   Insn 1216: point = 398
	Hard reg 38 is preferable by r1024 with profit 610
   Insn 443: point = 400
   Insn 1215: point = 400
   Insn 442: point = 401
   Insn 1214: point = 402
	Hard reg 38 is preferable by r1023 with profit 610
   Insn 441: point = 404
   Insn 1213: point = 404
   Insn 1212: point = 405
	Hard reg 37 is preferable by r1022 with profit 610
   Insn 439: point = 407
   Insn 1211: point = 407
   Insn 438: point = 408
   Insn 437: point = 409
   Insn 1210: point = 410
	Hard reg 38 is preferable by r1021 with profit 610
   Insn 436: point = 412
   Insn 1209: point = 412
   Insn 435: point = 413
   Insn 1208: point = 414
	Hard reg 38 is preferable by r1020 with profit 610
   Insn 434: point = 416
   Insn 1207: point = 416
   Insn 433: point = 417
   Insn 1206: point = 418
	Hard reg 38 is preferable by r1019 with profit 610
   Insn 432: point = 420
   Insn 1205: point = 420
   Insn 430: point = 421
   Insn 429: point = 422
   Insn 1204: point = 423
	Hard reg 40 is preferable by r1018 with profit 610
   Insn 428: point = 425
   Insn 1203: point = 425
   Insn 427: point = 426
   Insn 1202: point = 427
	Hard reg 40 is preferable by r1017 with profit 610
   Insn 426: point = 429
   Insn 1201: point = 429
   Insn 425: point = 430
   Insn 1200: point = 431
	Hard reg 40 is preferable by r1016 with profit 610
   Insn 424: point = 433
   Insn 1199: point = 433
   Insn 1198: point = 434
	Hard reg 38 is preferable by r1015 with profit 610
   Insn 422: point = 436
   Insn 1197: point = 436
   Insn 1084: point = 437
   Insn 1083: point = 437
   Insn 415: point = 439
   Insn 413: point = 440
   Insn 412: point = 441
   Insn 411: point = 442
   Insn 410: point = 443
   Insn 409: point = 443
   Insn 408: point = 443
   Insn 407: point = 443
  BB 39
   Insn 1125: point = 444
   Insn 400: point = 444
   Insn 399: point = 445
   Insn 398: point = 447
   Insn 1196: point = 448
	Hard reg 0 is preferable by r1014 with profit 147
   Insn 397: point = 450
   Insn 1195: point = 450
   Insn 395: point = 451
   Insn 394: point = 452
   Insn 392: point = 453
   Insn 391: point = 454
  BB 38
   Insn 388: point = 456
   Insn 387: point = 456
   Insn 386: point = 456
   Insn 385: point = 457
   Insn 384: point = 458
   Insn 1194: point = 459
	Hard reg 0 is preferable by r1013 with profit 390
   Insn 383: point = 461
   Insn 1193: point = 461
   Insn 381: point = 462
   Insn 380: point = 463
   Insn 378: point = 464
   Insn 377: point = 465
   Insn 375: point = 466
   Insn 374: point = 467
   Insn 373: point = 468
   Insn 1192: point = 469
	Hard reg 0 is preferable by r1012 with profit 390
   Insn 372: point = 471
   Insn 1191: point = 471
   Insn 370: point = 472
   Insn 369: point = 473
   Insn 367: point = 474
   Insn 366: point = 475
   Insn 364: point = 476
   Insn 363: point = 477
   Insn 362: point = 478
   Insn 1190: point = 479
	Hard reg 0 is preferable by r1011 with profit 390
   Insn 361: point = 481
   Insn 1189: point = 481
   Insn 359: point = 482
   Insn 358: point = 483
   Insn 356: point = 484
   Insn 355: point = 485
   Insn 353: point = 486
   Insn 352: point = 487
   Insn 351: point = 488
   Insn 1188: point = 489
	Hard reg 0 is preferable by r1010 with profit 390
   Insn 350: point = 491
   Insn 1187: point = 491
   Insn 348: point = 492
   Insn 347: point = 493
   Insn 345: point = 494
   Insn 344: point = 495
   Insn 342: point = 496
   Insn 341: point = 497
   Insn 340: point = 498
   Insn 1186: point = 499
	Hard reg 0 is preferable by r1009 with profit 390
   Insn 339: point = 501
   Insn 1185: point = 501
   Insn 337: point = 502
   Insn 336: point = 503
   Insn 334: point = 504
   Insn 333: point = 505
   Insn 331: point = 506
   Insn 330: point = 507
   Insn 329: point = 508
   Insn 1184: point = 509
	Hard reg 0 is preferable by r1008 with profit 390
   Insn 328: point = 511
   Insn 1183: point = 511
   Insn 326: point = 512
   Insn 325: point = 513
   Insn 323: point = 514
   Insn 322: point = 515
   Insn 320: point = 516
   Insn 319: point = 517
   Insn 318: point = 518
   Insn 1182: point = 519
	Hard reg 0 is preferable by r1007 with profit 390
   Insn 317: point = 521
   Insn 1181: point = 521
   Insn 315: point = 522
   Insn 314: point = 523
   Insn 312: point = 524
   Insn 311: point = 525
  BB 19
   Insn 1115: point = 527
   Insn 142: point = 527
   Insn 141: point = 527
   Insn 140: point = 527
   Insn 139: point = 528
   Insn 138: point = 528
   Insn 137: point = 529
   Insn 136: point = 530
  BB 7
   Insn 1109: point = 533
   Insn 67: point = 533
   Insn 66: point = 534
   Insn 65: point = 534
   Insn 64: point = 534
   Insn 63: point = 535
   Insn 62: point = 535
  BB 6
   Insn 1107: point = 537
   Insn 57: point = 537
   Insn 56: point = 538
   Insn 55: point = 538
   Insn 54: point = 538
   Insn 53: point = 539
   Insn 52: point = 539
  BB 5
   Insn 50: point = 541
   Insn 49: point = 541
   Insn 48: point = 542
   Insn 47: point = 543
  BB 18
   Insn 133: point = 546
   Insn 1175: point = 548
  BB 16
   Insn 1113: point = 550
   Insn 120: point = 550
   Insn 119: point = 550
   Insn 118: point = 550
   Insn 117: point = 551
   Insn 116: point = 551
  BB 17
   Insn 129: point = 553
   Insn 128: point = 553
   Insn 127: point = 553
   Insn 126: point = 554
   Insn 125: point = 554
  BB 15
   Insn 114: point = 556
   Insn 113: point = 556
  BB 82
   Insn 1154: point = 557
   Insn 996: point = 557
   Insn 995: point = 557
   Insn 994: point = 557
   Insn 993: point = 557
   Insn 991: point = 558
   Insn 990: point = 560
   Insn 989: point = 561
   Insn 988: point = 562
  BB 10
   Insn 1111: point = 565
   Insn 78: point = 565
  BB 9
   Insn 76: point = 566
   Insn 75: point = 566
  BB 14
   Insn 111: point = 567
   Insn 110: point = 567
   Insn 109: point = 567
   Insn 108: point = 567
   Insn 107: point = 567
   Insn 106: point = 567
   Insn 105: point = 568
  BB 13
   Insn 102: point = 571
   Insn 101: point = 572
   Insn 100: point = 572
   Insn 99: point = 572
   Insn 98: point = 572
  BB 12
   Insn 95: point = 574
   Insn 94: point = 574
  BB 11
   Insn 91: point = 576
   Insn 90: point = 576
   Insn 87: point = 576
   Insn 86: point = 578
   Insn 85: point = 580
   Insn 84: point = 581
   Insn 83: point = 581
  BB 8
   Insn 73: point = 584
   Insn 72: point = 584
  BB 4
   Insn 45: point = 585
   Insn 44: point = 585
  BB 37
   Insn 307: point = 586
   Insn 306: point = 586
   Insn 305: point = 586
   Insn 304: point = 587
   Insn 303: point = 587
   Insn 302: point = 588
   Insn 301: point = 589
  BB 35
   Insn 1123: point = 592
   Insn 288: point = 592
   Insn 287: point = 593
   Insn 286: point = 593
   Insn 285: point = 593
   Insn 284: point = 594
   Insn 283: point = 594
  BB 23
   Insn 1117: point = 596
   Insn 184: point = 596
   Insn 183: point = 596
  BB 22
   Insn 179: point = 599
   Insn 178: point = 600
  BB 21
   Insn 175: point = 603
   Insn 174: point = 603
  BB 36
   Insn 298: point = 605
   Insn 297: point = 606
   Insn 296: point = 606
   Insn 295: point = 606
   Insn 294: point = 607
   Insn 293: point = 607
  BB 34
   Insn 281: point = 609
   Insn 280: point = 609
   Insn 279: point = 610
   Insn 278: point = 611
  BB 29
   Insn 1121: point = 614
   Insn 237: point = 614
   Insn 236: point = 615
   Insn 235: point = 616
   Insn 234: point = 616
   Insn 233: point = 616
   Insn 232: point = 616
   Insn 231: point = 616
   Insn 230: point = 616
   Insn 229: point = 616
   Insn 228: point = 616
   Insn 227: point = 616
   Insn 226: point = 616
   Insn 225: point = 616
   Insn 224: point = 616
   Insn 223: point = 617
  BB 33
   Insn 275: point = 620
   Insn 274: point = 621
   Insn 273: point = 622
   Insn 272: point = 622
   Insn 271: point = 622
   Insn 270: point = 622
   Insn 269: point = 622
   Insn 268: point = 622
   Insn 267: point = 623
  BB 32
   Insn 264: point = 626
   Insn 263: point = 627
   Insn 262: point = 627
   Insn 261: point = 627
   Insn 260: point = 627
  BB 31
   Insn 257: point = 629
   Insn 256: point = 629
  BB 30
   Insn 253: point = 630
   Insn 252: point = 630
   Insn 249: point = 631
   Insn 248: point = 633
   Insn 247: point = 635
   Insn 246: point = 636
   Insn 245: point = 636
   Insn 244: point = 638
   Insn 243: point = 640
   Insn 242: point = 640
  BB 28
   Insn 221: point = 643
   Insn 220: point = 643
  BB 27
   Insn 1119: point = 644
   Insn 215: point = 644
   Insn 214: point = 645
   Insn 213: point = 646
   Insn 212: point = 646
   Insn 211: point = 646
   Insn 210: point = 646
  BB 26
   Insn 207: point = 648
   Insn 206: point = 648
  BB 25
   Insn 203: point = 650
   Insn 202: point = 650
   Insn 199: point = 650
   Insn 198: point = 652
   Insn 197: point = 654
   Insn 196: point = 655
   Insn 195: point = 655
   Insn 194: point = 657
   Insn 193: point = 659
   Insn 192: point = 659
  BB 24
   Insn 190: point = 662
   Insn 189: point = 662
  BB 20
   Insn 172: point = 663
   Insn 171: point = 663
   Insn 170: point = 664
   Insn 169: point = 665
   Insn 167: point = 665
   Insn 1179: point = 667
	Hard reg 2 is preferable by r1005 with profit 195
   Insn 166: point = 669
   Insn 1180: point = 670
   Insn 1178: point = 671
	Hard reg 2 is preferable by r1005 with profit 195
	Hard reg 5 is preferable by r1005 with profit 195
   Insn 165: point = 673
   Insn 164: point = 674
   Insn 163: point = 676
   Insn 162: point = 678
   Insn 161: point = 680
   Insn 160: point = 681
   Insn 159: point = 683
   Insn 157: point = 684
   Insn 156: point = 686
   Insn 155: point = 688
   Insn 154: point = 689
   Insn 1177: point = 691
	Hard reg 2 is preferable by r1004 with profit 195
   Insn 153: point = 693
   Insn 1176: point = 693
   Insn 151: point = 694
   Insn 150: point = 696
   Insn 149: point = 698
   Insn 148: point = 698
  BB 3
   Insn 42: point = 700
   Insn 1159: point = 700
   Insn 39: point = 700
   Insn 38: point = 700
   Insn 1174: point = 701
	Hard reg 2 is preferable by r1002 with profit 390
   Insn 37: point = 703
   Insn 1173: point = 703
   Insn 36: point = 704
   Insn 1172: point = 705
	Hard reg 2 is preferable by r1001 with profit 390
   Insn 35: point = 707
   Insn 1171: point = 707
   Insn 34: point = 708
   Insn 1170: point = 709
	Hard reg 2 is preferable by r1000 with profit 390
   Insn 33: point = 711
   Insn 1169: point = 711
   Insn 32: point = 712
   Insn 31: point = 713
   Insn 1168: point = 714
	Hard reg 37 is preferable by r999 with profit 390
   Insn 30: point = 716
   Insn 1167: point = 716
   Insn 29: point = 717
   Insn 1166: point = 718
	Hard reg 37 is preferable by r998 with profit 390
   Insn 28: point = 720
   Insn 1165: point = 720
   Insn 27: point = 721
   Insn 1164: point = 722
	Hard reg 37 is preferable by r997 with profit 390
   Insn 26: point = 724
   Insn 1163: point = 724
   Insn 1082: point = 725
   Insn 1162: point = 725
	Hard reg 1 is preferable by r996 with profit 390
   Insn 1081: point = 727
   Insn 1161: point = 727
   Insn 19: point = 728
   Insn 16: point = 729
   Insn 15: point = 730
   Insn 14: point = 731
   Insn 13: point = 731
   Insn 12: point = 731
   Insn 11: point = 731
  BB 2
   Insn 9: point = 732
   Insn 8: point = 732
   Insn 7: point = 732
   Insn 3: point = 733
   Insn 2: point = 734
 r87: [605..605] [596..596] [590..592]
 r88: [663..730] [597..604] [585..585] [544..545]
 r89: [658..729] [639..643] [574..585] [559..566]
 r91: [660..725] [641..643] [618..619] [582..585] [563..566]
 r92: [712..728]
 r109: [574..581] [569..571]
 r111: [572..576]
 r115: [546..546] [537..537] [531..533]
 r128: [663..665] [601..604]
 r137: [648..655]
 r139: [646..650]
 r143: [629..640] [624..626]
 r146: [630..636]
 r148: [627..631]
 r241: [370..442] [351..359] [329..330] [265..313] [237..244] [212..221] [171..180]
 r242: [368..441] [355..359] [263..313] [235..244] [217..221]
 r243: [438..440]
 r244: [379..437]
 r245: [408..439]
 r246: [421..434]
 r263: [392..405]
 r283: [194..194] [184..189]
 r287: [365..371]
 r288: [367..369] [362..364]
 r290: [346..346] [341..342]
 r292: [331..331] [322..322] [316..318]
 r298: [275..295] [173..180]
 r305: [275..277] [177..180]
 r317: [226..232]
 r319: [224..228]
 r327: [254..264] [249..251]
 r330: [254..260]
 r332: [252..256]
 r594: [194..195] [187..190]
 r603: [348..352]
 r609: [648..659] [644..645] [620..621] [612..615]
 r612: [648..732] [644..644] [620..620] [609..614] [603..604] [585..585] [541..545] [378..443] [326..330] [274..313] [226..245] [222..222] [199..204] [179..180]
 r616: [245..246] [226..236] [222..223] [202..205]
 r633: [446..734] [2..443]
 r634: [0..733]
 r635: [721..722]
 r636: [717..718]
 r637: [713..714]
 r638: [708..709]
 r639: [704..705]
 r640: [700..701]
 r642: [542..543]
 r643: [538..539]
 r644: [534..535]
 r645: [577..578]
 r646: [579..580]
 r651: [567..568]
 r652: [550..551]
 r653: [553..554]
 r655: [529..530]
 r656: [527..528]
 r657: [695..696]
 r658: [697..698]
 r659: [677..694]
 r660: [690..691]
 r661: [685..689]
 r662: [687..688]
 r663: [685..686]
 r664: [663..684] [597..604]
 r665: [679..681]
 r666: [682..683]
 r667: [675..678]
 r668: [679..680]
 r669: [663..676] [599..604]
 r670: [666..674]
 r671: [666..667]
 r672: [672..673]
 r674: [663..664]
 r676: [599..600]
 r678: [656..657]
 r679: [651..652]
 r680: [653..654]
 r685: [616..617]
 r686: [637..638]
 r687: [632..633]
 r688: [634..635]
 r693: [622..623]
 r694: [610..611]
 r695: [593..594]
 r696: [606..607]
 r697: [588..589]
 r698: [586..587]
 r699: [524..525]
 r701: [522..523]
 r703: [518..519]
 r705: [516..517]
 r706: [514..515]
 r708: [512..513]
 r710: [508..509]
 r712: [506..507]
 r713: [504..505]
 r715: [502..503]
 r717: [498..499]
 r719: [496..497]
 r720: [494..495]
 r722: [492..493]
 r724: [488..489]
 r726: [486..487]
 r727: [484..485]
 r729: [482..483]
 r731: [478..479]
 r733: [476..477]
 r734: [474..475]
 r736: [472..473]
 r738: [468..469]
 r740: [466..467]
 r741: [464..465]
 r743: [462..463]
 r745: [458..459]
 r747: [456..457]
 r748: [453..454]
 r750: [451..452]
 r752: [447..448]
 r754: [444..445]
 r755: [430..431]
 r756: [426..427]
 r757: [422..423]
 r758: [417..418]
 r759: [413..414]
 r760: [409..410]
 r761: [401..402]
 r762: [397..398]
 r763: [393..394]
 r764: [388..389]
 r765: [384..385]
 r766: [380..381]
 r768: [327..328]
 r769: [323..324]
 r770: [319..320]
 r771: [372..373]
 r772: [374..375]
 r777: [360..361]
 r778: [343..344]
 r779: [335..336]
 r780: [338..339]
 r782: [314..315]
 r783: [181..182]
 r784: [163..164]
 r785: [309..310]
 r786: [311..312]
 r787: [294..308]
 r788: [304..305]
 r789: [299..303]
 r790: [301..302]
 r791: [299..300]
 r792: [283..298]
 r793: [296..297]
 r794: [275..293] [175..180]
 r795: [288..289]
 r796: [290..292]
 r797: [278..287]
 r798: [278..279]
 r799: [285..286]
 r801: [275..276]
 r803: [175..176]
 r804: [171..172]
 r805: [169..170]
 r806: [167..168]
 r807: [239..240]
 r808: [231..243]
 r809: [237..238]
 r810: [233..234]
 r811: [229..230]
 r817: [214..215]
 r818: [219..220]
 r819: [212..213]
 r820: [210..211]
 r821: [208..209]
 r822: [206..207]
 r823: [267..268]
 r824: [259..271]
 r825: [265..266]
 r826: [261..262]
 r827: [257..258]
 r833: [247..248]
 r834: [200..201]
 r835: [191..192]
 r836: [196..197]
 r837: [185..186]
 r840: [160..161]
 r843: [158..159]
 r844: [156..157]
 r846: [154..155]
 r847: [152..153]
 r850: [150..151]
 r852: [148..149]
 r854: [144..145]
 r855: [142..143]
 r858: [140..141]
 r861: [138..139]
 r862: [136..137]
 r864: [134..135]
 r865: [132..133]
 r868: [130..131]
 r870: [128..129]
 r872: [124..125]
 r873: [122..123]
 r876: [120..121]
 r879: [118..119]
 r880: [116..117]
 r882: [114..115]
 r883: [112..113]
 r886: [110..111]
 r888: [108..109]
 r890: [104..105]
 r891: [102..103]
 r894: [100..101]
 r897: [98..99]
 r898: [96..97]
 r900: [94..95]
 r901: [92..93]
 r904: [90..91]
 r906: [88..89]
 r908: [84..85]
 r909: [82..83]
 r912: [80..81]
 r915: [78..79]
 r916: [76..77]
 r918: [74..75]
 r919: [72..73]
 r922: [70..71]
 r924: [68..69]
 r926: [64..65]
 r927: [62..63]
 r930: [60..61]
 r933: [58..59]
 r934: [56..57]
 r936: [54..55]
 r937: [52..53]
 r940: [50..51]
 r942: [48..49]
 r944: [44..45]
 r945: [42..43]
 r948: [39..40]
 r951: [37..38]
 r952: [35..36]
 r954: [33..34]
 r955: [31..32]
 r958: [29..30]
 r960: [27..28]
 r962: [23..24]
 r963: [21..22]
 r966: [19..20]
 r969: [17..18]
 r970: [15..16]
 r972: [13..14]
 r973: [11..12]
 r976: [9..10]
 r978: [7..8]
 r980: [3..4]
 r981: [0..1]
 r983: [561..562]
 r984: [557..558]
 r985: [559..560]
 r987: [353..354]
 r988: [355..356]
 r989: [349..350]
 r996: [726..727]
 r997: [723..724]
 r998: [719..720]
 r999: [715..716]
 r1000: [710..711]
 r1001: [706..707]
 r1002: [702..703]
 r1003: [547..548]
 r1004: [692..693]
 r1005: [668..671]
 r1006: [669..670]
 r1007: [520..521]
 r1008: [510..511]
 r1009: [500..501]
 r1010: [490..491]
 r1011: [480..481]
 r1012: [470..471]
 r1013: [460..461]
 r1014: [449..450]
 r1015: [435..436]
 r1016: [432..433]
 r1017: [428..429]
 r1018: [424..425]
 r1019: [419..420]
 r1020: [415..416]
 r1021: [411..412]
 r1022: [406..407]
 r1023: [403..404]
 r1024: [399..400]
 r1025: [395..396]
 r1026: [390..391]
 r1027: [386..387]
 r1028: [382..383]
 r1029: [332..333]
 r1030: [306..307]
 r1031: [290..291]
 r1032: [280..284]
 r1033: [281..282]
 r1034: [241..242]
 r1035: [216..218]
 r1036: [269..270]
 r1037: [146..147]
 r1038: [126..127]
 r1039: [106..107]
 r1040: [86..87]
 r1041: [66..67]
 r1042: [46..47]
 r1043: [25..26]
 r1044: [5..6]
Compressing live ranges: from 735 to 601 - 81%
Ranges after the compression:
 r87: [506..506] [501..501] [497..498]
 r88: [547..600] [502..505] [492..492] [464..465]
 r89: [545..600] [531..534] [485..492] [475..480]
 r91: [547..598] [533..534] [515..516] [491..492] [479..480]
 r92: [587..600]
 r109: [483..490]
 r111: [485..486]
 r115: [466..466] [459..459] [455..456]
 r128: [547..548] [504..505]
 r137: [537..542]
 r139: [537..538]
 r143: [521..532]
 r146: [523..528]
 r148: [523..524]
 r241: [311..370] [299..304] [283..284] [236..271] [214..219] [194..201] [166..171]
 r242: [309..370] [303..304] [234..271] [212..219] [198..201]
 r243: [369..370]
 r244: [317..368]
 r245: [343..370]
 r246: [355..366]
 r263: [329..340]
 r283: [180..180] [174..177]
 r287: [309..312]
 r288: [307..310]
 r290: [296..296] [292..293]
 r292: [285..285] [278..278] [274..275]
 r298: [242..257] [168..171]
 r305: [242..243] [170..171]
 r317: [204..209]
 r319: [204..205]
 r327: [224..235]
 r330: [226..231]
 r332: [226..227]
 r594: [180..181] [176..177]
 r603: [297..300]
 r609: [535..546] [517..518] [511..512]
 r612: [537..600] [535..535] [517..517] [509..512] [504..505] [492..492] [462..465] [317..370] [281..284] [242..271] [204..220] [202..202] [184..187] [170..171]
 r616: [220..221] [202..213] [186..187]
 r633: [373..600] [2..370]
 r634: [0..600]
 r635: [595..596]
 r636: [591..592]
 r637: [587..588]
 r638: [583..584]
 r639: [579..580]
 r640: [575..576]
 r642: [462..463]
 r643: [460..461]
 r644: [457..458]
 r645: [487..488]
 r646: [489..490]
 r651: [481..482]
 r652: [469..470]
 r653: [471..472]
 r655: [453..454]
 r656: [451..452]
 r657: [571..572]
 r658: [573..574]
 r659: [557..570]
 r660: [567..568]
 r661: [563..566]
 r662: [565..566]
 r663: [563..564]
 r664: [547..562] [502..505]
 r665: [559..560]
 r666: [561..562]
 r667: [555..558]
 r668: [559..560]
 r669: [547..556] [502..505]
 r670: [549..554]
 r671: [549..550]
 r672: [553..554]
 r674: [547..548]
 r676: [502..503]
 r678: [543..544]
 r679: [539..540]
 r680: [541..542]
 r685: [513..514]
 r686: [529..530]
 r687: [525..526]
 r688: [527..528]
 r693: [519..520]
 r694: [509..510]
 r695: [499..500]
 r696: [507..508]
 r697: [495..496]
 r698: [493..494]
 r699: [449..450]
 r701: [447..448]
 r703: [443..444]
 r705: [441..442]
 r706: [439..440]
 r708: [437..438]
 r710: [433..434]
 r712: [431..432]
 r713: [429..430]
 r715: [427..428]
 r717: [423..424]
 r719: [421..422]
 r720: [419..420]
 r722: [417..418]
 r724: [413..414]
 r726: [411..412]
 r727: [409..410]
 r729: [407..408]
 r731: [403..404]
 r733: [401..402]
 r734: [399..400]
 r736: [397..398]
 r738: [393..394]
 r740: [391..392]
 r741: [389..390]
 r743: [387..388]
 r745: [383..384]
 r747: [381..382]
 r748: [379..380]
 r750: [377..378]
 r752: [373..374]
 r754: [371..372]
 r755: [363..364]
 r756: [359..360]
 r757: [355..356]
 r758: [351..352]
 r759: [347..348]
 r760: [343..344]
 r761: [337..338]
 r762: [333..334]
 r763: [329..330]
 r764: [325..326]
 r765: [321..322]
 r766: [317..318]
 r768: [281..282]
 r769: [279..280]
 r770: [276..277]
 r771: [313..314]
 r772: [315..316]
 r777: [305..306]
 r778: [294..295]
 r779: [288..289]
 r780: [290..291]
 r782: [272..273]
 r783: [172..173]
 r784: [160..161]
 r785: [268..269]
 r786: [270..271]
 r787: [256..267]
 r788: [264..265]
 r789: [260..263]
 r790: [262..263]
 r791: [260..261]
 r792: [248..259]
 r793: [258..259]
 r794: [242..255] [168..171]
 r795: [252..253]
 r796: [254..255]
 r797: [244..251]
 r798: [244..245]
 r799: [250..251]
 r801: [242..243]
 r803: [168..169]
 r804: [166..167]
 r805: [164..165]
 r806: [162..163]
 r807: [216..217]
 r808: [208..219]
 r809: [214..215]
 r810: [210..211]
 r811: [206..207]
 r817: [196..197]
 r818: [200..201]
 r819: [194..195]
 r820: [192..193]
 r821: [190..191]
 r822: [188..189]
 r823: [238..239]
 r824: [230..241]
 r825: [236..237]
 r826: [232..233]
 r827: [228..229]
 r833: [222..223]
 r834: [184..185]
 r835: [178..179]
 r836: [182..183]
 r837: [174..175]
 r840: [158..159]
 r843: [156..157]
 r844: [154..155]
 r846: [152..153]
 r847: [150..151]
 r850: [148..149]
 r852: [146..147]
 r854: [142..143]
 r855: [140..141]
 r858: [138..139]
 r861: [136..137]
 r862: [134..135]
 r864: [132..133]
 r865: [130..131]
 r868: [128..129]
 r870: [126..127]
 r872: [122..123]
 r873: [120..121]
 r876: [118..119]
 r879: [116..117]
 r880: [114..115]
 r882: [112..113]
 r883: [110..111]
 r886: [108..109]
 r888: [106..107]
 r890: [102..103]
 r891: [100..101]
 r894: [98..99]
 r897: [96..97]
 r898: [94..95]
 r900: [92..93]
 r901: [90..91]
 r904: [88..89]
 r906: [86..87]
 r908: [82..83]
 r909: [80..81]
 r912: [78..79]
 r915: [76..77]
 r916: [74..75]
 r918: [72..73]
 r919: [70..71]
 r922: [68..69]
 r924: [66..67]
 r926: [62..63]
 r927: [60..61]
 r930: [58..59]
 r933: [56..57]
 r934: [54..55]
 r936: [52..53]
 r937: [50..51]
 r940: [48..49]
 r942: [46..47]
 r944: [42..43]
 r945: [40..41]
 r948: [38..39]
 r951: [36..37]
 r952: [34..35]
 r954: [32..33]
 r955: [30..31]
 r958: [28..29]
 r960: [26..27]
 r962: [22..23]
 r963: [20..21]
 r966: [18..19]
 r969: [16..17]
 r970: [14..15]
 r972: [12..13]
 r973: [10..11]
 r976: [8..9]
 r978: [6..7]
 r980: [2..3]
 r981: [0..1]
 r983: [477..478]
 r984: [473..474]
 r985: [475..476]
 r987: [301..302]
 r988: [303..304]
 r989: [297..298]
 r996: [599..600]
 r997: [597..598]
 r998: [593..594]
 r999: [589..590]
 r1000: [585..586]
 r1001: [581..582]
 r1002: [577..578]
 r1003: [467..468]
 r1004: [569..570]
 r1005: [551..552]
 r1006: [551..552]
 r1007: [445..446]
 r1008: [435..436]
 r1009: [425..426]
 r1010: [415..416]
 r1011: [405..406]
 r1012: [395..396]
 r1013: [385..386]
 r1014: [375..376]
 r1015: [367..368]
 r1016: [365..366]
 r1017: [361..362]
 r1018: [357..358]
 r1019: [353..354]
 r1020: [349..350]
 r1021: [345..346]
 r1022: [341..342]
 r1023: [339..340]
 r1024: [335..336]
 r1025: [331..332]
 r1026: [327..328]
 r1027: [323..324]
 r1028: [319..320]
 r1029: [286..287]
 r1030: [266..267]
 r1031: [254..255]
 r1032: [246..249]
 r1033: [246..247]
 r1034: [218..219]
 r1035: [198..199]
 r1036: [240..241]
 r1037: [144..145]
 r1038: [124..125]
 r1039: [104..105]
 r1040: [84..85]
 r1041: [64..65]
 r1042: [44..45]
 r1043: [24..25]
 r1044: [4..5]

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5
EBB 6
EBB 7
EBB 8 9 10
EBB 11 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20 21 22
EBB 23
EBB 24
EBB 25 26
EBB 27
EBB 28
EBB 29
EBB 30 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40 41
EBB 42
EBB 43
EBB 44
EBB 45 46 47
EBB 48 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61 62 63
EBB 64
EBB 65 66 67
EBB 68
EBB 69
EBB 70
EBB 71 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84

********** Pseudo live ranges #2: **********

  BB 84
   Insn 1016: point = 0
   Insn 1015: point = 0
  BB 81
   Insn 1152: point = 0
   Insn 978: point = 0
   Insn 977: point = 1
   Insn 976: point = 3
   Insn 1253: point = 4
	Hard reg 0 is preferable by r1044 with profit 230
   Insn 975: point = 6
   Insn 1252: point = 6
   Insn 973: point = 7
   Insn 972: point = 8
   Insn 970: point = 9
   Insn 969: point = 10
   Insn 967: point = 11
   Insn 966: point = 12
   Insn 964: point = 13
   Insn 963: point = 14
   Insn 962: point = 16
   Insn 960: point = 17
   Insn 959: point = 18
   Insn 956: point = 19
   Insn 955: point = 20
   Insn 952: point = 21
   Insn 951: point = 22
   Insn 950: point = 23
   Insn 1251: point = 24
	Hard reg 0 is preferable by r1043 with profit 230
   Insn 949: point = 26
   Insn 1250: point = 26
   Insn 947: point = 27
   Insn 946: point = 28
   Insn 944: point = 29
   Insn 943: point = 30
   Insn 941: point = 31
   Insn 940: point = 32
   Insn 938: point = 33
   Insn 937: point = 34
   Insn 936: point = 36
   Insn 934: point = 37
   Insn 933: point = 38
   Insn 930: point = 39
   Insn 929: point = 40
  BB 80
   Insn 925: point = 42
   Insn 924: point = 42
   Insn 923: point = 42
   Insn 922: point = 43
   Insn 921: point = 44
   Insn 1249: point = 45
	Hard reg 0 is preferable by r1042 with profit 610
   Insn 920: point = 47
   Insn 1248: point = 47
   Insn 918: point = 48
   Insn 917: point = 49
   Insn 915: point = 50
   Insn 914: point = 51
   Insn 912: point = 52
   Insn 911: point = 53
   Insn 909: point = 54
   Insn 908: point = 55
   Insn 907: point = 57
   Insn 905: point = 58
   Insn 904: point = 59
   Insn 901: point = 60
   Insn 900: point = 61
   Insn 897: point = 62
   Insn 896: point = 63
   Insn 895: point = 64
   Insn 1247: point = 65
	Hard reg 0 is preferable by r1041 with profit 610
   Insn 894: point = 67
   Insn 1246: point = 67
   Insn 892: point = 68
   Insn 891: point = 69
   Insn 889: point = 70
   Insn 888: point = 71
   Insn 886: point = 72
   Insn 885: point = 73
   Insn 883: point = 74
   Insn 882: point = 75
   Insn 881: point = 77
   Insn 879: point = 78
   Insn 878: point = 79
   Insn 875: point = 80
   Insn 874: point = 81
   Insn 871: point = 82
   Insn 870: point = 83
   Insn 869: point = 84
   Insn 1245: point = 85
	Hard reg 0 is preferable by r1040 with profit 610
   Insn 868: point = 87
   Insn 1244: point = 87
   Insn 866: point = 88
   Insn 865: point = 89
   Insn 863: point = 90
   Insn 862: point = 91
   Insn 860: point = 92
   Insn 859: point = 93
   Insn 857: point = 94
   Insn 856: point = 95
   Insn 855: point = 97
   Insn 853: point = 98
   Insn 852: point = 99
   Insn 849: point = 100
   Insn 848: point = 101
   Insn 845: point = 102
   Insn 844: point = 103
   Insn 843: point = 104
   Insn 1243: point = 105
	Hard reg 0 is preferable by r1039 with profit 610
   Insn 842: point = 107
   Insn 1242: point = 107
   Insn 840: point = 108
   Insn 839: point = 109
   Insn 837: point = 110
   Insn 836: point = 111
   Insn 834: point = 112
   Insn 833: point = 113
   Insn 831: point = 114
   Insn 830: point = 115
   Insn 829: point = 117
   Insn 827: point = 118
   Insn 826: point = 119
   Insn 823: point = 120
   Insn 822: point = 121
   Insn 819: point = 122
   Insn 818: point = 123
   Insn 817: point = 124
   Insn 1241: point = 125
	Hard reg 0 is preferable by r1038 with profit 610
   Insn 816: point = 127
   Insn 1240: point = 127
   Insn 814: point = 128
   Insn 813: point = 129
   Insn 811: point = 130
   Insn 810: point = 131
   Insn 808: point = 132
   Insn 807: point = 133
   Insn 805: point = 134
   Insn 804: point = 135
   Insn 803: point = 137
   Insn 801: point = 138
   Insn 800: point = 139
   Insn 797: point = 140
   Insn 796: point = 141
   Insn 793: point = 142
   Insn 792: point = 143
   Insn 791: point = 144
   Insn 1239: point = 145
	Hard reg 0 is preferable by r1037 with profit 610
   Insn 790: point = 147
   Insn 1238: point = 147
   Insn 788: point = 148
   Insn 787: point = 149
   Insn 785: point = 150
   Insn 784: point = 151
   Insn 782: point = 152
   Insn 781: point = 153
   Insn 779: point = 154
   Insn 778: point = 155
   Insn 777: point = 157
   Insn 775: point = 158
   Insn 774: point = 159
   Insn 771: point = 160
   Insn 770: point = 161
  BB 60
   Insn 1139: point = 163
   Insn 584: point = 163
   Insn 583: point = 163
   Insn 582: point = 163
   Insn 581: point = 164
   Insn 580: point = 164
  BB 79
   Insn 1150: point = 166
  BB 64
   Insn 1141: point = 167
   Insn 628: point = 167
   Insn 627: point = 168
   Insn 626: point = 170
   Insn 625: point = 172
   Insn 624: point = 174
  BB 63
   Insn 621: point = 175
   Insn 620: point = 176
  BB 62
   Insn 617: point = 179
   Insn 616: point = 179
  BB 59
   Insn 1137: point = 181
   Insn 575: point = 181
   Insn 574: point = 181
   Insn 573: point = 181
   Insn 572: point = 182
   Insn 571: point = 182
  BB 78
   Insn 762: point = 184
   Insn 761: point = 184
   Insn 759: point = 185
   Insn 758: point = 186
  BB 76
   Insn 1147: point = 189
   Insn 744: point = 189
   Insn 743: point = 190
   Insn 742: point = 191
   Insn 741: point = 191
   Insn 740: point = 191
   Insn 739: point = 192
   Insn 738: point = 192
  BB 77
   Insn 755: point = 194
   Insn 754: point = 195
   Insn 753: point = 196
   Insn 752: point = 196
   Insn 751: point = 196
   Insn 750: point = 197
   Insn 749: point = 197
  BB 75
   Insn 736: point = 199
   Insn 735: point = 199
   Insn 734: point = 200
   Insn 733: point = 201
  BB 70
   Insn 1145: point = 204
   Insn 689: point = 204
   Insn 688: point = 205
   Insn 687: point = 206
   Insn 686: point = 206
   Insn 685: point = 206
   Insn 684: point = 206
   Insn 683: point = 206
   Insn 682: point = 206
   Insn 681: point = 206
   Insn 680: point = 206
   Insn 679: point = 206
   Insn 678: point = 206
   Insn 677: point = 207
   Insn 676: point = 208
   Insn 675: point = 209
   Insn 674: point = 211
   Insn 673: point = 213
   Insn 1235: point = 215
	Hard reg 1 is preferable by r1035 with profit 245
   Insn 672: point = 217
   Insn 1234: point = 218
	Hard reg 1 is preferable by r1035 with profit 245
	Hard reg 2 is preferable by r1035 with profit 245
   Insn 671: point = 220
   Insn 670: point = 221
  BB 68
   Insn 1143: point = 222
   Insn 662: point = 222
   Insn 661: point = 223
   Insn 660: point = 224
   Insn 659: point = 224
   Insn 658: point = 224
   Insn 657: point = 224
  BB 67
   Insn 654: point = 226
   Insn 653: point = 226
  BB 66
   Insn 650: point = 228
   Insn 649: point = 228
   Insn 646: point = 228
   Insn 645: point = 230
   Insn 643: point = 232
   Insn 642: point = 232
   Insn 641: point = 234
   Insn 640: point = 236
   Insn 639: point = 236
   Insn 638: point = 238
   Insn 1233: point = 240
	Hard reg 2 is preferable by r1034 with profit 76
   Insn 637: point = 242
   Insn 1232: point = 242
   Insn 636: point = 243
  BB 74
   Insn 730: point = 245
   Insn 729: point = 246
   Insn 728: point = 247
   Insn 727: point = 247
   Insn 726: point = 247
   Insn 725: point = 247
   Insn 724: point = 247
   Insn 723: point = 247
   Insn 722: point = 248
  BB 73
   Insn 719: point = 251
   Insn 718: point = 252
   Insn 717: point = 252
   Insn 716: point = 252
   Insn 715: point = 252
  BB 72
   Insn 712: point = 254
   Insn 711: point = 254
  BB 71
   Insn 708: point = 256
   Insn 707: point = 256
   Insn 704: point = 256
   Insn 703: point = 258
   Insn 701: point = 260
   Insn 700: point = 260
   Insn 699: point = 262
   Insn 698: point = 264
   Insn 697: point = 264
   Insn 696: point = 266
   Insn 1237: point = 268
	Hard reg 2 is preferable by r1036 with profit 54
   Insn 695: point = 270
   Insn 1236: point = 270
   Insn 694: point = 271
  BB 69
   Insn 668: point = 273
   Insn 667: point = 273
  BB 65
   Insn 634: point = 274
   Insn 633: point = 274
  BB 61
   Insn 614: point = 275
   Insn 613: point = 275
   Insn 612: point = 276
   Insn 611: point = 277
   Insn 609: point = 277
   Insn 1230: point = 279
	Hard reg 2 is preferable by r1032 with profit 305
   Insn 608: point = 281
   Insn 1231: point = 282
   Insn 1229: point = 284
	Hard reg 2 is preferable by r1032 with profit 305
	Hard reg 38 is preferable by r1032 with profit 305
   Insn 607: point = 286
   Insn 606: point = 287
   Insn 605: point = 289
   Insn 1228: point = 291
   Insn 604: point = 292
   Insn 603: point = 293
   Insn 602: point = 295
   Insn 601: point = 297
   Insn 599: point = 298
   Insn 598: point = 300
   Insn 597: point = 302
   Insn 596: point = 303
   Insn 1227: point = 305
	Hard reg 2 is preferable by r1030 with profit 305
   Insn 595: point = 307
   Insn 1226: point = 307
   Insn 593: point = 308
   Insn 592: point = 310
   Insn 591: point = 312
   Insn 590: point = 312
  BB 58
   Insn 569: point = 314
   Insn 568: point = 314
   Insn 567: point = 314
   Insn 566: point = 315
  BB 44
   Insn 1129: point = 318
   Insn 484: point = 318
   Insn 483: point = 319
   Insn 482: point = 319
   Insn 481: point = 319
   Insn 480: point = 320
   Insn 479: point = 320
  BB 43
   Insn 1127: point = 322
   Insn 474: point = 322
   Insn 473: point = 323
   Insn 472: point = 323
   Insn 471: point = 323
   Insn 470: point = 324
   Insn 469: point = 324
  BB 42
   Insn 467: point = 326
   Insn 466: point = 326
   Insn 465: point = 327
   Insn 464: point = 328
  BB 57
   Insn 563: point = 331
   Insn 1225: point = 333
  BB 55
   Insn 1135: point = 335
   Insn 550: point = 335
   Insn 549: point = 335
   Insn 548: point = 335
   Insn 547: point = 336
   Insn 546: point = 336
  BB 56
   Insn 559: point = 338
   Insn 558: point = 338
   Insn 557: point = 338
   Insn 556: point = 339
   Insn 555: point = 339
  BB 54
   Insn 544: point = 341
   Insn 543: point = 341
  BB 53
   Insn 1133: point = 343
   Insn 538: point = 343
   Insn 537: point = 343
   Insn 536: point = 343
   Insn 535: point = 344
   Insn 534: point = 344
  BB 52
   Insn 532: point = 346
   Insn 531: point = 346
   Insn 530: point = 346
  BB 83
   Insn 1156: point = 348
   Insn 1010: point = 348
   Insn 1009: point = 348
   Insn 1008: point = 348
   Insn 1007: point = 348
   Insn 1006: point = 349
   Insn 1005: point = 350
   Insn 1004: point = 352
   Insn 1003: point = 354
   Insn 1002: point = 356
  BB 47
   Insn 1131: point = 358
   Insn 495: point = 358
  BB 46
   Insn 493: point = 359
   Insn 492: point = 359
  BB 51
   Insn 528: point = 360
   Insn 527: point = 360
   Insn 526: point = 360
   Insn 525: point = 360
   Insn 524: point = 360
   Insn 523: point = 360
   Insn 522: point = 361
  BB 50
   Insn 519: point = 364
   Insn 518: point = 365
   Insn 517: point = 365
   Insn 516: point = 365
   Insn 515: point = 365
  BB 49
   Insn 512: point = 367
   Insn 511: point = 367
  BB 48
   Insn 508: point = 368
   Insn 507: point = 368
   Insn 504: point = 369
   Insn 503: point = 369
   Insn 502: point = 371
   Insn 501: point = 373
   Insn 500: point = 375
  BB 45
   Insn 490: point = 377
   Insn 489: point = 377
  BB 41
   Insn 462: point = 378
   Insn 461: point = 378
  BB 40
   Insn 459: point = 379
   Insn 1158: point = 379
   Insn 455: point = 379
   Insn 454: point = 380
   Insn 1224: point = 381
	Hard reg 37 is preferable by r1028 with profit 610
   Insn 453: point = 383
   Insn 1223: point = 383
   Insn 452: point = 384
   Insn 1222: point = 385
	Hard reg 37 is preferable by r1027 with profit 610
   Insn 451: point = 387
   Insn 1221: point = 387
   Insn 450: point = 388
   Insn 1220: point = 389
	Hard reg 37 is preferable by r1026 with profit 610
   Insn 449: point = 391
   Insn 1219: point = 391
   Insn 447: point = 392
   Insn 446: point = 393
   Insn 1218: point = 394
	Hard reg 38 is preferable by r1025 with profit 610
   Insn 445: point = 396
   Insn 1217: point = 396
   Insn 444: point = 397
   Insn 1216: point = 398
	Hard reg 38 is preferable by r1024 with profit 610
   Insn 443: point = 400
   Insn 1215: point = 400
   Insn 442: point = 401
   Insn 1214: point = 402
	Hard reg 38 is preferable by r1023 with profit 610
   Insn 441: point = 404
   Insn 1213: point = 404
   Insn 1212: point = 405
	Hard reg 37 is preferable by r1022 with profit 610
   Insn 439: point = 407
   Insn 1211: point = 407
   Insn 438: point = 408
   Insn 437: point = 409
   Insn 1210: point = 410
	Hard reg 38 is preferable by r1021 with profit 610
   Insn 436: point = 412
   Insn 1209: point = 412
   Insn 435: point = 413
   Insn 1208: point = 414
	Hard reg 38 is preferable by r1020 with profit 610
   Insn 434: point = 416
   Insn 1207: point = 416
   Insn 433: point = 417
   Insn 1206: point = 418
	Hard reg 38 is preferable by r1019 with profit 610
   Insn 432: point = 420
   Insn 1205: point = 420
   Insn 430: point = 421
   Insn 429: point = 422
   Insn 1204: point = 423
	Hard reg 40 is preferable by r1018 with profit 610
   Insn 428: point = 425
   Insn 1203: point = 425
   Insn 427: point = 426
   Insn 1202: point = 427
	Hard reg 40 is preferable by r1017 with profit 610
   Insn 426: point = 429
   Insn 1201: point = 429
   Insn 425: point = 430
   Insn 1200: point = 431
	Hard reg 40 is preferable by r1016 with profit 610
   Insn 424: point = 433
   Insn 1199: point = 433
   Insn 1198: point = 434
	Hard reg 38 is preferable by r1015 with profit 610
   Insn 422: point = 436
   Insn 1197: point = 436
   Insn 1084: point = 437
   Insn 1083: point = 437
   Insn 415: point = 439
   Insn 413: point = 440
   Insn 412: point = 441
   Insn 411: point = 442
   Insn 410: point = 443
   Insn 409: point = 443
   Insn 408: point = 443
   Insn 407: point = 443
  BB 39
   Insn 1125: point = 444
   Insn 400: point = 444
   Insn 399: point = 445
   Insn 398: point = 447
   Insn 1196: point = 448
	Hard reg 0 is preferable by r1014 with profit 147
   Insn 397: point = 450
   Insn 1195: point = 450
   Insn 395: point = 451
   Insn 394: point = 452
   Insn 392: point = 453
   Insn 391: point = 454
  BB 38
   Insn 388: point = 456
   Insn 387: point = 456
   Insn 386: point = 456
   Insn 385: point = 457
   Insn 384: point = 458
   Insn 1194: point = 459
	Hard reg 0 is preferable by r1013 with profit 390
   Insn 383: point = 461
   Insn 1193: point = 461
   Insn 381: point = 462
   Insn 380: point = 463
   Insn 378: point = 464
   Insn 377: point = 465
   Insn 375: point = 466
   Insn 374: point = 467
   Insn 373: point = 468
   Insn 1192: point = 469
	Hard reg 0 is preferable by r1012 with profit 390
   Insn 372: point = 471
   Insn 1191: point = 471
   Insn 370: point = 472
   Insn 369: point = 473
   Insn 367: point = 474
   Insn 366: point = 475
   Insn 364: point = 476
   Insn 363: point = 477
   Insn 362: point = 478
   Insn 1190: point = 479
	Hard reg 0 is preferable by r1011 with profit 390
   Insn 361: point = 481
   Insn 1189: point = 481
   Insn 359: point = 482
   Insn 358: point = 483
   Insn 356: point = 484
   Insn 355: point = 485
   Insn 353: point = 486
   Insn 352: point = 487
   Insn 351: point = 488
   Insn 1188: point = 489
	Hard reg 0 is preferable by r1010 with profit 390
   Insn 350: point = 491
   Insn 1187: point = 491
   Insn 348: point = 492
   Insn 347: point = 493
   Insn 345: point = 494
   Insn 344: point = 495
   Insn 342: point = 496
   Insn 341: point = 497
   Insn 340: point = 498
   Insn 1186: point = 499
	Hard reg 0 is preferable by r1009 with profit 390
   Insn 339: point = 501
   Insn 1185: point = 501
   Insn 337: point = 502
   Insn 336: point = 503
   Insn 334: point = 504
   Insn 333: point = 505
   Insn 331: point = 506
   Insn 330: point = 507
   Insn 329: point = 508
   Insn 1184: point = 509
	Hard reg 0 is preferable by r1008 with profit 390
   Insn 328: point = 511
   Insn 1183: point = 511
   Insn 326: point = 512
   Insn 325: point = 513
   Insn 323: point = 514
   Insn 322: point = 515
   Insn 320: point = 516
   Insn 319: point = 517
   Insn 318: point = 518
   Insn 1182: point = 519
	Hard reg 0 is preferable by r1007 with profit 390
   Insn 317: point = 521
   Insn 1181: point = 521
   Insn 315: point = 522
   Insn 314: point = 523
   Insn 312: point = 524
   Insn 311: point = 525
  BB 19
   Insn 1115: point = 527
   Insn 142: point = 527
   Insn 141: point = 527
   Insn 140: point = 527
   Insn 139: point = 528
   Insn 138: point = 528
   Insn 137: point = 529
   Insn 136: point = 530
  BB 7
   Insn 1109: point = 533
   Insn 67: point = 533
   Insn 66: point = 534
   Insn 65: point = 534
   Insn 64: point = 534
   Insn 63: point = 535
   Insn 62: point = 535
  BB 6
   Insn 1107: point = 537
   Insn 57: point = 537
   Insn 56: point = 538
   Insn 55: point = 538
   Insn 54: point = 538
   Insn 53: point = 539
   Insn 52: point = 539
  BB 5
   Insn 50: point = 541
   Insn 49: point = 541
   Insn 48: point = 542
   Insn 47: point = 543
  BB 18
   Insn 133: point = 546
   Insn 1175: point = 548
  BB 16
   Insn 1113: point = 550
   Insn 120: point = 550
   Insn 119: point = 550
   Insn 118: point = 550
   Insn 117: point = 551
   Insn 116: point = 551
  BB 17
   Insn 129: point = 553
   Insn 128: point = 553
   Insn 127: point = 553
   Insn 126: point = 554
   Insn 125: point = 554
  BB 15
   Insn 114: point = 556
   Insn 113: point = 556
  BB 82
   Insn 1154: point = 557
   Insn 996: point = 557
   Insn 995: point = 557
   Insn 994: point = 557
   Insn 993: point = 557
   Insn 991: point = 558
   Insn 990: point = 560
   Insn 989: point = 561
   Insn 988: point = 562
  BB 10
   Insn 1111: point = 565
   Insn 78: point = 565
  BB 9
   Insn 76: point = 566
   Insn 75: point = 566
  BB 14
   Insn 111: point = 567
   Insn 110: point = 567
   Insn 109: point = 567
   Insn 108: point = 567
   Insn 107: point = 567
   Insn 106: point = 567
   Insn 105: point = 568
  BB 13
   Insn 102: point = 571
   Insn 101: point = 572
   Insn 100: point = 572
   Insn 99: point = 572
   Insn 98: point = 572
  BB 12
   Insn 95: point = 574
   Insn 94: point = 574
  BB 11
   Insn 91: point = 576
   Insn 90: point = 576
   Insn 87: point = 576
   Insn 86: point = 578
   Insn 85: point = 580
   Insn 84: point = 581
   Insn 83: point = 581
  BB 8
   Insn 73: point = 584
   Insn 72: point = 584
  BB 4
   Insn 45: point = 585
   Insn 44: point = 585
  BB 37
   Insn 307: point = 586
   Insn 306: point = 586
   Insn 305: point = 586
   Insn 304: point = 587
   Insn 303: point = 587
   Insn 302: point = 588
   Insn 301: point = 589
  BB 35
   Insn 1123: point = 592
   Insn 288: point = 592
   Insn 287: point = 593
   Insn 286: point = 593
   Insn 285: point = 593
   Insn 284: point = 594
   Insn 283: point = 594
  BB 23
   Insn 1117: point = 596
   Insn 184: point = 596
   Insn 183: point = 596
  BB 22
   Insn 179: point = 599
   Insn 178: point = 600
  BB 21
   Insn 175: point = 603
   Insn 174: point = 603
  BB 36
   Insn 298: point = 605
   Insn 297: point = 606
   Insn 296: point = 606
   Insn 295: point = 606
   Insn 294: point = 607
   Insn 293: point = 607
  BB 34
   Insn 281: point = 609
   Insn 280: point = 609
   Insn 279: point = 610
   Insn 278: point = 611
  BB 29
   Insn 1121: point = 614
   Insn 237: point = 614
   Insn 236: point = 615
   Insn 235: point = 616
   Insn 234: point = 616
   Insn 233: point = 616
   Insn 232: point = 616
   Insn 231: point = 616
   Insn 230: point = 616
   Insn 229: point = 616
   Insn 228: point = 616
   Insn 227: point = 616
   Insn 226: point = 616
   Insn 225: point = 616
   Insn 224: point = 616
   Insn 223: point = 617
  BB 33
   Insn 275: point = 620
   Insn 274: point = 621
   Insn 273: point = 622
   Insn 272: point = 622
   Insn 271: point = 622
   Insn 270: point = 622
   Insn 269: point = 622
   Insn 268: point = 622
   Insn 267: point = 623
  BB 32
   Insn 264: point = 626
   Insn 263: point = 627
   Insn 262: point = 627
   Insn 261: point = 627
   Insn 260: point = 627
  BB 31
   Insn 257: point = 629
   Insn 256: point = 629
  BB 30
   Insn 253: point = 630
   Insn 252: point = 630
   Insn 249: point = 631
   Insn 248: point = 633
   Insn 247: point = 635
   Insn 246: point = 636
   Insn 245: point = 636
   Insn 244: point = 638
   Insn 243: point = 640
   Insn 242: point = 640
  BB 28
   Insn 221: point = 643
   Insn 220: point = 643
  BB 27
   Insn 1119: point = 644
   Insn 215: point = 644
   Insn 214: point = 645
   Insn 213: point = 646
   Insn 212: point = 646
   Insn 211: point = 646
   Insn 210: point = 646
  BB 26
   Insn 207: point = 648
   Insn 206: point = 648
  BB 25
   Insn 203: point = 650
   Insn 202: point = 650
   Insn 199: point = 650
   Insn 198: point = 652
   Insn 197: point = 654
   Insn 196: point = 655
   Insn 195: point = 655
   Insn 194: point = 657
   Insn 193: point = 659
   Insn 192: point = 659
  BB 24
   Insn 190: point = 662
   Insn 189: point = 662
  BB 20
   Insn 172: point = 663
   Insn 171: point = 663
   Insn 170: point = 664
   Insn 169: point = 665
   Insn 167: point = 665
   Insn 1179: point = 667
	Hard reg 2 is preferable by r1005 with profit 195
   Insn 166: point = 669
   Insn 1180: point = 670
   Insn 1178: point = 671
	Hard reg 2 is preferable by r1005 with profit 195
	Hard reg 5 is preferable by r1005 with profit 195
   Insn 165: point = 673
   Insn 164: point = 674
   Insn 163: point = 676
   Insn 162: point = 678
   Insn 161: point = 680
   Insn 160: point = 681
   Insn 159: point = 683
   Insn 157: point = 684
   Insn 156: point = 686
   Insn 155: point = 688
   Insn 154: point = 689
   Insn 1177: point = 691
	Hard reg 2 is preferable by r1004 with profit 195
   Insn 153: point = 693
   Insn 1176: point = 693
   Insn 151: point = 694
   Insn 150: point = 696
   Insn 149: point = 698
   Insn 148: point = 698
  BB 3
   Insn 42: point = 700
   Insn 1159: point = 700
   Insn 39: point = 700
   Insn 38: point = 700
   Insn 1174: point = 701
	Hard reg 2 is preferable by r1002 with profit 390
   Insn 37: point = 703
   Insn 1173: point = 703
   Insn 36: point = 704
   Insn 1172: point = 705
	Hard reg 2 is preferable by r1001 with profit 390
   Insn 35: point = 707
   Insn 1171: point = 707
   Insn 34: point = 708
   Insn 1170: point = 709
	Hard reg 2 is preferable by r1000 with profit 390
   Insn 33: point = 711
   Insn 1169: point = 711
   Insn 32: point = 712
   Insn 31: point = 713
   Insn 1168: point = 714
	Hard reg 37 is preferable by r999 with profit 390
   Insn 30: point = 716
   Insn 1167: point = 716
   Insn 29: point = 717
   Insn 1166: point = 718
	Hard reg 37 is preferable by r998 with profit 390
   Insn 28: point = 720
   Insn 1165: point = 720
   Insn 27: point = 721
   Insn 1164: point = 722
	Hard reg 37 is preferable by r997 with profit 390
   Insn 26: point = 724
   Insn 1163: point = 724
   Insn 1082: point = 725
   Insn 1162: point = 725
	Hard reg 1 is preferable by r996 with profit 390
   Insn 1081: point = 727
   Insn 1161: point = 727
   Insn 19: point = 728
   Insn 16: point = 729
   Insn 15: point = 730
   Insn 14: point = 731
   Insn 13: point = 731
   Insn 12: point = 731
   Insn 11: point = 731
  BB 2
   Insn 9: point = 732
   Insn 8: point = 732
   Insn 7: point = 732
   Insn 3: point = 733
   Insn 2: point = 734
 r87: [605..605] [596..596] [590..592]
 r88: [663..730] [597..604] [585..585] [544..545]
 r89: [658..729] [639..643] [574..585] [559..566]
 r91: [660..725] [641..643] [618..619] [582..585] [563..566]
 r92: [712..728]
 r109: [574..581] [569..571]
 r111: [572..576]
 r115: [546..546] [537..537] [531..533]
 r128: [663..665] [601..604]
 r137: [648..655]
 r139: [646..650]
 r143: [629..640] [624..626]
 r146: [630..636]
 r148: [627..631]
 r241: [370..442] [351..359] [329..330] [265..313] [237..244] [212..221] [171..180]
 r242: [368..441] [355..359] [263..313] [235..244] [217..221]
 r243: [438..440]
 r244: [379..437]
 r245: [408..439]
 r246: [421..434]
 r263: [392..405]
 r283: [194..194] [184..189]
 r287: [365..371]
 r288: [367..369] [362..364]
 r290: [346..346] [341..342]
 r292: [331..331] [322..322] [316..318]
 r298: [275..295] [173..180]
 r305: [275..277] [177..180]
 r317: [226..232]
 r319: [224..228]
 r327: [254..264] [249..251]
 r330: [254..260]
 r332: [252..256]
 r594: [194..195] [187..190]
 r603: [348..352]
 r609: [648..659] [644..645] [620..621] [612..615]
 r612: [648..732] [644..644] [620..620] [609..614] [603..604] [585..585] [541..545] [378..443] [326..330] [274..313] [226..245] [222..222] [199..204] [179..180]
 r616: [245..246] [226..236] [222..223] [202..205]
 r633: [446..734] [2..443]
 r634: [0..733]
 r635: [721..722]
 r636: [717..718]
 r637: [713..714]
 r638: [708..709]
 r639: [704..705]
 r640: [700..701]
 r642: [542..543]
 r643: [538..539]
 r644: [534..535]
 r645: [577..578]
 r646: [579..580]
 r651: [567..568]
 r652: [550..551]
 r653: [553..554]
 r655: [529..530]
 r656: [527..528]
 r657: [695..696]
 r658: [697..698]
 r659: [677..694]
 r660: [690..691]
 r661: [685..689]
 r662: [687..688]
 r663: [685..686]
 r664: [663..684] [597..604]
 r665: [679..681]
 r666: [682..683]
 r667: [675..678]
 r668: [679..680]
 r669: [663..676] [599..604]
 r670: [666..674]
 r671: [666..667]
 r672: [672..673]
 r674: [663..664]
 r676: [599..600]
 r678: [656..657]
 r679: [651..652]
 r680: [653..654]
 r685: [616..617]
 r686: [637..638]
 r687: [632..633]
 r688: [634..635]
 r693: [622..623]
 r694: [610..611]
 r695: [593..594]
 r696: [606..607]
 r697: [588..589]
 r698: [586..587]
 r699: [524..525]
 r701: [522..523]
 r703: [518..519]
 r705: [516..517]
 r706: [514..515]
 r708: [512..513]
 r710: [508..509]
 r712: [506..507]
 r713: [504..505]
 r715: [502..503]
 r717: [498..499]
 r719: [496..497]
 r720: [494..495]
 r722: [492..493]
 r724: [488..489]
 r726: [486..487]
 r727: [484..485]
 r729: [482..483]
 r731: [478..479]
 r733: [476..477]
 r734: [474..475]
 r736: [472..473]
 r738: [468..469]
 r740: [466..467]
 r741: [464..465]
 r743: [462..463]
 r745: [458..459]
 r747: [456..457]
 r748: [453..454]
 r750: [451..452]
 r752: [447..448]
 r754: [444..445]
 r755: [430..431]
 r756: [426..427]
 r757: [422..423]
 r758: [417..418]
 r759: [413..414]
 r760: [409..410]
 r761: [401..402]
 r762: [397..398]
 r763: [393..394]
 r764: [388..389]
 r765: [384..385]
 r766: [380..381]
 r768: [327..328]
 r769: [323..324]
 r770: [319..320]
 r771: [372..373]
 r772: [374..375]
 r777: [360..361]
 r778: [343..344]
 r779: [335..336]
 r780: [338..339]
 r782: [314..315]
 r783: [181..182]
 r784: [163..164]
 r785: [309..310]
 r786: [311..312]
 r787: [294..308]
 r788: [304..305]
 r789: [299..303]
 r790: [301..302]
 r791: [299..300]
 r792: [283..298]
 r793: [296..297]
 r794: [275..293] [175..180]
 r795: [288..289]
 r796: [290..292]
 r797: [278..287]
 r798: [278..279]
 r799: [285..286]
 r801: [275..276]
 r803: [175..176]
 r804: [171..172]
 r805: [169..170]
 r806: [167..168]
 r807: [239..240]
 r808: [231..243]
 r809: [237..238]
 r810: [233..234]
 r811: [229..230]
 r817: [214..215]
 r818: [219..220]
 r819: [212..213]
 r820: [210..211]
 r821: [208..209]
 r822: [206..207]
 r823: [267..268]
 r824: [259..271]
 r825: [265..266]
 r826: [261..262]
 r827: [257..258]
 r833: [247..248]
 r834: [200..201]
 r835: [191..192]
 r836: [196..197]
 r837: [185..186]
 r840: [160..161]
 r843: [158..159]
 r844: [156..157]
 r846: [154..155]
 r847: [152..153]
 r850: [150..151]
 r852: [148..149]
 r854: [144..145]
 r855: [142..143]
 r858: [140..141]
 r861: [138..139]
 r862: [136..137]
 r864: [134..135]
 r865: [132..133]
 r868: [130..131]
 r870: [128..129]
 r872: [124..125]
 r873: [122..123]
 r876: [120..121]
 r879: [118..119]
 r880: [116..117]
 r882: [114..115]
 r883: [112..113]
 r886: [110..111]
 r888: [108..109]
 r890: [104..105]
 r891: [102..103]
 r894: [100..101]
 r897: [98..99]
 r898: [96..97]
 r900: [94..95]
 r901: [92..93]
 r904: [90..91]
 r906: [88..89]
 r908: [84..85]
 r909: [82..83]
 r912: [80..81]
 r915: [78..79]
 r916: [76..77]
 r918: [74..75]
 r919: [72..73]
 r922: [70..71]
 r924: [68..69]
 r926: [64..65]
 r927: [62..63]
 r930: [60..61]
 r933: [58..59]
 r934: [56..57]
 r936: [54..55]
 r937: [52..53]
 r940: [50..51]
 r942: [48..49]
 r944: [44..45]
 r945: [42..43]
 r948: [39..40]
 r951: [37..38]
 r952: [35..36]
 r954: [33..34]
 r955: [31..32]
 r958: [29..30]
 r960: [27..28]
 r962: [23..24]
 r963: [21..22]
 r966: [19..20]
 r969: [17..18]
 r970: [15..16]
 r972: [13..14]
 r973: [11..12]
 r976: [9..10]
 r978: [7..8]
 r980: [3..4]
 r981: [0..1]
 r983: [561..562]
 r984: [557..558]
 r985: [559..560]
 r987: [353..354]
 r988: [355..356]
 r989: [349..350]
 r996: [726..727]
 r997: [723..724]
 r998: [719..720]
 r999: [715..716]
 r1000: [710..711]
 r1001: [706..707]
 r1002: [702..703]
 r1003: [547..548]
 r1004: [692..693]
 r1005: [668..671]
 r1006: [669..670]
 r1007: [520..521]
 r1008: [510..511]
 r1009: [500..501]
 r1010: [490..491]
 r1011: [480..481]
 r1012: [470..471]
 r1013: [460..461]
 r1014: [449..450]
 r1015: [435..436]
 r1016: [432..433]
 r1017: [428..429]
 r1018: [424..425]
 r1019: [419..420]
 r1020: [415..416]
 r1021: [411..412]
 r1022: [406..407]
 r1023: [403..404]
 r1024: [399..400]
 r1025: [395..396]
 r1026: [390..391]
 r1027: [386..387]
 r1028: [382..383]
 r1029: [332..333]
 r1030: [306..307]
 r1031: [290..291]
 r1032: [280..284]
 r1033: [281..282]
 r1034: [241..242]
 r1035: [216..218]
 r1036: [269..270]
 r1037: [146..147]
 r1038: [126..127]
 r1039: [106..107]
 r1040: [86..87]
 r1041: [66..67]
 r1042: [46..47]
 r1043: [25..26]
 r1044: [5..6]
Compressing live ranges: from 735 to 601 - 81%
Ranges after the compression:
 r87: [506..506] [501..501] [497..498]
 r88: [547..600] [502..505] [492..492] [464..465]
 r89: [545..600] [531..534] [485..492] [475..480]
 r91: [547..598] [533..534] [515..516] [491..492] [479..480]
 r92: [587..600]
 r109: [483..490]
 r111: [485..486]
 r115: [466..466] [459..459] [455..456]
 r128: [547..548] [504..505]
 r137: [537..542]
 r139: [537..538]
 r143: [521..532]
 r146: [523..528]
 r148: [523..524]
 r241: [311..370] [299..304] [283..284] [236..271] [214..219] [194..201] [166..171]
 r242: [309..370] [303..304] [234..271] [212..219] [198..201]
 r243: [369..370]
 r244: [317..368]
 r245: [343..370]
 r246: [355..366]
 r263: [329..340]
 r283: [180..180] [174..177]
 r287: [309..312]
 r288: [307..310]
 r290: [296..296] [292..293]
 r292: [285..285] [278..278] [274..275]
 r298: [242..257] [168..171]
 r305: [242..243] [170..171]
 r317: [204..209]
 r319: [204..205]
 r327: [224..235]
 r330: [226..231]
 r332: [226..227]
 r594: [180..181] [176..177]
 r603: [297..300]
 r609: [535..546] [517..518] [511..512]
 r612: [537..600] [535..535] [517..517] [509..512] [504..505] [492..492] [462..465] [317..370] [281..284] [242..271] [204..220] [202..202] [184..187] [170..171]
 r616: [220..221] [202..213] [186..187]
 r633: [373..600] [2..370]
 r634: [0..600]
 r635: [595..596]
 r636: [591..592]
 r637: [587..588]
 r638: [583..584]
 r639: [579..580]
 r640: [575..576]
 r642: [462..463]
 r643: [460..461]
 r644: [457..458]
 r645: [487..488]
 r646: [489..490]
 r651: [481..482]
 r652: [469..470]
 r653: [471..472]
 r655: [453..454]
 r656: [451..452]
 r657: [571..572]
 r658: [573..574]
 r659: [557..570]
 r660: [567..568]
 r661: [563..566]
 r662: [565..566]
 r663: [563..564]
 r664: [547..562] [502..505]
 r665: [559..560]
 r666: [561..562]
 r667: [555..558]
 r668: [559..560]
 r669: [547..556] [502..505]
 r670: [549..554]
 r671: [549..550]
 r672: [553..554]
 r674: [547..548]
 r676: [502..503]
 r678: [543..544]
 r679: [539..540]
 r680: [541..542]
 r685: [513..514]
 r686: [529..530]
 r687: [525..526]
 r688: [527..528]
 r693: [519..520]
 r694: [509..510]
 r695: [499..500]
 r696: [507..508]
 r697: [495..496]
 r698: [493..494]
 r699: [449..450]
 r701: [447..448]
 r703: [443..444]
 r705: [441..442]
 r706: [439..440]
 r708: [437..438]
 r710: [433..434]
 r712: [431..432]
 r713: [429..430]
 r715: [427..428]
 r717: [423..424]
 r719: [421..422]
 r720: [419..420]
 r722: [417..418]
 r724: [413..414]
 r726: [411..412]
 r727: [409..410]
 r729: [407..408]
 r731: [403..404]
 r733: [401..402]
 r734: [399..400]
 r736: [397..398]
 r738: [393..394]
 r740: [391..392]
 r741: [389..390]
 r743: [387..388]
 r745: [383..384]
 r747: [381..382]
 r748: [379..380]
 r750: [377..378]
 r752: [373..374]
 r754: [371..372]
 r755: [363..364]
 r756: [359..360]
 r757: [355..356]
 r758: [351..352]
 r759: [347..348]
 r760: [343..344]
 r761: [337..338]
 r762: [333..334]
 r763: [329..330]
 r764: [325..326]
 r765: [321..322]
 r766: [317..318]
 r768: [281..282]
 r769: [279..280]
 r770: [276..277]
 r771: [313..314]
 r772: [315..316]
 r777: [305..306]
 r778: [294..295]
 r779: [288..289]
 r780: [290..291]
 r782: [272..273]
 r783: [172..173]
 r784: [160..161]
 r785: [268..269]
 r786: [270..271]
 r787: [256..267]
 r788: [264..265]
 r789: [260..263]
 r790: [262..263]
 r791: [260..261]
 r792: [248..259]
 r793: [258..259]
 r794: [242..255] [168..171]
 r795: [252..253]
 r796: [254..255]
 r797: [244..251]
 r798: [244..245]
 r799: [250..251]
 r801: [242..243]
 r803: [168..169]
 r804: [166..167]
 r805: [164..165]
 r806: [162..163]
 r807: [216..217]
 r808: [208..219]
 r809: [214..215]
 r810: [210..211]
 r811: [206..207]
 r817: [196..197]
 r818: [200..201]
 r819: [194..195]
 r820: [192..193]
 r821: [190..191]
 r822: [188..189]
 r823: [238..239]
 r824: [230..241]
 r825: [236..237]
 r826: [232..233]
 r827: [228..229]
 r833: [222..223]
 r834: [184..185]
 r835: [178..179]
 r836: [182..183]
 r837: [174..175]
 r840: [158..159]
 r843: [156..157]
 r844: [154..155]
 r846: [152..153]
 r847: [150..151]
 r850: [148..149]
 r852: [146..147]
 r854: [142..143]
 r855: [140..141]
 r858: [138..139]
 r861: [136..137]
 r862: [134..135]
 r864: [132..133]
 r865: [130..131]
 r868: [128..129]
 r870: [126..127]
 r872: [122..123]
 r873: [120..121]
 r876: [118..119]
 r879: [116..117]
 r880: [114..115]
 r882: [112..113]
 r883: [110..111]
 r886: [108..109]
 r888: [106..107]
 r890: [102..103]
 r891: [100..101]
 r894: [98..99]
 r897: [96..97]
 r898: [94..95]
 r900: [92..93]
 r901: [90..91]
 r904: [88..89]
 r906: [86..87]
 r908: [82..83]
 r909: [80..81]
 r912: [78..79]
 r915: [76..77]
 r916: [74..75]
 r918: [72..73]
 r919: [70..71]
 r922: [68..69]
 r924: [66..67]
 r926: [62..63]
 r927: [60..61]
 r930: [58..59]
 r933: [56..57]
 r934: [54..55]
 r936: [52..53]
 r937: [50..51]
 r940: [48..49]
 r942: [46..47]
 r944: [42..43]
 r945: [40..41]
 r948: [38..39]
 r951: [36..37]
 r952: [34..35]
 r954: [32..33]
 r955: [30..31]
 r958: [28..29]
 r960: [26..27]
 r962: [22..23]
 r963: [20..21]
 r966: [18..19]
 r969: [16..17]
 r970: [14..15]
 r972: [12..13]
 r973: [10..11]
 r976: [8..9]
 r978: [6..7]
 r980: [2..3]
 r981: [0..1]
 r983: [477..478]
 r984: [473..474]
 r985: [475..476]
 r987: [301..302]
 r988: [303..304]
 r989: [297..298]
 r996: [599..600]
 r997: [597..598]
 r998: [593..594]
 r999: [589..590]
 r1000: [585..586]
 r1001: [581..582]
 r1002: [577..578]
 r1003: [467..468]
 r1004: [569..570]
 r1005: [551..552]
 r1006: [551..552]
 r1007: [445..446]
 r1008: [435..436]
 r1009: [425..426]
 r1010: [415..416]
 r1011: [405..406]
 r1012: [395..396]
 r1013: [385..386]
 r1014: [375..376]
 r1015: [367..368]
 r1016: [365..366]
 r1017: [361..362]
 r1018: [357..358]
 r1019: [353..354]
 r1020: [349..350]
 r1021: [345..346]
 r1022: [341..342]
 r1023: [339..340]
 r1024: [335..336]
 r1025: [331..332]
 r1026: [327..328]
 r1027: [323..324]
 r1028: [319..320]
 r1029: [286..287]
 r1030: [266..267]
 r1031: [254..255]
 r1032: [246..249]
 r1033: [246..247]
 r1034: [218..219]
 r1035: [198..199]
 r1036: [240..241]
 r1037: [144..145]
 r1038: [124..125]
 r1039: [104..105]
 r1040: [84..85]
 r1041: [64..65]
 r1042: [44..45]
 r1043: [24..25]
 r1044: [4..5]

********** Assignment #1: **********

	 Assigning to 1031 (cl=CREG, orig=1031, freq=610, tfirst=1031, tfreq=610)...
	   Assign 2 to reload r1031 (freq=610)
	 Assigning to 1033 (cl=CREG, orig=1033, freq=610, tfirst=1033, tfreq=610)...
	   Assign 2 to reload r1033 (freq=610)
	 Assigning to 1006 (cl=CREG, orig=1006, freq=390, tfirst=1006, tfreq=390)...
	   Assign 2 to reload r1006 (freq=390)
	 Assigning to 1015 (cl=GENERAL_REGS, orig=246, freq=1830, tfirst=1015, tfreq=1830)...
	   Assign 38 to reload r1015 (freq=1830)
	 Assigning to 1016 (cl=GENERAL_REGS, orig=755, freq=1830, tfirst=1016, tfreq=1830)...
	   Assign 40 to reload r1016 (freq=1830)
	 Assigning to 1017 (cl=GENERAL_REGS, orig=756, freq=1830, tfirst=1017, tfreq=1830)...
	   Assign 40 to reload r1017 (freq=1830)
	 Assigning to 1018 (cl=GENERAL_REGS, orig=757, freq=1830, tfirst=1018, tfreq=1830)...
	   Assign 40 to reload r1018 (freq=1830)
	 Assigning to 1019 (cl=GENERAL_REGS, orig=758, freq=1830, tfirst=1019, tfreq=1830)...
	   Assign 38 to reload r1019 (freq=1830)
	 Assigning to 1020 (cl=GENERAL_REGS, orig=759, freq=1830, tfirst=1020, tfreq=1830)...
	   Assign 38 to reload r1020 (freq=1830)
	 Assigning to 1021 (cl=GENERAL_REGS, orig=760, freq=1830, tfirst=1021, tfreq=1830)...
	   Assign 38 to reload r1021 (freq=1830)
	 Assigning to 1022 (cl=GENERAL_REGS, orig=263, freq=1830, tfirst=1022, tfreq=1830)...
	   Assign 37 to reload r1022 (freq=1830)
	 Assigning to 1023 (cl=GENERAL_REGS, orig=761, freq=1830, tfirst=1023, tfreq=1830)...
	   Assign 38 to reload r1023 (freq=1830)
	 Assigning to 1024 (cl=GENERAL_REGS, orig=762, freq=1830, tfirst=1024, tfreq=1830)...
	   Assign 38 to reload r1024 (freq=1830)
	 Assigning to 1025 (cl=GENERAL_REGS, orig=763, freq=1830, tfirst=1025, tfreq=1830)...
	   Assign 38 to reload r1025 (freq=1830)
	 Assigning to 1026 (cl=GENERAL_REGS, orig=764, freq=1830, tfirst=1026, tfreq=1830)...
	   Assign 37 to reload r1026 (freq=1830)
	 Assigning to 1027 (cl=GENERAL_REGS, orig=765, freq=1830, tfirst=1027, tfreq=1830)...
	   Assign 37 to reload r1027 (freq=1830)
	 Assigning to 1028 (cl=GENERAL_REGS, orig=766, freq=1830, tfirst=1028, tfreq=1830)...
	   Assign 37 to reload r1028 (freq=1830)
	 Assigning to 1037 (cl=GENERAL_REGS, orig=854, freq=1830, tfirst=1037, tfreq=1830)...
	   Assign 0 to reload r1037 (freq=1830)
	 Assigning to 1038 (cl=GENERAL_REGS, orig=872, freq=1830, tfirst=1038, tfreq=1830)...
	   Assign 0 to reload r1038 (freq=1830)
	 Assigning to 1039 (cl=GENERAL_REGS, orig=890, freq=1830, tfirst=1039, tfreq=1830)...
	   Assign 0 to reload r1039 (freq=1830)
	 Assigning to 1040 (cl=GENERAL_REGS, orig=908, freq=1830, tfirst=1040, tfreq=1830)...
	   Assign 0 to reload r1040 (freq=1830)
	 Assigning to 1041 (cl=GENERAL_REGS, orig=926, freq=1830, tfirst=1041, tfreq=1830)...
	   Assign 0 to reload r1041 (freq=1830)
	 Assigning to 1042 (cl=GENERAL_REGS, orig=944, freq=1830, tfirst=1042, tfreq=1830)...
	   Assign 0 to reload r1042 (freq=1830)
	 Assigning to 996 (cl=GENERAL_REGS, orig=91, freq=1170, tfirst=996, tfreq=1170)...
	   Assign 1 to reload r996 (freq=1170)
	 Assigning to 997 (cl=GENERAL_REGS, orig=635, freq=1170, tfirst=997, tfreq=1170)...
	   Assign 37 to reload r997 (freq=1170)
	 Assigning to 998 (cl=GENERAL_REGS, orig=636, freq=1170, tfirst=998, tfreq=1170)...
	   Assign 37 to reload r998 (freq=1170)
	 Assigning to 999 (cl=GENERAL_REGS, orig=637, freq=1170, tfirst=999, tfreq=1170)...
	   Assign 37 to reload r999 (freq=1170)
	 Assigning to 1000 (cl=GENERAL_REGS, orig=638, freq=1170, tfirst=1000, tfreq=1170)...
	   Assign 2 to reload r1000 (freq=1170)
	 Assigning to 1001 (cl=GENERAL_REGS, orig=639, freq=1170, tfirst=1001, tfreq=1170)...
	   Assign 2 to reload r1001 (freq=1170)
	 Assigning to 1002 (cl=GENERAL_REGS, orig=640, freq=1170, tfirst=1002, tfreq=1170)...
	   Assign 2 to reload r1002 (freq=1170)
	 Assigning to 1007 (cl=GENERAL_REGS, orig=703, freq=1170, tfirst=1007, tfreq=1170)...
	   Assign 0 to reload r1007 (freq=1170)
	 Assigning to 1008 (cl=GENERAL_REGS, orig=710, freq=1170, tfirst=1008, tfreq=1170)...
	   Assign 0 to reload r1008 (freq=1170)
	 Assigning to 1009 (cl=GENERAL_REGS, orig=717, freq=1170, tfirst=1009, tfreq=1170)...
	   Assign 0 to reload r1009 (freq=1170)
	 Assigning to 1010 (cl=GENERAL_REGS, orig=724, freq=1170, tfirst=1010, tfreq=1170)...
	   Assign 0 to reload r1010 (freq=1170)
	 Assigning to 1011 (cl=GENERAL_REGS, orig=731, freq=1170, tfirst=1011, tfreq=1170)...
	   Assign 0 to reload r1011 (freq=1170)
	 Assigning to 1012 (cl=GENERAL_REGS, orig=738, freq=1170, tfirst=1012, tfreq=1170)...
	   Assign 0 to reload r1012 (freq=1170)
	 Assigning to 1013 (cl=GENERAL_REGS, orig=745, freq=1170, tfirst=1013, tfreq=1170)...
	   Assign 0 to reload r1013 (freq=1170)
	 Assigning to 1030 (cl=GENERAL_REGS, orig=788, freq=915, tfirst=1030, tfreq=915)...
	   Assign 2 to reload r1030 (freq=915)
	 Assigning to 1032 (cl=GENERAL_REGS, orig=798, freq=915, tfirst=1032, tfreq=915)...
	   Assign 38 to reload r1032 (freq=915)
	 Assigning to 1035 (cl=GENERAL_REGS, orig=817, freq=735, tfirst=1035, tfreq=735)...
	   Assign 2 to reload r1035 (freq=735)
	 Assigning to 1043 (cl=GENERAL_REGS, orig=962, freq=690, tfirst=1043, tfreq=690)...
	   Assign 0 to reload r1043 (freq=690)
	 Assigning to 1044 (cl=GENERAL_REGS, orig=980, freq=690, tfirst=1044, tfreq=690)...
	   Assign 0 to reload r1044 (freq=690)
	 Assigning to 1004 (cl=GENERAL_REGS, orig=660, freq=585, tfirst=1004, tfreq=585)...
	   Assign 2 to reload r1004 (freq=585)
	 Assigning to 1005 (cl=GENERAL_REGS, orig=671, freq=585, tfirst=1005, tfreq=585)...
	   Assign 5 to reload r1005 (freq=585)
	 Assigning to 1014 (cl=GENERAL_REGS, orig=752, freq=441, tfirst=1014, tfreq=441)...
	   Assign 0 to reload r1014 (freq=441)
	 Assigning to 1029 (cl=GENERAL_REGS, orig=1029, freq=438, tfirst=1029, tfreq=438)...
	   Assign 0 to reload r1029 (freq=438)
	 Assigning to 1003 (cl=GENERAL_REGS, orig=1003, freq=280, tfirst=1003, tfreq=280)...
	   Assign 0 to reload r1003 (freq=280)
	 Assigning to 1034 (cl=GENERAL_REGS, orig=807, freq=228, tfirst=1034, tfreq=228)...
	   Assign 2 to reload r1034 (freq=228)
	 Assigning to 1036 (cl=GENERAL_REGS, orig=823, freq=162, tfirst=1036, tfreq=162)...
	   Assign 2 to reload r1036 (freq=162)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=112, prev_offset=112)
Can eliminate 16 to 6 (offset=-16, prev_offset=0)
Can eliminate 20 to 7 (offset=64, prev_offset=64)
Can eliminate 20 to 6 (offset=-64, prev_offset=0)
changing reg in insn 183
changing reg in insn 298
changing reg in insn 288
changing reg in insn 301
changing reg in insn 15
changing reg in insn 183
changing reg in insn 47
changing reg in insn 16
changing reg in insn 1159
changing reg in insn 1081
changing reg in insn 1081
changing reg in insn 94
changing reg in insn 244
changing reg in insn 194
changing reg in insn 170
changing reg in insn 150
changing reg in insn 149
changing reg in insn 148
changing reg in insn 991
changing reg in insn 220
changing reg in insn 189
changing reg in insn 155
changing reg in insn 86
changing reg in insn 75
changing reg in insn 72
changing reg in insn 44
changing reg in insn 991
changing reg in insn 151
changing reg in insn 86
changing reg in insn 988
changing reg in insn 242
changing reg in insn 223
changing reg in insn 192
changing reg in insn 83
changing reg in insn 1082
changing reg in insn 19
changing reg in insn 1082
changing reg in insn 102
changing reg in insn 83
changing reg in insn 105
changing reg in insn 84
changing reg in insn 87
changing reg in insn 90
changing reg in insn 98
changing reg in insn 133
changing reg in insn 67
changing reg in insn 57
changing reg in insn 136
changing reg in insn 167
changing reg in insn 169
changing reg in insn 178
changing reg in insn 195
changing reg in insn 206
changing reg in insn 198
changing reg in insn 196
changing reg in insn 198
changing reg in insn 199
changing reg in insn 202
changing reg in insn 210
changing reg in insn 264
changing reg in insn 242
changing reg in insn 267
changing reg in insn 243
changing reg in insn 245
changing reg in insn 252
changing reg in insn 248
changing reg in insn 246
changing reg in insn 248
changing reg in insn 249
changing reg in insn 256
changing reg in insn 260
changing reg in insn 411
changing reg in insn 1005
changing reg in insn 697
changing reg in insn 674
changing reg in insn 639
changing reg in insn 626
changing reg in insn 503
changing reg in insn 464
changing reg in insn 412
changing reg in insn 1158
changing reg in insn 507
changing reg in insn 699
changing reg in insn 641
changing reg in insn 612
changing reg in insn 592
changing reg in insn 591
changing reg in insn 590
changing reg in insn 1003
changing reg in insn 695
changing reg in insn 672
changing reg in insn 667
changing reg in insn 637
changing reg in insn 633
changing reg in insn 597
changing reg in insn 501
changing reg in insn 492
changing reg in insn 489
changing reg in insn 461
changing reg in insn 413
changing reg in insn 1003
changing reg in insn 695
changing reg in insn 672
changing reg in insn 637
changing reg in insn 593
changing reg in insn 501
changing reg in insn 413
changing reg in insn 1083
changing reg in insn 1084
changing reg in insn 415
changing reg in insn 1084
changing reg in insn 755
changing reg in insn 744
changing reg in insn 761
changing reg in insn 502
changing reg in insn 511
changing reg in insn 515
changing reg in insn 503
changing reg in insn 519
changing reg in insn 503
changing reg in insn 522
changing reg in insn 504
changing reg in insn 530
changing reg in insn 543
changing reg in insn 531
changing reg in insn 563
changing reg in insn 484
changing reg in insn 474
changing reg in insn 566
changing reg in insn 602
changing reg in insn 625
changing reg in insn 609
changing reg in insn 611
changing reg in insn 620
changing reg in insn 642
changing reg in insn 653
changing reg in insn 645
changing reg in insn 643
changing reg in insn 645
changing reg in insn 646
changing reg in insn 649
changing reg in insn 657
changing reg in insn 719
changing reg in insn 697
changing reg in insn 722
changing reg in insn 698
changing reg in insn 700
changing reg in insn 711
changing reg in insn 703
changing reg in insn 701
changing reg in insn 703
changing reg in insn 704
changing reg in insn 707
changing reg in insn 715
changing reg in insn 754
changing reg in insn 743
changing reg in insn 758
changing reg in insn 1004
changing reg in insn 1007
changing reg in insn 1005
changing reg in insn 274
changing reg in insn 236
changing reg in insn 214
changing reg in insn 192
changing reg in insn 278
changing reg in insn 193
changing reg in insn 730
changing reg in insn 689
changing reg in insn 662
changing reg in insn 275
changing reg in insn 237
changing reg in insn 215
changing reg in insn 7
changing reg in insn 735
changing reg in insn 616
changing reg in insn 466
changing reg in insn 280
changing reg in insn 174
changing reg in insn 49
changing reg in insn 8
changing reg in insn 729
changing reg in insn 688
changing reg in insn 661
changing reg in insn 639
changing reg in insn 733
changing reg in insn 640
changing reg in insn 2
changing reg in insn 972
changing reg in insn 969
changing reg in insn 966
changing reg in insn 962
changing reg in insn 959
changing reg in insn 955
changing reg in insn 946
changing reg in insn 943
changing reg in insn 940
changing reg in insn 936
changing reg in insn 933
changing reg in insn 929
changing reg in insn 917
changing reg in insn 914
changing reg in insn 911
changing reg in insn 907
changing reg in insn 904
changing reg in insn 900
changing reg in insn 891
changing reg in insn 888
changing reg in insn 885
changing reg in insn 881
changing reg in insn 878
changing reg in insn 874
changing reg in insn 865
changing reg in insn 862
changing reg in insn 859
changing reg in insn 855
changing reg in insn 852
changing reg in insn 848
changing reg in insn 839
changing reg in insn 836
changing reg in insn 833
changing reg in insn 829
changing reg in insn 826
changing reg in insn 822
changing reg in insn 813
changing reg in insn 810
changing reg in insn 807
changing reg in insn 803
changing reg in insn 800
changing reg in insn 796
changing reg in insn 787
changing reg in insn 784
changing reg in insn 781
changing reg in insn 777
changing reg in insn 774
changing reg in insn 770
changing reg in insn 394
changing reg in insn 391
changing reg in insn 380
changing reg in insn 377
changing reg in insn 369
changing reg in insn 366
changing reg in insn 358
changing reg in insn 355
changing reg in insn 347
changing reg in insn 344
changing reg in insn 336
changing reg in insn 333
changing reg in insn 325
changing reg in insn 322
changing reg in insn 314
changing reg in insn 311
changing reg in insn 621
changing reg in insn 611
changing reg in insn 179
changing reg in insn 169
changing reg in insn 1009
changing reg in insn 1006
changing reg in insn 995
changing reg in insn 989
changing reg in insn 977
changing reg in insn 951
changing reg in insn 924
changing reg in insn 922
changing reg in insn 896
changing reg in insn 870
changing reg in insn 844
changing reg in insn 818
changing reg in insn 792
changing reg in insn 759
changing reg in insn 755
changing reg in insn 754
changing reg in insn 752
changing reg in insn 744
changing reg in insn 743
changing reg in insn 741
changing reg in insn 734
changing reg in insn 730
changing reg in insn 729
changing reg in insn 728
changing reg in insn 726
changing reg in insn 723
changing reg in insn 719
changing reg in insn 717
changing reg in insn 701
changing reg in insn 698
changing reg in insn 689
changing reg in insn 688
changing reg in insn 687
changing reg in insn 685
changing reg in insn 682
changing reg in insn 682
changing reg in insn 681
changing reg in insn 679
changing reg in insn 677
changing reg in insn 676
changing reg in insn 670
changing reg in insn 662
changing reg in insn 661
changing reg in insn 659
changing reg in insn 643
changing reg in insn 640
changing reg in insn 628
changing reg in insn 624
changing reg in insn 606
changing reg in insn 583
changing reg in insn 574
changing reg in insn 568
changing reg in insn 567
changing reg in insn 558
changing reg in insn 549
changing reg in insn 537
changing reg in insn 530
changing reg in insn 528
changing reg in insn 526
changing reg in insn 523
changing reg in insn 519
changing reg in insn 517
changing reg in insn 504
changing reg in insn 495
changing reg in insn 484
changing reg in insn 482
changing reg in insn 474
changing reg in insn 472
changing reg in insn 465
changing reg in insn 415
changing reg in insn 412
changing reg in insn 411
changing reg in insn 399
changing reg in insn 387
changing reg in insn 385
changing reg in insn 374
changing reg in insn 363
changing reg in insn 352
changing reg in insn 341
changing reg in insn 330
changing reg in insn 319
changing reg in insn 306
changing reg in insn 302
changing reg in insn 298
changing reg in insn 296
changing reg in insn 288
changing reg in insn 286
changing reg in insn 279
changing reg in insn 275
changing reg in insn 274
changing reg in insn 273
changing reg in insn 271
changing reg in insn 268
changing reg in insn 264
changing reg in insn 262
changing reg in insn 246
changing reg in insn 243
changing reg in insn 237
changing reg in insn 236
changing reg in insn 235
changing reg in insn 233
changing reg in insn 230
changing reg in insn 230
changing reg in insn 228
changing reg in insn 225
changing reg in insn 224
changing reg in insn 215
changing reg in insn 214
changing reg in insn 212
changing reg in insn 196
changing reg in insn 193
changing reg in insn 184
changing reg in insn 164
changing reg in insn 141
changing reg in insn 137
changing reg in insn 128
changing reg in insn 119
changing reg in insn 113
changing reg in insn 111
changing reg in insn 109
changing reg in insn 106
changing reg in insn 102
changing reg in insn 100
changing reg in insn 84
changing reg in insn 78
changing reg in insn 67
changing reg in insn 65
changing reg in insn 57
changing reg in insn 55
changing reg in insn 48
changing reg in insn 19
changing reg in insn 16
changing reg in insn 15
changing reg in insn 7
changing reg in insn 1005
changing reg in insn 988
changing reg in insn 758
changing reg in insn 733
changing reg in insn 722
changing reg in insn 675
changing reg in insn 627
changing reg in insn 620
changing reg in insn 566
changing reg in insn 522
changing reg in insn 464
changing reg in insn 301
changing reg in insn 278
changing reg in insn 267
changing reg in insn 223
changing reg in insn 178
changing reg in insn 136
changing reg in insn 105
changing reg in insn 47
changing reg in insn 951
changing reg in insn 922
changing reg in insn 896
changing reg in insn 870
changing reg in insn 844
changing reg in insn 818
changing reg in insn 792
changing reg in insn 385
changing reg in insn 374
changing reg in insn 363
changing reg in insn 352
changing reg in insn 341
changing reg in insn 330
changing reg in insn 319
changing reg in insn 563
changing reg in insn 397
changing reg in insn 383
changing reg in insn 372
changing reg in insn 361
changing reg in insn 350
changing reg in insn 339
changing reg in insn 328
changing reg in insn 317
changing reg in insn 133
changing reg in insn 3
changing reg in insn 978
changing reg in insn 976
changing reg in insn 973
changing reg in insn 970
changing reg in insn 967
changing reg in insn 964
changing reg in insn 960
changing reg in insn 956
changing reg in insn 952
changing reg in insn 950
changing reg in insn 947
changing reg in insn 944
changing reg in insn 941
changing reg in insn 938
changing reg in insn 934
changing reg in insn 930
changing reg in insn 923
changing reg in insn 921
changing reg in insn 918
changing reg in insn 915
changing reg in insn 912
changing reg in insn 909
changing reg in insn 905
changing reg in insn 901
changing reg in insn 897
changing reg in insn 895
changing reg in insn 892
changing reg in insn 889
changing reg in insn 886
changing reg in insn 883
changing reg in insn 879
changing reg in insn 875
changing reg in insn 871
changing reg in insn 869
changing reg in insn 866
changing reg in insn 863
changing reg in insn 860
changing reg in insn 857
changing reg in insn 853
changing reg in insn 849
changing reg in insn 845
changing reg in insn 843
changing reg in insn 840
changing reg in insn 837
changing reg in insn 834
changing reg in insn 831
changing reg in insn 827
changing reg in insn 823
changing reg in insn 819
changing reg in insn 817
changing reg in insn 814
changing reg in insn 811
changing reg in insn 808
changing reg in insn 805
changing reg in insn 801
changing reg in insn 797
changing reg in insn 793
changing reg in insn 791
changing reg in insn 788
changing reg in insn 785
changing reg in insn 782
changing reg in insn 779
changing reg in insn 775
changing reg in insn 771
changing reg in insn 400
changing reg in insn 398
changing reg in insn 395
changing reg in insn 392
changing reg in insn 386
changing reg in insn 384
changing reg in insn 381
changing reg in insn 378
changing reg in insn 375
changing reg in insn 373
changing reg in insn 370
changing reg in insn 367
changing reg in insn 364
changing reg in insn 362
changing reg in insn 359
changing reg in insn 356
changing reg in insn 353
changing reg in insn 351
changing reg in insn 348
changing reg in insn 345
changing reg in insn 342
changing reg in insn 340
changing reg in insn 337
changing reg in insn 334
changing reg in insn 331
changing reg in insn 329
changing reg in insn 326
changing reg in insn 323
changing reg in insn 320
changing reg in insn 318
changing reg in insn 315
changing reg in insn 312
changing reg in insn 47
changing reg in insn 48
changing reg in insn 52
changing reg in insn 54
changing reg in insn 62
changing reg in insn 64
changing reg in insn 86
changing reg in insn 87
changing reg in insn 85
changing reg in insn 86
changing reg in insn 105
changing reg in insn 106
changing reg in insn 116
changing reg in insn 118
changing reg in insn 125
changing reg in insn 127
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 140
changing reg in insn 150
changing reg in insn 151
changing reg in insn 148
changing reg in insn 150
changing reg in insn 151
changing reg in insn 163
changing reg in insn 154
changing reg in insn 154
changing reg in insn 157
changing reg in insn 155
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 183
changing reg in insn 160
changing reg in insn 160
changing reg in insn 160
changing reg in insn 159
changing reg in insn 160
changing reg in insn 162
changing reg in insn 161
changing reg in insn 162
changing reg in insn 163
changing reg in insn 179
changing reg in insn 169
changing reg in insn 164
changing reg in insn 178
changing reg in insn 164
changing reg in insn 165
changing reg in insn 170
changing reg in insn 171
changing reg in insn 178
changing reg in insn 179
changing reg in insn 194
changing reg in insn 195
changing reg in insn 198
changing reg in insn 199
changing reg in insn 197
changing reg in insn 198
changing reg in insn 223
changing reg in insn 224
changing reg in insn 244
changing reg in insn 245
changing reg in insn 248
changing reg in insn 249
changing reg in insn 247
changing reg in insn 248
changing reg in insn 267
changing reg in insn 268
changing reg in insn 278
changing reg in insn 279
changing reg in insn 283
changing reg in insn 285
changing reg in insn 293
changing reg in insn 295
changing reg in insn 301
changing reg in insn 302
changing reg in insn 303
changing reg in insn 305
changing reg in insn 311
changing reg in insn 314
changing reg in insn 319
changing reg in insn 322
changing reg in insn 325
changing reg in insn 330
changing reg in insn 333
changing reg in insn 336
changing reg in insn 341
changing reg in insn 344
changing reg in insn 347
changing reg in insn 352
changing reg in insn 355
changing reg in insn 358
changing reg in insn 363
changing reg in insn 366
changing reg in insn 369
changing reg in insn 374
changing reg in insn 377
changing reg in insn 380
changing reg in insn 385
changing reg in insn 391
changing reg in insn 394
changing reg in insn 399
changing reg in insn 464
changing reg in insn 465
changing reg in insn 469
changing reg in insn 471
changing reg in insn 479
changing reg in insn 481
changing reg in insn 501
changing reg in insn 502
changing reg in insn 500
changing reg in insn 501
changing reg in insn 522
changing reg in insn 523
changing reg in insn 534
changing reg in insn 536
changing reg in insn 546
changing reg in insn 548
changing reg in insn 555
changing reg in insn 557
changing reg in insn 566
changing reg in insn 567
changing reg in insn 571
changing reg in insn 573
changing reg in insn 580
changing reg in insn 582
changing reg in insn 592
changing reg in insn 593
changing reg in insn 590
changing reg in insn 592
changing reg in insn 593
changing reg in insn 603
changing reg in insn 596
changing reg in insn 596
changing reg in insn 599
changing reg in insn 597
changing reg in insn 597
changing reg in insn 598
changing reg in insn 598
changing reg in insn 599
changing reg in insn 599
changing reg in insn 602
changing reg in insn 602
changing reg in insn 601
changing reg in insn 602
changing reg in insn 603
changing reg in insn 621
changing reg in insn 611
changing reg in insn 606
changing reg in insn 620
changing reg in insn 605
changing reg in insn 604
changing reg in insn 605
changing reg in insn 606
changing reg in insn 607
changing reg in insn 612
changing reg in insn 613
changing reg in insn 620
changing reg in insn 621
changing reg in insn 625
changing reg in insn 626
changing reg in insn 626
changing reg in insn 627
changing reg in insn 627
changing reg in insn 628
changing reg in insn 638
changing reg in insn 636
changing reg in insn 645
changing reg in insn 638
changing reg in insn 639
changing reg in insn 641
changing reg in insn 642
changing reg in insn 645
changing reg in insn 646
changing reg in insn 673
changing reg in insn 671
changing reg in insn 673
changing reg in insn 674
changing reg in insn 674
changing reg in insn 675
changing reg in insn 675
changing reg in insn 676
changing reg in insn 677
changing reg in insn 678
changing reg in insn 696
changing reg in insn 694
changing reg in insn 703
changing reg in insn 696
changing reg in insn 697
changing reg in insn 699
changing reg in insn 700
changing reg in insn 703
changing reg in insn 704
changing reg in insn 722
changing reg in insn 723
changing reg in insn 733
changing reg in insn 734
changing reg in insn 738
changing reg in insn 740
changing reg in insn 749
changing reg in insn 751
changing reg in insn 758
changing reg in insn 759
changing reg in insn 770
changing reg in insn 774
changing reg in insn 777
changing reg in insn 778
changing reg in insn 781
changing reg in insn 784
changing reg in insn 787
changing reg in insn 792
changing reg in insn 796
changing reg in insn 800
changing reg in insn 803
changing reg in insn 804
changing reg in insn 807
changing reg in insn 810
changing reg in insn 813
changing reg in insn 818
changing reg in insn 822
changing reg in insn 826
changing reg in insn 829
changing reg in insn 830
changing reg in insn 833
changing reg in insn 836
changing reg in insn 839
changing reg in insn 844
changing reg in insn 848
changing reg in insn 852
changing reg in insn 855
changing reg in insn 856
changing reg in insn 859
changing reg in insn 862
changing reg in insn 865
changing reg in insn 870
changing reg in insn 874
changing reg in insn 878
changing reg in insn 881
changing reg in insn 882
changing reg in insn 885
changing reg in insn 888
changing reg in insn 891
changing reg in insn 896
changing reg in insn 900
changing reg in insn 904
changing reg in insn 907
changing reg in insn 908
changing reg in insn 911
changing reg in insn 914
changing reg in insn 917
changing reg in insn 922
changing reg in insn 929
changing reg in insn 933
changing reg in insn 936
changing reg in insn 937
changing reg in insn 940
changing reg in insn 943
changing reg in insn 946
changing reg in insn 951
changing reg in insn 955
changing reg in insn 959
changing reg in insn 962
changing reg in insn 963
changing reg in insn 966
changing reg in insn 969
changing reg in insn 972
changing reg in insn 977
changing reg in insn 988
changing reg in insn 989
changing reg in insn 991
changing reg in insn 993
changing reg in insn 990
changing reg in insn 991
changing reg in insn 1003
changing reg in insn 1004
changing reg in insn 1002
changing reg in insn 1003
changing reg in insn 1005
changing reg in insn 1006
deleting insn with uid = 1162.
deleting insn with uid = 1164.
deleting insn with uid = 1166.
deleting insn with uid = 1168.
deleting insn with uid = 1170.
deleting insn with uid = 1172.
deleting insn with uid = 1174.
deleting insn with uid = 54.
deleting insn with uid = 64.
deleting insn with uid = 98.
deleting insn with uid = 118.
deleting insn with uid = 127.
deleting insn with uid = 140.
deleting insn with uid = 1177.
deleting insn with uid = 1178.
deleting insn with uid = 210.
deleting insn with uid = 260.
deleting insn with uid = 285.
deleting insn with uid = 295.
deleting insn with uid = 305.
deleting insn with uid = 1198.
deleting insn with uid = 1200.
deleting insn with uid = 1202.
deleting insn with uid = 1204.
deleting insn with uid = 1206.
deleting insn with uid = 1208.
deleting insn with uid = 1210.
deleting insn with uid = 1212.
deleting insn with uid = 1214.
deleting insn with uid = 1216.
deleting insn with uid = 1218.
deleting insn with uid = 1220.
deleting insn with uid = 1222.
deleting insn with uid = 1224.
deleting insn with uid = 471.
deleting insn with uid = 481.
deleting insn with uid = 515.
deleting insn with uid = 536.
deleting insn with uid = 548.
deleting insn with uid = 557.
deleting insn with uid = 573.
deleting insn with uid = 582.
deleting insn with uid = 1227.
deleting insn with uid = 1229.
deleting insn with uid = 1233.
deleting insn with uid = 657.
deleting insn with uid = 1234.
deleting insn with uid = 678.
deleting insn with uid = 1237.
deleting insn with uid = 715.
deleting insn with uid = 740.
deleting insn with uid = 751.
deleting insn with uid = 1007.


try_optimize_cfg iteration 1

Forwarding edge 78->79 to 60 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 101.
verify found no changes in insn with uid = 110.
verify found no changes in insn with uid = 120.
verify found no changes in insn with uid = 129.
verify found no changes in insn with uid = 142.
verify found no changes in insn with uid = 213.
verify found no changes in insn with uid = 229.
verify found no changes in insn with uid = 234.
verify found no changes in insn with uid = 263.
verify found no changes in insn with uid = 272.
verify found no changes in insn with uid = 287.
verify found no changes in insn with uid = 297.
verify found no changes in insn with uid = 307.
verify found no changes in insn with uid = 473.
verify found no changes in insn with uid = 483.
verify found no changes in insn with uid = 518.
verify found no changes in insn with uid = 527.
verify found no changes in insn with uid = 538.
verify found no changes in insn with uid = 550.
verify found no changes in insn with uid = 559.
verify found no changes in insn with uid = 575.
verify found no changes in insn with uid = 584.
verify found no changes in insn with uid = 660.
verify found no changes in insn with uid = 680.
verify found no changes in insn with uid = 686.
verify found no changes in insn with uid = 718.
verify found no changes in insn with uid = 727.
verify found no changes in insn with uid = 742.
verify found no changes in insn with uid = 753.
verify found no changes in insn with uid = 996.
verify found no changes in insn with uid = 1010.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 85 n_edges 124 count 85 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 85 n_edges 124 count 85 (    1)


Final

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11]
;;  ref usage 	r0={211d,201u,5e} r1={91d,89u,8e} r2={102d,82u,1e} r3={1d,220u,43e} r4={1d,96u} r5={6d,6u} r6={6d,7u,1e} r7={1d,166u} r8={33d} r9={33d} r10={33d} r11={33d} r12={33d} r13={33d} r14={33d} r15={33d} r16={2e} r17={217d,44u} r18={33d} r19={33d} r20={17e} r21={34d} r22={34d} r23={34d} r24={34d} r25={32d} r26={32d} r29={32d} r30={32d} r31={32d} r32={32d} r33={32d} r34={32d} r35={32d} r36={32d} r37={106d,93u,2e} r38={53d,24u} r39={40d,7u} r40={45d,15u,4e} r53={33d} r54={33d} r55={33d} r56={33d} r57={33d} r58={33d} r59={33d} r60={33d} r61={33d} r62={33d} r63={33d} r64={33d} r65={33d} r66={33d} r67={33d} r68={33d} r69={33d} r70={33d} r71={33d} r72={33d} r73={33d} r74={33d} r75={33d} r76={33d} r77={33d} r78={33d} r79={33d} r80={33d} 
;;    total ref usage 3723{2590d,1050u,83e} in 742{709 regular + 33 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 3 [bx] 4 [si] 17 [flags] 39 [r10]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 3 [bx] 4 [si] 17 [flags] 39 [r10]
;; live  kill	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 3 bx [orig:633 state ] [633])
        (reg:DI 2 cx [ state ])) blake_ref.c:653 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 4 si [orig:634 hashval ] [634])
        (reg:DI 1 dx [ hashval ])) blake_ref.c:653 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 hashval+0 S8 A64])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) blake_ref.c:655 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 383 [0x17f]))) blake_ref.c:655 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 405)
            (pc))) blake_ref.c:655 612 {*jcc_1}
     (int_list:REG_BR_PROB 6100 (nil))
 -> 405)
;;  succ:       3 [39.0%]  (FALLTHRU)
;;              40 [61.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 3, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [39.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 44 [0x2c])) [0 zz+0 S1 A32])
        (const_int 0 [0])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 12 11 13 3 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 45 [0x2d])) [0 zo+0 S1 A8])
        (const_int 1 [0x1])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 13 12 14 3 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 46 [0x2e])) [0 oz+0 S1 A16])
        (const_int -128 [0xffffffffffffff80])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 14 13 15 3 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 47 [0x2f])) [0 oo+0 S1 A8])
        (const_int -127 [0xffffffffffffff81])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:SI 38 r9 [orig:88 D.6032 ] [88])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) blake_ref.c:416 90 {*movsi_internal}
     (nil))
(insn 16 15 18 3 (set (reg:SI 0 ax [orig:89 D.6033 ] [89])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])) blake_ref.c:416 90 {*movsi_internal}
     (nil))
(note 18 16 19 3 NOTE_INSN_DELETED)
(insn 19 18 1161 3 (set (reg/v:SI 2 cx [orig:92 high ] [92])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 52 [0x34])) [2 state_4(D)->t32+4 S4 A32])) blake_ref.c:417 90 {*movsi_internal}
     (nil))
(insn 1161 19 1081 3 (set (reg/v:SI 1 dx [orig:91 low ] [91])
        (reg:SI 38 r9 [orig:88 D.6032 ] [88])) blake_ref.c:419 90 {*movsi_internal}
     (nil))
(insn 1081 1161 1082 3 (parallel [
            (set (reg:CCC 17 flags)
                (compare:CCC (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                        (reg:SI 0 ax [orig:89 D.6033 ] [89]))
                    (reg/v:SI 1 dx [orig:91 low ] [91])))
            (set (reg/v:SI 1 dx [orig:91 low ] [91])
                (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                    (reg:SI 0 ax [orig:89 D.6033 ] [89])))
        ]) blake_ref.c:419 302 {*addsi3_cc_overflow}
     (nil))
(insn 1082 1081 1163 3 (parallel [
            (set (reg/v:SI 2 cx [orig:92 high ] [92])
                (plus:SI (plus:SI (ltu:SI (reg:CCC 17 flags)
                            (const_int 0 [0]))
                        (reg/v:SI 2 cx [orig:92 high ] [92]))
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:419 284 {addsi3_carry}
     (nil))
(insn 1163 1082 26 3 (set (reg:SI 37 r8 [orig:635 D.6032 ] [635])
        (reg/v:SI 2 cx [orig:92 high ] [92])) blake_ref.c:420 90 {*movsi_internal}
     (nil))
(insn 26 1163 27 3 (parallel [
            (set (reg:SI 37 r8 [orig:635 D.6032 ] [635])
                (lshiftrt:SI (reg:SI 37 r8 [orig:635 D.6032 ] [635])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 544 {*lshrsi3_1}
     (nil))
(insn 27 26 1165 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 msglen+0 S1 A128])
        (reg:QI 37 r8 [orig:635 D.6032 ] [635])) blake_ref.c:420 93 {*movqi_internal}
     (nil))
(insn 1165 27 28 3 (set (reg:SI 37 r8 [orig:636 D.6032 ] [636])
        (reg/v:SI 2 cx [orig:92 high ] [92])) blake_ref.c:420 90 {*movsi_internal}
     (nil))
(insn 28 1165 29 3 (parallel [
            (set (reg:SI 37 r8 [orig:636 D.6032 ] [636])
                (lshiftrt:SI (reg:SI 37 r8 [orig:636 D.6032 ] [636])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 544 {*lshrsi3_1}
     (nil))
(insn 29 28 1167 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 49 [0x31])) [0 msglen+1 S1 A8])
        (reg:QI 37 r8 [orig:636 D.6032 ] [636])) blake_ref.c:420 93 {*movqi_internal}
     (nil))
(insn 1167 29 30 3 (set (reg:SI 37 r8 [orig:637 D.6032 ] [637])
        (reg/v:SI 2 cx [orig:92 high ] [92])) blake_ref.c:420 90 {*movsi_internal}
     (nil))
(insn 30 1167 31 3 (parallel [
            (set (reg:SI 37 r8 [orig:637 D.6032 ] [637])
                (lshiftrt:SI (reg:SI 37 r8 [orig:637 D.6032 ] [637])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 544 {*lshrsi3_1}
     (nil))
(insn 31 30 32 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 50 [0x32])) [0 msglen+2 S1 A16])
        (reg:QI 37 r8 [orig:637 D.6032 ] [637])) blake_ref.c:420 93 {*movqi_internal}
     (nil))
(insn 32 31 1169 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 51 [0x33])) [0 msglen+3 S1 A8])
        (reg:QI 2 cx [orig:92 high ] [92])) blake_ref.c:420 93 {*movqi_internal}
     (nil))
(insn 1169 32 33 3 (set (reg:SI 2 cx [orig:638 D.6032 ] [638])
        (reg/v:SI 1 dx [orig:91 low ] [91])) blake_ref.c:421 90 {*movsi_internal}
     (nil))
(insn 33 1169 34 3 (parallel [
            (set (reg:SI 2 cx [orig:638 D.6032 ] [638])
                (lshiftrt:SI (reg:SI 2 cx [orig:638 D.6032 ] [638])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 544 {*lshrsi3_1}
     (nil))
(insn 34 33 1171 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 52 [0x34])) [0 msglen+4 S1 A32])
        (reg:QI 2 cx [orig:638 D.6032 ] [638])) blake_ref.c:421 93 {*movqi_internal}
     (nil))
(insn 1171 34 35 3 (set (reg:SI 2 cx [orig:639 D.6032 ] [639])
        (reg/v:SI 1 dx [orig:91 low ] [91])) blake_ref.c:421 90 {*movsi_internal}
     (nil))
(insn 35 1171 36 3 (parallel [
            (set (reg:SI 2 cx [orig:639 D.6032 ] [639])
                (lshiftrt:SI (reg:SI 2 cx [orig:639 D.6032 ] [639])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 544 {*lshrsi3_1}
     (nil))
(insn 36 35 1173 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 53 [0x35])) [0 msglen+5 S1 A8])
        (reg:QI 2 cx [orig:639 D.6032 ] [639])) blake_ref.c:421 93 {*movqi_internal}
     (nil))
(insn 1173 36 37 3 (set (reg:SI 2 cx [orig:640 D.6032 ] [640])
        (reg/v:SI 1 dx [orig:91 low ] [91])) blake_ref.c:421 90 {*movsi_internal}
     (nil))
(insn 37 1173 38 3 (parallel [
            (set (reg:SI 2 cx [orig:640 D.6032 ] [640])
                (lshiftrt:SI (reg:SI 2 cx [orig:640 D.6032 ] [640])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 544 {*lshrsi3_1}
     (nil))
(insn 38 37 39 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 54 [0x36])) [0 msglen+6 S1 A16])
        (reg:QI 2 cx [orig:640 D.6032 ] [640])) blake_ref.c:421 93 {*movqi_internal}
     (nil))
(insn 39 38 40 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 55 [0x37])) [0 msglen+7 S1 A8])
        (reg:QI 1 dx [orig:91 low ] [91])) blake_ref.c:421 93 {*movqi_internal}
     (nil))
(note 40 39 1159 3 NOTE_INSN_DELETED)
(insn 1159 40 42 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
                (const_int 7 [0x7]))
            (const_int 0 [0]))) blake_ref.c:423 362 {*testsi_1}
     (nil))
(jump_insn 42 1159 43 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 145)
            (pc))) blake_ref.c:423 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 145)
;;  succ:       4 [50.0%]  (FALLTHRU)
;;              20 [50.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]

;; basic block 4, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [50.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 43 42 44 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 440 [0x1b8]))) blake_ref.c:426 7 {*cmpsi_1}
     (nil))
(jump_insn 45 44 46 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) blake_ref.c:426 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 70)
;;  succ:       5 [28.0%]  (FALLTHRU)
;;              8 [72.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]

;; basic block 5, loop depth 0, count 0, freq 546, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [28.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; lr  use 	 3 [bx] 7 [sp] 38 [r9] 39 [r10]
;; lr  def 	 17 [flags] 38 [r9]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags] 38 [r9]
;; live  kill	 17 [flags]
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 5 (parallel [
            (set (reg:SI 38 r9 [642])
                (plus:SI (reg:SI 38 r9 [orig:88 D.6032 ] [88])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:428 217 {*addsi_1}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (nil)))
(insn 48 47 49 5 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 38 r9 [642])) blake_ref.c:428 90 {*movsi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 224 [0xe0]))) blake_ref.c:429 7 {*cmpsi_1}
     (nil))
(jump_insn 50 49 51 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) blake_ref.c:429 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 60)
;;  succ:       6 [28.0%]  (FALLTHRU)
;;              7 [72.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 153, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [28.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(note 51 50 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 6 (parallel [
            (set (reg/f:DI 1 dx [643])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 46 [0x2e])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -18 [0xffffffffffffffee]))
        (nil)))
(insn 53 52 55 6 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 55 53 56 6 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 56 55 57 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 57 56 1107 6 (set (reg:SI 0 ax [orig:115 D.6032 ] [115])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1107 57 1108 6 (set (pc)
        (label_ref 134)) 654 {jump}
     (nil)
 -> 134)
;;  succ:       19 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1108 1107 60)
;; basic block 7, loop depth 0, count 0, freq 393, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [72.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 60 1108 61 7 97 "" [1 uses])
(note 61 60 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 7 (parallel [
            (set (reg/f:DI 1 dx [644])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 47 [0x2f])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -17 [0xffffffffffffffef]))
        (nil)))
(insn 63 62 65 7 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 65 63 66 7 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 66 65 67 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 67 66 1109 7 (set (reg:SI 0 ax [orig:115 D.6032 ] [115])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1109 67 1110 7 (set (pc)
        (label_ref 134)) 654 {jump}
     (nil)
 -> 134)
;;  succ:       19 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1110 1109 70)
;; basic block 8, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [72.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 70 1110 71 8 96 "" [1 uses])
(note 71 70 72 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 439 [0x1b7]))) blake_ref.c:435 7 {*cmpsi_1}
     (nil))
(jump_insn 73 72 74 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) blake_ref.c:435 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 81)
;;  succ:       9 [50.0%]  (FALLTHRU)
;;              11 [50.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [50.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 74 73 75 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 0 [0]))) blake_ref.c:437 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 76 75 77 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 986)
            (pc))) blake_ref.c:437 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 986)
;;  succ:       10 [50.0%]  (FALLTHRU)
;;              82 [50.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 10, loop depth 0, count 0, freq 351, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [50.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	
;; live  kill	
(note 77 76 78 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 1111 10 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:438 90 {*movsi_internal}
     (nil))
(jump_insn 1111 78 1112 10 (set (pc)
        (label_ref 986)) 654 {jump}
     (nil)
 -> 986)
;;  succ:       82 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

(barrier 1112 1111 81)
;; basic block 11, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [50.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 1 [dx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(code_label 81 1112 82 11 99 "" [1 uses])
(note 82 81 83 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 11 (parallel [
            (set (reg:SI 1 dx [orig:109 D.6032 ] [109])
                (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:445 217 {*addsi_1}
     (nil))
(insn 84 83 85 11 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [orig:109 D.6032 ] [109])) blake_ref.c:445 90 {*movsi_internal}
     (nil))
(insn 85 84 86 11 (set (reg:SI 37 r8 [646])
        (const_int 512 [0x200])) blake_ref.c:446 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 512 [0x200])
        (nil)))
(insn 86 85 87 11 (parallel [
            (set (reg:SI 37 r8 [orig:645 D.6033 ] [645])
                (minus:SI (reg:SI 37 r8 [646])
                    (reg:SI 0 ax [orig:89 D.6033 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:446 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 512 [0x200])
            (reg:SI 0 ax [orig:89 D.6033 ] [89]))
        (nil)))
(insn 87 86 88 11 (set (reg:DI 37 r8 [orig:111 D.6036 ] [111])
        (sign_extend:DI (reg:SI 37 r8 [orig:645 D.6033 ] [645]))) blake_ref.c:446 142 {*extendsidi2_rex64}
     (nil))
(note 88 87 89 11 NOTE_INSN_DELETED)
(note 89 88 90 11 NOTE_INSN_DELETED)
(insn 90 89 91 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 37 r8 [orig:111 D.6036 ] [111])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 91 90 1018 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1030)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1030)
;;  succ:       13 [14.0%] 
;;              12 [86.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 12, loop depth 0, count 0, freq 604, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [86.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1018 91 92 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 92 1018 93 12 NOTE_INSN_DELETED)
(note 93 92 94 12 NOTE_INSN_DELETED)
(insn 94 93 95 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (nil))
(jump_insn 95 94 1030 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 8372 (nil))
 -> 103)
;;  succ:       14 [83.7%] 
;;              13 [16.3%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 13, loop depth 0, count 0, freq 343, maybe hot
;; Invalid sum of incoming frequencies 196, should be 343
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [16.3%]  (FALLTHRU)
;;              11 [14.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 1030 95 97 13 146 "" [1 uses])
(note 97 1030 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 99 97 100 13 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 100 99 101 13 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 101 100 102 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 102 101 103 13 (set (reg:SI 1 dx [orig:109 D.6032 ] [109])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 14, loop depth 0, count 0, freq 702, maybe hot
;; Invalid sum of incoming frequencies 849, should be 702
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [100.0%]  (FALLTHRU)
;;              12 [83.7%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 103 102 104 14 101 "" [1 uses])
(note 104 103 105 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 14 (parallel [
            (set (reg:SI 1 dx [651])
                (plus:SI (reg:SI 1 dx [orig:109 D.6032 ] [109])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:447 217 {*addsi_1}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (nil)))
(insn 106 105 107 14 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [651])) blake_ref.c:447 90 {*movsi_internal}
     (nil))
(insn 107 106 108 14 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) 89 {*movdi_internal}
     (nil))
(insn 108 107 109 14 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 109 108 110 14 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 110 109 111 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 111 110 997 14 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:449 90 {*movsi_internal}
     (nil))
;;  succ:       15 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 15, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [100.0%]  (FALLTHRU)
;;              82 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 997 111 112 15 144 "" [1 uses])
(note 112 997 113 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 224 [0xe0]))) blake_ref.c:451 7 {*cmpsi_1}
     (nil))
(jump_insn 114 113 115 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 123)
            (pc))) blake_ref.c:451 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 123)
;;  succ:       16 [28.0%]  (FALLTHRU)
;;              17 [72.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 393, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [28.0%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(note 115 114 116 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 16 (parallel [
            (set (reg/f:DI 1 dx [652])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 44 [0x2c])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -20 [0xffffffffffffffec]))
        (nil)))
(insn 117 116 119 16 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 119 117 120 16 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 120 119 1113 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1113 120 1114 16 (set (pc)
        (label_ref 130)) 654 {jump}
     (nil)
 -> 130)
;;  succ:       18 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1114 1113 123)
;; basic block 17, loop depth 0, count 0, freq 1011, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [72.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 123 1114 124 17 103 "" [1 uses])
(note 124 123 125 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 17 (parallel [
            (set (reg/f:DI 1 dx [653])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 45 [0x2d])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -19 [0xffffffffffffffed]))
        (nil)))
(insn 126 125 128 17 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 128 126 129 17 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 129 128 130 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 18, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       17 [100.0%]  (FALLTHRU)
;;              16 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 130 129 131 18 104 "" [1 uses])
(note 131 130 132 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(note 132 131 1175 18 NOTE_INSN_DELETED)
(insn 1175 132 133 18 (set (reg:SI 0 ax [1003])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) blake_ref.c:455 90 {*movsi_internal}
     (nil))
(insn 133 1175 134 18 (parallel [
            (set (reg:SI 0 ax [orig:115 D.6032 ] [115])
                (plus:SI (reg:SI 0 ax [1003])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:455 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
;;  succ:       19 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

;; basic block 19, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       18 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;;              7 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 134 133 135 19 98 "" [2 uses])
(note 135 134 136 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 19 (parallel [
            (set (reg:SI 0 ax [655])
                (plus:SI (reg:SI 0 ax [orig:115 D.6032 ] [115])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:457 217 {*addsi_1}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (nil)))
(insn 137 136 138 19 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 0 ax [655])) blake_ref.c:457 90 {*movsi_internal}
     (nil))
(insn 138 137 139 19 (parallel [
            (set (reg/f:DI 1 dx [656])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(insn 139 138 141 19 (set (reg:DI 37 r8)
        (const_int 64 [0x40])) 89 {*movdi_internal}
     (nil))
(insn 141 139 142 19 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 142 141 1115 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1115 142 1116 19 (set (pc)
        (label_ref 308)) 654 {jump}
     (nil)
 -> 308)
;;  succ:       38 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1116 1115 145)
;; basic block 20, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [50.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 37 [r8] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  gen 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 37 [r8] 40 [r11]
;; live  kill	 17 [flags]
(code_label 145 1116 146 20 95 "" [1 uses])
(note 146 145 148 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 148 146 149 20 (parallel [
            (set (reg:SI 37 r8 [658])
                (plus:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 217 {*addsi_1}
     (nil))
(insn 149 148 150 20 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 0 [0]))) blake_ref.c:464 3 {*cmpsi_ccno_1}
     (nil))
(insn 150 149 151 20 (set (reg:SI 37 r8 [orig:657 D.6033 ] [657])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 37 r8 [658])
            (reg:SI 0 ax [orig:89 D.6033 ] [89]))) blake_ref.c:464 951 {*movsicc_noc}
     (nil))
(insn 151 150 1176 20 (parallel [
            (set (reg:SI 37 r8 [659])
                (ashiftrt:SI (reg:SI 37 r8 [orig:657 D.6033 ] [657])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 545 {*ashrsi3_1}
     (expr_list:REG_EQUAL (div:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 8 [0x8]))
        (nil)))
(insn 1176 151 153 20 (set (reg:SI 2 cx [660])
        (reg:SI 0 ax [orig:89 D.6033 ] [89])) blake_ref.c:464 90 {*movsi_internal}
     (nil))
(insn 153 1176 154 20 (parallel [
            (set (reg:SI 2 cx [660])
                (ashiftrt:SI (reg:SI 2 cx [660])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 538 {ashrsi3_cvt}
     (nil))
(insn 154 153 155 20 (parallel [
            (set (reg:SI 2 cx [661])
                (lshiftrt:SI (reg:SI 2 cx [660])
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 544 {*lshrsi3_1}
     (nil))
(insn 155 154 156 20 (parallel [
            (set (reg:SI 40 r11 [662])
                (plus:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
                    (reg:SI 2 cx [661])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 217 {*addsi_1}
     (nil))
(insn 156 155 157 20 (parallel [
            (set (reg:SI 40 r11 [663])
                (and:SI (reg:SI 40 r11 [662])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 381 {*andsi_1}
     (nil))
(insn 157 156 159 20 (parallel [
            (set (reg:SI 40 r11 [664])
                (minus:SI (reg:SI 40 r11 [663])
                    (reg:SI 2 cx [661])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 260 {*subsi_1}
     (nil))
(insn 159 157 160 20 (set (reg:SI 2 cx [666])
        (const_int 8 [0x8])) blake_ref.c:465 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 8 [0x8])
        (nil)))
(insn 160 159 161 20 (parallel [
            (set (reg:SI 2 cx [orig:665 D.6033 ] [665])
                (minus:SI (reg:SI 2 cx [666])
                    (reg:SI 40 r11 [664])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 8 [0x8])
            (reg:SI 40 r11 [664]))
        (nil)))
(insn 161 160 162 20 (set (reg:SI 6 bp [668])
        (const_int 255 [0xff])) blake_ref.c:465 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 255 [0xff])
        (nil)))
(insn 162 161 163 20 (parallel [
            (set (reg:SI 6 bp [orig:667 D.6033 ] [667])
                (ashift:SI (reg:SI 6 bp [668])
                    (reg:QI 2 cx [orig:665 D.6033 ] [665])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (const_int 255 [0xff])
            (subreg:QI (reg:SI 2 cx [orig:665 D.6033 ] [665]) 0))
        (nil)))
(insn 163 162 164 20 (set (reg:DI 37 r8 [orig:669 D.6033 ] [669])
        (sign_extend:DI (reg:SI 37 r8 [659]))) blake_ref.c:464 142 {*extendsidi2_rex64}
     (nil))
(insn 164 163 165 20 (parallel [
            (set (reg:QI 6 bp [orig:670 D.6037 ] [670])
                (and:QI (reg:QI 6 bp [orig:667 D.6033 ] [667])
                    (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                                (reg:DI 37 r8 [orig:669 D.6033 ] [669]))
                            (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 384 {*andqi_1}
     (nil))
(insn 165 164 1180 20 (set (reg:SI 5 di [672])
        (const_int 128 [0x80])) blake_ref.c:465 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 128 [0x80])
        (nil)))
(insn 1180 165 166 20 (set (reg:QI 2 cx [1006])
        (reg:QI 40 r11 [664])) blake_ref.c:465 93 {*movqi_internal}
     (nil))
(insn 166 1180 1179 20 (parallel [
            (set (reg:SI 5 di [orig:671 D.6033 ] [671])
                (ashiftrt:SI (reg:SI 5 di [orig:671 D.6033 ] [671])
                    (reg:QI 2 cx [1006])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 545 {*ashrsi3_1}
     (expr_list:REG_EQUAL (ashiftrt:SI (const_int 128 [0x80])
            (subreg:QI (reg:SI 40 r11 [664]) 0))
        (nil)))
(insn 1179 166 167 20 (set (reg:SI 2 cx [orig:671 D.6033 ] [671])
        (reg:SI 5 di [orig:671 D.6033 ] [671])) blake_ref.c:465 90 {*movsi_internal}
     (nil))
(insn 167 1179 169 20 (parallel [
            (set (reg:QI 2 cx [orig:128 D.6034 ] [128])
                (xor:QI (reg:QI 2 cx [orig:671 D.6033 ] [671])
                    (reg:QI 6 bp [orig:670 D.6037 ] [670])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 406 {*xorqi_1}
     (nil))
(insn 169 167 170 20 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (reg:DI 37 r8 [orig:669 D.6033 ] [669]))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (reg:QI 2 cx [orig:128 D.6034 ] [128])) blake_ref.c:465 93 {*movqi_internal}
     (nil))
(insn 170 169 171 20 (parallel [
            (set (reg:SI 5 di [orig:674 D.6035 ] [674])
                (plus:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
                    (const_int -441 [0xfffffffffffffe47])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:467 217 {*addsi_1}
     (nil))
(insn 171 170 172 20 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 5 di [orig:674 D.6035 ] [674])
            (const_int 5 [0x5]))) blake_ref.c:467 7 {*cmpsi_1}
     (nil))
(jump_insn 172 171 173 20 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 187)
            (pc))) blake_ref.c:467 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 187)
;;  succ:       21 [50.0%]  (FALLTHRU)
;;              24 [50.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 21, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 [50.0%]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 17 [flags]
;; live  kill	
(note 173 172 174 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 224 [0xe0]))) blake_ref.c:469 7 {*cmpsi_1}
     (nil))
(jump_insn 175 174 176 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 180)
            (pc))) blake_ref.c:469 612 {*jcc_1}
     (int_list:REG_BR_PROB 2800 (nil))
 -> 180)
;;  succ:       23 [28.0%] 
;;              22 [72.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]

;; basic block 22, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 21, next block 23, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       21 [72.0%]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
;; live  gen 	 2 [cx]
;; live  kill	 17 [flags]
(note 176 175 178 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 178 176 179 22 (parallel [
            (set (reg:QI 2 cx [676])
                (xor:QI (reg:QI 2 cx [orig:128 D.6034 ] [128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:472 406 {*xorqi_1}
     (expr_list:REG_EQUIV (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (reg:DI 37 r8 [orig:669 D.6033 ] [669]))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (nil)))
(insn 179 178 180 22 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (reg:DI 37 r8 [orig:669 D.6033 ] [669]))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (reg:QI 2 cx [676])) blake_ref.c:472 93 {*movqi_internal}
     (nil))
;;  succ:       23 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]
;; live  out 	 3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]

;; basic block 23, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       21 [28.0%] 
;;              22 [100.0%]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]
;; lr  use 	 3 [bx] 7 [sp] 38 [r9] 40 [r11]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 180 179 181 23 107 "" [1 uses])
(note 181 180 182 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(note 182 181 183 23 NOTE_INSN_DELETED)
(insn 183 182 184 23 (set (reg:SI 0 ax [orig:87 D.6031 ] [87])
        (plus:SI (plus:SI (reg:SI 38 r9 [orig:88 D.6032 ] [88])
                (reg:SI 40 r11 [664]))
            (const_int -8 [0xfffffffffffffff8]))) blake_ref.c:473 213 {*leasi}
     (nil))
(insn 184 183 1117 23 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 448 [0x1c0])) blake_ref.c:475 90 {*movsi_internal}
     (nil))
(jump_insn 1117 184 1118 23 (set (pc)
        (label_ref 299)) 654 {jump}
     (nil)
 -> 299)
;;  succ:       37 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1118 1117 187)
;; basic block 24, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 [50.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 187 1118 188 24 106 "" [1 uses])
(note 188 187 189 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 189 188 190 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 439 [0x1b7]))) blake_ref.c:478 7 {*cmpsi_1}
     (nil))
(jump_insn 190 189 191 24 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 218)
            (pc))) blake_ref.c:478 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 218)
;;  succ:       25 [29.0%]  (FALLTHRU)
;;              28 [71.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 25, loop depth 0, count 0, freq 283, maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       24 [29.0%]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(note 191 190 192 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 25 (parallel [
            (set (reg:SI 1 dx [orig:609 D.6031 ] [609])
                (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:480 217 {*addsi_1}
     (nil))
(insn 193 192 194 25 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [orig:609 D.6031 ] [609])) blake_ref.c:480 90 {*movsi_internal}
     (nil))
(insn 194 193 195 25 (parallel [
            (set (reg:SI 0 ax [orig:678 D.6035 ] [678])
                (and:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:481 381 {*andsi_1}
     (nil))
(insn 195 194 196 25 (parallel [
            (set (reg:SI 0 ax [orig:137 D.6033 ] [137])
                (plus:SI (reg:SI 0 ax [orig:678 D.6035 ] [678])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:481 217 {*addsi_1}
     (nil))
(insn 196 195 197 25 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 0 ax [orig:137 D.6033 ] [137])) blake_ref.c:481 90 {*movsi_internal}
     (nil))
(insn 197 196 198 25 (set (reg:SI 37 r8 [680])
        (const_int 440 [0x1b8])) blake_ref.c:482 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 440 [0x1b8])
        (nil)))
(insn 198 197 199 25 (parallel [
            (set (reg:SI 37 r8 [orig:679 D.6033 ] [679])
                (minus:SI (reg:SI 37 r8 [680])
                    (reg:SI 0 ax [orig:137 D.6033 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:482 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 440 [0x1b8])
            (reg:SI 0 ax [orig:137 D.6033 ] [137]))
        (nil)))
(insn 199 198 200 25 (set (reg:DI 37 r8 [orig:139 D.6036 ] [139])
        (sign_extend:DI (reg:SI 37 r8 [orig:679 D.6033 ] [679]))) blake_ref.c:482 142 {*extendsidi2_rex64}
     (nil))
(note 200 199 201 25 NOTE_INSN_DELETED)
(note 201 200 202 25 NOTE_INSN_DELETED)
(insn 202 201 203 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 37 r8 [orig:139 D.6036 ] [139])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 203 202 1020 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1031)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1031)
;;  succ:       27 [14.0%] 
;;              26 [86.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]

;; basic block 26, loop depth 0, count 0, freq 243, maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       25 [86.0%]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1020 203 204 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(note 204 1020 205 26 NOTE_INSN_DELETED)
(note 205 204 206 26 NOTE_INSN_DELETED)
(insn 206 205 207 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:137 D.6033 ] [137])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (nil))
(jump_insn 207 206 1031 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 276)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 8372 (nil))
 -> 276)
;;  succ:       34 [83.7%] 
;;              27 [16.3%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]

;; basic block 27, loop depth 0, count 0, freq 61, maybe hot
;;  prev block 26, next block 28, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [16.3%]  (FALLTHRU)
;;              25 [14.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 39 [r10]
;; live  kill	
(code_label 1031 207 209 27 147 "" [1 uses])
(note 209 1031 211 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 211 209 212 27 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 212 211 213 27 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 213 212 214 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 214 213 215 27 (set (reg:SI 1 dx [orig:609 D.6031 ] [609])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 215 214 1119 27 (set (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1119 215 1120 27 (set (pc)
        (label_ref 276)) 654 {jump}
     (nil)
 -> 276)
;;  succ:       34 [100.0%] 
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

(barrier 1120 1119 218)
;; basic block 28, loop depth 0, count 0, freq 692, maybe hot
;;  prev block 27, next block 29, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       24 [71.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 218 1120 219 28 109 "" [1 uses])
(note 219 218 220 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 220 219 221 28 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 504 [0x1f8]))) blake_ref.c:485 7 {*cmpsi_1}
     (nil))
(jump_insn 221 220 222 28 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 240)
            (pc))) blake_ref.c:485 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 240)
;;  succ:       29 [29.0%]  (FALLTHRU)
;;              30 [71.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 29, loop depth 0, count 0, freq 201, maybe hot
;;  prev block 28, next block 30, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       28 [29.0%]  (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 39 [r10]
;; live  kill	 17 [flags]
(note 222 221 223 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 223 222 224 29 (parallel [
            (set (reg:SI 1 dx [685])
                (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:487 217 {*addsi_1}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (nil)))
(insn 224 223 225 29 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [685])) blake_ref.c:487 90 {*movsi_internal}
     (nil))
(insn 225 224 226 29 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 512 [0x200])) blake_ref.c:488 90 {*movsi_internal}
     (nil))
(insn 226 225 227 29 (set (reg:DI 37 r8)
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 227 226 228 29 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 228 227 229 29 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 229 228 230 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 230 229 231 29 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                            (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:490 217 {*addsi_1}
     (nil))
(insn 231 230 232 29 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) 89 {*movdi_internal}
     (nil))
(insn 232 231 233 29 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 233 232 234 29 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 234 233 235 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 235 234 236 29 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:492 90 {*movsi_internal}
     (nil))
(insn 236 235 237 29 (set (reg:SI 1 dx [orig:609 D.6031 ] [609])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 237 236 1121 29 (set (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1121 237 1122 29 (set (pc)
        (label_ref 276)) 654 {jump}
     (nil)
 -> 276)
;;  succ:       34 [100.0%] 
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

(barrier 1122 1121 240)
;; basic block 30, loop depth 0, count 0, freq 491, maybe hot
;;  prev block 29, next block 31, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       28 [71.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(code_label 240 1122 241 30 112 "" [1 uses])
(note 241 240 242 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 30 (parallel [
            (set (reg:SI 1 dx [orig:143 D.6032 ] [143])
                (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:496 217 {*addsi_1}
     (nil))
(insn 243 242 244 30 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [orig:143 D.6032 ] [143])) blake_ref.c:496 90 {*movsi_internal}
     (nil))
(insn 244 243 245 30 (parallel [
            (set (reg:SI 0 ax [orig:686 D.6035 ] [686])
                (and:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:498 381 {*andsi_1}
     (nil))
(insn 245 244 246 30 (parallel [
            (set (reg:SI 0 ax [orig:146 D.6033 ] [146])
                (plus:SI (reg:SI 0 ax [orig:686 D.6035 ] [686])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:498 217 {*addsi_1}
     (nil))
(insn 246 245 247 30 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 0 ax [orig:146 D.6033 ] [146])) blake_ref.c:498 90 {*movsi_internal}
     (nil))
(insn 247 246 248 30 (set (reg:SI 37 r8 [688])
        (const_int 512 [0x200])) blake_ref.c:499 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 512 [0x200])
        (nil)))
(insn 248 247 249 30 (parallel [
            (set (reg:SI 37 r8 [orig:687 D.6033 ] [687])
                (minus:SI (reg:SI 37 r8 [688])
                    (reg:SI 0 ax [orig:146 D.6033 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:499 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 512 [0x200])
            (reg:SI 0 ax [orig:146 D.6033 ] [146]))
        (nil)))
(insn 249 248 250 30 (set (reg:DI 37 r8 [orig:148 D.6036 ] [148])
        (sign_extend:DI (reg:SI 37 r8 [orig:687 D.6033 ] [687]))) blake_ref.c:499 142 {*extendsidi2_rex64}
     (nil))
(note 250 249 251 30 NOTE_INSN_DELETED)
(note 251 250 252 30 NOTE_INSN_DELETED)
(insn 252 251 253 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:146 D.6033 ] [146])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (nil))
(jump_insn 253 252 1022 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1032)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1032)
;;  succ:       32 [14.0%] 
;;              31 [86.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 31, loop depth 0, count 0, freq 422, maybe hot
;;  prev block 30, next block 32, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       30 [86.0%]  (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1022 253 254 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(note 254 1022 255 31 NOTE_INSN_DELETED)
(note 255 254 256 31 NOTE_INSN_DELETED)
(insn 256 255 257 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 37 r8 [orig:148 D.6036 ] [148])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 257 256 1032 31 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 8372 (nil))
 -> 265)
;;  succ:       33 [83.7%] 
;;              32 [16.3%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 32, loop depth 0, count 0, freq 240, maybe hot
;; Invalid sum of incoming frequencies 138, should be 240
;;  prev block 31, next block 33, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       31 [16.3%]  (FALLTHRU)
;;              30 [14.0%] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 1032 257 259 32 148 "" [1 uses])
(note 259 1032 261 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 261 259 262 32 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 262 261 263 32 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 263 262 264 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 264 263 265 32 (set (reg:SI 1 dx [orig:143 D.6032 ] [143])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       33 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 33, loop depth 0, count 0, freq 491, maybe hot
;; Invalid sum of incoming frequencies 593, should be 491
;;  prev block 32, next block 34, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       32 [100.0%]  (FALLTHRU)
;;              31 [83.7%] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 39 [r10]
;; live  kill	 17 [flags]
(code_label 265 264 266 33 113 "" [1 uses])
(note 266 265 267 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 33 (parallel [
            (set (reg:SI 1 dx [693])
                (plus:SI (reg:SI 1 dx [orig:143 D.6032 ] [143])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:500 217 {*addsi_1}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (nil)))
(insn 268 267 269 33 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [693])) blake_ref.c:500 90 {*movsi_internal}
     (nil))
(insn 269 268 270 33 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) 89 {*movdi_internal}
     (nil))
(insn 270 269 271 33 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 271 270 272 33 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 272 271 273 33 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 273 272 274 33 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:502 90 {*movsi_internal}
     (nil))
(insn 274 273 275 33 (set (reg:SI 1 dx [orig:609 D.6031 ] [609])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 275 274 276 33 (set (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       34 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 34, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 33, next block 35, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [83.7%] 
;;              27 [100.0%] 
;;              33 [100.0%]  (FALLTHRU)
;;              29 [100.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 39 [r10]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 276 275 277 34 110 "" [3 uses])
(note 277 276 278 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 278 277 279 34 (parallel [
            (set (reg:SI 1 dx [694])
                (plus:SI (reg:SI 1 dx [orig:609 D.6031 ] [609])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:505 217 {*addsi_1}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (nil)))
(insn 279 278 280 34 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [694])) blake_ref.c:505 90 {*movsi_internal}
     (nil))
(insn 280 279 281 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 224 [0xe0]))) blake_ref.c:506 7 {*cmpsi_1}
     (nil))
(jump_insn 281 280 282 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 291)
            (pc))) blake_ref.c:506 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 291)
;;  succ:       35 [28.0%]  (FALLTHRU)
;;              36 [72.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 35, loop depth 0, count 0, freq 273, maybe hot
;;  prev block 34, next block 36, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       34 [28.0%]  (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(note 282 281 283 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 283 282 284 35 (parallel [
            (set (reg/f:DI 1 dx [695])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 44 [0x2c])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -20 [0xffffffffffffffec]))
        (nil)))
(insn 284 283 286 35 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 286 284 287 35 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 287 286 288 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 288 287 1123 35 (set (reg:SI 0 ax [orig:87 D.6031 ] [87])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1123 288 1124 35 (set (pc)
        (label_ref 299)) 654 {jump}
     (nil)
 -> 299)
;;  succ:       37 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1124 1123 291)
;; basic block 36, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 35, next block 37, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       34 [72.0%] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 291 1124 292 36 115 "" [1 uses])
(note 292 291 293 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 293 292 294 36 (parallel [
            (set (reg/f:DI 1 dx [696])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 45 [0x2d])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -19 [0xffffffffffffffed]))
        (nil)))
(insn 294 293 296 36 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 296 294 297 36 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 297 296 298 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 298 297 299 36 (set (reg:SI 0 ax [orig:87 D.6031 ] [87])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       37 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

;; basic block 37, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 36, next block 38, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       36 [100.0%]  (FALLTHRU)
;;              23 [100.0%] 
;;              35 [100.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 299 298 300 37 108 "" [2 uses])
(note 300 299 301 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 301 300 302 37 (parallel [
            (set (reg:SI 0 ax [697])
                (plus:SI (reg:SI 0 ax [orig:87 D.6031 ] [87])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:511 217 {*addsi_1}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (nil)))
(insn 302 301 303 37 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 0 ax [697])) blake_ref.c:511 90 {*movsi_internal}
     (nil))
(insn 303 302 304 37 (parallel [
            (set (reg/f:DI 1 dx [698])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(insn 304 303 306 37 (set (reg:DI 37 r8)
        (const_int 64 [0x40])) 89 {*movdi_internal}
     (nil))
(insn 306 304 307 37 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 307 306 308 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       38 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 38, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 37, next block 39, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       37 [100.0%]  (FALLTHRU)
;;              19 [100.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 308 307 309 38 105 "" [1 uses])
(note 309 308 310 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(note 310 309 311 38 NOTE_INSN_DELETED)
(insn 311 310 312 38 (set (reg:SI 0 ax [orig:699 D.6032 ] [699])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 19 [0x13])) [2 state_4(D)->h32+3 S1 A8]))) blake_ref.c:515 138 {*zero_extendqisi2}
     (nil))
(insn 312 311 313 38 (set (mem:QI (reg/v/f:DI 4 si [orig:634 hashval ] [634]) [0 *hashval_6(D)+0 S1 A8])
        (reg:QI 0 ax [orig:699 D.6032 ] [699])) blake_ref.c:515 93 {*movqi_internal}
     (nil))
(note 313 312 314 38 NOTE_INSN_DELETED)
(insn 314 313 315 38 (set (reg:SI 0 ax [orig:701 D.6032 ] [701])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 18 [0x12])) [2 state_4(D)->h32+2 S2 A16]))) blake_ref.c:515 139 {*zero_extendhisi2}
     (nil))
(insn 315 314 316 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 1 [0x1])) [0 MEM[(BitSequence *)hashval_6(D) + 1B]+0 S1 A8])
        (reg:QI 0 ax [orig:701 D.6032 ] [701])) blake_ref.c:515 93 {*movqi_internal}
     (nil))
(note 316 315 1181 38 NOTE_INSN_DELETED)
(insn 1181 316 317 38 (set (reg:SI 0 ax [orig:703 D.6032 ] [703])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 90 {*movsi_internal}
     (nil))
(insn 317 1181 1182 38 (parallel [
            (set (reg:SI 0 ax [orig:703 D.6032 ] [703])
                (lshiftrt:SI (reg:SI 0 ax [orig:703 D.6032 ] [703])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:515 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 1182 317 318 38 (set (reg:SI 0 ax [orig:703 D.6032 ] [703])
        (reg:SI 0 ax [orig:703 D.6032 ] [703])) blake_ref.c:515 90 {*movsi_internal}
     (nil))
(insn 318 1182 319 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 2 [0x2])) [0 MEM[(BitSequence *)hashval_6(D) + 2B]+0 S1 A8])
        (reg:QI 0 ax [orig:703 D.6032 ] [703])) blake_ref.c:515 93 {*movqi_internal}
     (nil))
(insn 319 318 320 38 (set (reg:SI 0 ax [orig:705 state_4(D)->h32 ] [705])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
        (nil)))
(insn 320 319 321 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 3 [0x3])) [0 MEM[(BitSequence *)hashval_6(D) + 3B]+0 S1 A8])
        (reg:QI 0 ax [orig:705 state_4(D)->h32 ] [705])) blake_ref.c:515 93 {*movqi_internal}
     (nil))
(note 321 320 322 38 NOTE_INSN_DELETED)
(insn 322 321 323 38 (set (reg:SI 0 ax [orig:706 D.6032 ] [706])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 23 [0x17])) [2 state_4(D)->h32+7 S1 A8]))) blake_ref.c:516 138 {*zero_extendqisi2}
     (nil))
(insn 323 322 324 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 4 [0x4])) [0 MEM[(BitSequence *)hashval_6(D) + 4B]+0 S1 A8])
        (reg:QI 0 ax [orig:706 D.6032 ] [706])) blake_ref.c:516 93 {*movqi_internal}
     (nil))
(note 324 323 325 38 NOTE_INSN_DELETED)
(insn 325 324 326 38 (set (reg:SI 0 ax [orig:708 D.6032 ] [708])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 22 [0x16])) [2 state_4(D)->h32+6 S2 A16]))) blake_ref.c:516 139 {*zero_extendhisi2}
     (nil))
(insn 326 325 327 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 5 [0x5])) [0 MEM[(BitSequence *)hashval_6(D) + 5B]+0 S1 A8])
        (reg:QI 0 ax [orig:708 D.6032 ] [708])) blake_ref.c:516 93 {*movqi_internal}
     (nil))
(note 327 326 1183 38 NOTE_INSN_DELETED)
(insn 1183 327 328 38 (set (reg:SI 0 ax [orig:710 D.6032 ] [710])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 90 {*movsi_internal}
     (nil))
(insn 328 1183 1184 38 (parallel [
            (set (reg:SI 0 ax [orig:710 D.6032 ] [710])
                (lshiftrt:SI (reg:SI 0 ax [orig:710 D.6032 ] [710])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:516 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 1184 328 329 38 (set (reg:SI 0 ax [orig:710 D.6032 ] [710])
        (reg:SI 0 ax [orig:710 D.6032 ] [710])) blake_ref.c:516 90 {*movsi_internal}
     (nil))
(insn 329 1184 330 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 6 [0x6])) [0 MEM[(BitSequence *)hashval_6(D) + 6B]+0 S1 A8])
        (reg:QI 0 ax [orig:710 D.6032 ] [710])) blake_ref.c:516 93 {*movqi_internal}
     (nil))
(insn 330 329 331 38 (set (reg:SI 0 ax [orig:712 state_4(D)->h32+4 ] [712])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
        (nil)))
(insn 331 330 332 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 7 [0x7])) [0 MEM[(BitSequence *)hashval_6(D) + 7B]+0 S1 A8])
        (reg:QI 0 ax [orig:712 state_4(D)->h32+4 ] [712])) blake_ref.c:516 93 {*movqi_internal}
     (nil))
(note 332 331 333 38 NOTE_INSN_DELETED)
(insn 333 332 334 38 (set (reg:SI 0 ax [orig:713 D.6032 ] [713])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 27 [0x1b])) [2 state_4(D)->h32+11 S1 A8]))) blake_ref.c:517 138 {*zero_extendqisi2}
     (nil))
(insn 334 333 335 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 8 [0x8])) [0 MEM[(BitSequence *)hashval_6(D) + 8B]+0 S1 A8])
        (reg:QI 0 ax [orig:713 D.6032 ] [713])) blake_ref.c:517 93 {*movqi_internal}
     (nil))
(note 335 334 336 38 NOTE_INSN_DELETED)
(insn 336 335 337 38 (set (reg:SI 0 ax [orig:715 D.6032 ] [715])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 26 [0x1a])) [2 state_4(D)->h32+10 S2 A16]))) blake_ref.c:517 139 {*zero_extendhisi2}
     (nil))
(insn 337 336 338 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 9 [0x9])) [0 MEM[(BitSequence *)hashval_6(D) + 9B]+0 S1 A8])
        (reg:QI 0 ax [orig:715 D.6032 ] [715])) blake_ref.c:517 93 {*movqi_internal}
     (nil))
(note 338 337 1185 38 NOTE_INSN_DELETED)
(insn 1185 338 339 38 (set (reg:SI 0 ax [orig:717 D.6032 ] [717])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 90 {*movsi_internal}
     (nil))
(insn 339 1185 1186 38 (parallel [
            (set (reg:SI 0 ax [orig:717 D.6032 ] [717])
                (lshiftrt:SI (reg:SI 0 ax [orig:717 D.6032 ] [717])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:517 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 1186 339 340 38 (set (reg:SI 0 ax [orig:717 D.6032 ] [717])
        (reg:SI 0 ax [orig:717 D.6032 ] [717])) blake_ref.c:517 90 {*movsi_internal}
     (nil))
(insn 340 1186 341 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 10 [0xa])) [0 MEM[(BitSequence *)hashval_6(D) + 10B]+0 S1 A8])
        (reg:QI 0 ax [orig:717 D.6032 ] [717])) blake_ref.c:517 93 {*movqi_internal}
     (nil))
(insn 341 340 342 38 (set (reg:SI 0 ax [orig:719 state_4(D)->h32+8 ] [719])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
        (nil)))
(insn 342 341 343 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 11 [0xb])) [0 MEM[(BitSequence *)hashval_6(D) + 11B]+0 S1 A8])
        (reg:QI 0 ax [orig:719 state_4(D)->h32+8 ] [719])) blake_ref.c:517 93 {*movqi_internal}
     (nil))
(note 343 342 344 38 NOTE_INSN_DELETED)
(insn 344 343 345 38 (set (reg:SI 0 ax [orig:720 D.6032 ] [720])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 31 [0x1f])) [2 state_4(D)->h32+15 S1 A8]))) blake_ref.c:518 138 {*zero_extendqisi2}
     (nil))
(insn 345 344 346 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 12 [0xc])) [0 MEM[(BitSequence *)hashval_6(D) + 12B]+0 S1 A8])
        (reg:QI 0 ax [orig:720 D.6032 ] [720])) blake_ref.c:518 93 {*movqi_internal}
     (nil))
(note 346 345 347 38 NOTE_INSN_DELETED)
(insn 347 346 348 38 (set (reg:SI 0 ax [orig:722 D.6032 ] [722])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 30 [0x1e])) [2 state_4(D)->h32+14 S2 A16]))) blake_ref.c:518 139 {*zero_extendhisi2}
     (nil))
(insn 348 347 349 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 13 [0xd])) [0 MEM[(BitSequence *)hashval_6(D) + 13B]+0 S1 A8])
        (reg:QI 0 ax [orig:722 D.6032 ] [722])) blake_ref.c:518 93 {*movqi_internal}
     (nil))
(note 349 348 1187 38 NOTE_INSN_DELETED)
(insn 1187 349 350 38 (set (reg:SI 0 ax [orig:724 D.6032 ] [724])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 90 {*movsi_internal}
     (nil))
(insn 350 1187 1188 38 (parallel [
            (set (reg:SI 0 ax [orig:724 D.6032 ] [724])
                (lshiftrt:SI (reg:SI 0 ax [orig:724 D.6032 ] [724])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:518 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 1188 350 351 38 (set (reg:SI 0 ax [orig:724 D.6032 ] [724])
        (reg:SI 0 ax [orig:724 D.6032 ] [724])) blake_ref.c:518 90 {*movsi_internal}
     (nil))
(insn 351 1188 352 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 14 [0xe])) [0 MEM[(BitSequence *)hashval_6(D) + 14B]+0 S1 A8])
        (reg:QI 0 ax [orig:724 D.6032 ] [724])) blake_ref.c:518 93 {*movqi_internal}
     (nil))
(insn 352 351 353 38 (set (reg:SI 0 ax [orig:726 state_4(D)->h32+12 ] [726])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
        (nil)))
(insn 353 352 354 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 15 [0xf])) [0 MEM[(BitSequence *)hashval_6(D) + 15B]+0 S1 A8])
        (reg:QI 0 ax [orig:726 state_4(D)->h32+12 ] [726])) blake_ref.c:518 93 {*movqi_internal}
     (nil))
(note 354 353 355 38 NOTE_INSN_DELETED)
(insn 355 354 356 38 (set (reg:SI 0 ax [orig:727 D.6032 ] [727])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 35 [0x23])) [2 state_4(D)->h32+19 S1 A8]))) blake_ref.c:519 138 {*zero_extendqisi2}
     (nil))
(insn 356 355 357 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 16 [0x10])) [0 MEM[(BitSequence *)hashval_6(D) + 16B]+0 S1 A8])
        (reg:QI 0 ax [orig:727 D.6032 ] [727])) blake_ref.c:519 93 {*movqi_internal}
     (nil))
(note 357 356 358 38 NOTE_INSN_DELETED)
(insn 358 357 359 38 (set (reg:SI 0 ax [orig:729 D.6032 ] [729])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 34 [0x22])) [2 state_4(D)->h32+18 S2 A16]))) blake_ref.c:519 139 {*zero_extendhisi2}
     (nil))
(insn 359 358 360 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 17 [0x11])) [0 MEM[(BitSequence *)hashval_6(D) + 17B]+0 S1 A8])
        (reg:QI 0 ax [orig:729 D.6032 ] [729])) blake_ref.c:519 93 {*movqi_internal}
     (nil))
(note 360 359 1189 38 NOTE_INSN_DELETED)
(insn 1189 360 361 38 (set (reg:SI 0 ax [orig:731 D.6032 ] [731])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 90 {*movsi_internal}
     (nil))
(insn 361 1189 1190 38 (parallel [
            (set (reg:SI 0 ax [orig:731 D.6032 ] [731])
                (lshiftrt:SI (reg:SI 0 ax [orig:731 D.6032 ] [731])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:519 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 1190 361 362 38 (set (reg:SI 0 ax [orig:731 D.6032 ] [731])
        (reg:SI 0 ax [orig:731 D.6032 ] [731])) blake_ref.c:519 90 {*movsi_internal}
     (nil))
(insn 362 1190 363 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 18 [0x12])) [0 MEM[(BitSequence *)hashval_6(D) + 18B]+0 S1 A8])
        (reg:QI 0 ax [orig:731 D.6032 ] [731])) blake_ref.c:519 93 {*movqi_internal}
     (nil))
(insn 363 362 364 38 (set (reg:SI 0 ax [orig:733 state_4(D)->h32+16 ] [733])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
        (nil)))
(insn 364 363 365 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 19 [0x13])) [0 MEM[(BitSequence *)hashval_6(D) + 19B]+0 S1 A8])
        (reg:QI 0 ax [orig:733 state_4(D)->h32+16 ] [733])) blake_ref.c:519 93 {*movqi_internal}
     (nil))
(note 365 364 366 38 NOTE_INSN_DELETED)
(insn 366 365 367 38 (set (reg:SI 0 ax [orig:734 D.6032 ] [734])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 39 [0x27])) [2 state_4(D)->h32+23 S1 A8]))) blake_ref.c:520 138 {*zero_extendqisi2}
     (nil))
(insn 367 366 368 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 20 [0x14])) [0 MEM[(BitSequence *)hashval_6(D) + 20B]+0 S1 A8])
        (reg:QI 0 ax [orig:734 D.6032 ] [734])) blake_ref.c:520 93 {*movqi_internal}
     (nil))
(note 368 367 369 38 NOTE_INSN_DELETED)
(insn 369 368 370 38 (set (reg:SI 0 ax [orig:736 D.6032 ] [736])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 38 [0x26])) [2 state_4(D)->h32+22 S2 A16]))) blake_ref.c:520 139 {*zero_extendhisi2}
     (nil))
(insn 370 369 371 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 21 [0x15])) [0 MEM[(BitSequence *)hashval_6(D) + 21B]+0 S1 A8])
        (reg:QI 0 ax [orig:736 D.6032 ] [736])) blake_ref.c:520 93 {*movqi_internal}
     (nil))
(note 371 370 1191 38 NOTE_INSN_DELETED)
(insn 1191 371 372 38 (set (reg:SI 0 ax [orig:738 D.6032 ] [738])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 90 {*movsi_internal}
     (nil))
(insn 372 1191 1192 38 (parallel [
            (set (reg:SI 0 ax [orig:738 D.6032 ] [738])
                (lshiftrt:SI (reg:SI 0 ax [orig:738 D.6032 ] [738])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:520 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 1192 372 373 38 (set (reg:SI 0 ax [orig:738 D.6032 ] [738])
        (reg:SI 0 ax [orig:738 D.6032 ] [738])) blake_ref.c:520 90 {*movsi_internal}
     (nil))
(insn 373 1192 374 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 22 [0x16])) [0 MEM[(BitSequence *)hashval_6(D) + 22B]+0 S1 A8])
        (reg:QI 0 ax [orig:738 D.6032 ] [738])) blake_ref.c:520 93 {*movqi_internal}
     (nil))
(insn 374 373 375 38 (set (reg:SI 0 ax [orig:740 state_4(D)->h32+20 ] [740])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
        (nil)))
(insn 375 374 376 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 23 [0x17])) [0 MEM[(BitSequence *)hashval_6(D) + 23B]+0 S1 A8])
        (reg:QI 0 ax [orig:740 state_4(D)->h32+20 ] [740])) blake_ref.c:520 93 {*movqi_internal}
     (nil))
(note 376 375 377 38 NOTE_INSN_DELETED)
(insn 377 376 378 38 (set (reg:SI 0 ax [orig:741 D.6032 ] [741])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 43 [0x2b])) [2 state_4(D)->h32+27 S1 A8]))) blake_ref.c:521 138 {*zero_extendqisi2}
     (nil))
(insn 378 377 379 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 24 [0x18])) [0 MEM[(BitSequence *)hashval_6(D) + 24B]+0 S1 A8])
        (reg:QI 0 ax [orig:741 D.6032 ] [741])) blake_ref.c:521 93 {*movqi_internal}
     (nil))
(note 379 378 380 38 NOTE_INSN_DELETED)
(insn 380 379 381 38 (set (reg:SI 0 ax [orig:743 D.6032 ] [743])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 42 [0x2a])) [2 state_4(D)->h32+26 S2 A16]))) blake_ref.c:521 139 {*zero_extendhisi2}
     (nil))
(insn 381 380 382 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 25 [0x19])) [0 MEM[(BitSequence *)hashval_6(D) + 25B]+0 S1 A8])
        (reg:QI 0 ax [orig:743 D.6032 ] [743])) blake_ref.c:521 93 {*movqi_internal}
     (nil))
(note 382 381 1193 38 NOTE_INSN_DELETED)
(insn 1193 382 383 38 (set (reg:SI 0 ax [orig:745 D.6032 ] [745])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 90 {*movsi_internal}
     (nil))
(insn 383 1193 1194 38 (parallel [
            (set (reg:SI 0 ax [orig:745 D.6032 ] [745])
                (lshiftrt:SI (reg:SI 0 ax [orig:745 D.6032 ] [745])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:521 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 1194 383 384 38 (set (reg:SI 0 ax [orig:745 D.6032 ] [745])
        (reg:SI 0 ax [orig:745 D.6032 ] [745])) blake_ref.c:521 90 {*movsi_internal}
     (nil))
(insn 384 1194 385 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 26 [0x1a])) [0 MEM[(BitSequence *)hashval_6(D) + 26B]+0 S1 A8])
        (reg:QI 0 ax [orig:745 D.6032 ] [745])) blake_ref.c:521 93 {*movqi_internal}
     (nil))
(insn 385 384 386 38 (set (reg:SI 0 ax [orig:747 state_4(D)->h32+24 ] [747])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
        (nil)))
(insn 386 385 387 38 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 27 [0x1b])) [0 MEM[(BitSequence *)hashval_6(D) + 27B]+0 S1 A8])
        (reg:QI 0 ax [orig:747 state_4(D)->h32+24 ] [747])) blake_ref.c:521 93 {*movqi_internal}
     (nil))
(insn 387 386 388 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 256 [0x100]))) blake_ref.c:523 7 {*cmpsi_1}
     (nil))
(jump_insn 388 387 389 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1058)
            (pc))) blake_ref.c:523 612 {*jcc_1}
     (int_list:REG_BR_PROB 6218 (nil))
 -> 1058)
;;  succ:       39 [37.8%]  (FALLTHRU)
;;              84 [62.2%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 39, loop depth 0, count 0, freq 1475, maybe hot
;;  prev block 38, next block 40, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       38 [37.8%]  (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(note 389 388 390 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(note 390 389 391 39 NOTE_INSN_DELETED)
(insn 391 390 392 39 (set (reg:SI 0 ax [orig:748 D.6032 ] [748])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 47 [0x2f])) [2 state_4(D)->h32+31 S1 A8]))) blake_ref.c:524 138 {*zero_extendqisi2}
     (nil))
(insn 392 391 393 39 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 28 [0x1c])) [0 MEM[(BitSequence *)hashval_6(D) + 28B]+0 S1 A8])
        (reg:QI 0 ax [orig:748 D.6032 ] [748])) blake_ref.c:524 93 {*movqi_internal}
     (nil))
(note 393 392 394 39 NOTE_INSN_DELETED)
(insn 394 393 395 39 (set (reg:SI 0 ax [orig:750 D.6032 ] [750])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 46 [0x2e])) [2 state_4(D)->h32+30 S2 A16]))) blake_ref.c:524 139 {*zero_extendhisi2}
     (nil))
(insn 395 394 396 39 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 29 [0x1d])) [0 MEM[(BitSequence *)hashval_6(D) + 29B]+0 S1 A8])
        (reg:QI 0 ax [orig:750 D.6032 ] [750])) blake_ref.c:524 93 {*movqi_internal}
     (nil))
(note 396 395 1195 39 NOTE_INSN_DELETED)
(insn 1195 396 397 39 (set (reg:SI 0 ax [orig:752 D.6032 ] [752])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 90 {*movsi_internal}
     (nil))
(insn 397 1195 1196 39 (parallel [
            (set (reg:SI 0 ax [orig:752 D.6032 ] [752])
                (lshiftrt:SI (reg:SI 0 ax [orig:752 D.6032 ] [752])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:524 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 1196 397 398 39 (set (reg:SI 0 ax [orig:752 D.6032 ] [752])
        (reg:SI 0 ax [orig:752 D.6032 ] [752])) blake_ref.c:524 90 {*movsi_internal}
     (nil))
(insn 398 1196 399 39 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 30 [0x1e])) [0 MEM[(BitSequence *)hashval_6(D) + 30B]+0 S1 A8])
        (reg:QI 0 ax [orig:752 D.6032 ] [752])) blake_ref.c:524 93 {*movqi_internal}
     (nil))
(insn 399 398 400 39 (set (reg:SI 0 ax [orig:754 state_4(D)->h32+28 ] [754])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 90 {*movsi_internal}
     (nil))
(insn 400 399 1125 39 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 31 [0x1f])) [0 MEM[(BitSequence *)hashval_6(D) + 31B]+0 S1 A8])
        (reg:QI 0 ax [orig:754 state_4(D)->h32+28 ] [754])) blake_ref.c:524 93 {*movqi_internal}
     (nil))
(jump_insn 1125 400 1126 39 (set (pc)
        (label_ref 1058)) blake_ref.c:656 654 {jump}
     (nil)
 -> 1058)
;;  succ:       84 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1126 1125 405)
;; basic block 40, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 39, next block 41, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [61.0%] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
(code_label 405 1126 406 40 93 "" [1 uses])
(note 406 405 407 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 408 40 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 44 [0x2c])) [0 zz+0 S1 A32])
        (const_int 0 [0])) blake_ref.c:535 93 {*movqi_internal}
     (nil))
(insn 408 407 409 40 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 45 [0x2d])) [0 zo+0 S1 A8])
        (const_int 1 [0x1])) blake_ref.c:535 93 {*movqi_internal}
     (nil))
(insn 409 408 410 40 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 46 [0x2e])) [0 oz+0 S1 A16])
        (const_int -128 [0xffffffffffffff80])) blake_ref.c:535 93 {*movqi_internal}
     (nil))
(insn 410 409 411 40 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 47 [0x2f])) [0 oo+0 S1 A8])
        (const_int -127 [0xffffffffffffff81])) blake_ref.c:535 93 {*movqi_internal}
     (nil))
(insn 411 410 412 40 (set (reg:DI 0 ax [orig:241 D.6036 ] [241])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) blake_ref.c:539 89 {*movdi_internal}
     (nil))
(insn 412 411 413 40 (set (reg:SI 1 dx [orig:242 D.6033 ] [242])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])) blake_ref.c:539 90 {*movsi_internal}
     (nil))
(insn 413 412 414 40 (set (reg:DI 2 cx [orig:243 D.6036 ] [243])
        (sign_extend:DI (reg:SI 1 dx [orig:242 D.6033 ] [242]))) blake_ref.c:539 142 {*extendsidi2_rex64}
     (nil))
(note 414 413 415 40 NOTE_INSN_DELETED)
(insn 415 414 1083 40 (set (reg/v:DI 37 r8 [orig:245 high ] [245])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 208 [0xd0])) [3 state_4(D)->t64+8 S8 A64])) blake_ref.c:540 89 {*movdi_internal}
     (nil))
(insn 1083 415 1084 40 (parallel [
            (set (reg:CCC 17 flags)
                (compare:CCC (plus:DI (reg:DI 2 cx [orig:243 D.6036 ] [243])
                        (reg:DI 0 ax [orig:241 D.6036 ] [241]))
                    (reg:DI 2 cx [orig:243 D.6036 ] [243])))
            (set (reg/v:DI 2 cx [orig:244 low ] [244])
                (plus:DI (reg:DI 2 cx [orig:243 D.6036 ] [243])
                    (reg:DI 0 ax [orig:241 D.6036 ] [241])))
        ]) blake_ref.c:542 303 {*adddi3_cc_overflow}
     (nil))
(insn 1084 1083 1197 40 (parallel [
            (set (reg/v:DI 37 r8 [orig:245 high ] [245])
                (plus:DI (plus:DI (ltu:DI (reg:CCC 17 flags)
                            (const_int 0 [0]))
                        (reg/v:DI 37 r8 [orig:245 high ] [245]))
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:542 285 {adddi3_carry}
     (nil))
(insn 1197 1084 422 40 (set (reg:DI 38 r9 [orig:246 D.6036 ] [246])
        (reg/v:DI 37 r8 [orig:245 high ] [245])) blake_ref.c:543 89 {*movdi_internal}
     (nil))
(insn 422 1197 1199 40 (parallel [
            (set (reg:DI 38 r9 [orig:246 D.6036 ] [246])
                (lshiftrt:DI (reg:DI 38 r9 [orig:246 D.6036 ] [246])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 546 {*lshrdi3_1}
     (nil))
(insn 1199 422 424 40 (set (reg:SI 40 r11 [orig:755 D.6032 ] [755])
        (reg:SI 38 r9 [orig:246 D.6036 ] [246])) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn 424 1199 425 40 (parallel [
            (set (reg:SI 40 r11 [orig:755 D.6032 ] [755])
                (lshiftrt:SI (reg:SI 40 r11 [orig:755 D.6032 ] [755])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (nil))
(insn 425 424 1201 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 msglen+0 S1 A128])
        (reg:QI 40 r11 [orig:755 D.6032 ] [755])) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 1201 425 426 40 (set (reg:SI 40 r11 [orig:756 D.6032 ] [756])
        (reg:SI 38 r9 [orig:246 D.6036 ] [246])) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn 426 1201 427 40 (parallel [
            (set (reg:SI 40 r11 [orig:756 D.6032 ] [756])
                (lshiftrt:SI (reg:SI 40 r11 [orig:756 D.6032 ] [756])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (nil))
(insn 427 426 1203 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 49 [0x31])) [0 msglen+1 S1 A8])
        (reg:QI 40 r11 [orig:756 D.6032 ] [756])) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 1203 427 428 40 (set (reg:SI 40 r11 [orig:757 D.6032 ] [757])
        (reg:SI 38 r9 [orig:246 D.6036 ] [246])) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn 428 1203 429 40 (parallel [
            (set (reg:SI 40 r11 [orig:757 D.6032 ] [757])
                (lshiftrt:SI (reg:SI 40 r11 [orig:757 D.6032 ] [757])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (nil))
(insn 429 428 430 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 50 [0x32])) [0 msglen+2 S1 A16])
        (reg:QI 40 r11 [orig:757 D.6032 ] [757])) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 430 429 1205 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 51 [0x33])) [0 msglen+3 S1 A8])
        (reg:QI 38 r9 [orig:246 D.6036 ] [246])) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 1205 430 432 40 (set (reg:SI 38 r9 [orig:758 D.6032 ] [758])
        (reg:SI 37 r8 [orig:245 high ] [245])) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn 432 1205 433 40 (parallel [
            (set (reg:SI 38 r9 [orig:758 D.6032 ] [758])
                (lshiftrt:SI (reg:SI 38 r9 [orig:758 D.6032 ] [758])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (nil))
(insn 433 432 1207 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 52 [0x34])) [0 msglen+4 S1 A32])
        (reg:QI 38 r9 [orig:758 D.6032 ] [758])) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 1207 433 434 40 (set (reg:SI 38 r9 [orig:759 D.6032 ] [759])
        (reg:SI 37 r8 [orig:245 high ] [245])) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn 434 1207 435 40 (parallel [
            (set (reg:SI 38 r9 [orig:759 D.6032 ] [759])
                (lshiftrt:SI (reg:SI 38 r9 [orig:759 D.6032 ] [759])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (nil))
(insn 435 434 1209 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 53 [0x35])) [0 msglen+5 S1 A8])
        (reg:QI 38 r9 [orig:759 D.6032 ] [759])) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 1209 435 436 40 (set (reg:SI 38 r9 [orig:760 D.6032 ] [760])
        (reg:SI 37 r8 [orig:245 high ] [245])) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn 436 1209 437 40 (parallel [
            (set (reg:SI 38 r9 [orig:760 D.6032 ] [760])
                (lshiftrt:SI (reg:SI 38 r9 [orig:760 D.6032 ] [760])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (nil))
(insn 437 436 438 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 54 [0x36])) [0 msglen+6 S1 A16])
        (reg:QI 38 r9 [orig:760 D.6032 ] [760])) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 438 437 1211 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 55 [0x37])) [0 msglen+7 S1 A8])
        (reg:QI 37 r8 [orig:245 high ] [245])) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 1211 438 439 40 (set (reg:DI 37 r8 [orig:263 D.6036 ] [263])
        (reg/v:DI 2 cx [orig:244 low ] [244])) blake_ref.c:544 89 {*movdi_internal}
     (nil))
(insn 439 1211 1213 40 (parallel [
            (set (reg:DI 37 r8 [orig:263 D.6036 ] [263])
                (lshiftrt:DI (reg:DI 37 r8 [orig:263 D.6036 ] [263])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 546 {*lshrdi3_1}
     (nil))
(insn 1213 439 441 40 (set (reg:SI 38 r9 [orig:761 D.6032 ] [761])
        (reg:SI 37 r8 [orig:263 D.6036 ] [263])) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn 441 1213 442 40 (parallel [
            (set (reg:SI 38 r9 [orig:761 D.6032 ] [761])
                (lshiftrt:SI (reg:SI 38 r9 [orig:761 D.6032 ] [761])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (nil))
(insn 442 441 1215 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [0 msglen+8 S1 A64])
        (reg:QI 38 r9 [orig:761 D.6032 ] [761])) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 1215 442 443 40 (set (reg:SI 38 r9 [orig:762 D.6032 ] [762])
        (reg:SI 37 r8 [orig:263 D.6036 ] [263])) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn 443 1215 444 40 (parallel [
            (set (reg:SI 38 r9 [orig:762 D.6032 ] [762])
                (lshiftrt:SI (reg:SI 38 r9 [orig:762 D.6032 ] [762])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (nil))
(insn 444 443 1217 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 57 [0x39])) [0 msglen+9 S1 A8])
        (reg:QI 38 r9 [orig:762 D.6032 ] [762])) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 1217 444 445 40 (set (reg:SI 38 r9 [orig:763 D.6032 ] [763])
        (reg:SI 37 r8 [orig:263 D.6036 ] [263])) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn 445 1217 446 40 (parallel [
            (set (reg:SI 38 r9 [orig:763 D.6032 ] [763])
                (lshiftrt:SI (reg:SI 38 r9 [orig:763 D.6032 ] [763])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (nil))
(insn 446 445 447 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 58 [0x3a])) [0 msglen+10 S1 A16])
        (reg:QI 38 r9 [orig:763 D.6032 ] [763])) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 447 446 1219 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 59 [0x3b])) [0 msglen+11 S1 A8])
        (reg:QI 37 r8 [orig:263 D.6036 ] [263])) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 1219 447 449 40 (set (reg:SI 37 r8 [orig:764 D.6032 ] [764])
        (reg:SI 2 cx [orig:244 low ] [244])) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn 449 1219 450 40 (parallel [
            (set (reg:SI 37 r8 [orig:764 D.6032 ] [764])
                (lshiftrt:SI (reg:SI 37 r8 [orig:764 D.6032 ] [764])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (nil))
(insn 450 449 1221 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 60 [0x3c])) [0 msglen+12 S1 A32])
        (reg:QI 37 r8 [orig:764 D.6032 ] [764])) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 1221 450 451 40 (set (reg:SI 37 r8 [orig:765 D.6032 ] [765])
        (reg:SI 2 cx [orig:244 low ] [244])) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn 451 1221 452 40 (parallel [
            (set (reg:SI 37 r8 [orig:765 D.6032 ] [765])
                (lshiftrt:SI (reg:SI 37 r8 [orig:765 D.6032 ] [765])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (nil))
(insn 452 451 1223 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 61 [0x3d])) [0 msglen+13 S1 A8])
        (reg:QI 37 r8 [orig:765 D.6032 ] [765])) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 1223 452 453 40 (set (reg:SI 37 r8 [orig:766 D.6032 ] [766])
        (reg:SI 2 cx [orig:244 low ] [244])) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn 453 1223 454 40 (parallel [
            (set (reg:SI 37 r8 [orig:766 D.6032 ] [766])
                (lshiftrt:SI (reg:SI 37 r8 [orig:766 D.6032 ] [766])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (nil))
(insn 454 453 455 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 62 [0x3e])) [0 msglen+14 S1 A16])
        (reg:QI 37 r8 [orig:766 D.6032 ] [766])) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 455 454 457 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 63 [0x3f])) [0 msglen+15 S1 A8])
        (reg:QI 2 cx [orig:244 low ] [244])) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(note 457 455 1158 40 NOTE_INSN_DELETED)
(insn 1158 457 459 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 1 dx [orig:242 D.6033 ] [242])
                (const_int 7 [0x7]))
            (const_int 0 [0]))) blake_ref.c:546 362 {*testsi_1}
     (nil))
(jump_insn 459 1158 460 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 587)
            (pc))) blake_ref.c:546 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 587)
;;  succ:       41 [50.0%]  (FALLTHRU)
;;              61 [50.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 41, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 40, next block 42, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       40 [50.0%]  (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 460 459 461 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 461 460 462 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 888 [0x378]))) blake_ref.c:549 7 {*cmpsi_1}
     (nil))
(jump_insn 462 461 463 41 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 487)
            (pc))) blake_ref.c:549 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 487)
;;  succ:       42 [28.0%]  (FALLTHRU)
;;              45 [72.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 42, loop depth 0, count 0, freq 854, maybe hot
;;  prev block 41, next block 43, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       41 [28.0%]  (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 39 [r10]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(note 463 462 464 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 464 463 465 42 (parallel [
            (set (reg:DI 0 ax [768])
                (plus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:551 218 {*adddi_1}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (nil)))
(insn 465 464 466 42 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [768])) blake_ref.c:551 89 {*movdi_internal}
     (nil))
(insn 466 465 467 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 384 [0x180]))) blake_ref.c:552 7 {*cmpsi_1}
     (nil))
(jump_insn 467 466 468 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 477)
            (pc))) blake_ref.c:552 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 477)
;;  succ:       43 [28.0%]  (FALLTHRU)
;;              44 [72.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 43, loop depth 0, count 0, freq 239, maybe hot
;;  prev block 42, next block 44, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [28.0%]  (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(note 468 467 469 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 469 468 470 43 (parallel [
            (set (reg/f:DI 1 dx [769])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 46 [0x2e])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -18 [0xffffffffffffffee]))
        (nil)))
(insn 470 469 472 43 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 472 470 473 43 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 473 472 474 43 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 474 473 1127 43 (set (reg:DI 0 ax [orig:292 D.6036 ] [292])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 1127 474 1128 43 (set (pc)
        (label_ref 564)) 654 {jump}
     (nil)
 -> 564)
;;  succ:       58 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1128 1127 477)
;; basic block 44, loop depth 0, count 0, freq 615, maybe hot
;;  prev block 43, next block 45, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [72.0%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 477 1128 478 44 121 "" [1 uses])
(note 478 477 479 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 479 478 480 44 (parallel [
            (set (reg/f:DI 1 dx [770])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 47 [0x2f])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -17 [0xffffffffffffffef]))
        (nil)))
(insn 480 479 482 44 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 482 480 483 44 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 483 482 484 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 484 483 1129 44 (set (reg:DI 0 ax [orig:292 D.6036 ] [292])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 1129 484 1130 44 (set (pc)
        (label_ref 564)) 654 {jump}
     (nil)
 -> 564)
;;  succ:       58 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1130 1129 487)
;; basic block 45, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 44, next block 46, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       41 [72.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 487 1130 488 45 120 "" [1 uses])
(note 488 487 489 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 489 488 490 45 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 887 [0x377]))) blake_ref.c:558 7 {*cmpsi_1}
     (nil))
(jump_insn 490 489 491 45 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) blake_ref.c:558 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 498)
;;  succ:       46 [50.0%]  (FALLTHRU)
;;              48 [50.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 46, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 45, next block 47, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       45 [50.0%]  (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 491 490 492 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 492 491 493 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 0 [0]))) blake_ref.c:560 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 493 492 494 46 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1000)
            (pc))) blake_ref.c:560 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 1000)
;;  succ:       47 [50.0%]  (FALLTHRU)
;;              83 [50.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 47, loop depth 0, count 0, freq 549, maybe hot
;;  prev block 46, next block 48, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       46 [50.0%]  (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	
;; live  kill	
(note 494 493 495 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 495 494 1131 47 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:561 90 {*movsi_internal}
     (nil))
(jump_insn 1131 495 1132 47 (set (pc)
        (label_ref 1000)) 654 {jump}
     (nil)
 -> 1000)
;;  succ:       83 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

(barrier 1132 1131 498)
;; basic block 48, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 47, next block 49, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       45 [50.0%] 
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(code_label 498 1132 499 48 123 "" [1 uses])
(note 499 498 500 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 500 499 501 48 (set (reg:SI 37 r8 [772])
        (const_int 1024 [0x400])) blake_ref.c:568 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 1024 [0x400])
        (nil)))
(insn 501 500 502 48 (parallel [
            (set (reg:SI 37 r8 [orig:771 D.6033 ] [771])
                (minus:SI (reg:SI 37 r8 [772])
                    (reg:SI 1 dx [orig:242 D.6033 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:568 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 1024 [0x400])
            (reg:SI 1 dx [orig:242 D.6033 ] [242]))
        (nil)))
(insn 502 501 503 48 (set (reg:DI 37 r8 [orig:287 D.6036 ] [287])
        (sign_extend:DI (reg:SI 37 r8 [orig:771 D.6033 ] [771]))) blake_ref.c:568 142 {*extendsidi2_rex64}
     (nil))
(insn 503 502 504 48 (parallel [
            (set (reg:DI 0 ax [orig:288 D.6036 ] [288])
                (minus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (reg:DI 37 r8 [orig:287 D.6036 ] [287])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:568 261 {*subdi_1}
     (nil))
(insn 504 503 505 48 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [orig:288 D.6036 ] [288])) blake_ref.c:568 89 {*movdi_internal}
     (nil))
(note 505 504 506 48 NOTE_INSN_DELETED)
(note 506 505 507 48 NOTE_INSN_DELETED)
(insn 507 506 508 48 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (nil))
(jump_insn 508 507 1024 48 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1033)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1033)
;;  succ:       50 [14.0%] 
;;              49 [86.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 49, loop depth 0, count 0, freq 944, maybe hot
;;  prev block 48, next block 50, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       48 [86.0%]  (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1024 508 509 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(note 509 1024 510 49 NOTE_INSN_DELETED)
(note 510 509 511 49 NOTE_INSN_DELETED)
(insn 511 510 512 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 37 r8 [orig:287 D.6036 ] [287])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 512 511 1033 49 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 520)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 8372 (nil))
 -> 520)
;;  succ:       51 [83.7%] 
;;              50 [16.3%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 50, loop depth 0, count 0, freq 537, maybe hot
;; Invalid sum of incoming frequencies 308, should be 537
;;  prev block 49, next block 51, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       49 [16.3%]  (FALLTHRU)
;;              48 [14.0%] 
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 1033 512 514 50 149 "" [1 uses])
(note 514 1033 516 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 516 514 517 50 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 517 516 518 50 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 518 517 519 50 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 519 518 520 50 (set (reg:DI 0 ax [orig:288 D.6036 ] [288])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       51 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

;; basic block 51, loop depth 0, count 0, freq 1098, maybe hot
;; Invalid sum of incoming frequencies 1327, should be 1098
;;  prev block 50, next block 52, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       50 [100.0%]  (FALLTHRU)
;;              49 [83.7%] 
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 520 519 521 51 125 "" [1 uses])
(note 521 520 522 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 522 521 523 51 (parallel [
            (set (reg:DI 0 ax [777])
                (plus:DI (reg:DI 0 ax [orig:288 D.6036 ] [288])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:570 218 {*adddi_1}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (nil)))
(insn 523 522 524 51 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [777])) blake_ref.c:570 89 {*movdi_internal}
     (nil))
(insn 524 523 525 51 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) 89 {*movdi_internal}
     (nil))
(insn 525 524 526 51 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 526 525 527 51 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 527 526 528 51 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 528 527 1011 51 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:572 90 {*movsi_internal}
     (nil))
;;  succ:       52 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 52, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 51, next block 53, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       51 [100.0%]  (FALLTHRU)
;;              83 [100.0%] 
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 1011 528 529 52 145 "" [1 uses])
(note 529 1011 530 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 530 529 531 52 (set (reg:SI 0 ax [orig:290 D.6033 ] [290])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) blake_ref.c:574 90 {*movsi_internal}
     (nil))
(insn 531 530 532 52 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:290 D.6033 ] [290])
            (const_int 384 [0x180]))) blake_ref.c:574 7 {*cmpsi_1}
     (nil))
(jump_insn 532 531 533 52 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 541)
            (pc))) blake_ref.c:574 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 541)
;;  succ:       53 [28.0%]  (FALLTHRU)
;;              54 [72.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

;; basic block 53, loop depth 0, count 0, freq 615, maybe hot
;;  prev block 52, next block 54, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       52 [28.0%]  (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(note 533 532 534 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 534 533 535 53 (parallel [
            (set (reg/f:DI 1 dx [778])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 44 [0x2c])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -20 [0xffffffffffffffec]))
        (nil)))
(insn 535 534 537 53 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 537 535 538 53 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 538 537 1133 53 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1133 538 1134 53 (set (pc)
        (label_ref 560)) 654 {jump}
     (nil)
 -> 560)
;;  succ:       57 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1134 1133 541)
;; basic block 54, loop depth 0, count 0, freq 1581, maybe hot
;;  prev block 53, next block 55, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       52 [72.0%] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 541 1134 542 54 127 "" [1 uses])
(note 542 541 543 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 543 542 544 54 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:290 D.6033 ] [290])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn 544 543 545 54 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 553)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 553)
;;  succ:       55 [50.0%]  (FALLTHRU)
;;              56 [50.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 55, loop depth 0, count 0, freq 791, maybe hot
;;  prev block 54, next block 56, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       54 [50.0%]  (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(note 545 544 546 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 546 545 547 55 (parallel [
            (set (reg/f:DI 1 dx [779])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 45 [0x2d])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -19 [0xffffffffffffffed]))
        (nil)))
(insn 547 546 549 55 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 549 547 550 55 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 550 549 1135 55 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1135 550 1136 55 (set (pc)
        (label_ref 560)) 654 {jump}
     (nil)
 -> 560)
;;  succ:       57 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1136 1135 553)
;; basic block 56, loop depth 0, count 0, freq 791, maybe hot
;;  prev block 55, next block 57, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       54 [50.0%] 
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 553 1136 554 56 129 "" [1 uses])
(note 554 553 555 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 555 554 556 56 (parallel [
            (set (reg/f:DI 1 dx [780])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 45 [0x2d])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -19 [0xffffffffffffffed]))
        (nil)))
(insn 556 555 558 56 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 558 556 559 56 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 559 558 560 56 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       57 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 57, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 56, next block 58, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       53 [100.0%] 
;;              56 [100.0%]  (FALLTHRU)
;;              55 [100.0%] 
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 560 559 561 57 128 "" [2 uses])
(note 561 560 562 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(note 562 561 1225 57 NOTE_INSN_DELETED)
(insn 1225 562 563 57 (set (reg:DI 0 ax [1029])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) blake_ref.c:578 89 {*movdi_internal}
     (nil))
(insn 563 1225 564 57 (parallel [
            (set (reg:DI 0 ax [orig:292 D.6036 ] [292])
                (plus:DI (reg:DI 0 ax [1029])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:578 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
;;  succ:       58 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

;; basic block 58, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 57, next block 59, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       57 [100.0%]  (FALLTHRU)
;;              43 [100.0%] 
;;              44 [100.0%] 
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 564 563 565 58 122 "" [2 uses])
(note 565 564 566 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 566 565 567 58 (parallel [
            (set (reg:DI 0 ax [782])
                (plus:DI (reg:DI 0 ax [orig:292 D.6036 ] [292])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:580 218 {*adddi_1}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (nil)))
(insn 567 566 568 58 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [782])) blake_ref.c:580 89 {*movdi_internal}
     (nil))
(insn 568 567 569 58 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn 569 568 760 58 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 578)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 578)
;;  succ:       59 [50.0%]  (FALLTHRU)
;;              60 [50.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 59, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 58, next block 60, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       58 [50.0%]  (FALLTHRU)
;;              78 [100.0%] 
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 760 569 570 59 142 "" [1 uses])
(note 570 760 571 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 571 570 572 59 (parallel [
            (set (reg/f:DI 1 dx [783])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(insn 572 571 574 59 (set (reg:DI 37 r8)
        (const_int 128 [0x80])) 89 {*movdi_internal}
     (nil))
(insn 574 572 575 59 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 575 574 1137 59 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1137 575 1138 59 (set (pc)
        (label_ref 766)) 654 {jump}
     (nil)
 -> 766)
;;  succ:       80 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1138 1137 578)
;; basic block 60, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 59, next block 61, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       58 [50.0%] 
;;              64 [100.0%] 
;;              79 [100.0%] 
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 578 1138 579 60 130 "" [3 uses])
(note 579 578 580 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 580 579 581 60 (parallel [
            (set (reg/f:DI 1 dx [784])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(insn 581 580 583 60 (set (reg:DI 37 r8)
        (const_int 128 [0x80])) 89 {*movdi_internal}
     (nil))
(insn 583 581 584 60 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 584 583 1139 60 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1139 584 1140 60 (set (pc)
        (label_ref 766)) 654 {jump}
     (nil)
 -> 766)
;;  succ:       80 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1140 1139 587)
;; basic block 61, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 60, next block 62, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       40 [50.0%] 
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
(code_label 587 1140 588 61 119 "" [1 uses])
(note 588 587 590 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 590 588 591 61 (parallel [
            (set (reg:SI 37 r8 [786])
                (plus:SI (reg:SI 1 dx [orig:242 D.6033 ] [242])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 217 {*addsi_1}
     (nil))
(insn 591 590 592 61 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 0 [0]))) blake_ref.c:587 3 {*cmpsi_ccno_1}
     (nil))
(insn 592 591 593 61 (set (reg:SI 37 r8 [orig:785 D.6033 ] [785])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 37 r8 [786])
            (reg:SI 1 dx [orig:242 D.6033 ] [242]))) blake_ref.c:587 951 {*movsicc_noc}
     (nil))
(insn 593 592 1226 61 (parallel [
            (set (reg:SI 37 r8 [787])
                (ashiftrt:SI (reg:SI 37 r8 [orig:785 D.6033 ] [785])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 545 {*ashrsi3_1}
     (expr_list:REG_EQUAL (div:SI (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 8 [0x8]))
        (nil)))
(insn 1226 593 595 61 (set (reg:SI 2 cx [788])
        (reg:SI 1 dx [orig:242 D.6033 ] [242])) blake_ref.c:587 90 {*movsi_internal}
     (nil))
(insn 595 1226 596 61 (parallel [
            (set (reg:SI 2 cx [788])
                (ashiftrt:SI (reg:SI 2 cx [788])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 538 {ashrsi3_cvt}
     (nil))
(insn 596 595 597 61 (parallel [
            (set (reg:SI 2 cx [789])
                (lshiftrt:SI (reg:SI 2 cx [788])
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 544 {*lshrsi3_1}
     (nil))
(insn 597 596 598 61 (parallel [
            (set (reg:SI 40 r11 [790])
                (plus:SI (reg:SI 1 dx [orig:242 D.6033 ] [242])
                    (reg:SI 2 cx [789])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 217 {*addsi_1}
     (nil))
(insn 598 597 599 61 (parallel [
            (set (reg:SI 40 r11 [791])
                (and:SI (reg:SI 40 r11 [790])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 381 {*andsi_1}
     (nil))
(insn 599 598 601 61 (parallel [
            (set (reg:SI 40 r11 [792])
                (minus:SI (reg:SI 40 r11 [791])
                    (reg:SI 2 cx [789])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 260 {*subsi_1}
     (nil))
(insn 601 599 602 61 (set (reg:SI 6 bp [793])
        (const_int 8 [0x8])) blake_ref.c:587 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 8 [0x8])
        (nil)))
(insn 602 601 603 61 (parallel [
            (set (reg:SI 6 bp [orig:298 D.6033 ] [298])
                (minus:SI (reg:SI 6 bp [793])
                    (reg:SI 40 r11 [792])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 8 [0x8])
            (reg:SI 40 r11 [792]))
        (nil)))
(insn 603 602 604 61 (set (reg:DI 37 r8 [orig:794 D.6033 ] [794])
        (sign_extend:DI (reg:SI 37 r8 [787]))) blake_ref.c:587 142 {*extendsidi2_rex64}
     (nil))
(insn 604 603 1228 61 (set (reg:SI 5 di [796])
        (const_int 255 [0xff])) blake_ref.c:588 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 255 [0xff])
        (nil)))
(insn 1228 604 605 61 (set (reg:QI 2 cx [1031])
        (reg:QI 6 bp [orig:298 D.6033 ] [298])) blake_ref.c:588 93 {*movqi_internal}
     (nil))
(insn 605 1228 606 61 (parallel [
            (set (reg:SI 5 di [orig:795 D.6033 ] [795])
                (ashift:SI (reg:SI 5 di [796])
                    (reg:QI 2 cx [1031])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (const_int 255 [0xff])
            (subreg:QI (reg:SI 6 bp [orig:298 D.6033 ] [298]) 0))
        (nil)))
(insn 606 605 607 61 (parallel [
            (set (reg:QI 5 di [orig:797 D.6037 ] [797])
                (and:QI (reg:QI 5 di [orig:795 D.6033 ] [795])
                    (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                                (reg:DI 37 r8 [orig:794 D.6033 ] [794]))
                            (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 384 {*andqi_1}
     (nil))
(insn 607 606 1231 61 (set (reg:SI 38 r9 [799])
        (const_int 128 [0x80])) blake_ref.c:588 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 128 [0x80])
        (nil)))
(insn 1231 607 608 61 (set (reg:QI 2 cx [1033])
        (reg:QI 40 r11 [792])) blake_ref.c:588 93 {*movqi_internal}
     (nil))
(insn 608 1231 1230 61 (parallel [
            (set (reg:SI 38 r9 [orig:798 D.6033 ] [798])
                (ashiftrt:SI (reg:SI 38 r9 [orig:798 D.6033 ] [798])
                    (reg:QI 2 cx [1033])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 545 {*ashrsi3_1}
     (expr_list:REG_EQUAL (ashiftrt:SI (const_int 128 [0x80])
            (subreg:QI (reg:SI 40 r11 [792]) 0))
        (nil)))
(insn 1230 608 609 61 (set (reg:SI 2 cx [orig:798 D.6033 ] [798])
        (reg:SI 38 r9 [orig:798 D.6033 ] [798])) blake_ref.c:588 90 {*movsi_internal}
     (nil))
(insn 609 1230 611 61 (parallel [
            (set (reg:QI 2 cx [orig:305 D.6034 ] [305])
                (xor:QI (reg:QI 2 cx [orig:798 D.6033 ] [798])
                    (reg:QI 5 di [orig:797 D.6037 ] [797])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 406 {*xorqi_1}
     (nil))
(insn 611 609 612 61 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (reg:DI 37 r8 [orig:794 D.6033 ] [794]))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (reg:QI 2 cx [orig:305 D.6034 ] [305])) blake_ref.c:588 93 {*movqi_internal}
     (nil))
(insn 612 611 613 61 (parallel [
            (set (reg:SI 38 r9 [orig:801 D.6035 ] [801])
                (plus:SI (reg:SI 1 dx [orig:242 D.6033 ] [242])
                    (const_int -889 [0xfffffffffffffc87])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:590 217 {*addsi_1}
     (nil))
(insn 613 612 614 61 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 38 r9 [orig:801 D.6035 ] [801])
            (const_int 5 [0x5]))) blake_ref.c:590 7 {*cmpsi_1}
     (nil))
(jump_insn 614 613 615 61 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 631)
            (pc))) blake_ref.c:590 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 631)
;;  succ:       62 [50.0%]  (FALLTHRU)
;;              65 [50.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]

;; basic block 62, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 61, next block 63, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       61 [50.0%]  (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 615 614 616 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 616 615 617 62 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 384 [0x180]))) blake_ref.c:592 7 {*cmpsi_1}
     (nil))
(jump_insn 617 616 618 62 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 622)
            (pc))) blake_ref.c:592 612 {*jcc_1}
     (int_list:REG_BR_PROB 2800 (nil))
 -> 622)
;;  succ:       64 [28.0%] 
;;              63 [72.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]

;; basic block 63, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 62, next block 64, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       62 [72.0%]  (FALLTHRU)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]
;; live  gen 	 2 [cx]
;; live  kill	 17 [flags]
(note 618 617 620 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 620 618 621 63 (parallel [
            (set (reg:QI 2 cx [803])
                (xor:QI (reg:QI 2 cx [orig:305 D.6034 ] [305])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:595 406 {*xorqi_1}
     (expr_list:REG_EQUIV (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (reg:DI 37 r8 [orig:794 D.6033 ] [794]))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (nil)))
(insn 621 620 622 63 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (reg:DI 37 r8 [orig:794 D.6033 ] [794]))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (reg:QI 2 cx [803])) blake_ref.c:595 93 {*movqi_internal}
     (nil))
;;  succ:       64 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]

;; basic block 64, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 63, next block 65, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       62 [28.0%] 
;;              63 [100.0%]  (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 6 [bp]
;; live  kill	 17 [flags]
(code_label 622 621 623 64 133 "" [1 uses])
(note 623 622 624 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 624 623 625 64 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 896 [0x380])) blake_ref.c:598 90 {*movsi_internal}
     (nil))
(insn 625 624 626 64 (set (reg:DI 6 bp [orig:804 D.6036 ] [804])
        (sign_extend:DI (reg:SI 6 bp [orig:298 D.6033 ] [298]))) blake_ref.c:634 142 {*extendsidi2_rex64}
     (nil))
(insn 626 625 627 64 (parallel [
            (set (reg:DI 0 ax [orig:805 D.6036 ] [805])
                (minus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (reg:DI 6 bp [orig:804 D.6036 ] [804])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 261 {*subdi_1}
     (nil))
(insn 627 626 628 64 (parallel [
            (set (reg:DI 0 ax [806])
                (plus:DI (reg:DI 0 ax [orig:805 D.6036 ] [805])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 218 {*adddi_1}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (nil)))
(insn 628 627 1141 64 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [806])) blake_ref.c:634 89 {*movdi_internal}
     (nil))
(jump_insn 1141 628 1142 64 (set (pc)
        (label_ref 578)) 654 {jump}
     (nil)
 -> 578)
;;  succ:       60 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1142 1141 631)
;; basic block 65, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 64, next block 66, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       61 [50.0%] 
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 631 1142 632 65 132 "" [1 uses])
(note 632 631 633 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 633 632 634 65 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 887 [0x377]))) blake_ref.c:601 7 {*cmpsi_1}
     (nil))
(jump_insn 634 633 635 65 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 665)
            (pc))) blake_ref.c:601 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 665)
;;  succ:       66 [50.0%]  (FALLTHRU)
;;              69 [50.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 66, loop depth 0, count 0, freq 762, maybe hot
;;  prev block 65, next block 67, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       65 [50.0%]  (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(note 635 634 636 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 636 635 1232 66 (set (reg:SI 37 r8 [808])
        (const_int 888 [0x378])) blake_ref.c:603 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 888 [0x378])
        (nil)))
(insn 1232 636 637 66 (set (reg:SI 2 cx [orig:807 D.6033 ] [807])
        (reg:SI 37 r8 [808])) blake_ref.c:603 90 {*movsi_internal}
     (nil))
(insn 637 1232 638 66 (parallel [
            (set (reg:SI 2 cx [orig:807 D.6033 ] [807])
                (minus:SI (reg:SI 2 cx [orig:807 D.6033 ] [807])
                    (reg:SI 1 dx [orig:242 D.6033 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:603 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 888 [0x378])
            (reg:SI 1 dx [orig:242 D.6033 ] [242]))
        (nil)))
(insn 638 637 639 66 (set (reg:DI 2 cx [orig:809 D.6036 ] [809])
        (sign_extend:DI (reg:SI 2 cx [orig:807 D.6033 ] [807]))) blake_ref.c:603 142 {*extendsidi2_rex64}
     (nil))
(insn 639 638 640 66 (parallel [
            (set (reg:DI 0 ax [orig:616 D.6039 ] [616])
                (minus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (reg:DI 2 cx [orig:809 D.6036 ] [809])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:603 261 {*subdi_1}
     (nil))
(insn 640 639 641 66 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [orig:616 D.6039 ] [616])) blake_ref.c:603 89 {*movdi_internal}
     (nil))
(insn 641 640 642 66 (parallel [
            (set (reg:SI 1 dx [orig:810 D.6035 ] [810])
                (and:SI (reg:SI 1 dx [orig:242 D.6033 ] [242])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:604 381 {*andsi_1}
     (nil))
(insn 642 641 643 66 (parallel [
            (set (reg:SI 1 dx [orig:317 D.6033 ] [317])
                (plus:SI (reg:SI 1 dx [orig:810 D.6035 ] [810])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:604 217 {*addsi_1}
     (nil))
(insn 643 642 645 66 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 1 dx [orig:317 D.6033 ] [317])) blake_ref.c:604 90 {*movsi_internal}
     (nil))
(insn 645 643 646 66 (parallel [
            (set (reg:SI 37 r8 [orig:811 D.6033 ] [811])
                (minus:SI (reg:SI 37 r8 [808])
                    (reg:SI 1 dx [orig:317 D.6033 ] [317])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:605 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 888 [0x378])
            (reg:SI 1 dx [orig:317 D.6033 ] [317]))
        (nil)))
(insn 646 645 647 66 (set (reg:DI 37 r8 [orig:319 D.6036 ] [319])
        (sign_extend:DI (reg:SI 37 r8 [orig:811 D.6033 ] [811]))) blake_ref.c:605 142 {*extendsidi2_rex64}
     (nil))
(note 647 646 648 66 NOTE_INSN_DELETED)
(note 648 647 649 66 NOTE_INSN_DELETED)
(insn 649 648 650 66 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 37 r8 [orig:319 D.6036 ] [319])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 650 649 1026 66 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1034)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1034)
;;  succ:       68 [14.0%] 
;;              67 [86.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]

;; basic block 67, loop depth 0, count 0, freq 655, maybe hot
;;  prev block 66, next block 68, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       66 [86.0%]  (FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1026 650 651 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(note 651 1026 652 67 NOTE_INSN_DELETED)
(note 652 651 653 67 NOTE_INSN_DELETED)
(insn 653 652 654 67 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:317 D.6033 ] [317])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (nil))
(jump_insn 654 653 1034 67 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 731)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 8372 (nil))
 -> 731)
;;  succ:       75 [83.7%] 
;;              68 [16.3%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]

;; basic block 68, loop depth 0, count 0, freq 373, maybe hot
;; Invalid sum of incoming frequencies 214, should be 373
;;  prev block 67, next block 69, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       67 [16.3%]  (FALLTHRU)
;;              66 [14.0%] 
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 39 [r10]
;; live  kill	
(code_label 1034 654 656 68 150 "" [1 uses])
(note 656 1034 658 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 658 656 659 68 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 659 658 660 68 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 660 659 661 68 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 661 660 662 68 (set (reg:DI 0 ax [orig:616 D.6039 ] [616])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 662 661 1143 68 (set (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1143 662 1144 68 (set (pc)
        (label_ref 731)) 654 {jump}
     (nil)
 -> 731)
;;  succ:       75 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]

(barrier 1144 1143 665)
;; basic block 69, loop depth 0, count 0, freq 762, maybe hot
;;  prev block 68, next block 70, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       65 [50.0%] 
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 665 1144 666 69 134 "" [1 uses])
(note 666 665 667 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 667 666 668 69 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 1016 [0x3f8]))) blake_ref.c:608 7 {*cmpsi_1}
     (nil))
(jump_insn 668 667 669 69 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 692)
            (pc))) blake_ref.c:608 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 692)
;;  succ:       70 [29.0%]  (FALLTHRU)
;;              71 [71.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 70, loop depth 0, count 0, freq 2457, maybe hot
;; Invalid sum of incoming frequencies 221, should be 2457
;;  prev block 69, next block 71, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       69 [29.0%]  (FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 39 [r10]
;; live  kill	 17 [flags]
(note 669 668 670 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 670 669 671 70 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 1024 [0x400])) blake_ref.c:611 90 {*movsi_internal}
     (nil))
(insn 671 670 672 70 (set (reg:SI 2 cx [818])
        (const_int 1024 [0x400])) blake_ref.c:362 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 1024 [0x400])
        (nil)))
(insn 672 671 1235 70 (parallel [
            (set (reg:SI 2 cx [orig:817 D.6033 ] [817])
                (minus:SI (reg:SI 2 cx [orig:817 D.6033 ] [817])
                    (reg:SI 1 dx [orig:242 D.6033 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 1024 [0x400])
            (reg:SI 1 dx [orig:242 D.6033 ] [242]))
        (nil)))
(insn 1235 672 673 70 (set (reg:SI 1 dx [orig:817 D.6033 ] [817])
        (reg:SI 2 cx [orig:817 D.6033 ] [817])) blake_ref.c:362 90 {*movsi_internal}
     (nil))
(insn 673 1235 674 70 (set (reg:DI 1 dx [orig:819 D.6036 ] [819])
        (sign_extend:DI (reg:SI 1 dx [orig:817 D.6033 ] [817]))) blake_ref.c:362 142 {*extendsidi2_rex64}
     (nil))
(insn 674 673 675 70 (parallel [
            (set (reg:DI 0 ax [orig:820 D.6036 ] [820])
                (minus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (reg:DI 1 dx [orig:819 D.6036 ] [819])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 261 {*subdi_1}
     (nil))
(insn 675 674 676 70 (parallel [
            (set (reg:DI 0 ax [821])
                (plus:DI (reg:DI 0 ax [orig:820 D.6036 ] [820])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 218 {*adddi_1}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (nil)))
(insn 676 675 677 70 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [821])) blake_ref.c:362 89 {*movdi_internal}
     (nil))
(insn 677 676 679 70 (parallel [
            (set (reg/f:DI 1 dx [orig:822 D.6040 ] [822])
                (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 218 {*adddi_1}
     (nil))
(insn 679 677 680 70 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) blake_ref.c:364 89 {*movdi_internal}
     (nil))
(call_insn 680 679 681 70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 681 680 682 70 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:391 90 {*movsi_internal}
     (nil))
(insn 682 681 683 70 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                            (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:613 218 {*adddi_1}
     (nil))
(insn 683 682 684 70 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) 89 {*movdi_internal}
     (nil))
(insn 684 683 685 70 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 685 684 686 70 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 686 685 687 70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 687 686 688 70 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:615 90 {*movsi_internal}
     (nil))
(insn 688 687 689 70 (set (reg:DI 0 ax [orig:616 D.6039 ] [616])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 689 688 1145 70 (set (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1145 689 1146 70 (set (pc)
        (label_ref 731)) 654 {jump}
     (nil)
 -> 731)
;;  succ:       75 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]

(barrier 1146 1145 692)
;; basic block 71, loop depth 0, count 0, freq 541, maybe hot
;;  prev block 70, next block 72, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       69 [71.0%] 
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(code_label 692 1146 693 71 137 "" [1 uses])
(note 693 692 694 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 694 693 1236 71 (set (reg:SI 37 r8 [824])
        (const_int 1024 [0x400])) blake_ref.c:619 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 1024 [0x400])
        (nil)))
(insn 1236 694 695 71 (set (reg:SI 2 cx [orig:823 D.6033 ] [823])
        (reg:SI 37 r8 [824])) blake_ref.c:619 90 {*movsi_internal}
     (nil))
(insn 695 1236 696 71 (parallel [
            (set (reg:SI 2 cx [orig:823 D.6033 ] [823])
                (minus:SI (reg:SI 2 cx [orig:823 D.6033 ] [823])
                    (reg:SI 1 dx [orig:242 D.6033 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:619 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 1024 [0x400])
            (reg:SI 1 dx [orig:242 D.6033 ] [242]))
        (nil)))
(insn 696 695 697 71 (set (reg:DI 2 cx [orig:825 D.6036 ] [825])
        (sign_extend:DI (reg:SI 2 cx [orig:823 D.6033 ] [823]))) blake_ref.c:619 142 {*extendsidi2_rex64}
     (nil))
(insn 697 696 698 71 (parallel [
            (set (reg:DI 0 ax [orig:327 D.6036 ] [327])
                (minus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (reg:DI 2 cx [orig:825 D.6036 ] [825])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:619 261 {*subdi_1}
     (nil))
(insn 698 697 699 71 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [orig:327 D.6036 ] [327])) blake_ref.c:619 89 {*movdi_internal}
     (nil))
(insn 699 698 700 71 (parallel [
            (set (reg:SI 1 dx [orig:826 D.6035 ] [826])
                (and:SI (reg:SI 1 dx [orig:242 D.6033 ] [242])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:621 381 {*andsi_1}
     (nil))
(insn 700 699 701 71 (parallel [
            (set (reg:SI 1 dx [orig:330 D.6033 ] [330])
                (plus:SI (reg:SI 1 dx [orig:826 D.6035 ] [826])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:621 217 {*addsi_1}
     (nil))
(insn 701 700 703 71 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 1 dx [orig:330 D.6033 ] [330])) blake_ref.c:621 90 {*movsi_internal}
     (nil))
(insn 703 701 704 71 (parallel [
            (set (reg:SI 37 r8 [orig:827 D.6033 ] [827])
                (minus:SI (reg:SI 37 r8 [824])
                    (reg:SI 1 dx [orig:330 D.6033 ] [330])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:622 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 1024 [0x400])
            (reg:SI 1 dx [orig:330 D.6033 ] [330]))
        (nil)))
(insn 704 703 705 71 (set (reg:DI 37 r8 [orig:332 D.6036 ] [332])
        (sign_extend:DI (reg:SI 37 r8 [orig:827 D.6033 ] [827]))) blake_ref.c:622 142 {*extendsidi2_rex64}
     (nil))
(note 705 704 706 71 NOTE_INSN_DELETED)
(note 706 705 707 71 NOTE_INSN_DELETED)
(insn 707 706 708 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 37 r8 [orig:332 D.6036 ] [332])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 708 707 1028 71 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1035)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1035)
;;  succ:       73 [14.0%] 
;;              72 [86.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 72, loop depth 0, count 0, freq 465, maybe hot
;;  prev block 71, next block 73, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       71 [86.0%]  (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1028 708 709 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(note 709 1028 710 72 NOTE_INSN_DELETED)
(note 710 709 711 72 NOTE_INSN_DELETED)
(insn 711 710 712 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:330 D.6033 ] [330])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (nil))
(jump_insn 712 711 1035 72 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 720)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 8372 (nil))
 -> 720)
;;  succ:       74 [83.7%] 
;;              73 [16.3%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 73, loop depth 0, count 0, freq 265, maybe hot
;; Invalid sum of incoming frequencies 152, should be 265
;;  prev block 72, next block 74, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       72 [16.3%]  (FALLTHRU)
;;              71 [14.0%] 
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 1035 712 714 73 151 "" [1 uses])
(note 714 1035 716 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 716 714 717 73 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 717 716 718 73 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 718 717 719 73 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 719 718 720 73 (set (reg:DI 0 ax [orig:327 D.6036 ] [327])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       74 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

;; basic block 74, loop depth 0, count 0, freq 541, maybe hot
;; Invalid sum of incoming frequencies 654, should be 541
;;  prev block 73, next block 75, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       73 [100.0%]  (FALLTHRU)
;;              72 [83.7%] 
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 39 [r10]
;; live  kill	 17 [flags]
(code_label 720 719 721 74 138 "" [1 uses])
(note 721 720 722 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 722 721 723 74 (parallel [
            (set (reg:DI 0 ax [833])
                (plus:DI (reg:DI 0 ax [orig:327 D.6036 ] [327])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:623 218 {*adddi_1}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (nil)))
(insn 723 722 724 74 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [833])) blake_ref.c:623 89 {*movdi_internal}
     (nil))
(insn 724 723 725 74 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) 89 {*movdi_internal}
     (nil))
(insn 725 724 726 74 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 726 725 727 74 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 727 726 728 74 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 728 727 729 74 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:625 90 {*movsi_internal}
     (nil))
(insn 729 728 730 74 (set (reg:DI 0 ax [orig:616 D.6039 ] [616])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 730 729 731 74 (set (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       75 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 75, loop depth 0, count 0, freq 1525, maybe hot
;; Invalid sum of incoming frequencies 3919, should be 1525
;;  prev block 74, next block 76, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       74 [100.0%]  (FALLTHRU)
;;              67 [83.7%] 
;;              68 [100.0%] 
;;              70 [100.0%] 
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 39 [r10]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 731 730 732 75 135 "" [3 uses])
(note 732 731 733 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 733 732 734 75 (parallel [
            (set (reg:DI 0 ax [834])
                (plus:DI (reg:DI 0 ax [orig:616 D.6039 ] [616])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:628 218 {*adddi_1}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (nil)))
(insn 734 733 735 75 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [834])) blake_ref.c:628 89 {*movdi_internal}
     (nil))
(insn 735 734 736 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 384 [0x180]))) blake_ref.c:629 7 {*cmpsi_1}
     (nil))
(jump_insn 736 735 737 75 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 747)
            (pc))) blake_ref.c:629 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 747)
;;  succ:       76 [28.0%]  (FALLTHRU)
;;              77 [72.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 76, loop depth 0, count 0, freq 427, maybe hot
;;  prev block 75, next block 77, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       75 [28.0%]  (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(note 737 736 738 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 738 737 739 76 (parallel [
            (set (reg/f:DI 1 dx [835])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 44 [0x2c])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -20 [0xffffffffffffffec]))
        (nil)))
(insn 739 738 741 76 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 741 739 742 76 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 742 741 743 76 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 743 742 744 76 (set (reg:DI 0 ax [orig:594 D.6039 ] [594])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 744 743 1147 76 (set (reg:SI 1 dx [orig:283 D.6033 ] [283])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1147 744 1148 76 (set (pc)
        (label_ref 756)) 654 {jump}
     (nil)
 -> 756)
;;  succ:       78 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

(barrier 1148 1147 747)
;; basic block 77, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 76, next block 78, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       75 [72.0%] 
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 747 1148 748 77 140 "" [1 uses])
(note 748 747 749 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 749 748 750 77 (parallel [
            (set (reg/f:DI 1 dx [836])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 45 [0x2d])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -19 [0xffffffffffffffed]))
        (nil)))
(insn 750 749 752 77 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 752 750 753 77 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 753 752 754 77 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 754 753 755 77 (set (reg:DI 0 ax [orig:594 D.6039 ] [594])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 755 754 756 77 (set (reg:SI 1 dx [orig:283 D.6033 ] [283])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       78 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 78, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 77, next block 79, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       77 [100.0%]  (FALLTHRU)
;;              76 [100.0%] 
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 756 755 757 78 141 "" [1 uses])
(note 757 756 758 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 758 757 759 78 (parallel [
            (set (reg:DI 0 ax [837])
                (plus:DI (reg:DI 0 ax [orig:594 D.6039 ] [594])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 218 {*adddi_1}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (nil)))
(insn 759 758 761 78 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [837])) blake_ref.c:634 89 {*movdi_internal}
     (nil))
(insn 761 759 762 78 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:283 D.6033 ] [283])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn 762 761 1149 78 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 760)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 760)
;;  succ:       59 [100.0%] 
;;              79 (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 79, loop depth 0, count 0, freq 0
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       78 (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	
;; live  kill	
(note 1149 762 1150 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1150 1149 1151 79 (set (pc)
        (label_ref 578)) 654 {jump}
     (nil)
 -> 578)
;;  succ:       60 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1151 1150 766)
;; basic block 80, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 79, next block 81, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       59 [100.0%] 
;;              60 [100.0%] 
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 766 1151 767 80 131 "" [2 uses])
(note 767 766 768 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(note 768 767 769 80 NOTE_INSN_DELETED)
(note 769 768 770 80 NOTE_INSN_DELETED)
(insn 770 769 771 80 (set (reg:SI 0 ax [orig:840 D.6032 ] [840])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 143 [0x8f])) [3 state_4(D)->h64+7 S1 A8]))) blake_ref.c:638 138 {*zero_extendqisi2}
     (nil))
(insn 771 770 772 80 (set (mem:QI (reg/v/f:DI 4 si [orig:634 hashval ] [634]) [0 *hashval_6(D)+0 S1 A8])
        (reg:QI 0 ax [orig:840 D.6032 ] [840])) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(note 772 771 773 80 NOTE_INSN_DELETED)
(note 773 772 774 80 NOTE_INSN_DELETED)
(insn 774 773 775 80 (set (reg:SI 0 ax [orig:843 D.6032 ] [843])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 142 [0x8e])) [3 state_4(D)->h64+6 S2 A16]))) blake_ref.c:638 139 {*zero_extendhisi2}
     (nil))
(insn 775 774 776 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 1 [0x1])) [0 MEM[(BitSequence *)hashval_6(D) + 1B]+0 S1 A8])
        (reg:QI 0 ax [orig:843 D.6032 ] [843])) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(note 776 775 777 80 NOTE_INSN_DELETED)
(insn 777 776 778 80 (set (reg:DI 0 ax [orig:844 D.6036 ] [844])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 140 [0x8c])) [3 state_4(D)->h64+4 S4 A32]))) blake_ref.c:638 133 {*zero_extendsidi2}
     (nil))
(insn 778 777 779 80 (parallel [
            (set (reg:SI 0 ax [orig:846 D.6032 ] [846])
                (lshiftrt:SI (reg:SI 0 ax [orig:844 D.6036 ] [844])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 544 {*lshrsi3_1}
     (nil))
(insn 779 778 780 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 2 [0x2])) [0 MEM[(BitSequence *)hashval_6(D) + 2B]+0 S1 A8])
        (reg:QI 0 ax [orig:846 D.6032 ] [846])) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(note 780 779 781 80 NOTE_INSN_DELETED)
(insn 781 780 782 80 (set (reg:DI 0 ax [orig:847 D.6036 ] [847])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 140 [0x8c])) [3 state_4(D)->h64+4 S4 A32]))) blake_ref.c:638 133 {*zero_extendsidi2}
     (nil))
(insn 782 781 783 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 3 [0x3])) [0 MEM[(BitSequence *)hashval_6(D) + 3B]+0 S1 A8])
        (reg:QI 0 ax [orig:847 D.6036 ] [847])) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(note 783 782 784 80 NOTE_INSN_DELETED)
(insn 784 783 785 80 (set (reg:SI 0 ax [orig:850 D.6032 ] [850])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 139 [0x8b])) [3 state_4(D)->h64+3 S1 A8]))) blake_ref.c:638 138 {*zero_extendqisi2}
     (nil))
(insn 785 784 786 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 4 [0x4])) [0 MEM[(BitSequence *)hashval_6(D) + 4B]+0 S1 A8])
        (reg:QI 0 ax [orig:850 D.6032 ] [850])) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(note 786 785 787 80 NOTE_INSN_DELETED)
(insn 787 786 788 80 (set (reg:SI 0 ax [orig:852 D.6032 ] [852])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 138 [0x8a])) [3 state_4(D)->h64+2 S2 A16]))) blake_ref.c:638 139 {*zero_extendhisi2}
     (nil))
(insn 788 787 789 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 5 [0x5])) [0 MEM[(BitSequence *)hashval_6(D) + 5B]+0 S1 A8])
        (reg:QI 0 ax [orig:852 D.6032 ] [852])) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(note 789 788 1238 80 NOTE_INSN_DELETED)
(insn 1238 789 790 80 (set (reg:SI 0 ax [orig:854 D.6032 ] [854])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S4 A64])) blake_ref.c:638 90 {*movsi_internal}
     (nil))
(insn 790 1238 1239 80 (parallel [
            (set (reg:SI 0 ax [orig:854 D.6032 ] [854])
                (lshiftrt:SI (reg:SI 0 ax [orig:854 D.6032 ] [854])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 544 {*lshrsi3_1}
     (nil))
(insn 1239 790 791 80 (set (reg:SI 0 ax [orig:854 D.6032 ] [854])
        (reg:SI 0 ax [orig:854 D.6032 ] [854])) blake_ref.c:638 90 {*movsi_internal}
     (nil))
(insn 791 1239 792 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 6 [0x6])) [0 MEM[(BitSequence *)hashval_6(D) + 6B]+0 S1 A8])
        (reg:QI 0 ax [orig:854 D.6032 ] [854])) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(insn 792 791 793 80 (set (reg:DI 0 ax [orig:855 state_4(D)->h64 ] [855])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
        (nil)))
(insn 793 792 794 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 7 [0x7])) [0 MEM[(BitSequence *)hashval_6(D) + 7B]+0 S1 A8])
        (reg:QI 0 ax [orig:855 state_4(D)->h64 ] [855])) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(note 794 793 795 80 NOTE_INSN_DELETED)
(note 795 794 796 80 NOTE_INSN_DELETED)
(insn 796 795 797 80 (set (reg:SI 0 ax [orig:858 D.6032 ] [858])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 151 [0x97])) [3 state_4(D)->h64+15 S1 A8]))) blake_ref.c:639 138 {*zero_extendqisi2}
     (nil))
(insn 797 796 798 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 8 [0x8])) [0 MEM[(BitSequence *)hashval_6(D) + 8B]+0 S1 A8])
        (reg:QI 0 ax [orig:858 D.6032 ] [858])) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(note 798 797 799 80 NOTE_INSN_DELETED)
(note 799 798 800 80 NOTE_INSN_DELETED)
(insn 800 799 801 80 (set (reg:SI 0 ax [orig:861 D.6032 ] [861])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 150 [0x96])) [3 state_4(D)->h64+14 S2 A16]))) blake_ref.c:639 139 {*zero_extendhisi2}
     (nil))
(insn 801 800 802 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 9 [0x9])) [0 MEM[(BitSequence *)hashval_6(D) + 9B]+0 S1 A8])
        (reg:QI 0 ax [orig:861 D.6032 ] [861])) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(note 802 801 803 80 NOTE_INSN_DELETED)
(insn 803 802 804 80 (set (reg:DI 0 ax [orig:862 D.6036 ] [862])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 148 [0x94])) [3 state_4(D)->h64+12 S4 A32]))) blake_ref.c:639 133 {*zero_extendsidi2}
     (nil))
(insn 804 803 805 80 (parallel [
            (set (reg:SI 0 ax [orig:864 D.6032 ] [864])
                (lshiftrt:SI (reg:SI 0 ax [orig:862 D.6036 ] [862])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 544 {*lshrsi3_1}
     (nil))
(insn 805 804 806 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 10 [0xa])) [0 MEM[(BitSequence *)hashval_6(D) + 10B]+0 S1 A8])
        (reg:QI 0 ax [orig:864 D.6032 ] [864])) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(note 806 805 807 80 NOTE_INSN_DELETED)
(insn 807 806 808 80 (set (reg:DI 0 ax [orig:865 D.6036 ] [865])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 148 [0x94])) [3 state_4(D)->h64+12 S4 A32]))) blake_ref.c:639 133 {*zero_extendsidi2}
     (nil))
(insn 808 807 809 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 11 [0xb])) [0 MEM[(BitSequence *)hashval_6(D) + 11B]+0 S1 A8])
        (reg:QI 0 ax [orig:865 D.6036 ] [865])) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(note 809 808 810 80 NOTE_INSN_DELETED)
(insn 810 809 811 80 (set (reg:SI 0 ax [orig:868 D.6032 ] [868])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 147 [0x93])) [3 state_4(D)->h64+11 S1 A8]))) blake_ref.c:639 138 {*zero_extendqisi2}
     (nil))
(insn 811 810 812 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 12 [0xc])) [0 MEM[(BitSequence *)hashval_6(D) + 12B]+0 S1 A8])
        (reg:QI 0 ax [orig:868 D.6032 ] [868])) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(note 812 811 813 80 NOTE_INSN_DELETED)
(insn 813 812 814 80 (set (reg:SI 0 ax [orig:870 D.6032 ] [870])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 146 [0x92])) [3 state_4(D)->h64+10 S2 A16]))) blake_ref.c:639 139 {*zero_extendhisi2}
     (nil))
(insn 814 813 815 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 13 [0xd])) [0 MEM[(BitSequence *)hashval_6(D) + 13B]+0 S1 A8])
        (reg:QI 0 ax [orig:870 D.6032 ] [870])) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(note 815 814 1240 80 NOTE_INSN_DELETED)
(insn 1240 815 816 80 (set (reg:SI 0 ax [orig:872 D.6032 ] [872])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S4 A64])) blake_ref.c:639 90 {*movsi_internal}
     (nil))
(insn 816 1240 1241 80 (parallel [
            (set (reg:SI 0 ax [orig:872 D.6032 ] [872])
                (lshiftrt:SI (reg:SI 0 ax [orig:872 D.6032 ] [872])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 544 {*lshrsi3_1}
     (nil))
(insn 1241 816 817 80 (set (reg:SI 0 ax [orig:872 D.6032 ] [872])
        (reg:SI 0 ax [orig:872 D.6032 ] [872])) blake_ref.c:639 90 {*movsi_internal}
     (nil))
(insn 817 1241 818 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 14 [0xe])) [0 MEM[(BitSequence *)hashval_6(D) + 14B]+0 S1 A8])
        (reg:QI 0 ax [orig:872 D.6032 ] [872])) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(insn 818 817 819 80 (set (reg:DI 0 ax [orig:873 state_4(D)->h64+8 ] [873])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
        (nil)))
(insn 819 818 820 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 15 [0xf])) [0 MEM[(BitSequence *)hashval_6(D) + 15B]+0 S1 A8])
        (reg:QI 0 ax [orig:873 state_4(D)->h64+8 ] [873])) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(note 820 819 821 80 NOTE_INSN_DELETED)
(note 821 820 822 80 NOTE_INSN_DELETED)
(insn 822 821 823 80 (set (reg:SI 0 ax [orig:876 D.6032 ] [876])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 159 [0x9f])) [3 state_4(D)->h64+23 S1 A8]))) blake_ref.c:640 138 {*zero_extendqisi2}
     (nil))
(insn 823 822 824 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 16 [0x10])) [0 MEM[(BitSequence *)hashval_6(D) + 16B]+0 S1 A8])
        (reg:QI 0 ax [orig:876 D.6032 ] [876])) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(note 824 823 825 80 NOTE_INSN_DELETED)
(note 825 824 826 80 NOTE_INSN_DELETED)
(insn 826 825 827 80 (set (reg:SI 0 ax [orig:879 D.6032 ] [879])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 158 [0x9e])) [3 state_4(D)->h64+22 S2 A16]))) blake_ref.c:640 139 {*zero_extendhisi2}
     (nil))
(insn 827 826 828 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 17 [0x11])) [0 MEM[(BitSequence *)hashval_6(D) + 17B]+0 S1 A8])
        (reg:QI 0 ax [orig:879 D.6032 ] [879])) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(note 828 827 829 80 NOTE_INSN_DELETED)
(insn 829 828 830 80 (set (reg:DI 0 ax [orig:880 D.6036 ] [880])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 156 [0x9c])) [3 state_4(D)->h64+20 S4 A32]))) blake_ref.c:640 133 {*zero_extendsidi2}
     (nil))
(insn 830 829 831 80 (parallel [
            (set (reg:SI 0 ax [orig:882 D.6032 ] [882])
                (lshiftrt:SI (reg:SI 0 ax [orig:880 D.6036 ] [880])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 544 {*lshrsi3_1}
     (nil))
(insn 831 830 832 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 18 [0x12])) [0 MEM[(BitSequence *)hashval_6(D) + 18B]+0 S1 A8])
        (reg:QI 0 ax [orig:882 D.6032 ] [882])) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(note 832 831 833 80 NOTE_INSN_DELETED)
(insn 833 832 834 80 (set (reg:DI 0 ax [orig:883 D.6036 ] [883])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 156 [0x9c])) [3 state_4(D)->h64+20 S4 A32]))) blake_ref.c:640 133 {*zero_extendsidi2}
     (nil))
(insn 834 833 835 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 19 [0x13])) [0 MEM[(BitSequence *)hashval_6(D) + 19B]+0 S1 A8])
        (reg:QI 0 ax [orig:883 D.6036 ] [883])) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(note 835 834 836 80 NOTE_INSN_DELETED)
(insn 836 835 837 80 (set (reg:SI 0 ax [orig:886 D.6032 ] [886])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 155 [0x9b])) [3 state_4(D)->h64+19 S1 A8]))) blake_ref.c:640 138 {*zero_extendqisi2}
     (nil))
(insn 837 836 838 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 20 [0x14])) [0 MEM[(BitSequence *)hashval_6(D) + 20B]+0 S1 A8])
        (reg:QI 0 ax [orig:886 D.6032 ] [886])) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(note 838 837 839 80 NOTE_INSN_DELETED)
(insn 839 838 840 80 (set (reg:SI 0 ax [orig:888 D.6032 ] [888])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 154 [0x9a])) [3 state_4(D)->h64+18 S2 A16]))) blake_ref.c:640 139 {*zero_extendhisi2}
     (nil))
(insn 840 839 841 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 21 [0x15])) [0 MEM[(BitSequence *)hashval_6(D) + 21B]+0 S1 A8])
        (reg:QI 0 ax [orig:888 D.6032 ] [888])) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(note 841 840 1242 80 NOTE_INSN_DELETED)
(insn 1242 841 842 80 (set (reg:SI 0 ax [orig:890 D.6032 ] [890])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S4 A64])) blake_ref.c:640 90 {*movsi_internal}
     (nil))
(insn 842 1242 1243 80 (parallel [
            (set (reg:SI 0 ax [orig:890 D.6032 ] [890])
                (lshiftrt:SI (reg:SI 0 ax [orig:890 D.6032 ] [890])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 544 {*lshrsi3_1}
     (nil))
(insn 1243 842 843 80 (set (reg:SI 0 ax [orig:890 D.6032 ] [890])
        (reg:SI 0 ax [orig:890 D.6032 ] [890])) blake_ref.c:640 90 {*movsi_internal}
     (nil))
(insn 843 1243 844 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 22 [0x16])) [0 MEM[(BitSequence *)hashval_6(D) + 22B]+0 S1 A8])
        (reg:QI 0 ax [orig:890 D.6032 ] [890])) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(insn 844 843 845 80 (set (reg:DI 0 ax [orig:891 state_4(D)->h64+16 ] [891])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
        (nil)))
(insn 845 844 846 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 23 [0x17])) [0 MEM[(BitSequence *)hashval_6(D) + 23B]+0 S1 A8])
        (reg:QI 0 ax [orig:891 state_4(D)->h64+16 ] [891])) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(note 846 845 847 80 NOTE_INSN_DELETED)
(note 847 846 848 80 NOTE_INSN_DELETED)
(insn 848 847 849 80 (set (reg:SI 0 ax [orig:894 D.6032 ] [894])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 167 [0xa7])) [3 state_4(D)->h64+31 S1 A8]))) blake_ref.c:641 138 {*zero_extendqisi2}
     (nil))
(insn 849 848 850 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 24 [0x18])) [0 MEM[(BitSequence *)hashval_6(D) + 24B]+0 S1 A8])
        (reg:QI 0 ax [orig:894 D.6032 ] [894])) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(note 850 849 851 80 NOTE_INSN_DELETED)
(note 851 850 852 80 NOTE_INSN_DELETED)
(insn 852 851 853 80 (set (reg:SI 0 ax [orig:897 D.6032 ] [897])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 166 [0xa6])) [3 state_4(D)->h64+30 S2 A16]))) blake_ref.c:641 139 {*zero_extendhisi2}
     (nil))
(insn 853 852 854 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 25 [0x19])) [0 MEM[(BitSequence *)hashval_6(D) + 25B]+0 S1 A8])
        (reg:QI 0 ax [orig:897 D.6032 ] [897])) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(note 854 853 855 80 NOTE_INSN_DELETED)
(insn 855 854 856 80 (set (reg:DI 0 ax [orig:898 D.6036 ] [898])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 164 [0xa4])) [3 state_4(D)->h64+28 S4 A32]))) blake_ref.c:641 133 {*zero_extendsidi2}
     (nil))
(insn 856 855 857 80 (parallel [
            (set (reg:SI 0 ax [orig:900 D.6032 ] [900])
                (lshiftrt:SI (reg:SI 0 ax [orig:898 D.6036 ] [898])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 544 {*lshrsi3_1}
     (nil))
(insn 857 856 858 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 26 [0x1a])) [0 MEM[(BitSequence *)hashval_6(D) + 26B]+0 S1 A8])
        (reg:QI 0 ax [orig:900 D.6032 ] [900])) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(note 858 857 859 80 NOTE_INSN_DELETED)
(insn 859 858 860 80 (set (reg:DI 0 ax [orig:901 D.6036 ] [901])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 164 [0xa4])) [3 state_4(D)->h64+28 S4 A32]))) blake_ref.c:641 133 {*zero_extendsidi2}
     (nil))
(insn 860 859 861 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 27 [0x1b])) [0 MEM[(BitSequence *)hashval_6(D) + 27B]+0 S1 A8])
        (reg:QI 0 ax [orig:901 D.6036 ] [901])) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(note 861 860 862 80 NOTE_INSN_DELETED)
(insn 862 861 863 80 (set (reg:SI 0 ax [orig:904 D.6032 ] [904])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 163 [0xa3])) [3 state_4(D)->h64+27 S1 A8]))) blake_ref.c:641 138 {*zero_extendqisi2}
     (nil))
(insn 863 862 864 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 28 [0x1c])) [0 MEM[(BitSequence *)hashval_6(D) + 28B]+0 S1 A8])
        (reg:QI 0 ax [orig:904 D.6032 ] [904])) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(note 864 863 865 80 NOTE_INSN_DELETED)
(insn 865 864 866 80 (set (reg:SI 0 ax [orig:906 D.6032 ] [906])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 162 [0xa2])) [3 state_4(D)->h64+26 S2 A16]))) blake_ref.c:641 139 {*zero_extendhisi2}
     (nil))
(insn 866 865 867 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 29 [0x1d])) [0 MEM[(BitSequence *)hashval_6(D) + 29B]+0 S1 A8])
        (reg:QI 0 ax [orig:906 D.6032 ] [906])) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(note 867 866 1244 80 NOTE_INSN_DELETED)
(insn 1244 867 868 80 (set (reg:SI 0 ax [orig:908 D.6032 ] [908])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S4 A64])) blake_ref.c:641 90 {*movsi_internal}
     (nil))
(insn 868 1244 1245 80 (parallel [
            (set (reg:SI 0 ax [orig:908 D.6032 ] [908])
                (lshiftrt:SI (reg:SI 0 ax [orig:908 D.6032 ] [908])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 544 {*lshrsi3_1}
     (nil))
(insn 1245 868 869 80 (set (reg:SI 0 ax [orig:908 D.6032 ] [908])
        (reg:SI 0 ax [orig:908 D.6032 ] [908])) blake_ref.c:641 90 {*movsi_internal}
     (nil))
(insn 869 1245 870 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 30 [0x1e])) [0 MEM[(BitSequence *)hashval_6(D) + 30B]+0 S1 A8])
        (reg:QI 0 ax [orig:908 D.6032 ] [908])) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(insn 870 869 871 80 (set (reg:DI 0 ax [orig:909 state_4(D)->h64+24 ] [909])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
        (nil)))
(insn 871 870 872 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 31 [0x1f])) [0 MEM[(BitSequence *)hashval_6(D) + 31B]+0 S1 A8])
        (reg:QI 0 ax [orig:909 state_4(D)->h64+24 ] [909])) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(note 872 871 873 80 NOTE_INSN_DELETED)
(note 873 872 874 80 NOTE_INSN_DELETED)
(insn 874 873 875 80 (set (reg:SI 0 ax [orig:912 D.6032 ] [912])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 175 [0xaf])) [3 state_4(D)->h64+39 S1 A8]))) blake_ref.c:642 138 {*zero_extendqisi2}
     (nil))
(insn 875 874 876 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 32 [0x20])) [0 MEM[(BitSequence *)hashval_6(D) + 32B]+0 S1 A8])
        (reg:QI 0 ax [orig:912 D.6032 ] [912])) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(note 876 875 877 80 NOTE_INSN_DELETED)
(note 877 876 878 80 NOTE_INSN_DELETED)
(insn 878 877 879 80 (set (reg:SI 0 ax [orig:915 D.6032 ] [915])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 174 [0xae])) [3 state_4(D)->h64+38 S2 A16]))) blake_ref.c:642 139 {*zero_extendhisi2}
     (nil))
(insn 879 878 880 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 33 [0x21])) [0 MEM[(BitSequence *)hashval_6(D) + 33B]+0 S1 A8])
        (reg:QI 0 ax [orig:915 D.6032 ] [915])) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(note 880 879 881 80 NOTE_INSN_DELETED)
(insn 881 880 882 80 (set (reg:DI 0 ax [orig:916 D.6036 ] [916])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 172 [0xac])) [3 state_4(D)->h64+36 S4 A32]))) blake_ref.c:642 133 {*zero_extendsidi2}
     (nil))
(insn 882 881 883 80 (parallel [
            (set (reg:SI 0 ax [orig:918 D.6032 ] [918])
                (lshiftrt:SI (reg:SI 0 ax [orig:916 D.6036 ] [916])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 544 {*lshrsi3_1}
     (nil))
(insn 883 882 884 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 34 [0x22])) [0 MEM[(BitSequence *)hashval_6(D) + 34B]+0 S1 A8])
        (reg:QI 0 ax [orig:918 D.6032 ] [918])) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(note 884 883 885 80 NOTE_INSN_DELETED)
(insn 885 884 886 80 (set (reg:DI 0 ax [orig:919 D.6036 ] [919])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 172 [0xac])) [3 state_4(D)->h64+36 S4 A32]))) blake_ref.c:642 133 {*zero_extendsidi2}
     (nil))
(insn 886 885 887 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 35 [0x23])) [0 MEM[(BitSequence *)hashval_6(D) + 35B]+0 S1 A8])
        (reg:QI 0 ax [orig:919 D.6036 ] [919])) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(note 887 886 888 80 NOTE_INSN_DELETED)
(insn 888 887 889 80 (set (reg:SI 0 ax [orig:922 D.6032 ] [922])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 171 [0xab])) [3 state_4(D)->h64+35 S1 A8]))) blake_ref.c:642 138 {*zero_extendqisi2}
     (nil))
(insn 889 888 890 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 36 [0x24])) [0 MEM[(BitSequence *)hashval_6(D) + 36B]+0 S1 A8])
        (reg:QI 0 ax [orig:922 D.6032 ] [922])) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(note 890 889 891 80 NOTE_INSN_DELETED)
(insn 891 890 892 80 (set (reg:SI 0 ax [orig:924 D.6032 ] [924])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 170 [0xaa])) [3 state_4(D)->h64+34 S2 A16]))) blake_ref.c:642 139 {*zero_extendhisi2}
     (nil))
(insn 892 891 893 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 37 [0x25])) [0 MEM[(BitSequence *)hashval_6(D) + 37B]+0 S1 A8])
        (reg:QI 0 ax [orig:924 D.6032 ] [924])) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(note 893 892 1246 80 NOTE_INSN_DELETED)
(insn 1246 893 894 80 (set (reg:SI 0 ax [orig:926 D.6032 ] [926])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S4 A64])) blake_ref.c:642 90 {*movsi_internal}
     (nil))
(insn 894 1246 1247 80 (parallel [
            (set (reg:SI 0 ax [orig:926 D.6032 ] [926])
                (lshiftrt:SI (reg:SI 0 ax [orig:926 D.6032 ] [926])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 544 {*lshrsi3_1}
     (nil))
(insn 1247 894 895 80 (set (reg:SI 0 ax [orig:926 D.6032 ] [926])
        (reg:SI 0 ax [orig:926 D.6032 ] [926])) blake_ref.c:642 90 {*movsi_internal}
     (nil))
(insn 895 1247 896 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 38 [0x26])) [0 MEM[(BitSequence *)hashval_6(D) + 38B]+0 S1 A8])
        (reg:QI 0 ax [orig:926 D.6032 ] [926])) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(insn 896 895 897 80 (set (reg:DI 0 ax [orig:927 state_4(D)->h64+32 ] [927])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
        (nil)))
(insn 897 896 898 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 39 [0x27])) [0 MEM[(BitSequence *)hashval_6(D) + 39B]+0 S1 A8])
        (reg:QI 0 ax [orig:927 state_4(D)->h64+32 ] [927])) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(note 898 897 899 80 NOTE_INSN_DELETED)
(note 899 898 900 80 NOTE_INSN_DELETED)
(insn 900 899 901 80 (set (reg:SI 0 ax [orig:930 D.6032 ] [930])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 183 [0xb7])) [3 state_4(D)->h64+47 S1 A8]))) blake_ref.c:643 138 {*zero_extendqisi2}
     (nil))
(insn 901 900 902 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 40 [0x28])) [0 MEM[(BitSequence *)hashval_6(D) + 40B]+0 S1 A8])
        (reg:QI 0 ax [orig:930 D.6032 ] [930])) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(note 902 901 903 80 NOTE_INSN_DELETED)
(note 903 902 904 80 NOTE_INSN_DELETED)
(insn 904 903 905 80 (set (reg:SI 0 ax [orig:933 D.6032 ] [933])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 182 [0xb6])) [3 state_4(D)->h64+46 S2 A16]))) blake_ref.c:643 139 {*zero_extendhisi2}
     (nil))
(insn 905 904 906 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 41 [0x29])) [0 MEM[(BitSequence *)hashval_6(D) + 41B]+0 S1 A8])
        (reg:QI 0 ax [orig:933 D.6032 ] [933])) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(note 906 905 907 80 NOTE_INSN_DELETED)
(insn 907 906 908 80 (set (reg:DI 0 ax [orig:934 D.6036 ] [934])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 180 [0xb4])) [3 state_4(D)->h64+44 S4 A32]))) blake_ref.c:643 133 {*zero_extendsidi2}
     (nil))
(insn 908 907 909 80 (parallel [
            (set (reg:SI 0 ax [orig:936 D.6032 ] [936])
                (lshiftrt:SI (reg:SI 0 ax [orig:934 D.6036 ] [934])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 544 {*lshrsi3_1}
     (nil))
(insn 909 908 910 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 42 [0x2a])) [0 MEM[(BitSequence *)hashval_6(D) + 42B]+0 S1 A8])
        (reg:QI 0 ax [orig:936 D.6032 ] [936])) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(note 910 909 911 80 NOTE_INSN_DELETED)
(insn 911 910 912 80 (set (reg:DI 0 ax [orig:937 D.6036 ] [937])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 180 [0xb4])) [3 state_4(D)->h64+44 S4 A32]))) blake_ref.c:643 133 {*zero_extendsidi2}
     (nil))
(insn 912 911 913 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 43 [0x2b])) [0 MEM[(BitSequence *)hashval_6(D) + 43B]+0 S1 A8])
        (reg:QI 0 ax [orig:937 D.6036 ] [937])) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(note 913 912 914 80 NOTE_INSN_DELETED)
(insn 914 913 915 80 (set (reg:SI 0 ax [orig:940 D.6032 ] [940])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 179 [0xb3])) [3 state_4(D)->h64+43 S1 A8]))) blake_ref.c:643 138 {*zero_extendqisi2}
     (nil))
(insn 915 914 916 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 44 [0x2c])) [0 MEM[(BitSequence *)hashval_6(D) + 44B]+0 S1 A8])
        (reg:QI 0 ax [orig:940 D.6032 ] [940])) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(note 916 915 917 80 NOTE_INSN_DELETED)
(insn 917 916 918 80 (set (reg:SI 0 ax [orig:942 D.6032 ] [942])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 178 [0xb2])) [3 state_4(D)->h64+42 S2 A16]))) blake_ref.c:643 139 {*zero_extendhisi2}
     (nil))
(insn 918 917 919 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 45 [0x2d])) [0 MEM[(BitSequence *)hashval_6(D) + 45B]+0 S1 A8])
        (reg:QI 0 ax [orig:942 D.6032 ] [942])) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(note 919 918 1248 80 NOTE_INSN_DELETED)
(insn 1248 919 920 80 (set (reg:SI 0 ax [orig:944 D.6032 ] [944])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S4 A64])) blake_ref.c:643 90 {*movsi_internal}
     (nil))
(insn 920 1248 1249 80 (parallel [
            (set (reg:SI 0 ax [orig:944 D.6032 ] [944])
                (lshiftrt:SI (reg:SI 0 ax [orig:944 D.6032 ] [944])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 544 {*lshrsi3_1}
     (nil))
(insn 1249 920 921 80 (set (reg:SI 0 ax [orig:944 D.6032 ] [944])
        (reg:SI 0 ax [orig:944 D.6032 ] [944])) blake_ref.c:643 90 {*movsi_internal}
     (nil))
(insn 921 1249 922 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 46 [0x2e])) [0 MEM[(BitSequence *)hashval_6(D) + 46B]+0 S1 A8])
        (reg:QI 0 ax [orig:944 D.6032 ] [944])) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(insn 922 921 923 80 (set (reg:DI 0 ax [orig:945 state_4(D)->h64+40 ] [945])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
        (nil)))
(insn 923 922 924 80 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 47 [0x2f])) [0 MEM[(BitSequence *)hashval_6(D) + 47B]+0 S1 A8])
        (reg:QI 0 ax [orig:945 state_4(D)->h64+40 ] [945])) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(insn 924 923 925 80 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 512 [0x200]))) blake_ref.c:645 7 {*cmpsi_1}
     (nil))
(jump_insn 925 924 926 80 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1058)
            (pc))) blake_ref.c:645 612 {*jcc_1}
     (int_list:REG_BR_PROB 6218 (nil))
 -> 1058)
;;  succ:       81 [37.8%]  (FALLTHRU)
;;              84 [62.2%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 81, loop depth 0, count 0, freq 2307, maybe hot
;;  prev block 80, next block 82, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       80 [37.8%]  (FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(note 926 925 927 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(note 927 926 928 81 NOTE_INSN_DELETED)
(note 928 927 929 81 NOTE_INSN_DELETED)
(insn 929 928 930 81 (set (reg:SI 0 ax [orig:948 D.6032 ] [948])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 191 [0xbf])) [3 state_4(D)->h64+55 S1 A8]))) blake_ref.c:646 138 {*zero_extendqisi2}
     (nil))
(insn 930 929 931 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 48 [0x30])) [0 MEM[(BitSequence *)hashval_6(D) + 48B]+0 S1 A8])
        (reg:QI 0 ax [orig:948 D.6032 ] [948])) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(note 931 930 932 81 NOTE_INSN_DELETED)
(note 932 931 933 81 NOTE_INSN_DELETED)
(insn 933 932 934 81 (set (reg:SI 0 ax [orig:951 D.6032 ] [951])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 190 [0xbe])) [3 state_4(D)->h64+54 S2 A16]))) blake_ref.c:646 139 {*zero_extendhisi2}
     (nil))
(insn 934 933 935 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 49 [0x31])) [0 MEM[(BitSequence *)hashval_6(D) + 49B]+0 S1 A8])
        (reg:QI 0 ax [orig:951 D.6032 ] [951])) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(note 935 934 936 81 NOTE_INSN_DELETED)
(insn 936 935 937 81 (set (reg:DI 0 ax [orig:952 D.6036 ] [952])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 188 [0xbc])) [3 state_4(D)->h64+52 S4 A32]))) blake_ref.c:646 133 {*zero_extendsidi2}
     (nil))
(insn 937 936 938 81 (parallel [
            (set (reg:SI 0 ax [orig:954 D.6032 ] [954])
                (lshiftrt:SI (reg:SI 0 ax [orig:952 D.6036 ] [952])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 544 {*lshrsi3_1}
     (nil))
(insn 938 937 939 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 50 [0x32])) [0 MEM[(BitSequence *)hashval_6(D) + 50B]+0 S1 A8])
        (reg:QI 0 ax [orig:954 D.6032 ] [954])) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(note 939 938 940 81 NOTE_INSN_DELETED)
(insn 940 939 941 81 (set (reg:DI 0 ax [orig:955 D.6036 ] [955])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 188 [0xbc])) [3 state_4(D)->h64+52 S4 A32]))) blake_ref.c:646 133 {*zero_extendsidi2}
     (nil))
(insn 941 940 942 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 51 [0x33])) [0 MEM[(BitSequence *)hashval_6(D) + 51B]+0 S1 A8])
        (reg:QI 0 ax [orig:955 D.6036 ] [955])) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(note 942 941 943 81 NOTE_INSN_DELETED)
(insn 943 942 944 81 (set (reg:SI 0 ax [orig:958 D.6032 ] [958])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 187 [0xbb])) [3 state_4(D)->h64+51 S1 A8]))) blake_ref.c:646 138 {*zero_extendqisi2}
     (nil))
(insn 944 943 945 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 52 [0x34])) [0 MEM[(BitSequence *)hashval_6(D) + 52B]+0 S1 A8])
        (reg:QI 0 ax [orig:958 D.6032 ] [958])) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(note 945 944 946 81 NOTE_INSN_DELETED)
(insn 946 945 947 81 (set (reg:SI 0 ax [orig:960 D.6032 ] [960])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 186 [0xba])) [3 state_4(D)->h64+50 S2 A16]))) blake_ref.c:646 139 {*zero_extendhisi2}
     (nil))
(insn 947 946 948 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 53 [0x35])) [0 MEM[(BitSequence *)hashval_6(D) + 53B]+0 S1 A8])
        (reg:QI 0 ax [orig:960 D.6032 ] [960])) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(note 948 947 1250 81 NOTE_INSN_DELETED)
(insn 1250 948 949 81 (set (reg:SI 0 ax [orig:962 D.6032 ] [962])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S4 A64])) blake_ref.c:646 90 {*movsi_internal}
     (nil))
(insn 949 1250 1251 81 (parallel [
            (set (reg:SI 0 ax [orig:962 D.6032 ] [962])
                (lshiftrt:SI (reg:SI 0 ax [orig:962 D.6032 ] [962])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 544 {*lshrsi3_1}
     (nil))
(insn 1251 949 950 81 (set (reg:SI 0 ax [orig:962 D.6032 ] [962])
        (reg:SI 0 ax [orig:962 D.6032 ] [962])) blake_ref.c:646 90 {*movsi_internal}
     (nil))
(insn 950 1251 951 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 54 [0x36])) [0 MEM[(BitSequence *)hashval_6(D) + 54B]+0 S1 A8])
        (reg:QI 0 ax [orig:962 D.6032 ] [962])) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(insn 951 950 952 81 (set (reg:DI 0 ax [orig:963 state_4(D)->h64+48 ] [963])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
        (nil)))
(insn 952 951 953 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 55 [0x37])) [0 MEM[(BitSequence *)hashval_6(D) + 55B]+0 S1 A8])
        (reg:QI 0 ax [orig:963 state_4(D)->h64+48 ] [963])) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(note 953 952 954 81 NOTE_INSN_DELETED)
(note 954 953 955 81 NOTE_INSN_DELETED)
(insn 955 954 956 81 (set (reg:SI 0 ax [orig:966 D.6032 ] [966])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 199 [0xc7])) [3 state_4(D)->h64+63 S1 A8]))) blake_ref.c:647 138 {*zero_extendqisi2}
     (nil))
(insn 956 955 957 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 56 [0x38])) [0 MEM[(BitSequence *)hashval_6(D) + 56B]+0 S1 A8])
        (reg:QI 0 ax [orig:966 D.6032 ] [966])) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(note 957 956 958 81 NOTE_INSN_DELETED)
(note 958 957 959 81 NOTE_INSN_DELETED)
(insn 959 958 960 81 (set (reg:SI 0 ax [orig:969 D.6032 ] [969])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 198 [0xc6])) [3 state_4(D)->h64+62 S2 A16]))) blake_ref.c:647 139 {*zero_extendhisi2}
     (nil))
(insn 960 959 961 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 57 [0x39])) [0 MEM[(BitSequence *)hashval_6(D) + 57B]+0 S1 A8])
        (reg:QI 0 ax [orig:969 D.6032 ] [969])) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(note 961 960 962 81 NOTE_INSN_DELETED)
(insn 962 961 963 81 (set (reg:DI 0 ax [orig:970 D.6036 ] [970])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 196 [0xc4])) [3 state_4(D)->h64+60 S4 A32]))) blake_ref.c:647 133 {*zero_extendsidi2}
     (nil))
(insn 963 962 964 81 (parallel [
            (set (reg:SI 0 ax [orig:972 D.6032 ] [972])
                (lshiftrt:SI (reg:SI 0 ax [orig:970 D.6036 ] [970])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 544 {*lshrsi3_1}
     (nil))
(insn 964 963 965 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 58 [0x3a])) [0 MEM[(BitSequence *)hashval_6(D) + 58B]+0 S1 A8])
        (reg:QI 0 ax [orig:972 D.6032 ] [972])) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(note 965 964 966 81 NOTE_INSN_DELETED)
(insn 966 965 967 81 (set (reg:DI 0 ax [orig:973 D.6036 ] [973])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 196 [0xc4])) [3 state_4(D)->h64+60 S4 A32]))) blake_ref.c:647 133 {*zero_extendsidi2}
     (nil))
(insn 967 966 968 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 59 [0x3b])) [0 MEM[(BitSequence *)hashval_6(D) + 59B]+0 S1 A8])
        (reg:QI 0 ax [orig:973 D.6036 ] [973])) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(note 968 967 969 81 NOTE_INSN_DELETED)
(insn 969 968 970 81 (set (reg:SI 0 ax [orig:976 D.6032 ] [976])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 195 [0xc3])) [3 state_4(D)->h64+59 S1 A8]))) blake_ref.c:647 138 {*zero_extendqisi2}
     (nil))
(insn 970 969 971 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 60 [0x3c])) [0 MEM[(BitSequence *)hashval_6(D) + 60B]+0 S1 A8])
        (reg:QI 0 ax [orig:976 D.6032 ] [976])) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(note 971 970 972 81 NOTE_INSN_DELETED)
(insn 972 971 973 81 (set (reg:SI 0 ax [orig:978 D.6032 ] [978])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 194 [0xc2])) [3 state_4(D)->h64+58 S2 A16]))) blake_ref.c:647 139 {*zero_extendhisi2}
     (nil))
(insn 973 972 974 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 61 [0x3d])) [0 MEM[(BitSequence *)hashval_6(D) + 61B]+0 S1 A8])
        (reg:QI 0 ax [orig:978 D.6032 ] [978])) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(note 974 973 1252 81 NOTE_INSN_DELETED)
(insn 1252 974 975 81 (set (reg:SI 0 ax [orig:980 D.6032 ] [980])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S4 A64])) blake_ref.c:647 90 {*movsi_internal}
     (nil))
(insn 975 1252 1253 81 (parallel [
            (set (reg:SI 0 ax [orig:980 D.6032 ] [980])
                (lshiftrt:SI (reg:SI 0 ax [orig:980 D.6032 ] [980])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 544 {*lshrsi3_1}
     (nil))
(insn 1253 975 976 81 (set (reg:SI 0 ax [orig:980 D.6032 ] [980])
        (reg:SI 0 ax [orig:980 D.6032 ] [980])) blake_ref.c:647 90 {*movsi_internal}
     (nil))
(insn 976 1253 977 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 62 [0x3e])) [0 MEM[(BitSequence *)hashval_6(D) + 62B]+0 S1 A8])
        (reg:QI 0 ax [orig:980 D.6032 ] [980])) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(insn 977 976 978 81 (set (reg:DI 0 ax [orig:981 state_4(D)->h64+56 ] [981])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 89 {*movdi_internal}
     (nil))
(insn 978 977 1152 81 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 63 [0x3f])) [0 MEM[(BitSequence *)hashval_6(D) + 63B]+0 S1 A8])
        (reg:QI 0 ax [orig:981 state_4(D)->h64+56 ] [981])) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(jump_insn 1152 978 1153 81 (set (pc)
        (label_ref 1058)) blake_ref.c:658 654 {jump}
     (nil)
 -> 1058)
;;  succ:       84 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1153 1152 986)
;; basic block 82, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 81, next block 83, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [50.0%] 
;;              10 [100.0%] 
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 986 1153 987 82 100 "" [2 uses])
(note 987 986 988 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 988 987 989 82 (parallel [
            (set (reg:SI 1 dx [983])
                (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:440 217 {*addsi_1}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (nil)))
(insn 989 988 990 82 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [983])) blake_ref.c:440 90 {*movsi_internal}
     (nil))
(insn 990 989 991 82 (set (reg:SI 37 r8 [985])
        (const_int 440 [0x1b8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 440 [0x1b8])
        (nil)))
(insn 991 990 992 82 (parallel [
            (set (reg:SI 37 r8 [orig:984 D.6033 ] [984])
                (minus:SI (reg:SI 37 r8 [985])
                    (reg:SI 0 ax [orig:89 D.6033 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 440 [0x1b8])
            (reg:SI 0 ax [orig:89 D.6033 ] [89]))
        (nil)))
(note 992 991 993 82 NOTE_INSN_DELETED)
(insn 993 992 994 82 (set (reg:DI 37 r8)
        (sign_extend:DI (reg:SI 37 r8 [orig:984 D.6033 ] [984]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 994 993 995 82 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 995 994 996 82 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 996 995 1154 82 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1154 996 1155 82 (set (pc)
        (label_ref 997)) 654 {jump}
     (nil)
 -> 997)
;;  succ:       15 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1155 1154 1000)
;; basic block 83, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 82, next block 84, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       46 [50.0%] 
;;              47 [100.0%] 
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 1000 1155 1001 83 124 "" [2 uses])
(note 1001 1000 1002 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 1002 1001 1003 83 (set (reg:SI 37 r8 [988])
        (const_int 888 [0x378])) blake_ref.c:563 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 888 [0x378])
        (nil)))
(insn 1003 1002 1004 83 (parallel [
            (set (reg:SI 37 r8 [orig:987 D.6033 ] [987])
                (minus:SI (reg:SI 37 r8 [988])
                    (reg:SI 1 dx [orig:242 D.6033 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:563 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (const_int 888 [0x378])
            (reg:SI 1 dx [orig:242 D.6033 ] [242]))
        (nil)))
(insn 1004 1003 1005 83 (set (reg:DI 37 r8 [orig:603 D.6036 ] [603])
        (sign_extend:DI (reg:SI 37 r8 [orig:987 D.6033 ] [987]))) blake_ref.c:563 142 {*extendsidi2_rex64}
     (nil))
(insn 1005 1004 1006 83 (parallel [
            (set (reg:DI 0 ax [989])
                (minus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (reg:DI 37 r8 [orig:603 D.6036 ] [603])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:563 261 {*subdi_1}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (nil)))
(insn 1006 1005 1008 83 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [989])) blake_ref.c:563 89 {*movdi_internal}
     (nil))
(insn 1008 1006 1009 83 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 1009 1008 1010 83 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn 1010 1009 1156 83 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1156 1010 1157 83 (set (pc)
        (label_ref 1011)) 654 {jump}
     (nil)
 -> 1011)
;;  succ:       52 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1157 1156 1058)
;; basic block 84, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 83, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       39 [100.0%] 
;;              38 [62.2%] 
;;              80 [62.2%] 
;;              81 [100.0%] 
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 1058 1157 1017 84 160 "" [4 uses])
(note 1017 1058 1015 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 1015 1017 1016 84 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) blake_ref.c:659 90 {*movsi_internal}
     (nil))
(insn 1016 1015 1160 84 (use (reg/i:SI 0 ax)) blake_ref.c:659 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 1160 1016 0 NOTE_INSN_DELETED)

;; Function Hash (Hash, funcdef_no=21, decl_uid=3197, cgraph_uid=21, symbol_order=29)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=448, prev_offset=0)
Can eliminate 16 to 6 (offset=320, prev_offset=0)
Can eliminate 20 to 7 (offset=416, prev_offset=0)
Can eliminate 20 to 6 (offset=288, prev_offset=0)
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*addsi_1}
            Staticly defined alt reject+=600
            0 Costly set: reject++
          alt=0,overall=601,losers=0,rld_nregs=0
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=0,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 14:  (0) %!*a  (1) e {*testsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 41:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 46:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 47:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 195:  (0) r  (1) Z {*movdi_internal}
            3 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 52:  (0) =D  (1) =c  (2) a  (3) 0  (4) 1 {*rep_stosdi_rex64}
      Creating newreg=149 from oldreg=114, assigning class DIREG to r149
   52: {r116:DI=0;r149:DI=r116:DI<<0x3+r149:DI;[r149:DI]=0;use r115:DI;use r116:DI;}
      REG_DEAD r115:DI
      REG_DEAD r112:DI
      REG_UNUSED r116:DI
      REG_UNUSED r114:DI
    Inserting insn reload before:
  197: r149:DI=r112:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =v  (1) C {*movv4si_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =m  (1) v {sse2_storedquv16qi}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 59:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Small class reload: reject+=3
          alt=0,overall=610,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            alt=0,overall=613,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 61:  (0) r  (1) e {*testsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 69:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 71:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 73:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 75:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 77:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 79:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 81:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 83:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 90:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 92:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 94:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 96:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 98:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 100:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 102:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 104:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 107:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 108:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 109:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 110:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 114:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) r  (1) Z {*movdi_internal}
            3 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 115:  (0) =D  (1) =c  (2) a  (3) 0  (4) 1 {*rep_stosdi_rex64}
      Creating newreg=150 from oldreg=141, assigning class DIREG to r150
  115: {r143:DI=0;r150:DI=r143:DI<<0x3+r150:DI;[r150:DI]=0;use r142:DI;use r143:DI;}
      REG_DEAD r142:DI
      REG_DEAD r139:DI
      REG_UNUSED r143:DI
      REG_UNUSED r141:DI
    Inserting insn reload before:
  198: r150:DI=r139:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 116:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 117:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 118:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 119:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 18
   Insn 163: point = 0
   Insn 162: point = 0
  BB 17
   Insn 155: point = 2
   Insn 154: point = 3
   Insn 153: point = 3
   Insn 152: point = 4
  BB 14
   Insn 192: point = 6
   Insn 136: point = 6
   Insn 135: point = 6
   Insn 134: point = 6
   Insn 133: point = 7
  BB 16
   Insn 148: point = 9
   Insn 147: point = 9
   Insn 146: point = 9
   Insn 145: point = 10
  BB 15
   Insn 142: point = 12
   Insn 141: point = 12
  BB 13
   Insn 130: point = 13
   Insn 129: point = 13
  BB 12
   Insn 127: point = 14
   Insn 126: point = 14
   Insn 125: point = 15
   Insn 124: point = 15
   Insn 123: point = 15
   Insn 122: point = 15
  BB 6
   Insn 188: point = 16
   Insn 54: point = 16
   Insn 53: point = 17
   Insn 52: point = 18
   Insn 197: point = 20
	Hard reg 40 is preferable by r149 with profit 15
   Insn 195: point = 22
   Insn 51: point = 23
   Insn 47: point = 24
   Insn 46: point = 25
   Insn 45: point = 26
   Insn 44: point = 26
  BB 4
   Insn 186: point = 27
   Insn 28: point = 27
   Insn 27: point = 28
   Insn 26: point = 29
   Insn 25: point = 30
   Insn 24: point = 31
   Insn 23: point = 32
   Insn 22: point = 33
   Insn 21: point = 34
  BB 5
   Insn 41: point = 36
   Insn 40: point = 37
   Insn 39: point = 38
   Insn 38: point = 39
   Insn 37: point = 40
   Insn 36: point = 41
   Insn 35: point = 42
   Insn 34: point = 43
  BB 3
   Insn 18: point = 45
   Insn 17: point = 45
  BB 11
   Insn 119: point = 46
   Insn 118: point = 46
   Insn 117: point = 46
   Insn 116: point = 46
   Insn 115: point = 46
   Insn 198: point = 48
	Hard reg 40 is preferable by r150 with profit 5
   Insn 194: point = 50
   Insn 114: point = 51
   Insn 110: point = 52
   Insn 109: point = 53
   Insn 108: point = 54
   Insn 107: point = 54
  BB 9
   Insn 190: point = 55
   Insn 83: point = 55
   Insn 82: point = 56
   Insn 81: point = 57
   Insn 80: point = 58
   Insn 79: point = 59
   Insn 78: point = 60
   Insn 77: point = 61
   Insn 76: point = 62
   Insn 75: point = 63
   Insn 74: point = 64
   Insn 73: point = 65
   Insn 72: point = 66
   Insn 71: point = 67
   Insn 70: point = 68
   Insn 69: point = 69
   Insn 68: point = 70
  BB 10
   Insn 104: point = 72
   Insn 103: point = 73
   Insn 102: point = 74
   Insn 101: point = 75
   Insn 100: point = 76
   Insn 99: point = 77
   Insn 98: point = 78
   Insn 97: point = 79
   Insn 96: point = 80
   Insn 95: point = 81
   Insn 94: point = 82
   Insn 93: point = 83
   Insn 92: point = 84
   Insn 91: point = 85
   Insn 90: point = 86
   Insn 89: point = 87
  BB 8
   Insn 65: point = 89
   Insn 64: point = 89
  BB 7
   Insn 62: point = 90
   Insn 61: point = 90
   Insn 7: point = 91
   Insn 59: point = 92
  BB 2
   Insn 15: point = 94
   Insn 14: point = 94
   Insn 12: point = 95
   Insn 5: point = 96
   Insn 4: point = 97
   Insn 3: point = 98
   Insn 2: point = 99
 r87: [90..91] [0..2]
 r95: [14..99]
 r96: [6..98]
 r97: [10..97] [7..8]
 r98: [4..96]
 r99: [94..95]
 r102: [33..34]
 r103: [31..32]
 r104: [29..30]
 r105: [27..28]
 r107: [42..43]
 r108: [40..41]
 r109: [38..39]
 r110: [36..37]
 r112: [21..24]
 r115: [19..22]
 r116: [18..23]
 r117: [16..17]
 r118: [90..92]
 r121: [69..70]
 r122: [67..68]
 r123: [65..66]
 r124: [63..64]
 r125: [61..62]
 r126: [59..60]
 r127: [57..58]
 r128: [55..56]
 r130: [86..87]
 r131: [84..85]
 r132: [82..83]
 r133: [80..81]
 r134: [78..79]
 r135: [76..77]
 r136: [74..75]
 r137: [72..73]
 r139: [49..52]
 r142: [47..50]
 r143: [46..51]
 r148: [46..53] [3..25]
 r149: [18..20]
 r150: [46..48]
Compressing live ranges: from 100 to 66 - 66%
Ranges after the compression:
 r87: [62..63] [0..1]
 r95: [4..65]
 r96: [2..65]
 r97: [2..65]
 r98: [2..65]
 r99: [64..65]
 r102: [16..17]
 r103: [14..15]
 r104: [12..13]
 r105: [10..11]
 r107: [24..25]
 r108: [22..23]
 r109: [20..21]
 r110: [18..19]
 r112: [8..9]
 r115: [6..9]
 r116: [6..9]
 r117: [4..5]
 r118: [62..63]
 r121: [44..45]
 r122: [42..43]
 r123: [40..41]
 r124: [38..39]
 r125: [36..37]
 r126: [34..35]
 r127: [32..33]
 r128: [30..31]
 r130: [60..61]
 r131: [58..59]
 r132: [56..57]
 r133: [54..55]
 r134: [52..53]
 r135: [50..51]
 r136: [48..49]
 r137: [46..47]
 r139: [28..29]
 r142: [26..29]
 r143: [26..29]
 r148: [26..29] [2..9]
 r149: [6..7]
 r150: [26..27]

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12 13
EBB 14
  ----------------------------------
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=151, assigning class NO_REGS to save r151
  192: pc=L149
    Add reg<-save before:
  200: r98:DI=r151:DI

  131: NOTE_INSN_BASIC_BLOCK 14
    Add save<-reg after:
  199: r151:DI=r98:DI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 15
EBB 16
  ----------------------------------
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=152, assigning class NO_REGS to save r152
  148: ax:SI=call [`Update64.part.1'] argc:0x20
      REG_DEAD r8:DI
      REG_DEAD cx:DI
      REG_DEAD dx:DI
      REG_UNUSED ax:SI
      REG_CALL_DECL `Update64.part.1'
      REG_EH_REGION 0
    Add reg<-save after:
  202: r98:DI=r152:DI

  143: NOTE_INSN_BASIC_BLOCK 16
    Add save<-reg after:
  201: r152:DI=r98:DI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 17
EBB 18

********** Pseudo live ranges #2: **********

  BB 18
   Insn 163: point = 0
   Insn 162: point = 0
  BB 17
   Insn 155: point = 2
   Insn 154: point = 3
   Insn 153: point = 3
   Insn 152: point = 4
  BB 14
   Insn 192: point = 6
   Insn 200: point = 6
	Hard reg 38 is preferable by r151 with profit 2
   Insn 136: point = 8
   Insn 135: point = 8
   Insn 134: point = 8
   Insn 133: point = 9
   Insn 199: point = 10
	Hard reg 38 is preferable by r151 with profit 4
  BB 16
   Insn 202: point = 13
	Hard reg 38 is preferable by r152 with profit 3
   Insn 148: point = 15
   Insn 147: point = 15
   Insn 146: point = 15
   Insn 145: point = 16
   Insn 201: point = 17
	Hard reg 38 is preferable by r152 with profit 6
  BB 15
   Insn 142: point = 20
   Insn 141: point = 20
  BB 13
   Insn 130: point = 21
   Insn 129: point = 21
  BB 12
   Insn 127: point = 22
   Insn 126: point = 22
   Insn 125: point = 23
   Insn 124: point = 23
   Insn 123: point = 23
   Insn 122: point = 23
  BB 6
   Insn 188: point = 24
   Insn 54: point = 24
   Insn 53: point = 25
   Insn 52: point = 26
   Insn 197: point = 28
	Hard reg 40 is preferable by r149 with profit 15
   Insn 195: point = 30
   Insn 51: point = 31
   Insn 47: point = 32
   Insn 46: point = 33
   Insn 45: point = 34
   Insn 44: point = 34
  BB 4
   Insn 186: point = 35
   Insn 28: point = 35
   Insn 27: point = 36
   Insn 26: point = 37
   Insn 25: point = 38
   Insn 24: point = 39
   Insn 23: point = 40
   Insn 22: point = 41
   Insn 21: point = 42
  BB 5
   Insn 41: point = 44
   Insn 40: point = 45
   Insn 39: point = 46
   Insn 38: point = 47
   Insn 37: point = 48
   Insn 36: point = 49
   Insn 35: point = 50
   Insn 34: point = 51
  BB 3
   Insn 18: point = 53
   Insn 17: point = 53
  BB 11
   Insn 119: point = 54
   Insn 118: point = 54
   Insn 117: point = 54
   Insn 116: point = 54
   Insn 115: point = 54
   Insn 198: point = 56
	Hard reg 40 is preferable by r150 with profit 5
   Insn 194: point = 58
   Insn 114: point = 59
   Insn 110: point = 60
   Insn 109: point = 61
   Insn 108: point = 62
   Insn 107: point = 62
  BB 9
   Insn 190: point = 63
   Insn 83: point = 63
   Insn 82: point = 64
   Insn 81: point = 65
   Insn 80: point = 66
   Insn 79: point = 67
   Insn 78: point = 68
   Insn 77: point = 69
   Insn 76: point = 70
   Insn 75: point = 71
   Insn 74: point = 72
   Insn 73: point = 73
   Insn 72: point = 74
   Insn 71: point = 75
   Insn 70: point = 76
   Insn 69: point = 77
   Insn 68: point = 78
  BB 10
   Insn 104: point = 80
   Insn 103: point = 81
   Insn 102: point = 82
   Insn 101: point = 83
   Insn 100: point = 84
   Insn 99: point = 85
   Insn 98: point = 86
   Insn 97: point = 87
   Insn 96: point = 88
   Insn 95: point = 89
   Insn 94: point = 90
   Insn 93: point = 91
   Insn 92: point = 92
   Insn 91: point = 93
   Insn 90: point = 94
   Insn 89: point = 95
  BB 8
   Insn 65: point = 97
   Insn 64: point = 97
  BB 7
   Insn 62: point = 98
   Insn 61: point = 98
   Insn 7: point = 99
   Insn 59: point = 100
  BB 2
   Insn 15: point = 102
   Insn 14: point = 102
   Insn 12: point = 103
   Insn 5: point = 104
   Insn 4: point = 105
   Insn 3: point = 106
   Insn 2: point = 107
 r87: [98..99] [0..2]
 r95: [22..107]
 r96: [15..106] [8..12]
 r97: [16..105] [9..12]
 r98: [18..104] [11..13] [4..6]
 r99: [102..103]
 r102: [41..42]
 r103: [39..40]
 r104: [37..38]
 r105: [35..36]
 r107: [50..51]
 r108: [48..49]
 r109: [46..47]
 r110: [44..45]
 r112: [29..32]
 r115: [27..30]
 r116: [26..31]
 r117: [24..25]
 r118: [98..100]
 r121: [77..78]
 r122: [75..76]
 r123: [73..74]
 r124: [71..72]
 r125: [69..70]
 r126: [67..68]
 r127: [65..66]
 r128: [63..64]
 r130: [94..95]
 r131: [92..93]
 r132: [90..91]
 r133: [88..89]
 r134: [86..87]
 r135: [84..85]
 r136: [82..83]
 r137: [80..81]
 r139: [57..60]
 r142: [55..58]
 r143: [54..59]
 r148: [54..61] [3..33]
 r149: [26..28]
 r150: [54..56]
 r151: [7..10]
 r152: [14..17]
Compressing live ranges: from 108 to 72 - 66%
Ranges after the compression:
 r87: [68..69] [0..1]
 r95: [10..71]
 r96: [4..71]
 r97: [4..71]
 r98: [10..71] [6..7] [2..3]
 r99: [70..71]
 r102: [22..23]
 r103: [20..21]
 r104: [18..19]
 r105: [16..17]
 r107: [30..31]
 r108: [28..29]
 r109: [26..27]
 r110: [24..25]
 r112: [14..15]
 r115: [12..15]
 r116: [12..15]
 r117: [10..11]
 r118: [68..69]
 r121: [50..51]
 r122: [48..49]
 r123: [46..47]
 r124: [44..45]
 r125: [42..43]
 r126: [40..41]
 r127: [38..39]
 r128: [36..37]
 r130: [66..67]
 r131: [64..65]
 r132: [62..63]
 r133: [60..61]
 r134: [58..59]
 r135: [56..57]
 r136: [54..55]
 r137: [52..53]
 r139: [34..35]
 r142: [32..35]
 r143: [32..35]
 r148: [32..35] [2..15]
 r149: [12..13]
 r150: [32..33]
 r151: [4..5]
 r152: [8..9]

********** Assignment #1: **********

	 Assigning to 149 (cl=DIREG, orig=114, freq=30, tfirst=149, tfreq=30)...
	   Assign 5 to reload r149 (freq=30)
	 Assigning to 150 (cl=DIREG, orig=141, freq=10, tfirst=150, tfreq=10)...
	   Assign 5 to reload r150 (freq=10)

********** Undoing inheritance #1: **********

	     Keep split r151 (orig=r98)
	     Keep split r152 (orig=r98)
Split 2 out of 2 (100.00%)

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 201:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 199:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 25 count 19 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 25 count 19 (    1)

Cands:

BB 2:
  register live in: 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  changed regs: 95 96 97 98 99
  dead regs: 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9] 99

BB 3:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  changed regs:
  dead regs: 17 [flags]

BB 4:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  changed regs: 102 103 104 105
  dead regs: 20 [frame] 102 103 104 105

BB 5:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  changed regs: 107 108 109 110
  dead regs: 20 [frame] 107 108 109 110

BB 6:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98 148
  changed regs: 112 115 116 117 148 149
  dead regs: 20 [frame] 112 115 117

BB 7:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 95 96 97 98
  changed regs: 87 118
  dead regs: 17 [flags] 118

BB 8:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  changed regs:
  dead regs: 17 [flags]

BB 9:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  changed regs: 121 122 123 124 125 126 127 128
  dead regs: 20 [frame] 121 122 123 124 125 126 127 128

BB 10:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  changed regs: 130 131 132 133 134 135 136 137
  dead regs: 20 [frame] 130 131 132 133 134 135 136 137

BB 11:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98 148
  changed regs: 139 142 143 148 150
  dead regs: 20 [frame] 139 142

BB 12:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98 148
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
  changed regs:
  dead regs: 17 [flags] 20 [frame] 95

BB 13:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
  changed regs:
  dead regs: 17 [flags]

BB 14:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 148
  changed regs: 0 [ax] 1 [dx] 2 [cx] 37 [r8] 98 151
  dead regs: 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 97 98 151

BB 15:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
  changed regs:
  dead regs: 17 [flags]

BB 16:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 148
  changed regs: 0 [ax] 1 [dx] 2 [cx] 37 [r8] 98 152
  dead regs: 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 97 98 152

BB 17:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 148
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
  changed regs: 0 [ax] 1 [dx] 2 [cx] 87
  dead regs: 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 148

BB 18:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 0 [ax]
  dead regs: 87
  Slot 0 regnos (width = 8):	 152	 151
Changing spilled pseudos to memory in insn #199
Changing spilled pseudos to memory in insn #200
Changing spilled pseudos to memory in insn #201
Changing spilled pseudos to memory in insn #202
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=464, prev_offset=448)
Can eliminate 16 to 6 (offset=336, prev_offset=0)
Can eliminate 20 to 7 (offset=432, prev_offset=416)
Can eliminate 20 to 6 (offset=304, prev_offset=0)

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 119:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 118:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 117:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 116:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 109:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 108:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 107:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 104:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 102:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 100:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 98:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 96:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 94:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 92:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 90:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 83:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 81:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 79:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 77:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 75:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 73:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 71:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 69:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =m  (1) v {sse2_storedquv16qi}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 46:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 41:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 201:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 199:  (0) m  (1) re {*movdi_internal}
New elimination table:
Can eliminate 16 to 7 (offset=464, prev_offset=464)
Can eliminate 16 to 6 (offset=336, prev_offset=0)
Can eliminate 20 to 7 (offset=432, prev_offset=432)
Can eliminate 20 to 6 (offset=304, prev_offset=0)
changing reg in insn 155
changing reg in insn 7
changing reg in insn 162
changing reg in insn 2
changing reg in insn 59
changing reg in insn 12
changing reg in insn 126
changing reg in insn 122
changing reg in insn 64
changing reg in insn 17
changing reg in insn 3
changing reg in insn 146
changing reg in insn 134
changing reg in insn 4
changing reg in insn 145
changing reg in insn 141
changing reg in insn 133
changing reg in insn 129
changing reg in insn 5
changing reg in insn 152
changing reg in insn 12
changing reg in insn 14
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 47
changing reg in insn 195
changing reg in insn 52
changing reg in insn 52
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 59
changing reg in insn 61
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 110
changing reg in insn 194
changing reg in insn 115
changing reg in insn 115
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 46
changing reg in insn 109
changing reg in insn 153
changing reg in insn 147
changing reg in insn 135
changing reg in insn 110
changing reg in insn 47
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 5.
deleting insn with uid = 133.
deleting insn with uid = 134.
deleting insn with uid = 145.
deleting insn with uid = 146.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 136.
verify found no changes in insn with uid = 148.
verify found no changes in insn with uid = 154.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 25 count 19 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 25 count 19 (    1)


Hash

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9] 39[r10] 40[r11]
;;  ref usage 	r0={33d,31u} r1={5d,3u} r2={12d,9u} r3={2d,5u} r5={4d,4u} r7={1d,64u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1e} r17={16d,7u} r18={3d} r19={3d} r20={5e} r21={5d,1u} r22={4d} r23={4d} r24={4d} r25={3d} r26={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d,4u} r38={6d,3u} r39={4d,6u} r40={5d,2u} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 398{253d,139u,6e} in 110{107 regular + 3 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 39 [r10]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 17 [flags] 39 [r10]
;; live  kill	 17 [flags]
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 6 2 (set (reg/v:SI 39 r10 [orig:95 hashbitlen ] [95])
        (reg:SI 2 cx [ hashbitlen ])) blake_ref.c:662 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [2 hashbitlen+0 S4 A64])
        (nil)))
(note 6 2 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 6 13 2 (parallel [
            (set (reg:SI 0 ax [orig:99 D.6062 ] [99])
                (plus:SI (reg/v:SI 39 r10 [orig:95 hashbitlen ] [95])
                    (const_int -224 [0xffffffffffffff20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 217 {*addsi_1}
     (nil))
(note 13 12 14 2 NOTE_INSN_DELETED)
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 0 ax [orig:99 D.6062 ] [99])
                (const_int -33 [0xffffffffffffffdf]))
            (const_int 0 [0]))) blake_ref.c:207 362 {*testsi_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) blake_ref.c:207 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 57)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 3, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 39 r10 [orig:95 hashbitlen ] [95])
            (const_int 224 [0xe0]))) blake_ref.c:210 7 {*cmpsi_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) blake_ref.c:210 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 31)
;;  succ:       4 [28.0%]  (FALLTHRU)
;;              5 [72.0%] 
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 4, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [28.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax]
;; live  kill	
(note 19 18 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 19 22 4 (set (reg:DI 0 ax [orig:102 MEM[(char * {ref-all})&IV224] ] [102])
        (mem/u/c:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>) [0 MEM[(char * {ref-all})&IV224]+0 S8 A256])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>) [0 MEM[(char * {ref-all})&IV224]+0 S8 A256])
        (nil)))
(insn 22 21 23 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 MEM[(char * {ref-all})&state + 16B]+0 S8 A128])
        (reg:DI 0 ax [orig:102 MEM[(char * {ref-all})&IV224] ] [102])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 0 ax [orig:103 MEM[(char * {ref-all})&IV224]+8 ] [103])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV224]+8 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV224]+8 S8 A64])
        (nil)))
(insn 24 23 25 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [0 MEM[(char * {ref-all})&state + 16B]+8 S8 A64])
        (reg:DI 0 ax [orig:103 MEM[(char * {ref-all})&IV224]+8 ] [103])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 0 ax [orig:104 MEM[(char * {ref-all})&IV224]+16 ] [104])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV224]+16 S8 A128])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV224]+16 S8 A128])
        (nil)))
(insn 26 25 27 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 MEM[(char * {ref-all})&state + 16B]+16 S8 A128])
        (reg:DI 0 ax [orig:104 MEM[(char * {ref-all})&IV224]+16 ] [104])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 0 ax [orig:105 MEM[(char * {ref-all})&IV224]+24 ] [105])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV224]+24 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV224]+24 S8 A64])
        (nil)))
(insn 28 27 186 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 88 [0x58])) [0 MEM[(char * {ref-all})&state + 16B]+24 S8 A64])
        (reg:DI 0 ax [orig:105 MEM[(char * {ref-all})&IV224]+24 ] [105])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(jump_insn 186 28 187 4 (set (pc)
        (label_ref 42)) 654 {jump}
     (nil)
 -> 42)
;;  succ:       6 [100.0%] 
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

(barrier 187 186 31)
;; basic block 5, loop depth 0, count 0, freq 111, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [72.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 31 187 32 5 197 "" [1 uses])
(note 32 31 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 32 35 5 (set (reg:DI 0 ax [orig:107 MEM[(char * {ref-all})&IV256] ] [107])
        (mem/u/c:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>) [0 MEM[(char * {ref-all})&IV256]+0 S8 A256])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>) [0 MEM[(char * {ref-all})&IV256]+0 S8 A256])
        (nil)))
(insn 35 34 36 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 MEM[(char * {ref-all})&state + 16B]+0 S8 A128])
        (reg:DI 0 ax [orig:107 MEM[(char * {ref-all})&IV256] ] [107])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:DI 0 ax [orig:108 MEM[(char * {ref-all})&IV256]+8 ] [108])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV256]+8 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV256]+8 S8 A64])
        (nil)))
(insn 37 36 38 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [0 MEM[(char * {ref-all})&state + 16B]+8 S8 A64])
        (reg:DI 0 ax [orig:108 MEM[(char * {ref-all})&IV256]+8 ] [108])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 0 ax [orig:109 MEM[(char * {ref-all})&IV256]+16 ] [109])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV256]+16 S8 A128])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV256]+16 S8 A128])
        (nil)))
(insn 39 38 40 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 MEM[(char * {ref-all})&state + 16B]+16 S8 A128])
        (reg:DI 0 ax [orig:109 MEM[(char * {ref-all})&IV256]+16 ] [109])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:DI 0 ax [orig:110 MEM[(char * {ref-all})&IV256]+24 ] [110])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV256]+24 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV256]+24 S8 A64])
        (nil)))
(insn 41 40 42 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 88 [0x58])) [0 MEM[(char * {ref-all})&state + 16B]+24 S8 A64])
        (reg:DI 0 ax [orig:110 MEM[(char * {ref-all})&IV256]+24 ] [110])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 6, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 17 [flags] 21 [xmm0] 40 [r11]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 21 [xmm0] 40 [r11]
;; live  kill	 17 [flags]
(code_label 42 41 43 6 198 "" [1 uses])
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [2 state.t32+0 S4 A128])
        (const_int 0 [0])) blake_ref.c:215 90 {*movsi_internal}
     (nil))
(insn 45 44 46 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 100 [0x64])) [2 state.t32+4 S4 A32])
        (const_int 0 [0])) blake_ref.c:216 90 {*movsi_internal}
     (nil))
(insn 46 45 47 6 (parallel [
            (set (reg/f:DI 3 bx [148])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -384 [0xfffffffffffffe80]))
        (nil)))
(insn 47 46 51 6 (parallel [
            (set (reg/f:DI 40 r11 [112])
                (plus:DI (reg/f:DI 3 bx [148])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 51 47 195 6 (set (reg:DI 2 cx [116])
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))
(insn 195 51 197 6 (set (reg:DI 0 ax [115])
        (const_int 0 [0])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn 197 195 52 6 (set (reg/f:DI 5 di [orig:114 D.6063 ] [114])
        (reg/f:DI 40 r11 [112])) 89 {*movdi_internal}
     (nil))
(insn 52 197 53 6 (parallel [
            (set (reg:DI 2 cx [116])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [orig:114 D.6063 ] [114])
                (plus:DI (ashift:DI (reg:DI 2 cx [116])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [orig:114 D.6063 ] [114])))
            (set (mem/c:BLK (reg/f:DI 5 di [orig:114 D.6063 ] [114]) [0 MEM[(void *)&state + 56B]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 0 ax [115]))
            (use (reg:DI 2 cx [116]))
        ]) 933 {*rep_stosdi_rex64}
     (nil))
(insn 53 52 54 6 (set (reg:V4SI 21 xmm0 [117])
        (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])) blake_ref.c:221 1194 {*movv4si_internal}
     (expr_list:REG_EQUIV (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])
        (nil)))
(insn 54 53 188 6 (set (mem/c:V16QI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [2 MEM[(unsigned int *)&state + 120B]+0 S16 A64])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [117])
            ] UNSPEC_STOREU)) blake_ref.c:221 1312 {sse2_storedquv16qi}
     (nil))
(jump_insn 188 54 189 6 (set (pc)
        (label_ref 120)) 654 {jump}
     (nil)
 -> 120)
;;  succ:       12 [100.0%] 
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

(barrier 189 188 57)
;; basic block 7, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 57 189 58 7 196 "" [1 uses])
(note 58 57 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 7 (parallel [
            (set (reg:SI 2 cx [orig:118 D.6062 ] [118])
                (plus:SI (reg/v:SI 39 r10 [orig:95 hashbitlen ] [95])
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 217 {*addsi_1}
     (nil))
(note 60 59 7 7 NOTE_INSN_DELETED)
(insn 7 60 61 7 (set (reg:SI 0 ax [orig:87 D.6061 ] [87])
        (const_int 2 [0x2])) blake_ref.c:249 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))
(insn 61 7 62 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 2 cx [orig:118 D.6062 ] [118])
                (const_int -129 [0xffffffffffffff7f]))
            (const_int 0 [0]))) blake_ref.c:227 362 {*testsi_1}
     (nil))
(jump_insn 62 61 63 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 156)
            (pc))) blake_ref.c:227 612 {*jcc_1}
     (int_list:REG_BR_PROB 6700 (nil))
 -> 156)
;;  succ:       8 [33.0%]  (FALLTHRU)
;;              18 [67.0%] 
;; lr  out 	 0 [ax] 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 8, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [33.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 63 62 64 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 39 r10 [orig:95 hashbitlen ] [95])
            (const_int 384 [0x180]))) blake_ref.c:230 7 {*cmpsi_1}
     (nil))
(jump_insn 65 64 66 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) blake_ref.c:230 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 86)
;;  succ:       9 [28.0%]  (FALLTHRU)
;;              10 [72.0%] 
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 9, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [28.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax]
;; live  kill	
(note 66 65 68 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 68 66 69 9 (set (reg:DI 0 ax [orig:121 MEM[(char * {ref-all})&IV384] ] [121])
        (mem/u/c:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>) [0 MEM[(char * {ref-all})&IV384]+0 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>) [0 MEM[(char * {ref-all})&IV384]+0 S8 A256])
        (nil)))
(insn 69 68 70 9 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [0 MEM[(char * {ref-all})&state + 136B]+0 S8 A64])
        (reg:DI 0 ax [orig:121 MEM[(char * {ref-all})&IV384] ] [121])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 70 69 71 9 (set (reg:DI 0 ax [orig:122 MEM[(char * {ref-all})&IV384]+8 ] [122])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV384]+8 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV384]+8 S8 A64])
        (nil)))
(insn 71 70 72 9 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [0 MEM[(char * {ref-all})&state + 136B]+8 S8 A64])
        (reg:DI 0 ax [orig:122 MEM[(char * {ref-all})&IV384]+8 ] [122])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (reg:DI 0 ax [orig:123 MEM[(char * {ref-all})&IV384]+16 ] [123])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV384]+16 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV384]+16 S8 A128])
        (nil)))
(insn 73 72 74 9 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 200 [0xc8])) [0 MEM[(char * {ref-all})&state + 136B]+16 S8 A64])
        (reg:DI 0 ax [orig:123 MEM[(char * {ref-all})&IV384]+16 ] [123])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 74 73 75 9 (set (reg:DI 0 ax [orig:124 MEM[(char * {ref-all})&IV384]+24 ] [124])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV384]+24 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV384]+24 S8 A64])
        (nil)))
(insn 75 74 76 9 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [0 MEM[(char * {ref-all})&state + 136B]+24 S8 A64])
        (reg:DI 0 ax [orig:124 MEM[(char * {ref-all})&IV384]+24 ] [124])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 76 75 77 9 (set (reg:DI 0 ax [orig:125 MEM[(char * {ref-all})&IV384]+32 ] [125])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 32 [0x20]))) [0 MEM[(char * {ref-all})&IV384]+32 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 32 [0x20]))) [0 MEM[(char * {ref-all})&IV384]+32 S8 A256])
        (nil)))
(insn 77 76 78 9 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 216 [0xd8])) [0 MEM[(char * {ref-all})&state + 136B]+32 S8 A64])
        (reg:DI 0 ax [orig:125 MEM[(char * {ref-all})&IV384]+32 ] [125])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 78 77 79 9 (set (reg:DI 0 ax [orig:126 MEM[(char * {ref-all})&IV384]+40 ] [126])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 40 [0x28]))) [0 MEM[(char * {ref-all})&IV384]+40 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 40 [0x28]))) [0 MEM[(char * {ref-all})&IV384]+40 S8 A64])
        (nil)))
(insn 79 78 80 9 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [0 MEM[(char * {ref-all})&state + 136B]+40 S8 A64])
        (reg:DI 0 ax [orig:126 MEM[(char * {ref-all})&IV384]+40 ] [126])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 80 79 81 9 (set (reg:DI 0 ax [orig:127 MEM[(char * {ref-all})&IV384]+48 ] [127])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 48 [0x30]))) [0 MEM[(char * {ref-all})&IV384]+48 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 48 [0x30]))) [0 MEM[(char * {ref-all})&IV384]+48 S8 A128])
        (nil)))
(insn 81 80 82 9 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 232 [0xe8])) [0 MEM[(char * {ref-all})&state + 136B]+48 S8 A64])
        (reg:DI 0 ax [orig:127 MEM[(char * {ref-all})&IV384]+48 ] [127])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 82 81 83 9 (set (reg:DI 0 ax [orig:128 MEM[(char * {ref-all})&IV384]+56 ] [128])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 56 [0x38]))) [0 MEM[(char * {ref-all})&IV384]+56 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 56 [0x38]))) [0 MEM[(char * {ref-all})&IV384]+56 S8 A64])
        (nil)))
(insn 83 82 190 9 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [0 MEM[(char * {ref-all})&state + 136B]+56 S8 A64])
        (reg:DI 0 ax [orig:128 MEM[(char * {ref-all})&IV384]+56 ] [128])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(jump_insn 190 83 191 9 (set (pc)
        (label_ref 105)) 654 {jump}
     (nil)
 -> 105)
;;  succ:       11 [100.0%] 
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

(barrier 191 190 86)
;; basic block 10, loop depth 0, count 0, freq 37, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [72.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 86 191 87 10 201 "" [1 uses])
(note 87 86 89 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 89 87 90 10 (set (reg:DI 0 ax [orig:130 MEM[(char * {ref-all})&IV512] ] [130])
        (mem/u/c:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>) [0 MEM[(char * {ref-all})&IV512]+0 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>) [0 MEM[(char * {ref-all})&IV512]+0 S8 A256])
        (nil)))
(insn 90 89 91 10 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [0 MEM[(char * {ref-all})&state + 136B]+0 S8 A64])
        (reg:DI 0 ax [orig:130 MEM[(char * {ref-all})&IV512] ] [130])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 91 90 92 10 (set (reg:DI 0 ax [orig:131 MEM[(char * {ref-all})&IV512]+8 ] [131])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV512]+8 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV512]+8 S8 A64])
        (nil)))
(insn 92 91 93 10 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [0 MEM[(char * {ref-all})&state + 136B]+8 S8 A64])
        (reg:DI 0 ax [orig:131 MEM[(char * {ref-all})&IV512]+8 ] [131])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 93 92 94 10 (set (reg:DI 0 ax [orig:132 MEM[(char * {ref-all})&IV512]+16 ] [132])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV512]+16 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV512]+16 S8 A128])
        (nil)))
(insn 94 93 95 10 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 200 [0xc8])) [0 MEM[(char * {ref-all})&state + 136B]+16 S8 A64])
        (reg:DI 0 ax [orig:132 MEM[(char * {ref-all})&IV512]+16 ] [132])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 95 94 96 10 (set (reg:DI 0 ax [orig:133 MEM[(char * {ref-all})&IV512]+24 ] [133])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV512]+24 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV512]+24 S8 A64])
        (nil)))
(insn 96 95 97 10 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [0 MEM[(char * {ref-all})&state + 136B]+24 S8 A64])
        (reg:DI 0 ax [orig:133 MEM[(char * {ref-all})&IV512]+24 ] [133])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 97 96 98 10 (set (reg:DI 0 ax [orig:134 MEM[(char * {ref-all})&IV512]+32 ] [134])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 32 [0x20]))) [0 MEM[(char * {ref-all})&IV512]+32 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 32 [0x20]))) [0 MEM[(char * {ref-all})&IV512]+32 S8 A256])
        (nil)))
(insn 98 97 99 10 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 216 [0xd8])) [0 MEM[(char * {ref-all})&state + 136B]+32 S8 A64])
        (reg:DI 0 ax [orig:134 MEM[(char * {ref-all})&IV512]+32 ] [134])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 99 98 100 10 (set (reg:DI 0 ax [orig:135 MEM[(char * {ref-all})&IV512]+40 ] [135])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 40 [0x28]))) [0 MEM[(char * {ref-all})&IV512]+40 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 40 [0x28]))) [0 MEM[(char * {ref-all})&IV512]+40 S8 A64])
        (nil)))
(insn 100 99 101 10 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [0 MEM[(char * {ref-all})&state + 136B]+40 S8 A64])
        (reg:DI 0 ax [orig:135 MEM[(char * {ref-all})&IV512]+40 ] [135])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 101 100 102 10 (set (reg:DI 0 ax [orig:136 MEM[(char * {ref-all})&IV512]+48 ] [136])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 48 [0x30]))) [0 MEM[(char * {ref-all})&IV512]+48 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 48 [0x30]))) [0 MEM[(char * {ref-all})&IV512]+48 S8 A128])
        (nil)))
(insn 102 101 103 10 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 232 [0xe8])) [0 MEM[(char * {ref-all})&state + 136B]+48 S8 A64])
        (reg:DI 0 ax [orig:136 MEM[(char * {ref-all})&IV512]+48 ] [136])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 103 102 104 10 (set (reg:DI 0 ax [orig:137 MEM[(char * {ref-all})&IV512]+56 ] [137])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 56 [0x38]))) [0 MEM[(char * {ref-all})&IV512]+56 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 56 [0x38]))) [0 MEM[(char * {ref-all})&IV512]+56 S8 A64])
        (nil)))
(insn 104 103 105 10 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [0 MEM[(char * {ref-all})&state + 136B]+56 S8 A64])
        (reg:DI 0 ax [orig:137 MEM[(char * {ref-all})&IV512]+56 ] [137])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 11, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 17 [flags] 40 [r11]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 40 [r11]
;; live  kill	 17 [flags]
(code_label 105 104 106 11 202 "" [1 uses])
(note 106 105 107 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 11 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 248 [0xf8])) [3 state.t64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:235 89 {*movdi_internal}
     (nil))
(insn 108 107 109 11 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 256 [0x100])) [3 state.t64+8 S8 A128])
        (const_int 0 [0])) blake_ref.c:236 89 {*movdi_internal}
     (nil))
(insn 109 108 110 11 (parallel [
            (set (reg/f:DI 3 bx [148])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -384 [0xfffffffffffffe80]))
        (nil)))
(insn 110 109 114 11 (parallel [
            (set (reg/f:DI 40 r11 [139])
                (plus:DI (reg/f:DI 3 bx [148])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 114 110 194 11 (set (reg:DI 2 cx [143])
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))
(insn 194 114 198 11 (set (reg:DI 0 ax [142])
        (const_int 0 [0])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn 198 194 115 11 (set (reg/f:DI 5 di [orig:141 D.6064 ] [141])
        (reg/f:DI 40 r11 [139])) 89 {*movdi_internal}
     (nil))
(insn 115 198 116 11 (parallel [
            (set (reg:DI 2 cx [143])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [orig:141 D.6064 ] [141])
                (plus:DI (ashift:DI (reg:DI 2 cx [143])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [orig:141 D.6064 ] [141])))
            (set (mem/c:BLK (reg/f:DI 5 di [orig:141 D.6064 ] [141]) [0 MEM[(void *)&state + 216B]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 0 ax [142]))
            (use (reg:DI 2 cx [143]))
        ]) 933 {*rep_stosdi_rex64}
     (nil))
(insn 116 115 117 11 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 392 [0x188])) [3 state.salt64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:241 89 {*movdi_internal}
     (nil))
(insn 117 116 118 11 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 400 [0x190])) [3 state.salt64+8 S8 A128])
        (const_int 0 [0])) blake_ref.c:242 89 {*movdi_internal}
     (nil))
(insn 118 117 119 11 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 408 [0x198])) [3 state.salt64+16 S8 A64])
        (const_int 0 [0])) blake_ref.c:243 89 {*movdi_internal}
     (nil))
(insn 119 118 120 11 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 416 [0x1a0])) [3 state.salt64+24 S8 A128])
        (const_int 0 [0])) blake_ref.c:244 89 {*movdi_internal}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 12, loop depth 0, count 0, freq 205, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 120 119 121 12 199 "" [1 uses])
(note 121 120 122 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 12 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [2 state.hashbitlen+0 S4 A128])
        (reg/v:SI 39 r10 [orig:95 hashbitlen ] [95])) blake_ref.c:251 90 {*movsi_internal}
     (nil))
(insn 123 122 124 12 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 52 [0x34])) [2 state.datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:252 90 {*movsi_internal}
     (nil))
(insn 124 123 125 12 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [2 state.init+0 S4 A64])
        (const_int 1 [0x1])) blake_ref.c:253 90 {*movsi_internal}
     (nil))
(insn 125 124 126 12 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 60 [0x3c])) [2 state.nullt+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:254 90 {*movsi_internal}
     (nil))
(insn 126 125 127 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 39 r10 [orig:95 hashbitlen ] [95])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn 127 126 128 12 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 139)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 139)
;;  succ:       13 [50.0%]  (FALLTHRU)
;;              15 [50.0%] 
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]

;; basic block 13, loop depth 0, count 0, freq 60, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [50.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 17 [flags]
;; live  kill	
(note 128 127 129 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 37 r8 [orig:97 databitlen ] [97])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 130 129 131 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 149)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 7929 (nil))
 -> 149)
;;  succ:       17 [79.3%] 
;;              14 [20.7%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]

;; basic block 14, loop depth 0, count 0, freq 26, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [20.7%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 2 [cx] 38 [r9]
;; live  kill	
(note 131 130 199 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 199 131 135 14 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-392 S8 A64])
        (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])) 89 {*movdi_internal}
     (nil))
(insn 135 199 136 14 (set (reg:DI 2 cx)
        (reg/f:DI 3 bx [148])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -384 [0xfffffffffffffe80]))
        (nil)))
(call_insn 136 135 200 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 200 136 192 14 (set (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-392 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 192 200 193 14 (set (pc)
        (label_ref 149)) 654 {jump}
     (nil)
 -> 149)
;;  succ:       17 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp] 38 [r9]
;; live  out 	 3 [bx] 7 [sp] 38 [r9]

(barrier 193 192 139)
;; basic block 15, loop depth 0, count 0, freq 60, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [50.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 139 193 140 15 203 "" [1 uses])
(note 140 139 141 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 37 r8 [orig:97 databitlen ] [97])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 142 141 143 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 149)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 149)
;;  succ:       17 [71.0%] 
;;              16 [29.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]

;; basic block 16, loop depth 0, count 0, freq 34, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [29.0%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 2 [cx] 38 [r9]
;; live  kill	
(note 143 142 201 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 201 143 147 16 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-392 S8 A64])
        (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])) 89 {*movdi_internal}
     (nil))
(insn 147 201 148 16 (set (reg:DI 2 cx)
        (reg/f:DI 3 bx [148])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -384 [0xfffffffffffffe80]))
        (nil)))
(call_insn 148 147 202 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 202 148 149 16 (set (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-392 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       17 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 38 [r9]
;; live  out 	 3 [bx] 7 [sp] 38 [r9]

;; basic block 17, loop depth 0, count 0, freq 120, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [79.3%] 
;;              15 [71.0%] 
;;              16 [100.0%]  (FALLTHRU)
;;              14 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 38 [r9]
;; lr  use 	 3 [bx] 7 [sp] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 38 [r9]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 149 202 150 17 204 "" [3 uses])
(note 150 149 152 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 152 150 153 17 (set (reg:DI 1 dx)
        (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])) blake_ref.c:673 89 {*movdi_internal}
     (nil))
(insn 153 152 154 17 (set (reg:DI 2 cx)
        (reg/f:DI 3 bx [148])) blake_ref.c:673 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -384 [0xfffffffffffffe80]))
        (nil)))
(call_insn 154 153 155 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>) [0 Final S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:673 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 155 154 156 17 (set (reg:SI 0 ax [orig:87 D.6061 ] [87])
        (reg:SI 0 ax)) blake_ref.c:673 90 {*movsi_internal}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 18, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 17, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [67.0%] 
;;              17 [100.0%]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 156 155 157 18 200 "" [1 uses])
(note 157 156 162 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 162 157 163 18 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:87 D.6061 ] [87])) blake_ref.c:677 90 {*movsi_internal}
     (nil))
(insn 163 162 196 18 (use (reg/i:SI 0 ax)) blake_ref.c:677 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 196 163 0 NOTE_INSN_DELETED)
