
;; Function compress32 (compress32, funcdef_no=11, decl_uid=3211, cgraph_uid=11, symbol_order=19)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)


compress32

Dataflow summary:
def_info->table_size = 506, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={80d,100u} r1={21d,41u,31e} r2={14d,48u} r3={27d,34u} r4={4d,19u} r5={13d,18u} r6={15d,17u} r7={19d,243u} r16={1e} r17={134d,2u} r21={15d,14u} r22={16d,15u} r23={7d,6u} r24={7d,7u} r25={8d,8u} r26={8d,8u} r37={17d,22u} r38={13d,18u} r39={19d,23u} r40={16d,21u} r41={14d,17u} r42={18d,30u} r43={10d,15u} r44={31d,45u} 
;;    total ref usage 1329{526d,771u,32e} in 496{496 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 8 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 2 [cx] 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 0 [ax] 2 [cx] 7 [sp]
;; lr  def 	 2 [cx] 3 [bx] 6 [bp] 17 [flags] 37 [r8] 44 [r15]
;; live  in  	 0 [ax] 2 [cx] 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 2 [cx] 3 [bx] 6 [bp] 37 [r8] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]

( 3 8 )->[4]->( 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 2 [cx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 4 [si] 5 [di] 37 [r8] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 37 [r8] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]

( 6 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]

( 5 4 )->[6]->( 5 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]

( 6 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; lr  use 	 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 2 )->[8]->( 4 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 3 [bx] 6 [bp]
;; live  in  	 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 2 [cx] 3 [bx] 6 [bp]
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 127 to worklist
  Adding insn 523 to worklist
  Adding insn 740 to worklist
  Adding insn 519 to worklist
  Adding insn 741 to worklist
  Adding insn 515 to worklist
  Adding insn 742 to worklist
  Adding insn 743 to worklist
  Adding insn 507 to worklist
  Adding insn 505 to worklist
  Adding insn 503 to worklist
  Adding insn 501 to worklist
  Adding insn 499 to worklist
  Adding insn 497 to worklist
  Adding insn 495 to worklist
  Adding insn 493 to worklist
  Adding insn 109 to worklist
  Adding insn 744 to worklist
  Adding insn 106 to worklist
  Adding insn 745 to worklist
  Adding insn 103 to worklist
  Adding insn 746 to worklist
  Adding insn 100 to worklist
  Adding insn 747 to worklist
  Adding insn 97 to worklist
  Adding insn 748 to worklist
  Adding insn 94 to worklist
  Adding insn 749 to worklist
  Adding insn 91 to worklist
  Adding insn 750 to worklist
  Adding insn 88 to worklist
  Adding insn 751 to worklist
  Adding insn 85 to worklist
  Adding insn 752 to worklist
  Adding insn 82 to worklist
  Adding insn 753 to worklist
  Adding insn 79 to worklist
  Adding insn 754 to worklist
  Adding insn 76 to worklist
  Adding insn 755 to worklist
  Adding insn 73 to worklist
  Adding insn 756 to worklist
  Adding insn 70 to worklist
  Adding insn 67 to worklist
  Adding insn 64 to worklist
  Adding insn 28 to worklist
  Adding insn 841 to worklist
  Adding insn 839 to worklist
  Adding insn 838 to worklist
  Adding insn 837 to worklist
  Adding insn 836 to worklist
  Adding insn 835 to worklist
  Adding insn 834 to worklist
  Adding insn 833 to worklist
  Adding insn 832 to worklist
  Adding insn 534 to worklist
  Adding insn 865 to worklist
  Adding insn 436 to worklist
  Adding insn 435 to worklist
  Adding insn 428 to worklist
  Adding insn 426 to worklist
  Adding insn 59 to worklist
  Adding insn 57 to worklist
  Adding insn 55 to worklist
  Adding insn 53 to worklist
  Adding insn 52 to worklist
  Adding insn 51 to worklist
  Adding insn 50 to worklist
  Adding insn 49 to worklist
  Adding insn 48 to worklist
  Adding insn 47 to worklist
  Adding insn 46 to worklist
  Adding insn 45 to worklist
  Adding insn 44 to worklist
  Adding insn 43 to worklist
  Adding insn 42 to worklist
  Adding insn 41 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 671 to worklist
  Adding insn 670 to worklist
  Adding insn 669 to worklist
  Adding insn 668 to worklist
  Adding insn 667 to worklist
  Adding insn 666 to worklist
  Adding insn 665 to worklist
  Adding insn 664 to worklist
  Adding insn 663 to worklist
  Adding insn 662 to worklist
  Adding insn 661 to worklist
  Adding insn 660 to worklist
  Adding insn 659 to worklist
  Adding insn 658 to worklist
  Adding insn 657 to worklist
  Adding insn 656 to worklist
  Adding insn 655 to worklist
  Adding insn 654 to worklist
  Adding insn 653 to worklist
  Adding insn 652 to worklist
  Adding insn 651 to worklist
  Adding insn 650 to worklist
  Adding insn 649 to worklist
  Adding insn 648 to worklist
  Adding insn 779 to worklist
  Adding insn 647 to worklist
  Adding insn 646 to worklist
  Adding insn 645 to worklist
  Adding insn 270 to worklist
  Adding insn 269 to worklist
  Adding insn 759 to worklist
  Adding insn 760 to worklist
  Adding insn 626 to worklist
  Adding insn 762 to worklist
  Adding insn 615 to worklist
  Adding insn 763 to worklist
  Adding insn 764 to worklist
  Adding insn 765 to worklist
  Adding insn 766 to worklist
  Adding insn 767 to worklist
  Adding insn 770 to worklist
  Adding insn 546 to worklist
  Adding insn 773 to worklist
  Adding insn 854 to worklist
  Adding insn 844 to worklist
  Adding insn 413 to worklist
  Adding insn 407 to worklist
  Adding insn 728 to worklist
  Adding insn 726 to worklist
  Adding insn 719 to worklist
  Adding insn 717 to worklist
  Adding insn 712 to worklist
  Adding insn 390 to worklist
  Adding insn 690 to worklist
  Adding insn 675 to worklist
  Adding insn 868 to worklist
  Adding insn 31 to worklist
Finished finding needed instructions:
processing block 5 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
  Adding insn 816 to worklist
  Adding insn 368 to worklist
  Adding insn 365 to worklist
  Adding insn 363 to worklist
  Adding insn 362 to worklist
  Adding insn 359 to worklist
  Adding insn 358 to worklist
  Adding insn 356 to worklist
  Adding insn 353 to worklist
  Adding insn 351 to worklist
  Adding insn 350 to worklist
  Adding insn 347 to worklist
  Adding insn 346 to worklist
  Adding insn 344 to worklist
  Adding insn 341 to worklist
  Adding insn 339 to worklist
  Adding insn 338 to worklist
  Adding insn 335 to worklist
  Adding insn 334 to worklist
  Adding insn 332 to worklist
  Adding insn 329 to worklist
  Adding insn 327 to worklist
  Adding insn 326 to worklist
  Adding insn 323 to worklist
  Adding insn 322 to worklist
  Adding insn 320 to worklist
  Adding insn 317 to worklist
  Adding insn 315 to worklist
  Adding insn 314 to worklist
  Adding insn 311 to worklist
  Adding insn 310 to worklist
  Adding insn 308 to worklist
  Adding insn 305 to worklist
  Adding insn 303 to worklist
  Adding insn 302 to worklist
  Adding insn 299 to worklist
  Adding insn 298 to worklist
  Adding insn 296 to worklist
  Adding insn 293 to worklist
  Adding insn 291 to worklist
  Adding insn 290 to worklist
  Adding insn 287 to worklist
  Adding insn 286 to worklist
  Adding insn 284 to worklist
  Adding insn 281 to worklist
  Adding insn 279 to worklist
  Adding insn 278 to worklist
  Adding insn 277 to worklist
  Adding insn 275 to worklist
  Adding insn 274 to worklist
processing block 7 lr out =  0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 853 to worklist
  Adding insn 852 to worklist
  Adding insn 851 to worklist
  Adding insn 850 to worklist
  Adding insn 849 to worklist
  Adding insn 848 to worklist
  Adding insn 847 to worklist
  Adding insn 846 to worklist
  Adding insn 845 to worklist
  Adding insn 862 to worklist
  Adding insn 406 to worklist
  Adding insn 405 to worklist
  Adding insn 404 to worklist
  Adding insn 738 to worklist
  Adding insn 736 to worklist
  Adding insn 403 to worklist
  Adding insn 734 to worklist
  Adding insn 732 to worklist
  Adding insn 402 to worklist
  Adding insn 398 to worklist
  Adding insn 397 to worklist
  Adding insn 396 to worklist
  Adding insn 730 to worklist
  Adding insn 729 to worklist
  Adding insn 395 to worklist
  Adding insn 724 to worklist
  Adding insn 722 to worklist
  Adding insn 394 to worklist
  Adding insn 393 to worklist
  Adding insn 778 to worklist
  Adding insn 720 to worklist
  Adding insn 392 to worklist
  Adding insn 714 to worklist
  Adding insn 715 to worklist
  Adding insn 710 to worklist
  Adding insn 389 to worklist
  Adding insn 388 to worklist
  Adding insn 387 to worklist
  Adding insn 709 to worklist
  Adding insn 707 to worklist
  Adding insn 386 to worklist
  Adding insn 705 to worklist
  Adding insn 703 to worklist
  Adding insn 385 to worklist
  Adding insn 384 to worklist
  Adding insn 383 to worklist
  Adding insn 701 to worklist
  Adding insn 699 to worklist
  Adding insn 382 to worklist
  Adding insn 697 to worklist
  Adding insn 695 to worklist
  Adding insn 381 to worklist
  Adding insn 380 to worklist
  Adding insn 379 to worklist
  Adding insn 692 to worklist
  Adding insn 693 to worklist
  Adding insn 378 to worklist
  Adding insn 688 to worklist
  Adding insn 686 to worklist
  Adding insn 684 to worklist
  Adding insn 377 to worklist
  Adding insn 683 to worklist
  Adding insn 376 to worklist
  Adding insn 681 to worklist
  Adding insn 679 to worklist
  Adding insn 375 to worklist
  Adding insn 677 to worklist
  Adding insn 676 to worklist
processing block 6 lr out =  1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
  Adding insn 268 to worklist
  Adding insn 266 to worklist
  Adding insn 265 to worklist
  Adding insn 264 to worklist
  Adding insn 263 to worklist
  Adding insn 262 to worklist
  Adding insn 831 to worklist
  Adding insn 260 to worklist
  Adding insn 259 to worklist
  Adding insn 636 to worklist
  Adding insn 258 to worklist
  Adding insn 257 to worklist
  Adding insn 634 to worklist
  Adding insn 256 to worklist
  Adding insn 633 to worklist
  Adding insn 255 to worklist
  Adding insn 254 to worklist
  Adding insn 631 to worklist
  Adding insn 253 to worklist
  Adding insn 761 to worklist
  Adding insn 252 to worklist
  Adding insn 251 to worklist
  Adding insn 627 to worklist
  Adding insn 250 to worklist
  Adding insn 249 to worklist
  Adding insn 248 to worklist
  Adding insn 247 to worklist
  Adding insn 246 to worklist
  Adding insn 830 to worklist
  Adding insn 244 to worklist
  Adding insn 243 to worklist
  Adding insn 620 to worklist
  Adding insn 242 to worklist
  Adding insn 241 to worklist
  Adding insn 240 to worklist
  Adding insn 619 to worklist
  Adding insn 239 to worklist
  Adding insn 238 to worklist
  Adding insn 237 to worklist
  Adding insn 236 to worklist
  Adding insn 235 to worklist
  Adding insn 616 to worklist
  Adding insn 234 to worklist
  Adding insn 233 to worklist
  Adding insn 829 to worklist
  Adding insn 611 to worklist
  Adding insn 231 to worklist
  Adding insn 230 to worklist
  Adding insn 828 to worklist
  Adding insn 228 to worklist
  Adding insn 227 to worklist
  Adding insn 605 to worklist
  Adding insn 226 to worklist
  Adding insn 225 to worklist
  Adding insn 224 to worklist
  Adding insn 223 to worklist
  Adding insn 222 to worklist
  Adding insn 221 to worklist
  Adding insn 220 to worklist
  Adding insn 219 to worklist
  Adding insn 602 to worklist
  Adding insn 601 to worklist
  Adding insn 218 to worklist
  Adding insn 217 to worklist
  Adding insn 216 to worklist
  Adding insn 215 to worklist
  Adding insn 214 to worklist
  Adding insn 827 to worklist
  Adding insn 212 to worklist
  Adding insn 211 to worklist
  Adding insn 589 to worklist
  Adding insn 210 to worklist
  Adding insn 209 to worklist
  Adding insn 208 to worklist
  Adding insn 207 to worklist
  Adding insn 206 to worklist
  Adding insn 205 to worklist
  Adding insn 204 to worklist
  Adding insn 203 to worklist
  Adding insn 586 to worklist
  Adding insn 202 to worklist
  Adding insn 201 to worklist
  Adding insn 200 to worklist
  Adding insn 199 to worklist
  Adding insn 198 to worklist
  Adding insn 197 to worklist
  Adding insn 196 to worklist
  Adding insn 195 to worklist
  Adding insn 583 to worklist
  Adding insn 194 to worklist
  Adding insn 193 to worklist
  Adding insn 581 to worklist
  Adding insn 192 to worklist
  Adding insn 579 to worklist
  Adding insn 191 to worklist
  Adding insn 190 to worklist
  Adding insn 577 to worklist
  Adding insn 189 to worklist
  Adding insn 188 to worklist
  Adding insn 768 to worklist
  Adding insn 187 to worklist
  Adding insn 572 to worklist
  Adding insn 186 to worklist
  Adding insn 185 to worklist
  Adding insn 570 to worklist
  Adding insn 184 to worklist
  Adding insn 183 to worklist
  Adding insn 182 to worklist
  Adding insn 181 to worklist
  Adding insn 180 to worklist
  Adding insn 568 to worklist
  Adding insn 179 to worklist
  Adding insn 567 to worklist
  Adding insn 178 to worklist
  Adding insn 177 to worklist
  Adding insn 564 to worklist
  Adding insn 176 to worklist
  Adding insn 563 to worklist
  Adding insn 175 to worklist
  Adding insn 562 to worklist
  Adding insn 174 to worklist
  Adding insn 173 to worklist
  Adding insn 172 to worklist
  Adding insn 769 to worklist
  Adding insn 171 to worklist
  Adding insn 556 to worklist
  Adding insn 170 to worklist
  Adding insn 169 to worklist
  Adding insn 826 to worklist
  Adding insn 167 to worklist
  Adding insn 166 to worklist
  Adding insn 165 to worklist
  Adding insn 164 to worklist
  Adding insn 163 to worklist
  Adding insn 162 to worklist
  Adding insn 552 to worklist
  Adding insn 161 to worklist
  Adding insn 160 to worklist
  Adding insn 549 to worklist
  Adding insn 159 to worklist
  Adding insn 158 to worklist
  Adding insn 157 to worklist
  Adding insn 156 to worklist
  Adding insn 155 to worklist
  Adding insn 154 to worklist
  Adding insn 153 to worklist
  Adding insn 152 to worklist
  Adding insn 151 to worklist
  Adding insn 150 to worklist
  Adding insn 149 to worklist
  Adding insn 825 to worklist
  Adding insn 147 to worklist
  Adding insn 146 to worklist
  Adding insn 145 to worklist
  Adding insn 144 to worklist
  Adding insn 143 to worklist
  Adding insn 142 to worklist
  Adding insn 541 to worklist
  Adding insn 141 to worklist
  Adding insn 824 to worklist
  Adding insn 139 to worklist
processing block 4 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
  Adding insn 438 to worklist
  Adding insn 437 to worklist
  Adding insn 58 to worklist
  Adding insn 56 to worklist
  Adding insn 54 to worklist
  Adding insn 538 to worklist
  Adding insn 537 to worklist
  Adding insn 40 to worklist
  Adding insn 39 to worklist
  Adding insn 38 to worklist
  Adding insn 37 to worklist
  Adding insn 536 to worklist
  Adding insn 535 to worklist
  Adding insn 137 to worklist
processing block 8 lr out =  2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 34 to worklist
  Adding insn 33 to worklist
  Adding insn 32 to worklist
processing block 3 lr out =  2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 134 to worklist
  Adding insn 133 to worklist
  Adding insn 531 to worklist
  Adding insn 132 to worklist
  Adding insn 529 to worklist
  Adding insn 131 to worklist
  Adding insn 130 to worklist
  Adding insn 526 to worklist
  Adding insn 129 to worklist
processing block 2 lr out =  0 [ax] 2 [cx] 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 864 to worklist
  Adding insn 863 to worklist
  Adding insn 524 to worklist
  Adding insn 125 to worklist
  Adding insn 124 to worklist
  Adding insn 123 to worklist
  Adding insn 122 to worklist
  Adding insn 121 to worklist
  Adding insn 120 to worklist
  Adding insn 119 to worklist
  Adding insn 510 to worklist
  Adding insn 118 to worklist
  Adding insn 117 to worklist
  Adding insn 116 to worklist
  Adding insn 115 to worklist
  Adding insn 114 to worklist
  Adding insn 113 to worklist
  Adding insn 112 to worklist
  Adding insn 111 to worklist
  Adding insn 110 to worklist
  Adding insn 108 to worklist
  Adding insn 107 to worklist
  Adding insn 105 to worklist
  Adding insn 104 to worklist
  Adding insn 102 to worklist
  Adding insn 101 to worklist
  Adding insn 99 to worklist
  Adding insn 98 to worklist
  Adding insn 96 to worklist
  Adding insn 95 to worklist
  Adding insn 93 to worklist
  Adding insn 92 to worklist
  Adding insn 90 to worklist
  Adding insn 89 to worklist
  Adding insn 87 to worklist
  Adding insn 86 to worklist
  Adding insn 84 to worklist
  Adding insn 83 to worklist
  Adding insn 81 to worklist
  Adding insn 80 to worklist
  Adding insn 78 to worklist
  Adding insn 77 to worklist
  Adding insn 75 to worklist
  Adding insn 74 to worklist
  Adding insn 72 to worklist
  Adding insn 71 to worklist
  Adding insn 757 to worklist
  Adding insn 69 to worklist
  Adding insn 68 to worklist
  Adding insn 66 to worklist
  Adding insn 448 to worklist
  Adding insn 65 to worklist
  Adding insn 63 to worklist
  Adding insn 62 to worklist
  Adding insn 840 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 11 (  1.2)
;;   ======================================================
;;   -- basic block 2 from 832 to 127 -- after reload
;;   ======================================================

;;	  0--> b  0: i 832 [--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 833 [--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 834 [--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 835 [--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 836 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 837 [--sp]=di                               :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 838 [--sp]=si                               :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 839 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 840 {sp=sp-0x118;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  6--> b  0: i 841 unspec/v[sp] 4                          :athlon-vector,athlon-ieu,athlon-ieu
;;	  7--> b  0: i  71 ax=[dx+0xc]                             :athlon-direct,athlon-load
;;	  7--> b  0: i  80 bx=[dx+0x18]                            :athlon-direct,athlon-load
;;	  8--> b  0: i  65 bp=[dx+0x4]                             :athlon-direct,athlon-load
;;	  8--> b  0: i  62 r11=[dx]                                :athlon-direct,athlon-load
;;	  9--> b  0: i  68 r9=[dx+0x8]                             :athlon-direct,athlon-load
;;	  9--> b  0: i  28 [sp+0x160]=cx                           :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i  72 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 10--> b  0: i  81 bx=bswap(bx)                            :athlon-direct,athlon-ieu
;;	 11--> b  0: i 756 [sp+0x64]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 11--> b  0: i  73 [sp+0xdc]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 11--> b  0: i 448 di=bp                                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i  74 ax=[dx+0x10]                            :athlon-direct,athlon-load
;;	 12--> b  0: i 753 [sp+0x70]=bx                            :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i  69 r9=bswap(r9)                            :athlon-direct,athlon-ieu
;;	 13--> b  0: i  82 [sp+0xe8]=bx                            :athlon-direct,athlon-agu,athlon-store
;;	 13--> b  0: i  83 bx=[dx+0x1c]                            :athlon-direct,athlon-load
;;	 13--> b  0: i  63 r11=bswap(r11)                          :athlon-direct,athlon-ieu
;;	 14--> b  0: i  66 di=bswap(di)                            :athlon-direct,athlon-ieu
;;	 14--> b  0: i  70 [sp+0xd8]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i  64 [sp+0xd0]=r11                           :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i  75 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 15--> b  0: i  67 [sp+0xd4]=di                            :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i 757 r10=r9                                  :athlon-direct,athlon-ieu
;;	 16--> b  0: i 755 [sp+0x68]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  76 [sp+0xe0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  84 bx=bswap(bx)                            :athlon-direct,athlon-ieu
;;	 17--> b  0: i  77 ax=[dx+0x14]                            :athlon-direct,athlon-load
;;	 17--> b  0: i 752 [sp+0x74]=bx                            :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i  85 [sp+0xec]=bx                            :athlon-direct,athlon-agu,athlon-store
;;	 20--> b  0: i  78 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 21--> b  0: i 754 [sp+0x6c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 21--> b  0: i  79 [sp+0xe4]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 22--> b  0: i  86 ax=[dx+0x20]                            :athlon-direct,athlon-load
;;	 25--> b  0: i  87 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 26--> b  0: i 751 [sp+0x78]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 26--> b  0: i  88 [sp+0xf0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 27--> b  0: i  89 ax=[dx+0x24]                            :athlon-direct,athlon-load
;;	 30--> b  0: i  90 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 31--> b  0: i 750 [sp+0x7c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 31--> b  0: i  91 [sp+0xf4]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 32--> b  0: i  92 ax=[dx+0x28]                            :athlon-direct,athlon-load
;;	 35--> b  0: i  93 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 36--> b  0: i 749 [sp+0x80]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 36--> b  0: i  94 [sp+0xf8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 37--> b  0: i  95 ax=[dx+0x2c]                            :athlon-direct,athlon-load
;;	 40--> b  0: i  96 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 41--> b  0: i 748 [sp+0x84]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 41--> b  0: i  97 [sp+0xfc]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 42--> b  0: i 110 ax=[cx+0x10]                            :athlon-direct,athlon-load
;;	 42--> b  0: i  98 r13=[dx+0x30]                           :athlon-direct,athlon-load
;;	 43--> b  0: i 104 r15=[dx+0x38]                           :athlon-direct,athlon-load
;;	 45--> b  0: i 493 [sp+0xa0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 45--> b  0: i 111 ax=[cx+0x14]                            :athlon-direct,athlon-load
;;	 45--> b  0: i  99 r13=bswap(r13)                          :athlon-direct,athlon-ieu
;;	 46--> b  0: i 105 r15=bswap(r15)                          :athlon-direct,athlon-ieu
;;	 46--> b  0: i 747 [sp+0x88]=r13                           :athlon-direct,athlon-agu,athlon-store
;;	 46--> b  0: i 100 [sp+0x100]=r13                          :athlon-direct,athlon-agu,athlon-store
;;	 47--> b  0: i 745 [sp+0x90]=r15                           :athlon-direct,athlon-agu,athlon-store
;;	 47--> b  0: i 101 r13=[dx+0x34]                           :athlon-direct,athlon-load
;;	 48--> b  0: i 495 [sp+0xa4]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 48--> b  0: i 112 ax=[cx+0x18]                            :athlon-direct,athlon-load
;;	 49--> b  0: i 106 [sp+0x108]=r15                          :athlon-direct,athlon-agu,athlon-store
;;	 49--> b  0: i 107 r15=[dx+0x3c]                           :athlon-direct,athlon-load
;;	 50--> b  0: i 102 r13=bswap(r13)                          :athlon-direct,athlon-ieu
;;	 51--> b  0: i 497 [sp+0xa8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 51--> b  0: i 113 ax=[cx+0x1c]                            :athlon-direct,athlon-load
;;	 52--> b  0: i 108 r15=bswap(r15)                          :athlon-direct,athlon-ieu
;;	 52--> b  0: i 746 [sp+0x8c]=r13                           :athlon-direct,athlon-agu,athlon-store
;;	 52--> b  0: i 103 [sp+0x104]=r13                          :athlon-direct,athlon-agu,athlon-store
;;	 53--> b  0: i 744 [sp+0x94]=r15                           :athlon-direct,athlon-agu,athlon-store
;;	 53--> b  0: i 109 [sp+0x10c]=r15                          :athlon-direct,athlon-agu,athlon-store
;;	 54--> b  0: i 499 [sp+0xac]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 54--> b  0: i 114 ax=[cx+0x20]                            :athlon-direct,athlon-load
;;	 57--> b  0: i 501 [sp+0xb0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 57--> b  0: i 115 ax=[cx+0x24]                            :athlon-direct,athlon-load
;;	 60--> b  0: i 503 [sp+0xb4]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 60--> b  0: i 116 ax=[cx+0x28]                            :athlon-direct,athlon-load
;;	 63--> b  0: i 505 [sp+0xb8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 63--> b  0: i 117 ax=[cx+0x2c]                            :athlon-direct,athlon-load
;;	 66--> b  0: i 507 [sp+0xbc]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 66--> b  0: i 118 ax=[cx+0x78]                            :athlon-direct,athlon-load
;;	 69--> b  0: i 743 [sp+0xc0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 69--> b  0: i 510 r9=ax                                   :athlon-direct,athlon-ieu
;;	 69--> b  0: i 120 ax=[cx+0x7c]                            :athlon-direct,athlon-load
;;	 70--> b  0: i 119 {r9=r9^0x243f6a88;clobber flags;}       :athlon-direct,athlon-ieu
;;	 72--> b  0: i 742 [sp+0xc4]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 72--> b  0: i 121 {ax=ax^0xffffffff85a308d3;clobber flags;}:athlon-direct,athlon-ieu
;;	 72--> b  0: i 863 dx=[cx+0xc]                             :athlon-direct,athlon-load
;;	 73--> b  0: i 515 [sp+0x24]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 73--> b  0: i 122 ax=[cx+0x80]                            :athlon-direct,athlon-load
;;	 76--> b  0: i 741 [sp+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 76--> b  0: i 123 {ax=ax^0x13198a2e;clobber flags;}       :athlon-direct,athlon-ieu
;;	 77--> b  0: i 519 [sp+0x20]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 77--> b  0: i 124 ax=[cx+0x84]                            :athlon-direct,athlon-load
;;	 80--> b  0: i 740 [sp+0xcc]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 80--> b  0: i 125 {ax=ax^0x3707344;clobber flags;}        :athlon-direct,athlon-ieu
;;	 80--> b  0: i 864 flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	 81--> b  0: i 523 [sp+0x18]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 81--> b  0: i 524 ax=cx                                   :athlon-direct,athlon-ieu
;;	 81--> b  0: i 127 pc={(flags!=0)?L418:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 81
;;   new head = 832
;;   new tail = 127

;;   ======================================================
;;   -- basic block 3 from 129 to 534 -- after reload
;;   ======================================================

;;	  0--> b  0: i 129 r8=[cx+0x30]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 132 r15=[ax+0x34]                           :athlon-direct,athlon-load
;;	  3--> b  0: i 526 bp=r8                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 531 bx=r15                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 131 {r8=r8^0x299f31d0;clobber flags;}       :athlon-direct,athlon-ieu
;;	  4--> b  0: i 134 {r15=r15^0xffffffffec4e6c89;clobber flags;}:athlon-direct,athlon-ieu
;;	  4--> b  0: i 130 {bp=bp^0xffffffffa4093822;clobber flags;}:athlon-direct,athlon-ieu
;;	  4--> b  0: i 529 cx=r8                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 133 {bx=bx^0x82efa98;clobber flags;}        :athlon-direct,athlon-ieu
;;	  5--> b  0: i 534 [sp+0x1c]=r15                           :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 5
;;   new head = 129
;;   new tail = 534

;;   ======================================================
;;   -- basic block 4 from 137 to 865 -- after reload
;;   ======================================================

;;	  0--> b  0: i 535 ax=[sp+0xa0]                            :athlon-direct,athlon-load
;;	  0--> b  0: i  37 r13=[sp+0xa8]                           :athlon-direct,athlon-load
;;	  0--> b  0: i  54 dx=0xffffffffa4093822                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  38 r15=[sp+0xac]                           :athlon-direct,athlon-load
;;	  1--> b  0: i 436 [sp+0x60]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 137 si=`sigma'                              :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i 437 dx=di                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  39 r8=[sp+0xb0]                            :athlon-direct,athlon-load
;;	  2--> b  0: i  40 r14=[sp+0xb4]                           :athlon-direct,athlon-load
;;	  3--> b  0: i  35 [sp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 536 ax=[sp+0xa4]                            :athlon-direct,athlon-load
;;	  3--> b  0: i  58 r12=0x243f6a88                          :athlon-direct,athlon-ieu
;;	  4--> b  0: i  43 [sp+0x9c]=0xe                           :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  44 [sp+0x58]=0x3f84d5b5                    :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 438 di=cx                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  45 [sp+0x54]=0xffffffffb5470917            :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  46 [sp+0x50]=0xffffffffc0ac29b7            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  36 [sp+0x4]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 537 ax=[sp+0xb8]                            :athlon-direct,athlon-load
;;	  7--> b  0: i  47 [sp+0x4c]=0xffffffffc97c50dd            :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i  48 [sp+0x48]=0xffffffffbe5466cf            :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i  49 [sp+0x44]=0x34e90c6c                    :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i  50 [sp+0x40]=0x452821e6                    :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  41 [sp+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i 538 ax=[sp+0xbc]                            :athlon-direct,athlon-load
;;	 10--> b  0: i  51 [sp+0x3c]=0x38d01377                    :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i  52 [sp+0x38]=0x82efa98                     :athlon-direct,athlon-agu,athlon-store
;;	 11--> b  0: i  53 [sp+0x34]=0xffffffffec4e6c89            :athlon-direct,athlon-agu,athlon-store
;;	 11--> b  0: i  55 [sp+0x30]=0x299f31d0                    :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i  42 [sp+0xc]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i  56 ax=0x13198a2e                           :athlon-direct,athlon-ieu
;;	 12--> b  0: i  57 [sp+0x2c]=0x3707344                     :athlon-direct,athlon-agu,athlon-store
;;	 13--> b  0: i  59 [sp+0x28]=0xffffffff85a308d3            :athlon-direct,athlon-agu,athlon-store
;;	 13--> b  0: i 426 [sp+0x10]=r13                           :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i 428 [sp+0x14]=r15                           :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i 435 [sp+0x5c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i 865 pc=L369                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 14
;;   new head = 535
;;   new tail = 865

;;   ======================================================
;;   -- basic block 5 from 274 to 816 -- after reload
;;   ======================================================

;;	  0--> b  0: i 290 r13=zxn([si+0x3])                       :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 277 cx=`c32'                                :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 274 ax=zxn([si])                            :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i 278 dx=zxn([si+0x1])                        :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 291 r15=[r13*0x4+cx]                        :athlon-direct,athlon-load
;;	  4--> b  0: i 275 r11=[ax*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	  5--> b  0: i 284 r12=[ax*0x4+cx]                         :athlon-direct,athlon-load
;;	  5--> b  0: i 286 ax=zxn([si+0x2])                        :athlon-direct,athlon-load,athlon-ieu
;;	  6--> b  0: i 279 r10=[dx*0x4+cx]                         :athlon-direct,athlon-load
;;	  6--> b  0: i 281 dx=[dx*0x4+sp+0xd0]                     :athlon-direct,athlon-load
;;	  7--> b  0: i 646 [sp+0x2c]=r15                           :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 293 r15=[r13*0x4+sp+0xd0]                   :athlon-direct,athlon-load
;;	  8--> b  0: i 298 r13=zxn([si+0x4])                       :athlon-direct,athlon-load,athlon-ieu
;;	  9--> b  0: i 645 [sp+0x28]=r10                           :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i 287 r10=[ax*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	 10--> b  0: i 647 [sp+0x64]=r15                           :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i 296 ax=[ax*0x4+cx]                          :athlon-direct,athlon-load
;;	 12--> b  0: i 299 r15=[r13*0x4+sp+0xd0]                   :athlon-direct,athlon-load
;;	 13--> b  0: i 779 [sp+0x5c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i 648 [sp+0x68]=r15                           :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i 302 r15=zxn([si+0x5])                       :athlon-direct,athlon-load,athlon-ieu
;;	 19--> b  0: i 303 ax=[r15*0x4+cx]                         :athlon-direct,athlon-load
;;	 22--> b  0: i 649 [sp+0x30]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 22--> b  0: i 305 ax=[r15*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	 23--> b  0: i 314 r15=zxn([si+0x7])                       :athlon-direct,athlon-load,athlon-ieu
;;	 25--> b  0: i 650 [sp+0x6c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 25--> b  0: i 308 ax=[r13*0x4+cx]                         :athlon-direct,athlon-load
;;	 26--> b  0: i 310 r13=zxn([si+0x6])                       :athlon-direct,athlon-load,athlon-ieu
;;	 28--> b  0: i 651 [sp+0x60]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 30--> b  0: i 311 ax=[r13*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	 33--> b  0: i 652 [sp+0x70]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 33--> b  0: i 315 ax=[r15*0x4+cx]                         :athlon-direct,athlon-load
;;	 36--> b  0: i 653 [sp+0x34]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 36--> b  0: i 317 ax=[r15*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	 37--> b  0: i 326 r15=zxn([si+0x9])                       :athlon-direct,athlon-load,athlon-ieu
;;	 39--> b  0: i 654 [sp+0x74]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 39--> b  0: i 320 ax=[r13*0x4+cx]                         :athlon-direct,athlon-load
;;	 40--> b  0: i 322 r13=zxn([si+0x8])                       :athlon-direct,athlon-load,athlon-ieu
;;	 42--> b  0: i 655 [sp+0x38]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 44--> b  0: i 323 ax=[r13*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	 47--> b  0: i 656 [sp+0x78]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 47--> b  0: i 327 ax=[r15*0x4+cx]                         :athlon-direct,athlon-load
;;	 50--> b  0: i 657 [sp+0x3c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 50--> b  0: i 329 ax=[r15*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	 51--> b  0: i 338 r15=zxn([si+0xb])                       :athlon-direct,athlon-load,athlon-ieu
;;	 53--> b  0: i 658 [sp+0x7c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 53--> b  0: i 332 ax=[r13*0x4+cx]                         :athlon-direct,athlon-load
;;	 54--> b  0: i 334 r13=zxn([si+0xa])                       :athlon-direct,athlon-load,athlon-ieu
;;	 56--> b  0: i 659 [sp+0x40]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 58--> b  0: i 335 ax=[r13*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	 61--> b  0: i 660 [sp+0x80]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 61--> b  0: i 339 ax=[r15*0x4+cx]                         :athlon-direct,athlon-load
;;	 64--> b  0: i 661 [sp+0x44]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 64--> b  0: i 341 ax=[r15*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	 65--> b  0: i 350 r15=zxn([si+0xd])                       :athlon-direct,athlon-load,athlon-ieu
;;	 67--> b  0: i 662 [sp+0x84]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 67--> b  0: i 344 ax=[r13*0x4+cx]                         :athlon-direct,athlon-load
;;	 68--> b  0: i 346 r13=zxn([si+0xc])                       :athlon-direct,athlon-load,athlon-ieu
;;	 70--> b  0: i 663 [sp+0x48]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 72--> b  0: i 347 ax=[r13*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	 75--> b  0: i 664 [sp+0x88]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 75--> b  0: i 351 ax=[r15*0x4+cx]                         :athlon-direct,athlon-load
;;	 78--> b  0: i 665 [sp+0x4c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 78--> b  0: i 353 ax=[r15*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	 81--> b  0: i 666 [sp+0x8c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 81--> b  0: i 356 ax=[r13*0x4+cx]                         :athlon-direct,athlon-load
;;	 82--> b  0: i 358 r13=zxn([si+0xe])                       :athlon-direct,athlon-load,athlon-ieu
;;	 82--> b  0: i 362 r15=zxn([si+0xf])                       :athlon-direct,athlon-load,athlon-ieu
;;	 84--> b  0: i 667 [sp+0x50]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 86--> b  0: i 359 ax=[r13*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	 89--> b  0: i 668 [sp+0x90]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 89--> b  0: i 363 ax=[r15*0x4+cx]                         :athlon-direct,athlon-load
;;	 92--> b  0: i 669 [sp+0x54]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 92--> b  0: i 365 ax=[r15*0x4+sp+0xd0]                    :athlon-direct,athlon-load
;;	 95--> b  0: i 670 [sp+0x94]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 95--> b  0: i 368 ax=[r13*0x4+cx]                         :athlon-direct,athlon-load
;;	 98--> b  0: i 671 [sp+0x58]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 98--> b  0: i 816 ax=[sp+0x5c]                            :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 98
;;   new head = 290
;;   new tail = 816

;;   ======================================================
;;   -- basic block 6 from 139 to 270 -- after reload
;;   ======================================================

;;	  0--> b  0: i 139 {r11=r11^[sp+0x28];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 155 {r10=r10^[sp+0x2c];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 147 {r12=r12^dx;clobber flags;}             :athlon-direct,athlon-ieu
;;	  1--> b  0: i 541 cx=bp                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 163 {ax=ax^[sp+0x64];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i 579 r13=[sp+0x18]                           :athlon-direct,athlon-load
;;	  4--> b  0: i 824 r15=r11+r8                              :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i 141 {r15=r15+[sp];clobber flags;}           :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 156 {r10=r10+r14;clobber flags;}            :athlon-direct,athlon-ieu
;;	  5--> b  0: i 157 {r10=r10+[sp+0x4];clobber flags;}       :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i 769 r11=[sp+0x8]                            :athlon-direct,athlon-load
;;	  8--> b  0: i 142 {cx=cx^r15;clobber flags;}              :athlon-direct,athlon-ieu
;;	  8--> b  0: i 825 dx=r12+r15                              :athlon-direct,athlon-agu,nothing
;;	  8--> b  0: i 549 r15=[sp+0x24]                           :athlon-direct,athlon-load
;;	  9--> b  0: i 158 {di=di^r10;clobber flags;}              :athlon-direct,athlon-ieu
;;	  9--> b  0: i 143 {cx=cx<-<0x10;clobber flags;}           :athlon-direct,athlon-ieu
;;	  9--> b  0: i 164 {ax=ax+r10;clobber flags;}              :athlon-direct,athlon-ieu
;;	 10--> b  0: i 159 {di=di<-<0x10;clobber flags;}           :athlon-direct,athlon-ieu
;;	 10--> b  0: i 144 {r9=r9+cx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 10--> b  0: i 556 r10=[sp+0x68]                           :athlon-direct,athlon-load
;;	 11--> b  0: i 160 {r15=r15+di;clobber flags;}             :athlon-direct,athlon-ieu
;;	 11--> b  0: i 171 {r10=r10^[sp+0x30];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	 11--> b  0: i 145 {r8=r8^r9;clobber flags;}               :athlon-direct,athlon-ieu
;;	 12--> b  0: i 161 {r14=r14^r15;clobber flags;}            :athlon-direct,athlon-ieu
;;	 12--> b  0: i 146 {r8=r8>->0xc;clobber flags;}            :athlon-direct,athlon-ieu
;;	 12--> b  0: i 577 r12=[sp+0x1c]                           :athlon-direct,athlon-load
;;	 13--> b  0: i 552 bp=r14                                  :athlon-direct,athlon-ieu
;;	 13--> b  0: i 149 {dx=dx+r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	 14--> b  0: i 162 {bp=bp>->0xc;clobber flags;}            :athlon-direct,athlon-ieu
;;	 14--> b  0: i 150 {cx=cx^dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 15--> b  0: i 165 {ax=ax+bp;clobber flags;}               :athlon-direct,athlon-ieu
;;	 15--> b  0: i 172 {r10=r10+r11;clobber flags;}            :athlon-direct,athlon-ieu
;;	 15--> b  0: i 173 {r10=r10+[sp+0x10];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	 16--> b  0: i 166 {di=di^ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	 16--> b  0: i 151 {cx=cx>->0x8;clobber flags;}            :athlon-direct,athlon-ieu
;;	 17--> b  0: i 167 {di=di>->0x8;clobber flags;}            :athlon-direct,athlon-ieu
;;	 17--> b  0: i 152 {r9=r9+cx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 18--> b  0: i 826 r14=r15+di                              :athlon-direct,athlon-agu,nothing
;;	 18--> b  0: i 153 {r8=r8^r9;clobber flags;}               :athlon-direct,athlon-ieu
;;	 18--> b  0: i 773 [sp+0x28]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i 154 {r8=r8>->0x7;clobber flags;}            :athlon-direct,athlon-ieu
;;	 19--> b  0: i 768 r15=[sp+0xc]                            :athlon-direct,athlon-load
;;	 20--> b  0: i 169 {bp=bp^r14;clobber flags;}              :athlon-direct,athlon-ieu
;;	 20--> b  0: i 546 [sp+0x98]=r8                            :athlon-direct,athlon-agu,athlon-store
;;	 20--> b  0: i 770 [sp+0x24]=r14                           :athlon-direct,athlon-agu,athlon-store
;;	 21--> b  0: i 170 {bp=bp>->0x7;clobber flags;}            :athlon-direct,athlon-ieu
;;	 21--> b  0: i 174 {bx=bx^r10;clobber flags;}              :athlon-direct,athlon-ieu
;;	 22--> b  0: i 562 r8=bx                                   :athlon-direct,athlon-ieu
;;	 22--> b  0: i 563 bx=[sp+0x20]                            :athlon-direct,athlon-load
;;	 23--> b  0: i 175 {r8=r8<-<0x10;clobber flags;}           :athlon-direct,athlon-ieu
;;	 25--> b  0: i 176 {bx=bx+r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	 26--> b  0: i 177 {r11=r11^bx;clobber flags;}             :athlon-direct,athlon-ieu
;;	 26--> b  0: i 564 r14=bx                                  :athlon-direct,athlon-ieu
;;	 26--> b  0: i 567 bx=[sp+0x6c]                            :athlon-direct,athlon-load
;;	 27--> b  0: i 179 {bx=bx^[sp+0x60];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 27--> b  0: i 178 {r11=r11>->0xc;clobber flags;}          :athlon-direct,athlon-ieu
;;	 31--> b  0: i 568 r9=bx                                   :athlon-direct,athlon-ieu
;;	 31--> b  0: i 570 bx=r11                                  :athlon-direct,athlon-ieu
;;	 32--> b  0: i 180 {r9=r9+r10;clobber flags;}              :athlon-direct,athlon-ieu
;;	 32--> b  0: i 572 r10=[sp+0x70]                           :athlon-direct,athlon-load
;;	 32--> b  0: i 187 {r10=r10^[sp+0x34];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	 33--> b  0: i 181 {r9=r9+r11;clobber flags;}              :athlon-direct,athlon-ieu
;;	 33--> b  0: i 581 r11=r15                                 :athlon-direct,athlon-ieu
;;	 34--> b  0: i 182 {r8=r8^r9;clobber flags;}               :athlon-direct,athlon-ieu
;;	 35--> b  0: i 183 {r8=r8>->0x8;clobber flags;}            :athlon-direct,athlon-ieu
;;	 36--> b  0: i 188 {r10=r10+r15;clobber flags;}            :athlon-direct,athlon-ieu
;;	 36--> b  0: i 189 {r10=r10+[sp+0x14];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	 36--> b  0: i 583 r15=[sp+0x74]                           :athlon-direct,athlon-load
;;	 37--> b  0: i 195 {r15=r15^[sp+0x38];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	 37--> b  0: i 184 {r14=r14+r8;clobber flags;}             :athlon-direct,athlon-ieu
;;	 38--> b  0: i 185 {bx=bx^r14;clobber flags;}              :athlon-direct,athlon-ieu
;;	 39--> b  0: i 186 {bx=bx>->0x7;clobber flags;}            :athlon-direct,athlon-ieu
;;	 40--> b  0: i 190 {r12=r12^r10;clobber flags;}            :athlon-direct,athlon-ieu
;;	 41--> b  0: i 191 {r12=r12<-<0x10;clobber flags;}         :athlon-direct,athlon-ieu
;;	 41--> b  0: i 196 {r10=r10+r15;clobber flags;}            :athlon-direct,athlon-ieu
;;	 41--> b  0: i 586 r15=[sp+0x78]                           :athlon-direct,athlon-load
;;	 42--> b  0: i 192 {r13=r13+r12;clobber flags;}            :athlon-direct,athlon-ieu
;;	 42--> b  0: i 203 {r15=r15^[sp+0x3c];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	 43--> b  0: i 193 {r11=r11^r13;clobber flags;}            :athlon-direct,athlon-ieu
;;	 44--> b  0: i 194 {r11=r11>->0xc;clobber flags;}          :athlon-direct,athlon-ieu
;;	 45--> b  0: i 197 {r10=r10+r11;clobber flags;}            :athlon-direct,athlon-ieu
;;	 46--> b  0: i 198 {r12=r12^r10;clobber flags;}            :athlon-direct,athlon-ieu
;;	 46--> b  0: i 204 {dx=dx+r15;clobber flags;}              :athlon-direct,athlon-ieu
;;	 46--> b  0: i 589 r15=[sp+0x7c]                           :athlon-direct,athlon-load
;;	 47--> b  0: i 199 {r12=r12>->0x8;clobber flags;}          :athlon-direct,athlon-ieu
;;	 47--> b  0: i 205 {dx=dx+bp;clobber flags;}               :athlon-direct,athlon-ieu
;;	 48--> b  0: i 200 {r13=r13+r12;clobber flags;}            :athlon-direct,athlon-ieu
;;	 49--> b  0: i 201 {r11=r11^r13;clobber flags;}            :athlon-direct,athlon-ieu
;;	 50--> b  0: i 202 {r11=r11>->0x7;clobber flags;}          :athlon-direct,athlon-ieu
;;	 50--> b  0: i 206 {r12=r12^dx;clobber flags;}             :athlon-direct,athlon-ieu
;;	 50--> b  0: i 211 {r15=r15^[sp+0x40];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	 51--> b  0: i 207 {r12=r12<-<0x10;clobber flags;}         :athlon-direct,athlon-ieu
;;	 52--> b  0: i 208 {r14=r14+r12;clobber flags;}            :athlon-direct,athlon-ieu
;;	 53--> b  0: i 209 {bp=bp^r14;clobber flags;}              :athlon-direct,athlon-ieu
;;	 54--> b  0: i 210 {bp=bp>->0xc;clobber flags;}            :athlon-direct,athlon-ieu
;;	 54--> b  0: i 212 {dx=dx+r15;clobber flags;}              :athlon-direct,athlon-ieu
;;	 55--> b  0: i 827 r15=dx+bp                               :athlon-direct,athlon-agu,nothing
;;	 55--> b  0: i 602 dx=[sp+0x80]                            :athlon-direct,athlon-load
;;	 57--> b  0: i 214 {r12=r12^r15;clobber flags;}            :athlon-direct,athlon-ieu
;;	 57--> b  0: i 767 [sp]=r15                                :athlon-direct,athlon-agu,athlon-store
;;	 58--> b  0: i 215 {r12=r12>->0x8;clobber flags;}          :athlon-direct,athlon-ieu
;;	 59--> b  0: i 216 {r14=r14+r12;clobber flags;}            :athlon-direct,athlon-ieu
;;	 59--> b  0: i 766 [sp+0x1c]=r12                           :athlon-direct,athlon-agu,athlon-store
;;	 60--> b  0: i 765 [sp+0x20]=r14                           :athlon-direct,athlon-agu,athlon-store
;;	 60--> b  0: i 219 {dx=dx^[sp+0x44];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 60--> b  0: i 217 {bp=bp^r14;clobber flags;}              :athlon-direct,athlon-ieu
;;	 61--> b  0: i 218 {bp=bp>->0x7;clobber flags;}            :athlon-direct,athlon-ieu
;;	 62--> b  0: i 601 r14=bp                                  :athlon-direct,athlon-ieu
;;	 64--> b  0: i 220 {ax=ax+dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 64--> b  0: i 605 dx=[sp+0x84]                            :athlon-direct,athlon-load
;;	 64--> b  0: i 227 {dx=dx^[sp+0x48];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 65--> b  0: i 221 {ax=ax+bx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 66--> b  0: i 222 {cx=cx^ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	 67--> b  0: i 223 {cx=cx<-<0x10;clobber flags;}           :athlon-direct,athlon-ieu
;;	 68--> b  0: i 224 {r13=r13+cx;clobber flags;}             :athlon-direct,athlon-ieu
;;	 68--> b  0: i 228 {ax=ax+dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 68--> b  0: i 620 dx=[sp+0x8c]                            :athlon-direct,athlon-load
;;	 69--> b  0: i 225 {bx=bx^r13;clobber flags;}              :athlon-direct,athlon-ieu
;;	 70--> b  0: i 226 {bx=bx>->0xc;clobber flags;}            :athlon-direct,athlon-ieu
;;	 71--> b  0: i 828 r15=ax+bx                               :athlon-direct,athlon-agu,nothing
;;	 71--> b  0: i 616 ax=[sp+0x88]                            :athlon-direct,athlon-load
;;	 71--> b  0: i 235 {ax=ax^[sp+0x4c];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 73--> b  0: i 230 {cx=cx^r15;clobber flags;}              :athlon-direct,athlon-ieu
;;	 73--> b  0: i 764 [sp+0x4]=r15                            :athlon-direct,athlon-agu,athlon-store
;;	 74--> b  0: i 231 {cx=cx>->0x8;clobber flags;}            :athlon-direct,athlon-ieu
;;	 75--> b  0: i 236 {ax=ax+r9;clobber flags;}               :athlon-direct,athlon-ieu
;;	 75--> b  0: i 619 r9=[sp+0x28]                            :athlon-direct,athlon-load
;;	 75--> b  0: i 611 bp=cx                                   :athlon-direct,athlon-ieu
;;	 76--> b  0: i 237 {ax=ax+r11;clobber flags;}              :athlon-direct,athlon-ieu
;;	 76--> b  0: i 829 cx=r13+cx                               :athlon-direct,athlon-agu,nothing
;;	 77--> b  0: i 238 {di=di^ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	 78--> b  0: i 239 {di=di<-<0x10;clobber flags;}           :athlon-direct,athlon-ieu
;;	 78--> b  0: i 233 {bx=bx^cx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 78--> b  0: i 763 [sp+0x18]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 79--> b  0: i 240 {r9=r9+di;clobber flags;}               :athlon-direct,athlon-ieu
;;	 79--> b  0: i 234 {bx=bx>->0x7;clobber flags;}            :athlon-direct,athlon-ieu
;;	 80--> b  0: i 241 {r11=r11^r9;clobber flags;}             :athlon-direct,athlon-ieu
;;	 80--> b  0: i 243 {dx=dx^[sp+0x50];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 80--> b  0: i 615 [sp+0x8]=bx                             :athlon-direct,athlon-agu,athlon-store
;;	 81--> b  0: i 242 {r11=r11>->0xc;clobber flags;}          :athlon-direct,athlon-ieu
;;	 81--> b  0: i 268 {si=si+0x10;clobber flags;}             :athlon-direct,athlon-ieu
;;	 84--> b  0: i 244 {ax=ax+dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 84--> b  0: i 761 dx=[sp+0x98]                            :athlon-direct,athlon-load
;;	 85--> b  0: i 830 bx=ax+r11                               :athlon-direct,athlon-agu,nothing
;;	 85--> b  0: i 627 ax=[sp+0x90]                            :athlon-direct,athlon-load
;;	 85--> b  0: i 251 {ax=ax^[sp+0x54];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 87--> b  0: i 246 {di=di^bx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 87--> b  0: i 762 [sp+0x10]=bx                            :athlon-direct,athlon-agu,athlon-store
;;	 87--> b  0: i 631 bx=r8                                   :athlon-direct,athlon-ieu
;;	 88--> b  0: i 634 r8=dx                                   :athlon-direct,athlon-ieu
;;	 88--> b  0: i 247 {di=di>->0x8;clobber flags;}            :athlon-direct,athlon-ieu
;;	 89--> b  0: i 252 {r10=r10+ax;clobber flags;}             :athlon-direct,athlon-ieu
;;	 89--> b  0: i 633 ax=[sp+0x24]                            :athlon-direct,athlon-load
;;	 89--> b  0: i 248 {r9=r9+di;clobber flags;}               :athlon-direct,athlon-ieu
;;	 90--> b  0: i 253 {r10=r10+dx;clobber flags;}             :athlon-direct,athlon-ieu
;;	 90--> b  0: i 636 dx=[sp+0x94]                            :athlon-direct,athlon-load
;;	 90--> b  0: i 259 {dx=dx^[sp+0x58];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 91--> b  0: i 254 {bx=bx^r10;clobber flags;}              :athlon-direct,athlon-ieu
;;	 91--> b  0: i 249 {r11=r11^r9;clobber flags;}             :athlon-direct,athlon-ieu
;;	 92--> b  0: i 255 {bx=bx<-<0x10;clobber flags;}           :athlon-direct,athlon-ieu
;;	 92--> b  0: i 250 {r11=r11>->0x7;clobber flags;}          :athlon-direct,athlon-ieu
;;	 93--> b  0: i 256 {ax=ax+bx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 93--> b  0: i 626 [sp+0xc]=r11                            :athlon-direct,athlon-agu,athlon-store
;;	 94--> b  0: i 257 {r8=r8^ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	 94--> b  0: i 260 {r10=r10+dx;clobber flags;}             :athlon-direct,athlon-ieu
;;	 95--> b  0: i 258 {r8=r8>->0xc;clobber flags;}            :athlon-direct,athlon-ieu
;;	 96--> b  0: i 831 dx=r10+r8                               :athlon-direct,athlon-agu,nothing
;;	 98--> b  0: i 262 {bx=bx^dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 98--> b  0: i 760 [sp+0x14]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	 99--> b  0: i 263 {bx=bx>->0x8;clobber flags;}            :athlon-direct,athlon-ieu
;;	100--> b  0: i 264 {ax=ax+bx;clobber flags;}               :athlon-direct,athlon-ieu
;;	101--> b  0: i 265 {r8=r8^ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	101--> b  0: i 759 [sp+0x24]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	102--> b  0: i 266 {r8=r8>->0x7;clobber flags;}            :athlon-direct,athlon-ieu
;;	102--> b  0: i 269 {flags=cmp([sp+0x9c]-0x1,0);[sp+0x9c]=[sp+0x9c]-0x1;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	106--> b  0: i 270 pc={(flags!=0)?L867:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 106
;;   new head = 139
;;   new tail = 270

;;   ======================================================
;;   -- basic block 7 from 676 to 854 -- after reload
;;   ======================================================

;;	  0--> b  0: i 676 xmm1=[sp+0x10]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	  0--> b  0: i 675 [sp+0x10]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 677 xmm5=[sp+0x10]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	  1--> b  0: i 710 ax=[sp+0x160]                           :athlon-direct,athlon-load
;;	  2--> b  0: i 679 xmm0=[sp]                               :athlon-direct,athlon-fploadk8,athlon-fstore
;;	  2--> b  0: i 690 [sp]=r9                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 375 xmm1=vec_concat(xmm1,xmm5)              :athlon-double,athlon-fpsched,athlon-fmul
;;	  3--> b  0: i 681 xmm5=[sp+0x4]                           :athlon-direct,athlon-fploadk8,athlon-fstore
;;	  4--> b  0: i 686 xmm2=[sp+0x20]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	  5--> b  0: i 376 xmm0=vec_concat(xmm0,xmm5)              :athlon-double,athlon-fpsched,athlon-fmul
;;	  5--> b  0: i 688 xmm5=[sp+0x18]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	  6--> b  0: i 699 xmm3=[sp+0xc0]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	  7--> b  0: i 378 xmm2=vec_concat(xmm2,xmm5)              :athlon-double,athlon-fpsched,athlon-fmul
;;	  7--> b  0: i 697 xmm5=[sp+0xcc]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	  8--> b  0: i 683 xmm4=xmm0                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	  8--> b  0: i 693 xmm0=[sp]                               :athlon-direct,athlon-fploadk8,athlon-fstore
;;	  8--> b  0: i 712 [sp]=bx                                 :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i 377 xmm4=vec_concat(xmm4,xmm1)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 13--> b  0: i 684 xmm1=xmm4                               :athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)|(athlon-faddmul,athlon-faddmul)
;;	 13--> b  0: i 692 xmm4=[sp+0x24]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 15--> b  0: i 379 xmm0=vec_concat(xmm0,xmm4)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 15--> b  0: i 701 xmm4=[sp+0xc4]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 17--> b  0: i 383 xmm3=vec_concat(xmm3,xmm4)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 17--> b  0: i 709 xmm4=[sp+0xa4]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 18--> b  0: i 380 xmm0=vec_concat(xmm0,xmm2)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 18--> b  0: i 703 xmm2=[sp+0xa8]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 21--> b  0: i 381 xmm0=xmm0^xmm1                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 21--> b  0: i 695 xmm1=[sp+0xc8]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 23--> b  0: i 382 xmm1=vec_concat(xmm1,xmm5)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 23--> b  0: i 705 xmm5=[sp+0xac]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 25--> b  0: i 386 xmm2=vec_concat(xmm2,xmm5)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 25--> b  0: i 714 xmm5=[sp+0x1c]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 26--> b  0: i 384 xmm3=vec_concat(xmm3,xmm1)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 26--> b  0: i 707 xmm1=[sp+0xa0]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 28--> b  0: i 387 xmm1=vec_concat(xmm1,xmm4)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 29--> b  0: i 385 xmm0=xmm0^xmm3                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 31--> b  0: i 388 xmm1=vec_concat(xmm1,xmm2)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 31--> b  0: i 722 xmm2=[sp+0x8]                           :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 34--> b  0: i 389 xmm0=xmm0^xmm1                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 34--> b  0: i 715 xmm1=[sp]                               :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 35--> b  0: i 717 [sp]=bp                                 :athlon-direct,athlon-agu,athlon-store
;;	 36--> b  0: i 392 xmm1=vec_concat(xmm1,xmm5)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 36--> b  0: i 724 xmm5=[sp+0xc]                           :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 37--> b  0: i 390 [ax+0x10]=unspec[xmm0] 104              :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 38--> b  0: i 395 xmm2=vec_concat(xmm2,xmm5)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 41--> b  0: i 720 xmm0=[sp]                               :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 41--> b  0: i 719 [sp]=di                                 :athlon-direct,athlon-agu,athlon-store
;;	 42--> b  0: i 778 xmm4=[sp]                               :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 42--> b  0: i 726 [sp]=r8                                 :athlon-direct,athlon-agu,athlon-store
;;	 44--> b  0: i 393 xmm0=vec_concat(xmm0,xmm4)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 47--> b  0: i 394 xmm0=vec_concat(xmm0,xmm1)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 47--> b  0: i 729 xmm1=[sp]                               :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 48--> b  0: i 728 [sp]=r14                                :athlon-direct,athlon-agu,athlon-store
;;	 49--> b  0: i 730 xmm4=[sp]                               :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 50--> b  0: i 734 xmm5=[sp+0xbc]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 51--> b  0: i 396 xmm1=vec_concat(xmm1,xmm4)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 51--> b  0: i 738 xmm4=[sp+0xb4]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 54--> b  0: i 397 xmm1=vec_concat(xmm1,xmm2)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 57--> b  0: i 398 xmm0=xmm0^xmm1                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 57--> b  0: i 732 xmm1=[sp+0xb8]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 59--> b  0: i 403 xmm1=vec_concat(xmm1,xmm5)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 60--> b  0: i 402 xmm0=xmm0^xmm3                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 60--> b  0: i 736 xmm3=[sp+0xb0]                          :athlon-direct,athlon-fploadk8,athlon-fstore
;;	 62--> b  0: i 404 xmm3=vec_concat(xmm3,xmm4)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 65--> b  0: i 405 xmm3=vec_concat(xmm3,xmm1)              :athlon-double,athlon-fpsched,athlon-fmul
;;	 68--> b  0: i 406 xmm0=xmm0^xmm3                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 71--> b  0: i 407 [ax+0x20]=unspec[xmm0] 104              :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 72--> b  0: i 862 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 72--> b  0: i 413 use ax                                  :nothing
;;	 73--> b  0: i 844 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	 75--> b  0: i 845 {sp=sp+0x118;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 76--> b  0: i 846 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 77--> b  0: i 847 si=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 78--> b  0: i 848 di=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 79--> b  0: i 849 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 80--> b  0: i 850 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 81--> b  0: i 851 r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 82--> b  0: i 852 r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 83--> b  0: i 853 r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 84--> b  0: i 854 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 84
;;   new head = 676
;;   new tail = 854

;;   ======================================================
;;   -- basic block 8 from 31 to 868 -- after reload
;;   ======================================================

;;	  0--> b  0: i  31 [sp+0x1c]=0xffffffffec4e6c89            :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  32 bx=0x82efa98                            :athlon-direct,athlon-ieu
;;	  0--> b  0: i  33 cx=0x299f31d0                           :athlon-direct,athlon-ieu
;;	  1--> b  0: i  34 bp=0xffffffffa4093822                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 868 pc=L135                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 31
;;   new tail = 868



starting the processing of deferred insns
ending the processing of deferred insns


compress32

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={80d,100u} r1={21d,41u,31e} r2={14d,48u} r3={27d,34u} r4={4d,19u} r5={13d,18u} r6={15d,17u} r7={19d,243u} r16={1e} r17={134d,2u} r21={15d,14u} r22={16d,15u} r23={7d,6u} r24={7d,7u} r25={8d,8u} r26={8d,8u} r37={17d,22u} r38={13d,18u} r39={19d,23u} r40={16d,21u} r41={14d,17u} r42={18d,30u} r43={10d,15u} r44={31d,45u} 
;;    total ref usage 1329{526d,771u,32e} in 496{496 regular + 0 call} insns.
(note 27 0 60 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 667, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
(note 60 27 30 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 30 60 832 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 832 30 833 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) blake_ref.c:9 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn/f 833 832 834 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) blake_ref.c:9 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn/f:TI 834 833 835 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) blake_ref.c:9 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f 835 834 836 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) blake_ref.c:9 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f:TI 836 835 837 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) blake_ref.c:9 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f 837 836 838 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 5 di)) blake_ref.c:9 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil)))
(insn/f:TI 838 837 839 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 4 si)) blake_ref.c:9 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si)
        (nil)))
(insn/f 839 838 840 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) blake_ref.c:9 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 840 839 841 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -280 [0xfffffffffffffee8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:9 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -280 [0xfffffffffffffee8])))
            (nil))))
(insn:TI 841 840 842 2 (unspec_volatile [
            (reg/f:DI 7 sp)
        ] UNSPECV_PROLOGUE_USE) blake_ref.c:9 679 {prologue_use}
     (nil))
(note 842 841 71 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 71 842 80 2 (set (reg:SI 0 ax [orig:361 MEM[(const BitSequence *)datablock_5(D) + 12B] ] [361])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8])
        (nil)))
(insn 80 71 65 2 (set (reg:SI 3 bx [orig:364 MEM[(const BitSequence *)datablock_5(D) + 24B] ] [364])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8])
        (nil)))
(insn:TI 65 80 62 2 (set (reg:SI 6 bp [orig:359 MEM[(const BitSequence *)datablock_5(D) + 4B] ] [359])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8])
        (nil)))
(insn 62 65 68 2 (set (reg:SI 40 r11 [orig:358 MEM[(const BitSequence *)datablock_5(D)] ] [358])
        (mem:SI (reg/v/f:DI 1 dx [orig:357 datablock ] [357]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:DI 1 dx [orig:357 datablock ] [357]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8])
        (nil)))
(insn:TI 68 62 28 2 (set (reg:SI 38 r9 [orig:360 MEM[(const BitSequence *)datablock_5(D) + 8B] ] [360])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8])
        (nil)))
(insn 28 68 72 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])
        (reg:DI 2 cx [ state ])) blake_ref.c:9 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn:TI 72 28 81 2 (set (reg:SI 0 ax [orig:305 D.5786 ] [305])
        (bswap:SI (reg:SI 0 ax [orig:305 D.5786 ] [305]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8]))
        (nil)))
(insn 81 72 756 2 (set (reg:SI 3 bx [orig:317 D.5786 ] [317])
        (bswap:SI (reg:SI 3 bx [orig:317 D.5786 ] [317]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8]))
        (nil)))
(insn:TI 756 81 73 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 100 [0x64])) [6 %sfp+-172 S4 A32])
        (reg:SI 0 ax [orig:305 D.5786 ] [305])) 90 {*movsi_internal}
     (nil))
(insn 73 756 448 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 220 [0xdc])) [2 m+12 S4 A32])
        (reg:SI 0 ax [orig:305 D.5786 ] [305])) blake_ref.c:35 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:305 D.5786 ] [305])
        (nil)))
(insn 448 73 74 2 (set (reg:SI 5 di [orig:297 D.5786 ] [297])
        (reg:SI 6 bp [orig:359 MEM[(const BitSequence *)datablock_5(D) + 4B] ] [359])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 6 bp [orig:359 MEM[(const BitSequence *)datablock_5(D) + 4B] ] [359])
        (nil)))
(insn:TI 74 448 753 2 (set (reg:SI 0 ax [orig:362 MEM[(const BitSequence *)datablock_5(D) + 16B] ] [362])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8])
        (nil)))
(insn 753 74 69 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [6 %sfp+-160 S4 A32])
        (reg:SI 3 bx [orig:317 D.5786 ] [317])) 90 {*movsi_internal}
     (nil))
(insn 69 753 82 2 (set (reg:SI 38 r9 [orig:301 D.5786 ] [301])
        (bswap:SI (reg:SI 38 r9 [orig:301 D.5786 ] [301]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8]))
        (nil)))
(insn:TI 82 69 83 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 232 [0xe8])) [2 m+24 S4 A64])
        (reg:SI 3 bx [orig:317 D.5786 ] [317])) blake_ref.c:38 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 3 bx [orig:317 D.5786 ] [317])
        (nil)))
(insn 83 82 63 2 (set (reg:SI 3 bx [orig:365 MEM[(const BitSequence *)datablock_5(D) + 28B] ] [365])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8])
        (nil)))
(insn 63 83 66 2 (set (reg:SI 40 r11 [orig:293 D.5786 ] [293])
        (bswap:SI (reg:SI 40 r11 [orig:358 MEM[(const BitSequence *)datablock_5(D)] ] [358]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/v/f:DI 1 dx [orig:357 datablock ] [357]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8]))
        (nil)))
(insn:TI 66 63 70 2 (set (reg:SI 5 di [orig:297 D.5786 ] [297])
        (bswap:SI (reg:SI 5 di [orig:297 D.5786 ] [297]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8]))
        (nil)))
(insn 70 66 64 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 216 [0xd8])) [2 m+8 S4 A64])
        (reg:SI 38 r9 [orig:301 D.5786 ] [301])) blake_ref.c:34 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [orig:301 D.5786 ] [301])
        (nil)))
(insn 64 70 75 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [2 m+0 S4 A128])
        (reg:SI 40 r11 [orig:293 D.5786 ] [293])) blake_ref.c:32 90 {*movsi_internal}
     (nil))
(insn:TI 75 64 67 2 (set (reg:SI 0 ax [orig:309 D.5786 ] [309])
        (bswap:SI (reg:SI 0 ax [orig:309 D.5786 ] [309]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8]))
        (nil)))
(insn 67 75 757 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 212 [0xd4])) [2 m+4 S4 A32])
        (reg:SI 5 di [orig:297 D.5786 ] [297])) blake_ref.c:33 90 {*movsi_internal}
     (nil))
(insn 757 67 755 2 (set (reg:SI 39 r10 [orig:301 D.5786 ] [301])
        (reg:SI 38 r9 [orig:301 D.5786 ] [301])) 90 {*movsi_internal}
     (nil))
(insn:TI 755 757 76 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 104 [0x68])) [6 %sfp+-168 S4 A32])
        (reg:SI 0 ax [orig:309 D.5786 ] [309])) 90 {*movsi_internal}
     (nil))
(insn 76 755 84 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [2 m+16 S4 A128])
        (reg:SI 0 ax [orig:309 D.5786 ] [309])) blake_ref.c:36 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:309 D.5786 ] [309])
        (nil)))
(insn 84 76 77 2 (set (reg:SI 3 bx [orig:321 D.5786 ] [321])
        (bswap:SI (reg:SI 3 bx [orig:321 D.5786 ] [321]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8]))
        (nil)))
(insn:TI 77 84 752 2 (set (reg:SI 0 ax [orig:363 MEM[(const BitSequence *)datablock_5(D) + 20B] ] [363])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8])
        (nil)))
(insn 752 77 85 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 116 [0x74])) [6 %sfp+-156 S4 A32])
        (reg:SI 3 bx [orig:321 D.5786 ] [321])) 90 {*movsi_internal}
     (nil))
(insn:TI 85 752 78 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 236 [0xec])) [2 m+28 S4 A32])
        (reg:SI 3 bx [orig:321 D.5786 ] [321])) blake_ref.c:39 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 3 bx [orig:321 D.5786 ] [321])
        (nil)))
(insn:TI 78 85 754 2 (set (reg:SI 0 ax [orig:313 D.5786 ] [313])
        (bswap:SI (reg:SI 0 ax [orig:313 D.5786 ] [313]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8]))
        (nil)))
(insn:TI 754 78 79 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 108 [0x6c])) [6 %sfp+-164 S4 A32])
        (reg:SI 0 ax [orig:313 D.5786 ] [313])) 90 {*movsi_internal}
     (nil))
(insn 79 754 86 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 228 [0xe4])) [2 m+20 S4 A32])
        (reg:SI 0 ax [orig:313 D.5786 ] [313])) blake_ref.c:37 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:313 D.5786 ] [313])
        (nil)))
(insn:TI 86 79 87 2 (set (reg:SI 0 ax [orig:366 MEM[(const BitSequence *)datablock_5(D) + 32B] ] [366])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8])
        (nil)))
(insn:TI 87 86 751 2 (set (reg:SI 0 ax [orig:325 D.5786 ] [325])
        (bswap:SI (reg:SI 0 ax [orig:325 D.5786 ] [325]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8]))
        (nil)))
(insn:TI 751 87 88 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 120 [0x78])) [6 %sfp+-152 S4 A32])
        (reg:SI 0 ax [orig:325 D.5786 ] [325])) 90 {*movsi_internal}
     (nil))
(insn 88 751 89 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [2 m+32 S4 A128])
        (reg:SI 0 ax [orig:325 D.5786 ] [325])) blake_ref.c:40 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:325 D.5786 ] [325])
        (nil)))
(insn:TI 89 88 90 2 (set (reg:SI 0 ax [orig:367 MEM[(const BitSequence *)datablock_5(D) + 36B] ] [367])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8])
        (nil)))
(insn:TI 90 89 750 2 (set (reg:SI 0 ax [orig:329 D.5786 ] [329])
        (bswap:SI (reg:SI 0 ax [orig:329 D.5786 ] [329]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8]))
        (nil)))
(insn:TI 750 90 91 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 124 [0x7c])) [6 %sfp+-148 S4 A32])
        (reg:SI 0 ax [orig:329 D.5786 ] [329])) 90 {*movsi_internal}
     (nil))
(insn 91 750 92 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 244 [0xf4])) [2 m+36 S4 A32])
        (reg:SI 0 ax [orig:329 D.5786 ] [329])) blake_ref.c:41 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:329 D.5786 ] [329])
        (nil)))
(insn:TI 92 91 93 2 (set (reg:SI 0 ax [orig:368 MEM[(const BitSequence *)datablock_5(D) + 40B] ] [368])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8])
        (nil)))
(insn:TI 93 92 749 2 (set (reg:SI 0 ax [orig:333 D.5786 ] [333])
        (bswap:SI (reg:SI 0 ax [orig:333 D.5786 ] [333]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8]))
        (nil)))
(insn:TI 749 93 94 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [6 %sfp+-144 S4 A32])
        (reg:SI 0 ax [orig:333 D.5786 ] [333])) 90 {*movsi_internal}
     (nil))
(insn 94 749 95 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 248 [0xf8])) [2 m+40 S4 A64])
        (reg:SI 0 ax [orig:333 D.5786 ] [333])) blake_ref.c:42 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:333 D.5786 ] [333])
        (nil)))
(insn:TI 95 94 96 2 (set (reg:SI 0 ax [orig:369 MEM[(const BitSequence *)datablock_5(D) + 44B] ] [369])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8])
        (nil)))
(insn:TI 96 95 748 2 (set (reg:SI 0 ax [orig:337 D.5786 ] [337])
        (bswap:SI (reg:SI 0 ax [orig:337 D.5786 ] [337]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8]))
        (nil)))
(insn:TI 748 96 97 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 132 [0x84])) [6 %sfp+-140 S4 A32])
        (reg:SI 0 ax [orig:337 D.5786 ] [337])) 90 {*movsi_internal}
     (nil))
(insn 97 748 110 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 252 [0xfc])) [2 m+44 S4 A32])
        (reg:SI 0 ax [orig:337 D.5786 ] [337])) blake_ref.c:43 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:337 D.5786 ] [337])
        (nil)))
(insn:TI 110 97 98 2 (set (reg:SI 0 ax [orig:128 v$0 ] [128])
        (mem:SI (plus:DI (reg:DI 2 cx [561])
                (const_int 16 [0x10])) [2 state_246(D)->h32+0 S4 A64])) blake_ref.c:50 90 {*movsi_internal}
     (nil))
(insn 98 110 104 2 (set (reg:SI 42 r13 [orig:370 MEM[(const BitSequence *)datablock_5(D) + 48B] ] [370])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8])
        (nil)))
(insn:TI 104 98 493 2 (set (reg:SI 44 r15 [orig:372 MEM[(const BitSequence *)datablock_5(D) + 56B] ] [372])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8])
        (nil)))
(insn:TI 493 104 111 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [6 %sfp+-112 S4 A32])
        (reg:SI 0 ax [orig:128 v$0 ] [128])) blake_ref.c:50 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:128 v$0 ] [128])
        (nil)))
(insn 111 493 99 2 (set (reg:SI 0 ax [orig:129 v$1 ] [129])
        (mem:SI (plus:DI (reg:DI 2 cx [563])
                (const_int 20 [0x14])) [2 state_246(D)->h32+4 S4 A32])) blake_ref.c:51 90 {*movsi_internal}
     (nil))
(insn 99 111 105 2 (set (reg:SI 42 r13 [orig:341 D.5786 ] [341])
        (bswap:SI (reg:SI 42 r13 [orig:341 D.5786 ] [341]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8]))
        (nil)))
(insn:TI 105 99 747 2 (set (reg:SI 44 r15 [orig:349 D.5786 ] [349])
        (bswap:SI (reg:SI 44 r15 [orig:349 D.5786 ] [349]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8]))
        (nil)))
(insn 747 105 100 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 136 [0x88])) [6 %sfp+-136 S4 A32])
        (reg:SI 42 r13 [orig:341 D.5786 ] [341])) 90 {*movsi_internal}
     (nil))
(insn 100 747 745 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 256 [0x100])) [2 m+48 S4 A128])
        (reg:SI 42 r13 [orig:341 D.5786 ] [341])) blake_ref.c:44 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 42 r13 [orig:341 D.5786 ] [341])
        (nil)))
(insn:TI 745 100 101 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [6 %sfp+-128 S4 A32])
        (reg:SI 44 r15 [orig:349 D.5786 ] [349])) 90 {*movsi_internal}
     (nil))
(insn 101 745 495 2 (set (reg:SI 42 r13 [orig:371 MEM[(const BitSequence *)datablock_5(D) + 52B] ] [371])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8])
        (nil)))
(insn:TI 495 101 112 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 164 [0xa4])) [6 %sfp+-108 S4 A32])
        (reg:SI 0 ax [orig:129 v$1 ] [129])) blake_ref.c:51 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:129 v$1 ] [129])
        (nil)))
(insn 112 495 106 2 (set (reg:SI 0 ax [orig:130 v$2 ] [130])
        (mem:SI (plus:DI (reg:DI 2 cx [565])
                (const_int 24 [0x18])) [2 state_246(D)->h32+8 S4 A64])) blake_ref.c:52 90 {*movsi_internal}
     (nil))
(insn:TI 106 112 107 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 264 [0x108])) [2 m+56 S4 A64])
        (reg:SI 44 r15 [orig:349 D.5786 ] [349])) blake_ref.c:46 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:349 D.5786 ] [349])
        (nil)))
(insn 107 106 102 2 (set (reg:SI 44 r15 [orig:373 MEM[(const BitSequence *)datablock_5(D) + 60B] ] [373])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                (const_int 60 [0x3c])) [0 MEM[(const BitSequence *)datablock_5(D) + 60B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
        (nil)))
(insn:TI 102 107 497 2 (set (reg:SI 42 r13 [orig:345 D.5786 ] [345])
        (bswap:SI (reg:SI 42 r13 [orig:345 D.5786 ] [345]))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:357 datablock ] [357])
                    (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8]))
        (nil)))
(insn:TI 497 102 113 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [6 %sfp+-104 S4 A32])
        (reg:SI 0 ax [orig:130 v$2 ] [130])) blake_ref.c:52 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:130 v$2 ] [130])
        (nil)))
(insn 113 497 108 2 (set (reg:SI 0 ax [orig:131 v$3 ] [131])
        (mem:SI (plus:DI (reg:DI 2 cx [567])
                (const_int 28 [0x1c])) [2 state_246(D)->h32+12 S4 A32])) blake_ref.c:53 90 {*movsi_internal}
     (nil))
(insn:TI 108 113 746 2 (set (reg:SI 44 r15 [orig:353 D.5786 ] [353])
        (bswap:SI (reg:SI 44 r15 [orig:353 D.5786 ] [353]))) 765 {*bswapsi2}
     (nil))
(insn 746 108 103 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 140 [0x8c])) [6 %sfp+-132 S4 A32])
        (reg:SI 42 r13 [orig:345 D.5786 ] [345])) 90 {*movsi_internal}
     (nil))
(insn 103 746 744 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 260 [0x104])) [2 m+52 S4 A32])
        (reg:SI 42 r13 [orig:345 D.5786 ] [345])) blake_ref.c:45 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 42 r13 [orig:345 D.5786 ] [345])
        (nil)))
(insn:TI 744 103 109 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 148 [0x94])) [6 %sfp+-124 S4 A32])
        (reg:SI 44 r15 [orig:353 D.5786 ] [353])) 90 {*movsi_internal}
     (nil))
(insn 109 744 499 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 268 [0x10c])) [2 m+60 S4 A32])
        (reg:SI 44 r15 [orig:353 D.5786 ] [353])) blake_ref.c:47 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:353 D.5786 ] [353])
        (nil)))
(insn:TI 499 109 114 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 172 [0xac])) [6 %sfp+-100 S4 A32])
        (reg:SI 0 ax [orig:131 v$3 ] [131])) blake_ref.c:53 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:131 v$3 ] [131])
        (nil)))
(insn 114 499 501 2 (set (reg:SI 0 ax [orig:132 v$4 ] [132])
        (mem:SI (plus:DI (reg:DI 2 cx [569])
                (const_int 32 [0x20])) [2 state_246(D)->h32+16 S4 A64])) blake_ref.c:54 90 {*movsi_internal}
     (nil))
(insn:TI 501 114 115 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [6 %sfp+-96 S4 A32])
        (reg:SI 0 ax [orig:132 v$4 ] [132])) blake_ref.c:54 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:132 v$4 ] [132])
        (nil)))
(insn 115 501 503 2 (set (reg:SI 0 ax [orig:133 v$5 ] [133])
        (mem:SI (plus:DI (reg:DI 2 cx [571])
                (const_int 36 [0x24])) [2 state_246(D)->h32+20 S4 A32])) blake_ref.c:55 90 {*movsi_internal}
     (nil))
(insn:TI 503 115 116 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 180 [0xb4])) [6 %sfp+-92 S4 A32])
        (reg:SI 0 ax [orig:133 v$5 ] [133])) blake_ref.c:55 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:133 v$5 ] [133])
        (nil)))
(insn 116 503 505 2 (set (reg:SI 0 ax [orig:134 v$6 ] [134])
        (mem:SI (plus:DI (reg:DI 2 cx [573])
                (const_int 40 [0x28])) [2 state_246(D)->h32+24 S4 A64])) blake_ref.c:56 90 {*movsi_internal}
     (nil))
(insn:TI 505 116 117 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [6 %sfp+-88 S4 A32])
        (reg:SI 0 ax [orig:134 v$6 ] [134])) blake_ref.c:56 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:134 v$6 ] [134])
        (nil)))
(insn 117 505 507 2 (set (reg:SI 0 ax [orig:135 v$7 ] [135])
        (mem:SI (plus:DI (reg:DI 2 cx [575])
                (const_int 44 [0x2c])) [2 state_246(D)->h32+28 S4 A32])) blake_ref.c:57 90 {*movsi_internal}
     (nil))
(insn:TI 507 117 118 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 188 [0xbc])) [6 %sfp+-84 S4 A32])
        (reg:SI 0 ax [orig:135 v$7 ] [135])) blake_ref.c:57 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:135 v$7 ] [135])
        (nil)))
(insn 118 507 743 2 (set (reg:SI 0 ax [orig:136 D.5781 ] [136])
        (mem:SI (plus:DI (reg:DI 2 cx [577])
                (const_int 120 [0x78])) [2 state_246(D)->salt32+0 S4 A64])) blake_ref.c:58 90 {*movsi_internal}
     (nil))
(insn:TI 743 118 510 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [6 %sfp+-80 S4 A32])
        (reg:SI 0 ax [orig:136 D.5781 ] [136])) blake_ref.c:58 90 {*movsi_internal}
     (nil))
(insn 510 743 120 2 (set (reg:SI 38 r9 [orig:254 v$8 ] [254])
        (reg:SI 0 ax [orig:136 D.5781 ] [136])) blake_ref.c:58 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:136 D.5781 ] [136])
        (nil)))
(insn 120 510 119 2 (set (reg:SI 0 ax [orig:137 D.5781 ] [137])
        (mem:SI (plus:DI (reg:DI 2 cx [580])
                (const_int 124 [0x7c])) [2 state_246(D)->salt32+4 S4 A32])) blake_ref.c:59 90 {*movsi_internal}
     (nil))
(insn:TI 119 120 742 2 (parallel [
            (set (reg:SI 38 r9 [orig:254 v$8 ] [254])
                (xor:SI (reg:SI 38 r9 [orig:254 v$8 ] [254])
                    (const_int 608135816 [0x243f6a88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:58 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 742 119 121 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 196 [0xc4])) [6 %sfp+-76 S4 A32])
        (reg:SI 0 ax [orig:137 D.5781 ] [137])) blake_ref.c:59 90 {*movsi_internal}
     (nil))
(insn 121 742 863 2 (parallel [
            (set (reg:SI 0 ax [orig:274 v$9 ] [274])
                (xor:SI (reg:SI 0 ax [orig:274 v$9 ] [274])
                    (const_int -2052912941 [0xffffffff85a308d3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:59 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 863 121 515 2 (set (reg:SI 1 dx)
        (mem:SI (plus:DI (reg:DI 2 cx [589])
                (const_int 12 [0xc])) [2 state_246(D)->nullt+0 S4 A32])) blake_ref.c:62 90 {*movsi_internal}
     (nil))
(insn:TI 515 863 122 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [6 %sfp+-236 S4 A32])
        (reg:SI 0 ax [orig:274 v$9 ] [274])) blake_ref.c:59 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:274 v$9 ] [274])
        (nil)))
(insn 122 515 741 2 (set (reg:SI 0 ax [orig:138 D.5781 ] [138])
        (mem:SI (plus:DI (reg:DI 2 cx [583])
                (const_int 128 [0x80])) [2 state_246(D)->salt32+8 S4 A64])) blake_ref.c:60 90 {*movsi_internal}
     (nil))
(insn:TI 741 122 123 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 200 [0xc8])) [6 %sfp+-72 S4 A32])
        (reg:SI 0 ax [orig:138 D.5781 ] [138])) blake_ref.c:60 90 {*movsi_internal}
     (nil))
(insn 123 741 519 2 (parallel [
            (set (reg:SI 0 ax [orig:220 v$10 ] [220])
                (xor:SI (reg:SI 0 ax [orig:220 v$10 ] [220])
                    (const_int 320440878 [0x13198a2e])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:60 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 519 123 124 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-240 S4 A32])
        (reg:SI 0 ax [orig:220 v$10 ] [220])) blake_ref.c:60 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:220 v$10 ] [220])
        (nil)))
(insn 124 519 740 2 (set (reg:SI 0 ax [orig:139 D.5781 ] [139])
        (mem:SI (plus:DI (reg:DI 2 cx [586])
                (const_int 132 [0x84])) [2 state_246(D)->salt32+12 S4 A32])) blake_ref.c:61 90 {*movsi_internal}
     (nil))
(insn:TI 740 124 125 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 204 [0xcc])) [6 %sfp+-68 S4 A32])
        (reg:SI 0 ax [orig:139 D.5781 ] [139])) blake_ref.c:61 90 {*movsi_internal}
     (nil))
(insn 125 740 864 2 (parallel [
            (set (reg:SI 0 ax [orig:206 v$11 ] [206])
                (xor:SI (reg:SI 0 ax [orig:206 v$11 ] [206])
                    (const_int 57701188 [0x3707344])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:61 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 864 125 523 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx)
            (const_int 0 [0]))) blake_ref.c:62 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 1 dx)
        (nil)))
(insn:TI 523 864 524 2 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-248 S4 A32])
        (reg:SI 0 ax [orig:206 v$11 ] [206])) blake_ref.c:61 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:206 v$11 ] [206])
        (nil)))
(insn 524 523 127 2 (set (reg:DI 0 ax [589])
        (reg:DI 2 cx [ state ])) blake_ref.c:62 89 {*movdi_internal}
     (nil))
(jump_insn 127 524 128 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 418)
            (pc))) blake_ref.c:62 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 418)
;;  succ:       8 [50.0%]  (CAN_FALLTHRU)
;;              3 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]

;; basic block 3, loop depth 0, count 0, freq 334, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 0 [ax] 2 [cx] 7 [sp]
;; lr  def 	 2 [cx] 3 [bx] 6 [bp] 17 [flags] 37 [r8] 44 [r15]
;; live  in  	 0 [ax] 2 [cx] 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 2 [cx] 3 [bx] 6 [bp] 37 [r8] 44 [r15]
;; live  kill	 17 [flags]
(note 128 127 129 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 129 128 132 3 (set (reg:SI 37 r8 [orig:141 D.5781 ] [141])
        (mem:SI (plus:DI (reg:DI 2 cx [590])
                (const_int 48 [0x30])) [2 state_246(D)->t32+0 S4 A64])) blake_ref.c:69 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [590])
        (nil)))
(insn 132 129 526 3 (set (reg:SI 44 r15 [orig:142 D.5781 ] [142])
        (mem:SI (plus:DI (reg:DI 0 ax [593])
                (const_int 52 [0x34])) [2 state_246(D)->t32+4 S4 A32])) blake_ref.c:71 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [593])
        (nil)))
(insn:TI 526 132 531 3 (set (reg:SI 6 bp [orig:235 v$12 ] [235])
        (reg:SI 37 r8 [orig:141 D.5781 ] [141])) blake_ref.c:69 90 {*movsi_internal}
     (nil))
(insn 531 526 131 3 (set (reg:SI 3 bx [orig:273 v$14 ] [273])
        (reg:SI 44 r15 [orig:142 D.5781 ] [142])) blake_ref.c:71 90 {*movsi_internal}
     (nil))
(insn 131 531 134 3 (parallel [
            (set (reg:SI 37 r8 [orig:252 v$13 ] [252])
                (xor:SI (reg:SI 37 r8 [orig:252 v$13 ] [252])
                    (const_int 698298832 [0x299f31d0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:70 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 134 131 130 3 (parallel [
            (set (reg:SI 44 r15 [orig:219 v$15 ] [219])
                (xor:SI (reg:SI 44 r15 [orig:219 v$15 ] [219])
                    (const_int -330404727 [0xffffffffec4e6c89])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:72 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 130 134 529 3 (parallel [
            (set (reg:SI 6 bp [orig:235 v$12 ] [235])
                (xor:SI (reg:SI 6 bp [orig:235 v$12 ] [235])
                    (const_int -1542899678 [0xffffffffa4093822])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:69 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 529 130 133 3 (set (reg:SI 2 cx [orig:252 v$13 ] [252])
        (reg:SI 37 r8 [orig:252 v$13 ] [252])) blake_ref.c:70 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:252 v$13 ] [252])
        (nil)))
(insn:TI 133 529 534 3 (parallel [
            (set (reg:SI 3 bx [orig:273 v$14 ] [273])
                (xor:SI (reg:SI 3 bx [orig:273 v$14 ] [273])
                    (const_int 137296536 [0x82efa98])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:71 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 534 133 135 3 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 28 [0x1c])) [6 %sfp+-244 S4 A32])
        (reg:SI 44 r15 [orig:219 v$15 ] [219])) blake_ref.c:72 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:219 v$15 ] [219])
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]

;; basic block 4, loop depth 0, count 0, freq 670, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [100.0%]  (CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 2 [cx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 4 [si] 5 [di] 37 [r8] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 37 [r8] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
(code_label 135 534 136 4 2 "" [1 uses])
(note 136 135 758 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 758 136 535 4 NOTE_INSN_DELETED)
(insn:TI 535 758 37 4 (set (reg:SI 0 ax [orig:128 v$0 ] [128])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [6 %sfp+-112 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 37 535 54 4 (set (reg:SI 42 r13 [orig:250 v$2 ] [250])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [6 %sfp+-104 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 54 37 38 4 (set (reg:SI 1 dx [orig:314 D.5787 ] [314])
        (const_int -1542899678 [0xffffffffa4093822])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -1542899678 [0xffffffffa4093822])
        (nil)))
(insn:TI 38 54 436 4 (set (reg:SI 44 r15 [orig:270 v$3 ] [270])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 172 [0xac])) [6 %sfp+-100 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 436 38 137 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [6 %sfp+-176 S4 A32])
        (reg:SI 1 dx [orig:314 D.5787 ] [314])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:314 D.5787 ] [314])
        (nil)))
(insn 137 436 437 4 (set (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
        (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)
        (nil)))
(insn:TI 437 137 39 4 (set (reg:SI 1 dx [orig:297 D.5786 ] [297])
        (reg:SI 5 di [orig:297 D.5786 ] [297])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [orig:297 D.5786 ] [297])
        (nil)))
(insn 39 437 40 4 (set (reg:SI 37 r8 [orig:276 v$4 ] [276])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [6 %sfp+-96 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 40 39 35 4 (set (reg:SI 43 r14 [orig:222 v$5 ] [222])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 180 [0xb4])) [6 %sfp+-92 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn:TI 35 40 536 4 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 0 ax [orig:128 v$0 ] [128])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:128 v$0 ] [128])
        (nil)))
(insn 536 35 58 4 (set (reg:SI 0 ax [orig:129 v$1 ] [129])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 164 [0xa4])) [6 %sfp+-108 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 58 536 43 4 (set (reg:SI 41 r12 [orig:298 D.5787 ] [298])
        (const_int 608135816 [0x243f6a88])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 608135816 [0x243f6a88])
        (nil)))
(insn:TI 43 58 44 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 156 [0x9c])) [6 %sfp+-116 S4 A32])
        (const_int 14 [0xe])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 14 [0xe])
        (nil)))
(insn 44 43 438 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 88 [0x58])) [6 %sfp+-184 S4 A32])
        (const_int 1065670069 [0x3f84d5b5])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1065670069 [0x3f84d5b5])
        (nil)))
(insn 438 44 45 4 (set (reg:SI 5 di [orig:252 v$13 ] [252])
        (reg:SI 2 cx [orig:252 v$13 ] [252])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:252 v$13 ] [252])
        (nil)))
(insn:TI 45 438 46 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 84 [0x54])) [6 %sfp+-188 S4 A32])
        (const_int -1253635817 [0xffffffffb5470917])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -1253635817 [0xffffffffb5470917])
        (nil)))
(insn 46 45 36 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [6 %sfp+-192 S4 A32])
        (const_int -1062458953 [0xffffffffc0ac29b7])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -1062458953 [0xffffffffc0ac29b7])
        (nil)))
(insn:TI 36 46 537 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [6 %sfp+-268 S4 A32])
        (reg:SI 0 ax [orig:129 v$1 ] [129])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:129 v$1 ] [129])
        (nil)))
(insn 537 36 47 4 (set (reg:SI 0 ax [orig:134 v$6 ] [134])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [6 %sfp+-88 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn:TI 47 537 48 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 76 [0x4c])) [6 %sfp+-196 S4 A32])
        (const_int -914599715 [0xffffffffc97c50dd])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -914599715 [0xffffffffc97c50dd])
        (nil)))
(insn 48 47 49 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [6 %sfp+-200 S4 A32])
        (const_int -1101764913 [0xffffffffbe5466cf])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -1101764913 [0xffffffffbe5466cf])
        (nil)))
(insn:TI 49 48 50 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 68 [0x44])) [6 %sfp+-204 S4 A32])
        (const_int 887688300 [0x34e90c6c])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 887688300 [0x34e90c6c])
        (nil)))
(insn 50 49 41 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-208 S4 A32])
        (const_int 1160258022 [0x452821e6])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1160258022 [0x452821e6])
        (nil)))
(insn:TI 41 50 538 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-264 S4 A32])
        (reg:SI 0 ax [orig:134 v$6 ] [134])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:134 v$6 ] [134])
        (nil)))
(insn 538 41 51 4 (set (reg:SI 0 ax [orig:135 v$7 ] [135])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 188 [0xbc])) [6 %sfp+-84 S4 A32])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn:TI 51 538 52 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 60 [0x3c])) [6 %sfp+-212 S4 A32])
        (const_int 953160567 [0x38d01377])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 953160567 [0x38d01377])
        (nil)))
(insn 52 51 53 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [6 %sfp+-216 S4 A32])
        (const_int 137296536 [0x82efa98])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 137296536 [0x82efa98])
        (nil)))
(insn:TI 53 52 55 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 52 [0x34])) [6 %sfp+-220 S4 A32])
        (const_int -330404727 [0xffffffffec4e6c89])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -330404727 [0xffffffffec4e6c89])
        (nil)))
(insn 55 53 42 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [6 %sfp+-224 S4 A32])
        (const_int 698298832 [0x299f31d0])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 698298832 [0x299f31d0])
        (nil)))
(insn:TI 42 55 56 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [6 %sfp+-260 S4 A32])
        (reg:SI 0 ax [orig:135 v$7 ] [135])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:135 v$7 ] [135])
        (nil)))
(insn 56 42 57 4 (set (reg:SI 0 ax [orig:306 D.5787 ] [306])
        (const_int 320440878 [0x13198a2e])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 320440878 [0x13198a2e])
        (nil)))
(insn 57 56 59 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 44 [0x2c])) [6 %sfp+-228 S4 A32])
        (const_int 57701188 [0x3707344])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 57701188 [0x3707344])
        (nil)))
(insn:TI 59 57 426 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-232 S4 A32])
        (const_int -2052912941 [0xffffffff85a308d3])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -2052912941 [0xffffffff85a308d3])
        (nil)))
(insn 426 59 428 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])
        (reg:SI 42 r13 [orig:250 v$2 ] [250])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 42 r13 [orig:250 v$2 ] [250])
        (nil)))
(insn:TI 428 426 435 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 20 [0x14])) [6 %sfp+-252 S4 A32])
        (reg:SI 44 r15 [orig:270 v$3 ] [270])) blake_ref.c:63 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:270 v$3 ] [270])
        (nil)))
(insn 435 428 865 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 92 [0x5c])) [6 %sfp+-180 S4 A32])
        (reg:SI 0 ax [orig:306 D.5787 ] [306])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(jump_insn 865 435 866 4 (set (pc)
        (label_ref 369)) 654 {jump}
     (nil)
 -> 369)
;;  succ:       6 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]

(barrier 866 865 867)
;; basic block 5, loop depth 0, count 0, freq 8710, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [93.3%]  (CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  kill	
(code_label 867 866 271 5 7 "" [1 uses])
(note 271 867 273 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 273 271 276 5 NOTE_INSN_DELETED)
(note 276 273 285 5 NOTE_INSN_DELETED)
(note 285 276 288 5 NOTE_INSN_DELETED)
(note 288 285 297 5 NOTE_INSN_DELETED)
(note 297 288 300 5 NOTE_INSN_DELETED)
(note 300 297 309 5 NOTE_INSN_DELETED)
(note 309 300 312 5 NOTE_INSN_DELETED)
(note 312 309 321 5 NOTE_INSN_DELETED)
(note 321 312 324 5 NOTE_INSN_DELETED)
(note 324 321 333 5 NOTE_INSN_DELETED)
(note 333 324 336 5 NOTE_INSN_DELETED)
(note 336 333 345 5 NOTE_INSN_DELETED)
(note 345 336 348 5 NOTE_INSN_DELETED)
(note 348 345 357 5 NOTE_INSN_DELETED)
(note 357 348 360 5 NOTE_INSN_DELETED)
(note 360 357 290 5 NOTE_INSN_DELETED)
(insn:TI 290 360 277 5 (set (reg:DI 42 r13 [orig:446 D.5782 ] [446])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 3 [0x3])) [0 MEM[base: _514, offset: 3B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 277 290 274 5 (set (reg/f:DI 2 cx [439])
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)
        (nil)))
(insn 274 277 278 5 (set (reg:DI 0 ax [orig:438 D.5782 ] [438])
        (zero_extend:DI (mem:QI (reg:DI 4 si [orig:281 ivtmp.77 ] [281]) [0 MEM[base: _514, offset: 0B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 278 274 291 5 (set (reg:DI 1 dx [orig:440 D.5782 ] [440])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 1 [0x1])) [0 MEM[base: _514, offset: 1B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 291 278 275 5 (set (reg:SI 44 r15 [orig:304 D.5787 ] [304])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:446 D.5782 ] [446])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 275 291 284 5 (set (reg:SI 40 r11 [orig:293 D.5786 ] [293])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:438 D.5782 ] [438])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 284 275 286 5 (set (reg:SI 41 r12 [orig:298 D.5787 ] [298])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:438 D.5782 ] [438])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:438 D.5782 ] [438])
        (nil)))
(insn 286 284 279 5 (set (reg:DI 0 ax [orig:444 D.5782 ] [444])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 2 [0x2])) [0 MEM[base: _514, offset: 2B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 279 286 281 5 (set (reg:SI 39 r10 [orig:296 D.5787 ] [296])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:440 D.5782 ] [440])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:440 D.5782 ] [440])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 281 279 646 5 (set (reg:SI 1 dx [orig:297 D.5786 ] [297])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:440 D.5782 ] [440])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 646 281 293 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 44 [0x2c])) [6 %sfp+-228 S4 A32])
        (reg:SI 44 r15 [orig:304 D.5787 ] [304])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:304 D.5787 ] [304])
        (nil)))
(insn 293 646 298 5 (set (reg:SI 44 r15 [orig:305 D.5786 ] [305])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:446 D.5782 ] [446])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 42 r13 [orig:446 D.5782 ] [446])
        (nil)))
(insn:TI 298 293 645 5 (set (reg:DI 42 r13 [orig:450 D.5782 ] [450])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 4 [0x4])) [0 MEM[base: _514, offset: 4B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 645 298 287 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-232 S4 A32])
        (reg:SI 39 r10 [orig:296 D.5787 ] [296])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:296 D.5787 ] [296])
        (nil)))
(insn 287 645 647 5 (set (reg:SI 39 r10 [orig:301 D.5786 ] [301])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:444 D.5782 ] [444])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 647 287 296 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 100 [0x64])) [6 %sfp+-172 S4 A32])
        (reg:SI 44 r15 [orig:305 D.5786 ] [305])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:305 D.5786 ] [305])
        (nil)))
(insn 296 647 299 5 (set (reg:SI 0 ax [orig:306 D.5787 ] [306])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:444 D.5782 ] [444])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 299 296 779 5 (set (reg:SI 44 r15 [orig:309 D.5786 ] [309])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:450 D.5782 ] [450])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 779 299 648 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 92 [0x5c])) [6 %sfp+-180 S4 A32])
        (reg:SI 0 ax [orig:306 D.5787 ] [306])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:306 D.5787 ] [306])
        (nil)))
(insn:TI 648 779 302 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 104 [0x68])) [6 %sfp+-168 S4 A32])
        (reg:SI 44 r15 [orig:309 D.5786 ] [309])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:309 D.5786 ] [309])
        (nil)))
(insn 302 648 303 5 (set (reg:DI 44 r15 [orig:452 D.5782 ] [452])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 5 [0x5])) [0 MEM[base: _514, offset: 5B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 303 302 649 5 (set (reg:SI 0 ax [orig:312 D.5787 ] [312])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:452 D.5782 ] [452])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 649 303 305 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [6 %sfp+-224 S4 A32])
        (reg:SI 0 ax [orig:312 D.5787 ] [312])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:312 D.5787 ] [312])
        (nil)))
(insn 305 649 314 5 (set (reg:SI 0 ax [orig:313 D.5786 ] [313])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 44 r15 [orig:452 D.5782 ] [452])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 44 r15 [orig:452 D.5782 ] [452])
        (nil)))
(insn:TI 314 305 650 5 (set (reg:DI 44 r15 [orig:458 D.5782 ] [458])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 7 [0x7])) [0 MEM[base: _514, offset: 7B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 650 314 308 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 108 [0x6c])) [6 %sfp+-164 S4 A32])
        (reg:SI 0 ax [orig:313 D.5786 ] [313])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:313 D.5786 ] [313])
        (nil)))
(insn 308 650 310 5 (set (reg:SI 0 ax [orig:314 D.5787 ] [314])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:450 D.5782 ] [450])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 42 r13 [orig:450 D.5782 ] [450])
        (nil)))
(insn:TI 310 308 651 5 (set (reg:DI 42 r13 [orig:456 D.5782 ] [456])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 6 [0x6])) [0 MEM[base: _514, offset: 6B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 651 310 311 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [6 %sfp+-176 S4 A32])
        (reg:SI 0 ax [orig:314 D.5787 ] [314])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:314 D.5787 ] [314])
        (nil)))
(insn:TI 311 651 652 5 (set (reg:SI 0 ax [orig:317 D.5786 ] [317])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:456 D.5782 ] [456])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 652 311 315 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [6 %sfp+-160 S4 A32])
        (reg:SI 0 ax [orig:317 D.5786 ] [317])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:317 D.5786 ] [317])
        (nil)))
(insn 315 652 653 5 (set (reg:SI 0 ax [orig:320 D.5787 ] [320])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:458 D.5782 ] [458])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 653 315 317 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 52 [0x34])) [6 %sfp+-220 S4 A32])
        (reg:SI 0 ax [orig:320 D.5787 ] [320])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:320 D.5787 ] [320])
        (nil)))
(insn 317 653 326 5 (set (reg:SI 0 ax [orig:321 D.5786 ] [321])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 44 r15 [orig:458 D.5782 ] [458])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 44 r15 [orig:458 D.5782 ] [458])
        (nil)))
(insn:TI 326 317 654 5 (set (reg:DI 44 r15 [orig:464 D.5782 ] [464])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 9 [0x9])) [0 MEM[base: _514, offset: 9B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 654 326 320 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 116 [0x74])) [6 %sfp+-156 S4 A32])
        (reg:SI 0 ax [orig:321 D.5786 ] [321])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:321 D.5786 ] [321])
        (nil)))
(insn 320 654 322 5 (set (reg:SI 0 ax [orig:322 D.5787 ] [322])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:456 D.5782 ] [456])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 42 r13 [orig:456 D.5782 ] [456])
        (nil)))
(insn:TI 322 320 655 5 (set (reg:DI 42 r13 [orig:462 D.5782 ] [462])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 8 [0x8])) [0 MEM[base: _514, offset: 8B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 655 322 323 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [6 %sfp+-216 S4 A32])
        (reg:SI 0 ax [orig:322 D.5787 ] [322])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:322 D.5787 ] [322])
        (nil)))
(insn:TI 323 655 656 5 (set (reg:SI 0 ax [orig:325 D.5786 ] [325])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:462 D.5782 ] [462])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 656 323 327 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 120 [0x78])) [6 %sfp+-152 S4 A32])
        (reg:SI 0 ax [orig:325 D.5786 ] [325])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:325 D.5786 ] [325])
        (nil)))
(insn 327 656 657 5 (set (reg:SI 0 ax [orig:328 D.5787 ] [328])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:464 D.5782 ] [464])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 657 327 329 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 60 [0x3c])) [6 %sfp+-212 S4 A32])
        (reg:SI 0 ax [orig:328 D.5787 ] [328])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:328 D.5787 ] [328])
        (nil)))
(insn 329 657 338 5 (set (reg:SI 0 ax [orig:329 D.5786 ] [329])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 44 r15 [orig:464 D.5782 ] [464])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 44 r15 [orig:464 D.5782 ] [464])
        (nil)))
(insn:TI 338 329 658 5 (set (reg:DI 44 r15 [orig:470 D.5782 ] [470])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 11 [0xb])) [0 MEM[base: _514, offset: 11B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 658 338 332 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 124 [0x7c])) [6 %sfp+-148 S4 A32])
        (reg:SI 0 ax [orig:329 D.5786 ] [329])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:329 D.5786 ] [329])
        (nil)))
(insn 332 658 334 5 (set (reg:SI 0 ax [orig:330 D.5787 ] [330])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:462 D.5782 ] [462])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 42 r13 [orig:462 D.5782 ] [462])
        (nil)))
(insn:TI 334 332 659 5 (set (reg:DI 42 r13 [orig:468 D.5782 ] [468])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 10 [0xa])) [0 MEM[base: _514, offset: 10B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 659 334 335 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-208 S4 A32])
        (reg:SI 0 ax [orig:330 D.5787 ] [330])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:330 D.5787 ] [330])
        (nil)))
(insn:TI 335 659 660 5 (set (reg:SI 0 ax [orig:333 D.5786 ] [333])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:468 D.5782 ] [468])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 660 335 339 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [6 %sfp+-144 S4 A32])
        (reg:SI 0 ax [orig:333 D.5786 ] [333])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:333 D.5786 ] [333])
        (nil)))
(insn 339 660 661 5 (set (reg:SI 0 ax [orig:336 D.5787 ] [336])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:470 D.5782 ] [470])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 661 339 341 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 68 [0x44])) [6 %sfp+-204 S4 A32])
        (reg:SI 0 ax [orig:336 D.5787 ] [336])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:336 D.5787 ] [336])
        (nil)))
(insn 341 661 350 5 (set (reg:SI 0 ax [orig:337 D.5786 ] [337])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 44 r15 [orig:470 D.5782 ] [470])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 44 r15 [orig:470 D.5782 ] [470])
        (nil)))
(insn:TI 350 341 662 5 (set (reg:DI 44 r15 [orig:476 D.5782 ] [476])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 13 [0xd])) [0 MEM[base: _514, offset: 13B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 662 350 344 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 132 [0x84])) [6 %sfp+-140 S4 A32])
        (reg:SI 0 ax [orig:337 D.5786 ] [337])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:337 D.5786 ] [337])
        (nil)))
(insn 344 662 346 5 (set (reg:SI 0 ax [orig:338 D.5787 ] [338])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:468 D.5782 ] [468])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 42 r13 [orig:468 D.5782 ] [468])
        (nil)))
(insn:TI 346 344 663 5 (set (reg:DI 42 r13 [orig:474 D.5782 ] [474])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 12 [0xc])) [0 MEM[base: _514, offset: 12B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 663 346 347 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [6 %sfp+-200 S4 A32])
        (reg:SI 0 ax [orig:338 D.5787 ] [338])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:338 D.5787 ] [338])
        (nil)))
(insn:TI 347 663 664 5 (set (reg:SI 0 ax [orig:341 D.5786 ] [341])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:474 D.5782 ] [474])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 664 347 351 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 136 [0x88])) [6 %sfp+-136 S4 A32])
        (reg:SI 0 ax [orig:341 D.5786 ] [341])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:341 D.5786 ] [341])
        (nil)))
(insn 351 664 665 5 (set (reg:SI 0 ax [orig:344 D.5787 ] [344])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:476 D.5782 ] [476])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 665 351 353 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 76 [0x4c])) [6 %sfp+-196 S4 A32])
        (reg:SI 0 ax [orig:344 D.5787 ] [344])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:344 D.5787 ] [344])
        (nil)))
(insn 353 665 666 5 (set (reg:SI 0 ax [orig:345 D.5786 ] [345])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 44 r15 [orig:476 D.5782 ] [476])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 44 r15 [orig:476 D.5782 ] [476])
        (nil)))
(insn:TI 666 353 356 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 140 [0x8c])) [6 %sfp+-132 S4 A32])
        (reg:SI 0 ax [orig:345 D.5786 ] [345])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:345 D.5786 ] [345])
        (nil)))
(insn 356 666 358 5 (set (reg:SI 0 ax [orig:346 D.5787 ] [346])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:474 D.5782 ] [474])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 42 r13 [orig:474 D.5782 ] [474])
        (nil)))
(insn:TI 358 356 362 5 (set (reg:DI 42 r13 [orig:480 D.5782 ] [480])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 14 [0xe])) [0 MEM[base: _514, offset: 14B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 362 358 667 5 (set (reg:DI 44 r15 [orig:482 D.5782 ] [482])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 15 [0xf])) [0 MEM[base: _514, offset: 15B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 667 362 359 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [6 %sfp+-192 S4 A32])
        (reg:SI 0 ax [orig:346 D.5787 ] [346])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:346 D.5787 ] [346])
        (nil)))
(insn:TI 359 667 668 5 (set (reg:SI 0 ax [orig:349 D.5786 ] [349])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 42 r13 [orig:480 D.5782 ] [480])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 668 359 363 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [6 %sfp+-128 S4 A32])
        (reg:SI 0 ax [orig:349 D.5786 ] [349])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:349 D.5786 ] [349])
        (nil)))
(insn 363 668 669 5 (set (reg:SI 0 ax [orig:352 D.5787 ] [352])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 44 r15 [orig:482 D.5782 ] [482])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 669 363 365 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 84 [0x54])) [6 %sfp+-188 S4 A32])
        (reg:SI 0 ax [orig:352 D.5787 ] [352])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:352 D.5787 ] [352])
        (nil)))
(insn 365 669 670 5 (set (reg:SI 0 ax [orig:353 D.5786 ] [353])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 44 r15 [orig:482 D.5782 ] [482])
                        (const_int 4 [0x4]))
                    (reg/f:DI 7 sp))
                (const_int 208 [0xd0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 44 r15 [orig:482 D.5782 ] [482])
        (nil)))
(insn:TI 670 365 368 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 148 [0x94])) [6 %sfp+-124 S4 A32])
        (reg:SI 0 ax [orig:353 D.5786 ] [353])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:353 D.5786 ] [353])
        (nil)))
(insn 368 670 671 5 (set (reg:SI 0 ax [orig:354 D.5787 ] [354])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 42 r13 [orig:480 D.5782 ] [480])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [439])) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 42 r13 [orig:480 D.5782 ] [480])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [439])
            (nil))))
(insn:TI 671 368 816 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 88 [0x58])) [6 %sfp+-184 S4 A32])
        (reg:SI 0 ax [orig:354 D.5787 ] [354])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:354 D.5787 ] [354])
        (nil)))
(insn 816 671 369 5 (set (reg:SI 0 ax [orig:386 D.5781 ] [386])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 92 [0x5c])) [6 %sfp+-180 S4 A32])) 90 {*movsi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]

;; basic block 6, loop depth 0, count 0, freq 9333, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              4 [100.0%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 369 816 138 6 4 "" [1 uses])
(note 138 369 539 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(note 539 138 799 6 NOTE_INSN_DELETED)
(note 799 539 540 6 NOTE_INSN_DELETED)
(note 540 799 798 6 NOTE_INSN_DELETED)
(note 798 540 774 6 NOTE_INSN_DELETED)
(note 774 798 802 6 NOTE_INSN_DELETED)
(note 802 774 801 6 NOTE_INSN_DELETED)
(note 801 802 772 6 NOTE_INSN_DELETED)
(note 772 801 547 6 NOTE_INSN_DELETED)
(note 547 772 797 6 NOTE_INSN_DELETED)
(note 797 547 548 6 NOTE_INSN_DELETED)
(note 548 797 796 6 NOTE_INSN_DELETED)
(note 796 548 553 6 NOTE_INSN_DELETED)
(note 553 796 795 6 NOTE_INSN_DELETED)
(note 795 553 771 6 NOTE_INSN_DELETED)
(note 771 795 800 6 NOTE_INSN_DELETED)
(note 800 771 558 6 NOTE_INSN_DELETED)
(note 558 800 792 6 NOTE_INSN_DELETED)
(note 792 558 560 6 NOTE_INSN_DELETED)
(note 560 792 791 6 NOTE_INSN_DELETED)
(note 791 560 569 6 NOTE_INSN_DELETED)
(note 569 791 790 6 NOTE_INSN_DELETED)
(note 790 569 574 6 NOTE_INSN_DELETED)
(note 574 790 789 6 NOTE_INSN_DELETED)
(note 789 574 576 6 NOTE_INSN_DELETED)
(note 576 789 788 6 NOTE_INSN_DELETED)
(note 788 576 585 6 NOTE_INSN_DELETED)
(note 585 788 775 6 NOTE_INSN_DELETED)
(note 775 585 588 6 NOTE_INSN_DELETED)
(note 588 775 776 6 NOTE_INSN_DELETED)
(note 776 588 591 6 NOTE_INSN_DELETED)
(note 591 776 777 6 NOTE_INSN_DELETED)
(note 777 591 604 6 NOTE_INSN_DELETED)
(note 604 777 787 6 NOTE_INSN_DELETED)
(note 787 604 607 6 NOTE_INSN_DELETED)
(note 607 787 786 6 NOTE_INSN_DELETED)
(note 786 607 618 6 NOTE_INSN_DELETED)
(note 618 786 785 6 NOTE_INSN_DELETED)
(note 785 618 622 6 NOTE_INSN_DELETED)
(note 622 785 784 6 NOTE_INSN_DELETED)
(note 784 622 629 6 NOTE_INSN_DELETED)
(note 629 784 783 6 NOTE_INSN_DELETED)
(note 783 629 638 6 NOTE_INSN_DELETED)
(note 638 783 782 6 NOTE_INSN_DELETED)
(note 782 638 267 6 NOTE_INSN_DELETED)
(note 267 782 643 6 NOTE_INSN_DELETED)
(note 643 267 780 6 NOTE_INSN_DELETED)
(note 780 643 781 6 NOTE_INSN_DELETED)
(note 781 780 644 6 NOTE_INSN_DELETED)
(note 644 781 139 6 NOTE_INSN_DELETED)
(insn:TI 139 644 155 6 (parallel [
            (set (reg:SI 40 r11 [orig:374 D.5781 ] [374])
                (xor:SI (reg:SI 40 r11 [orig:293 D.5786 ] [293])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 40 [0x28])) [6 %sfp+-232 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 155 139 147 6 (parallel [
            (set (reg:SI 39 r10 [orig:382 D.5781 ] [382])
                (xor:SI (reg:SI 39 r10 [orig:301 D.5786 ] [301])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 44 [0x2c])) [6 %sfp+-228 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 147 155 541 6 (parallel [
            (set (reg:SI 41 r12 [orig:378 D.5781 ] [378])
                (xor:SI (reg:SI 41 r12 [orig:298 D.5787 ] [298])
                    (reg:SI 1 dx [orig:297 D.5786 ] [297])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:297 D.5786 ] [297])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 541 147 163 6 (set (reg:SI 2 cx [orig:376 D.5781 ] [376])
        (reg:SI 6 bp [orig:235 v$12 ] [235])) blake_ref.c:79 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 6 bp [orig:235 v$12 ] [235])
        (nil)))
(insn 163 541 579 6 (parallel [
            (set (reg:SI 0 ax [orig:386 D.5781 ] [386])
                (xor:SI (reg:SI 0 ax [orig:386 D.5781 ] [386])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 100 [0x64])) [6 %sfp+-172 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 579 163 824 6 (set (reg:SI 42 r13 [orig:195 D.5781 ] [195])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-248 S4 A32])) blake_ref.c:82 90 {*movsi_internal}
     (nil))
(insn:TI 824 579 141 6 (set (reg:SI 44 r15 [orig:375 D.5781 ] [375])
        (plus:SI (reg:SI 40 r11 [orig:374 D.5781 ] [374])
            (reg:SI 37 r8 [orig:276 v$4 ] [276]))) blake_ref.c:79 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 40 r11 [orig:374 D.5781 ] [374])
        (nil)))
(insn 141 824 156 6 (parallel [
            (set (reg:SI 44 r15 [orig:144 D.5781 ] [144])
                (plus:SI (reg:SI 44 r15 [orig:375 D.5781 ] [375])
                    (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 156 141 157 6 (parallel [
            (set (reg:SI 39 r10 [orig:383 D.5781 ] [383])
                (plus:SI (reg:SI 39 r10 [orig:382 D.5781 ] [382])
                    (reg:SI 43 r14 [orig:222 v$5 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 157 156 769 6 (parallel [
            (set (reg:SI 39 r10 [orig:160 D.5781 ] [160])
                (plus:SI (reg:SI 39 r10 [orig:383 D.5781 ] [383])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 4 [0x4])) [6 %sfp+-268 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 769 157 142 6 (set (reg:SI 40 r11 [orig:238 v$6 ] [238])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-264 S4 A32])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(insn:TI 142 769 825 6 (parallel [
            (set (reg:SI 2 cx [orig:376 D.5781 ] [376])
                (xor:SI (reg:SI 2 cx [orig:376 D.5781 ] [376])
                    (reg:SI 44 r15 [orig:144 D.5781 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 825 142 549 6 (set (reg:SI 1 dx [orig:379 D.5781 ] [379])
        (plus:SI (reg:SI 41 r12 [orig:378 D.5781 ] [378])
            (reg:SI 44 r15 [orig:144 D.5781 ] [144]))) blake_ref.c:79 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:144 D.5781 ] [144])
        (expr_list:REG_DEAD (reg:SI 41 r12 [orig:378 D.5781 ] [378])
            (nil))))
(insn 549 825 158 6 (set (reg:SI 44 r15 [orig:163 D.5781 ] [163])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [6 %sfp+-236 S4 A32])) blake_ref.c:80 90 {*movsi_internal}
     (nil))
(insn:TI 158 549 143 6 (parallel [
            (set (reg:SI 5 di [orig:384 D.5781 ] [384])
                (xor:SI (reg:SI 5 di [orig:252 v$13 ] [252])
                    (reg:SI 39 r10 [orig:160 D.5781 ] [160])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 143 158 164 6 (parallel [
            (set (reg:SI 2 cx [orig:146 D.5781 ] [146])
                (rotate:SI (reg:SI 2 cx [orig:376 D.5781 ] [376])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 586 {*rotlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 164 143 159 6 (parallel [
            (set (reg:SI 0 ax [orig:387 D.5781 ] [387])
                (plus:SI (reg:SI 0 ax [orig:386 D.5781 ] [386])
                    (reg:SI 39 r10 [orig:160 D.5781 ] [160])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:160 D.5781 ] [160])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 159 164 144 6 (parallel [
            (set (reg:SI 5 di [orig:162 D.5781 ] [162])
                (rotate:SI (reg:SI 5 di [orig:384 D.5781 ] [384])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 586 {*rotlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 144 159 556 6 (parallel [
            (set (reg:SI 38 r9 [orig:147 D.5781 ] [147])
                (plus:SI (reg:SI 38 r9 [orig:254 v$8 ] [254])
                    (reg:SI 2 cx [orig:146 D.5781 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 556 144 160 6 (set (reg:SI 39 r10 [orig:390 D.5781 ] [390])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 104 [0x68])) [6 %sfp+-168 S4 A32])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(insn:TI 160 556 171 6 (parallel [
            (set (reg:SI 44 r15 [orig:163 D.5781 ] [163])
                (plus:SI (reg:SI 44 r15 [orig:163 D.5781 ] [163])
                    (reg:SI 5 di [orig:162 D.5781 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 171 160 145 6 (parallel [
            (set (reg:SI 39 r10 [orig:390 D.5781 ] [390])
                (xor:SI (reg:SI 39 r10 [orig:390 D.5781 ] [390])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 48 [0x30])) [6 %sfp+-224 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 145 171 161 6 (parallel [
            (set (reg:SI 37 r8 [orig:377 D.5781 ] [377])
                (xor:SI (reg:SI 37 r8 [orig:276 v$4 ] [276])
                    (reg:SI 38 r9 [orig:147 D.5781 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 161 145 146 6 (parallel [
            (set (reg:SI 43 r14 [orig:385 D.5781 ] [385])
                (xor:SI (reg:SI 43 r14 [orig:385 D.5781 ] [385])
                    (reg:SI 44 r15 [orig:163 D.5781 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 146 161 577 6 (parallel [
            (set (reg:SI 37 r8 [orig:149 D.5781 ] [149])
                (rotatert:SI (reg:SI 37 r8 [orig:377 D.5781 ] [377])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 577 146 552 6 (set (reg:SI 41 r12 [orig:400 D.5781 ] [400])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 28 [0x1c])) [6 %sfp+-244 S4 A32])) blake_ref.c:82 90 {*movsi_internal}
     (nil))
(insn:TI 552 577 149 6 (set (reg:SI 6 bp [orig:385 D.5781 ] [385])
        (reg:SI 43 r14 [orig:385 D.5781 ] [385])) blake_ref.c:80 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 43 r14 [orig:385 D.5781 ] [385])
        (nil)))
(insn 149 552 162 6 (parallel [
            (set (reg:SI 1 dx [orig:152 D.5781 ] [152])
                (plus:SI (reg:SI 1 dx [orig:379 D.5781 ] [379])
                    (reg:SI 37 r8 [orig:149 D.5781 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 162 149 150 6 (parallel [
            (set (reg:SI 6 bp [orig:165 D.5781 ] [165])
                (rotatert:SI (reg:SI 6 bp [orig:385 D.5781 ] [385])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 150 162 165 6 (parallel [
            (set (reg:SI 2 cx [orig:380 D.5781 ] [380])
                (xor:SI (reg:SI 2 cx [orig:146 D.5781 ] [146])
                    (reg:SI 1 dx [orig:152 D.5781 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 165 150 172 6 (parallel [
            (set (reg:SI 0 ax [orig:168 D.5781 ] [168])
                (plus:SI (reg:SI 0 ax [orig:387 D.5781 ] [387])
                    (reg:SI 6 bp [orig:165 D.5781 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 172 165 173 6 (parallel [
            (set (reg:SI 39 r10 [orig:391 D.5781 ] [391])
                (plus:SI (reg:SI 39 r10 [orig:390 D.5781 ] [390])
                    (reg:SI 40 r11 [orig:238 v$6 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 173 172 166 6 (parallel [
            (set (reg:SI 39 r10 [orig:176 D.5781 ] [176])
                (plus:SI (reg:SI 39 r10 [orig:391 D.5781 ] [391])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 166 173 151 6 (parallel [
            (set (reg:SI 5 di [orig:388 D.5781 ] [388])
                (xor:SI (reg:SI 5 di [orig:162 D.5781 ] [162])
                    (reg:SI 0 ax [orig:168 D.5781 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 151 166 167 6 (parallel [
            (set (reg:SI 2 cx [orig:154 D.5781 ] [154])
                (rotatert:SI (reg:SI 2 cx [orig:380 D.5781 ] [380])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 167 151 152 6 (parallel [
            (set (reg:SI 5 di [orig:170 D.5781 ] [170])
                (rotatert:SI (reg:SI 5 di [orig:388 D.5781 ] [388])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 152 167 826 6 (parallel [
            (set (reg:SI 38 r9 [orig:155 D.5781 ] [155])
                (plus:SI (reg:SI 38 r9 [orig:147 D.5781 ] [147])
                    (reg:SI 2 cx [orig:154 D.5781 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 826 152 153 6 (set (reg:SI 43 r14 [orig:171 D.5781 ] [171])
        (plus:SI (reg:SI 44 r15 [orig:163 D.5781 ] [163])
            (reg:SI 5 di [orig:170 D.5781 ] [170]))) blake_ref.c:80 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:163 D.5781 ] [163])
        (nil)))
(insn 153 826 773 6 (parallel [
            (set (reg:SI 37 r8 [orig:381 D.5781 ] [381])
                (xor:SI (reg:SI 37 r8 [orig:149 D.5781 ] [149])
                    (reg:SI 38 r9 [orig:155 D.5781 ] [155])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 38 r9 [orig:155 D.5781 ] [155])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 773 153 154 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-232 S4 A32])
        (reg:SI 38 r9 [orig:155 D.5781 ] [155])) blake_ref.c:79 90 {*movsi_internal}
     (nil))
(insn:TI 154 773 768 6 (parallel [
            (set (reg:SI 37 r8 [orig:157 D.5781 ] [157])
                (rotatert:SI (reg:SI 37 r8 [orig:157 D.5781 ] [157])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 768 154 169 6 (set (reg:SI 44 r15 [orig:256 v$7 ] [256])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [6 %sfp+-260 S4 A32])) blake_ref.c:82 90 {*movsi_internal}
     (nil))
(insn:TI 169 768 546 6 (parallel [
            (set (reg:SI 6 bp [orig:389 D.5781 ] [389])
                (xor:SI (reg:SI 6 bp [orig:165 D.5781 ] [165])
                    (reg:SI 43 r14 [orig:171 D.5781 ] [171])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 43 r14 [orig:171 D.5781 ] [171])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 546 169 770 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 152 [0x98])) [6 %sfp+-120 S4 A32])
        (reg:SI 37 r8 [orig:157 D.5781 ] [157])) blake_ref.c:79 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:157 D.5781 ] [157])
        (nil)))
(insn 770 546 170 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [6 %sfp+-236 S4 A32])
        (reg:SI 43 r14 [orig:171 D.5781 ] [171])) blake_ref.c:80 90 {*movsi_internal}
     (nil))
(insn:TI 170 770 174 6 (parallel [
            (set (reg:SI 6 bp [orig:173 D.5781 ] [173])
                (rotatert:SI (reg:SI 6 bp [orig:389 D.5781 ] [389])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 174 170 562 6 (parallel [
            (set (reg:SI 3 bx [orig:392 D.5781 ] [392])
                (xor:SI (reg:SI 3 bx [orig:392 D.5781 ] [392])
                    (reg:SI 39 r10 [orig:176 D.5781 ] [176])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 562 174 563 6 (set (reg:SI 37 r8 [orig:392 D.5781 ] [392])
        (reg:SI 3 bx [orig:392 D.5781 ] [392])) blake_ref.c:81 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 3 bx [orig:392 D.5781 ] [392])
        (nil)))
(insn 563 562 175 6 (set (reg:SI 3 bx [orig:179 D.5781 ] [179])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-240 S4 A32])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(insn:TI 175 563 176 6 (parallel [
            (set (reg:SI 37 r8 [orig:178 D.5781 ] [178])
                (rotate:SI (reg:SI 37 r8 [orig:392 D.5781 ] [392])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 586 {*rotlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 176 175 177 6 (parallel [
            (set (reg:SI 3 bx [orig:179 D.5781 ] [179])
                (plus:SI (reg:SI 3 bx [orig:179 D.5781 ] [179])
                    (reg:SI 37 r8 [orig:178 D.5781 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 177 176 564 6 (parallel [
            (set (reg:SI 40 r11 [orig:393 D.5781 ] [393])
                (xor:SI (reg:SI 40 r11 [orig:393 D.5781 ] [393])
                    (reg:SI 3 bx [orig:179 D.5781 ] [179])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 3 bx [orig:179 D.5781 ] [179])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 564 177 567 6 (set (reg:SI 43 r14 [orig:179 D.5781 ] [179])
        (reg:SI 3 bx [orig:179 D.5781 ] [179])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(insn 567 564 179 6 (set (reg:SI 3 bx [orig:394 D.5781 ] [394])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 108 [0x6c])) [6 %sfp+-164 S4 A32])) blake_ref.c:81 90 {*movsi_internal}
     (nil))
(insn:TI 179 567 178 6 (parallel [
            (set (reg:SI 3 bx [orig:394 D.5781 ] [394])
                (xor:SI (reg:SI 3 bx [orig:394 D.5781 ] [394])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 96 [0x60])) [6 %sfp+-176 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 178 179 568 6 (parallel [
            (set (reg:SI 40 r11 [orig:181 D.5781 ] [181])
                (rotatert:SI (reg:SI 40 r11 [orig:393 D.5781 ] [393])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 568 178 570 6 (set (reg:SI 38 r9 [orig:394 D.5781 ] [394])
        (reg:SI 3 bx [orig:394 D.5781 ] [394])) blake_ref.c:81 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 3 bx [orig:394 D.5781 ] [394])
        (nil)))
(insn 570 568 180 6 (set (reg:SI 3 bx [orig:397 D.5781 ] [397])
        (reg:SI 40 r11 [orig:181 D.5781 ] [181])) blake_ref.c:81 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 40 r11 [orig:181 D.5781 ] [181])
        (nil)))
(insn:TI 180 570 572 6 (parallel [
            (set (reg:SI 38 r9 [orig:395 D.5781 ] [395])
                (plus:SI (reg:SI 38 r9 [orig:394 D.5781 ] [394])
                    (reg:SI 39 r10 [orig:176 D.5781 ] [176])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:176 D.5781 ] [176])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 572 180 187 6 (set (reg:SI 39 r10 [orig:398 D.5781 ] [398])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [6 %sfp+-160 S4 A32])) blake_ref.c:82 90 {*movsi_internal}
     (nil))
(insn 187 572 181 6 (parallel [
            (set (reg:SI 39 r10 [orig:398 D.5781 ] [398])
                (xor:SI (reg:SI 39 r10 [orig:398 D.5781 ] [398])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 52 [0x34])) [6 %sfp+-220 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 181 187 581 6 (parallel [
            (set (reg:SI 38 r9 [orig:184 D.5781 ] [184])
                (plus:SI (reg:SI 38 r9 [orig:395 D.5781 ] [395])
                    (reg:SI 40 r11 [orig:181 D.5781 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 581 181 182 6 (set (reg:SI 40 r11 [orig:401 D.5781 ] [401])
        (reg:SI 44 r15 [orig:256 v$7 ] [256])) blake_ref.c:82 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:256 v$7 ] [256])
        (nil)))
(insn:TI 182 581 183 6 (parallel [
            (set (reg:SI 37 r8 [orig:396 D.5781 ] [396])
                (xor:SI (reg:SI 37 r8 [orig:178 D.5781 ] [178])
                    (reg:SI 38 r9 [orig:184 D.5781 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 183 182 188 6 (parallel [
            (set (reg:SI 37 r8 [orig:186 D.5781 ] [186])
                (rotatert:SI (reg:SI 37 r8 [orig:396 D.5781 ] [396])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 188 183 189 6 (parallel [
            (set (reg:SI 39 r10 [orig:399 D.5781 ] [399])
                (plus:SI (reg:SI 39 r10 [orig:398 D.5781 ] [398])
                    (reg:SI 44 r15 [orig:256 v$7 ] [256])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 189 188 583 6 (parallel [
            (set (reg:SI 39 r10 [orig:192 D.5781 ] [192])
                (plus:SI (reg:SI 39 r10 [orig:399 D.5781 ] [399])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 20 [0x14])) [6 %sfp+-252 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 583 189 195 6 (set (reg:SI 44 r15 [orig:402 D.5781 ] [402])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 116 [0x74])) [6 %sfp+-156 S4 A32])) blake_ref.c:82 90 {*movsi_internal}
     (nil))
(insn:TI 195 583 184 6 (parallel [
            (set (reg:SI 44 r15 [orig:402 D.5781 ] [402])
                (xor:SI (reg:SI 44 r15 [orig:402 D.5781 ] [402])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 56 [0x38])) [6 %sfp+-216 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 184 195 185 6 (parallel [
            (set (reg:SI 43 r14 [orig:187 D.5781 ] [187])
                (plus:SI (reg:SI 43 r14 [orig:179 D.5781 ] [179])
                    (reg:SI 37 r8 [orig:186 D.5781 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 185 184 186 6 (parallel [
            (set (reg:SI 3 bx [orig:397 D.5781 ] [397])
                (xor:SI (reg:SI 3 bx [orig:397 D.5781 ] [397])
                    (reg:SI 43 r14 [orig:187 D.5781 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 186 185 190 6 (parallel [
            (set (reg:SI 3 bx [orig:189 D.5781 ] [189])
                (rotatert:SI (reg:SI 3 bx [orig:397 D.5781 ] [397])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 190 186 191 6 (parallel [
            (set (reg:SI 41 r12 [orig:400 D.5781 ] [400])
                (xor:SI (reg:SI 41 r12 [orig:400 D.5781 ] [400])
                    (reg:SI 39 r10 [orig:192 D.5781 ] [192])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 191 190 196 6 (parallel [
            (set (reg:SI 41 r12 [orig:194 D.5781 ] [194])
                (rotate:SI (reg:SI 41 r12 [orig:400 D.5781 ] [400])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 586 {*rotlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 196 191 586 6 (parallel [
            (set (reg:SI 39 r10 [orig:403 D.5781 ] [403])
                (plus:SI (reg:SI 39 r10 [orig:192 D.5781 ] [192])
                    (reg:SI 44 r15 [orig:402 D.5781 ] [402])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:402 D.5781 ] [402])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 586 196 192 6 (set (reg:SI 44 r15 [orig:406 D.5781 ] [406])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 120 [0x78])) [6 %sfp+-152 S4 A32])) blake_ref.c:85 90 {*movsi_internal}
     (nil))
(insn:TI 192 586 203 6 (parallel [
            (set (reg:SI 42 r13 [orig:195 D.5781 ] [195])
                (plus:SI (reg:SI 42 r13 [orig:195 D.5781 ] [195])
                    (reg:SI 41 r12 [orig:194 D.5781 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 203 192 193 6 (parallel [
            (set (reg:SI 44 r15 [orig:406 D.5781 ] [406])
                (xor:SI (reg:SI 44 r15 [orig:406 D.5781 ] [406])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 60 [0x3c])) [6 %sfp+-212 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 193 203 194 6 (parallel [
            (set (reg:SI 40 r11 [orig:401 D.5781 ] [401])
                (xor:SI (reg:SI 40 r11 [orig:401 D.5781 ] [401])
                    (reg:SI 42 r13 [orig:195 D.5781 ] [195])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 194 193 197 6 (parallel [
            (set (reg:SI 40 r11 [orig:197 D.5781 ] [197])
                (rotatert:SI (reg:SI 40 r11 [orig:401 D.5781 ] [401])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 197 194 198 6 (parallel [
            (set (reg:SI 39 r10 [orig:200 D.5781 ] [200])
                (plus:SI (reg:SI 39 r10 [orig:403 D.5781 ] [403])
                    (reg:SI 40 r11 [orig:197 D.5781 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 198 197 204 6 (parallel [
            (set (reg:SI 41 r12 [orig:404 D.5781 ] [404])
                (xor:SI (reg:SI 41 r12 [orig:194 D.5781 ] [194])
                    (reg:SI 39 r10 [orig:200 D.5781 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 204 198 589 6 (parallel [
            (set (reg:SI 1 dx [orig:407 D.5781 ] [407])
                (plus:SI (reg:SI 1 dx [orig:152 D.5781 ] [152])
                    (reg:SI 44 r15 [orig:406 D.5781 ] [406])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:406 D.5781 ] [406])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 589 204 199 6 (set (reg:SI 44 r15 [orig:410 D.5781 ] [410])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 124 [0x7c])) [6 %sfp+-148 S4 A32])) blake_ref.c:85 90 {*movsi_internal}
     (nil))
(insn:TI 199 589 205 6 (parallel [
            (set (reg:SI 41 r12 [orig:202 D.5781 ] [202])
                (rotatert:SI (reg:SI 41 r12 [orig:404 D.5781 ] [404])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 205 199 200 6 (parallel [
            (set (reg:SI 1 dx [orig:209 D.5781 ] [209])
                (plus:SI (reg:SI 1 dx [orig:407 D.5781 ] [407])
                    (reg:SI 6 bp [orig:173 D.5781 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 200 205 201 6 (parallel [
            (set (reg:SI 42 r13 [orig:203 D.5781 ] [203])
                (plus:SI (reg:SI 42 r13 [orig:195 D.5781 ] [195])
                    (reg:SI 41 r12 [orig:202 D.5781 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 201 200 202 6 (parallel [
            (set (reg:SI 40 r11 [orig:405 D.5781 ] [405])
                (xor:SI (reg:SI 40 r11 [orig:197 D.5781 ] [197])
                    (reg:SI 42 r13 [orig:203 D.5781 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 202 201 206 6 (parallel [
            (set (reg:SI 40 r11 [orig:205 D.5781 ] [205])
                (rotatert:SI (reg:SI 40 r11 [orig:405 D.5781 ] [405])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 206 202 211 6 (parallel [
            (set (reg:SI 41 r12 [orig:408 D.5781 ] [408])
                (xor:SI (reg:SI 41 r12 [orig:202 D.5781 ] [202])
                    (reg:SI 1 dx [orig:209 D.5781 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 211 206 207 6 (parallel [
            (set (reg:SI 44 r15 [orig:410 D.5781 ] [410])
                (xor:SI (reg:SI 44 r15 [orig:410 D.5781 ] [410])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 64 [0x40])) [6 %sfp+-208 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 207 211 208 6 (parallel [
            (set (reg:SI 41 r12 [orig:211 D.5781 ] [211])
                (rotate:SI (reg:SI 41 r12 [orig:408 D.5781 ] [408])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 586 {*rotlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 208 207 209 6 (parallel [
            (set (reg:SI 43 r14 [orig:212 D.5781 ] [212])
                (plus:SI (reg:SI 43 r14 [orig:187 D.5781 ] [187])
                    (reg:SI 41 r12 [orig:211 D.5781 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 209 208 210 6 (parallel [
            (set (reg:SI 6 bp [orig:409 D.5781 ] [409])
                (xor:SI (reg:SI 6 bp [orig:173 D.5781 ] [173])
                    (reg:SI 43 r14 [orig:212 D.5781 ] [212])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 210 209 212 6 (parallel [
            (set (reg:SI 6 bp [orig:214 D.5781 ] [214])
                (rotatert:SI (reg:SI 6 bp [orig:409 D.5781 ] [409])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 212 210 827 6 (parallel [
            (set (reg:SI 1 dx [orig:411 D.5781 ] [411])
                (plus:SI (reg:SI 1 dx [orig:209 D.5781 ] [209])
                    (reg:SI 44 r15 [orig:410 D.5781 ] [410])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:410 D.5781 ] [410])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 827 212 602 6 (set (reg:SI 44 r15 [orig:217 v$0 ] [217])
        (plus:SI (reg:SI 1 dx [orig:411 D.5781 ] [411])
            (reg:SI 6 bp [orig:214 D.5781 ] [214]))) blake_ref.c:85 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:411 D.5781 ] [411])
        (nil)))
(insn 602 827 214 6 (set (reg:SI 1 dx [orig:414 D.5781 ] [414])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [6 %sfp+-144 S4 A32])) blake_ref.c:86 90 {*movsi_internal}
     (nil))
(insn:TI 214 602 767 6 (parallel [
            (set (reg:SI 41 r12 [orig:412 D.5781 ] [412])
                (xor:SI (reg:SI 41 r12 [orig:211 D.5781 ] [211])
                    (reg:SI 44 r15 [orig:217 v$0 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:217 v$0 ] [217])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 767 214 215 6 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 44 r15 [orig:217 v$0 ] [217])) blake_ref.c:85 90 {*movsi_internal}
     (nil))
(insn:TI 215 767 216 6 (parallel [
            (set (reg:SI 41 r12 [orig:219 v$15 ] [219])
                (rotatert:SI (reg:SI 41 r12 [orig:219 v$15 ] [219])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 216 215 766 6 (parallel [
            (set (reg:SI 43 r14 [orig:220 v$10 ] [220])
                (plus:SI (reg:SI 43 r14 [orig:220 v$10 ] [220])
                    (reg:SI 41 r12 [orig:219 v$15 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 41 r12 [orig:219 v$15 ] [219])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 766 216 765 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 28 [0x1c])) [6 %sfp+-244 S4 A32])
        (reg:SI 41 r12 [orig:219 v$15 ] [219])) blake_ref.c:85 90 {*movsi_internal}
     (nil))
(insn:TI 765 766 219 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-240 S4 A32])
        (reg:SI 43 r14 [orig:220 v$10 ] [220])) blake_ref.c:85 90 {*movsi_internal}
     (nil))
(insn 219 765 217 6 (parallel [
            (set (reg:SI 1 dx [orig:414 D.5781 ] [414])
                (xor:SI (reg:SI 1 dx [orig:414 D.5781 ] [414])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 68 [0x44])) [6 %sfp+-204 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 217 219 218 6 (parallel [
            (set (reg:SI 6 bp [orig:413 D.5781 ] [413])
                (xor:SI (reg:SI 6 bp [orig:214 D.5781 ] [214])
                    (reg:SI 43 r14 [orig:220 v$10 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 43 r14 [orig:220 v$10 ] [220])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 218 217 601 6 (parallel [
            (set (reg:SI 6 bp [orig:222 v$5 ] [222])
                (rotatert:SI (reg:SI 6 bp [orig:222 v$5 ] [222])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 601 218 220 6 (set (reg:SI 43 r14 [orig:222 v$5 ] [222])
        (reg:SI 6 bp [orig:222 v$5 ] [222])) blake_ref.c:85 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 6 bp [orig:222 v$5 ] [222])
        (nil)))
(insn:TI 220 601 605 6 (parallel [
            (set (reg:SI 0 ax [orig:415 D.5781 ] [415])
                (plus:SI (reg:SI 0 ax [orig:168 D.5781 ] [168])
                    (reg:SI 1 dx [orig:414 D.5781 ] [414])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:414 D.5781 ] [414])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 605 220 227 6 (set (reg:SI 1 dx [orig:418 D.5781 ] [418])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 132 [0x84])) [6 %sfp+-140 S4 A32])) blake_ref.c:86 90 {*movsi_internal}
     (nil))
(insn 227 605 221 6 (parallel [
            (set (reg:SI 1 dx [orig:418 D.5781 ] [418])
                (xor:SI (reg:SI 1 dx [orig:418 D.5781 ] [418])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 72 [0x48])) [6 %sfp+-200 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 221 227 222 6 (parallel [
            (set (reg:SI 0 ax [orig:225 D.5781 ] [225])
                (plus:SI (reg:SI 0 ax [orig:415 D.5781 ] [415])
                    (reg:SI 3 bx [orig:189 D.5781 ] [189])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 222 221 223 6 (parallel [
            (set (reg:SI 2 cx [orig:416 D.5781 ] [416])
                (xor:SI (reg:SI 2 cx [orig:154 D.5781 ] [154])
                    (reg:SI 0 ax [orig:225 D.5781 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 223 222 224 6 (parallel [
            (set (reg:SI 2 cx [orig:227 D.5781 ] [227])
                (rotate:SI (reg:SI 2 cx [orig:416 D.5781 ] [416])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 586 {*rotlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 224 223 228 6 (parallel [
            (set (reg:SI 42 r13 [orig:228 D.5781 ] [228])
                (plus:SI (reg:SI 42 r13 [orig:203 D.5781 ] [203])
                    (reg:SI 2 cx [orig:227 D.5781 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 228 224 620 6 (parallel [
            (set (reg:SI 0 ax [orig:419 D.5781 ] [419])
                (plus:SI (reg:SI 0 ax [orig:225 D.5781 ] [225])
                    (reg:SI 1 dx [orig:418 D.5781 ] [418])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:418 D.5781 ] [418])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 620 228 225 6 (set (reg:SI 1 dx [orig:426 D.5781 ] [426])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 140 [0x8c])) [6 %sfp+-132 S4 A32])) blake_ref.c:87 90 {*movsi_internal}
     (nil))
(insn:TI 225 620 226 6 (parallel [
            (set (reg:SI 3 bx [orig:417 D.5781 ] [417])
                (xor:SI (reg:SI 3 bx [orig:189 D.5781 ] [189])
                    (reg:SI 42 r13 [orig:228 D.5781 ] [228])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 226 225 828 6 (parallel [
            (set (reg:SI 3 bx [orig:230 D.5781 ] [230])
                (rotatert:SI (reg:SI 3 bx [orig:417 D.5781 ] [417])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 828 226 616 6 (set (reg:SI 44 r15 [orig:233 v$1 ] [233])
        (plus:SI (reg:SI 0 ax [orig:419 D.5781 ] [419])
            (reg:SI 3 bx [orig:230 D.5781 ] [230]))) blake_ref.c:86 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:419 D.5781 ] [419])
        (nil)))
(insn 616 828 235 6 (set (reg:SI 0 ax [orig:422 D.5781 ] [422])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 136 [0x88])) [6 %sfp+-136 S4 A32])) blake_ref.c:87 90 {*movsi_internal}
     (nil))
(insn 235 616 230 6 (parallel [
            (set (reg:SI 0 ax [orig:422 D.5781 ] [422])
                (xor:SI (reg:SI 0 ax [orig:422 D.5781 ] [422])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 76 [0x4c])) [6 %sfp+-196 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 230 235 764 6 (parallel [
            (set (reg:SI 2 cx [orig:420 D.5781 ] [420])
                (xor:SI (reg:SI 2 cx [orig:227 D.5781 ] [227])
                    (reg:SI 44 r15 [orig:233 v$1 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 44 r15 [orig:233 v$1 ] [233])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 764 230 231 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [6 %sfp+-268 S4 A32])
        (reg:SI 44 r15 [orig:233 v$1 ] [233])) blake_ref.c:86 90 {*movsi_internal}
     (nil))
(insn:TI 231 764 236 6 (parallel [
            (set (reg:SI 2 cx [orig:235 v$12 ] [235])
                (rotatert:SI (reg:SI 2 cx [orig:235 v$12 ] [235])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 236 231 619 6 (parallel [
            (set (reg:SI 0 ax [orig:423 D.5781 ] [423])
                (plus:SI (reg:SI 0 ax [orig:422 D.5781 ] [422])
                    (reg:SI 38 r9 [orig:184 D.5781 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 38 r9 [orig:184 D.5781 ] [184])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 619 236 611 6 (set (reg:SI 38 r9 [orig:155 D.5781 ] [155])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-232 S4 A32])) blake_ref.c:87 90 {*movsi_internal}
     (nil))
(insn 611 619 237 6 (set (reg:SI 6 bp [orig:235 v$12 ] [235])
        (reg:SI 2 cx [orig:235 v$12 ] [235])) blake_ref.c:86 90 {*movsi_internal}
     (nil))
(insn:TI 237 611 829 6 (parallel [
            (set (reg:SI 0 ax [orig:241 D.5781 ] [241])
                (plus:SI (reg:SI 0 ax [orig:423 D.5781 ] [423])
                    (reg:SI 40 r11 [orig:205 D.5781 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 829 237 238 6 (set (reg:SI 2 cx [orig:206 v$11 ] [206])
        (plus:SI (reg:SI 42 r13 [orig:228 D.5781 ] [228])
            (reg:SI 2 cx [orig:235 v$12 ] [235]))) blake_ref.c:86 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 42 r13 [orig:228 D.5781 ] [228])
        (nil)))
(insn:TI 238 829 239 6 (parallel [
            (set (reg:SI 5 di [orig:424 D.5781 ] [424])
                (xor:SI (reg:SI 5 di [orig:170 D.5781 ] [170])
                    (reg:SI 0 ax [orig:241 D.5781 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 239 238 233 6 (parallel [
            (set (reg:SI 5 di [orig:243 D.5781 ] [243])
                (rotate:SI (reg:SI 5 di [orig:424 D.5781 ] [424])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 586 {*rotlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 233 239 763 6 (parallel [
            (set (reg:SI 3 bx [orig:421 D.5781 ] [421])
                (xor:SI (reg:SI 3 bx [orig:230 D.5781 ] [230])
                    (reg:SI 2 cx [orig:206 v$11 ] [206])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:206 v$11 ] [206])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 763 233 240 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-248 S4 A32])
        (reg:SI 2 cx [orig:206 v$11 ] [206])) blake_ref.c:86 90 {*movsi_internal}
     (nil))
(insn:TI 240 763 234 6 (parallel [
            (set (reg:SI 38 r9 [orig:244 D.5781 ] [244])
                (plus:SI (reg:SI 38 r9 [orig:155 D.5781 ] [155])
                    (reg:SI 5 di [orig:243 D.5781 ] [243])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 234 240 241 6 (parallel [
            (set (reg:SI 3 bx [orig:238 v$6 ] [238])
                (rotatert:SI (reg:SI 3 bx [orig:238 v$6 ] [238])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 241 234 243 6 (parallel [
            (set (reg:SI 40 r11 [orig:425 D.5781 ] [425])
                (xor:SI (reg:SI 40 r11 [orig:205 D.5781 ] [205])
                    (reg:SI 38 r9 [orig:244 D.5781 ] [244])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 243 241 615 6 (parallel [
            (set (reg:SI 1 dx [orig:426 D.5781 ] [426])
                (xor:SI (reg:SI 1 dx [orig:426 D.5781 ] [426])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 80 [0x50])) [6 %sfp+-192 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 615 243 242 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-264 S4 A32])
        (reg:SI 3 bx [orig:238 v$6 ] [238])) blake_ref.c:86 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 3 bx [orig:238 v$6 ] [238])
        (nil)))
(insn:TI 242 615 268 6 (parallel [
            (set (reg:SI 40 r11 [orig:247 D.5781 ] [247])
                (rotatert:SI (reg:SI 40 r11 [orig:425 D.5781 ] [425])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 268 242 244 6 (parallel [
            (set (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                (plus:DI (reg:DI 4 si [orig:281 ivtmp.77 ] [281])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 244 268 761 6 (parallel [
            (set (reg:SI 0 ax [orig:427 D.5781 ] [427])
                (plus:SI (reg:SI 0 ax [orig:241 D.5781 ] [241])
                    (reg:SI 1 dx [orig:426 D.5781 ] [426])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:426 D.5781 ] [426])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 761 244 830 6 (set (reg:SI 1 dx [orig:157 D.5781 ] [157])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 152 [0x98])) [6 %sfp+-120 S4 A32])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn:TI 830 761 627 6 (set (reg:SI 3 bx [orig:250 v$2 ] [250])
        (plus:SI (reg:SI 0 ax [orig:427 D.5781 ] [427])
            (reg:SI 40 r11 [orig:247 D.5781 ] [247]))) blake_ref.c:87 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:427 D.5781 ] [427])
        (nil)))
(insn 627 830 251 6 (set (reg:SI 0 ax [orig:430 D.5781 ] [430])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [6 %sfp+-128 S4 A32])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 251 627 246 6 (parallel [
            (set (reg:SI 0 ax [orig:430 D.5781 ] [430])
                (xor:SI (reg:SI 0 ax [orig:430 D.5781 ] [430])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 84 [0x54])) [6 %sfp+-188 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 246 251 762 6 (parallel [
            (set (reg:SI 5 di [orig:428 D.5781 ] [428])
                (xor:SI (reg:SI 5 di [orig:243 D.5781 ] [243])
                    (reg:SI 3 bx [orig:250 v$2 ] [250])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 3 bx [orig:250 v$2 ] [250])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 762 246 631 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])
        (reg:SI 3 bx [orig:250 v$2 ] [250])) blake_ref.c:87 90 {*movsi_internal}
     (nil))
(insn 631 762 634 6 (set (reg:SI 3 bx [orig:432 D.5781 ] [432])
        (reg:SI 37 r8 [orig:186 D.5781 ] [186])) blake_ref.c:88 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:186 D.5781 ] [186])
        (nil)))
(insn:TI 634 631 247 6 (set (reg:SI 37 r8 [orig:433 D.5781 ] [433])
        (reg:SI 1 dx [orig:157 D.5781 ] [157])) blake_ref.c:88 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:157 D.5781 ] [157])
        (nil)))
(insn 247 634 252 6 (parallel [
            (set (reg:SI 5 di [orig:252 v$13 ] [252])
                (rotatert:SI (reg:SI 5 di [orig:428 D.5781 ] [428])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 252 247 633 6 (parallel [
            (set (reg:SI 39 r10 [orig:431 D.5781 ] [431])
                (plus:SI (reg:SI 39 r10 [orig:200 D.5781 ] [200])
                    (reg:SI 0 ax [orig:430 D.5781 ] [430])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:430 D.5781 ] [430])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 633 252 248 6 (set (reg:SI 0 ax [orig:171 D.5781 ] [171])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [6 %sfp+-236 S4 A32])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 248 633 253 6 (parallel [
            (set (reg:SI 38 r9 [orig:254 v$8 ] [254])
                (plus:SI (reg:SI 38 r9 [orig:244 D.5781 ] [244])
                    (reg:SI 5 di [orig:252 v$13 ] [252])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 253 248 636 6 (parallel [
            (set (reg:SI 39 r10 [orig:260 D.5781 ] [260])
                (plus:SI (reg:SI 39 r10 [orig:431 D.5781 ] [431])
                    (reg:SI 1 dx [orig:157 D.5781 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 636 253 259 6 (set (reg:SI 1 dx [orig:434 D.5781 ] [434])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 148 [0x94])) [6 %sfp+-124 S4 A32])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn 259 636 254 6 (parallel [
            (set (reg:SI 1 dx [orig:434 D.5781 ] [434])
                (xor:SI (reg:SI 1 dx [orig:434 D.5781 ] [434])
                    (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 88 [0x58])) [6 %sfp+-184 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 254 259 249 6 (parallel [
            (set (reg:SI 3 bx [orig:432 D.5781 ] [432])
                (xor:SI (reg:SI 3 bx [orig:432 D.5781 ] [432])
                    (reg:SI 39 r10 [orig:260 D.5781 ] [260])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 249 254 255 6 (parallel [
            (set (reg:SI 40 r11 [orig:429 D.5781 ] [429])
                (xor:SI (reg:SI 40 r11 [orig:247 D.5781 ] [247])
                    (reg:SI 38 r9 [orig:254 v$8 ] [254])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 255 249 250 6 (parallel [
            (set (reg:SI 3 bx [orig:262 D.5781 ] [262])
                (rotate:SI (reg:SI 3 bx [orig:432 D.5781 ] [432])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 586 {*rotlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 250 255 256 6 (parallel [
            (set (reg:SI 40 r11 [orig:256 v$7 ] [256])
                (rotatert:SI (reg:SI 40 r11 [orig:256 v$7 ] [256])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 256 250 626 6 (parallel [
            (set (reg:SI 0 ax [orig:264 D.5781 ] [264])
                (plus:SI (reg:SI 0 ax [orig:171 D.5781 ] [171])
                    (reg:SI 3 bx [orig:262 D.5781 ] [262])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 626 256 257 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [6 %sfp+-260 S4 A32])
        (reg:SI 40 r11 [orig:256 v$7 ] [256])) blake_ref.c:87 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 40 r11 [orig:256 v$7 ] [256])
        (nil)))
(insn:TI 257 626 260 6 (parallel [
            (set (reg:SI 37 r8 [orig:433 D.5781 ] [433])
                (xor:SI (reg:SI 37 r8 [orig:433 D.5781 ] [433])
                    (reg:SI 0 ax [orig:264 D.5781 ] [264])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 260 257 258 6 (parallel [
            (set (reg:SI 39 r10 [orig:435 D.5781 ] [435])
                (plus:SI (reg:SI 39 r10 [orig:260 D.5781 ] [260])
                    (reg:SI 1 dx [orig:434 D.5781 ] [434])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:434 D.5781 ] [434])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 258 260 831 6 (parallel [
            (set (reg:SI 37 r8 [orig:266 D.5781 ] [266])
                (rotatert:SI (reg:SI 37 r8 [orig:433 D.5781 ] [433])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 831 258 262 6 (set (reg:SI 1 dx [orig:270 v$3 ] [270])
        (plus:SI (reg:SI 39 r10 [orig:435 D.5781 ] [435])
            (reg:SI 37 r8 [orig:266 D.5781 ] [266]))) blake_ref.c:88 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:435 D.5781 ] [435])
        (nil)))
(insn:TI 262 831 760 6 (parallel [
            (set (reg:SI 3 bx [orig:436 D.5781 ] [436])
                (xor:SI (reg:SI 3 bx [orig:262 D.5781 ] [262])
                    (reg:SI 1 dx [orig:270 v$3 ] [270])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 760 262 263 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 20 [0x14])) [6 %sfp+-252 S4 A32])
        (reg:SI 1 dx [orig:270 v$3 ] [270])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn:TI 263 760 264 6 (parallel [
            (set (reg:SI 3 bx [orig:273 v$14 ] [273])
                (rotatert:SI (reg:SI 3 bx [orig:436 D.5781 ] [436])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 264 263 265 6 (parallel [
            (set (reg:SI 0 ax [orig:274 v$9 ] [274])
                (plus:SI (reg:SI 0 ax [orig:264 D.5781 ] [264])
                    (reg:SI 3 bx [orig:273 v$14 ] [273])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 265 264 759 6 (parallel [
            (set (reg:SI 37 r8 [orig:437 D.5781 ] [437])
                (xor:SI (reg:SI 37 r8 [orig:266 D.5781 ] [266])
                    (reg:SI 0 ax [orig:274 v$9 ] [274])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:274 v$9 ] [274])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 759 265 266 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [6 %sfp+-236 S4 A32])
        (reg:SI 0 ax [orig:274 v$9 ] [274])) blake_ref.c:88 90 {*movsi_internal}
     (nil))
(insn:TI 266 759 269 6 (parallel [
            (set (reg:SI 37 r8 [orig:276 v$4 ] [276])
                (rotatert:SI (reg:SI 37 r8 [orig:437 D.5781 ] [437])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 587 {*rotrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 269 266 270 6 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                                (const_int 156 [0x9c])) [6 %sfp+-116 S4 A32])
                        (const_int -1 [0xffffffffffffffff]))
                    (const_int 0 [0])))
            (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                        (const_int 156 [0x9c])) [6 %sfp+-116 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 156 [0x9c])) [6 %sfp+-116 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
        ]) blake_ref.c:76 225 {*addsi_2}
     (nil))
(jump_insn:TI 270 269 373 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 867)
            (pc))) blake_ref.c:76 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9333 (nil)))
 -> 867)
;;  succ:       5 [93.3%]  (CAN_FALLTHRU)
;;              7 [6.7%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]

;; basic block 7, loop depth 0, count 0, freq 667, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [6.7%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; lr  use 	 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 43 [r14]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 373 270 676 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 676 373 675 7 (set (reg:SI 22 xmm1 [487])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 675 676 677 7 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])
        (reg:SI 1 dx [orig:270 v$3 ] [270])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:270 v$3 ] [270])
        (nil)))
(insn:TI 677 675 710 7 (set (reg:SI 26 xmm5 [orig:270 v$3 ] [270])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-256 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 710 677 679 7 (set (reg:DI 0 ax [721])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [4 state+0 S8 A64])) blake_ref.c:93 89 {*movdi_internal}
     (nil))
(insn:TI 679 710 690 7 (set (reg:SI 21 xmm0 [488])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 690 679 375 7 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 38 r9 [orig:254 v$8 ] [254])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [orig:254 v$8 ] [254])
        (nil)))
(insn:TI 375 690 681 7 (set (reg:V2SI 22 xmm1 [487])
        (vec_concat:V2SI (reg:SI 22 xmm1 [487])
            (reg:SI 26 xmm5 [orig:270 v$3 ] [270]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 26 xmm5 [orig:270 v$3 ] [270])
        (nil)))
(insn 681 375 686 7 (set (reg:SI 26 xmm5 [orig:233 v$1 ] [233])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 4 [0x4])) [6 %sfp+-268 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 686 681 376 7 (set (reg:SI 23 xmm2 [490])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-240 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 376 686 688 7 (set (reg:V2SI 21 xmm0 [488])
        (vec_concat:V2SI (reg:SI 21 xmm0 [488])
            (reg:SI 26 xmm5 [orig:233 v$1 ] [233]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 26 xmm5 [orig:233 v$1 ] [233])
        (nil)))
(insn 688 376 699 7 (set (reg:SI 26 xmm5 [orig:206 v$11 ] [206])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-248 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 699 688 378 7 (set (reg:SI 24 xmm3 [495])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [6 %sfp+-80 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 378 699 697 7 (set (reg:V2SI 23 xmm2 [490])
        (vec_concat:V2SI (reg:SI 23 xmm2 [490])
            (reg:SI 26 xmm5 [orig:206 v$11 ] [206]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 26 xmm5 [orig:206 v$11 ] [206])
        (nil)))
(insn 697 378 683 7 (set (reg:SI 26 xmm5 [orig:139 D.5781 ] [139])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 204 [0xcc])) [6 %sfp+-68 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 683 697 693 7 (set (reg:V2SI 25 xmm4 [orig:486 vect_cst_.55 ] [486])
        (reg:V2SI 21 xmm0 [488])) 1076 {*movv2si_internal}
     (expr_list:REG_DEAD (reg:V2SI 21 xmm0 [488])
        (nil)))
(insn 693 683 712 7 (set (reg:SI 21 xmm0 [491])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 712 693 377 7 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 3 bx [orig:273 v$14 ] [273])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 3 bx [orig:273 v$14 ] [273])
        (nil)))
(insn:TI 377 712 684 7 (set (reg:V4SI 25 xmm4 [orig:486 vect_cst_.55 ] [486])
        (vec_concat:V4SI (reg:V2SI 25 xmm4 [orig:486 vect_cst_.55 ] [486])
            (reg:V2SI 22 xmm1 [487]))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 22 xmm1 [487])
        (nil)))
(insn:TI 684 377 692 7 (set (reg:V4SI 22 xmm1 [orig:486 vect_cst_.55 ] [486])
        (reg:V4SI 25 xmm4 [orig:486 vect_cst_.55 ] [486])) 1194 {*movv4si_internal}
     (expr_list:REG_DEAD (reg:V4SI 25 xmm4 [orig:486 vect_cst_.55 ] [486])
        (nil)))
(insn 692 684 379 7 (set (reg:SI 25 xmm4 [orig:274 v$9 ] [274])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 36 [0x24])) [6 %sfp+-236 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 379 692 701 7 (set (reg:V2SI 21 xmm0 [491])
        (vec_concat:V2SI (reg:SI 21 xmm0 [491])
            (reg:SI 25 xmm4 [orig:274 v$9 ] [274]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 25 xmm4 [orig:274 v$9 ] [274])
        (nil)))
(insn 701 379 383 7 (set (reg:SI 25 xmm4 [orig:137 D.5781 ] [137])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 196 [0xc4])) [6 %sfp+-76 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 383 701 709 7 (set (reg:V2SI 24 xmm3 [495])
        (vec_concat:V2SI (reg:SI 24 xmm3 [495])
            (reg:SI 25 xmm4 [orig:137 D.5781 ] [137]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 25 xmm4 [orig:137 D.5781 ] [137])
        (nil)))
(insn 709 383 380 7 (set (reg:SI 25 xmm4 [orig:129 v$1 ] [129])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 164 [0xa4])) [6 %sfp+-108 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 380 709 703 7 (set (reg:V4SI 21 xmm0 [orig:489 vect_cst_.58 ] [489])
        (vec_concat:V4SI (reg:V2SI 21 xmm0 [491])
            (reg:V2SI 23 xmm2 [490]))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 23 xmm2 [490])
        (nil)))
(insn 703 380 381 7 (set (reg:SI 23 xmm2 [498])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [6 %sfp+-104 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 381 703 695 7 (set (reg:V4SI 21 xmm0 [orig:492 D.5780 ] [492])
        (xor:V4SI (reg:V4SI 21 xmm0 [orig:489 vect_cst_.58 ] [489])
            (reg:V4SI 22 xmm1 [orig:486 vect_cst_.55 ] [486]))) blake_ref.c:93 3431 {*xorv4si3}
     (expr_list:REG_DEAD (reg:V4SI 22 xmm1 [orig:486 vect_cst_.55 ] [486])
        (nil)))
(insn 695 381 382 7 (set (reg:SI 22 xmm1 [494])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 200 [0xc8])) [6 %sfp+-72 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 382 695 705 7 (set (reg:V2SI 22 xmm1 [494])
        (vec_concat:V2SI (reg:SI 22 xmm1 [494])
            (reg:SI 26 xmm5 [orig:139 D.5781 ] [139]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 26 xmm5 [orig:139 D.5781 ] [139])
        (nil)))
(insn 705 382 386 7 (set (reg:SI 26 xmm5 [orig:131 v$3 ] [131])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 172 [0xac])) [6 %sfp+-100 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 386 705 714 7 (set (reg:V2SI 23 xmm2 [498])
        (vec_concat:V2SI (reg:SI 23 xmm2 [498])
            (reg:SI 26 xmm5 [orig:131 v$3 ] [131]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 26 xmm5 [orig:131 v$3 ] [131])
        (nil)))
(insn 714 386 384 7 (set (reg:SI 26 xmm5 [orig:219 v$15 ] [219])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 28 [0x1c])) [6 %sfp+-244 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 384 714 707 7 (set (reg:V4SI 24 xmm3 [orig:493 vect_cst_.52 ] [493])
        (vec_concat:V4SI (reg:V2SI 24 xmm3 [495])
            (reg:V2SI 22 xmm1 [494]))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 22 xmm1 [494])
        (nil)))
(insn 707 384 387 7 (set (reg:SI 22 xmm1 [499])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [6 %sfp+-112 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 387 707 385 7 (set (reg:V2SI 22 xmm1 [499])
        (vec_concat:V2SI (reg:SI 22 xmm1 [499])
            (reg:SI 25 xmm4 [orig:129 v$1 ] [129]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 25 xmm4 [orig:129 v$1 ] [129])
        (nil)))
(insn:TI 385 387 388 7 (set (reg:V4SI 21 xmm0 [orig:496 D.5780 ] [496])
        (xor:V4SI (reg:V4SI 21 xmm0 [orig:492 D.5780 ] [492])
            (reg:V4SI 24 xmm3 [orig:493 vect_cst_.52 ] [493]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn:TI 388 385 722 7 (set (reg:V4SI 22 xmm1 [orig:497 vect_cst_.50 ] [497])
        (vec_concat:V4SI (reg:V2SI 22 xmm1 [499])
            (reg:V2SI 23 xmm2 [498]))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 23 xmm2 [498])
        (nil)))
(insn 722 388 389 7 (set (reg:SI 23 xmm2 [505])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-264 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 389 722 715 7 (set (reg:V4SI 21 xmm0 [orig:500 vect__497.56 ] [500])
        (xor:V4SI (reg:V4SI 21 xmm0 [orig:496 D.5780 ] [496])
            (reg:V4SI 22 xmm1 [orig:497 vect_cst_.50 ] [497]))) blake_ref.c:93 3431 {*xorv4si3}
     (expr_list:REG_DEAD (reg:V4SI 22 xmm1 [orig:497 vect_cst_.50 ] [497])
        (nil)))
(insn 715 389 717 7 (set (reg:SI 22 xmm1 [502])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 717 715 392 7 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 6 bp [orig:235 v$12 ] [235])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 6 bp [orig:235 v$12 ] [235])
        (nil)))
(insn:TI 392 717 724 7 (set (reg:V2SI 22 xmm1 [502])
        (vec_concat:V2SI (reg:SI 22 xmm1 [502])
            (reg:SI 26 xmm5 [orig:219 v$15 ] [219]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 26 xmm5 [orig:219 v$15 ] [219])
        (nil)))
(insn 724 392 390 7 (set (reg:SI 26 xmm5 [orig:256 v$7 ] [256])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [6 %sfp+-260 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 390 724 395 7 (set (mem:V16QI (plus:DI (reg:DI 0 ax [721])
                (const_int 16 [0x10])) [2 MEM[(unsigned int *)state_246(D) + 16B]+0 S16 A32])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [orig:500 vect__497.56 ] [500])
            ] UNSPEC_STOREU)) blake_ref.c:93 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V16QI 21 xmm0 [orig:500 vect__497.56 ] [500])
        (nil)))
(insn:TI 395 390 720 7 (set (reg:V2SI 23 xmm2 [505])
        (vec_concat:V2SI (reg:SI 23 xmm2 [505])
            (reg:SI 26 xmm5 [orig:256 v$7 ] [256]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 26 xmm5 [orig:256 v$7 ] [256])
        (nil)))
(insn:TI 720 395 719 7 (set (reg:SI 21 xmm0 [503])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 719 720 778 7 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 5 di [orig:252 v$13 ] [252])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [orig:252 v$13 ] [252])
        (nil)))
(insn:TI 778 719 726 7 (set (reg:SI 25 xmm4 [orig:252 v$13 ] [252])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 726 778 393 7 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 37 r8 [orig:276 v$4 ] [276])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:276 v$4 ] [276])
        (nil)))
(insn:TI 393 726 394 7 (set (reg:V2SI 21 xmm0 [503])
        (vec_concat:V2SI (reg:SI 21 xmm0 [503])
            (reg:SI 25 xmm4 [orig:252 v$13 ] [252]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 25 xmm4 [orig:252 v$13 ] [252])
        (nil)))
(insn:TI 394 393 729 7 (set (reg:V4SI 21 xmm0 [orig:501 vect_cst_.54 ] [501])
        (vec_concat:V4SI (reg:V2SI 21 xmm0 [503])
            (reg:V2SI 22 xmm1 [502]))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 22 xmm1 [502])
        (nil)))
(insn 729 394 728 7 (set (reg:SI 22 xmm1 [506])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 728 729 730 7 (set (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])
        (reg:SI 43 r14 [orig:222 v$5 ] [222])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 43 r14 [orig:222 v$5 ] [222])
        (nil)))
(insn:TI 730 728 734 7 (set (reg:SI 25 xmm4 [orig:222 v$5 ] [222])
        (mem/c:SI (reg/f:DI 7 sp) [6 %sfp+-272 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 734 730 396 7 (set (reg:SI 26 xmm5 [orig:135 v$7 ] [135])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 188 [0xbc])) [6 %sfp+-84 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 396 734 738 7 (set (reg:V2SI 22 xmm1 [506])
        (vec_concat:V2SI (reg:SI 22 xmm1 [506])
            (reg:SI 25 xmm4 [orig:222 v$5 ] [222]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 25 xmm4 [orig:222 v$5 ] [222])
        (nil)))
(insn 738 396 397 7 (set (reg:SI 25 xmm4 [orig:133 v$5 ] [133])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 180 [0xb4])) [6 %sfp+-92 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 397 738 398 7 (set (reg:V4SI 22 xmm1 [orig:504 vect_cst_.57 ] [504])
        (vec_concat:V4SI (reg:V2SI 22 xmm1 [506])
            (reg:V2SI 23 xmm2 [505]))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 23 xmm2 [505])
        (nil)))
(insn:TI 398 397 732 7 (set (reg:V4SI 21 xmm0 [orig:507 D.5780 ] [507])
        (xor:V4SI (reg:V4SI 21 xmm0 [orig:501 vect_cst_.54 ] [501])
            (reg:V4SI 22 xmm1 [orig:504 vect_cst_.57 ] [504]))) blake_ref.c:93 3431 {*xorv4si3}
     (expr_list:REG_DEAD (reg:V4SI 22 xmm1 [orig:504 vect_cst_.57 ] [504])
        (nil)))
(insn 732 398 403 7 (set (reg:SI 22 xmm1 [513])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [6 %sfp+-88 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 403 732 402 7 (set (reg:V2SI 22 xmm1 [513])
        (vec_concat:V2SI (reg:SI 22 xmm1 [513])
            (reg:SI 26 xmm5 [orig:135 v$7 ] [135]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 26 xmm5 [orig:135 v$7 ] [135])
        (nil)))
(insn:TI 402 403 736 7 (set (reg:V4SI 21 xmm0 [orig:511 D.5780 ] [511])
        (xor:V4SI (reg:V4SI 21 xmm0 [orig:507 D.5780 ] [507])
            (reg:V4SI 24 xmm3 [orig:493 vect_cst_.52 ] [493]))) blake_ref.c:93 3431 {*xorv4si3}
     (expr_list:REG_DEAD (reg:V4SI 24 xmm3 [orig:493 vect_cst_.52 ] [493])
        (nil)))
(insn 736 402 404 7 (set (reg:SI 24 xmm3 [514])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [6 %sfp+-96 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 404 736 405 7 (set (reg:V2SI 24 xmm3 [514])
        (vec_concat:V2SI (reg:SI 24 xmm3 [514])
            (reg:SI 25 xmm4 [orig:133 v$5 ] [133]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 25 xmm4 [orig:133 v$5 ] [133])
        (nil)))
(insn:TI 405 404 406 7 (set (reg:V4SI 24 xmm3 [orig:512 vect_cst_.49 ] [512])
        (vec_concat:V4SI (reg:V2SI 24 xmm3 [514])
            (reg:V2SI 22 xmm1 [513]))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 22 xmm1 [513])
        (nil)))
(insn:TI 406 405 407 7 (set (reg:V4SI 21 xmm0 [orig:515 vect__497.56 ] [515])
        (xor:V4SI (reg:V4SI 21 xmm0 [orig:511 D.5780 ] [511])
            (reg:V4SI 24 xmm3 [orig:512 vect_cst_.49 ] [512]))) blake_ref.c:93 3431 {*xorv4si3}
     (expr_list:REG_DEAD (reg:V4SI 24 xmm3 [orig:512 vect_cst_.49 ] [512])
        (nil)))
(insn:TI 407 406 862 7 (set (mem:V16QI (plus:DI (reg:DI 0 ax [738])
                (const_int 32 [0x20])) [2 MEM[(unsigned int *)state_246(D) + 32B]+0 S16 A32])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [orig:515 vect__497.56 ] [515])
            ] UNSPEC_STOREU)) blake_ref.c:93 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V16QI 21 xmm0 [orig:515 vect__497.56 ] [515])
        (expr_list:REG_DEAD (reg:DI 0 ax [738])
            (nil))))
(insn:TI 862 407 413 7 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:103 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 413 862 870 7 (use (reg/i:SI 0 ax)) blake_ref.c:103 -1
     (nil))
(note 870 413 844 7 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 844 870 845 7 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:103 677 {blockage}
     (nil))
(insn/f:TI 845 844 846 7 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 280 [0x118])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:103 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 280 [0x118])))
            (nil))))
(insn/f:TI 846 845 847 7 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:103 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
            (nil))))
(insn/f:TI 847 846 848 7 (set (reg:DI 4 si)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:103 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 4 si)
            (nil))))
(insn/f:TI 848 847 849 7 (set (reg:DI 5 di)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:103 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 5 di)
            (nil))))
(insn/f:TI 849 848 850 7 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:103 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 6 bp)
            (nil))))
(insn/f:TI 850 849 851 7 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:103 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 41 r12)
            (nil))))
(insn/f:TI 851 850 852 7 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:103 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 42 r13)
            (nil))))
(insn/f:TI 852 851 853 7 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:103 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 43 r14)
            (nil))))
(insn/f:TI 853 852 854 7 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:103 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 44 r15)
            (nil))))
(jump_insn:TI 854 853 855 7 (simple_return) blake_ref.c:103 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 855 854 418)
;; basic block 8, loop depth 0, count 0, freq 334, maybe hot
;;  prev block 7, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 3 [bx] 6 [bp]
;; live  in  	 5 [di] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 2 [cx] 3 [bx] 6 [bp]
;; live  kill	
(code_label 418 855 417 8 5 "" [1 uses])
(note 417 418 31 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 31 417 32 8 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 28 [0x1c])) [6 %sfp+-244 S4 A32])
        (const_int -330404727 [0xffffffffec4e6c89])) blake_ref.c:66 90 {*movsi_internal}
     (nil))
(insn 32 31 33 8 (set (reg:SI 3 bx [orig:273 v$14 ] [273])
        (const_int 137296536 [0x82efa98])) blake_ref.c:65 90 {*movsi_internal}
     (nil))
(insn 33 32 34 8 (set (reg:SI 2 cx [orig:252 v$13 ] [252])
        (const_int 698298832 [0x299f31d0])) blake_ref.c:64 90 {*movsi_internal}
     (nil))
(insn:TI 34 33 868 8 (set (reg:SI 6 bp [orig:235 v$12 ] [235])
        (const_int -1542899678 [0xffffffffa4093822])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(jump_insn 868 34 869 8 (set (pc)
        (label_ref 135)) 654 {jump}
     (nil)
 -> 135)
;;  succ:       4 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 39 [r10] 40 [r11]

(barrier 869 868 447)
(note 447 869 0 NOTE_INSN_DELETED)

;; Function compress64 (compress64, funcdef_no=12, decl_uid=3221, cgraph_uid=12, symbol_order=20)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)


compress64

Dataflow summary:
def_info->table_size = 513, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={93d,116u} r1={24d,45u,31e} r2={17d,51u} r3={17d,22u} r4={8d,23u} r5={18d,24u} r6={13d,16u} r7={19d,245u} r16={1e} r17={138d,2u} r21={21d,20u} r22={13d,12u} r23={5d,5u} r24={5d,5u} r37={19d,25u} r38={19d,25u} r39={17d,19u} r40={15d,20u} r41={20d,31u,7e} r42={12d,15u} r43={26d,38u} r44={14d,20u} 
;;    total ref usage 1351{533d,779u,39e} in 502{502 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 8 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 38 [r9] 40 [r11] 41 [r12] 43 [r14] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 38 [r9] 40 [r11] 41 [r12] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; live  out 	 2 [cx] 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 17 [flags] 37 [r8] 39 [r10] 42 [r13] 44 [r15]
;; live  in  	 2 [cx] 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 37 [r8] 39 [r10] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]

( 3 8 )->[4]->( 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 5 [di] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 39 [r10] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 39 [r10] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]

( 6 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]

( 5 4 )->[6]->( 5 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]

( 6 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; lr  use 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 2 )->[8]->( 4 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 42 [r13]
;; live  in  	 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 42 [r13]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 109 to worklist
  Adding insn 512 to worklist
  Adding insn 717 to worklist
  Adding insn 718 to worklist
  Adding insn 502 to worklist
  Adding insn 719 to worklist
  Adding insn 720 to worklist
  Adding insn 493 to worklist
  Adding insn 491 to worklist
  Adding insn 489 to worklist
  Adding insn 487 to worklist
  Adding insn 485 to worklist
  Adding insn 483 to worklist
  Adding insn 481 to worklist
  Adding insn 479 to worklist
  Adding insn 87 to worklist
  Adding insn 721 to worklist
  Adding insn 84 to worklist
  Adding insn 722 to worklist
  Adding insn 81 to worklist
  Adding insn 723 to worklist
  Adding insn 78 to worklist
  Adding insn 724 to worklist
  Adding insn 75 to worklist
  Adding insn 725 to worklist
  Adding insn 72 to worklist
  Adding insn 726 to worklist
  Adding insn 69 to worklist
  Adding insn 727 to worklist
  Adding insn 66 to worklist
  Adding insn 728 to worklist
  Adding insn 63 to worklist
  Adding insn 729 to worklist
  Adding insn 60 to worklist
  Adding insn 730 to worklist
  Adding insn 57 to worklist
  Adding insn 731 to worklist
  Adding insn 54 to worklist
  Adding insn 732 to worklist
  Adding insn 51 to worklist
  Adding insn 733 to worklist
  Adding insn 48 to worklist
  Adding insn 734 to worklist
  Adding insn 45 to worklist
  Adding insn 42 to worklist
  Adding insn 6 to worklist
  Adding insn 798 to worklist
  Adding insn 796 to worklist
  Adding insn 795 to worklist
  Adding insn 794 to worklist
  Adding insn 793 to worklist
  Adding insn 792 to worklist
  Adding insn 791 to worklist
  Adding insn 790 to worklist
  Adding insn 789 to worklist
  Adding insn 524 to worklist
  Adding insn 820 to worklist
  Adding insn 422 to worklist
  Adding insn 421 to worklist
  Adding insn 414 to worklist
  Adding insn 544 to worklist
  Adding insn 542 to worklist
  Adding insn 541 to worklist
  Adding insn 540 to worklist
  Adding insn 539 to worklist
  Adding insn 538 to worklist
  Adding insn 537 to worklist
  Adding insn 536 to worklist
  Adding insn 535 to worklist
  Adding insn 534 to worklist
  Adding insn 533 to worklist
  Adding insn 532 to worklist
  Adding insn 531 to worklist
  Adding insn 21 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 15 to worklist
  Adding insn 13 to worklist
  Adding insn 663 to worklist
  Adding insn 662 to worklist
  Adding insn 661 to worklist
  Adding insn 660 to worklist
  Adding insn 659 to worklist
  Adding insn 658 to worklist
  Adding insn 657 to worklist
  Adding insn 656 to worklist
  Adding insn 655 to worklist
  Adding insn 654 to worklist
  Adding insn 653 to worklist
  Adding insn 652 to worklist
  Adding insn 651 to worklist
  Adding insn 650 to worklist
  Adding insn 649 to worklist
  Adding insn 648 to worklist
  Adding insn 647 to worklist
  Adding insn 646 to worklist
  Adding insn 645 to worklist
  Adding insn 644 to worklist
  Adding insn 643 to worklist
  Adding insn 642 to worklist
  Adding insn 641 to worklist
  Adding insn 640 to worklist
  Adding insn 756 to worklist
  Adding insn 639 to worklist
  Adding insn 638 to worklist
  Adding insn 637 to worklist
  Adding insn 636 to worklist
  Adding insn 256 to worklist
  Adding insn 255 to worklist
  Adding insn 736 to worklist
  Adding insn 737 to worklist
  Adding insn 619 to worklist
  Adding insn 739 to worklist
  Adding insn 608 to worklist
  Adding insn 740 to worklist
  Adding insn 598 to worklist
  Adding insn 741 to worklist
  Adding insn 742 to worklist
  Adding insn 745 to worklist
  Adding insn 550 to worklist
  Adding insn 749 to worklist
  Adding insn 811 to worklist
  Adding insn 801 to worklist
  Adding insn 401 to worklist
  Adding insn 395 to worklist
  Adding insn 710 to worklist
  Adding insn 386 to worklist
  Adding insn 699 to worklist
  Adding insn 696 to worklist
  Adding insn 694 to worklist
  Adding insn 377 to worklist
  Adding insn 684 to worklist
  Adding insn 682 to worklist
  Adding insn 368 to worklist
  Adding insn 671 to worklist
  Adding insn 665 to worklist
  Adding insn 823 to worklist
  Adding insn 525 to worklist
Finished finding needed instructions:
processing block 5 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
  Adding insn 782 to worklist
  Adding insn 354 to worklist
  Adding insn 351 to worklist
  Adding insn 349 to worklist
  Adding insn 348 to worklist
  Adding insn 345 to worklist
  Adding insn 344 to worklist
  Adding insn 342 to worklist
  Adding insn 339 to worklist
  Adding insn 337 to worklist
  Adding insn 336 to worklist
  Adding insn 333 to worklist
  Adding insn 332 to worklist
  Adding insn 330 to worklist
  Adding insn 327 to worklist
  Adding insn 325 to worklist
  Adding insn 324 to worklist
  Adding insn 321 to worklist
  Adding insn 320 to worklist
  Adding insn 318 to worklist
  Adding insn 315 to worklist
  Adding insn 313 to worklist
  Adding insn 312 to worklist
  Adding insn 309 to worklist
  Adding insn 308 to worklist
  Adding insn 306 to worklist
  Adding insn 303 to worklist
  Adding insn 301 to worklist
  Adding insn 300 to worklist
  Adding insn 297 to worklist
  Adding insn 296 to worklist
  Adding insn 294 to worklist
  Adding insn 291 to worklist
  Adding insn 289 to worklist
  Adding insn 288 to worklist
  Adding insn 285 to worklist
  Adding insn 284 to worklist
  Adding insn 282 to worklist
  Adding insn 279 to worklist
  Adding insn 277 to worklist
  Adding insn 276 to worklist
  Adding insn 273 to worklist
  Adding insn 272 to worklist
  Adding insn 270 to worklist
  Adding insn 267 to worklist
  Adding insn 265 to worklist
  Adding insn 264 to worklist
  Adding insn 263 to worklist
  Adding insn 261 to worklist
  Adding insn 260 to worklist
processing block 7 lr out =  0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 810 to worklist
  Adding insn 809 to worklist
  Adding insn 808 to worklist
  Adding insn 807 to worklist
  Adding insn 806 to worklist
  Adding insn 805 to worklist
  Adding insn 804 to worklist
  Adding insn 803 to worklist
  Adding insn 802 to worklist
  Adding insn 817 to worklist
  Adding insn 394 to worklist
  Adding insn 393 to worklist
  Adding insn 714 to worklist
  Adding insn 392 to worklist
  Adding insn 390 to worklist
  Adding insn 389 to worklist
  Adding insn 712 to worklist
  Adding insn 388 to worklist
  Adding insn 707 to worklist
  Adding insn 385 to worklist
  Adding insn 384 to worklist
  Adding insn 703 to worklist
  Adding insn 383 to worklist
  Adding insn 381 to worklist
  Adding insn 380 to worklist
  Adding insn 701 to worklist
  Adding insn 379 to worklist
  Adding insn 697 to worklist
  Adding insn 376 to worklist
  Adding insn 375 to worklist
  Adding insn 690 to worklist
  Adding insn 374 to worklist
  Adding insn 373 to worklist
  Adding insn 687 to worklist
  Adding insn 372 to worklist
  Adding insn 371 to worklist
  Adding insn 755 to worklist
  Adding insn 370 to worklist
  Adding insn 680 to worklist
  Adding insn 678 to worklist
  Adding insn 367 to worklist
  Adding insn 366 to worklist
  Adding insn 676 to worklist
  Adding insn 365 to worklist
  Adding insn 364 to worklist
  Adding insn 673 to worklist
  Adding insn 363 to worklist
  Adding insn 362 to worklist
  Adding insn 669 to worklist
  Adding insn 361 to worklist
  Adding insn 667 to worklist
  Adding insn 430 to worklist
  Adding insn 425 to worklist
processing block 6 lr out =  3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
  Adding insn 254 to worklist
  Adding insn 252 to worklist
  Adding insn 251 to worklist
  Adding insn 250 to worklist
  Adding insn 249 to worklist
  Adding insn 248 to worklist
  Adding insn 247 to worklist
  Adding insn 246 to worklist
  Adding insn 245 to worklist
  Adding insn 627 to worklist
  Adding insn 244 to worklist
  Adding insn 243 to worklist
  Adding insn 242 to worklist
  Adding insn 624 to worklist
  Adding insn 241 to worklist
  Adding insn 240 to worklist
  Adding insn 239 to worklist
  Adding insn 738 to worklist
  Adding insn 238 to worklist
  Adding insn 237 to worklist
  Adding insn 620 to worklist
  Adding insn 236 to worklist
  Adding insn 618 to worklist
  Adding insn 235 to worklist
  Adding insn 234 to worklist
  Adding insn 233 to worklist
  Adding insn 232 to worklist
  Adding insn 231 to worklist
  Adding insn 230 to worklist
  Adding insn 229 to worklist
  Adding insn 613 to worklist
  Adding insn 228 to worklist
  Adding insn 227 to worklist
  Adding insn 788 to worklist
  Adding insn 612 to worklist
  Adding insn 225 to worklist
  Adding insn 224 to worklist
  Adding insn 223 to worklist
  Adding insn 222 to worklist
  Adding insn 221 to worklist
  Adding insn 609 to worklist
  Adding insn 220 to worklist
  Adding insn 219 to worklist
  Adding insn 218 to worklist
  Adding insn 217 to worklist
  Adding insn 216 to worklist
  Adding insn 787 to worklist
  Adding insn 214 to worklist
  Adding insn 213 to worklist
  Adding insn 602 to worklist
  Adding insn 212 to worklist
  Adding insn 211 to worklist
  Adding insn 210 to worklist
  Adding insn 209 to worklist
  Adding insn 208 to worklist
  Adding insn 207 to worklist
  Adding insn 206 to worklist
  Adding insn 205 to worklist
  Adding insn 599 to worklist
  Adding insn 204 to worklist
  Adding insn 203 to worklist
  Adding insn 202 to worklist
  Adding insn 201 to worklist
  Adding insn 200 to worklist
  Adding insn 199 to worklist
  Adding insn 198 to worklist
  Adding insn 197 to worklist
  Adding insn 589 to worklist
  Adding insn 196 to worklist
  Adding insn 195 to worklist
  Adding insn 194 to worklist
  Adding insn 193 to worklist
  Adding insn 192 to worklist
  Adding insn 191 to worklist
  Adding insn 190 to worklist
  Adding insn 189 to worklist
  Adding insn 586 to worklist
  Adding insn 188 to worklist
  Adding insn 187 to worklist
  Adding insn 186 to worklist
  Adding insn 185 to worklist
  Adding insn 184 to worklist
  Adding insn 183 to worklist
  Adding insn 182 to worklist
  Adding insn 181 to worklist
  Adding insn 583 to worklist
  Adding insn 180 to worklist
  Adding insn 582 to worklist
  Adding insn 179 to worklist
  Adding insn 178 to worklist
  Adding insn 579 to worklist
  Adding insn 177 to worklist
  Adding insn 176 to worklist
  Adding insn 577 to worklist
  Adding insn 175 to worklist
  Adding insn 174 to worklist
  Adding insn 743 to worklist
  Adding insn 173 to worklist
  Adding insn 572 to worklist
  Adding insn 172 to worklist
  Adding insn 171 to worklist
  Adding insn 170 to worklist
  Adding insn 169 to worklist
  Adding insn 168 to worklist
  Adding insn 167 to worklist
  Adding insn 166 to worklist
  Adding insn 570 to worklist
  Adding insn 165 to worklist
  Adding insn 569 to worklist
  Adding insn 164 to worklist
  Adding insn 163 to worklist
  Adding insn 567 to worklist
  Adding insn 162 to worklist
  Adding insn 161 to worklist
  Adding insn 160 to worklist
  Adding insn 159 to worklist
  Adding insn 158 to worklist
  Adding insn 744 to worklist
  Adding insn 157 to worklist
  Adding insn 562 to worklist
  Adding insn 156 to worklist
  Adding insn 155 to worklist
  Adding insn 786 to worklist
  Adding insn 153 to worklist
  Adding insn 152 to worklist
  Adding insn 151 to worklist
  Adding insn 150 to worklist
  Adding insn 149 to worklist
  Adding insn 148 to worklist
  Adding insn 147 to worklist
  Adding insn 146 to worklist
  Adding insn 555 to worklist
  Adding insn 145 to worklist
  Adding insn 144 to worklist
  Adding insn 143 to worklist
  Adding insn 142 to worklist
  Adding insn 747 to worklist
  Adding insn 141 to worklist
  Adding insn 551 to worklist
  Adding insn 140 to worklist
  Adding insn 139 to worklist
  Adding insn 785 to worklist
  Adding insn 137 to worklist
  Adding insn 136 to worklist
  Adding insn 135 to worklist
  Adding insn 134 to worklist
  Adding insn 133 to worklist
  Adding insn 132 to worklist
  Adding insn 131 to worklist
  Adding insn 130 to worklist
  Adding insn 129 to worklist
  Adding insn 128 to worklist
  Adding insn 127 to worklist
  Adding insn 126 to worklist
  Adding insn 125 to worklist
processing block 4 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
  Adding insn 424 to worklist
  Adding insn 423 to worklist
  Adding insn 420 to worklist
  Adding insn 415 to worklist
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 34 to worklist
  Adding insn 33 to worklist
  Adding insn 32 to worklist
  Adding insn 31 to worklist
  Adding insn 30 to worklist
  Adding insn 29 to worklist
  Adding insn 28 to worklist
  Adding insn 27 to worklist
  Adding insn 26 to worklist
  Adding insn 25 to worklist
  Adding insn 24 to worklist
  Adding insn 23 to worklist
  Adding insn 22 to worklist
  Adding insn 530 to worklist
  Adding insn 529 to worklist
  Adding insn 528 to worklist
  Adding insn 17 to worklist
  Adding insn 16 to worklist
  Adding insn 527 to worklist
  Adding insn 14 to worklist
  Adding insn 526 to worklist
  Adding insn 123 to worklist
processing block 8 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
  Adding insn 12 to worklist
  Adding insn 11 to worklist
  Adding insn 10 to worklist
  Adding insn 9 to worklist
processing block 3 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
  Adding insn 120 to worklist
  Adding insn 119 to worklist
  Adding insn 118 to worklist
  Adding insn 521 to worklist
  Adding insn 117 to worklist
  Adding insn 116 to worklist
  Adding insn 519 to worklist
  Adding insn 115 to worklist
  Adding insn 114 to worklist
  Adding insn 517 to worklist
  Adding insn 113 to worklist
  Adding insn 112 to worklist
  Adding insn 111 to worklist
processing block 2 lr out =  2 [cx] 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
  Adding insn 819 to worklist
  Adding insn 818 to worklist
  Adding insn 107 to worklist
  Adding insn 106 to worklist
  Adding insn 510 to worklist
  Adding insn 105 to worklist
  Adding insn 507 to worklist
  Adding insn 104 to worklist
  Adding insn 103 to worklist
  Adding insn 102 to worklist
  Adding insn 101 to worklist
  Adding insn 100 to worklist
  Adding insn 99 to worklist
  Adding insn 98 to worklist
  Adding insn 496 to worklist
  Adding insn 97 to worklist
  Adding insn 96 to worklist
  Adding insn 95 to worklist
  Adding insn 94 to worklist
  Adding insn 93 to worklist
  Adding insn 92 to worklist
  Adding insn 91 to worklist
  Adding insn 90 to worklist
  Adding insn 89 to worklist
  Adding insn 88 to worklist
  Adding insn 86 to worklist
  Adding insn 85 to worklist
  Adding insn 83 to worklist
  Adding insn 82 to worklist
  Adding insn 80 to worklist
  Adding insn 79 to worklist
  Adding insn 77 to worklist
  Adding insn 76 to worklist
  Adding insn 74 to worklist
  Adding insn 73 to worklist
  Adding insn 71 to worklist
  Adding insn 70 to worklist
  Adding insn 68 to worklist
  Adding insn 67 to worklist
  Adding insn 65 to worklist
  Adding insn 64 to worklist
  Adding insn 62 to worklist
  Adding insn 61 to worklist
  Adding insn 59 to worklist
  Adding insn 58 to worklist
  Adding insn 56 to worklist
  Adding insn 55 to worklist
  Adding insn 53 to worklist
  Adding insn 52 to worklist
  Adding insn 50 to worklist
  Adding insn 49 to worklist
  Adding insn 47 to worklist
  Adding insn 46 to worklist
  Adding insn 44 to worklist
  Adding insn 434 to worklist
  Adding insn 43 to worklist
  Adding insn 41 to worklist
  Adding insn 40 to worklist
  Adding insn 797 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 11 (  1.2)
;;   ======================================================
;;   -- basic block 2 from 789 to 109 -- after reload
;;   ======================================================

;;	  0--> b  0: i 789 [--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 790 [--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 791 [--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 792 [--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 793 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 794 [--sp]=di                               :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 795 [--sp]=si                               :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 796 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 797 {sp=sp-0x228;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  6--> b  0: i 798 unspec/v[sp] 4                          :athlon-vector,athlon-ieu,athlon-ieu
;;	  7--> b  0: i  49 ax=[dx+0x18]                            :athlon-direct,athlon-load
;;	  7--> b  0: i  58 bx=[dx+0x30]                            :athlon-direct,athlon-load
;;	  7--> b  0: i  97 r12=0x243f6a8885a308d3                  :athlon-direct,athlon-ieu
;;	  8--> b  0: i  43 bp=[dx+0x8]                             :athlon-direct,athlon-load
;;	  8--> b  0: i  40 r11=[dx]                                :athlon-direct,athlon-load
;;	  8--> b  0: i 100 si=0x13198a2e03707344                   :athlon-direct,athlon-ieu
;;	  9--> b  0: i  46 r9=[dx+0x10]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  70 r14=[dx+0x50]                           :athlon-direct,athlon-load
;;	 10--> b  0: i  50 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 10--> b  0: i  59 bx=bswap(bx)                            :athlon-direct,athlon-ieu
;;	 10--> b  0: i   6 [sp+0x270]=cx                           :athlon-direct,athlon-agu,athlon-store
;;	 11--> b  0: i 733 [sp+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 11--> b  0: i  51 [sp+0x1b8]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 11--> b  0: i 434 di=bp                                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i  52 ax=[dx+0x20]                            :athlon-direct,athlon-load
;;	 12--> b  0: i 730 [sp+0xe0]=bx                            :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i  47 r9=bswap(r9)                            :athlon-direct,athlon-ieu
;;	 13--> b  0: i  60 [sp+0x1d0]=bx                           :athlon-direct,athlon-agu,athlon-store
;;	 13--> b  0: i  61 bx=[dx+0x38]                            :athlon-direct,athlon-load
;;	 13--> b  0: i  71 r14=bswap(r14)                          :athlon-direct,athlon-ieu
;;	 14--> b  0: i  41 r11=bswap(r11)                          :athlon-direct,athlon-ieu
;;	 14--> b  0: i  44 di=bswap(di)                            :athlon-direct,athlon-ieu
;;	 14--> b  0: i 734 [sp+0xc0]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i  53 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 15--> b  0: i  48 [sp+0x1b0]=r9                           :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i  42 [sp+0x1a0]=r11                          :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i 732 [sp+0xd0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  54 [sp+0x1c0]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  62 bx=bswap(bx)                            :athlon-direct,athlon-ieu
;;	 17--> b  0: i  55 ax=[dx+0x28]                            :athlon-direct,athlon-load
;;	 17--> b  0: i  45 [sp+0x1a8]=di                           :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i 496 r9=r12                                  :athlon-direct,athlon-ieu
;;	 18--> b  0: i 729 [sp+0xe8]=bx                            :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i  63 [sp+0x1d8]=bx                           :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i 726 [sp+0x100]=r14                          :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i  72 [sp+0x1f0]=r14                          :athlon-direct,athlon-agu,athlon-store
;;	 20--> b  0: i  56 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 21--> b  0: i 731 [sp+0xd8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 21--> b  0: i  57 [sp+0x1c8]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 22--> b  0: i  64 ax=[dx+0x40]                            :athlon-direct,athlon-load
;;	 25--> b  0: i  65 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 26--> b  0: i 728 [sp+0xf0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 26--> b  0: i  66 [sp+0x1e0]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 27--> b  0: i  67 ax=[dx+0x48]                            :athlon-direct,athlon-load
;;	 30--> b  0: i  68 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 31--> b  0: i 727 [sp+0xf8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 31--> b  0: i  69 [sp+0x1e8]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 32--> b  0: i  73 r14=[dx+0x58]                           :athlon-direct,athlon-load
;;	 32--> b  0: i  76 ax=[dx+0x60]                            :athlon-direct,athlon-load
;;	 33--> b  0: i  82 r15=[dx+0x70]                           :athlon-direct,athlon-load
;;	 35--> b  0: i  77 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 35--> b  0: i  74 r14=bswap(r14)                          :athlon-direct,athlon-ieu
;;	 36--> b  0: i 724 [sp+0x110]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 36--> b  0: i  78 [sp+0x200]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 36--> b  0: i  83 r15=bswap(r15)                          :athlon-direct,athlon-ieu
;;	 37--> b  0: i  79 ax=[dx+0x68]                            :athlon-direct,athlon-load
;;	 37--> b  0: i 722 [sp+0x120]=r15                          :athlon-direct,athlon-agu,athlon-store
;;	 38--> b  0: i  84 [sp+0x210]=r15                          :athlon-direct,athlon-agu,athlon-store
;;	 38--> b  0: i  85 r15=[dx+0x78]                           :athlon-direct,athlon-load
;;	 39--> b  0: i 725 [sp+0x108]=r14                          :athlon-direct,athlon-agu,athlon-store
;;	 39--> b  0: i  75 [sp+0x1f8]=r14                          :athlon-direct,athlon-agu,athlon-store
;;	 39--> b  0: i 103 r14=0xa4093822299f31d0                  :athlon-direct,athlon-ieu
;;	 40--> b  0: i  80 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 41--> b  0: i 723 [sp+0x118]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 41--> b  0: i  81 [sp+0x208]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 41--> b  0: i  86 r15=bswap(r15)                          :athlon-direct,athlon-ieu
;;	 42--> b  0: i  88 ax=[cx+0x88]                            :athlon-direct,athlon-load
;;	 42--> b  0: i 721 [sp+0x128]=r15                          :athlon-direct,athlon-agu,athlon-store
;;	 43--> b  0: i  87 [sp+0x218]=r15                          :athlon-direct,athlon-agu,athlon-store
;;	 45--> b  0: i 479 [sp+0x140]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 45--> b  0: i  89 ax=[cx+0x90]                            :athlon-direct,athlon-load
;;	 48--> b  0: i 481 [sp+0x148]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 48--> b  0: i  90 ax=[cx+0x98]                            :athlon-direct,athlon-load
;;	 51--> b  0: i 483 [sp+0x150]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 51--> b  0: i  91 ax=[cx+0xa0]                            :athlon-direct,athlon-load
;;	 54--> b  0: i 485 [sp+0x158]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 54--> b  0: i  92 ax=[cx+0xa8]                            :athlon-direct,athlon-load
;;	 57--> b  0: i 487 [sp+0x160]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 57--> b  0: i  93 ax=[cx+0xb0]                            :athlon-direct,athlon-load
;;	 60--> b  0: i 489 [sp+0x168]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 60--> b  0: i  94 ax=[cx+0xb8]                            :athlon-direct,athlon-load
;;	 63--> b  0: i 491 [sp+0x170]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 63--> b  0: i  95 ax=[cx+0xc0]                            :athlon-direct,athlon-load
;;	 66--> b  0: i 493 [sp+0x178]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 66--> b  0: i  96 ax=[cx+0x158]                           :athlon-direct,athlon-load
;;	 69--> b  0: i 720 [sp+0x180]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 69--> b  0: i  98 {r9=r9^ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	 69--> b  0: i  99 ax=[cx+0x160]                           :athlon-direct,athlon-load
;;	 70--> b  0: i 818 dx=[cx+0xc]                             :athlon-direct,athlon-load
;;	 72--> b  0: i 101 {si=si^ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	 72--> b  0: i 719 [sp+0x188]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 72--> b  0: i 102 ax=[cx+0x168]                           :athlon-direct,athlon-load
;;	 73--> b  0: i 502 [sp+0x40]=si                            :athlon-direct,athlon-agu,athlon-store
;;	 75--> b  0: i 104 {r14=r14^ax;clobber flags;}             :athlon-direct,athlon-ieu
;;	 75--> b  0: i 718 [sp+0x190]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 75--> b  0: i 105 ax=[cx+0x170]                           :athlon-direct,athlon-load
;;	 76--> b  0: i 507 r12=r14                                 :athlon-direct,athlon-ieu
;;	 78--> b  0: i 510 si=ax                                   :athlon-direct,athlon-ieu
;;	 78--> b  0: i 717 [sp+0x198]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 78--> b  0: i 106 ax=0x82efa98ec4e6c89                    :athlon-direct,athlon-ieu
;;	 79--> b  0: i 107 {ax=ax^si;clobber flags;}               :athlon-direct,athlon-ieu
;;	 79--> b  0: i 819 flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	 80--> b  0: i 512 [sp+0x30]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 80--> b  0: i 109 pc={(flags!=0)?L406:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 80
;;   new head = 789
;;   new tail = 109

;;   ======================================================
;;   -- basic block 3 from 111 to 524 -- after reload
;;   ======================================================

;;	  0--> b  0: i 111 ax=[cx+0xc8]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 112 r10=0x452821e638d01377                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 114 r8=0xbe5466cf34e90c6c                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 119 r15=0x3f84d5b5b5470917                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 113 {r10=r10^ax;clobber flags;}             :athlon-direct,athlon-ieu
;;	  3--> b  0: i 115 {ax=ax^r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	  4--> b  0: i 519 r13=ax                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i 116 ax=[cx+0xd0]                            :athlon-direct,athlon-load
;;	  4--> b  0: i 117 cx=0xc0ac29b7c97c50dd                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 521 bx=cx                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 517 bp=r10                                  :athlon-direct,athlon-ieu
;;	  7--> b  0: i 118 {bx=bx^ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	  7--> b  0: i 120 {ax=ax^r15;clobber flags;}              :athlon-direct,athlon-ieu
;;	  8--> b  0: i 524 [sp+0x38]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 8
;;   new head = 111
;;   new tail = 524

;;   ======================================================
;;   -- basic block 4 from 123 to 820 -- after reload
;;   ======================================================

;;	  0--> b  0: i 526 ax=[sp+0x140]                           :athlon-direct,athlon-load
;;	  0--> b  0: i  16 r15=[sp+0x158]                          :athlon-direct,athlon-load
;;	  0--> b  0: i  35 cx=0x82efa98ec4e6c89                    :athlon-direct,athlon-ieu
;;	  1--> b  0: i  14 r14=[sp+0x148]                          :athlon-direct,athlon-load
;;	  1--> b  0: i  32 dx=0x452821e638d01377                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  37 r10=0x13198a2e03707344                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 542 [sp+0x50]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  36 cx=0x243f6a8885a308d3                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 544 [sp+0x48]=r10                           :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  13 [sp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 527 ax=[sp+0x150]                           :athlon-direct,athlon-load
;;	  3--> b  0: i 123 si=`sigma'                              :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i 414 [sp+0x28]=r15                           :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 422 [sp+0xb8]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 415 r15=r12                                 :athlon-direct,athlon-ieu
;;	  5--> b  0: i 423 dx=di                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  17 r8=[sp+0x160]                           :athlon-direct,athlon-load
;;	  5--> b  0: i  21 [sp+0x13c]=0x10                         :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  15 [sp+0x18]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 528 ax=[sp+0x168]                           :athlon-direct,athlon-load
;;	  6--> b  0: i 420 r10=cx                                  :athlon-direct,athlon-ieu
;;	  7--> b  0: i 424 di=r14                                  :athlon-direct,athlon-ieu
;;	  9--> b  0: i  18 [sp+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i 529 ax=[sp+0x170]                           :athlon-direct,athlon-load
;;	 12--> b  0: i  19 [sp+0x10]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i 530 ax=[sp+0x178]                           :athlon-direct,athlon-load
;;	 15--> b  0: i  20 [sp+0x20]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i  22 ax=0x801f2e2858efc16                    :athlon-direct,athlon-ieu
;;	 16--> b  0: i 531 [sp+0xa8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  23 ax=0x636920d871574e69                   :athlon-direct,athlon-ieu
;;	 17--> b  0: i 532 [sp+0xa0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i  24 ax=0xba7c9045f12c7f99                   :athlon-direct,athlon-ieu
;;	 18--> b  0: i 533 [sp+0x98]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i  25 ax=0x24a19947b3916cf7                   :athlon-direct,athlon-ieu
;;	 19--> b  0: i 534 [sp+0x90]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i  26 ax=0x2ffd72dbd01adfb7                   :athlon-direct,athlon-ieu
;;	 20--> b  0: i 535 [sp+0x88]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 20--> b  0: i  27 ax=0xb8e1afed6a267e96                   :athlon-direct,athlon-ieu
;;	 21--> b  0: i 536 [sp+0x80]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 21--> b  0: i  28 ax=0x9216d5d98979fb1b                   :athlon-direct,athlon-ieu
;;	 22--> b  0: i 537 [sp+0x78]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 22--> b  0: i  29 ax=0xd1310ba698dfb5ac                   :athlon-direct,athlon-ieu
;;	 23--> b  0: i 538 [sp+0x70]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 23--> b  0: i  30 ax=0xc0ac29b7c97c50dd                   :athlon-direct,athlon-ieu
;;	 24--> b  0: i 539 [sp+0x68]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 24--> b  0: i  31 ax=0x3f84d5b5b5470917                   :athlon-direct,athlon-ieu
;;	 25--> b  0: i 540 [sp+0x60]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 25--> b  0: i  33 ax=0xbe5466cf34e90c6c                   :athlon-direct,athlon-ieu
;;	 26--> b  0: i 541 [sp+0x58]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 26--> b  0: i  34 ax=0xa4093822299f31d0                   :athlon-direct,athlon-ieu
;;	 27--> b  0: i 421 [sp+0xb0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 27--> b  0: i 820 pc=L355                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 27
;;   new head = 526
;;   new tail = 820

;;   ======================================================
;;   -- basic block 5 from 260 to 782 -- after reload
;;   ======================================================

;;	  0--> b  0: i 264 dx=zxn([si+0x1])                        :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 263 cx=`c64'                                :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 260 ax=zxn([si])                            :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i 276 r12=zxn([si+0x3])                       :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 265 r10=[dx*0x8+cx]                         :athlon-direct,athlon-load
;;	  4--> b  0: i 261 r11=[ax*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	  5--> b  0: i 267 dx=[dx*0x8+sp+0x1a0]                    :athlon-direct,athlon-load
;;	  7--> b  0: i 636 [sp+0x48]=r10                           :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 270 r10=[ax*0x8+cx]                         :athlon-direct,athlon-load
;;	  8--> b  0: i 272 ax=zxn([si+0x2])                        :athlon-direct,athlon-load,athlon-ieu
;;	 12--> b  0: i 273 r14=[ax*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	 12--> b  0: i 282 ax=[ax*0x8+cx]                          :athlon-direct,athlon-load
;;	 15--> b  0: i 637 [sp+0xc0]=r14                           :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i 277 r14=[r12*0x8+cx]                        :athlon-direct,athlon-load
;;	 16--> b  0: i 756 [sp+0xb0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i 638 [sp+0x50]=r14                           :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i 279 r14=[r12*0x8+sp+0x1a0]                  :athlon-direct,athlon-load
;;	 19--> b  0: i 284 r12=zxn([si+0x4])                       :athlon-direct,athlon-load,athlon-ieu
;;	 21--> b  0: i 639 [sp+0xc8]=r14                           :athlon-direct,athlon-agu,athlon-store
;;	 23--> b  0: i 285 r14=[r12*0x8+sp+0x1a0]                  :athlon-direct,athlon-load
;;	 26--> b  0: i 640 [sp+0xd0]=r14                           :athlon-direct,athlon-agu,athlon-store
;;	 26--> b  0: i 288 r14=zxn([si+0x5])                       :athlon-direct,athlon-load,athlon-ieu
;;	 30--> b  0: i 289 ax=[r14*0x8+cx]                         :athlon-direct,athlon-load
;;	 33--> b  0: i 641 [sp+0x58]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 33--> b  0: i 291 ax=[r14*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	 34--> b  0: i 300 r14=zxn([si+0x7])                       :athlon-direct,athlon-load,athlon-ieu
;;	 36--> b  0: i 642 [sp+0xd8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 36--> b  0: i 294 ax=[r12*0x8+cx]                         :athlon-direct,athlon-load
;;	 37--> b  0: i 296 r12=zxn([si+0x6])                       :athlon-direct,athlon-load,athlon-ieu
;;	 39--> b  0: i 643 [sp+0xb8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 41--> b  0: i 297 ax=[r12*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	 44--> b  0: i 644 [sp+0xe0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 44--> b  0: i 301 ax=[r14*0x8+cx]                         :athlon-direct,athlon-load
;;	 47--> b  0: i 645 [sp+0x60]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 47--> b  0: i 303 ax=[r14*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	 48--> b  0: i 312 r14=zxn([si+0x9])                       :athlon-direct,athlon-load,athlon-ieu
;;	 50--> b  0: i 646 [sp+0xe8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 50--> b  0: i 306 ax=[r12*0x8+cx]                         :athlon-direct,athlon-load
;;	 51--> b  0: i 308 r12=zxn([si+0x8])                       :athlon-direct,athlon-load,athlon-ieu
;;	 53--> b  0: i 647 [sp+0x68]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 55--> b  0: i 309 ax=[r12*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	 58--> b  0: i 648 [sp+0xf0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 58--> b  0: i 313 ax=[r14*0x8+cx]                         :athlon-direct,athlon-load
;;	 61--> b  0: i 649 [sp+0x70]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 61--> b  0: i 315 ax=[r14*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	 62--> b  0: i 324 r14=zxn([si+0xb])                       :athlon-direct,athlon-load,athlon-ieu
;;	 64--> b  0: i 650 [sp+0xf8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 64--> b  0: i 318 ax=[r12*0x8+cx]                         :athlon-direct,athlon-load
;;	 65--> b  0: i 320 r12=zxn([si+0xa])                       :athlon-direct,athlon-load,athlon-ieu
;;	 67--> b  0: i 651 [sp+0x78]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 69--> b  0: i 321 ax=[r12*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	 72--> b  0: i 652 [sp+0x100]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 72--> b  0: i 325 ax=[r14*0x8+cx]                         :athlon-direct,athlon-load
;;	 75--> b  0: i 653 [sp+0x80]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 75--> b  0: i 327 ax=[r14*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	 76--> b  0: i 336 r14=zxn([si+0xd])                       :athlon-direct,athlon-load,athlon-ieu
;;	 78--> b  0: i 654 [sp+0x108]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 78--> b  0: i 330 ax=[r12*0x8+cx]                         :athlon-direct,athlon-load
;;	 79--> b  0: i 332 r12=zxn([si+0xc])                       :athlon-direct,athlon-load,athlon-ieu
;;	 81--> b  0: i 655 [sp+0x88]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 83--> b  0: i 333 ax=[r12*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	 86--> b  0: i 656 [sp+0x110]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 86--> b  0: i 337 ax=[r14*0x8+cx]                         :athlon-direct,athlon-load
;;	 89--> b  0: i 657 [sp+0x90]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 89--> b  0: i 339 ax=[r14*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	 92--> b  0: i 658 [sp+0x118]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 92--> b  0: i 342 ax=[r12*0x8+cx]                         :athlon-direct,athlon-load
;;	 93--> b  0: i 344 r12=zxn([si+0xe])                       :athlon-direct,athlon-load,athlon-ieu
;;	 93--> b  0: i 348 r14=zxn([si+0xf])                       :athlon-direct,athlon-load,athlon-ieu
;;	 95--> b  0: i 659 [sp+0x98]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 97--> b  0: i 345 ax=[r12*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	100--> b  0: i 660 [sp+0x120]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	100--> b  0: i 349 ax=[r14*0x8+cx]                         :athlon-direct,athlon-load
;;	103--> b  0: i 661 [sp+0xa0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	103--> b  0: i 351 ax=[r14*0x8+sp+0x1a0]                   :athlon-direct,athlon-load
;;	106--> b  0: i 662 [sp+0x128]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	106--> b  0: i 354 ax=[r12*0x8+cx]                         :athlon-direct,athlon-load
;;	109--> b  0: i 663 [sp+0xa8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	109--> b  0: i 782 ax=[sp+0xb0]                            :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 109
;;   new head = 264
;;   new tail = 782

;;   ======================================================
;;   -- basic block 6 from 125 to 256 -- after reload
;;   ======================================================

;;	  0--> b  0: i 125 {r11=r11^[sp+0x48];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 133 {r10=r10^dx;clobber flags;}             :athlon-direct,athlon-ieu
;;	  0--> b  0: i 551 dx=[sp+0xc0]                            :athlon-direct,athlon-load
;;	  1--> b  0: i 141 {dx=dx^[sp+0x50];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i 149 {ax=ax^[sp+0xc8];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	  2--> b  0: i 569 r14=[sp+0xd8]                           :athlon-direct,athlon-load
;;	  2--> b  0: i 577 r12=[sp+0x38]                           :athlon-direct,athlon-load
;;	  4--> b  0: i 126 {r11=r11+r8;clobber flags;}             :athlon-direct,athlon-ieu
;;	  4--> b  0: i 127 {r11=r11+[sp];clobber flags;}           :athlon-direct,athlon-load,athlon-ieu
;;	  8--> b  0: i 128 {bp=bp^r11;clobber flags;}              :athlon-direct,athlon-ieu
;;	  8--> b  0: i 134 {r10=r10+r11;clobber flags;}            :athlon-direct,athlon-ieu
;;	  8--> b  0: i 747 r11=[sp+0x8]                            :athlon-direct,athlon-load
;;	  9--> b  0: i 129 {bp=bp<-<0x20;clobber flags;}           :athlon-direct,athlon-ieu
;;	 10--> b  0: i 130 {r9=r9+bp;clobber flags;}               :athlon-direct,athlon-ieu
;;	 11--> b  0: i 142 {dx=dx+r11;clobber flags;}              :athlon-direct,athlon-ieu
;;	 11--> b  0: i 131 {r8=r8^r9;clobber flags;}               :athlon-direct,athlon-ieu
;;	 12--> b  0: i 143 {dx=dx+di;clobber flags;}               :athlon-direct,athlon-ieu
;;	 12--> b  0: i 555 di=[sp+0x40]                            :athlon-direct,athlon-load
;;	 12--> b  0: i 132 {r8=r8>->0x19;clobber flags;}           :athlon-direct,athlon-ieu
;;	 13--> b  0: i 144 {r13=r13^dx;clobber flags;}             :athlon-direct,athlon-ieu
;;	 13--> b  0: i 150 {ax=ax+dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 13--> b  0: i 135 {r10=r10+r8;clobber flags;}             :athlon-direct,athlon-ieu
;;	 14--> b  0: i 145 {r13=r13<-<0x20;clobber flags;}         :athlon-direct,athlon-ieu
;;	 14--> b  0: i 136 {bp=bp^r10;clobber flags;}              :athlon-direct,athlon-ieu
;;	 14--> b  0: i 562 dx=[sp+0xd0]                            :athlon-direct,athlon-load
;;	 15--> b  0: i 146 {di=di+r13;clobber flags;}              :athlon-direct,athlon-ieu
;;	 15--> b  0: i 137 {bp=bp>->0x10;clobber flags;}           :athlon-direct,athlon-ieu
;;	 15--> b  0: i 157 {dx=dx^[sp+0x58];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 16--> b  0: i 147 {r11=r11^di;clobber flags;}             :athlon-direct,athlon-ieu
;;	 16--> b  0: i 785 cx=r9+bp                                :athlon-direct,athlon-agu,nothing
;;	 17--> b  0: i 148 {r11=r11>->0x19;clobber flags;}         :athlon-direct,athlon-ieu
;;	 18--> b  0: i 151 {ax=ax+r11;clobber flags;}              :athlon-direct,athlon-ieu
;;	 18--> b  0: i 139 {r8=r8^cx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 18--> b  0: i 749 [sp+0x48]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i 152 {r13=r13^ax;clobber flags;}             :athlon-direct,athlon-ieu
;;	 19--> b  0: i 140 {r8=r8>->0xb;clobber flags;}            :athlon-direct,athlon-ieu
;;	 20--> b  0: i 153 {r13=r13>->0x10;clobber flags;}         :athlon-direct,athlon-ieu
;;	 20--> b  0: i 550 [sp+0x130]=r8                           :athlon-direct,athlon-agu,athlon-store
;;	 21--> b  0: i 786 di=di+r13                               :athlon-direct,athlon-agu,nothing
;;	 23--> b  0: i 155 {r11=r11^di;clobber flags;}             :athlon-direct,athlon-ieu
;;	 23--> b  0: i 745 [sp+0x40]=di                            :athlon-direct,athlon-agu,athlon-store
;;	 23--> b  0: i 744 di=[sp+0x10]                            :athlon-direct,athlon-load
;;	 24--> b  0: i 156 {r11=r11>->0xb;clobber flags;}          :athlon-direct,athlon-ieu
;;	 26--> b  0: i 158 {dx=dx+di;clobber flags;}               :athlon-direct,athlon-ieu
;;	 26--> b  0: i 159 {dx=dx+[sp+0x18];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 26--> b  0: i 165 {r14=r14^[sp+0xb8];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	 27--> b  0: i 567 r9=di                                   :athlon-direct,athlon-ieu
;;	 27--> b  0: i 743 di=[sp+0x20]                            :athlon-direct,athlon-load
;;	 30--> b  0: i 570 cx=r14                                  :athlon-direct,athlon-ieu
;;	 30--> b  0: i 160 {bx=bx^dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 30--> b  0: i 579 r14=[sp+0x30]                           :athlon-direct,athlon-load
;;	 31--> b  0: i 166 {cx=cx+dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 31--> b  0: i 572 dx=[sp+0xe0]                            :athlon-direct,athlon-load
;;	 31--> b  0: i 173 {dx=dx^[sp+0x60];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 32--> b  0: i 161 {bx=bx<-<0x20;clobber flags;}           :athlon-direct,athlon-ieu
;;	 33--> b  0: i 162 {r15=r15+bx;clobber flags;}             :athlon-direct,athlon-ieu
;;	 34--> b  0: i 163 {r9=r9^r15;clobber flags;}              :athlon-direct,athlon-ieu
;;	 35--> b  0: i 174 {dx=dx+di;clobber flags;}               :athlon-direct,athlon-ieu
;;	 35--> b  0: i 175 {dx=dx+[sp+0x28];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 35--> b  0: i 164 {r9=r9>->0x19;clobber flags;}           :athlon-direct,athlon-ieu
;;	 36--> b  0: i 167 {cx=cx+r9;clobber flags;}               :athlon-direct,athlon-ieu
;;	 37--> b  0: i 168 {bx=bx^cx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 38--> b  0: i 169 {bx=bx>->0x10;clobber flags;}           :athlon-direct,athlon-ieu
;;	 39--> b  0: i 176 {r12=r12^dx;clobber flags;}             :athlon-direct,athlon-ieu
;;	 39--> b  0: i 170 {r15=r15+bx;clobber flags;}             :athlon-direct,athlon-ieu
;;	 40--> b  0: i 177 {r12=r12<-<0x20;clobber flags;}         :athlon-direct,athlon-ieu
;;	 40--> b  0: i 171 {r9=r9^r15;clobber flags;}              :athlon-direct,athlon-ieu
;;	 41--> b  0: i 178 {r14=r14+r12;clobber flags;}            :athlon-direct,athlon-ieu
;;	 41--> b  0: i 172 {r9=r9>->0xb;clobber flags;}            :athlon-direct,athlon-ieu
;;	 42--> b  0: i 179 {di=di^r14;clobber flags;}              :athlon-direct,athlon-ieu
;;	 43--> b  0: i 582 r8=di                                   :athlon-direct,athlon-ieu
;;	 43--> b  0: i 583 di=[sp+0xe8]                            :athlon-direct,athlon-load
;;	 43--> b  0: i 181 {di=di^[sp+0x68];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 44--> b  0: i 180 {r8=r8>->0x19;clobber flags;}           :athlon-direct,athlon-ieu
;;	 47--> b  0: i 182 {dx=dx+di;clobber flags;}               :athlon-direct,athlon-ieu
;;	 47--> b  0: i 586 di=[sp+0xf0]                            :athlon-direct,athlon-load
;;	 47--> b  0: i 189 {di=di^[sp+0x70];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 48--> b  0: i 183 {dx=dx+r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	 49--> b  0: i 184 {r12=r12^dx;clobber flags;}             :athlon-direct,athlon-ieu
;;	 50--> b  0: i 185 {r12=r12>->0x10;clobber flags;}         :athlon-direct,athlon-ieu
;;	 51--> b  0: i 186 {r14=r14+r12;clobber flags;}            :athlon-direct,athlon-ieu
;;	 51--> b  0: i 190 {r10=r10+di;clobber flags;}             :athlon-direct,athlon-ieu
;;	 51--> b  0: i 589 di=[sp+0xf8]                            :athlon-direct,athlon-load
;;	 52--> b  0: i 187 {r8=r8^r14;clobber flags;}              :athlon-direct,athlon-ieu
;;	 53--> b  0: i 188 {r8=r8>->0xb;clobber flags;}            :athlon-direct,athlon-ieu
;;	 53--> b  0: i 191 {r10=r10+r11;clobber flags;}            :athlon-direct,athlon-ieu
;;	 53--> b  0: i 197 {di=di^[sp+0x78];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 54--> b  0: i 192 {r12=r12^r10;clobber flags;}            :athlon-direct,athlon-ieu
;;	 55--> b  0: i 193 {r12=r12<-<0x20;clobber flags;}         :athlon-direct,athlon-ieu
;;	 56--> b  0: i 194 {r15=r15+r12;clobber flags;}            :athlon-direct,athlon-ieu
;;	 57--> b  0: i 195 {r11=r11^r15;clobber flags;}            :athlon-direct,athlon-ieu
;;	 57--> b  0: i 198 {r10=r10+di;clobber flags;}             :athlon-direct,athlon-ieu
;;	 58--> b  0: i 196 {r11=r11>->0x19;clobber flags;}         :athlon-direct,athlon-ieu
;;	 59--> b  0: i 199 {r10=r10+r11;clobber flags;}            :athlon-direct,athlon-ieu
;;	 60--> b  0: i 200 {r12=r12^r10;clobber flags;}            :athlon-direct,athlon-ieu
;;	 60--> b  0: i 742 [sp]=r10                                :athlon-direct,athlon-agu,athlon-store
;;	 60--> b  0: i 599 r10=[sp+0x100]                          :athlon-direct,athlon-load
;;	 61--> b  0: i 201 {r12=r12>->0x10;clobber flags;}         :athlon-direct,athlon-ieu
;;	 62--> b  0: i 202 {r15=r15+r12;clobber flags;}            :athlon-direct,athlon-ieu
;;	 62--> b  0: i 741 [sp+0x38]=r12                           :athlon-direct,athlon-agu,athlon-store
;;	 63--> b  0: i 203 {r11=r11^r15;clobber flags;}            :athlon-direct,athlon-ieu
;;	 64--> b  0: i 204 {r11=r11>->0xb;clobber flags;}          :athlon-direct,athlon-ieu
;;	 65--> b  0: i 598 [sp+0x8]=r11                            :athlon-direct,athlon-agu,athlon-store
;;	 65--> b  0: i 205 {r10=r10^[sp+0x80];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	 69--> b  0: i 206 {ax=ax+r10;clobber flags;}              :athlon-direct,athlon-ieu
;;	 69--> b  0: i 602 r10=[sp+0x108]                          :athlon-direct,athlon-load
;;	 69--> b  0: i 213 {r10=r10^[sp+0x88];clobber flags;}      :athlon-direct,athlon-load,athlon-ieu
;;	 70--> b  0: i 207 {ax=ax+r9;clobber flags;}               :athlon-direct,athlon-ieu
;;	 71--> b  0: i 208 {bp=bp^ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	 72--> b  0: i 209 {bp=bp<-<0x20;clobber flags;}           :athlon-direct,athlon-ieu
;;	 73--> b  0: i 210 {r14=r14+bp;clobber flags;}             :athlon-direct,athlon-ieu
;;	 73--> b  0: i 214 {ax=ax+r10;clobber flags;}              :athlon-direct,athlon-ieu
;;	 74--> b  0: i 211 {r9=r9^r14;clobber flags;}              :athlon-direct,athlon-ieu
;;	 75--> b  0: i 212 {r9=r9>->0x19;clobber flags;}           :athlon-direct,athlon-ieu
;;	 76--> b  0: i 787 di=ax+r9                                :athlon-direct,athlon-agu,nothing
;;	 76--> b  0: i 612 ax=[sp+0x48]                            :athlon-direct,athlon-load
;;	 78--> b  0: i 216 {bp=bp^di;clobber flags;}               :athlon-direct,athlon-ieu
;;	 79--> b  0: i 217 {bp=bp>->0x10;clobber flags;}           :athlon-direct,athlon-ieu
;;	 80--> b  0: i 218 {r14=r14+bp;clobber flags;}             :athlon-direct,athlon-ieu
;;	 81--> b  0: i 219 {r9=r9^r14;clobber flags;}              :athlon-direct,athlon-ieu
;;	 81--> b  0: i 740 [sp+0x30]=r14                           :athlon-direct,athlon-agu,athlon-store
;;	 82--> b  0: i 220 {r9=r9>->0xb;clobber flags;}            :athlon-direct,athlon-ieu
;;	 83--> b  0: i 608 [sp+0x10]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	 83--> b  0: i 609 r9=[sp+0x110]                           :athlon-direct,athlon-load
;;	 84--> b  0: i 221 {r9=r9^[sp+0x90];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 88--> b  0: i 222 {cx=cx+r9;clobber flags;}               :athlon-direct,athlon-ieu
;;	 89--> b  0: i 223 {cx=cx+r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	 90--> b  0: i 224 {r13=r13^cx;clobber flags;}             :athlon-direct,athlon-ieu
;;	 90--> b  0: i 254 {si=si+0x10;clobber flags;}             :athlon-direct,athlon-ieu
;;	 91--> b  0: i 225 {r13=r13<-<0x20;clobber flags;}         :athlon-direct,athlon-ieu
;;	 92--> b  0: i 788 r9=ax+r13                               :athlon-direct,athlon-agu,nothing
;;	 92--> b  0: i 613 ax=[sp+0x118]                           :athlon-direct,athlon-load
;;	 92--> b  0: i 229 {ax=ax^[sp+0x98];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 94--> b  0: i 227 {r8=r8^r9;clobber flags;}               :athlon-direct,athlon-ieu
;;	 95--> b  0: i 228 {r8=r8>->0x19;clobber flags;}           :athlon-direct,athlon-ieu
;;	 96--> b  0: i 230 {cx=cx+ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	 96--> b  0: i 620 ax=[sp+0x120]                           :athlon-direct,athlon-load
;;	 96--> b  0: i 237 {ax=ax^[sp+0xa0];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	 97--> b  0: i 231 {cx=cx+r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	 98--> b  0: i 232 {r13=r13^cx;clobber flags;}             :athlon-direct,athlon-ieu
;;	 98--> b  0: i 739 [sp+0x18]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 99--> b  0: i 233 {r13=r13>->0x10;clobber flags;}         :athlon-direct,athlon-ieu
;;	100--> b  0: i 234 {r9=r9+r13;clobber flags;}              :athlon-direct,athlon-ieu
;;	100--> b  0: i 238 {dx=dx+ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	100--> b  0: i 624 ax=[sp+0x40]                            :athlon-direct,athlon-load
;;	101--> b  0: i 235 {r8=r8^r9;clobber flags;}               :athlon-direct,athlon-ieu
;;	102--> b  0: i 618 cx=r8                                   :athlon-direct,athlon-ieu
;;	102--> b  0: i 738 r8=[sp+0x130]                           :athlon-direct,athlon-load
;;	103--> b  0: i 236 {cx=cx>->0xb;clobber flags;}            :athlon-direct,athlon-ieu
;;	104--> b  0: i 619 [sp+0x20]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	104--> b  0: i 627 cx=[sp+0x128]                           :athlon-direct,athlon-load
;;	105--> b  0: i 239 {dx=dx+r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	105--> b  0: i 245 {cx=cx^[sp+0xa8];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	106--> b  0: i 240 {bx=bx^dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	107--> b  0: i 241 {bx=bx<-<0x20;clobber flags;}           :athlon-direct,athlon-ieu
;;	108--> b  0: i 242 {ax=ax+bx;clobber flags;}               :athlon-direct,athlon-ieu
;;	109--> b  0: i 243 {r8=r8^ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	109--> b  0: i 246 {dx=dx+cx;clobber flags;}               :athlon-direct,athlon-ieu
;;	110--> b  0: i 244 {r8=r8>->0x19;clobber flags;}           :athlon-direct,athlon-ieu
;;	111--> b  0: i 247 {dx=dx+r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	112--> b  0: i 248 {bx=bx^dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	112--> b  0: i 737 [sp+0x28]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	113--> b  0: i 249 {bx=bx>->0x10;clobber flags;}           :athlon-direct,athlon-ieu
;;	114--> b  0: i 250 {ax=ax+bx;clobber flags;}               :athlon-direct,athlon-ieu
;;	115--> b  0: i 251 {r8=r8^ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	115--> b  0: i 736 [sp+0x40]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	116--> b  0: i 252 {r8=r8>->0xb;clobber flags;}            :athlon-direct,athlon-ieu
;;	116--> b  0: i 255 {flags=cmp([sp+0x13c]-0x1,0);[sp+0x13c]=[sp+0x13c]-0x1;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	120--> b  0: i 256 pc={(flags!=0)?L822:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 120
;;   new head = 125
;;   new tail = 256

;;   ======================================================
;;   -- basic block 7 from 425 to 811 -- after reload
;;   ======================================================

;;	  0--> b  0: i 425 si=r15                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 430 r15=[sp+0x28]                           :athlon-direct,athlon-load
;;	  0--> b  0: i 665 [sp+0x28]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 669 xmm0=[sp]                               :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	  1--> b  0: i 671 [sp]=di                                 :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 667 xmm1=[sp+0x28]                          :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	  2--> b  0: i 362 xmm0=vec_concat(xmm0,[sp])              :athlon-direct,athlon-fpsched,athlon-faddmul
;;	  3--> b  0: i 361 xmm1=vec_concat(xmm1,[sp+0x40])         :athlon-direct,athlon-fpsched,athlon-faddmul
;;	  3--> b  0: i 673 xmm3=[sp+0x180]                         :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	  4--> b  0: i 364 xmm3=vec_concat(xmm3,[sp+0x188])        :athlon-direct,athlon-fpsched,athlon-faddmul
;;	  4--> b  0: i 678 ax=[sp+0x270]                           :athlon-direct,athlon-load
;;	  4--> b  0: i 682 [sp]=r15                                :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 363 xmm0=xmm0^xmm1                          :athlon-double,athlon-fpsched,athlon-fmul
;;	  6--> b  0: i 676 xmm1=[sp+0x140]                         :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	  7--> b  0: i 366 xmm1=vec_concat(xmm1,[sp+0x148])        :athlon-direct,athlon-fpsched,athlon-faddmul
;;	  7--> b  0: i 687 xmm2=[sp+0x190]                         :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	  8--> b  0: i 365 xmm0=xmm0^xmm3                          :athlon-double,athlon-fpsched,athlon-fmul
;;	  8--> b  0: i 373 xmm2=vec_concat(xmm2,[sp+0x198])        :athlon-direct,athlon-fpsched,athlon-faddmul
;;	 11--> b  0: i 367 xmm0=xmm0^xmm1                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 12--> b  0: i 680 xmm1=[sp+0x18]                          :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	 13--> b  0: i 370 xmm1=vec_concat(xmm1,[sp])              :athlon-direct,athlon-fpsched,athlon-faddmul
;;	 13--> b  0: i 684 [sp]=si                                 :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i 368 [ax+0x88]=unspec[xmm0] 104              :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 18--> b  0: i 755 xmm0=[sp]                               :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	 18--> b  0: i 694 [sp]=bp                                 :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i 371 xmm0=vec_concat(xmm0,[sp+0x30])         :athlon-direct,athlon-fpsched,athlon-faddmul
;;	 21--> b  0: i 372 xmm0=xmm0^xmm1                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 22--> b  0: i 690 xmm1=[sp+0x150]                         :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	 23--> b  0: i 375 xmm1=vec_concat(xmm1,[sp+0x158])        :athlon-direct,athlon-fpsched,athlon-faddmul
;;	 24--> b  0: i 374 xmm0=xmm0^xmm2                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 27--> b  0: i 376 xmm0=xmm0^xmm1                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 30--> b  0: i 377 [ax+0x98]=unspec[xmm0] 104              :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 34--> b  0: i 697 xmm0=[sp]                               :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	 34--> b  0: i 696 [sp]=r13                                :athlon-direct,athlon-agu,athlon-store
;;	 35--> b  0: i 379 xmm0=vec_concat(xmm0,[sp])              :athlon-direct,athlon-fpsched,athlon-faddmul
;;	 35--> b  0: i 699 [sp]=r8                                 :athlon-direct,athlon-agu,athlon-store
;;	 36--> b  0: i 701 xmm1=[sp]                               :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	 37--> b  0: i 380 xmm1=vec_concat(xmm1,[sp+0x8])          :athlon-direct,athlon-fpsched,athlon-faddmul
;;	 39--> b  0: i 381 xmm0=xmm0^xmm1                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 42--> b  0: i 383 xmm0=xmm0^xmm3                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 43--> b  0: i 703 xmm3=[sp+0x160]                         :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	 44--> b  0: i 384 xmm3=vec_concat(xmm3,[sp+0x168])        :athlon-direct,athlon-fpsched,athlon-faddmul
;;	 44--> b  0: i 710 [sp]=bx                                 :athlon-direct,athlon-agu,athlon-store
;;	 45--> b  0: i 712 xmm1=[sp]                               :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	 46--> b  0: i 385 xmm0=xmm0^xmm3                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 46--> b  0: i 389 xmm1=vec_concat(xmm1,[sp+0x38])         :athlon-direct,athlon-fpsched,athlon-faddmul
;;	 49--> b  0: i 386 [ax+0xa8]=unspec[xmm0] 104              :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 53--> b  0: i 707 xmm0=[sp+0x10]                          :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	 54--> b  0: i 388 xmm0=vec_concat(xmm0,[sp+0x20])         :athlon-direct,athlon-fpsched,athlon-faddmul
;;	 56--> b  0: i 390 xmm0=xmm0^xmm1                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 59--> b  0: i 392 xmm0=xmm0^xmm2                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 60--> b  0: i 714 xmm2=[sp+0x170]                         :athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fany)
;;	 61--> b  0: i 393 xmm2=vec_concat(xmm2,[sp+0x178])        :athlon-direct,athlon-fpsched,athlon-faddmul
;;	 63--> b  0: i 394 xmm0=xmm0^xmm2                          :athlon-double,athlon-fpsched,athlon-fmul
;;	 66--> b  0: i 395 [ax+0xb8]=unspec[xmm0] 104              :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	 67--> b  0: i 817 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 67--> b  0: i 401 use ax                                  :nothing
;;	 68--> b  0: i 801 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	 70--> b  0: i 802 {sp=sp+0x228;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 71--> b  0: i 803 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 72--> b  0: i 804 si=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 73--> b  0: i 805 di=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 74--> b  0: i 806 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 75--> b  0: i 807 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 76--> b  0: i 808 r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 77--> b  0: i 809 r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 78--> b  0: i 810 r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 79--> b  0: i 811 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 79
;;   new head = 425
;;   new tail = 811

;;   ======================================================
;;   -- basic block 8 from 9 to 823 -- after reload
;;   ======================================================

;;	  0--> b  0: i   9 ax=0x3f84d5b5b5470917                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  10 bx=0xc0ac29b7c97c50dd                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  11 r13=0xbe5466cf34e90c6c                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 525 [sp+0x38]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  12 bp=0x452821e638d01377                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 823 pc=L121                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 9
;;   new tail = 823



starting the processing of deferred insns
ending the processing of deferred insns


compress64

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={93d,116u} r1={24d,45u,31e} r2={17d,51u} r3={17d,22u} r4={8d,23u} r5={18d,24u} r6={13d,16u} r7={19d,245u} r16={1e} r17={138d,2u} r21={21d,20u} r22={13d,12u} r23={5d,5u} r24={5d,5u} r37={19d,25u} r38={19d,25u} r39={17d,19u} r40={15d,20u} r41={20d,31u,7e} r42={12d,15u} r43={26d,38u} r44={14d,20u} 
;;    total ref usage 1351{533d,779u,39e} in 502{502 regular + 0 call} insns.
(note 5 0 38 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 588, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 38 [r9] 40 [r11] 41 [r12] 43 [r14] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 38 [r9] 40 [r11] 41 [r12] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 38 5 8 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 8 38 789 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 789 8 790 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) blake_ref.c:106 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn/f 790 789 791 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) blake_ref.c:106 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn/f:TI 791 790 792 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) blake_ref.c:106 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f 792 791 793 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) blake_ref.c:106 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f:TI 793 792 794 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) blake_ref.c:106 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f 794 793 795 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 5 di)) blake_ref.c:106 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil)))
(insn/f:TI 795 794 796 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 4 si)) blake_ref.c:106 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si)
        (nil)))
(insn/f 796 795 797 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) blake_ref.c:106 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 797 796 798 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -552 [0xfffffffffffffdd8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:106 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -552 [0xfffffffffffffdd8])))
            (nil))))
(insn:TI 798 797 799 2 (unspec_volatile [
            (reg/f:DI 7 sp)
        ] UNSPECV_PROLOGUE_USE) blake_ref.c:106 679 {prologue_use}
     (nil))
(note 799 798 49 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 49 799 58 2 (set (reg:DI 0 ax [orig:355 MEM[(const BitSequence *)datablock_5(D) + 24B] ] [355])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8])
        (nil)))
(insn 58 49 97 2 (set (reg:DI 3 bx [orig:358 MEM[(const BitSequence *)datablock_5(D) + 48B] ] [358])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8])
        (nil)))
(insn 97 58 43 2 (set (reg:DI 41 r12 [368])
        (const_int 2611923443488327891 [0x243f6a8885a308d3])) blake_ref.c:155 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 2611923443488327891 [0x243f6a8885a308d3])
        (nil)))
(insn:TI 43 97 40 2 (set (reg:DI 6 bp [orig:353 MEM[(const BitSequence *)datablock_5(D) + 8B] ] [353])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8])
        (nil)))
(insn 40 43 100 2 (set (reg:DI 40 r11 [orig:352 MEM[(const BitSequence *)datablock_5(D)] ] [352])
        (mem:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8])
        (nil)))
(insn 100 40 46 2 (set (reg:DI 4 si [369])
        (const_int 1376283091369227076 [0x13198a2e03707344])) blake_ref.c:156 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 1376283091369227076 [0x13198a2e03707344])
        (nil)))
(insn:TI 46 100 70 2 (set (reg:DI 38 r9 [orig:354 MEM[(const BitSequence *)datablock_5(D) + 16B] ] [354])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8])
        (nil)))
(insn 70 46 50 2 (set (reg:DI 43 r14 [orig:362 MEM[(const BitSequence *)datablock_5(D) + 80B] ] [362])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8])
        (nil)))
(insn:TI 50 70 59 2 (set (reg:DI 0 ax [orig:299 D.5867 ] [299])
        (bswap:DI (reg:DI 0 ax [orig:299 D.5867 ] [299]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8]))
        (nil)))
(insn 59 50 6 2 (set (reg:DI 3 bx [orig:311 D.5867 ] [311])
        (bswap:DI (reg:DI 3 bx [orig:311 D.5867 ] [311]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8]))
        (nil)))
(insn 6 59 733 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])
        (reg:DI 2 cx [ state ])) blake_ref.c:106 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn:TI 733 6 51 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 200 [0xc8])) [6 %sfp+-344 S8 A64])
        (reg:DI 0 ax [orig:299 D.5867 ] [299])) 89 {*movdi_internal}
     (nil))
(insn 51 733 434 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 440 [0x1b8])) [3 m+24 S8 A64])
        (reg:DI 0 ax [orig:299 D.5867 ] [299])) blake_ref.c:132 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:299 D.5867 ] [299])
        (nil)))
(insn 434 51 52 2 (set (reg:DI 5 di [orig:291 D.5867 ] [291])
        (reg:DI 6 bp [orig:353 MEM[(const BitSequence *)datablock_5(D) + 8B] ] [353])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 6 bp [orig:353 MEM[(const BitSequence *)datablock_5(D) + 8B] ] [353])
        (nil)))
(insn:TI 52 434 730 2 (set (reg:DI 0 ax [orig:356 MEM[(const BitSequence *)datablock_5(D) + 32B] ] [356])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8])
        (nil)))
(insn 730 52 47 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [6 %sfp+-320 S8 A64])
        (reg:DI 3 bx [orig:311 D.5867 ] [311])) 89 {*movdi_internal}
     (nil))
(insn 47 730 60 2 (set (reg:DI 38 r9 [orig:295 D.5867 ] [295])
        (bswap:DI (reg:DI 38 r9 [orig:295 D.5867 ] [295]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8]))
        (nil)))
(insn:TI 60 47 61 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 464 [0x1d0])) [3 m+48 S8 A128])
        (reg:DI 3 bx [orig:311 D.5867 ] [311])) blake_ref.c:135 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 3 bx [orig:311 D.5867 ] [311])
        (nil)))
(insn 61 60 71 2 (set (reg:DI 3 bx [orig:359 MEM[(const BitSequence *)datablock_5(D) + 56B] ] [359])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8])
        (nil)))
(insn 71 61 41 2 (set (reg:DI 43 r14 [orig:327 D.5867 ] [327])
        (bswap:DI (reg:DI 43 r14 [orig:327 D.5867 ] [327]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8]))
        (nil)))
(insn:TI 41 71 44 2 (set (reg:DI 40 r11 [orig:287 D.5867 ] [287])
        (bswap:DI (reg:DI 40 r11 [orig:352 MEM[(const BitSequence *)datablock_5(D)] ] [352]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8]))
        (nil)))
(insn 44 41 734 2 (set (reg:DI 5 di [orig:291 D.5867 ] [291])
        (bswap:DI (reg:DI 5 di [orig:291 D.5867 ] [291]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8]))
        (nil)))
(insn 734 44 53 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [6 %sfp+-352 S8 A64])
        (reg:DI 38 r9 [orig:295 D.5867 ] [295])) 89 {*movdi_internal}
     (nil))
(insn:TI 53 734 48 2 (set (reg:DI 0 ax [orig:303 D.5867 ] [303])
        (bswap:DI (reg:DI 0 ax [orig:303 D.5867 ] [303]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8]))
        (nil)))
(insn 48 53 42 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 432 [0x1b0])) [3 m+16 S8 A128])
        (reg:DI 38 r9 [orig:295 D.5867 ] [295])) blake_ref.c:131 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 38 r9 [orig:295 D.5867 ] [295])
        (nil)))
(insn 42 48 732 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 416 [0x1a0])) [3 m+0 S8 A128])
        (reg:DI 40 r11 [orig:287 D.5867 ] [287])) blake_ref.c:129 89 {*movdi_internal}
     (nil))
(insn:TI 732 42 54 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [6 %sfp+-336 S8 A64])
        (reg:DI 0 ax [orig:303 D.5867 ] [303])) 89 {*movdi_internal}
     (nil))
(insn 54 732 62 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 448 [0x1c0])) [3 m+32 S8 A128])
        (reg:DI 0 ax [orig:303 D.5867 ] [303])) blake_ref.c:133 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:303 D.5867 ] [303])
        (nil)))
(insn 62 54 55 2 (set (reg:DI 3 bx [orig:315 D.5867 ] [315])
        (bswap:DI (reg:DI 3 bx [orig:315 D.5867 ] [315]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8]))
        (nil)))
(insn:TI 55 62 45 2 (set (reg:DI 0 ax [orig:357 MEM[(const BitSequence *)datablock_5(D) + 40B] ] [357])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8])
        (nil)))
(insn 45 55 496 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 424 [0x1a8])) [3 m+8 S8 A64])
        (reg:DI 5 di [orig:291 D.5867 ] [291])) blake_ref.c:130 89 {*movdi_internal}
     (nil))
(insn 496 45 729 2 (set (reg:DI 38 r9 [orig:244 v$8 ] [244])
        (reg:DI 41 r12 [368])) blake_ref.c:155 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 41 r12 [368])
        (nil)))
(insn:TI 729 496 63 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 232 [0xe8])) [6 %sfp+-312 S8 A64])
        (reg:DI 3 bx [orig:315 D.5867 ] [315])) 89 {*movdi_internal}
     (nil))
(insn 63 729 726 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 472 [0x1d8])) [3 m+56 S8 A64])
        (reg:DI 3 bx [orig:315 D.5867 ] [315])) blake_ref.c:136 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 3 bx [orig:315 D.5867 ] [315])
        (nil)))
(insn:TI 726 63 72 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 256 [0x100])) [6 %sfp+-288 S8 A64])
        (reg:DI 43 r14 [orig:327 D.5867 ] [327])) 89 {*movdi_internal}
     (nil))
(insn 72 726 56 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 496 [0x1f0])) [3 m+80 S8 A128])
        (reg:DI 43 r14 [orig:327 D.5867 ] [327])) blake_ref.c:139 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:327 D.5867 ] [327])
        (nil)))
(insn:TI 56 72 731 2 (set (reg:DI 0 ax [orig:307 D.5867 ] [307])
        (bswap:DI (reg:DI 0 ax [orig:307 D.5867 ] [307]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8]))
        (nil)))
(insn:TI 731 56 57 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 216 [0xd8])) [6 %sfp+-328 S8 A64])
        (reg:DI 0 ax [orig:307 D.5867 ] [307])) 89 {*movdi_internal}
     (nil))
(insn 57 731 64 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 456 [0x1c8])) [3 m+40 S8 A64])
        (reg:DI 0 ax [orig:307 D.5867 ] [307])) blake_ref.c:134 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:307 D.5867 ] [307])
        (nil)))
(insn:TI 64 57 65 2 (set (reg:DI 0 ax [orig:360 MEM[(const BitSequence *)datablock_5(D) + 64B] ] [360])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8])
        (nil)))
(insn:TI 65 64 728 2 (set (reg:DI 0 ax [orig:319 D.5867 ] [319])
        (bswap:DI (reg:DI 0 ax [orig:319 D.5867 ] [319]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8]))
        (nil)))
(insn:TI 728 65 66 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [6 %sfp+-304 S8 A64])
        (reg:DI 0 ax [orig:319 D.5867 ] [319])) 89 {*movdi_internal}
     (nil))
(insn 66 728 67 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 480 [0x1e0])) [3 m+64 S8 A128])
        (reg:DI 0 ax [orig:319 D.5867 ] [319])) blake_ref.c:137 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:319 D.5867 ] [319])
        (nil)))
(insn:TI 67 66 68 2 (set (reg:DI 0 ax [orig:361 MEM[(const BitSequence *)datablock_5(D) + 72B] ] [361])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8])
        (nil)))
(insn:TI 68 67 727 2 (set (reg:DI 0 ax [orig:323 D.5867 ] [323])
        (bswap:DI (reg:DI 0 ax [orig:323 D.5867 ] [323]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8]))
        (nil)))
(insn:TI 727 68 69 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 248 [0xf8])) [6 %sfp+-296 S8 A64])
        (reg:DI 0 ax [orig:323 D.5867 ] [323])) 89 {*movdi_internal}
     (nil))
(insn 69 727 73 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 488 [0x1e8])) [3 m+72 S8 A64])
        (reg:DI 0 ax [orig:323 D.5867 ] [323])) blake_ref.c:138 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:323 D.5867 ] [323])
        (nil)))
(insn:TI 73 69 76 2 (set (reg:DI 43 r14 [orig:363 MEM[(const BitSequence *)datablock_5(D) + 88B] ] [363])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8])
        (nil)))
(insn 76 73 82 2 (set (reg:DI 0 ax [orig:364 MEM[(const BitSequence *)datablock_5(D) + 96B] ] [364])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8])
        (nil)))
(insn:TI 82 76 77 2 (set (reg:DI 44 r15 [orig:366 MEM[(const BitSequence *)datablock_5(D) + 112B] ] [366])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8])
        (nil)))
(insn:TI 77 82 74 2 (set (reg:DI 0 ax [orig:335 D.5867 ] [335])
        (bswap:DI (reg:DI 0 ax [orig:335 D.5867 ] [335]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8]))
        (nil)))
(insn 74 77 724 2 (set (reg:DI 43 r14 [orig:331 D.5867 ] [331])
        (bswap:DI (reg:DI 43 r14 [orig:331 D.5867 ] [331]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8]))
        (nil)))
(insn:TI 724 74 78 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 272 [0x110])) [6 %sfp+-272 S8 A64])
        (reg:DI 0 ax [orig:335 D.5867 ] [335])) 89 {*movdi_internal}
     (nil))
(insn 78 724 83 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 512 [0x200])) [3 m+96 S8 A128])
        (reg:DI 0 ax [orig:335 D.5867 ] [335])) blake_ref.c:141 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:335 D.5867 ] [335])
        (nil)))
(insn 83 78 79 2 (set (reg:DI 44 r15 [orig:343 D.5867 ] [343])
        (bswap:DI (reg:DI 44 r15 [orig:343 D.5867 ] [343]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8]))
        (nil)))
(insn:TI 79 83 722 2 (set (reg:DI 0 ax [orig:365 MEM[(const BitSequence *)datablock_5(D) + 104B] ] [365])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8])
        (nil)))
(insn 722 79 84 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 288 [0x120])) [6 %sfp+-256 S8 A64])
        (reg:DI 44 r15 [orig:343 D.5867 ] [343])) 89 {*movdi_internal}
     (nil))
(insn:TI 84 722 85 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 528 [0x210])) [3 m+112 S8 A128])
        (reg:DI 44 r15 [orig:343 D.5867 ] [343])) blake_ref.c:143 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 44 r15 [orig:343 D.5867 ] [343])
        (nil)))
(insn 85 84 725 2 (set (reg:DI 44 r15 [orig:367 MEM[(const BitSequence *)datablock_5(D) + 120B] ] [367])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                (const_int 120 [0x78])) [0 MEM[(const BitSequence *)datablock_5(D) + 120B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
        (nil)))
(insn:TI 725 85 75 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 264 [0x108])) [6 %sfp+-280 S8 A64])
        (reg:DI 43 r14 [orig:331 D.5867 ] [331])) 89 {*movdi_internal}
     (nil))
(insn 75 725 103 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 504 [0x1f8])) [3 m+88 S8 A64])
        (reg:DI 43 r14 [orig:331 D.5867 ] [331])) blake_ref.c:140 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:331 D.5867 ] [331])
        (nil)))
(insn 103 75 80 2 (set (reg:DI 43 r14 [370])
        (const_int -6626703657320631856 [0xa4093822299f31d0])) blake_ref.c:157 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int -6626703657320631856 [0xa4093822299f31d0])
        (nil)))
(insn:TI 80 103 723 2 (set (reg:DI 0 ax [orig:339 D.5867 ] [339])
        (bswap:DI (reg:DI 0 ax [orig:339 D.5867 ] [339]))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:351 datablock ] [351])
                    (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8]))
        (nil)))
(insn:TI 723 80 81 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 280 [0x118])) [6 %sfp+-264 S8 A64])
        (reg:DI 0 ax [orig:339 D.5867 ] [339])) 89 {*movdi_internal}
     (nil))
(insn 81 723 86 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 520 [0x208])) [3 m+104 S8 A64])
        (reg:DI 0 ax [orig:339 D.5867 ] [339])) blake_ref.c:142 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:339 D.5867 ] [339])
        (nil)))
(insn 86 81 88 2 (set (reg:DI 44 r15 [orig:347 D.5867 ] [347])
        (bswap:DI (reg:DI 44 r15 [orig:347 D.5867 ] [347]))) 766 {*bswapdi2}
     (nil))
(insn:TI 88 86 721 2 (set (reg:DI 0 ax [orig:119 v$0 ] [119])
        (mem:DI (plus:DI (reg:DI 2 cx [560])
                (const_int 136 [0x88])) [3 state_534(D)->h64+0 S8 A64])) blake_ref.c:147 89 {*movdi_internal}
     (nil))
(insn 721 88 87 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 296 [0x128])) [6 %sfp+-248 S8 A64])
        (reg:DI 44 r15 [orig:347 D.5867 ] [347])) 89 {*movdi_internal}
     (nil))
(insn:TI 87 721 479 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 536 [0x218])) [3 m+120 S8 A64])
        (reg:DI 44 r15 [orig:347 D.5867 ] [347])) blake_ref.c:144 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 44 r15 [orig:347 D.5867 ] [347])
        (nil)))
(insn:TI 479 87 89 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [6 %sfp+-224 S8 A64])
        (reg:DI 0 ax [orig:119 v$0 ] [119])) blake_ref.c:147 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:119 v$0 ] [119])
        (nil)))
(insn 89 479 481 2 (set (reg:DI 0 ax [orig:120 v$1 ] [120])
        (mem:DI (plus:DI (reg:DI 2 cx [562])
                (const_int 144 [0x90])) [3 state_534(D)->h64+8 S8 A64])) blake_ref.c:148 89 {*movdi_internal}
     (nil))
(insn:TI 481 89 90 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 328 [0x148])) [6 %sfp+-216 S8 A64])
        (reg:DI 0 ax [orig:120 v$1 ] [120])) blake_ref.c:148 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:120 v$1 ] [120])
        (nil)))
(insn 90 481 483 2 (set (reg:DI 0 ax [orig:121 v$2 ] [121])
        (mem:DI (plus:DI (reg:DI 2 cx [564])
                (const_int 152 [0x98])) [3 state_534(D)->h64+16 S8 A64])) blake_ref.c:149 89 {*movdi_internal}
     (nil))
(insn:TI 483 90 91 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [6 %sfp+-208 S8 A64])
        (reg:DI 0 ax [orig:121 v$2 ] [121])) blake_ref.c:149 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:121 v$2 ] [121])
        (nil)))
(insn 91 483 485 2 (set (reg:DI 0 ax [orig:122 v$3 ] [122])
        (mem:DI (plus:DI (reg:DI 2 cx [566])
                (const_int 160 [0xa0])) [3 state_534(D)->h64+24 S8 A64])) blake_ref.c:150 89 {*movdi_internal}
     (nil))
(insn:TI 485 91 92 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 344 [0x158])) [6 %sfp+-200 S8 A64])
        (reg:DI 0 ax [orig:122 v$3 ] [122])) blake_ref.c:150 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:122 v$3 ] [122])
        (nil)))
(insn 92 485 487 2 (set (reg:DI 0 ax [orig:123 v$4 ] [123])
        (mem:DI (plus:DI (reg:DI 2 cx [568])
                (const_int 168 [0xa8])) [3 state_534(D)->h64+32 S8 A64])) blake_ref.c:151 89 {*movdi_internal}
     (nil))
(insn:TI 487 92 93 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [6 %sfp+-192 S8 A64])
        (reg:DI 0 ax [orig:123 v$4 ] [123])) blake_ref.c:151 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:123 v$4 ] [123])
        (nil)))
(insn 93 487 489 2 (set (reg:DI 0 ax [orig:124 v$5 ] [124])
        (mem:DI (plus:DI (reg:DI 2 cx [570])
                (const_int 176 [0xb0])) [3 state_534(D)->h64+40 S8 A64])) blake_ref.c:152 89 {*movdi_internal}
     (nil))
(insn:TI 489 93 94 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 360 [0x168])) [6 %sfp+-184 S8 A64])
        (reg:DI 0 ax [orig:124 v$5 ] [124])) blake_ref.c:152 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:124 v$5 ] [124])
        (nil)))
(insn 94 489 491 2 (set (reg:DI 0 ax [orig:125 v$6 ] [125])
        (mem:DI (plus:DI (reg:DI 2 cx [572])
                (const_int 184 [0xb8])) [3 state_534(D)->h64+48 S8 A64])) blake_ref.c:153 89 {*movdi_internal}
     (nil))
(insn:TI 491 94 95 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 368 [0x170])) [6 %sfp+-176 S8 A64])
        (reg:DI 0 ax [orig:125 v$6 ] [125])) blake_ref.c:153 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:125 v$6 ] [125])
        (nil)))
(insn 95 491 493 2 (set (reg:DI 0 ax [orig:126 v$7 ] [126])
        (mem:DI (plus:DI (reg:DI 2 cx [574])
                (const_int 192 [0xc0])) [3 state_534(D)->h64+56 S8 A64])) blake_ref.c:154 89 {*movdi_internal}
     (nil))
(insn:TI 493 95 96 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 376 [0x178])) [6 %sfp+-168 S8 A64])
        (reg:DI 0 ax [orig:126 v$7 ] [126])) blake_ref.c:154 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:126 v$7 ] [126])
        (nil)))
(insn 96 493 720 2 (set (reg:DI 0 ax [orig:127 D.5863 ] [127])
        (mem:DI (plus:DI (reg:DI 2 cx [576])
                (const_int 344 [0x158])) [3 state_534(D)->salt64+0 S8 A64])) blake_ref.c:155 89 {*movdi_internal}
     (nil))
(insn:TI 720 96 98 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 384 [0x180])) [6 %sfp+-160 S8 A64])
        (reg:DI 0 ax [orig:127 D.5863 ] [127])) blake_ref.c:155 89 {*movdi_internal}
     (nil))
(insn 98 720 99 2 (parallel [
            (set (reg:DI 38 r9 [orig:244 v$8 ] [244])
                (xor:DI (reg:DI 38 r9 [orig:244 v$8 ] [244])
                    (reg:DI 0 ax [orig:127 D.5863 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:155 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:127 D.5863 ] [127])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 99 98 818 2 (set (reg:DI 0 ax [orig:128 D.5863 ] [128])
        (mem:DI (plus:DI (reg:DI 2 cx [580])
                (const_int 352 [0x160])) [3 state_534(D)->salt64+8 S8 A64])) blake_ref.c:156 89 {*movdi_internal}
     (nil))
(insn:TI 818 99 101 2 (set (reg:SI 1 dx)
        (mem:SI (plus:DI (reg:DI 2 cx [592])
                (const_int 12 [0xc])) [2 state_534(D)->nullt+0 S4 A32])) blake_ref.c:159 90 {*movsi_internal}
     (nil))
(insn:TI 101 818 719 2 (parallel [
            (set (reg:DI 4 si [orig:262 v$9 ] [262])
                (xor:DI (reg:DI 4 si [orig:262 v$9 ] [262])
                    (reg:DI 0 ax [orig:128 D.5863 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:156 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:128 D.5863 ] [128])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 719 101 102 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 392 [0x188])) [6 %sfp+-152 S8 A64])
        (reg:DI 0 ax [orig:128 D.5863 ] [128])) blake_ref.c:156 89 {*movdi_internal}
     (nil))
(insn 102 719 502 2 (set (reg:DI 0 ax [orig:129 D.5863 ] [129])
        (mem:DI (plus:DI (reg:DI 2 cx [584])
                (const_int 360 [0x168])) [3 state_534(D)->salt64+16 S8 A64])) blake_ref.c:157 89 {*movdi_internal}
     (nil))
(insn:TI 502 102 104 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-480 S8 A64])
        (reg:DI 4 si [orig:262 v$9 ] [262])) blake_ref.c:156 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:262 v$9 ] [262])
        (nil)))
(insn:TI 104 502 718 2 (parallel [
            (set (reg:DI 43 r14 [orig:211 v$10 ] [211])
                (xor:DI (reg:DI 43 r14 [orig:211 v$10 ] [211])
                    (reg:DI 0 ax [orig:129 D.5863 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:157 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:129 D.5863 ] [129])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 718 104 105 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 400 [0x190])) [6 %sfp+-144 S8 A64])
        (reg:DI 0 ax [orig:129 D.5863 ] [129])) blake_ref.c:157 89 {*movdi_internal}
     (nil))
(insn 105 718 507 2 (set (reg:DI 0 ax [orig:130 D.5863 ] [130])
        (mem:DI (plus:DI (reg:DI 2 cx [588])
                (const_int 368 [0x170])) [3 state_534(D)->salt64+24 S8 A64])) blake_ref.c:158 89 {*movdi_internal}
     (nil))
(insn:TI 507 105 510 2 (set (reg:DI 41 r12 [orig:211 v$10 ] [211])
        (reg:DI 43 r14 [orig:211 v$10 ] [211])) blake_ref.c:157 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:211 v$10 ] [211])
        (nil)))
(insn:TI 510 507 717 2 (set (reg:DI 4 si [orig:130 D.5863 ] [130])
        (reg:DI 0 ax [orig:130 D.5863 ] [130])) blake_ref.c:158 89 {*movdi_internal}
     (nil))
(insn 717 510 106 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 408 [0x198])) [6 %sfp+-136 S8 A64])
        (reg:DI 0 ax [orig:130 D.5863 ] [130])) blake_ref.c:158 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:130 D.5863 ] [130])
        (nil)))
(insn 106 717 107 2 (set (reg:DI 0 ax [371])
        (const_int 589684135938649225 [0x82efa98ec4e6c89])) blake_ref.c:158 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 589684135938649225 [0x82efa98ec4e6c89])
        (nil)))
(insn:TI 107 106 819 2 (parallel [
            (set (reg:DI 0 ax [orig:197 v$11 ] [197])
                (xor:DI (reg:DI 0 ax [orig:197 v$11 ] [197])
                    (reg:DI 4 si [orig:130 D.5863 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:158 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:130 D.5863 ] [130])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 819 107 512 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx)
            (const_int 0 [0]))) blake_ref.c:159 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 1 dx)
        (nil)))
(insn:TI 512 819 109 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [6 %sfp+-496 S8 A64])
        (reg:DI 0 ax [orig:197 v$11 ] [197])) blake_ref.c:158 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:197 v$11 ] [197])
        (nil)))
(jump_insn 109 512 110 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 406)
            (pc))) blake_ref.c:159 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 406)
;;  succ:       8 [50.0%]  (CAN_FALLTHRU)
;;              3 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; live  out 	 2 [cx] 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 294, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 17 [flags] 37 [r8] 39 [r10] 42 [r13] 44 [r15]
;; live  in  	 2 [cx] 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 37 [r8] 39 [r10] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
(note 110 109 111 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 111 110 112 3 (set (reg:DI 0 ax [orig:132 D.5863 ] [132])
        (mem:DI (plus:DI (reg:DI 2 cx [593])
                (const_int 200 [0xc8])) [3 state_534(D)->t64+0 S8 A64])) blake_ref.c:166 89 {*movdi_internal}
     (nil))
(insn 112 111 114 3 (set (reg:DI 39 r10 [372])
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:166 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 4983270260364809079 [0x452821e638d01377])
        (nil)))
(insn 114 112 119 3 (set (reg:DI 37 r8 [373])
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:167 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int -4732044268327596948 [0xbe5466cf34e90c6c])
        (nil)))
(insn:TI 119 114 113 3 (set (reg:DI 44 r15 [375])
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:169 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 4577018097722394903 [0x3f84d5b5b5470917])
        (nil)))
(insn:TI 113 119 115 3 (parallel [
            (set (reg:DI 39 r10 [orig:227 v$12 ] [227])
                (xor:DI (reg:DI 39 r10 [orig:227 v$12 ] [227])
                    (reg:DI 0 ax [orig:132 D.5863 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:166 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 115 113 519 3 (parallel [
            (set (reg:DI 0 ax [orig:243 v$13 ] [243])
                (xor:DI (reg:DI 0 ax [orig:243 v$13 ] [243])
                    (reg:DI 37 r8 [373])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:167 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 37 r8 [373])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 519 115 116 3 (set (reg:DI 42 r13 [orig:243 v$13 ] [243])
        (reg:DI 0 ax [orig:243 v$13 ] [243])) blake_ref.c:167 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:243 v$13 ] [243])
        (nil)))
(insn 116 519 117 3 (set (reg:DI 0 ax [orig:133 D.5863 ] [133])
        (mem:DI (plus:DI (reg:DI 2 cx [596])
                (const_int 208 [0xd0])) [3 state_534(D)->t64+8 S8 A64])) blake_ref.c:168 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [596])
        (nil)))
(insn 117 116 521 3 (set (reg:DI 2 cx [374])
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:168 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])
        (nil)))
(insn:TI 521 117 517 3 (set (reg:DI 3 bx [orig:260 v$14 ] [260])
        (reg:DI 2 cx [374])) blake_ref.c:168 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [374])
        (nil)))
(insn 517 521 118 3 (set (reg:DI 6 bp [orig:227 v$12 ] [227])
        (reg:DI 39 r10 [orig:227 v$12 ] [227])) blake_ref.c:166 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 39 r10 [orig:227 v$12 ] [227])
        (nil)))
(insn:TI 118 517 120 3 (parallel [
            (set (reg:DI 3 bx [orig:260 v$14 ] [260])
                (xor:DI (reg:DI 3 bx [orig:260 v$14 ] [260])
                    (reg:DI 0 ax [orig:133 D.5863 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:168 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 120 118 524 3 (parallel [
            (set (reg:DI 0 ax [orig:210 v$15 ] [210])
                (xor:DI (reg:DI 0 ax [orig:210 v$15 ] [210])
                    (reg:DI 44 r15 [375])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:169 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 44 r15 [375])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 524 120 121 3 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [6 %sfp+-488 S8 A64])
        (reg:DI 0 ax [orig:210 v$15 ] [210])) blake_ref.c:169 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:210 v$15 ] [210])
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]

;; basic block 4, loop depth 0, count 0, freq 590, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [100.0%]  (CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 5 [di] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 39 [r10] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 39 [r10] 43 [r14] 44 [r15]
;; live  kill	
(code_label 121 524 122 4 9 "" [1 uses])
(note 122 121 735 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 735 122 526 4 NOTE_INSN_DELETED)
(insn:TI 526 735 16 4 (set (reg:DI 0 ax [orig:119 v$0 ] [119])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [6 %sfp+-224 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 16 526 35 4 (set (reg:DI 44 r15 [orig:258 v$3 ] [258])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 344 [0x158])) [6 %sfp+-200 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 35 16 14 4 (set (reg:DI 2 cx [orig:298 D.5868 ] [298])
        (const_int 589684135938649225 [0x82efa98ec4e6c89])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 589684135938649225 [0x82efa98ec4e6c89])
        (nil)))
(insn:TI 14 35 32 4 (set (reg:DI 43 r14 [orig:225 v$1 ] [225])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 328 [0x148])) [6 %sfp+-216 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 32 14 37 4 (set (reg:DI 1 dx [orig:308 D.5868 ] [308])
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 4983270260364809079 [0x452821e638d01377])
        (nil)))
(insn 37 32 542 4 (set (reg:DI 39 r10 [orig:290 D.5868 ] [290])
        (const_int 1376283091369227076 [0x13198a2e03707344])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 1376283091369227076 [0x13198a2e03707344])
        (nil)))
(insn:TI 542 37 36 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [6 %sfp+-464 S8 A64])
        (reg:DI 2 cx [orig:298 D.5868 ] [298])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:298 D.5868 ] [298])
        (nil)))
(insn 36 542 544 4 (set (reg:DI 2 cx [orig:292 D.5868 ] [292])
        (const_int 2611923443488327891 [0x243f6a8885a308d3])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 2611923443488327891 [0x243f6a8885a308d3])
        (nil)))
(insn 544 36 13 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [6 %sfp+-472 S8 A64])
        (reg:DI 39 r10 [orig:290 D.5868 ] [290])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 39 r10 [orig:290 D.5868 ] [290])
        (nil)))
(insn:TI 13 544 527 4 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 0 ax [orig:119 v$0 ] [119])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:119 v$0 ] [119])
        (nil)))
(insn 527 13 123 4 (set (reg:DI 0 ax [orig:121 v$2 ] [121])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [6 %sfp+-208 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 123 527 414 4 (set (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
        (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)
        (nil)))
(insn:TI 414 123 422 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-504 S8 A64])
        (reg:DI 44 r15 [orig:258 v$3 ] [258])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 44 r15 [orig:258 v$3 ] [258])
        (nil)))
(insn 422 414 415 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [6 %sfp+-360 S8 A64])
        (reg:DI 1 dx [orig:308 D.5868 ] [308])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:308 D.5868 ] [308])
        (nil)))
(insn 415 422 423 4 (set (reg:DI 44 r15 [orig:211 v$10 ] [211])
        (reg:DI 41 r12 [orig:211 v$10 ] [211])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 41 r12 [orig:211 v$10 ] [211])
        (nil)))
(insn:TI 423 415 17 4 (set (reg:DI 1 dx [orig:291 D.5867 ] [291])
        (reg:DI 5 di [orig:291 D.5867 ] [291])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:291 D.5867 ] [291])
        (nil)))
(insn 17 423 21 4 (set (reg:DI 37 r8 [orig:264 v$4 ] [264])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [6 %sfp+-192 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 21 17 15 4 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 316 [0x13c])) [6 %sfp+-228 S4 A32])
        (const_int 16 [0x10])) blake_ref.c:160 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 16 [0x10])
        (nil)))
(insn:TI 15 21 528 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-520 S8 A64])
        (reg:DI 0 ax [orig:121 v$2 ] [121])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:121 v$2 ] [121])
        (nil)))
(insn 528 15 420 4 (set (reg:DI 0 ax [orig:124 v$5 ] [124])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 360 [0x168])) [6 %sfp+-184 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 420 528 424 4 (set (reg:DI 39 r10 [orig:292 D.5868 ] [292])
        (reg:DI 2 cx [orig:292 D.5868 ] [292])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:292 D.5868 ] [292])
        (nil)))
(insn:TI 424 420 18 4 (set (reg:DI 5 di [orig:225 v$1 ] [225])
        (reg:DI 43 r14 [orig:225 v$1 ] [225])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:225 v$1 ] [225])
        (nil)))
(insn:TI 18 424 529 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-536 S8 A64])
        (reg:DI 0 ax [orig:124 v$5 ] [124])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:124 v$5 ] [124])
        (nil)))
(insn 529 18 19 4 (set (reg:DI 0 ax [orig:125 v$6 ] [125])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 368 [0x170])) [6 %sfp+-176 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn:TI 19 529 530 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-528 S8 A64])
        (reg:DI 0 ax [orig:125 v$6 ] [125])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:125 v$6 ] [125])
        (nil)))
(insn 530 19 20 4 (set (reg:DI 0 ax [orig:126 v$7 ] [126])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 376 [0x178])) [6 %sfp+-168 S8 A64])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn:TI 20 530 22 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-512 S8 A64])
        (reg:DI 0 ax [orig:126 v$7 ] [126])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:126 v$7 ] [126])
        (nil)))
(insn 22 20 531 4 (set (reg:DI 0 ax [orig:348 D.5868 ] [348])
        (const_int 577009281997405206 [0x801f2e2858efc16])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 577009281997405206 [0x801f2e2858efc16])
        (nil)))
(insn:TI 531 22 23 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [6 %sfp+-376 S8 A64])
        (reg:DI 0 ax [orig:348 D.5868 ] [348])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:348 D.5868 ] [348])
        (nil)))
(insn 23 531 532 4 (set (reg:DI 0 ax [orig:346 D.5868 ] [346])
        (const_int 7163292796296056425 [0x636920d871574e69])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 7163292796296056425 [0x636920d871574e69])
        (nil)))
(insn:TI 532 23 24 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [6 %sfp+-384 S8 A64])
        (reg:DI 0 ax [orig:346 D.5868 ] [346])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:346 D.5868 ] [346])
        (nil)))
(insn 24 532 533 4 (set (reg:DI 0 ax [orig:340 D.5868 ] [340])
        (const_int -5008970055469465703 [0xba7c9045f12c7f99])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -5008970055469465703 [0xba7c9045f12c7f99])
        (nil)))
(insn:TI 533 24 25 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 152 [0x98])) [6 %sfp+-392 S8 A64])
        (reg:DI 0 ax [orig:340 D.5868 ] [340])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:340 D.5868 ] [340])
        (nil)))
(insn 25 533 534 4 (set (reg:DI 0 ax [orig:338 D.5868 ] [338])
        (const_int 2639559389850201335 [0x24a19947b3916cf7])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 2639559389850201335 [0x24a19947b3916cf7])
        (nil)))
(insn:TI 534 25 26 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [6 %sfp+-400 S8 A64])
        (reg:DI 0 ax [orig:338 D.5868 ] [338])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:338 D.5868 ] [338])
        (nil)))
(insn 26 534 535 4 (set (reg:DI 0 ax [orig:332 D.5868 ] [332])
        (const_int 3458046377305235383 [0x2ffd72dbd01adfb7])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 3458046377305235383 [0x2ffd72dbd01adfb7])
        (nil)))
(insn:TI 535 26 27 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 136 [0x88])) [6 %sfp+-408 S8 A64])
        (reg:DI 0 ax [orig:332 D.5868 ] [332])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:332 D.5868 ] [332])
        (nil)))
(insn 27 535 536 4 (set (reg:DI 0 ax [orig:330 D.5868 ] [330])
        (const_int -5124621466747896170 [0xb8e1afed6a267e96])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -5124621466747896170 [0xb8e1afed6a267e96])
        (nil)))
(insn:TI 536 27 28 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [6 %sfp+-416 S8 A64])
        (reg:DI 0 ax [orig:330 D.5868 ] [330])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:330 D.5868 ] [330])
        (nil)))
(insn 28 536 537 4 (set (reg:DI 0 ax [orig:324 D.5868 ] [324])
        (const_int -7919907764393346277 [0x9216d5d98979fb1b])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -7919907764393346277 [0x9216d5d98979fb1b])
        (nil)))
(insn:TI 537 28 29 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 120 [0x78])) [6 %sfp+-424 S8 A64])
        (reg:DI 0 ax [orig:324 D.5868 ] [324])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:324 D.5868 ] [324])
        (nil)))
(insn 29 537 538 4 (set (reg:DI 0 ax [orig:322 D.5868 ] [322])
        (const_int -3372901835766516308 [0xd1310ba698dfb5ac])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -3372901835766516308 [0xd1310ba698dfb5ac])
        (nil)))
(insn:TI 538 29 30 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [6 %sfp+-432 S8 A64])
        (reg:DI 0 ax [orig:322 D.5868 ] [322])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:322 D.5868 ] [322])
        (nil)))
(insn 30 538 539 4 (set (reg:DI 0 ax [orig:316 D.5868 ] [316])
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])
        (nil)))
(insn:TI 539 30 31 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 104 [0x68])) [6 %sfp+-440 S8 A64])
        (reg:DI 0 ax [orig:316 D.5868 ] [316])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:316 D.5868 ] [316])
        (nil)))
(insn 31 539 540 4 (set (reg:DI 0 ax [orig:314 D.5868 ] [314])
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 4577018097722394903 [0x3f84d5b5b5470917])
        (nil)))
(insn:TI 540 31 33 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [6 %sfp+-448 S8 A64])
        (reg:DI 0 ax [orig:314 D.5868 ] [314])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:314 D.5868 ] [314])
        (nil)))
(insn 33 540 541 4 (set (reg:DI 0 ax [orig:306 D.5868 ] [306])
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -4732044268327596948 [0xbe5466cf34e90c6c])
        (nil)))
(insn:TI 541 33 34 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 88 [0x58])) [6 %sfp+-456 S8 A64])
        (reg:DI 0 ax [orig:306 D.5868 ] [306])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:306 D.5868 ] [306])
        (nil)))
(insn 34 541 421 4 (set (reg:DI 0 ax [orig:300 D.5868 ] [300])
        (const_int -6626703657320631856 [0xa4093822299f31d0])) blake_ref.c:160 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int -6626703657320631856 [0xa4093822299f31d0])
        (nil)))
(insn:TI 421 34 820 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [6 %sfp+-368 S8 A64])
        (reg:DI 0 ax [orig:300 D.5868 ] [300])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(jump_insn 820 421 821 4 (set (pc)
        (label_ref 355)) 654 {jump}
     (nil)
 -> 355)
;;  succ:       6 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]

(barrier 821 820 822)
;; basic block 5, loop depth 0, count 0, freq 8859, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [94.1%]  (CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 39 [r10] 40 [r11] 41 [r12] 43 [r14]
;; live  kill	
(code_label 822 821 257 5 13 "" [1 uses])
(note 257 822 259 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 259 257 262 5 NOTE_INSN_DELETED)
(note 262 259 271 5 NOTE_INSN_DELETED)
(note 271 262 274 5 NOTE_INSN_DELETED)
(note 274 271 283 5 NOTE_INSN_DELETED)
(note 283 274 286 5 NOTE_INSN_DELETED)
(note 286 283 295 5 NOTE_INSN_DELETED)
(note 295 286 298 5 NOTE_INSN_DELETED)
(note 298 295 307 5 NOTE_INSN_DELETED)
(note 307 298 310 5 NOTE_INSN_DELETED)
(note 310 307 319 5 NOTE_INSN_DELETED)
(note 319 310 322 5 NOTE_INSN_DELETED)
(note 322 319 331 5 NOTE_INSN_DELETED)
(note 331 322 334 5 NOTE_INSN_DELETED)
(note 334 331 343 5 NOTE_INSN_DELETED)
(note 343 334 346 5 NOTE_INSN_DELETED)
(note 346 343 264 5 NOTE_INSN_DELETED)
(insn:TI 264 346 263 5 (set (reg:DI 1 dx [orig:442 D.5864 ] [442])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 1 [0x1])) [0 MEM[base: _802, offset: 1B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 263 264 260 5 (set (reg/f:DI 2 cx [441])
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)
        (nil)))
(insn 260 263 276 5 (set (reg:DI 0 ax [orig:440 D.5864 ] [440])
        (zero_extend:DI (mem:QI (reg:DI 4 si [orig:269 ivtmp.149 ] [269]) [0 MEM[base: _802, offset: 0B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 276 260 265 5 (set (reg:DI 41 r12 [orig:448 D.5864 ] [448])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 3 [0x3])) [0 MEM[base: _802, offset: 3B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 265 276 261 5 (set (reg:DI 39 r10 [orig:290 D.5868 ] [290])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:442 D.5864 ] [442])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:442 D.5864 ] [442])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 261 265 267 5 (set (reg:DI 40 r11 [orig:287 D.5867 ] [287])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:440 D.5864 ] [440])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 267 261 636 5 (set (reg:DI 1 dx [orig:291 D.5867 ] [291])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:442 D.5864 ] [442])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 636 267 270 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [6 %sfp+-472 S8 A64])
        (reg:DI 39 r10 [orig:290 D.5868 ] [290])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 39 r10 [orig:290 D.5868 ] [290])
        (nil)))
(insn 270 636 272 5 (set (reg:DI 39 r10 [orig:292 D.5868 ] [292])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:440 D.5864 ] [440])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:440 D.5864 ] [440])
        (nil)))
(insn:TI 272 270 273 5 (set (reg:DI 0 ax [orig:446 D.5864 ] [446])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 2 [0x2])) [0 MEM[base: _802, offset: 2B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 273 272 282 5 (set (reg:DI 43 r14 [orig:295 D.5867 ] [295])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:446 D.5864 ] [446])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 282 273 637 5 (set (reg:DI 0 ax [orig:300 D.5868 ] [300])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:446 D.5864 ] [446])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 637 282 277 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [6 %sfp+-352 S8 A64])
        (reg:DI 43 r14 [orig:295 D.5867 ] [295])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:295 D.5867 ] [295])
        (nil)))
(insn 277 637 756 5 (set (reg:DI 43 r14 [orig:298 D.5868 ] [298])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:448 D.5864 ] [448])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:448 D.5864 ] [448])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn:TI 756 277 638 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [6 %sfp+-368 S8 A64])
        (reg:DI 0 ax [orig:300 D.5868 ] [300])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:300 D.5868 ] [300])
        (nil)))
(insn:TI 638 756 279 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [6 %sfp+-464 S8 A64])
        (reg:DI 43 r14 [orig:298 D.5868 ] [298])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:298 D.5868 ] [298])
        (nil)))
(insn 279 638 284 5 (set (reg:DI 43 r14 [orig:299 D.5867 ] [299])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:448 D.5864 ] [448])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 41 r12 [orig:448 D.5864 ] [448])
        (nil)))
(insn:TI 284 279 639 5 (set (reg:DI 41 r12 [orig:452 D.5864 ] [452])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 4 [0x4])) [0 MEM[base: _802, offset: 4B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 639 284 285 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 200 [0xc8])) [6 %sfp+-344 S8 A64])
        (reg:DI 43 r14 [orig:299 D.5867 ] [299])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:299 D.5867 ] [299])
        (nil)))
(insn:TI 285 639 640 5 (set (reg:DI 43 r14 [orig:303 D.5867 ] [303])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:452 D.5864 ] [452])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 640 285 288 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [6 %sfp+-336 S8 A64])
        (reg:DI 43 r14 [orig:303 D.5867 ] [303])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:303 D.5867 ] [303])
        (nil)))
(insn 288 640 289 5 (set (reg:DI 43 r14 [orig:454 D.5864 ] [454])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 5 [0x5])) [0 MEM[base: _802, offset: 5B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 289 288 641 5 (set (reg:DI 0 ax [orig:306 D.5868 ] [306])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:454 D.5864 ] [454])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 641 289 291 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 88 [0x58])) [6 %sfp+-456 S8 A64])
        (reg:DI 0 ax [orig:306 D.5868 ] [306])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:306 D.5868 ] [306])
        (nil)))
(insn 291 641 300 5 (set (reg:DI 0 ax [orig:307 D.5867 ] [307])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:454 D.5864 ] [454])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:454 D.5864 ] [454])
        (nil)))
(insn:TI 300 291 642 5 (set (reg:DI 43 r14 [orig:460 D.5864 ] [460])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 7 [0x7])) [0 MEM[base: _802, offset: 7B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 642 300 294 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 216 [0xd8])) [6 %sfp+-328 S8 A64])
        (reg:DI 0 ax [orig:307 D.5867 ] [307])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:307 D.5867 ] [307])
        (nil)))
(insn 294 642 296 5 (set (reg:DI 0 ax [orig:308 D.5868 ] [308])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:452 D.5864 ] [452])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 41 r12 [orig:452 D.5864 ] [452])
        (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:452 D.5864 ] [452])
                        (const_int 8 [0x8]))
                    (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
            (nil))))
(insn:TI 296 294 643 5 (set (reg:DI 41 r12 [orig:458 D.5864 ] [458])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 6 [0x6])) [0 MEM[base: _802, offset: 6B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 643 296 297 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [6 %sfp+-360 S8 A64])
        (reg:DI 0 ax [orig:308 D.5868 ] [308])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:308 D.5868 ] [308])
        (nil)))
(insn:TI 297 643 644 5 (set (reg:DI 0 ax [orig:311 D.5867 ] [311])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:458 D.5864 ] [458])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 644 297 301 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [6 %sfp+-320 S8 A64])
        (reg:DI 0 ax [orig:311 D.5867 ] [311])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:311 D.5867 ] [311])
        (nil)))
(insn 301 644 645 5 (set (reg:DI 0 ax [orig:314 D.5868 ] [314])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:460 D.5864 ] [460])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 645 301 303 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [6 %sfp+-448 S8 A64])
        (reg:DI 0 ax [orig:314 D.5868 ] [314])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:314 D.5868 ] [314])
        (nil)))
(insn 303 645 312 5 (set (reg:DI 0 ax [orig:315 D.5867 ] [315])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:460 D.5864 ] [460])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:460 D.5864 ] [460])
        (nil)))
(insn:TI 312 303 646 5 (set (reg:DI 43 r14 [orig:466 D.5864 ] [466])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 9 [0x9])) [0 MEM[base: _802, offset: 9B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 646 312 306 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 232 [0xe8])) [6 %sfp+-312 S8 A64])
        (reg:DI 0 ax [orig:315 D.5867 ] [315])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:315 D.5867 ] [315])
        (nil)))
(insn 306 646 308 5 (set (reg:DI 0 ax [orig:316 D.5868 ] [316])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:458 D.5864 ] [458])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 41 r12 [orig:458 D.5864 ] [458])
        (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:458 D.5864 ] [458])
                        (const_int 8 [0x8]))
                    (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
            (nil))))
(insn:TI 308 306 647 5 (set (reg:DI 41 r12 [orig:464 D.5864 ] [464])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 8 [0x8])) [0 MEM[base: _802, offset: 8B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 647 308 309 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 104 [0x68])) [6 %sfp+-440 S8 A64])
        (reg:DI 0 ax [orig:316 D.5868 ] [316])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:316 D.5868 ] [316])
        (nil)))
(insn:TI 309 647 648 5 (set (reg:DI 0 ax [orig:319 D.5867 ] [319])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:464 D.5864 ] [464])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 648 309 313 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [6 %sfp+-304 S8 A64])
        (reg:DI 0 ax [orig:319 D.5867 ] [319])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:319 D.5867 ] [319])
        (nil)))
(insn 313 648 649 5 (set (reg:DI 0 ax [orig:322 D.5868 ] [322])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:466 D.5864 ] [466])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 649 313 315 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [6 %sfp+-432 S8 A64])
        (reg:DI 0 ax [orig:322 D.5868 ] [322])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:322 D.5868 ] [322])
        (nil)))
(insn 315 649 324 5 (set (reg:DI 0 ax [orig:323 D.5867 ] [323])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:466 D.5864 ] [466])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:466 D.5864 ] [466])
        (nil)))
(insn:TI 324 315 650 5 (set (reg:DI 43 r14 [orig:472 D.5864 ] [472])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 11 [0xb])) [0 MEM[base: _802, offset: 11B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 650 324 318 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 248 [0xf8])) [6 %sfp+-296 S8 A64])
        (reg:DI 0 ax [orig:323 D.5867 ] [323])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:323 D.5867 ] [323])
        (nil)))
(insn 318 650 320 5 (set (reg:DI 0 ax [orig:324 D.5868 ] [324])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:464 D.5864 ] [464])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 41 r12 [orig:464 D.5864 ] [464])
        (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:464 D.5864 ] [464])
                        (const_int 8 [0x8]))
                    (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
            (nil))))
(insn:TI 320 318 651 5 (set (reg:DI 41 r12 [orig:470 D.5864 ] [470])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 10 [0xa])) [0 MEM[base: _802, offset: 10B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 651 320 321 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 120 [0x78])) [6 %sfp+-424 S8 A64])
        (reg:DI 0 ax [orig:324 D.5868 ] [324])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:324 D.5868 ] [324])
        (nil)))
(insn:TI 321 651 652 5 (set (reg:DI 0 ax [orig:327 D.5867 ] [327])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:470 D.5864 ] [470])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 652 321 325 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 256 [0x100])) [6 %sfp+-288 S8 A64])
        (reg:DI 0 ax [orig:327 D.5867 ] [327])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:327 D.5867 ] [327])
        (nil)))
(insn 325 652 653 5 (set (reg:DI 0 ax [orig:330 D.5868 ] [330])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:472 D.5864 ] [472])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 653 325 327 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [6 %sfp+-416 S8 A64])
        (reg:DI 0 ax [orig:330 D.5868 ] [330])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:330 D.5868 ] [330])
        (nil)))
(insn 327 653 336 5 (set (reg:DI 0 ax [orig:331 D.5867 ] [331])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:472 D.5864 ] [472])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:472 D.5864 ] [472])
        (nil)))
(insn:TI 336 327 654 5 (set (reg:DI 43 r14 [orig:478 D.5864 ] [478])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 13 [0xd])) [0 MEM[base: _802, offset: 13B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 654 336 330 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 264 [0x108])) [6 %sfp+-280 S8 A64])
        (reg:DI 0 ax [orig:331 D.5867 ] [331])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:331 D.5867 ] [331])
        (nil)))
(insn 330 654 332 5 (set (reg:DI 0 ax [orig:332 D.5868 ] [332])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:470 D.5864 ] [470])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 41 r12 [orig:470 D.5864 ] [470])
        (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:470 D.5864 ] [470])
                        (const_int 8 [0x8]))
                    (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
            (nil))))
(insn:TI 332 330 655 5 (set (reg:DI 41 r12 [orig:476 D.5864 ] [476])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 12 [0xc])) [0 MEM[base: _802, offset: 12B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 655 332 333 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 136 [0x88])) [6 %sfp+-408 S8 A64])
        (reg:DI 0 ax [orig:332 D.5868 ] [332])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:332 D.5868 ] [332])
        (nil)))
(insn:TI 333 655 656 5 (set (reg:DI 0 ax [orig:335 D.5867 ] [335])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:476 D.5864 ] [476])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 656 333 337 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 272 [0x110])) [6 %sfp+-272 S8 A64])
        (reg:DI 0 ax [orig:335 D.5867 ] [335])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:335 D.5867 ] [335])
        (nil)))
(insn 337 656 657 5 (set (reg:DI 0 ax [orig:338 D.5868 ] [338])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:478 D.5864 ] [478])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 657 337 339 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [6 %sfp+-400 S8 A64])
        (reg:DI 0 ax [orig:338 D.5868 ] [338])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:338 D.5868 ] [338])
        (nil)))
(insn 339 657 658 5 (set (reg:DI 0 ax [orig:339 D.5867 ] [339])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:478 D.5864 ] [478])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:478 D.5864 ] [478])
        (nil)))
(insn:TI 658 339 342 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 280 [0x118])) [6 %sfp+-264 S8 A64])
        (reg:DI 0 ax [orig:339 D.5867 ] [339])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:339 D.5867 ] [339])
        (nil)))
(insn 342 658 344 5 (set (reg:DI 0 ax [orig:340 D.5868 ] [340])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:476 D.5864 ] [476])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 41 r12 [orig:476 D.5864 ] [476])
        (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:476 D.5864 ] [476])
                        (const_int 8 [0x8]))
                    (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
            (nil))))
(insn:TI 344 342 348 5 (set (reg:DI 41 r12 [orig:482 D.5864 ] [482])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 14 [0xe])) [0 MEM[base: _802, offset: 14B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 348 344 659 5 (set (reg:DI 43 r14 [orig:484 D.5864 ] [484])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 15 [0xf])) [0 MEM[base: _802, offset: 15B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 659 348 345 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 152 [0x98])) [6 %sfp+-392 S8 A64])
        (reg:DI 0 ax [orig:340 D.5868 ] [340])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:340 D.5868 ] [340])
        (nil)))
(insn:TI 345 659 660 5 (set (reg:DI 0 ax [orig:343 D.5867 ] [343])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:482 D.5864 ] [482])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 660 345 349 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 288 [0x120])) [6 %sfp+-256 S8 A64])
        (reg:DI 0 ax [orig:343 D.5867 ] [343])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:343 D.5867 ] [343])
        (nil)))
(insn 349 660 661 5 (set (reg:DI 0 ax [orig:346 D.5868 ] [346])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:484 D.5864 ] [484])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 661 349 351 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [6 %sfp+-384 S8 A64])
        (reg:DI 0 ax [orig:346 D.5868 ] [346])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:346 D.5868 ] [346])
        (nil)))
(insn 351 661 662 5 (set (reg:DI 0 ax [orig:347 D.5867 ] [347])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 43 r14 [orig:484 D.5864 ] [484])
                        (const_int 8 [0x8]))
                    (reg/f:DI 7 sp))
                (const_int 416 [0x1a0])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:484 D.5864 ] [484])
        (nil)))
(insn:TI 662 351 354 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 296 [0x128])) [6 %sfp+-248 S8 A64])
        (reg:DI 0 ax [orig:347 D.5867 ] [347])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:347 D.5867 ] [347])
        (nil)))
(insn 354 662 663 5 (set (reg:DI 0 ax [orig:348 D.5868 ] [348])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:482 D.5864 ] [482])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [441])) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 41 r12 [orig:482 D.5864 ] [482])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [441])
            (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 41 r12 [orig:482 D.5864 ] [482])
                            (const_int 8 [0x8]))
                        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
                (nil)))))
(insn:TI 663 354 782 5 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [6 %sfp+-376 S8 A64])
        (reg:DI 0 ax [orig:348 D.5868 ] [348])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:348 D.5868 ] [348])
        (nil)))
(insn 782 663 355 5 (set (reg:DI 0 ax [orig:388 D.5863 ] [388])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [6 %sfp+-368 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]

;; basic block 6, loop depth 0, count 0, freq 9412, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              4 [100.0%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 355 782 124 6 11 "" [1 uses])
(note 124 355 545 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(note 545 124 775 6 NOTE_INSN_DELETED)
(note 775 545 546 6 NOTE_INSN_DELETED)
(note 546 775 774 6 NOTE_INSN_DELETED)
(note 774 546 750 6 NOTE_INSN_DELETED)
(note 750 774 778 6 NOTE_INSN_DELETED)
(note 778 750 777 6 NOTE_INSN_DELETED)
(note 777 778 748 6 NOTE_INSN_DELETED)
(note 748 777 553 6 NOTE_INSN_DELETED)
(note 553 748 773 6 NOTE_INSN_DELETED)
(note 773 553 559 6 NOTE_INSN_DELETED)
(note 559 773 772 6 NOTE_INSN_DELETED)
(note 772 559 746 6 NOTE_INSN_DELETED)
(note 746 772 776 6 NOTE_INSN_DELETED)
(note 776 746 564 6 NOTE_INSN_DELETED)
(note 564 776 769 6 NOTE_INSN_DELETED)
(note 769 564 566 6 NOTE_INSN_DELETED)
(note 566 769 768 6 NOTE_INSN_DELETED)
(note 768 566 571 6 NOTE_INSN_DELETED)
(note 571 768 767 6 NOTE_INSN_DELETED)
(note 767 571 574 6 NOTE_INSN_DELETED)
(note 574 767 766 6 NOTE_INSN_DELETED)
(note 766 574 576 6 NOTE_INSN_DELETED)
(note 576 766 765 6 NOTE_INSN_DELETED)
(note 765 576 585 6 NOTE_INSN_DELETED)
(note 585 765 752 6 NOTE_INSN_DELETED)
(note 752 585 588 6 NOTE_INSN_DELETED)
(note 588 752 753 6 NOTE_INSN_DELETED)
(note 753 588 591 6 NOTE_INSN_DELETED)
(note 591 753 754 6 NOTE_INSN_DELETED)
(note 754 591 601 6 NOTE_INSN_DELETED)
(note 601 754 764 6 NOTE_INSN_DELETED)
(note 764 601 604 6 NOTE_INSN_DELETED)
(note 604 764 763 6 NOTE_INSN_DELETED)
(note 763 604 611 6 NOTE_INSN_DELETED)
(note 611 763 762 6 NOTE_INSN_DELETED)
(note 762 611 615 6 NOTE_INSN_DELETED)
(note 615 762 761 6 NOTE_INSN_DELETED)
(note 761 615 622 6 NOTE_INSN_DELETED)
(note 622 761 760 6 NOTE_INSN_DELETED)
(note 760 622 629 6 NOTE_INSN_DELETED)
(note 629 760 759 6 NOTE_INSN_DELETED)
(note 759 629 253 6 NOTE_INSN_DELETED)
(note 253 759 634 6 NOTE_INSN_DELETED)
(note 634 253 757 6 NOTE_INSN_DELETED)
(note 757 634 758 6 NOTE_INSN_DELETED)
(note 758 757 635 6 NOTE_INSN_DELETED)
(note 635 758 125 6 NOTE_INSN_DELETED)
(insn:TI 125 635 133 6 (parallel [
            (set (reg:DI 40 r11 [orig:376 D.5863 ] [376])
                (xor:DI (reg:DI 40 r11 [orig:287 D.5867 ] [287])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 72 [0x48])) [6 %sfp+-472 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 133 125 551 6 (parallel [
            (set (reg:DI 39 r10 [orig:380 D.5863 ] [380])
                (xor:DI (reg:DI 39 r10 [orig:292 D.5868 ] [292])
                    (reg:DI 1 dx [orig:291 D.5867 ] [291])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:291 D.5867 ] [291])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 551 133 141 6 (set (reg:DI 1 dx [orig:384 D.5863 ] [384])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [6 %sfp+-352 S8 A64])) blake_ref.c:177 89 {*movdi_internal}
     (nil))
(insn:TI 141 551 149 6 (parallel [
            (set (reg:DI 1 dx [orig:384 D.5863 ] [384])
                (xor:DI (reg:DI 1 dx [orig:384 D.5863 ] [384])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 80 [0x50])) [6 %sfp+-464 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 149 141 569 6 (parallel [
            (set (reg:DI 0 ax [orig:388 D.5863 ] [388])
                (xor:DI (reg:DI 0 ax [orig:388 D.5863 ] [388])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 200 [0xc8])) [6 %sfp+-344 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 569 149 577 6 (set (reg:DI 43 r14 [orig:396 D.5863 ] [396])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 216 [0xd8])) [6 %sfp+-328 S8 A64])) blake_ref.c:178 89 {*movdi_internal}
     (nil))
(insn 577 569 126 6 (set (reg:DI 41 r12 [orig:402 D.5863 ] [402])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [6 %sfp+-488 S8 A64])) blake_ref.c:179 89 {*movdi_internal}
     (nil))
(insn:TI 126 577 127 6 (parallel [
            (set (reg:DI 40 r11 [orig:377 D.5863 ] [377])
                (plus:DI (reg:DI 40 r11 [orig:376 D.5863 ] [376])
                    (reg:DI 37 r8 [orig:264 v$4 ] [264])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 127 126 128 6 (parallel [
            (set (reg:DI 40 r11 [orig:135 D.5863 ] [135])
                (plus:DI (reg:DI 40 r11 [orig:377 D.5863 ] [377])
                    (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 128 127 134 6 (parallel [
            (set (reg:DI 6 bp [orig:378 D.5863 ] [378])
                (xor:DI (reg:DI 6 bp [orig:227 v$12 ] [227])
                    (reg:DI 40 r11 [orig:135 D.5863 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 134 128 747 6 (parallel [
            (set (reg:DI 39 r10 [orig:381 D.5863 ] [381])
                (plus:DI (reg:DI 39 r10 [orig:380 D.5863 ] [380])
                    (reg:DI 40 r11 [orig:135 D.5863 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 40 r11 [orig:135 D.5863 ] [135])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 747 134 129 6 (set (reg:DI 40 r11 [orig:214 v$5 ] [214])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-536 S8 A64])) blake_ref.c:177 89 {*movdi_internal}
     (nil))
(insn:TI 129 747 130 6 (parallel [
            (set (reg:DI 6 bp [orig:137 D.5863 ] [137])
                (rotate:DI (reg:DI 6 bp [orig:378 D.5863 ] [378])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 588 {*rotldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 130 129 142 6 (parallel [
            (set (reg:DI 38 r9 [orig:138 D.5863 ] [138])
                (plus:DI (reg:DI 38 r9 [orig:244 v$8 ] [244])
                    (reg:DI 6 bp [orig:137 D.5863 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 142 130 131 6 (parallel [
            (set (reg:DI 1 dx [orig:385 D.5863 ] [385])
                (plus:DI (reg:DI 1 dx [orig:384 D.5863 ] [384])
                    (reg:DI 40 r11 [orig:214 v$5 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 131 142 143 6 (parallel [
            (set (reg:DI 37 r8 [orig:379 D.5863 ] [379])
                (xor:DI (reg:DI 37 r8 [orig:264 v$4 ] [264])
                    (reg:DI 38 r9 [orig:138 D.5863 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 143 131 555 6 (parallel [
            (set (reg:DI 1 dx [orig:151 D.5863 ] [151])
                (plus:DI (reg:DI 1 dx [orig:385 D.5863 ] [385])
                    (reg:DI 5 di [orig:225 v$1 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:225 v$1 ] [225])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 555 143 132 6 (set (reg:DI 5 di [orig:154 D.5863 ] [154])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-480 S8 A64])) blake_ref.c:177 89 {*movdi_internal}
     (nil))
(insn 132 555 144 6 (parallel [
            (set (reg:DI 37 r8 [orig:140 D.5863 ] [140])
                (rotatert:DI (reg:DI 37 r8 [orig:379 D.5863 ] [379])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 144 132 150 6 (parallel [
            (set (reg:DI 42 r13 [orig:386 D.5863 ] [386])
                (xor:DI (reg:DI 42 r13 [orig:243 v$13 ] [243])
                    (reg:DI 1 dx [orig:151 D.5863 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 150 144 135 6 (parallel [
            (set (reg:DI 0 ax [orig:389 D.5863 ] [389])
                (plus:DI (reg:DI 0 ax [orig:388 D.5863 ] [388])
                    (reg:DI 1 dx [orig:151 D.5863 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:151 D.5863 ] [151])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 135 150 145 6 (parallel [
            (set (reg:DI 39 r10 [orig:143 D.5863 ] [143])
                (plus:DI (reg:DI 39 r10 [orig:381 D.5863 ] [381])
                    (reg:DI 37 r8 [orig:140 D.5863 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 145 135 136 6 (parallel [
            (set (reg:DI 42 r13 [orig:153 D.5863 ] [153])
                (rotate:DI (reg:DI 42 r13 [orig:386 D.5863 ] [386])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 588 {*rotldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 136 145 562 6 (parallel [
            (set (reg:DI 6 bp [orig:382 D.5863 ] [382])
                (xor:DI (reg:DI 6 bp [orig:137 D.5863 ] [137])
                    (reg:DI 39 r10 [orig:143 D.5863 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 562 136 146 6 (set (reg:DI 1 dx [orig:392 D.5863 ] [392])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [6 %sfp+-336 S8 A64])) blake_ref.c:178 89 {*movdi_internal}
     (nil))
(insn:TI 146 562 137 6 (parallel [
            (set (reg:DI 5 di [orig:154 D.5863 ] [154])
                (plus:DI (reg:DI 5 di [orig:154 D.5863 ] [154])
                    (reg:DI 42 r13 [orig:153 D.5863 ] [153])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 137 146 157 6 (parallel [
            (set (reg:DI 6 bp [orig:145 D.5863 ] [145])
                (rotatert:DI (reg:DI 6 bp [orig:382 D.5863 ] [382])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 157 137 147 6 (parallel [
            (set (reg:DI 1 dx [orig:392 D.5863 ] [392])
                (xor:DI (reg:DI 1 dx [orig:392 D.5863 ] [392])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 88 [0x58])) [6 %sfp+-456 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 147 157 785 6 (parallel [
            (set (reg:DI 40 r11 [orig:387 D.5863 ] [387])
                (xor:DI (reg:DI 40 r11 [orig:387 D.5863 ] [387])
                    (reg:DI 5 di [orig:154 D.5863 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 785 147 148 6 (set (reg:DI 2 cx [orig:146 D.5863 ] [146])
        (plus:DI (reg:DI 38 r9 [orig:138 D.5863 ] [138])
            (reg:DI 6 bp [orig:145 D.5863 ] [145]))) blake_ref.c:176 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 38 r9 [orig:138 D.5863 ] [138])
        (nil)))
(insn:TI 148 785 151 6 (parallel [
            (set (reg:DI 40 r11 [orig:156 D.5863 ] [156])
                (rotatert:DI (reg:DI 40 r11 [orig:387 D.5863 ] [387])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 151 148 139 6 (parallel [
            (set (reg:DI 0 ax [orig:159 D.5863 ] [159])
                (plus:DI (reg:DI 0 ax [orig:389 D.5863 ] [389])
                    (reg:DI 40 r11 [orig:156 D.5863 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 139 151 749 6 (parallel [
            (set (reg:DI 37 r8 [orig:383 D.5863 ] [383])
                (xor:DI (reg:DI 37 r8 [orig:140 D.5863 ] [140])
                    (reg:DI 2 cx [orig:146 D.5863 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:146 D.5863 ] [146])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 749 139 152 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [6 %sfp+-472 S8 A64])
        (reg:DI 2 cx [orig:146 D.5863 ] [146])) blake_ref.c:176 89 {*movdi_internal}
     (nil))
(insn:TI 152 749 140 6 (parallel [
            (set (reg:DI 42 r13 [orig:390 D.5863 ] [390])
                (xor:DI (reg:DI 42 r13 [orig:153 D.5863 ] [153])
                    (reg:DI 0 ax [orig:159 D.5863 ] [159])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 140 152 153 6 (parallel [
            (set (reg:DI 37 r8 [orig:148 D.5863 ] [148])
                (rotatert:DI (reg:DI 37 r8 [orig:148 D.5863 ] [148])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 153 140 550 6 (parallel [
            (set (reg:DI 42 r13 [orig:161 D.5863 ] [161])
                (rotatert:DI (reg:DI 42 r13 [orig:390 D.5863 ] [390])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 550 153 786 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [6 %sfp+-240 S8 A64])
        (reg:DI 37 r8 [orig:148 D.5863 ] [148])) blake_ref.c:176 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [orig:148 D.5863 ] [148])
        (nil)))
(insn:TI 786 550 155 6 (set (reg:DI 5 di [orig:162 D.5863 ] [162])
        (plus:DI (reg:DI 5 di [orig:154 D.5863 ] [154])
            (reg:DI 42 r13 [orig:161 D.5863 ] [161]))) blake_ref.c:177 214 {*leadi}
     (nil))
(insn:TI 155 786 745 6 (parallel [
            (set (reg:DI 40 r11 [orig:391 D.5863 ] [391])
                (xor:DI (reg:DI 40 r11 [orig:156 D.5863 ] [156])
                    (reg:DI 5 di [orig:162 D.5863 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:162 D.5863 ] [162])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 745 155 744 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-480 S8 A64])
        (reg:DI 5 di [orig:162 D.5863 ] [162])) blake_ref.c:177 89 {*movdi_internal}
     (nil))
(insn 744 745 156 6 (set (reg:DI 5 di [orig:230 v$6 ] [230])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-528 S8 A64])) blake_ref.c:178 89 {*movdi_internal}
     (nil))
(insn:TI 156 744 158 6 (parallel [
            (set (reg:DI 40 r11 [orig:164 D.5863 ] [164])
                (rotatert:DI (reg:DI 40 r11 [orig:391 D.5863 ] [391])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 158 156 159 6 (parallel [
            (set (reg:DI 1 dx [orig:393 D.5863 ] [393])
                (plus:DI (reg:DI 1 dx [orig:392 D.5863 ] [392])
                    (reg:DI 5 di [orig:230 v$6 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 159 158 165 6 (parallel [
            (set (reg:DI 1 dx [orig:167 D.5863 ] [167])
                (plus:DI (reg:DI 1 dx [orig:393 D.5863 ] [393])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 24 [0x18])) [6 %sfp+-520 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 165 159 567 6 (parallel [
            (set (reg:DI 43 r14 [orig:396 D.5863 ] [396])
                (xor:DI (reg:DI 43 r14 [orig:396 D.5863 ] [396])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 184 [0xb8])) [6 %sfp+-360 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 567 165 743 6 (set (reg:DI 38 r9 [orig:395 D.5863 ] [395])
        (reg:DI 5 di [orig:230 v$6 ] [230])) blake_ref.c:178 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:230 v$6 ] [230])
        (nil)))
(insn 743 567 570 6 (set (reg:DI 5 di [orig:246 v$7 ] [246])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-512 S8 A64])) blake_ref.c:179 89 {*movdi_internal}
     (nil))
(insn:TI 570 743 160 6 (set (reg:DI 2 cx [orig:396 D.5863 ] [396])
        (reg:DI 43 r14 [orig:396 D.5863 ] [396])) blake_ref.c:178 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:396 D.5863 ] [396])
        (nil)))
(insn 160 570 579 6 (parallel [
            (set (reg:DI 3 bx [orig:394 D.5863 ] [394])
                (xor:DI (reg:DI 3 bx [orig:260 v$14 ] [260])
                    (reg:DI 1 dx [orig:167 D.5863 ] [167])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 579 160 166 6 (set (reg:DI 43 r14 [orig:186 D.5863 ] [186])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [6 %sfp+-496 S8 A64])) blake_ref.c:179 89 {*movdi_internal}
     (nil))
(insn:TI 166 579 572 6 (parallel [
            (set (reg:DI 2 cx [orig:397 D.5863 ] [397])
                (plus:DI (reg:DI 2 cx [orig:396 D.5863 ] [396])
                    (reg:DI 1 dx [orig:167 D.5863 ] [167])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:167 D.5863 ] [167])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 572 166 173 6 (set (reg:DI 1 dx [orig:400 D.5863 ] [400])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [6 %sfp+-320 S8 A64])) blake_ref.c:179 89 {*movdi_internal}
     (nil))
(insn 173 572 161 6 (parallel [
            (set (reg:DI 1 dx [orig:400 D.5863 ] [400])
                (xor:DI (reg:DI 1 dx [orig:400 D.5863 ] [400])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 96 [0x60])) [6 %sfp+-448 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 161 173 162 6 (parallel [
            (set (reg:DI 3 bx [orig:169 D.5863 ] [169])
                (rotate:DI (reg:DI 3 bx [orig:394 D.5863 ] [394])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 588 {*rotldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 162 161 163 6 (parallel [
            (set (reg:DI 44 r15 [orig:170 D.5863 ] [170])
                (plus:DI (reg:DI 44 r15 [orig:211 v$10 ] [211])
                    (reg:DI 3 bx [orig:169 D.5863 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 163 162 174 6 (parallel [
            (set (reg:DI 38 r9 [orig:395 D.5863 ] [395])
                (xor:DI (reg:DI 38 r9 [orig:395 D.5863 ] [395])
                    (reg:DI 44 r15 [orig:170 D.5863 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 174 163 175 6 (parallel [
            (set (reg:DI 1 dx [orig:401 D.5863 ] [401])
                (plus:DI (reg:DI 1 dx [orig:400 D.5863 ] [400])
                    (reg:DI 5 di [orig:246 v$7 ] [246])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 175 174 164 6 (parallel [
            (set (reg:DI 1 dx [orig:183 D.5863 ] [183])
                (plus:DI (reg:DI 1 dx [orig:401 D.5863 ] [401])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 40 [0x28])) [6 %sfp+-504 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 164 175 167 6 (parallel [
            (set (reg:DI 38 r9 [orig:172 D.5863 ] [172])
                (rotatert:DI (reg:DI 38 r9 [orig:395 D.5863 ] [395])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 167 164 168 6 (parallel [
            (set (reg:DI 2 cx [orig:175 D.5863 ] [175])
                (plus:DI (reg:DI 2 cx [orig:397 D.5863 ] [397])
                    (reg:DI 38 r9 [orig:172 D.5863 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 168 167 169 6 (parallel [
            (set (reg:DI 3 bx [orig:398 D.5863 ] [398])
                (xor:DI (reg:DI 3 bx [orig:169 D.5863 ] [169])
                    (reg:DI 2 cx [orig:175 D.5863 ] [175])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 169 168 176 6 (parallel [
            (set (reg:DI 3 bx [orig:177 D.5863 ] [177])
                (rotatert:DI (reg:DI 3 bx [orig:398 D.5863 ] [398])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 176 169 170 6 (parallel [
            (set (reg:DI 41 r12 [orig:402 D.5863 ] [402])
                (xor:DI (reg:DI 41 r12 [orig:402 D.5863 ] [402])
                    (reg:DI 1 dx [orig:183 D.5863 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 170 176 177 6 (parallel [
            (set (reg:DI 44 r15 [orig:178 D.5863 ] [178])
                (plus:DI (reg:DI 44 r15 [orig:170 D.5863 ] [170])
                    (reg:DI 3 bx [orig:177 D.5863 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 177 170 171 6 (parallel [
            (set (reg:DI 41 r12 [orig:185 D.5863 ] [185])
                (rotate:DI (reg:DI 41 r12 [orig:402 D.5863 ] [402])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 588 {*rotldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 171 177 178 6 (parallel [
            (set (reg:DI 38 r9 [orig:399 D.5863 ] [399])
                (xor:DI (reg:DI 38 r9 [orig:172 D.5863 ] [172])
                    (reg:DI 44 r15 [orig:178 D.5863 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 178 171 172 6 (parallel [
            (set (reg:DI 43 r14 [orig:186 D.5863 ] [186])
                (plus:DI (reg:DI 43 r14 [orig:186 D.5863 ] [186])
                    (reg:DI 41 r12 [orig:185 D.5863 ] [185])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 172 178 179 6 (parallel [
            (set (reg:DI 38 r9 [orig:180 D.5863 ] [180])
                (rotatert:DI (reg:DI 38 r9 [orig:399 D.5863 ] [399])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 179 172 582 6 (parallel [
            (set (reg:DI 5 di [orig:403 D.5863 ] [403])
                (xor:DI (reg:DI 5 di [orig:403 D.5863 ] [403])
                    (reg:DI 43 r14 [orig:186 D.5863 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 582 179 583 6 (set (reg:DI 37 r8 [orig:403 D.5863 ] [403])
        (reg:DI 5 di [orig:403 D.5863 ] [403])) blake_ref.c:179 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:403 D.5863 ] [403])
        (nil)))
(insn 583 582 181 6 (set (reg:DI 5 di [orig:404 D.5863 ] [404])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 232 [0xe8])) [6 %sfp+-312 S8 A64])) blake_ref.c:179 89 {*movdi_internal}
     (nil))
(insn 181 583 180 6 (parallel [
            (set (reg:DI 5 di [orig:404 D.5863 ] [404])
                (xor:DI (reg:DI 5 di [orig:404 D.5863 ] [404])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 104 [0x68])) [6 %sfp+-440 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 180 181 182 6 (parallel [
            (set (reg:DI 37 r8 [orig:188 D.5863 ] [188])
                (rotatert:DI (reg:DI 37 r8 [orig:403 D.5863 ] [403])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 182 180 586 6 (parallel [
            (set (reg:DI 1 dx [orig:405 D.5863 ] [405])
                (plus:DI (reg:DI 1 dx [orig:183 D.5863 ] [183])
                    (reg:DI 5 di [orig:404 D.5863 ] [404])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:404 D.5863 ] [404])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 586 182 189 6 (set (reg:DI 5 di [orig:408 D.5863 ] [408])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [6 %sfp+-304 S8 A64])) blake_ref.c:181 89 {*movdi_internal}
     (nil))
(insn 189 586 183 6 (parallel [
            (set (reg:DI 5 di [orig:408 D.5863 ] [408])
                (xor:DI (reg:DI 5 di [orig:408 D.5863 ] [408])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 112 [0x70])) [6 %sfp+-432 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 183 189 184 6 (parallel [
            (set (reg:DI 1 dx [orig:191 D.5863 ] [191])
                (plus:DI (reg:DI 1 dx [orig:405 D.5863 ] [405])
                    (reg:DI 37 r8 [orig:188 D.5863 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 184 183 185 6 (parallel [
            (set (reg:DI 41 r12 [orig:406 D.5863 ] [406])
                (xor:DI (reg:DI 41 r12 [orig:185 D.5863 ] [185])
                    (reg:DI 1 dx [orig:191 D.5863 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 185 184 186 6 (parallel [
            (set (reg:DI 41 r12 [orig:193 D.5863 ] [193])
                (rotatert:DI (reg:DI 41 r12 [orig:406 D.5863 ] [406])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 186 185 190 6 (parallel [
            (set (reg:DI 43 r14 [orig:194 D.5863 ] [194])
                (plus:DI (reg:DI 43 r14 [orig:186 D.5863 ] [186])
                    (reg:DI 41 r12 [orig:193 D.5863 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 190 186 589 6 (parallel [
            (set (reg:DI 39 r10 [orig:409 D.5863 ] [409])
                (plus:DI (reg:DI 39 r10 [orig:143 D.5863 ] [143])
                    (reg:DI 5 di [orig:408 D.5863 ] [408])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:408 D.5863 ] [408])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 589 190 187 6 (set (reg:DI 5 di [orig:412 D.5863 ] [412])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 248 [0xf8])) [6 %sfp+-296 S8 A64])) blake_ref.c:181 89 {*movdi_internal}
     (nil))
(insn:TI 187 589 188 6 (parallel [
            (set (reg:DI 37 r8 [orig:407 D.5863 ] [407])
                (xor:DI (reg:DI 37 r8 [orig:188 D.5863 ] [188])
                    (reg:DI 43 r14 [orig:194 D.5863 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 188 187 191 6 (parallel [
            (set (reg:DI 37 r8 [orig:196 D.5863 ] [196])
                (rotatert:DI (reg:DI 37 r8 [orig:407 D.5863 ] [407])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 191 188 197 6 (parallel [
            (set (reg:DI 39 r10 [orig:200 D.5863 ] [200])
                (plus:DI (reg:DI 39 r10 [orig:409 D.5863 ] [409])
                    (reg:DI 40 r11 [orig:164 D.5863 ] [164])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 197 191 192 6 (parallel [
            (set (reg:DI 5 di [orig:412 D.5863 ] [412])
                (xor:DI (reg:DI 5 di [orig:412 D.5863 ] [412])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 120 [0x78])) [6 %sfp+-424 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 192 197 193 6 (parallel [
            (set (reg:DI 41 r12 [orig:410 D.5863 ] [410])
                (xor:DI (reg:DI 41 r12 [orig:193 D.5863 ] [193])
                    (reg:DI 39 r10 [orig:200 D.5863 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 193 192 194 6 (parallel [
            (set (reg:DI 41 r12 [orig:202 D.5863 ] [202])
                (rotate:DI (reg:DI 41 r12 [orig:410 D.5863 ] [410])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 588 {*rotldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 194 193 195 6 (parallel [
            (set (reg:DI 44 r15 [orig:203 D.5863 ] [203])
                (plus:DI (reg:DI 44 r15 [orig:178 D.5863 ] [178])
                    (reg:DI 41 r12 [orig:202 D.5863 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 195 194 198 6 (parallel [
            (set (reg:DI 40 r11 [orig:411 D.5863 ] [411])
                (xor:DI (reg:DI 40 r11 [orig:164 D.5863 ] [164])
                    (reg:DI 44 r15 [orig:203 D.5863 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 198 195 196 6 (parallel [
            (set (reg:DI 39 r10 [orig:413 D.5863 ] [413])
                (plus:DI (reg:DI 39 r10 [orig:200 D.5863 ] [200])
                    (reg:DI 5 di [orig:412 D.5863 ] [412])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:412 D.5863 ] [412])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 196 198 199 6 (parallel [
            (set (reg:DI 40 r11 [orig:205 D.5863 ] [205])
                (rotatert:DI (reg:DI 40 r11 [orig:411 D.5863 ] [411])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 199 196 200 6 (parallel [
            (set (reg:DI 39 r10 [orig:208 v$0 ] [208])
                (plus:DI (reg:DI 39 r10 [orig:413 D.5863 ] [413])
                    (reg:DI 40 r11 [orig:205 D.5863 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 200 199 742 6 (parallel [
            (set (reg:DI 41 r12 [orig:414 D.5863 ] [414])
                (xor:DI (reg:DI 41 r12 [orig:202 D.5863 ] [202])
                    (reg:DI 39 r10 [orig:208 v$0 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 39 r10 [orig:208 v$0 ] [208])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 742 200 599 6 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 39 r10 [orig:208 v$0 ] [208])) blake_ref.c:181 89 {*movdi_internal}
     (nil))
(insn 599 742 201 6 (set (reg:DI 39 r10 [orig:416 D.5863 ] [416])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 256 [0x100])) [6 %sfp+-288 S8 A64])) blake_ref.c:182 89 {*movdi_internal}
     (nil))
(insn:TI 201 599 202 6 (parallel [
            (set (reg:DI 41 r12 [orig:210 v$15 ] [210])
                (rotatert:DI (reg:DI 41 r12 [orig:210 v$15 ] [210])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 202 201 741 6 (parallel [
            (set (reg:DI 44 r15 [orig:211 v$10 ] [211])
                (plus:DI (reg:DI 44 r15 [orig:203 D.5863 ] [203])
                    (reg:DI 41 r12 [orig:210 v$15 ] [210])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 41 r12 [orig:210 v$15 ] [210])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 741 202 203 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [6 %sfp+-488 S8 A64])
        (reg:DI 41 r12 [orig:210 v$15 ] [210])) blake_ref.c:181 89 {*movdi_internal}
     (nil))
(insn:TI 203 741 204 6 (parallel [
            (set (reg:DI 40 r11 [orig:415 D.5863 ] [415])
                (xor:DI (reg:DI 40 r11 [orig:205 D.5863 ] [205])
                    (reg:DI 44 r15 [orig:211 v$10 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 204 203 598 6 (parallel [
            (set (reg:DI 40 r11 [orig:214 v$5 ] [214])
                (rotatert:DI (reg:DI 40 r11 [orig:214 v$5 ] [214])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 598 204 205 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [6 %sfp+-536 S8 A64])
        (reg:DI 40 r11 [orig:214 v$5 ] [214])) blake_ref.c:181 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 40 r11 [orig:214 v$5 ] [214])
        (nil)))
(insn 205 598 206 6 (parallel [
            (set (reg:DI 39 r10 [orig:416 D.5863 ] [416])
                (xor:DI (reg:DI 39 r10 [orig:416 D.5863 ] [416])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 128 [0x80])) [6 %sfp+-416 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 206 205 602 6 (parallel [
            (set (reg:DI 0 ax [orig:417 D.5863 ] [417])
                (plus:DI (reg:DI 0 ax [orig:159 D.5863 ] [159])
                    (reg:DI 39 r10 [orig:416 D.5863 ] [416])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 39 r10 [orig:416 D.5863 ] [416])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 602 206 213 6 (set (reg:DI 39 r10 [orig:420 D.5863 ] [420])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 264 [0x108])) [6 %sfp+-280 S8 A64])) blake_ref.c:182 89 {*movdi_internal}
     (nil))
(insn 213 602 207 6 (parallel [
            (set (reg:DI 39 r10 [orig:420 D.5863 ] [420])
                (xor:DI (reg:DI 39 r10 [orig:420 D.5863 ] [420])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 136 [0x88])) [6 %sfp+-408 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 207 213 208 6 (parallel [
            (set (reg:DI 0 ax [orig:217 D.5863 ] [217])
                (plus:DI (reg:DI 0 ax [orig:417 D.5863 ] [417])
                    (reg:DI 38 r9 [orig:180 D.5863 ] [180])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 208 207 209 6 (parallel [
            (set (reg:DI 6 bp [orig:418 D.5863 ] [418])
                (xor:DI (reg:DI 6 bp [orig:145 D.5863 ] [145])
                    (reg:DI 0 ax [orig:217 D.5863 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 209 208 210 6 (parallel [
            (set (reg:DI 6 bp [orig:219 D.5863 ] [219])
                (rotate:DI (reg:DI 6 bp [orig:418 D.5863 ] [418])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 588 {*rotldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 210 209 214 6 (parallel [
            (set (reg:DI 43 r14 [orig:220 D.5863 ] [220])
                (plus:DI (reg:DI 43 r14 [orig:194 D.5863 ] [194])
                    (reg:DI 6 bp [orig:219 D.5863 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 214 210 211 6 (parallel [
            (set (reg:DI 0 ax [orig:421 D.5863 ] [421])
                (plus:DI (reg:DI 0 ax [orig:217 D.5863 ] [217])
                    (reg:DI 39 r10 [orig:420 D.5863 ] [420])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 39 r10 [orig:420 D.5863 ] [420])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 211 214 212 6 (parallel [
            (set (reg:DI 38 r9 [orig:419 D.5863 ] [419])
                (xor:DI (reg:DI 38 r9 [orig:180 D.5863 ] [180])
                    (reg:DI 43 r14 [orig:220 D.5863 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 212 211 787 6 (parallel [
            (set (reg:DI 38 r9 [orig:222 D.5863 ] [222])
                (rotatert:DI (reg:DI 38 r9 [orig:419 D.5863 ] [419])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 787 212 612 6 (set (reg:DI 5 di [orig:225 v$1 ] [225])
        (plus:DI (reg:DI 0 ax [orig:421 D.5863 ] [421])
            (reg:DI 38 r9 [orig:222 D.5863 ] [222]))) blake_ref.c:182 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:421 D.5863 ] [421])
        (nil)))
(insn 612 787 216 6 (set (reg:DI 0 ax [orig:146 D.5863 ] [146])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [6 %sfp+-472 S8 A64])) blake_ref.c:183 89 {*movdi_internal}
     (nil))
(insn:TI 216 612 217 6 (parallel [
            (set (reg:DI 6 bp [orig:422 D.5863 ] [422])
                (xor:DI (reg:DI 6 bp [orig:219 D.5863 ] [219])
                    (reg:DI 5 di [orig:225 v$1 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 217 216 218 6 (parallel [
            (set (reg:DI 6 bp [orig:227 v$12 ] [227])
                (rotatert:DI (reg:DI 6 bp [orig:422 D.5863 ] [422])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 218 217 219 6 (parallel [
            (set (reg:DI 43 r14 [orig:197 v$11 ] [197])
                (plus:DI (reg:DI 43 r14 [orig:220 D.5863 ] [220])
                    (reg:DI 6 bp [orig:227 v$12 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 219 218 740 6 (parallel [
            (set (reg:DI 38 r9 [orig:423 D.5863 ] [423])
                (xor:DI (reg:DI 38 r9 [orig:222 D.5863 ] [222])
                    (reg:DI 43 r14 [orig:197 v$11 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 43 r14 [orig:197 v$11 ] [197])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 740 219 220 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [6 %sfp+-496 S8 A64])
        (reg:DI 43 r14 [orig:197 v$11 ] [197])) blake_ref.c:182 89 {*movdi_internal}
     (nil))
(insn:TI 220 740 608 6 (parallel [
            (set (reg:DI 38 r9 [orig:230 v$6 ] [230])
                (rotatert:DI (reg:DI 38 r9 [orig:230 v$6 ] [230])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 608 220 609 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-528 S8 A64])
        (reg:DI 38 r9 [orig:230 v$6 ] [230])) blake_ref.c:182 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 38 r9 [orig:230 v$6 ] [230])
        (nil)))
(insn 609 608 221 6 (set (reg:DI 38 r9 [orig:424 D.5863 ] [424])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 272 [0x110])) [6 %sfp+-272 S8 A64])) blake_ref.c:183 89 {*movdi_internal}
     (nil))
(insn:TI 221 609 222 6 (parallel [
            (set (reg:DI 38 r9 [orig:424 D.5863 ] [424])
                (xor:DI (reg:DI 38 r9 [orig:424 D.5863 ] [424])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 144 [0x90])) [6 %sfp+-400 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 222 221 223 6 (parallel [
            (set (reg:DI 2 cx [orig:425 D.5863 ] [425])
                (plus:DI (reg:DI 2 cx [orig:175 D.5863 ] [175])
                    (reg:DI 38 r9 [orig:424 D.5863 ] [424])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 38 r9 [orig:424 D.5863 ] [424])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 223 222 224 6 (parallel [
            (set (reg:DI 2 cx [orig:233 D.5863 ] [233])
                (plus:DI (reg:DI 2 cx [orig:425 D.5863 ] [425])
                    (reg:DI 37 r8 [orig:196 D.5863 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 224 223 254 6 (parallel [
            (set (reg:DI 42 r13 [orig:426 D.5863 ] [426])
                (xor:DI (reg:DI 42 r13 [orig:161 D.5863 ] [161])
                    (reg:DI 2 cx [orig:233 D.5863 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 254 224 225 6 (parallel [
            (set (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                (plus:DI (reg:DI 4 si [orig:269 ivtmp.149 ] [269])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 225 254 788 6 (parallel [
            (set (reg:DI 42 r13 [orig:235 D.5863 ] [235])
                (rotate:DI (reg:DI 42 r13 [orig:426 D.5863 ] [426])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 588 {*rotldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 788 225 613 6 (set (reg:DI 38 r9 [orig:236 D.5863 ] [236])
        (plus:DI (reg:DI 0 ax [orig:146 D.5863 ] [146])
            (reg:DI 42 r13 [orig:235 D.5863 ] [235]))) blake_ref.c:183 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:146 D.5863 ] [146])
        (nil)))
(insn 613 788 229 6 (set (reg:DI 0 ax [orig:428 D.5863 ] [428])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 280 [0x118])) [6 %sfp+-264 S8 A64])) blake_ref.c:183 89 {*movdi_internal}
     (nil))
(insn 229 613 227 6 (parallel [
            (set (reg:DI 0 ax [orig:428 D.5863 ] [428])
                (xor:DI (reg:DI 0 ax [orig:428 D.5863 ] [428])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 152 [0x98])) [6 %sfp+-392 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 227 229 228 6 (parallel [
            (set (reg:DI 37 r8 [orig:427 D.5863 ] [427])
                (xor:DI (reg:DI 37 r8 [orig:196 D.5863 ] [196])
                    (reg:DI 38 r9 [orig:236 D.5863 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 228 227 230 6 (parallel [
            (set (reg:DI 37 r8 [orig:238 D.5863 ] [238])
                (rotatert:DI (reg:DI 37 r8 [orig:427 D.5863 ] [427])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 230 228 620 6 (parallel [
            (set (reg:DI 2 cx [orig:429 D.5863 ] [429])
                (plus:DI (reg:DI 2 cx [orig:233 D.5863 ] [233])
                    (reg:DI 0 ax [orig:428 D.5863 ] [428])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:428 D.5863 ] [428])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 620 230 237 6 (set (reg:DI 0 ax [orig:432 D.5863 ] [432])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 288 [0x120])) [6 %sfp+-256 S8 A64])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn 237 620 231 6 (parallel [
            (set (reg:DI 0 ax [orig:432 D.5863 ] [432])
                (xor:DI (reg:DI 0 ax [orig:432 D.5863 ] [432])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 160 [0xa0])) [6 %sfp+-384 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 231 237 232 6 (parallel [
            (set (reg:DI 2 cx [orig:241 v$2 ] [241])
                (plus:DI (reg:DI 2 cx [orig:429 D.5863 ] [429])
                    (reg:DI 37 r8 [orig:238 D.5863 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 232 231 739 6 (parallel [
            (set (reg:DI 42 r13 [orig:430 D.5863 ] [430])
                (xor:DI (reg:DI 42 r13 [orig:235 D.5863 ] [235])
                    (reg:DI 2 cx [orig:241 v$2 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:241 v$2 ] [241])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 739 232 233 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-520 S8 A64])
        (reg:DI 2 cx [orig:241 v$2 ] [241])) blake_ref.c:183 89 {*movdi_internal}
     (nil))
(insn:TI 233 739 234 6 (parallel [
            (set (reg:DI 42 r13 [orig:243 v$13 ] [243])
                (rotatert:DI (reg:DI 42 r13 [orig:430 D.5863 ] [430])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 234 233 238 6 (parallel [
            (set (reg:DI 38 r9 [orig:244 v$8 ] [244])
                (plus:DI (reg:DI 38 r9 [orig:236 D.5863 ] [236])
                    (reg:DI 42 r13 [orig:243 v$13 ] [243])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 238 234 624 6 (parallel [
            (set (reg:DI 1 dx [orig:433 D.5863 ] [433])
                (plus:DI (reg:DI 1 dx [orig:191 D.5863 ] [191])
                    (reg:DI 0 ax [orig:432 D.5863 ] [432])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:432 D.5863 ] [432])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 624 238 235 6 (set (reg:DI 0 ax [orig:162 D.5863 ] [162])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-480 S8 A64])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn:TI 235 624 618 6 (parallel [
            (set (reg:DI 37 r8 [orig:431 D.5863 ] [431])
                (xor:DI (reg:DI 37 r8 [orig:238 D.5863 ] [238])
                    (reg:DI 38 r9 [orig:244 v$8 ] [244])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 618 235 738 6 (set (reg:DI 2 cx [orig:246 v$7 ] [246])
        (reg:DI 37 r8 [orig:431 D.5863 ] [431])) blake_ref.c:183 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [orig:431 D.5863 ] [431])
        (nil)))
(insn 738 618 236 6 (set (reg:DI 37 r8 [orig:148 D.5863 ] [148])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [6 %sfp+-240 S8 A64])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn:TI 236 738 619 6 (parallel [
            (set (reg:DI 2 cx [orig:246 v$7 ] [246])
                (rotatert:DI (reg:DI 2 cx [orig:246 v$7 ] [246])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 619 236 627 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [6 %sfp+-512 S8 A64])
        (reg:DI 2 cx [orig:246 v$7 ] [246])) blake_ref.c:183 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:246 v$7 ] [246])
        (nil)))
(insn 627 619 239 6 (set (reg:DI 2 cx [orig:436 D.5863 ] [436])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 296 [0x128])) [6 %sfp+-248 S8 A64])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn:TI 239 627 245 6 (parallel [
            (set (reg:DI 1 dx [orig:250 D.5863 ] [250])
                (plus:DI (reg:DI 1 dx [orig:433 D.5863 ] [433])
                    (reg:DI 37 r8 [orig:148 D.5863 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 245 239 240 6 (parallel [
            (set (reg:DI 2 cx [orig:436 D.5863 ] [436])
                (xor:DI (reg:DI 2 cx [orig:436 D.5863 ] [436])
                    (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                            (const_int 168 [0xa8])) [6 %sfp+-376 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 240 245 241 6 (parallel [
            (set (reg:DI 3 bx [orig:434 D.5863 ] [434])
                (xor:DI (reg:DI 3 bx [orig:177 D.5863 ] [177])
                    (reg:DI 1 dx [orig:250 D.5863 ] [250])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 241 240 242 6 (parallel [
            (set (reg:DI 3 bx [orig:252 D.5863 ] [252])
                (rotate:DI (reg:DI 3 bx [orig:434 D.5863 ] [434])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 588 {*rotldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 242 241 243 6 (parallel [
            (set (reg:DI 0 ax [orig:253 D.5863 ] [253])
                (plus:DI (reg:DI 0 ax [orig:162 D.5863 ] [162])
                    (reg:DI 3 bx [orig:252 D.5863 ] [252])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 243 242 246 6 (parallel [
            (set (reg:DI 37 r8 [orig:435 D.5863 ] [435])
                (xor:DI (reg:DI 37 r8 [orig:435 D.5863 ] [435])
                    (reg:DI 0 ax [orig:253 D.5863 ] [253])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 246 243 244 6 (parallel [
            (set (reg:DI 1 dx [orig:437 D.5863 ] [437])
                (plus:DI (reg:DI 1 dx [orig:250 D.5863 ] [250])
                    (reg:DI 2 cx [orig:436 D.5863 ] [436])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:436 D.5863 ] [436])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 244 246 247 6 (parallel [
            (set (reg:DI 37 r8 [orig:255 D.5863 ] [255])
                (rotatert:DI (reg:DI 37 r8 [orig:435 D.5863 ] [435])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 247 244 248 6 (parallel [
            (set (reg:DI 1 dx [orig:258 v$3 ] [258])
                (plus:DI (reg:DI 1 dx [orig:437 D.5863 ] [437])
                    (reg:DI 37 r8 [orig:255 D.5863 ] [255])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 248 247 737 6 (parallel [
            (set (reg:DI 3 bx [orig:438 D.5863 ] [438])
                (xor:DI (reg:DI 3 bx [orig:252 D.5863 ] [252])
                    (reg:DI 1 dx [orig:258 v$3 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:258 v$3 ] [258])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 737 248 249 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-504 S8 A64])
        (reg:DI 1 dx [orig:258 v$3 ] [258])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn:TI 249 737 250 6 (parallel [
            (set (reg:DI 3 bx [orig:260 v$14 ] [260])
                (rotatert:DI (reg:DI 3 bx [orig:438 D.5863 ] [438])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 250 249 251 6 (parallel [
            (set (reg:DI 0 ax [orig:262 v$9 ] [262])
                (plus:DI (reg:DI 0 ax [orig:253 D.5863 ] [253])
                    (reg:DI 3 bx [orig:260 v$14 ] [260])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 251 250 736 6 (parallel [
            (set (reg:DI 37 r8 [orig:439 D.5863 ] [439])
                (xor:DI (reg:DI 37 r8 [orig:255 D.5863 ] [255])
                    (reg:DI 0 ax [orig:262 v$9 ] [262])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:262 v$9 ] [262])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 736 251 252 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [6 %sfp+-480 S8 A64])
        (reg:DI 0 ax [orig:262 v$9 ] [262])) blake_ref.c:184 89 {*movdi_internal}
     (nil))
(insn:TI 252 736 255 6 (parallel [
            (set (reg:DI 37 r8 [orig:264 v$4 ] [264])
                (rotatert:DI (reg:DI 37 r8 [orig:439 D.5863 ] [439])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 589 {*rotrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 255 252 256 6 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                                (const_int 316 [0x13c])) [6 %sfp+-228 S4 A32])
                        (const_int -1 [0xffffffffffffffff]))
                    (const_int 0 [0])))
            (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                        (const_int 316 [0x13c])) [6 %sfp+-228 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                            (const_int 316 [0x13c])) [6 %sfp+-228 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
        ]) blake_ref.c:173 225 {*addsi_2}
     (nil))
(jump_insn:TI 256 255 359 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 822)
            (pc))) blake_ref.c:173 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9412 (nil)))
 -> 822)
;;  succ:       5 [94.1%]  (CAN_FALLTHRU)
;;              7 [5.9%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]

;; basic block 7, loop depth 0, count 0, freq 588, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [5.9%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; lr  use 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 359 256 751 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 751 359 425 7 NOTE_INSN_DELETED)
(insn:TI 425 751 430 7 (set (reg:DI 4 si [orig:211 v$10 ] [211])
        (reg:DI 44 r15 [orig:211 v$10 ] [211])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 44 r15 [orig:211 v$10 ] [211])
        (nil)))
(insn 430 425 665 7 (set (reg:DI 44 r15 [orig:258 v$3 ] [258])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-504 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 665 430 669 7 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-504 S8 A64])
        (reg:DI 38 r9 [orig:244 v$8 ] [244])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 38 r9 [orig:244 v$8 ] [244])
        (nil)))
(insn:TI 669 665 671 7 (set (reg:DI 21 xmm0 [orig:489 vect_cst_.125 ] [489])
        (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 671 669 667 7 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 5 di [orig:225 v$1 ] [225])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:225 v$1 ] [225])
        (nil)))
(insn:TI 667 671 362 7 (set (reg:DI 22 xmm1 [orig:488 vect_cst_.130 ] [488])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-504 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 362 667 361 7 (set (reg:V2DI 21 xmm0 [orig:489 vect_cst_.125 ] [489])
        (vec_concat:V2DI (reg:DI 21 xmm0 [orig:489 vect_cst_.125 ] [489])
            (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn:TI 361 362 673 7 (set (reg:V2DI 22 xmm1 [orig:488 vect_cst_.130 ] [488])
        (vec_concat:V2DI (reg:DI 22 xmm1 [orig:488 vect_cst_.130 ] [488])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 64 [0x40])) [6 %sfp+-480 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 673 361 364 7 (set (reg:DI 24 xmm3 [orig:491 vect_cst_.120 ] [491])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 384 [0x180])) [6 %sfp+-160 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 364 673 678 7 (set (reg:V2DI 24 xmm3 [orig:491 vect_cst_.120 ] [491])
        (vec_concat:V2DI (reg:DI 24 xmm3 [orig:491 vect_cst_.120 ] [491])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 392 [0x188])) [6 %sfp+-152 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 678 364 682 7 (set (reg:DI 0 ax [718])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 624 [0x270])) [4 state+0 S8 A64])) blake_ref.c:189 89 {*movdi_internal}
     (nil))
(insn 682 678 363 7 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 44 r15 [orig:258 v$3 ] [258])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 44 r15 [orig:258 v$3 ] [258])
        (nil)))
(insn:TI 363 682 676 7 (set (reg:V2DI 21 xmm0 [orig:490 D.5862 ] [490])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:489 vect_cst_.125 ] [489])
            (reg:V2DI 22 xmm1 [orig:488 vect_cst_.130 ] [488]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 22 xmm1 [orig:488 vect_cst_.130 ] [488])
        (nil)))
(insn:TI 676 363 366 7 (set (reg:DI 22 xmm1 [orig:493 vect_cst_.116 ] [493])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [6 %sfp+-224 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 366 676 687 7 (set (reg:V2DI 22 xmm1 [orig:493 vect_cst_.116 ] [493])
        (vec_concat:V2DI (reg:DI 22 xmm1 [orig:493 vect_cst_.116 ] [493])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 328 [0x148])) [6 %sfp+-216 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 687 366 365 7 (set (reg:DI 23 xmm2 [orig:498 vect_cst_.119 ] [498])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 400 [0x190])) [6 %sfp+-144 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 365 687 373 7 (set (reg:V2DI 21 xmm0 [orig:492 D.5862 ] [492])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:490 D.5862 ] [490])
            (reg:V2DI 24 xmm3 [orig:491 vect_cst_.120 ] [491]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 373 365 367 7 (set (reg:V2DI 23 xmm2 [orig:498 vect_cst_.119 ] [498])
        (vec_concat:V2DI (reg:DI 23 xmm2 [orig:498 vect_cst_.119 ] [498])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 408 [0x198])) [6 %sfp+-136 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn:TI 367 373 680 7 (set (reg:V2DI 21 xmm0 [orig:494 vect__785.126 ] [494])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:492 D.5862 ] [492])
            (reg:V2DI 22 xmm1 [orig:493 vect_cst_.116 ] [493]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 22 xmm1 [orig:493 vect_cst_.116 ] [493])
        (nil)))
(insn:TI 680 367 370 7 (set (reg:DI 22 xmm1 [orig:495 vect_cst_.124 ] [495])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [6 %sfp+-520 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 370 680 684 7 (set (reg:V2DI 22 xmm1 [orig:495 vect_cst_.124 ] [495])
        (vec_concat:V2DI (reg:DI 22 xmm1 [orig:495 vect_cst_.124 ] [495])
            (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 684 370 368 7 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 4 si [orig:211 v$10 ] [211])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:211 v$10 ] [211])
        (nil)))
(insn:TI 368 684 755 7 (set (mem:V16QI (plus:DI (reg:DI 0 ax [718])
                (const_int 136 [0x88])) [3 MEM[(long long unsigned int *)state_534(D) + 136B]+0 S16 A64])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [orig:494 vect__785.126 ] [494])
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V16QI 21 xmm0 [orig:494 vect__785.126 ] [494])
        (nil)))
(insn:TI 755 368 694 7 (set (reg:DI 21 xmm0 [orig:496 vect_cst_.129 ] [496])
        (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 694 755 371 7 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 6 bp [orig:227 v$12 ] [227])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 6 bp [orig:227 v$12 ] [227])
        (nil)))
(insn:TI 371 694 372 7 (set (reg:V2DI 21 xmm0 [orig:496 vect_cst_.129 ] [496])
        (vec_concat:V2DI (reg:DI 21 xmm0 [orig:496 vect_cst_.129 ] [496])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])) [6 %sfp+-496 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn:TI 372 371 690 7 (set (reg:V2DI 21 xmm0 [orig:497 D.5862 ] [497])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:496 vect_cst_.129 ] [496])
            (reg:V2DI 22 xmm1 [orig:495 vect_cst_.124 ] [495]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 22 xmm1 [orig:495 vect_cst_.124 ] [495])
        (nil)))
(insn:TI 690 372 375 7 (set (reg:DI 22 xmm1 [orig:500 vect_cst_.115 ] [500])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [6 %sfp+-208 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 375 690 374 7 (set (reg:V2DI 22 xmm1 [orig:500 vect_cst_.115 ] [500])
        (vec_concat:V2DI (reg:DI 22 xmm1 [orig:500 vect_cst_.115 ] [500])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 344 [0x158])) [6 %sfp+-200 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn:TI 374 375 376 7 (set (reg:V2DI 21 xmm0 [orig:499 D.5862 ] [499])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:497 D.5862 ] [497])
            (reg:V2DI 23 xmm2 [orig:498 vect_cst_.119 ] [498]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn:TI 376 374 377 7 (set (reg:V2DI 21 xmm0 [orig:501 vect__785.126 ] [501])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:499 D.5862 ] [499])
            (reg:V2DI 22 xmm1 [orig:500 vect_cst_.115 ] [500]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 22 xmm1 [orig:500 vect_cst_.115 ] [500])
        (nil)))
(insn:TI 377 376 697 7 (set (mem:V16QI (plus:DI (reg:DI 0 ax [724])
                (const_int 152 [0x98])) [3 MEM[(long long unsigned int *)state_534(D) + 152B]+0 S16 A64])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [orig:501 vect__785.126 ] [501])
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V16QI 21 xmm0 [orig:501 vect__785.126 ] [501])
        (nil)))
(insn:TI 697 377 696 7 (set (reg:DI 21 xmm0 [orig:502 vect_cst_.123 ] [502])
        (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 696 697 379 7 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 42 r13 [orig:243 v$13 ] [243])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 42 r13 [orig:243 v$13 ] [243])
        (nil)))
(insn:TI 379 696 699 7 (set (reg:V2DI 21 xmm0 [orig:502 vect_cst_.123 ] [502])
        (vec_concat:V2DI (reg:DI 21 xmm0 [orig:502 vect_cst_.123 ] [502])
            (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 699 379 701 7 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 37 r8 [orig:264 v$4 ] [264])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [orig:264 v$4 ] [264])
        (nil)))
(insn:TI 701 699 380 7 (set (reg:DI 22 xmm1 [orig:503 vect_cst_.128 ] [503])
        (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 380 701 381 7 (set (reg:V2DI 22 xmm1 [orig:503 vect_cst_.128 ] [503])
        (vec_concat:V2DI (reg:DI 22 xmm1 [orig:503 vect_cst_.128 ] [503])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])) [6 %sfp+-536 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn:TI 381 380 383 7 (set (reg:V2DI 21 xmm0 [orig:504 D.5862 ] [504])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:502 vect_cst_.123 ] [502])
            (reg:V2DI 22 xmm1 [orig:503 vect_cst_.128 ] [503]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 22 xmm1 [orig:503 vect_cst_.128 ] [503])
        (nil)))
(insn:TI 383 381 703 7 (set (reg:V2DI 21 xmm0 [orig:506 D.5862 ] [506])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:504 D.5862 ] [504])
            (reg:V2DI 24 xmm3 [orig:491 vect_cst_.120 ] [491]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 24 xmm3 [orig:491 vect_cst_.120 ] [491])
        (nil)))
(insn:TI 703 383 384 7 (set (reg:DI 24 xmm3 [orig:507 vect_cst_.114 ] [507])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [6 %sfp+-192 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 384 703 710 7 (set (reg:V2DI 24 xmm3 [orig:507 vect_cst_.114 ] [507])
        (vec_concat:V2DI (reg:DI 24 xmm3 [orig:507 vect_cst_.114 ] [507])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 360 [0x168])) [6 %sfp+-184 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn 710 384 712 7 (set (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])
        (reg:DI 3 bx [orig:260 v$14 ] [260])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 3 bx [orig:260 v$14 ] [260])
        (nil)))
(insn:TI 712 710 385 7 (set (reg:DI 22 xmm1 [orig:510 vect_cst_.122 ] [510])
        (mem/c:DI (reg/f:DI 7 sp) [6 %sfp+-544 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 385 712 389 7 (set (reg:V2DI 21 xmm0 [orig:508 vect__785.126 ] [508])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:506 D.5862 ] [506])
            (reg:V2DI 24 xmm3 [orig:507 vect_cst_.114 ] [507]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 24 xmm3 [orig:507 vect_cst_.114 ] [507])
        (nil)))
(insn 389 385 386 7 (set (reg:V2DI 22 xmm1 [orig:510 vect_cst_.122 ] [510])
        (vec_concat:V2DI (reg:DI 22 xmm1 [orig:510 vect_cst_.122 ] [510])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 56 [0x38])) [6 %sfp+-488 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn:TI 386 389 707 7 (set (mem:V16QI (plus:DI (reg:DI 0 ax [731])
                (const_int 168 [0xa8])) [3 MEM[(long long unsigned int *)state_534(D) + 168B]+0 S16 A64])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [orig:508 vect__785.126 ] [508])
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V16QI 21 xmm0 [orig:508 vect__785.126 ] [508])
        (nil)))
(insn:TI 707 386 388 7 (set (reg:DI 21 xmm0 [orig:509 vect_cst_.127 ] [509])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [6 %sfp+-528 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 388 707 390 7 (set (reg:V2DI 21 xmm0 [orig:509 vect_cst_.127 ] [509])
        (vec_concat:V2DI (reg:DI 21 xmm0 [orig:509 vect_cst_.127 ] [509])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])) [6 %sfp+-512 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn:TI 390 388 392 7 (set (reg:V2DI 21 xmm0 [orig:511 D.5862 ] [511])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:509 vect_cst_.127 ] [509])
            (reg:V2DI 22 xmm1 [orig:510 vect_cst_.122 ] [510]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 22 xmm1 [orig:510 vect_cst_.122 ] [510])
        (nil)))
(insn:TI 392 390 714 7 (set (reg:V2DI 21 xmm0 [orig:513 D.5862 ] [513])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:511 D.5862 ] [511])
            (reg:V2DI 23 xmm2 [orig:498 vect_cst_.119 ] [498]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 23 xmm2 [orig:498 vect_cst_.119 ] [498])
        (nil)))
(insn:TI 714 392 393 7 (set (reg:DI 23 xmm2 [orig:514 vect_cst_.113 ] [514])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 368 [0x170])) [6 %sfp+-176 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 393 714 394 7 (set (reg:V2DI 23 xmm2 [orig:514 vect_cst_.113 ] [514])
        (vec_concat:V2DI (reg:DI 23 xmm2 [orig:514 vect_cst_.113 ] [514])
            (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 376 [0x178])) [6 %sfp+-168 S8 A64]))) 3673 {vec_concatv2di}
     (nil))
(insn:TI 394 393 395 7 (set (reg:V2DI 21 xmm0 [orig:515 vect__785.126 ] [515])
        (xor:V2DI (reg:V2DI 21 xmm0 [orig:513 D.5862 ] [513])
            (reg:V2DI 23 xmm2 [orig:514 vect_cst_.113 ] [514]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 23 xmm2 [orig:514 vect_cst_.113 ] [514])
        (nil)))
(insn:TI 395 394 817 7 (set (mem:V16QI (plus:DI (reg:DI 0 ax [736])
                (const_int 184 [0xb8])) [3 MEM[(long long unsigned int *)state_534(D) + 184B]+0 S16 A64])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [orig:515 vect__785.126 ] [515])
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V16QI 21 xmm0 [orig:515 vect__785.126 ] [515])
        (expr_list:REG_DEAD (reg:DI 0 ax [736])
            (nil))))
(insn:TI 817 395 401 7 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:199 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 401 817 825 7 (use (reg/i:SI 0 ax)) blake_ref.c:199 -1
     (nil))
(note 825 401 801 7 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 801 825 802 7 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:199 677 {blockage}
     (nil))
(insn/f:TI 802 801 803 7 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 552 [0x228])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:199 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 552 [0x228])))
            (nil))))
(insn/f:TI 803 802 804 7 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:199 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
            (nil))))
(insn/f:TI 804 803 805 7 (set (reg:DI 4 si)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:199 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 4 si)
            (nil))))
(insn/f:TI 805 804 806 7 (set (reg:DI 5 di)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:199 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 5 di)
            (nil))))
(insn/f:TI 806 805 807 7 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:199 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 6 bp)
            (nil))))
(insn/f:TI 807 806 808 7 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:199 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 41 r12)
            (nil))))
(insn/f:TI 808 807 809 7 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:199 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 42 r13)
            (nil))))
(insn/f:TI 809 808 810 7 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:199 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 43 r14)
            (nil))))
(insn/f:TI 810 809 811 7 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:199 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 44 r15)
            (nil))))
(jump_insn:TI 811 810 812 7 (simple_return) blake_ref.c:199 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 812 811 406)
;; basic block 8, loop depth 0, count 0, freq 294, maybe hot
;;  prev block 7, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 42 [r13]
;; live  in  	 5 [di] 7 [sp] 38 [r9] 40 [r11] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 42 [r13]
;; live  kill	
(code_label 406 812 405 8 12 "" [1 uses])
(note 405 406 9 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 9 405 10 8 (set (reg:DI 0 ax [orig:210 v$15 ] [210])
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:163 89 {*movdi_internal}
     (nil))
(insn 10 9 11 8 (set (reg:DI 3 bx [orig:260 v$14 ] [260])
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:162 89 {*movdi_internal}
     (nil))
(insn 11 10 525 8 (set (reg:DI 42 r13 [orig:243 v$13 ] [243])
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:161 89 {*movdi_internal}
     (nil))
(insn:TI 525 11 12 8 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [6 %sfp+-488 S8 A64])
        (reg:DI 0 ax [orig:210 v$15 ] [210])) blake_ref.c:163 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:210 v$15 ] [210])
        (nil)))
(insn 12 525 823 8 (set (reg:DI 6 bp [orig:227 v$12 ] [227])
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(jump_insn 823 12 824 8 (set (pc)
        (label_ref 121)) 654 {jump}
     (nil)
 -> 121)
;;  succ:       4 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 38 [r9] 40 [r11] 41 [r12] 42 [r13]

(barrier 824 823 433)
(note 433 824 0 NOTE_INSN_DELETED)

;; Function Update32.part.0 (Update32.part.0, funcdef_no=22, decl_uid=5562, cgraph_uid=0, symbol_order=31)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 42 count 31 (  1.1)


Update32.part.0

Dataflow summary:
def_info->table_size = 278, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14]
;;  exit block uses 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14]
;;  ref usage 	r0={16d,23u} r1={9d,16u} r2={9d,9u} r3={4d,18u,2e} r4={7d,9u} r5={11d,18u,6e} r6={7d,11u} r7={25d,59u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={3e} r17={45d,14u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={3d} r26={3d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={13d,15u,3e} r38={9d,6u} r39={4d,2u,1e} r40={5d,2u,1e} r41={6d,8u,1e} r42={4d,5u} r43={4d,4u} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 558{322d,219u,17e} in 140{137 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	
;; live  gen 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12]

( 2 )->[3]->( 23 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; lr  use 	 7 [sp] 37 [r8] 41 [r12]
;; lr  def 	 0 [ax] 5 [di] 17 [flags] 42 [r13]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 42 [r13]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 2 3 25 )->[4]->( 5 26 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 5 8 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 6 7 )->[8]->( 6 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 6 [bp]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 9 26 )->[10]->( 13 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 17 11 )->[12]->( 1 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 0 [ax] 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 10 )->[13]->( 19 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 13 )->[14]->( 15 27 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 14 )->[15]->( 17 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 15 )->[16]->( 17 28 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 16 15 22 19 27 28 )->[17]->( 18 12 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 6 [bp] 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]

( 17 )->[18]->( 1 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 7 [sp]

( 13 )->[19]->( 17 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]

( 19 )->[20]->( 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]
;; live  gen 	 0 [ax] 38 [r9]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]

( 20 21 )->[21]->( 21 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
;; lr  use 	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
;; lr  def 	 4 [si] 17 [flags] 38 [r9] 39 [r10]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
;; live  gen 	 4 [si] 17 [flags] 38 [r9] 39 [r10]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]

( 21 )->[22]->( 17 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	

( 3 )->[23]->( 24 25 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

( 23 )->[24]->( 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

( 23 24 )->[25]->( 4 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 6 [bp] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]

( 4 )->[26]->( 10 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 14 )->[27]->( 17 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 37 [r8] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 16 )->[28]->( 17 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 37 [r8] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 12 18 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 13 to worklist
  Adding insn 261 to worklist
  Adding insn 259 to worklist
  Adding insn 258 to worklist
  Adding insn 257 to worklist
  Adding insn 256 to worklist
  Adding insn 255 to worklist
  Adding insn 254 to worklist
  Adding insn 253 to worklist
  Adding insn 20 to worklist
  Adding insn 53 to worklist
  Adding insn 65 to worklist
  Adding insn 285 to worklist
  Adding insn 67 to worklist
  Adding insn 76 to worklist
  Adding insn 72 to worklist
  Adding insn 82 to worklist
  Adding insn 176 to worklist
  Adding insn 273 to worklist
  Adding insn 264 to worklist
  Adding insn 183 to worklist
  Adding insn 92 to worklist
  Adding insn 95 to worklist
  Adding insn 110 to worklist
  Adding insn 115 to worklist
  Adding insn 112 to worklist
  Adding insn 165 to worklist
  Adding insn 162 to worklist
  Adding insn 301 to worklist
  Adding insn 292 to worklist
  Adding insn 290 to worklist
  Adding insn 171 to worklist
  Adding insn 145 to worklist
  Adding insn 137 to worklist
  Adding insn 129 to worklist
  Adding insn 154 to worklist
  Adding insn 151 to worklist
  Adding insn 310 to worklist
  Adding insn 38 to worklist
  Adding insn 287 to worklist
  Adding insn 31 to worklist
  Adding insn 40 to worklist
  Adding insn 312 to worklist
  Adding insn 45 to worklist
  Adding insn 314 to worklist
  Adding insn 316 to worklist
  Adding insn 105 to worklist
  Adding insn 97 to worklist
  Adding insn 318 to worklist
  Adding insn 123 to worklist
Finished finding needed instructions:
processing block 18 lr out =  0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 300 to worklist
  Adding insn 299 to worklist
  Adding insn 298 to worklist
  Adding insn 297 to worklist
  Adding insn 296 to worklist
  Adding insn 295 to worklist
  Adding insn 294 to worklist
  Adding insn 293 to worklist
  Adding insn 289 to worklist
  Adding insn 168 to worklist
  Adding insn 167 to worklist
processing block 12 lr out =  0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 272 to worklist
  Adding insn 271 to worklist
  Adding insn 270 to worklist
  Adding insn 269 to worklist
  Adding insn 268 to worklist
  Adding insn 267 to worklist
  Adding insn 266 to worklist
  Adding insn 265 to worklist
  Adding insn 182 to worklist
processing block 17 lr out =  1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
  Adding insn 320 to worklist
  Adding insn 161 to worklist
processing block 22 lr out =  1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
processing block 21 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
  Adding insn 153 to worklist
  Adding insn 152 to worklist
  Adding insn 150 to worklist
  Adding insn 149 to worklist
processing block 20 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
  Adding insn 284 to worklist
  Adding insn 146 to worklist
processing block 19 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]
  Adding insn 144 to worklist
  Adding insn 143 to worklist
  Adding insn 142 to worklist
  Adding insn 141 to worklist
  Adding insn 243 to worklist
  Adding insn 140 to worklist
  Adding insn 139 to worklist
  Adding insn 246 to worklist
  Adding insn 136 to worklist
  Adding insn 130 to worklist
  Adding insn 128 to worklist
processing block 28 lr out =  1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 122 to worklist
  Adding insn 116 to worklist
processing block 16 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 247 to worklist
  Adding insn 111 to worklist
processing block 15 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 109 to worklist
processing block 27 lr out =  1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 104 to worklist
  Adding insn 98 to worklist
  Adding insn 96 to worklist
processing block 14 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 248 to worklist
processing block 13 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 91 to worklist
  Adding insn 87 to worklist
  Adding insn 85 to worklist
  Adding insn 84 to worklist
  Adding insn 241 to worklist
processing block 11 lr out =  7 [sp]
processing block 10 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 81 to worklist
processing block 9 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 78 to worklist
processing block 8 lr out =  3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 75 to worklist
  Adding insn 73 to worklist
  Adding insn 71 to worklist
  Adding insn 70 to worklist
processing block 7 lr out =  3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
processing block 6 lr out =  3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
processing block 5 lr out =  3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 59 to worklist
  Adding insn 58 to worklist
  Adding insn 57 to worklist
  Adding insn 56 to worklist
  Adding insn 249 to worklist
processing block 26 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 7 to worklist
processing block 4 lr out =  3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 52 to worklist
processing block 25 lr out =  3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 286 to worklist
  Adding insn 49 to worklist
  Adding insn 48 to worklist
  Adding insn 250 to worklist
  Adding insn 46 to worklist
  Adding insn 44 to worklist
  Adding insn 43 to worklist
processing block 24 lr out =  3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
processing block 23 lr out =  3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
  Adding insn 28 to worklist
  Adding insn 24 to worklist
  Adding insn 23 to worklist
  Adding insn 251 to worklist
processing block 3 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 237 to worklist
  Adding insn 17 to worklist
  Adding insn 16 to worklist
  Adding insn 15 to worklist
processing block 2 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
  Adding insn 12 to worklist
  Adding insn 11 to worklist
  Adding insn 235 to worklist
  Adding insn 4 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
  Adding insn 260 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 42 count 31 (  1.1)
;;   ======================================================
;;   -- basic block 2 from 253 to 13 -- after reload
;;   ======================================================

;;	  0--> b  0: i 253 [--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 254 [--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 255 [--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 256 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 257 [--sp]=di                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 258 [--sp]=si                               :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 259 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 260 {sp=sp-0x20;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  6--> b  0: i 261 unspec/v[sp] 4                          :athlon-vector,athlon-ieu,athlon-ieu
;;	  7--> b  0: i 235 r12=[cx+0x4]                            :athlon-direct,athlon-load
;;	  8--> b  0: i   2 bx=cx                                   :athlon-direct,athlon-ieu
;;	  8--> b  0: i   3 si=dx                                   :athlon-direct,athlon-ieu
;;	  8--> b  0: i   4 bp=r8                                   :athlon-direct,athlon-ieu
;;	 10--> b  0: i  11 {r12=r12>>0x3;clobber flags;}           :athlon-direct,athlon-ieu
;;	 11--> b  0: i  12 flags=cmp(r12,0)                        :athlon-direct,athlon-ieu
;;	 12--> b  0: i  13 pc={(flags==0)?L50:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 253
;;   new tail = 13

;;   ======================================================
;;   -- basic block 3 from 15 to 20 -- after reload
;;   ======================================================

;;	  0--> b  0: i  15 di=0x40                                 :athlon-direct,athlon-ieu
;;	  0--> b  0: i 237 ax=r8                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  16 {di=di-r12;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i  18 {ax=ax 0>>0x3;clobber flags;}           :athlon-direct,athlon-ieu
;;	  2--> b  0: i  17 r13=sxn(di)                             :athlon-direct,athlon-ieu
;;	  3--> b  0: i  19 flags=cmp(ax,r13)                       :athlon-direct,athlon-ieu
;;	  4--> b  0: i  20 pc={(geu(flags,0))?L305:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 15
;;   new tail = 20

;;   ======================================================
;;   -- basic block 4 from 52 to 53 -- after reload
;;   ======================================================

;;	  0--> b  0: i  52 flags=cmp(bp,0x1ff)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i  53 pc={(leu(flags,0))?L188:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 52
;;   new tail = 53

;;   ======================================================
;;   -- basic block 5 from 249 to 59 -- after reload
;;   ======================================================

;;	  0--> b  0: i 249 di=bp-0x200                             :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i  56 {di=di 0>>0x9;clobber flags;}           :athlon-direct,athlon-ieu
;;	  3--> b  0: i  57 {di=di+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  4--> b  0: i  58 {di=di<<0x6;clobber flags;}             :athlon-direct,athlon-ieu
;;	  5--> b  0: i  59 {di=di+si;clobber flags;}               :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 249
;;   new tail = 59

;;   ======================================================
;;   -- basic block 6 from 285 to 65 -- after reload
;;   ======================================================

;;	  0--> b  0: i 285 {flags=cmp([bx+0x30]+0x200,0);[bx+0x30]=[bx+0x30]+0x200;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	  4--> b  0: i  65 pc={(flags!=0)?L68:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 285
;;   new tail = 65

;;   ======================================================
;;   -- basic block 7 from 67 to 67 -- after reload
;;   ======================================================

;;	  0--> b  0: i  67 {[bx+0x34]=[bx+0x34]+0x1;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 67
;;   new tail = 67

;;   ======================================================
;;   -- basic block 8 from 70 to 76 -- after reload
;;   ======================================================

;;	  0--> b  0: i  70 dx=si                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  71 cx=bx                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  73 {si=si+0x40;clobber flags;}             :athlon-direct,athlon-ieu
;;	  1--> b  0: i  72 ax=call [`compress32']                  :athlon-vector,athlon-ieu
;;	  2--> b  0: i  75 flags=cmp(si,di)                        :athlon-direct,athlon-ieu
;;	  3--> b  0: i  76 pc={(flags!=0)?L74:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 70
;;   new tail = 76

;;   ======================================================
;;   -- basic block 9 from 78 to 78 -- after reload
;;   ======================================================

;;	  0--> b  0: i  78 {bp=bp&0x1ff;clobber flags;}            :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 78
;;   new tail = 78

;;   ======================================================
;;   -- basic block 10 from 81 to 82 -- after reload
;;   ======================================================

;;	  0--> b  0: i  81 flags=cmp(bp,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  82 pc={(flags!=0)?L306:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 81
;;   new tail = 82

;;   ======================================================
;;   -- basic block 11 from 176 to 176 -- after reload
;;   ======================================================

;;	  0--> b  0: i 176 [bx+0x4]=0                              :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 176
;;   new tail = 176

;;   ======================================================
;;   -- basic block 12 from 182 to 273 -- after reload
;;   ======================================================

;;	  0--> b  0: i 182 clobber ax                              :nothing
;;	  0--> b  0: i 183 use ax                                  :nothing
;;	  0--> b  0: i 264 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	  2--> b  0: i 265 {sp=sp+0x20;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  3--> b  0: i 266 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 267 si=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 268 di=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 269 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 270 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  8--> b  0: i 271 r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  9--> b  0: i 272 r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 10--> b  0: i 273 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 182
;;   new tail = 273

;;   ======================================================
;;   -- basic block 13 from 241 to 92 -- after reload
;;   ======================================================

;;	  0--> b  0: i 241 dx=bp                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  85 cx=sxn(r12)                             :athlon-direct,athlon-ieu
;;	  1--> b  0: i  84 {dx=dx 0>>0x3;clobber flags;}           :athlon-direct,athlon-ieu
;;	  1--> b  0: i  87 ax=bx+cx+0x38                           :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i  91 flags=cmp(dx,0x8)                       :athlon-direct,athlon-ieu
;;	  3--> b  0: i  92 pc={(geu(flags,0))?L127:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 241
;;   new tail = 92

;;   ======================================================
;;   -- basic block 14 from 248 to 95 -- after reload
;;   ======================================================

;;	  0--> b  0: i 248 flags=cmp(dx&0x4,0)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i  95 pc={(flags!=0)?L307:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 248
;;   new tail = 95

;;   ======================================================
;;   -- basic block 15 from 109 to 110 -- after reload
;;   ======================================================

;;	  0--> b  0: i 109 flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 110 pc={(flags==0)?L159:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 109
;;   new tail = 110

;;   ======================================================
;;   -- basic block 16 from 111 to 115 -- after reload
;;   ======================================================

;;	  0--> b  0: i 111 r8=[di]                                 :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 247 flags=cmp(dx&0x2,0)                     :athlon-direct,athlon-ieu
;;	  4--> b  0: i 112 [ax]=r8                                 :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 115 pc={(flags!=0)?L308:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 111
;;   new tail = 115

;;   ======================================================
;;   -- basic block 17 from 161 to 165 -- after reload
;;   ======================================================

;;	  0--> b  0: i 161 ax=r12*0x8+bp                           :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 320 {flags=cmp(bp&0x7,0);bp=bp&0x7;}        :athlon-direct,athlon-ieu
;;	  2--> b  0: i 162 [bx+0x4]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 165 pc={(flags==0)?L177:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 161
;;   new tail = 165

;;   ======================================================
;;   -- basic block 18 from 167 to 301 -- after reload
;;   ======================================================

;;	  0--> b  0: i 167 ax=[di+dx]                              :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 168 {dx=dx+bx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  4--> b  0: i 171 [cx+dx+0x38]=ax                         :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 289 clobber ax                              :nothing
;;	  4--> b  0: i 290 use ax                                  :nothing
;;	  5--> b  0: i 292 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	  7--> b  0: i 293 {sp=sp+0x20;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i 294 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  9--> b  0: i 295 si=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 10--> b  0: i 296 di=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 11--> b  0: i 297 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 12--> b  0: i 298 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 13--> b  0: i 299 r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 14--> b  0: i 300 r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 15--> b  0: i 301 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 15
;;   new head = 167
;;   new tail = 301

;;   ======================================================
;;   -- basic block 19 from 128 to 145 -- after reload
;;   ======================================================

;;	  0--> b  0: i 128 r8=[di]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 243 r11=di                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 129 [ax]=r8                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 130 r8=zxn(dx)                              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 136 r9=[di+r8-0x8]                          :athlon-direct,athlon-load
;;	  7--> b  0: i 137 [ax+r8-0x8]=r9                          :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 246 r8=ax+0x8                               :athlon-direct,athlon-agu,nothing
;;	  9--> b  0: i 139 {r8=r8&0xfffffffffffffff8;clobber flags;}:athlon-direct,athlon-ieu
;;	 10--> b  0: i 140 {ax=ax-r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	 11--> b  0: i 141 {r11=r11-ax;clobber flags;}             :athlon-direct,athlon-ieu
;;	 11--> b  0: i 142 {ax=ax+dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	 12--> b  0: i 143 {ax=ax&0xfffffffffffffff8;clobber flags;}:athlon-direct,athlon-ieu
;;	 13--> b  0: i 144 flags=cmp(ax,0x8)                       :athlon-direct,athlon-ieu
;;	 14--> b  0: i 145 pc={(ltu(flags,0))?L159:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 14
;;   new head = 128
;;   new tail = 145

;;   ======================================================
;;   -- basic block 20 from 146 to 284 -- after reload
;;   ======================================================

;;	  0--> b  0: i 146 {ax=ax&0xfffffffffffffff8;clobber flags;}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 284 {r9=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 146
;;   new tail = 284

;;   ======================================================
;;   -- basic block 21 from 149 to 154 -- after reload
;;   ======================================================

;;	  0--> b  0: i 149 r10=zxn(r9)                             :athlon-direct,athlon-ieu
;;	  0--> b  0: i 152 {r9=r9+0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 150 si=[r11+r10]                            :athlon-direct,athlon-load
;;	  1--> b  0: i 153 flags=cmp(r9,ax)                        :athlon-direct,athlon-ieu
;;	  4--> b  0: i 151 [r8+r10]=si                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 154 pc={(ltu(flags,0))?L148:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 149
;;   new tail = 154

;;   ======================================================
;;   -- basic block 22 from 310 to 310 -- after reload
;;   ======================================================

;;	  0--> b  0: i 310 pc=L159                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 310
;;   new tail = 310

;;   ======================================================
;;   -- basic block 23 from 251 to 38 -- after reload
;;   ======================================================

;;	  0--> b  0: i 251 r14=cx+0x38                             :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  23 cx=sxn(r12)                             :athlon-direct,athlon-ieu
;;	  0--> b  0: i  28 r8=r13                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i  24 {cx=cx+r14;clobber flags;}              :athlon-direct,athlon-ieu
;;	  3--> b  0: i  31 ax=call [`memcpy']                      :athlon-vector,athlon-ieu
;;	  4--> b  0: i 287 {flags=cmp([bx+0x30]+0x200,0);[bx+0x30]=[bx+0x30]+0x200;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	  8--> b  0: i  38 pc={(flags!=0)?L41:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 251
;;   new tail = 38

;;   ======================================================
;;   -- basic block 24 from 40 to 40 -- after reload
;;   ======================================================

;;	  0--> b  0: i  40 {[bx+0x34]=[bx+0x34]+0x1;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 40
;;   new tail = 40

;;   ======================================================
;;   -- basic block 25 from 43 to 312 -- after reload
;;   ======================================================

;;	  0--> b  0: i  43 dx=r14                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i  44 cx=bx                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  46 {si=si+r13;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i  45 ax=call [`compress32']                  :athlon-vector,athlon-ieu
;;	  2--> b  0: i 250 ax=di*0x8                               :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i 286 {r12=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i  48 ax=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  5--> b  0: i  49 {bp=bp-ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	  5--> b  0: i 312 pc=L50                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 43
;;   new tail = 312

;;   ======================================================
;;   -- basic block 26 from 7 to 314 -- after reload
;;   ======================================================

;;	  0--> b  0: i   7 di=si                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 314 pc=L79                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 7
;;   new tail = 314

;;   ======================================================
;;   -- basic block 27 from 96 to 316 -- after reload
;;   ======================================================

;;	  0--> b  0: i  96 r8=[di]                                 :athlon-direct,athlon-load
;;	  3--> b  0: i  97 [ax]=r8                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  98 r8=zxn(dx)                              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 104 r9=[di+r8-0x4]                          :athlon-direct,athlon-load
;;	  7--> b  0: i 105 [ax+r8-0x4]=r9                          :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 316 pc=L159                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 96
;;   new tail = 316

;;   ======================================================
;;   -- basic block 28 from 116 to 318 -- after reload
;;   ======================================================

;;	  0--> b  0: i 116 r8=zxn(dx)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 122 r9=[di+r8-0x2]                          :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i 123 [ax+r8-0x2]=r9                          :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 318 pc=L159                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 116
;;   new tail = 318



starting the processing of deferred insns
ending the processing of deferred insns


Update32.part.0

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14]
;;  exit block uses 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14]
;;  ref usage 	r0={16d,23u} r1={9d,16u} r2={9d,9u} r3={4d,18u,2e} r4={7d,9u} r5={11d,18u,6e} r6={7d,11u} r7={25d,59u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={3e} r17={45d,14u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={3d} r26={3d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={13d,15u,3e} r38={9d,6u} r39={4d,2u,1e} r40={5d,2u,1e} r41={6d,8u,1e} r42={4d,5u} r43={4d,4u} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 558{322d,219u,17e} in 140{137 regular + 3 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(note 8 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 8 10 2 NOTE_INSN_FUNCTION_BEG)
(note 10 5 253 2 NOTE_INSN_DELETED)
(insn/f:TI 253 10 254 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) blake_ref.c:289 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn/f 254 253 255 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) blake_ref.c:289 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f:TI 255 254 256 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) blake_ref.c:289 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f 256 255 257 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) blake_ref.c:289 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 257 256 258 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 5 di)) blake_ref.c:289 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil)))
(insn/f 258 257 259 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 4 si)) blake_ref.c:289 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si)
        (nil)))
(insn/f:TI 259 258 260 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) blake_ref.c:289 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 260 259 261 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:289 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -32 [0xffffffffffffffe0])))
            (nil))))
(insn:TI 261 260 262 2 (unspec_volatile [
            (reg/f:DI 7 sp)
        ] UNSPECV_PROLOGUE_USE) blake_ref.c:289 679 {prologue_use}
     (nil))
(note 262 261 235 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 235 262 2 2 (set (reg/v:SI 41 r12 [orig:88 left ] [88])
        (mem:SI (plus:DI (reg/f:DI 2 cx [orig:124 state ] [124])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])) blake_ref.c:298 90 {*movsi_internal}
     (nil))
(insn:TI 2 235 3 2 (set (reg/v/f:DI 3 bx [orig:124 state ] [124])
        (reg:DI 2 cx [ state ])) blake_ref.c:289 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 4 si [orig:125 data ] [125])
        (reg:DI 1 dx [ data ])) blake_ref.c:289 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 data+0 S8 A64])
        (nil)))
(insn 4 3 11 2 (set (reg/v:DI 6 bp [orig:126 databitlen ] [126])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:289 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
        (nil)))
(insn:TI 11 4 12 2 (parallel [
            (set (reg/v:SI 41 r12 [orig:88 left ] [88])
                (ashiftrt:SI (reg/v:SI 41 r12 [orig:88 left ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:298 545 {*ashrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (ashiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                        (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
                (const_int 3 [0x3]))
            (nil))))
(insn:TI 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 41 r12 [orig:88 left ] [88])
            (const_int 0 [0]))) blake_ref.c:302 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 50)
            (pc))) blake_ref.c:302 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 50)
;;  succ:       3 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; lr  use 	 7 [sp] 37 [r8] 41 [r12]
;; lr  def 	 0 [ax] 5 [di] 17 [flags] 42 [r13]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 42 [r13]
;; live  kill	 17 [flags]
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 15 14 237 3 (set (reg:SI 5 di [128])
        (const_int 64 [0x40])) blake_ref.c:299 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 64 [0x40])
        (nil)))
(insn 237 15 16 3 (set (reg:DI 0 ax [orig:129 D.5880 ] [129])
        (reg:DI 37 r8 [orig:126 databitlen ] [126])) blake_ref.c:302 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [orig:126 databitlen ] [126])
        (nil)))
(insn:TI 16 237 18 3 (parallel [
            (set (reg/v:SI 5 di [orig:89 fill ] [89])
                (minus:SI (reg:SI 5 di [128])
                    (reg/v:SI 41 r12 [orig:88 left ] [88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:299 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (minus:SI (const_int 64 [0x40])
                (reg/v:SI 41 r12 [orig:88 left ] [88]))
            (nil))))
(insn 18 16 17 3 (parallel [
            (set (reg:DI 0 ax [orig:129 D.5880 ] [129])
                (lshiftrt:DI (reg:DI 0 ax [orig:129 D.5880 ] [129])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:302 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 17 18 19 3 (set (reg:DI 42 r13 [orig:91 D.5880 ] [91])
        (sign_extend:DI (reg/v:SI 5 di [orig:89 fill ] [89]))) blake_ref.c:302 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 19 17 20 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:129 D.5880 ] [129])
            (reg:DI 42 r13 [orig:91 D.5880 ] [91]))) blake_ref.c:302 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:129 D.5880 ] [129])
        (nil)))
(jump_insn:TI 20 19 50 3 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 305)
            (pc))) blake_ref.c:302 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 305)
;;  succ:       23 [29.0%]  (CAN_FALLTHRU)
;;              4 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 4, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (CAN_FALLTHRU)
;;              3 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              25 [100.0%]  (CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 50 20 51 4 15 "" [2 uses])
(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 52 51 53 4 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 6 bp [orig:126 databitlen ] [126])
            (const_int 511 [0x1ff]))) blake_ref.c:318 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 53 52 54 4 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 188)
            (pc))) blake_ref.c:318 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 188)
;;  succ:       5 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              26 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]

;; basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       4 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 5 [di]
;; live  kill	 17 [flags]
(note 54 53 249 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 249 54 56 5 (set (reg:DI 5 di [orig:140 D.5880 ] [140])
        (plus:DI (reg/v:DI 6 bp [orig:126 databitlen ] [126])
            (const_int -512 [0xfffffffffffffe00]))) 214 {*leadi}
     (nil))
(insn:TI 56 249 57 5 (parallel [
            (set (reg:DI 5 di [orig:141 D.5880 ] [141])
                (lshiftrt:DI (reg:DI 5 di [orig:140 D.5880 ] [140])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 57 56 58 5 (parallel [
            (set (reg:DI 5 di [orig:142 D.5882 ] [142])
                (plus:DI (reg:DI 5 di [orig:141 D.5880 ] [141])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 58 57 59 5 (parallel [
            (set (reg:DI 5 di [orig:143 D.5882 ] [143])
                (ashift:DI (reg:DI 5 di [orig:142 D.5882 ] [142])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 59 58 74 5 (parallel [
            (set (reg/v/f:DI 5 di [orig:122 data ] [122])
                (plus:DI (reg:DI 5 di [orig:143 D.5882 ] [143])
                    (reg/v/f:DI 4 si [orig:125 data ] [125])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 6, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 74 59 60 6 19 "" [1 uses])
(note 60 74 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(note 61 60 285 6 NOTE_INSN_DELETED)
(insn:TI 285 61 65 6 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
                        (const_int 512 [0x200]))
                    (const_int 0 [0])))
            (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                        (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                            (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
                    (const_int 512 [0x200])))
        ]) blake_ref.c:323 225 {*addsi_2}
     (nil))
(jump_insn:TI 65 285 66 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) blake_ref.c:323 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 68)
;;  succ:       7 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 7, loop depth 0, count 0, freq 4550, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       6 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	 17 [flags]
(note 66 65 67 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 67 66 68 7 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                        (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                            (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:324 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       8 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 8, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [50.0%]  (CAN_FALLTHRU)
;;              7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(code_label 68 67 69 8 18 "" [1 uses])
(note 69 68 70 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 70 69 71 8 (set (reg:DI 1 dx)
        (reg/v/f:DI 4 si [orig:125 data ] [125])) blake_ref.c:325 89 {*movdi_internal}
     (nil))
(insn 71 70 73 8 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:124 state ] [124])) blake_ref.c:325 89 {*movdi_internal}
     (nil))
(insn 73 71 72 8 (parallel [
            (set (reg/v/f:DI 4 si [orig:125 data ] [125])
                (plus:DI (reg/v/f:DI 4 si [orig:125 data ] [125])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:326 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 72 73 75 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>) [0 compress32 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:325 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn:TI 75 72 76 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 4 si [orig:125 data ] [125])
            (reg/v/f:DI 5 di [orig:122 data ] [122]))) blake_ref.c:318 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 76 75 77 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 74)
            (pc))) blake_ref.c:318 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 74)
;;  succ:       6 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              9 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 6 [bp]
;; live  kill	 17 [flags]
(note 77 76 78 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 78 77 79 9 (parallel [
            (set (reg/v:DI 6 bp [orig:126 databitlen ] [126])
                (and:DI (reg/v:DI 6 bp [orig:126 databitlen ] [126])
                    (const_int 511 [0x1ff])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              26 [100.0%]  (CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 79 78 80 10 17 "" [1 uses])
(note 80 79 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn:TI 81 80 82 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 6 bp [orig:126 databitlen ] [126])
            (const_int 0 [0]))) blake_ref.c:330 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 82 81 175 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 306)
            (pc))) blake_ref.c:330 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 306)
;;  succ:       13 [29.0%]  (CAN_FALLTHRU)
;;              11 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 11, loop depth 0, count 0, freq 639, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       10 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
(note 175 82 176 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn:TI 176 175 177 11 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:339 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:124 state ] [124])
        (nil)))
;;  succ:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 769, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       17 [50.0%]  (CAN_FALLTHRU)
;;              11 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 0 [ax] 17 [flags]
(code_label 177 176 178 12 27 "" [1 uses])
(note 178 177 182 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 182 178 183 12 (clobber (reg:SI 0 ax [orig:123 <retval> ] [123])) blake_ref.c:343 -1
     (nil))
(insn 183 182 321 12 (use (reg/i:SI 0 ax)) blake_ref.c:343 -1
     (expr_list:REG_DEAD (reg/i:SI 0 ax)
        (nil)))
(note 321 183 264 12 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 264 321 265 12 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:343 677 {blockage}
     (nil))
(insn/f:TI 265 264 266 12 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:343 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (nil))))
(insn/f:TI 266 265 267 12 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
            (nil))))
(insn/f:TI 267 266 268 12 (set (reg:DI 4 si)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 4 si)
            (nil))))
(insn/f:TI 268 267 269 12 (set (reg:DI 5 di)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 5 di)
            (nil))))
(insn/f:TI 269 268 270 12 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 6 bp)
            (nil))))
(insn/f:TI 270 269 271 12 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 41 r12)
            (nil))))
(insn/f:TI 271 270 272 12 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 42 r13)
            (nil))))
(insn/f:TI 272 271 273 12 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 43 r14)
            (nil))))
(jump_insn:TI 273 272 274 12 (simple_return) blake_ref.c:343 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

(barrier 274 273 306)
;; basic block 13, loop depth 0, count 0, freq 261, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [29.0%]  (CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 306 274 83 13 41 "" [1 uses])
(note 83 306 86 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(note 86 83 241 13 NOTE_INSN_DELETED)
(insn:TI 241 86 85 13 (set (reg:DI 1 dx [orig:107 D.5880 ] [107])
        (reg/v:DI 6 bp [orig:126 databitlen ] [126])) blake_ref.c:332 89 {*movdi_internal}
     (nil))
(insn 85 241 84 13 (set (reg:DI 2 cx [orig:109 D.5882 ] [109])
        (sign_extend:DI (reg/v:SI 41 r12 [orig:88 left ] [88]))) blake_ref.c:331 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 84 85 87 13 (parallel [
            (set (reg:DI 1 dx [orig:107 D.5880 ] [107])
                (lshiftrt:DI (reg:DI 1 dx [orig:107 D.5880 ] [107])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:332 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 87 84 91 13 (set (reg:DI 0 ax [orig:146 D.5883 ] [146])
        (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                (reg:DI 2 cx [orig:109 D.5882 ] [109]))
            (const_int 56 [0x38]))) blake_ref.c:331 214 {*leadi}
     (nil))
(insn:TI 91 87 92 13 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:107 D.5880 ] [107])
            (const_int 8 [0x8]))) blake_ref.c:331 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 92 91 189 13 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 127)
;;  succ:       19 [50.0%]  (CAN_FALLTHRU)
;;              14 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 14, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(note 189 92 93 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(note 93 189 248 14 NOTE_INSN_DELETED)
(insn:TI 248 93 95 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:QI (reg:QI 1 dx [orig:107 D.5880 ] [107])
                (const_int 4 [0x4]))
            (const_int 0 [0]))) blake_ref.c:331 359 {*testqi_1_maybe_si}
     (nil))
(jump_insn:TI 95 248 191 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 307)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1000 (nil)))
 -> 307)
;;  succ:       15 [90.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              27 [10.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 15, loop depth 0, count 0, freq 118, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [90.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(note 191 95 109 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn:TI 109 191 110 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:107 D.5880 ] [107])
            (const_int 0 [0]))) blake_ref.c:331 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 110 109 192 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 159)
;;  succ:       17 [50.0%]  (CAN_FALLTHRU)
;;              16 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 16, loop depth 0, count 0, freq 59, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags] 37 [r8]
;; live  kill	
(note 192 110 113 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(note 113 192 111 16 NOTE_INSN_DELETED)
(insn:TI 111 113 247 16 (set (reg:QI 37 r8 [159])
        (mem:QI (reg/v/f:DI 5 di [orig:122 data ] [122]) [0  S1 A8])) blake_ref.c:331 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem:QI (reg/v/f:DI 5 di [orig:122 data ] [122]) [0  S1 A8])
        (nil)))
(insn 247 111 112 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:QI (reg:QI 1 dx [orig:107 D.5880 ] [107])
                (const_int 2 [0x2]))
            (const_int 0 [0]))) blake_ref.c:331 359 {*testqi_1_maybe_si}
     (nil))
(insn:TI 112 247 115 16 (set (mem:QI (reg:DI 0 ax [orig:146 D.5883 ] [146]) [0  S1 A8])
        (reg:QI 37 r8 [159])) blake_ref.c:331 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 37 r8 [159])
        (nil)))
(jump_insn 115 112 159 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 308)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1000 (nil)))
 -> 308)
;;  succ:       17 [90.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              28 [10.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 17, loop depth 0, count 0, freq 178, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [90.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              15 [50.0%]  (CAN_FALLTHRU)
;;              22 [100.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              19 [20.0%]  (CAN_FALLTHRU)
;;              27 [100.0%]  (CAN_FALLTHRU)
;;              28 [100.0%]  (CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 6 [bp] 17 [flags]
;; live  kill	
(code_label 159 115 200 17 22 "" [5 uses])
(note 200 159 160 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(note 160 200 163 17 NOTE_INSN_DELETED)
(note 163 160 161 17 NOTE_INSN_DELETED)
(insn:TI 161 163 320 17 (set (reg:SI 0 ax [183])
        (plus:SI (mult:SI (reg/v:SI 41 r12 [orig:88 left ] [88])
                (const_int 8 [0x8]))
            (reg:SI 6 bp [orig:126 databitlen ] [126]))) blake_ref.c:333 213 {*leasi}
     (expr_list:REG_DEAD (reg/v:SI 41 r12 [orig:88 left ] [88])
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                    (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
            (nil))))
(insn 320 161 162 17 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (and:SI (reg:SI 6 bp [orig:126 databitlen ] [126])
                        (const_int 7 [0x7]))
                    (const_int 0 [0])))
            (set (reg:SI 6 bp [orig:126 databitlen ] [126])
                (and:SI (reg:SI 6 bp [orig:126 databitlen ] [126])
                    (const_int 7 [0x7])))
        ]) blake_ref.c:335 392 {*andsi_2}
     (expr_list:REG_UNUSED (reg:SI 6 bp [orig:126 databitlen ] [126])
        (nil)))
(insn:TI 162 320 165 17 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (reg:SI 0 ax [183])) blake_ref.c:333 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [183])
        (nil)))
(jump_insn 165 162 166 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 177)
            (pc))) blake_ref.c:335 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 177)
;;  succ:       18 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              12 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]

;; basic block 18, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       17 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 0 [ax] 17 [flags]
(note 166 165 169 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(note 169 166 167 18 NOTE_INSN_DELETED)
(insn:TI 167 169 168 18 (set (reg:QI 0 ax [orig:119 D.5887 ] [119])
        (mem:QI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                (reg:DI 1 dx [orig:107 D.5880 ] [107])) [0 *_40+0 S1 A8])) blake_ref.c:336 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 5 di [orig:122 data ] [122])
        (nil)))
(insn 168 167 171 18 (parallel [
            (set (reg:DI 1 dx [185])
                (plus:DI (reg:DI 1 dx [orig:107 D.5880 ] [107])
                    (reg/v/f:DI 3 bx [orig:124 state ] [124])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:336 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:124 state ] [124])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 171 168 289 18 (set (mem/j:QI (plus:DI (plus:DI (reg:DI 2 cx [orig:109 D.5882 ] [109])
                    (reg:DI 1 dx [185]))
                (const_int 56 [0x38])) [0 state_1(D)->data32 S1 A8])
        (reg:QI 0 ax [orig:119 D.5887 ] [119])) blake_ref.c:336 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:109 D.5882 ] [109])
        (expr_list:REG_DEAD (reg:DI 1 dx [185])
            (expr_list:REG_DEAD (reg:QI 0 ax [orig:119 D.5887 ] [119])
                (nil)))))
(insn 289 171 290 18 (clobber (reg:SI 0 ax [orig:123 <retval> ] [123])) blake_ref.c:343 -1
     (nil))
(insn 290 289 322 18 (use (reg/i:SI 0 ax)) blake_ref.c:343 -1
     (nil))
(note 322 290 292 18 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 292 322 293 18 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:343 677 {blockage}
     (nil))
(insn/f:TI 293 292 294 18 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:343 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (nil))))
(insn/f:TI 294 293 295 18 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 295 294 296 18 (set (reg:DI 4 si)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 4 si)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 296 295 297 18 (set (reg:DI 5 di)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 5 di)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 297 296 298 18 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 6 bp)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 298 297 299 18 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 41 r12)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 299 298 300 18 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 42 r13)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 300 299 301 18 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:343 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 43 r14)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(jump_insn:TI 301 300 304 18 (simple_return) blake_ref.c:343 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

(barrier 304 301 127)
;; basic block 19, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [50.0%]  (CAN_FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
(code_label 127 304 195 19 21 "" [1 uses])
(note 195 127 131 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(note 131 195 132 19 NOTE_INSN_DELETED)
(note 132 131 134 19 NOTE_INSN_DELETED)
(note 134 132 135 19 NOTE_INSN_DELETED)
(note 135 134 128 19 NOTE_INSN_DELETED)
(insn:TI 128 135 243 19 (set (reg:DI 37 r8 [168])
        (mem:DI (reg/v/f:DI 5 di [orig:122 data ] [122]) [0  S8 A8])) blake_ref.c:331 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (reg/v/f:DI 5 di [orig:122 data ] [122]) [0  S8 A8])
        (nil)))
(insn 243 128 129 19 (set (reg/f:DI 40 r11 [orig:149 data ] [149])
        (reg/v/f:DI 5 di [orig:122 data ] [122])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn:TI 129 243 130 19 (set (mem:DI (reg:DI 0 ax [orig:146 D.5883 ] [146]) [0  S8 A8])
        (reg:DI 37 r8 [168])) blake_ref.c:331 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [168])
        (nil)))
(insn 130 129 136 19 (set (reg:DI 37 r8 [orig:169 D.5880 ] [169])
        (zero_extend:DI (reg:SI 1 dx [orig:107 D.5880 ] [107]))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn:TI 136 130 137 19 (set (reg:DI 38 r9 [175])
        (mem:DI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                    (reg:DI 37 r8 [orig:169 D.5880 ] [169]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])) blake_ref.c:331 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                    (reg:DI 37 r8 [orig:169 D.5880 ] [169]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])
        (nil)))
(insn:TI 137 136 246 19 (set (mem:DI (plus:DI (plus:DI (reg:DI 0 ax [orig:146 D.5883 ] [146])
                    (reg:DI 37 r8 [orig:169 D.5880 ] [169]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])
        (reg:DI 38 r9 [175])) blake_ref.c:331 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 38 r9 [175])
        (expr_list:REG_DEAD (reg:DI 37 r8 [orig:169 D.5880 ] [169])
            (nil))))
(insn 246 137 139 19 (set (reg/f:DI 37 r8 [176])
        (plus:DI (reg:DI 0 ax [orig:146 D.5883 ] [146])
            (const_int 8 [0x8]))) blake_ref.c:331 214 {*leadi}
     (nil))
(insn:TI 139 246 140 19 (parallel [
            (set (reg/f:DI 37 r8 [176])
                (and:DI (reg/f:DI 37 r8 [176])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 380 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 140 139 141 19 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.5883 ] [148])
                (minus:DI (reg:DI 0 ax [orig:146 D.5883 ] [146])
                    (reg/f:DI 37 r8 [176])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 141 140 142 19 (parallel [
            (set (reg/f:DI 40 r11 [orig:149 data ] [149])
                (minus:DI (reg/f:DI 40 r11 [orig:149 data ] [149])
                    (reg/f:DI 0 ax [orig:148 D.5883 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 142 141 143 19 (parallel [
            (set (reg:SI 0 ax [orig:147 D.5880 ] [147])
                (plus:SI (reg:SI 0 ax [orig:148 D.5883 ] [148])
                    (reg:SI 1 dx [orig:107 D.5880 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 143 142 144 19 (parallel [
            (set (reg:SI 0 ax [orig:147 D.5880 ] [147])
                (and:SI (reg:SI 0 ax [orig:147 D.5880 ] [147])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 381 {*andsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 144 143 145 19 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:147 D.5880 ] [147])
            (const_int 8 [0x8]))) blake_ref.c:331 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 145 144 196 19 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 159)
;;  succ:       17 [20.0%]  (CAN_FALLTHRU)
;;              20 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]

;; basic block 20, loop depth 0, count 0, freq 105, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 40 [r11] 41 [r12]
;; live  gen 	 0 [ax] 38 [r9]
;; live  kill	 17 [flags]
(note 196 145 146 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn:TI 146 196 284 20 (parallel [
            (set (reg:SI 0 ax [178])
                (and:SI (reg:SI 0 ax [orig:147 D.5880 ] [147])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 381 {*andsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 284 146 148 20 (parallel [
            (set (reg:DI 38 r9 [177])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       21 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]

;; basic block 21, loop depth 0, count 0, freq 105, maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              21 [80.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
;; lr  use 	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
;; lr  def 	 4 [si] 17 [flags] 38 [r9] 39 [r10]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
;; live  gen 	 4 [si] 17 [flags] 38 [r9] 39 [r10]
;; live  kill	 17 [flags]
(code_label 148 284 197 21 25 "" [1 uses])
(note 197 148 149 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn:TI 149 197 152 21 (set (reg:DI 39 r10 [179])
        (zero_extend:DI (reg:SI 38 r9 [177]))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn 152 149 150 21 (parallel [
            (set (reg:SI 38 r9 [177])
                (plus:SI (reg:SI 38 r9 [177])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 150 152 153 21 (set (reg:DI 4 si [180])
        (mem:DI (plus:DI (reg/f:DI 40 r11 [orig:149 data ] [149])
                (reg:DI 39 r10 [179])) [0  S8 A8])) blake_ref.c:331 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/f:DI 40 r11 [orig:149 data ] [149])
                (reg:DI 39 r10 [179])) [0  S8 A8])
        (nil)))
(insn 153 150 151 21 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 38 r9 [177])
            (reg:SI 0 ax [178]))) blake_ref.c:331 7 {*cmpsi_1}
     (nil))
(insn:TI 151 153 154 21 (set (mem:DI (plus:DI (reg/f:DI 37 r8 [176])
                (reg:DI 39 r10 [179])) [0  S8 A64])
        (reg:DI 4 si [180])) blake_ref.c:331 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 39 r10 [179])
        (expr_list:REG_DEAD (reg:DI 4 si [180])
            (nil))))
(jump_insn 154 151 309 21 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 148)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 8000 (nil)))
 -> 148)
;;  succ:       21 [80.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              22 [20.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 40 [r11] 41 [r12]

;; basic block 22, loop depth 0, count 0, freq 21, maybe hot
;;  prev block 21, next block 23, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       21 [20.0%]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	
(note 309 154 310 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 310 309 311 22 (set (pc)
        (label_ref 159)) 654 {jump}
     (nil)
 -> 159)
;;  succ:       17 [100.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

(barrier 311 310 305)
;; basic block 23, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [29.0%]  (CAN_FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags] 37 [r8] 43 [r14]
;; live  kill	 17 [flags]
(code_label 305 311 21 23 40 "" [1 uses])
(note 21 305 34 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(note 34 21 251 23 NOTE_INSN_DELETED)
(insn:TI 251 34 23 23 (set (reg/f:DI 43 r14 [orig:92 D.5881 ] [92])
        (plus:DI (reg/f:DI 2 cx [orig:124 state ] [124])
            (const_int 56 [0x38]))) blake_ref.c:303 214 {*leadi}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:124 state ] [124])
        (nil)))
(insn 23 251 28 23 (set (reg:DI 2 cx [orig:130 D.5882 ] [130])
        (sign_extend:DI (reg/v:SI 41 r12 [orig:88 left ] [88]))) blake_ref.c:303 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 41 r12 [orig:88 left ] [88])
        (nil)))
(insn 28 23 24 23 (set (reg:DI 37 r8)
        (reg:DI 42 r13 [orig:91 D.5880 ] [91])) blake_ref.c:303 89 {*movdi_internal}
     (nil))
(insn:TI 24 28 31 23 (parallel [
            (set (reg:DI 2 cx [orig:131 D.5883 ] [131])
                (plus:DI (reg:DI 2 cx [orig:130 D.5882 ] [130])
                    (reg/f:DI 43 r14 [orig:92 D.5881 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:303 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 31 24 287 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>) [0 memcpy S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:303 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 2 cx))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 37 r8))
                    (nil))))))
(insn:TI 287 31 38 23 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
                        (const_int 512 [0x200]))
                    (const_int 0 [0])))
            (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                        (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                            (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
                    (const_int 512 [0x200])))
        ]) blake_ref.c:307 225 {*addsi_2}
     (nil))
(jump_insn:TI 38 287 39 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) blake_ref.c:307 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 41)
;;  succ:       24 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              25 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 24, loop depth 0, count 0, freq 65, maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       23 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	
;; live  kill	 17 [flags]
(note 39 38 40 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn:TI 40 39 41 24 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                        (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:124 state ] [124])
                            (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:308 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       25 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 25, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       23 [50.0%]  (CAN_FALLTHRU)
;;              24 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 6 [bp] 41 [r12]
;; live  kill	 17 [flags]
(code_label 41 40 42 25 16 "" [1 uses])
(note 42 41 43 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn:TI 43 42 44 25 (set (reg:DI 1 dx)
        (reg/f:DI 43 r14 [orig:92 D.5881 ] [92])) blake_ref.c:310 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 43 r14 [orig:92 D.5881 ] [92])
        (nil)))
(insn 44 43 46 25 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:124 state ] [124])) blake_ref.c:310 89 {*movdi_internal}
     (nil))
(insn 46 44 45 25 (parallel [
            (set (reg/v/f:DI 4 si [orig:125 data ] [125])
                (plus:DI (reg/v/f:DI 4 si [orig:125 data ] [125])
                    (reg:DI 42 r13 [orig:91 D.5880 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:311 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 42 r13 [orig:91 D.5880 ] [91])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(call_insn:TI 45 46 250 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>) [0 compress32 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:310 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn:TI 250 45 286 25 (set (reg:SI 0 ax [orig:138 D.5879 ] [138])
        (mult:SI (reg/v:SI 5 di [orig:89 fill ] [89])
            (const_int 8 [0x8]))) blake_ref.c:312 213 {*leasi}
     (expr_list:REG_DEAD (reg/v:SI 5 di [orig:89 fill ] [89])
        (nil)))
(insn 286 250 48 25 (parallel [
            (set (reg:DI 41 r12 [orig:88 left ] [88])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:314 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 48 286 49 25 (set (reg:DI 0 ax [orig:139 D.5880 ] [139])
        (sign_extend:DI (reg:SI 0 ax [orig:138 D.5879 ] [138]))) blake_ref.c:312 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 49 48 312 25 (parallel [
            (set (reg/v:DI 6 bp [orig:126 databitlen ] [126])
                (minus:DI (reg/v:DI 6 bp [orig:126 databitlen ] [126])
                    (reg:DI 0 ax [orig:139 D.5880 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:312 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:139 D.5880 ] [139])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(jump_insn 312 49 313 25 (set (pc)
        (label_ref 50)) 654 {jump}
     (nil)
 -> 50)
;;  succ:       4 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]

(barrier 313 312 188)
;; basic block 26, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [9.0%]  (CAN_FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 188 313 187 26 28 "" [1 uses])
(note 187 188 7 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn:TI 7 187 314 26 (set (reg/v/f:DI 5 di [orig:122 data ] [122])
        (reg/v/f:DI 4 si [orig:125 data ] [125])) blake_ref.c:318 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 4 si [orig:125 data ] [125])
        (nil)))
(jump_insn 314 7 315 26 (set (pc)
        (label_ref 79)) 654 {jump}
     (nil)
 -> 79)
;;  succ:       10 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

(barrier 315 314 307)
;; basic block 27, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 26, next block 28, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [10.0%]  (CAN_FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 37 [r8] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 37 [r8] 38 [r9]
;; live  kill	
(code_label 307 315 190 27 42 "" [1 uses])
(note 190 307 99 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(note 99 190 100 27 NOTE_INSN_DELETED)
(note 100 99 102 27 NOTE_INSN_DELETED)
(note 102 100 103 27 NOTE_INSN_DELETED)
(note 103 102 96 27 NOTE_INSN_DELETED)
(insn:TI 96 103 97 27 (set (reg:SI 37 r8 [151])
        (mem:SI (reg/v/f:DI 5 di [orig:122 data ] [122]) [0  S4 A8])) blake_ref.c:331 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:DI 5 di [orig:122 data ] [122]) [0  S4 A8])
        (nil)))
(insn:TI 97 96 98 27 (set (mem:SI (reg:DI 0 ax [orig:146 D.5883 ] [146]) [0  S4 A8])
        (reg:SI 37 r8 [151])) blake_ref.c:331 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [151])
        (nil)))
(insn 98 97 104 27 (set (reg:DI 37 r8 [orig:152 D.5880 ] [152])
        (zero_extend:DI (reg:SI 1 dx [orig:107 D.5880 ] [107]))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn:TI 104 98 105 27 (set (reg:SI 38 r9 [158])
        (mem:SI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                    (reg:DI 37 r8 [orig:152 D.5880 ] [152]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])) blake_ref.c:331 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                    (reg:DI 37 r8 [orig:152 D.5880 ] [152]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])
        (nil)))
(insn:TI 105 104 316 27 (set (mem:SI (plus:DI (plus:DI (reg:DI 0 ax [orig:146 D.5883 ] [146])
                    (reg:DI 37 r8 [orig:152 D.5880 ] [152]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])
        (reg:SI 38 r9 [158])) blake_ref.c:331 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [158])
        (expr_list:REG_DEAD (reg:DI 37 r8 [orig:152 D.5880 ] [152])
            (expr_list:REG_DEAD (reg:DI 0 ax [orig:146 D.5883 ] [146])
                (nil)))))
(jump_insn 316 105 317 27 (set (pc)
        (label_ref 159)) 654 {jump}
     (nil)
 -> 159)
;;  succ:       17 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

(barrier 317 316 308)
;; basic block 28, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 27, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [10.0%]  (CAN_FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 37 [r8] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 37 [r8] 38 [r9]
;; live  kill	
(code_label 308 317 193 28 43 "" [1 uses])
(note 193 308 118 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(note 118 193 121 28 NOTE_INSN_DELETED)
(note 121 118 116 28 NOTE_INSN_DELETED)
(insn:TI 116 121 122 28 (set (reg:DI 37 r8 [orig:162 D.5880 ] [162])
        (zero_extend:DI (reg:SI 1 dx [orig:107 D.5880 ] [107]))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn:TI 122 116 123 28 (set (reg:HI 38 r9 [167])
        (mem:HI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                    (reg:DI 37 r8 [orig:162 D.5880 ] [162]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])) blake_ref.c:331 92 {*movhi_internal}
     (expr_list:REG_EQUIV (mem:HI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:122 data ] [122])
                    (reg:DI 37 r8 [orig:162 D.5880 ] [162]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (nil)))
(insn:TI 123 122 318 28 (set (mem:HI (plus:DI (plus:DI (reg:DI 0 ax [orig:146 D.5883 ] [146])
                    (reg:DI 37 r8 [orig:162 D.5880 ] [162]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (reg:HI 38 r9 [167])) blake_ref.c:331 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 38 r9 [167])
        (expr_list:REG_DEAD (reg:DI 37 r8 [orig:162 D.5880 ] [162])
            (expr_list:REG_DEAD (reg:DI 0 ax [orig:146 D.5883 ] [146])
                (nil)))))
(jump_insn 318 123 319 28 (set (pc)
        (label_ref 159)) 654 {jump}
     (nil)
 -> 159)
;;  succ:       17 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

(barrier 319 318 234)
(note 234 319 0 NOTE_INSN_DELETED)

;; Function Update64.part.1 (Update64.part.1, funcdef_no=23, decl_uid=5571, cgraph_uid=1, symbol_order=32)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 31 count 23 (    1)


Update64.part.1

Dataflow summary:
def_info->table_size = 261, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14]
;;  exit block uses 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14]
;;  ref usage 	r0={15d,21u} r1={9d,16u} r2={16d,19u,3e} r3={6d,8u} r4={7d,8u} r5={7d,8u} r6={4d,12u,2e} r7={25d,52u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={3e} r17={38d,10u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={1d} r26={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={6d,5u} r38={7d,3u} r39={3d} r40={3d} r41={11d,18u,6e} r42={7d,11u} r43={6d,8u,1e} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 524{310d,199u,15e} in 128{125 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	
;; live  gen 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 42 [r13] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 42 [r13] 43 [r14]

( 2 )->[3]->( 18 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 37 [r8] 43 [r14]
;; lr  def 	 0 [ax] 4 [si] 17 [flags] 41 [r12]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 2 3 18 )->[4]->( 5 19 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp] 42 [r13]
;; lr  def 	 17 [flags] 41 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 5 6 )->[6]->( 6 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 17 [flags] 42 [r13]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 42 [r13]
;; live  kill	 17 [flags]
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 7 19 )->[8]->( 11 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 15 9 )->[10]->( 1 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 0 [ax] 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 8 )->[11]->( 17 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

( 11 )->[12]->( 13 20 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

( 12 )->[13]->( 15 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

( 13 )->[14]->( 15 21 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 2 [cx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

( 14 13 17 20 21 )->[15]->( 16 10 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 17 [flags] 42 [r13]
;; live  in  	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 17 [flags] 42 [r13]
;; live  kill	
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]

( 15 )->[16]->( 1 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 7 [sp]

( 11 )->[17]->( 15 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 5 [di] 17 [flags] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 5 [di] 38 [r9]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

( 3 )->[18]->( 4 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 43 [r14] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 37 [r8] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

( 4 )->[19]->( 8 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 41 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 41 [r12]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 12 )->[20]->( 15 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 2 [cx] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 2 [cx] 38 [r9]
;; live  kill	
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

( 14 )->[21]->( 15 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 2 [cx] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 2 [cx] 38 [r9]
;; live  kill	
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

( 10 16 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 13 to worklist
  Adding insn 226 to worklist
  Adding insn 224 to worklist
  Adding insn 223 to worklist
  Adding insn 222 to worklist
  Adding insn 221 to worklist
  Adding insn 220 to worklist
  Adding insn 219 to worklist
  Adding insn 218 to worklist
  Adding insn 20 to worklist
  Adding insn 45 to worklist
  Adding insn 60 to worklist
  Adding insn 56 to worklist
  Adding insn 53 to worklist
  Adding insn 66 to worklist
  Adding insn 148 to worklist
  Adding insn 238 to worklist
  Adding insn 229 to worklist
  Adding insn 155 to worklist
  Adding insn 76 to worklist
  Adding insn 79 to worklist
  Adding insn 94 to worklist
  Adding insn 99 to worklist
  Adding insn 96 to worklist
  Adding insn 137 to worklist
  Adding insn 134 to worklist
  Adding insn 263 to worklist
  Adding insn 254 to worklist
  Adding insn 252 to worklist
  Adding insn 143 to worklist
  Adding insn 271 to worklist
  Adding insn 130 to worklist
  Adding insn 121 to worklist
  Adding insn 113 to worklist
  Adding insn 273 to worklist
  Adding insn 37 to worklist
  Adding insn 34 to worklist
  Adding insn 31 to worklist
  Adding insn 275 to worklist
  Adding insn 277 to worklist
  Adding insn 89 to worklist
  Adding insn 81 to worklist
  Adding insn 279 to worklist
  Adding insn 107 to worklist
Finished finding needed instructions:
processing block 16 lr out =  0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 262 to worklist
  Adding insn 261 to worklist
  Adding insn 260 to worklist
  Adding insn 259 to worklist
  Adding insn 258 to worklist
  Adding insn 257 to worklist
  Adding insn 256 to worklist
  Adding insn 255 to worklist
  Adding insn 251 to worklist
  Adding insn 140 to worklist
  Adding insn 139 to worklist
processing block 10 lr out =  0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 237 to worklist
  Adding insn 236 to worklist
  Adding insn 235 to worklist
  Adding insn 234 to worklist
  Adding insn 233 to worklist
  Adding insn 232 to worklist
  Adding insn 231 to worklist
  Adding insn 230 to worklist
  Adding insn 154 to worklist
processing block 15 lr out =  1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
  Adding insn 281 to worklist
  Adding insn 133 to worklist
processing block 17 lr out =  1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 129 to worklist
  Adding insn 128 to worklist
  Adding insn 126 to worklist
  Adding insn 125 to worklist
  Adding insn 207 to worklist
  Adding insn 124 to worklist
  Adding insn 123 to worklist
  Adding insn 210 to worklist
  Adding insn 120 to worklist
  Adding insn 114 to worklist
  Adding insn 112 to worklist
processing block 21 lr out =  1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 106 to worklist
  Adding insn 100 to worklist
processing block 14 lr out =  0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 211 to worklist
  Adding insn 95 to worklist
processing block 13 lr out =  0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 93 to worklist
processing block 20 lr out =  1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 88 to worklist
  Adding insn 82 to worklist
  Adding insn 80 to worklist
processing block 12 lr out =  0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 212 to worklist
processing block 11 lr out =  0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 75 to worklist
  Adding insn 71 to worklist
  Adding insn 69 to worklist
  Adding insn 68 to worklist
  Adding insn 205 to worklist
processing block 9 lr out =  7 [sp]
processing block 8 lr out =  6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 65 to worklist
processing block 7 lr out =  6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 62 to worklist
processing block 6 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 59 to worklist
  Adding insn 57 to worklist
  Adding insn 55 to worklist
  Adding insn 54 to worklist
processing block 5 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 51 to worklist
  Adding insn 50 to worklist
  Adding insn 49 to worklist
  Adding insn 48 to worklist
  Adding insn 213 to worklist
processing block 19 lr out =  6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 7 to worklist
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
  Adding insn 44 to worklist
processing block 18 lr out =  3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
  Adding insn 249 to worklist
  Adding insn 41 to worklist
  Adding insn 40 to worklist
  Adding insn 215 to worklist
  Adding insn 38 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 28 to worklist
  Adding insn 24 to worklist
  Adding insn 23 to worklist
  Adding insn 214 to worklist
processing block 3 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 203 to worklist
  Adding insn 17 to worklist
  Adding insn 16 to worklist
  Adding insn 15 to worklist
processing block 2 lr out =  1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 42 [r13] 43 [r14]
  Adding insn 12 to worklist
  Adding insn 11 to worklist
  Adding insn 201 to worklist
  Adding insn 4 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
  Adding insn 225 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 31 count 23 (    1)
;;   ======================================================
;;   -- basic block 2 from 218 to 13 -- after reload
;;   ======================================================

;;	  0--> b  0: i 218 [--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 219 [--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 220 [--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 221 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 222 [--sp]=di                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 223 [--sp]=si                               :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 224 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 225 {sp=sp-0x20;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  6--> b  0: i 226 unspec/v[sp] 4                          :athlon-vector,athlon-ieu,athlon-ieu
;;	  7--> b  0: i 201 r14=[cx+0x4]                            :athlon-direct,athlon-load
;;	  8--> b  0: i   2 bp=cx                                   :athlon-direct,athlon-ieu
;;	  8--> b  0: i   3 bx=dx                                   :athlon-direct,athlon-ieu
;;	  8--> b  0: i   4 r13=r8                                  :athlon-direct,athlon-ieu
;;	 10--> b  0: i  11 {r14=r14>>0x3;clobber flags;}           :athlon-direct,athlon-ieu
;;	 11--> b  0: i  12 flags=cmp(r14,0)                        :athlon-direct,athlon-ieu
;;	 12--> b  0: i  13 pc={(flags==0)?L42:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 218
;;   new tail = 13

;;   ======================================================
;;   -- basic block 3 from 15 to 20 -- after reload
;;   ======================================================

;;	  0--> b  0: i  15 r12=0x80                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i 203 ax=r8                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  16 {r12=r12-r14;clobber flags;}            :athlon-direct,athlon-ieu
;;	  1--> b  0: i  18 {ax=ax 0>>0x3;clobber flags;}           :athlon-direct,athlon-ieu
;;	  2--> b  0: i  17 si=sxn(r12)                             :athlon-direct,athlon-ieu
;;	  3--> b  0: i  19 flags=cmp(ax,si)                        :athlon-direct,athlon-ieu
;;	  4--> b  0: i  20 pc={(geu(flags,0))?L267:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 15
;;   new tail = 20

;;   ======================================================
;;   -- basic block 4 from 44 to 45 -- after reload
;;   ======================================================

;;	  0--> b  0: i  44 flags=cmp(r13,0x3ff)                    :athlon-direct,athlon-ieu
;;	  1--> b  0: i  45 pc={(leu(flags,0))?L160:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 44
;;   new tail = 45

;;   ======================================================
;;   -- basic block 5 from 213 to 51 -- after reload
;;   ======================================================

;;	  0--> b  0: i 213 r12=r13-0x400                           :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i  48 {r12=r12 0>>0xa;clobber flags;}         :athlon-direct,athlon-ieu
;;	  3--> b  0: i  49 {r12=r12+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	  4--> b  0: i  50 {r12=r12<<0x7;clobber flags;}           :athlon-direct,athlon-ieu
;;	  5--> b  0: i  51 {r12=r12+bx;clobber flags;}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 213
;;   new tail = 51

;;   ======================================================
;;   -- basic block 6 from 53 to 60 -- after reload
;;   ======================================================

;;	  0--> b  0: i  53 {[bp+0xc8]=[bp+0xc8]+0x400;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	  0--> b  0: i  54 dx=bx                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  55 cx=bp                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  57 {bx=bx+0x80;clobber flags;}             :athlon-direct,athlon-ieu
;;	  4--> b  0: i  56 ax=call [`compress64']                  :athlon-vector,athlon-ieu
;;	  5--> b  0: i  59 flags=cmp(bx,r12)                       :athlon-direct,athlon-ieu
;;	  6--> b  0: i  60 pc={(flags!=0)?L58:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 53
;;   new tail = 60

;;   ======================================================
;;   -- basic block 7 from 62 to 62 -- after reload
;;   ======================================================

;;	  0--> b  0: i  62 {r13=r13&0x3ff;clobber flags;}          :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 62
;;   new tail = 62

;;   ======================================================
;;   -- basic block 8 from 65 to 66 -- after reload
;;   ======================================================

;;	  0--> b  0: i  65 flags=cmp(r13,0)                        :athlon-direct,athlon-ieu
;;	  1--> b  0: i  66 pc={(flags!=0)?L268:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 65
;;   new tail = 66

;;   ======================================================
;;   -- basic block 9 from 148 to 148 -- after reload
;;   ======================================================

;;	  0--> b  0: i 148 [bp+0x4]=0                              :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 148
;;   new tail = 148

;;   ======================================================
;;   -- basic block 10 from 154 to 238 -- after reload
;;   ======================================================

;;	  0--> b  0: i 154 clobber ax                              :nothing
;;	  0--> b  0: i 155 use ax                                  :nothing
;;	  0--> b  0: i 229 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	  2--> b  0: i 230 {sp=sp+0x20;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  3--> b  0: i 231 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 232 si=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 233 di=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i 234 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 235 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  8--> b  0: i 236 r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  9--> b  0: i 237 r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 10--> b  0: i 238 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 154
;;   new tail = 238

;;   ======================================================
;;   -- basic block 11 from 205 to 76 -- after reload
;;   ======================================================

;;	  0--> b  0: i 205 dx=r13                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i  69 r8=sxn(r14)                             :athlon-direct,athlon-ieu
;;	  1--> b  0: i  68 {dx=dx 0>>0x3;clobber flags;}           :athlon-direct,athlon-ieu
;;	  1--> b  0: i  71 ax=bp+r8+0xd8                           :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i  75 flags=cmp(dx,0x8)                       :athlon-direct,athlon-ieu
;;	  3--> b  0: i  76 pc={(geu(flags,0))?L111:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 205
;;   new tail = 76

;;   ======================================================
;;   -- basic block 12 from 212 to 79 -- after reload
;;   ======================================================

;;	  0--> b  0: i 212 flags=cmp(dx&0x4,0)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i  79 pc={(flags!=0)?L269:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 212
;;   new tail = 79

;;   ======================================================
;;   -- basic block 13 from 93 to 94 -- after reload
;;   ======================================================

;;	  0--> b  0: i  93 flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  94 pc={(flags==0)?L131:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 93
;;   new tail = 94

;;   ======================================================
;;   -- basic block 14 from 95 to 99 -- after reload
;;   ======================================================

;;	  0--> b  0: i  95 cx=[r12]                                :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 211 flags=cmp(dx&0x2,0)                     :athlon-direct,athlon-ieu
;;	  4--> b  0: i  96 [ax]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  99 pc={(flags!=0)?L270:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 95
;;   new tail = 99

;;   ======================================================
;;   -- basic block 15 from 133 to 137 -- after reload
;;   ======================================================

;;	  0--> b  0: i 133 ax=r14*0x8+r13                          :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 281 {flags=cmp(r13&0x7,0);r13=r13&0x7;}     :athlon-direct,athlon-ieu
;;	  2--> b  0: i 134 [bp+0x4]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 137 pc={(flags==0)?L149:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 133
;;   new tail = 137

;;   ======================================================
;;   -- basic block 16 from 139 to 263 -- after reload
;;   ======================================================

;;	  0--> b  0: i 139 ax=[r12+dx]                             :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 140 {dx=dx+bp;clobber flags;}               :athlon-direct,athlon-ieu
;;	  4--> b  0: i 143 [r8+dx+0xd8]=ax                         :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 251 clobber ax                              :nothing
;;	  4--> b  0: i 252 use ax                                  :nothing
;;	  5--> b  0: i 254 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	  7--> b  0: i 255 {sp=sp+0x20;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  8--> b  0: i 256 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  9--> b  0: i 257 si=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 10--> b  0: i 258 di=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 11--> b  0: i 259 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 12--> b  0: i 260 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 13--> b  0: i 261 r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 14--> b  0: i 262 r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 15--> b  0: i 263 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 15
;;   new head = 139
;;   new tail = 263

;;   ======================================================
;;   -- basic block 17 from 112 to 271 -- after reload
;;   ======================================================

;;	  0--> b  0: i 112 cx=[r12]                                :athlon-direct,athlon-load
;;	  0--> b  0: i 210 di=ax+0x8                               :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 207 si=r12                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 123 {di=di&0xfffffffffffffff8;clobber flags;}:athlon-direct,athlon-ieu
;;	  3--> b  0: i 113 [ax]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 114 cx=zxn(dx)                              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 120 r9=[r12+cx-0x8]                         :athlon-direct,athlon-load
;;	  7--> b  0: i 121 [ax+cx-0x8]=r9                          :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 124 {ax=ax-di;clobber flags;}               :athlon-direct,athlon-ieu
;;	  8--> b  0: i 125 {si=si-ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	  8--> b  0: i 126 {ax=ax+dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  9--> b  0: i 128 {ax=ax 0>>0x3;clobber flags;}           :athlon-direct,athlon-ieu
;;	 10--> b  0: i 129 cx=zxn(ax)                              :athlon-direct,athlon-ieu
;;	 11--> b  0: i 130 {cx=0;di=cx<<0x3+di;si=cx<<0x3+si;[di]=[si];use cx;}:athlon-vector,athlon-load,athlon-ieu0*6
;;	 12--> b  0: i 271 pc=L131                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 112
;;   new tail = 271

;;   ======================================================
;;   -- basic block 18 from 214 to 273 -- after reload
;;   ======================================================

;;	  0--> b  0: i 214 di=cx+0xd8                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  23 cx=sxn(r14)                             :athlon-direct,athlon-ieu
;;	  0--> b  0: i  28 r8=si                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  38 {bx=bx+si;clobber flags;}               :athlon-direct,athlon-ieu
;;	  1--> b  0: i 249 {r14=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i  24 {cx=cx+di;clobber flags;}               :athlon-direct,athlon-ieu
;;	  3--> b  0: i  31 ax=call [`memcpy']                      :athlon-vector,athlon-ieu
;;	  4--> b  0: i  34 {[bp+0xc8]=[bp+0xc8]+0x400;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	  4--> b  0: i  35 dx=di                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  36 cx=bp                                   :athlon-direct,athlon-ieu
;;	  8--> b  0: i  37 ax=call [`compress64']                  :athlon-vector,athlon-ieu
;;	  9--> b  0: i 215 ax=r12*0x8                              :athlon-direct,athlon-agu,nothing
;;	 11--> b  0: i  40 ax=sxn(ax)                              :athlon-direct,athlon-ieu
;;	 12--> b  0: i  41 {r13=r13-ax;clobber flags;}             :athlon-direct,athlon-ieu
;;	 12--> b  0: i 273 pc=L42                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 214
;;   new tail = 273

;;   ======================================================
;;   -- basic block 19 from 7 to 275 -- after reload
;;   ======================================================

;;	  0--> b  0: i   7 r12=bx                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 275 pc=L63                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 7
;;   new tail = 275

;;   ======================================================
;;   -- basic block 20 from 80 to 277 -- after reload
;;   ======================================================

;;	  0--> b  0: i  80 cx=[r12]                                :athlon-direct,athlon-load
;;	  3--> b  0: i  81 [ax]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  82 cx=zxn(dx)                              :athlon-direct,athlon-ieu
;;	  4--> b  0: i  88 r9=[r12+cx-0x4]                         :athlon-direct,athlon-load
;;	  7--> b  0: i  89 [ax+cx-0x4]=r9                          :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 277 pc=L131                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 80
;;   new tail = 277

;;   ======================================================
;;   -- basic block 21 from 100 to 279 -- after reload
;;   ======================================================

;;	  0--> b  0: i 100 cx=zxn(dx)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 106 r9=[r12+cx-0x2]                         :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i 107 [ax+cx-0x2]=r9                          :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 279 pc=L131                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 100
;;   new tail = 279



starting the processing of deferred insns
ending the processing of deferred insns


Update64.part.1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14]
;;  exit block uses 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14]
;;  ref usage 	r0={15d,21u} r1={9d,16u} r2={16d,19u,3e} r3={6d,8u} r4={7d,8u} r5={7d,8u} r6={4d,12u,2e} r7={25d,52u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={3e} r17={38d,10u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={1d} r26={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={6d,5u} r38={7d,3u} r39={3d} r40={3d} r41={11d,18u,6e} r42={7d,11u} r43={6d,8u,1e} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 524{310d,199u,15e} in 128{125 regular + 3 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 42 [r13] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(note 8 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 8 10 2 NOTE_INSN_FUNCTION_BEG)
(note 10 5 218 2 NOTE_INSN_DELETED)
(insn/f:TI 218 10 219 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) blake_ref.c:345 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn/f 219 218 220 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) blake_ref.c:345 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f:TI 220 219 221 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) blake_ref.c:345 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f 221 220 222 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) blake_ref.c:345 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 222 221 223 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 5 di)) blake_ref.c:345 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil)))
(insn/f 223 222 224 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 4 si)) blake_ref.c:345 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si)
        (nil)))
(insn/f:TI 224 223 225 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) blake_ref.c:345 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 225 224 226 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:345 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -32 [0xffffffffffffffe0])))
            (nil))))
(insn:TI 226 225 227 2 (unspec_volatile [
            (reg/f:DI 7 sp)
        ] UNSPECV_PROLOGUE_USE) blake_ref.c:345 679 {prologue_use}
     (nil))
(note 227 226 201 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 201 227 2 2 (set (reg/v:SI 43 r14 [orig:88 left ] [88])
        (mem:SI (plus:DI (reg/f:DI 2 cx [orig:120 state ] [120])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])) blake_ref.c:354 90 {*movsi_internal}
     (nil))
(insn:TI 2 201 3 2 (set (reg/v/f:DI 6 bp [orig:120 state ] [120])
        (reg:DI 2 cx [ state ])) blake_ref.c:345 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 3 bx [orig:121 data ] [121])
        (reg:DI 1 dx [ data ])) blake_ref.c:345 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 data+0 S8 A64])
        (nil)))
(insn 4 3 11 2 (set (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:345 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
        (nil)))
(insn:TI 11 4 12 2 (parallel [
            (set (reg/v:SI 43 r14 [orig:88 left ] [88])
                (ashiftrt:SI (reg/v:SI 43 r14 [orig:88 left ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:354 545 {*ashrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (ashiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                        (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
                (const_int 3 [0x3]))
            (nil))))
(insn:TI 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 43 r14 [orig:88 left ] [88])
            (const_int 0 [0]))) blake_ref.c:358 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) blake_ref.c:358 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 42)
;;  succ:       3 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 42 [r13] 43 [r14]

;; basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 37 [r8] 43 [r14]
;; lr  def 	 0 [ax] 4 [si] 17 [flags] 41 [r12]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 15 14 203 3 (set (reg:SI 41 r12 [124])
        (const_int 128 [0x80])) blake_ref.c:355 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 128 [0x80])
        (nil)))
(insn 203 15 16 3 (set (reg:DI 0 ax [orig:125 D.5911 ] [125])
        (reg:DI 37 r8 [orig:122 databitlen ] [122])) blake_ref.c:358 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [orig:122 databitlen ] [122])
        (nil)))
(insn:TI 16 203 18 3 (parallel [
            (set (reg/v:SI 41 r12 [orig:89 fill ] [89])
                (minus:SI (reg:SI 41 r12 [124])
                    (reg/v:SI 43 r14 [orig:88 left ] [88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:355 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (minus:SI (const_int 128 [0x80])
                (reg/v:SI 43 r14 [orig:88 left ] [88]))
            (nil))))
(insn 18 16 17 3 (parallel [
            (set (reg:DI 0 ax [orig:125 D.5911 ] [125])
                (lshiftrt:DI (reg:DI 0 ax [orig:125 D.5911 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:358 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 17 18 19 3 (set (reg:DI 4 si [orig:91 D.5911 ] [91])
        (sign_extend:DI (reg/v:SI 41 r12 [orig:89 fill ] [89]))) blake_ref.c:358 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 19 17 20 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:125 D.5911 ] [125])
            (reg:DI 4 si [orig:91 D.5911 ] [91]))) blake_ref.c:358 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:125 D.5911 ] [125])
        (nil)))
(jump_insn:TI 20 19 42 3 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 267)
            (pc))) blake_ref.c:358 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 267)
;;  succ:       18 [29.0%]  (CAN_FALLTHRU)
;;              4 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 4, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (CAN_FALLTHRU)
;;              3 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [100.0%]  (CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 42 20 43 4 45 "" [2 uses])
(note 43 42 44 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 44 43 45 4 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
            (const_int 1023 [0x3ff]))) blake_ref.c:372 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 45 44 46 4 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 160)
            (pc))) blake_ref.c:372 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 160)
;;  succ:       5 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              19 [9.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       4 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp] 42 [r13]
;; lr  def 	 17 [flags] 41 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 41 [r12]
;; live  kill	 17 [flags]
(note 46 45 213 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 213 46 48 5 (set (reg:DI 41 r12 [orig:135 D.5911 ] [135])
        (plus:DI (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
            (const_int -1024 [0xfffffffffffffc00]))) 214 {*leadi}
     (nil))
(insn:TI 48 213 49 5 (parallel [
            (set (reg:DI 41 r12 [orig:136 D.5911 ] [136])
                (lshiftrt:DI (reg:DI 41 r12 [orig:135 D.5911 ] [135])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 49 48 50 5 (parallel [
            (set (reg:DI 41 r12 [orig:137 D.5913 ] [137])
                (plus:DI (reg:DI 41 r12 [orig:136 D.5911 ] [136])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 50 49 51 5 (parallel [
            (set (reg:DI 41 r12 [orig:138 D.5913 ] [138])
                (ashift:DI (reg:DI 41 r12 [orig:137 D.5913 ] [137])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 51 50 58 5 (parallel [
            (set (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                (plus:DI (reg:DI 41 r12 [orig:138 D.5913 ] [138])
                    (reg/v/f:DI 3 bx [orig:121 data ] [121])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 6, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              6 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 58 51 52 6 47 "" [1 uses])
(note 52 58 53 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 53 52 54 6 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                        (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                            (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:375 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 54 53 55 6 (set (reg:DI 1 dx)
        (reg/v/f:DI 3 bx [orig:121 data ] [121])) blake_ref.c:376 89 {*movdi_internal}
     (nil))
(insn 55 54 57 6 (set (reg:DI 2 cx)
        (reg/v/f:DI 6 bp [orig:120 state ] [120])) blake_ref.c:376 89 {*movdi_internal}
     (nil))
(insn:TI 57 55 56 6 (parallel [
            (set (reg/v/f:DI 3 bx [orig:121 data ] [121])
                (plus:DI (reg/v/f:DI 3 bx [orig:121 data ] [121])
                    (const_int 128 [0x80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:377 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 56 57 59 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:376 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn:TI 59 56 60 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 3 bx [orig:121 data ] [121])
            (reg/v/f:DI 41 r12 [orig:117 data ] [117]))) blake_ref.c:372 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 60 59 61 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 58)
            (pc))) blake_ref.c:372 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 58)
;;  succ:       6 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              7 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 17 [flags] 42 [r13]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 42 [r13]
;; live  kill	 17 [flags]
(note 61 60 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 62 61 63 7 (parallel [
            (set (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
                (and:DI (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
                    (const_int 1023 [0x3ff])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       8 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              19 [100.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 63 62 64 8 46 "" [1 uses])
(note 64 63 65 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 65 64 66 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
            (const_int 0 [0]))) blake_ref.c:381 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 66 65 147 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 268)
            (pc))) blake_ref.c:381 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 268)
;;  succ:       11 [29.0%]  (CAN_FALLTHRU)
;;              9 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 9, loop depth 0, count 0, freq 639, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       8 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 147 66 148 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 148 147 149 9 (set (mem:SI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:391 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 6 bp [orig:120 state ] [120])
        (nil)))
;;  succ:       10 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 10, loop depth 0, count 0, freq 769, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [50.0%]  (CAN_FALLTHRU)
;;              9 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 0 [ax] 17 [flags]
(code_label 149 148 150 10 53 "" [1 uses])
(note 150 149 154 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 154 150 155 10 (clobber (reg:SI 0 ax [orig:119 <retval> ] [119])) blake_ref.c:394 -1
     (nil))
(insn 155 154 282 10 (use (reg/i:SI 0 ax)) blake_ref.c:394 -1
     (expr_list:REG_DEAD (reg/i:SI 0 ax)
        (nil)))
(note 282 155 229 10 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 229 282 230 10 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:394 677 {blockage}
     (nil))
(insn/f:TI 230 229 231 10 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:394 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (nil))))
(insn/f:TI 231 230 232 10 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
            (nil))))
(insn/f:TI 232 231 233 10 (set (reg:DI 4 si)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 4 si)
            (nil))))
(insn/f:TI 233 232 234 10 (set (reg:DI 5 di)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 5 di)
            (nil))))
(insn/f:TI 234 233 235 10 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 6 bp)
            (nil))))
(insn/f:TI 235 234 236 10 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 41 r12)
            (nil))))
(insn/f:TI 236 235 237 10 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 42 r13)
            (nil))))
(insn/f:TI 237 236 238 10 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 43 r14)
            (nil))))
(jump_insn:TI 238 237 239 10 (simple_return) blake_ref.c:394 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

(barrier 239 238 268)
;; basic block 11, loop depth 0, count 0, freq 261, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [29.0%]  (CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(code_label 268 239 67 11 66 "" [1 uses])
(note 67 268 70 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(note 70 67 205 11 NOTE_INSN_DELETED)
(insn:TI 205 70 69 11 (set (reg:DI 1 dx [orig:103 D.5911 ] [103])
        (reg/v:DI 42 r13 [orig:122 databitlen ] [122])) blake_ref.c:383 89 {*movdi_internal}
     (nil))
(insn 69 205 68 11 (set (reg:DI 37 r8 [orig:106 D.5913 ] [106])
        (sign_extend:DI (reg/v:SI 43 r14 [orig:88 left ] [88]))) blake_ref.c:382 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 68 69 71 11 (parallel [
            (set (reg:DI 1 dx [orig:103 D.5911 ] [103])
                (lshiftrt:DI (reg:DI 1 dx [orig:103 D.5911 ] [103])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:383 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 71 68 75 11 (set (reg:DI 0 ax [orig:140 D.5914 ] [140])
        (plus:DI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                (reg:DI 37 r8 [orig:106 D.5913 ] [106]))
            (const_int 216 [0xd8]))) blake_ref.c:382 214 {*leadi}
     (nil))
(insn:TI 75 71 76 11 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:103 D.5911 ] [103])
            (const_int 8 [0x8]))) blake_ref.c:382 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 76 75 161 11 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 111)
;;  succ:       17 [50.0%]  (CAN_FALLTHRU)
;;              12 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

;; basic block 12, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(note 161 76 77 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 77 161 212 12 NOTE_INSN_DELETED)
(insn:TI 212 77 79 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:QI (reg:QI 1 dx [orig:103 D.5911 ] [103])
                (const_int 4 [0x4]))
            (const_int 0 [0]))) blake_ref.c:382 359 {*testqi_1_maybe_si}
     (nil))
(jump_insn:TI 79 212 163 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 269)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1000 (nil)))
 -> 269)
;;  succ:       13 [90.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              20 [10.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

;; basic block 13, loop depth 0, count 0, freq 118, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [90.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(note 163 79 93 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 93 163 94 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:103 D.5911 ] [103])
            (const_int 0 [0]))) blake_ref.c:382 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 94 93 164 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 131)
;;  succ:       15 [50.0%]  (CAN_FALLTHRU)
;;              14 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

;; basic block 14, loop depth 0, count 0, freq 59, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 2 [cx] 17 [flags]
;; live  kill	
(note 164 94 97 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(note 97 164 95 14 NOTE_INSN_DELETED)
(insn:TI 95 97 211 14 (set (reg:QI 2 cx [153])
        (mem:QI (reg/v/f:DI 41 r12 [orig:117 data ] [117]) [0  S1 A8])) blake_ref.c:382 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem:QI (reg/v/f:DI 41 r12 [orig:117 data ] [117]) [0  S1 A8])
        (nil)))
(insn 211 95 96 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:QI (reg:QI 1 dx [orig:103 D.5911 ] [103])
                (const_int 2 [0x2]))
            (const_int 0 [0]))) blake_ref.c:382 359 {*testqi_1_maybe_si}
     (nil))
(insn:TI 96 211 99 14 (set (mem:QI (reg:DI 0 ax [orig:140 D.5914 ] [140]) [0  S1 A8])
        (reg:QI 2 cx [153])) blake_ref.c:382 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 2 cx [153])
        (nil)))
(jump_insn 99 96 131 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 270)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1000 (nil)))
 -> 270)
;;  succ:       15 [90.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              21 [10.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

;; basic block 15, loop depth 0, count 0, freq 262, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [90.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              13 [50.0%]  (CAN_FALLTHRU)
;;              17 [100.0%]  (CAN_FALLTHRU)
;;              20 [100.0%]  (CAN_FALLTHRU)
;;              21 [100.0%]  (CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 17 [flags] 42 [r13]
;; live  in  	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 17 [flags] 42 [r13]
;; live  kill	
(code_label 131 99 168 15 50 "" [4 uses])
(note 168 131 132 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(note 132 168 135 15 NOTE_INSN_DELETED)
(note 135 132 133 15 NOTE_INSN_DELETED)
(insn:TI 133 135 281 15 (set (reg:SI 0 ax [174])
        (plus:SI (mult:SI (reg/v:SI 43 r14 [orig:88 left ] [88])
                (const_int 8 [0x8]))
            (reg:SI 42 r13 [orig:122 databitlen ] [122]))) blake_ref.c:384 213 {*leasi}
     (expr_list:REG_DEAD (reg/v:SI 43 r14 [orig:88 left ] [88])
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                    (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
            (nil))))
(insn 281 133 134 15 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (and:SI (reg:SI 42 r13 [orig:122 databitlen ] [122])
                        (const_int 7 [0x7]))
                    (const_int 0 [0])))
            (set (reg:SI 42 r13 [orig:122 databitlen ] [122])
                (and:SI (reg:SI 42 r13 [orig:122 databitlen ] [122])
                    (const_int 7 [0x7])))
        ]) blake_ref.c:387 392 {*andsi_2}
     (expr_list:REG_UNUSED (reg:SI 42 r13 [orig:122 databitlen ] [122])
        (nil)))
(insn:TI 134 281 137 15 (set (mem:SI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (reg:SI 0 ax [174])) blake_ref.c:384 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [174])
        (nil)))
(jump_insn 137 134 138 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 149)
            (pc))) blake_ref.c:387 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 149)
;;  succ:       16 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              10 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]

;; basic block 16, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 0 [ax] 17 [flags]
(note 138 137 141 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(note 141 138 139 16 NOTE_INSN_DELETED)
(insn:TI 139 141 140 16 (set (reg:QI 0 ax [orig:116 D.5917 ] [116])
        (mem:QI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                (reg:DI 1 dx [orig:103 D.5911 ] [103])) [0 *_37+0 S1 A8])) blake_ref.c:388 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 41 r12 [orig:117 data ] [117])
        (nil)))
(insn 140 139 143 16 (parallel [
            (set (reg:DI 1 dx [176])
                (plus:DI (reg:DI 1 dx [orig:103 D.5911 ] [103])
                    (reg/v/f:DI 6 bp [orig:120 state ] [120])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:388 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/v/f:DI 6 bp [orig:120 state ] [120])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 143 140 251 16 (set (mem/j:QI (plus:DI (plus:DI (reg:DI 37 r8 [orig:106 D.5913 ] [106])
                    (reg:DI 1 dx [176]))
                (const_int 216 [0xd8])) [0 state_1(D)->data64 S1 A8])
        (reg:QI 0 ax [orig:116 D.5917 ] [116])) blake_ref.c:388 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [orig:106 D.5913 ] [106])
        (expr_list:REG_DEAD (reg:DI 1 dx [176])
            (expr_list:REG_DEAD (reg:QI 0 ax [orig:116 D.5917 ] [116])
                (nil)))))
(insn 251 143 252 16 (clobber (reg:SI 0 ax [orig:119 <retval> ] [119])) blake_ref.c:394 -1
     (nil))
(insn 252 251 283 16 (use (reg/i:SI 0 ax)) blake_ref.c:394 -1
     (nil))
(note 283 252 254 16 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 254 283 255 16 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:394 677 {blockage}
     (nil))
(insn/f:TI 255 254 256 16 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:394 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (nil))))
(insn/f:TI 256 255 257 16 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 257 256 258 16 (set (reg:DI 4 si)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 4 si)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 258 257 259 16 (set (reg:DI 5 di)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 5 di)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 259 258 260 16 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 6 bp)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 260 259 261 16 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 41 r12)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 261 260 262 16 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 42 r13)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 262 261 263 16 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:394 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 43 r14)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(jump_insn:TI 263 262 266 16 (simple_return) blake_ref.c:394 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

(barrier 266 263 111)
;; basic block 17, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [50.0%]  (CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 5 [di] 17 [flags] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 5 [di] 38 [r9]
;; live  kill	 17 [flags]
(code_label 111 266 167 17 49 "" [1 uses])
(note 167 111 115 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(note 115 167 116 17 NOTE_INSN_DELETED)
(note 116 115 118 17 NOTE_INSN_DELETED)
(note 118 116 119 17 NOTE_INSN_DELETED)
(note 119 118 127 17 NOTE_INSN_DELETED)
(note 127 119 112 17 NOTE_INSN_DELETED)
(insn:TI 112 127 210 17 (set (reg:DI 2 cx [162])
        (mem:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117]) [0  S8 A8])) blake_ref.c:382 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117]) [0  S8 A8])
        (nil)))
(insn 210 112 207 17 (set (reg/f:DI 5 di [170])
        (plus:DI (reg:DI 0 ax [orig:140 D.5914 ] [140])
            (const_int 8 [0x8]))) blake_ref.c:382 214 {*leadi}
     (nil))
(insn 207 210 123 17 (set (reg/f:DI 4 si [orig:143 data ] [143])
        (reg/v/f:DI 41 r12 [orig:117 data ] [117])) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn:TI 123 207 113 17 (parallel [
            (set (reg/f:DI 5 di [170])
                (and:DI (reg/f:DI 5 di [170])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 380 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 113 123 114 17 (set (mem:DI (reg:DI 0 ax [orig:140 D.5914 ] [140]) [0  S8 A8])
        (reg:DI 2 cx [162])) blake_ref.c:382 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [162])
        (nil)))
(insn 114 113 120 17 (set (reg:DI 2 cx [orig:163 D.5911 ] [163])
        (zero_extend:DI (reg:SI 1 dx [orig:103 D.5911 ] [103]))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(insn:TI 120 114 121 17 (set (reg:DI 38 r9 [169])
        (mem:DI (plus:DI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                    (reg:DI 2 cx [orig:163 D.5911 ] [163]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])) blake_ref.c:382 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                    (reg:DI 2 cx [orig:163 D.5911 ] [163]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])
        (nil)))
(insn:TI 121 120 124 17 (set (mem:DI (plus:DI (plus:DI (reg:DI 0 ax [orig:140 D.5914 ] [140])
                    (reg:DI 2 cx [orig:163 D.5911 ] [163]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])
        (reg:DI 38 r9 [169])) blake_ref.c:382 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 38 r9 [169])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:163 D.5911 ] [163])
            (nil))))
(insn 124 121 125 17 (parallel [
            (set (reg/f:DI 0 ax [orig:142 D.5914 ] [142])
                (minus:DI (reg:DI 0 ax [orig:140 D.5914 ] [140])
                    (reg/f:DI 5 di [170])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 125 124 126 17 (parallel [
            (set (reg/f:DI 4 si [orig:143 data ] [143])
                (minus:DI (reg/f:DI 4 si [orig:143 data ] [143])
                    (reg/f:DI 0 ax [orig:142 D.5914 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 126 125 128 17 (parallel [
            (set (reg:SI 0 ax [orig:141 D.5911 ] [141])
                (plus:SI (reg:SI 0 ax [orig:142 D.5914 ] [142])
                    (reg:SI 1 dx [orig:103 D.5911 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 128 126 129 17 (parallel [
            (set (reg:SI 0 ax [171])
                (lshiftrt:SI (reg:SI 0 ax [orig:141 D.5911 ] [141])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 129 128 130 17 (set (reg:DI 2 cx [172])
        (zero_extend:DI (reg:SI 0 ax [171]))) blake_ref.c:382 133 {*zero_extendsidi2}
     (expr_list:REG_DEAD (reg:SI 0 ax [171])
        (nil)))
(insn:TI 130 129 271 17 (parallel [
            (set (reg:DI 2 cx [172])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [170])
                (plus:DI (ashift:DI (reg:DI 2 cx [172])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [170])))
            (set (reg/f:DI 4 si [orig:143 data ] [143])
                (plus:DI (ashift:DI (reg:DI 2 cx [172])
                        (const_int 3 [0x3]))
                    (reg/f:DI 4 si [orig:143 data ] [143])))
            (set (mem:BLK (reg/f:DI 5 di [170]) [0  A64])
                (mem:BLK (reg/f:DI 4 si [orig:143 data ] [143]) [0  A8]))
            (use (reg:DI 2 cx [172]))
        ]) blake_ref.c:382 919 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg/f:DI 5 di [170])
        (expr_list:REG_UNUSED (reg/f:DI 4 si [orig:143 data ] [143])
            (expr_list:REG_UNUSED (reg:DI 2 cx [172])
                (nil)))))
(jump_insn:TI 271 130 272 17 (set (pc)
        (label_ref 131)) 654 {jump}
     (nil)
 -> 131)
;;  succ:       15 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

(barrier 272 271 267)
;; basic block 18, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [29.0%]  (CAN_FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 42 [r13] 43 [r14] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 37 [r8] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(code_label 267 272 21 18 65 "" [1 uses])
(note 21 267 214 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn:TI 214 21 23 18 (set (reg/f:DI 5 di [orig:92 D.5912 ] [92])
        (plus:DI (reg/f:DI 2 cx [orig:120 state ] [120])
            (const_int 216 [0xd8]))) blake_ref.c:359 214 {*leadi}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:120 state ] [120])
        (nil)))
(insn 23 214 28 18 (set (reg:DI 2 cx [orig:126 D.5913 ] [126])
        (sign_extend:DI (reg/v:SI 43 r14 [orig:88 left ] [88]))) blake_ref.c:359 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 43 r14 [orig:88 left ] [88])
        (nil)))
(insn 28 23 38 18 (set (reg:DI 37 r8)
        (reg:DI 4 si [orig:91 D.5911 ] [91])) blake_ref.c:359 89 {*movdi_internal}
     (nil))
(insn:TI 38 28 249 18 (parallel [
            (set (reg/v/f:DI 3 bx [orig:121 data ] [121])
                (plus:DI (reg/v/f:DI 3 bx [orig:121 data ] [121])
                    (reg:DI 4 si [orig:91 D.5911 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:365 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:91 D.5911 ] [91])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 249 38 24 18 (parallel [
            (set (reg:DI 43 r14 [orig:88 left ] [88])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:368 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 24 249 31 18 (parallel [
            (set (reg:DI 2 cx [orig:127 D.5914 ] [127])
                (plus:DI (reg:DI 2 cx [orig:126 D.5913 ] [126])
                    (reg/f:DI 5 di [orig:92 D.5912 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 31 24 34 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>) [0 memcpy S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:359 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 2 cx))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 37 r8))
                    (nil))))))
(insn:TI 34 31 35 18 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                        (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 6 bp [orig:120 state ] [120])
                            (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 35 34 36 18 (set (reg:DI 1 dx)
        (reg/f:DI 5 di [orig:92 D.5912 ] [92])) blake_ref.c:364 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:92 D.5912 ] [92])
        (nil)))
(insn 36 35 37 18 (set (reg:DI 2 cx)
        (reg/v/f:DI 6 bp [orig:120 state ] [120])) blake_ref.c:364 89 {*movdi_internal}
     (nil))
(call_insn:TI 37 36 215 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:364 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn:TI 215 37 40 18 (set (reg:SI 0 ax [orig:133 D.5910 ] [133])
        (mult:SI (reg/v:SI 41 r12 [orig:89 fill ] [89])
            (const_int 8 [0x8]))) blake_ref.c:366 213 {*leasi}
     (expr_list:REG_DEAD (reg/v:SI 41 r12 [orig:89 fill ] [89])
        (nil)))
(insn:TI 40 215 41 18 (set (reg:DI 0 ax [orig:134 D.5911 ] [134])
        (sign_extend:DI (reg:SI 0 ax [orig:133 D.5910 ] [133]))) blake_ref.c:366 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 41 40 273 18 (parallel [
            (set (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
                (minus:DI (reg/v:DI 42 r13 [orig:122 databitlen ] [122])
                    (reg:DI 0 ax [orig:134 D.5911 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:366 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:134 D.5911 ] [134])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(jump_insn 273 41 274 18 (set (pc)
        (label_ref 42)) 654 {jump}
     (nil)
 -> 42)
;;  succ:       4 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

(barrier 274 273 160)
;; basic block 19, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [9.0%]  (CAN_FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 41 [r12]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 41 [r12]
;; live  kill	
(code_label 160 274 159 19 54 "" [1 uses])
(note 159 160 7 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn:TI 7 159 275 19 (set (reg/v/f:DI 41 r12 [orig:117 data ] [117])
        (reg/v/f:DI 3 bx [orig:121 data ] [121])) blake_ref.c:372 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:121 data ] [121])
        (nil)))
(jump_insn 275 7 276 19 (set (pc)
        (label_ref 63)) 654 {jump}
     (nil)
 -> 63)
;;  succ:       8 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

(barrier 276 275 269)
;; basic block 20, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [10.0%]  (CAN_FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 2 [cx] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 2 [cx] 38 [r9]
;; live  kill	
(code_label 269 276 162 20 67 "" [1 uses])
(note 162 269 83 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(note 83 162 84 20 NOTE_INSN_DELETED)
(note 84 83 86 20 NOTE_INSN_DELETED)
(note 86 84 87 20 NOTE_INSN_DELETED)
(note 87 86 80 20 NOTE_INSN_DELETED)
(insn:TI 80 87 81 20 (set (reg:SI 2 cx [145])
        (mem:SI (reg/v/f:DI 41 r12 [orig:117 data ] [117]) [0  S4 A8])) blake_ref.c:382 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:DI 41 r12 [orig:117 data ] [117]) [0  S4 A8])
        (nil)))
(insn:TI 81 80 82 20 (set (mem:SI (reg:DI 0 ax [orig:140 D.5914 ] [140]) [0  S4 A8])
        (reg:SI 2 cx [145])) blake_ref.c:382 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [145])
        (nil)))
(insn 82 81 88 20 (set (reg:DI 2 cx [orig:146 D.5911 ] [146])
        (zero_extend:DI (reg:SI 1 dx [orig:103 D.5911 ] [103]))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(insn:TI 88 82 89 20 (set (reg:SI 38 r9 [152])
        (mem:SI (plus:DI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                    (reg:DI 2 cx [orig:146 D.5911 ] [146]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])) blake_ref.c:382 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                    (reg:DI 2 cx [orig:146 D.5911 ] [146]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])
        (nil)))
(insn:TI 89 88 277 20 (set (mem:SI (plus:DI (plus:DI (reg:DI 0 ax [orig:140 D.5914 ] [140])
                    (reg:DI 2 cx [orig:146 D.5911 ] [146]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])
        (reg:SI 38 r9 [152])) blake_ref.c:382 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [152])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:146 D.5911 ] [146])
            (expr_list:REG_DEAD (reg:DI 0 ax [orig:140 D.5914 ] [140])
                (nil)))))
(jump_insn 277 89 278 20 (set (pc)
        (label_ref 131)) 654 {jump}
     (nil)
 -> 131)
;;  succ:       15 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

(barrier 278 277 270)
;; basic block 21, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 20, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [10.0%]  (CAN_FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 2 [cx] 38 [r9]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 2 [cx] 38 [r9]
;; live  kill	
(code_label 270 278 165 21 68 "" [1 uses])
(note 165 270 102 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(note 102 165 105 21 NOTE_INSN_DELETED)
(note 105 102 100 21 NOTE_INSN_DELETED)
(insn:TI 100 105 106 21 (set (reg:DI 2 cx [orig:156 D.5911 ] [156])
        (zero_extend:DI (reg:SI 1 dx [orig:103 D.5911 ] [103]))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(insn:TI 106 100 107 21 (set (reg:HI 38 r9 [161])
        (mem:HI (plus:DI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                    (reg:DI 2 cx [orig:156 D.5911 ] [156]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])) blake_ref.c:382 92 {*movhi_internal}
     (expr_list:REG_EQUIV (mem:HI (plus:DI (plus:DI (reg/v/f:DI 41 r12 [orig:117 data ] [117])
                    (reg:DI 2 cx [orig:156 D.5911 ] [156]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (nil)))
(insn:TI 107 106 279 21 (set (mem:HI (plus:DI (plus:DI (reg:DI 0 ax [orig:140 D.5914 ] [140])
                    (reg:DI 2 cx [orig:156 D.5911 ] [156]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (reg:HI 38 r9 [161])) blake_ref.c:382 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 38 r9 [161])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:156 D.5911 ] [156])
            (expr_list:REG_DEAD (reg:DI 0 ax [orig:140 D.5914 ] [140])
                (nil)))))
(jump_insn 279 107 280 21 (set (pc)
        (label_ref 131)) 654 {jump}
     (nil)
 -> 131)
;;  succ:       15 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 43 [r14]

(barrier 280 279 200)
(note 200 280 0 NOTE_INSN_DELETED)

;; Function GetHashStateSize (GetHashStateSize, funcdef_no=10, decl_uid=3156, cgraph_uid=10, symbol_order=18)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 13 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i  13 unspec/v[sp] 4                          :athlon-vector,athlon-ieu,athlon-ieu
;;	  1--> b  0: i   9 ax=0x178                                :athlon-direct,athlon-ieu
;;	  1--> b  0: i  10 use ax                                  :nothing
;;	  2--> b  0: i  16 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 13
;;   new tail = 16



starting the processing of deferred insns
ending the processing of deferred insns


GetHashStateSize

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 7[sp]
;;  ref usage 	r0={1d,2u} r1={1d} r2={1d} r7={1d,3u} r21={1d} r22={1d} r23={1d} r24={1d} r37={1d} r38={1d} 
;;    total ref usage 15{10d,5u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 13 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 13 2 14 2 (unspec_volatile [
            (reg/f:DI 7 sp)
        ] UNSPECV_PROLOGUE_USE) blake_ref.c:5 679 {prologue_use}
     (nil))
(note 14 13 9 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 9 14 10 2 (set (reg/i:SI 0 ax)
        (const_int 376 [0x178])) blake_ref.c:7 90 {*movsi_internal}
     (nil))
(insn 10 9 16 2 (use (reg/i:SI 0 ax)) blake_ref.c:7 -1
     (nil))
(jump_insn:TI 16 10 15 2 (simple_return) blake_ref.c:7 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 15 16 12)
(note 12 15 0 NOTE_INSN_DELETED)

;; Function Init (Init, funcdef_no=13, decl_uid=3182, cgraph_uid=13, symbol_order=21)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 17 count 14 (    1)


Init

Dataflow summary:
def_info->table_size = 73, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 5 [di] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8]
;;  ref usage 	r0={10d,10u} r1={1d,5u} r2={33d,33u} r5={8d,10u} r7={3d,16u} r16={1e} r17={13d,4u} r21={2d,1u} r22={1d} r23={1d} r24={1d} r37={2d,45u} r38={1d} 
;;    total ref usage 201{76d,124u,1e} in 104{104 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(1){ }d-1(2){ }d-1(5){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 1 [dx] 2 [cx] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 1 [dx] 2 [cx] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 5 [di] 7 [sp]

( 0 )->[2]->( 3 8 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 7 [sp] 17 [flags] 37 [r8]
;; live  in  	 1 [dx] 2 [cx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 7 [sp] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

( 2 )->[3]->( 12 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

( 3 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 2 [cx]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 2 [cx]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

( 4 12 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 2 [cx] 5 [di] 17 [flags] 21 [xmm0]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 5 [di] 21 [xmm0]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

( 5 11 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 8 6 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 5 [di] 7 [sp]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 5 [di] 7 [sp]
;; live  kill	
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

( 2 )->[8]->( 9 7 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 1 [dx] 7 [sp] 37 [r8]

( 8 )->[9]->( 13 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

( 9 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 2 [cx]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 2 [cx]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

( 10 13 )->[11]->( 6 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 2 [cx] 5 [di] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

( 3 )->[12]->( 5 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 2 [cx]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 2 [cx]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

( 9 )->[13]->( 11 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 2 [cx]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 2 [cx]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(5){ }u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 13 to worklist
  Adding insn 183 to worklist
  Adding insn 182 to worklist
  Adding insn 16 to worklist
  Adding insn 41 to worklist
  Adding insn 39 to worklist
  Adding insn 37 to worklist
  Adding insn 35 to worklist
  Adding insn 64 to worklist
  Adding insn 62 to worklist
  Adding insn 54 to worklist
  Adding insn 50 to worklist
  Adding insn 45 to worklist
  Adding insn 44 to worklist
  Adding insn 147 to worklist
  Adding insn 146 to worklist
  Adding insn 145 to worklist
  Adding insn 144 to worklist
  Adding insn 188 to worklist
  Adding insn 186 to worklist
  Adding insn 155 to worklist
  Adding insn 72 to worklist
  Adding insn 75 to worklist
  Adding insn 116 to worklist
  Adding insn 114 to worklist
  Adding insn 112 to worklist
  Adding insn 110 to worklist
  Adding insn 108 to worklist
  Adding insn 106 to worklist
  Adding insn 104 to worklist
  Adding insn 102 to worklist
  Adding insn 203 to worklist
  Adding insn 141 to worklist
  Adding insn 140 to worklist
  Adding insn 139 to worklist
  Adding insn 138 to worklist
  Adding insn 137 to worklist
  Adding insn 129 to worklist
  Adding insn 125 to worklist
  Adding insn 120 to worklist
  Adding insn 119 to worklist
  Adding insn 205 to worklist
  Adding insn 27 to worklist
  Adding insn 25 to worklist
  Adding insn 23 to worklist
  Adding insn 21 to worklist
  Adding insn 207 to worklist
  Adding insn 94 to worklist
  Adding insn 92 to worklist
  Adding insn 90 to worklist
  Adding insn 88 to worklist
  Adding insn 86 to worklist
  Adding insn 84 to worklist
  Adding insn 82 to worklist
  Adding insn 80 to worklist
Finished finding needed instructions:
processing block 7 lr out =  0 [ax] 5 [di] 7 [sp]
  Adding insn 187 to worklist
processing block 6 lr out =  0 [ax] 7 [sp]
  Adding insn 196 to worklist
processing block 5 lr out =  1 [dx] 7 [sp] 37 [r8]
  Adding insn 63 to worklist
  Adding insn 199 to worklist
  Adding insn 60 to worklist
  Adding insn 58 to worklist
  Adding insn 57 to worklist
  Adding insn 170 to worklist
  Adding insn 56 to worklist
  Adding insn 178 to worklist
processing block 12 lr out =  1 [dx] 7 [sp] 37 [r8]
  Adding insn 26 to worklist
  Adding insn 24 to worklist
  Adding insn 22 to worklist
  Adding insn 20 to worklist
processing block 4 lr out =  1 [dx] 7 [sp] 37 [r8]
  Adding insn 40 to worklist
  Adding insn 38 to worklist
  Adding insn 36 to worklist
  Adding insn 34 to worklist
processing block 3 lr out =  1 [dx] 7 [sp] 37 [r8]
  Adding insn 15 to worklist
processing block 11 lr out =  1 [dx] 7 [sp] 37 [r8]
  Adding insn 197 to worklist
  Adding insn 135 to worklist
  Adding insn 133 to worklist
  Adding insn 132 to worklist
  Adding insn 172 to worklist
  Adding insn 131 to worklist
  Adding insn 174 to worklist
processing block 13 lr out =  1 [dx] 7 [sp] 37 [r8]
  Adding insn 93 to worklist
  Adding insn 91 to worklist
  Adding insn 89 to worklist
  Adding insn 87 to worklist
  Adding insn 85 to worklist
  Adding insn 83 to worklist
  Adding insn 81 to worklist
  Adding insn 79 to worklist
processing block 10 lr out =  1 [dx] 7 [sp] 37 [r8]
  Adding insn 115 to worklist
  Adding insn 113 to worklist
  Adding insn 111 to worklist
  Adding insn 109 to worklist
  Adding insn 107 to worklist
  Adding insn 105 to worklist
  Adding insn 103 to worklist
  Adding insn 101 to worklist
processing block 9 lr out =  1 [dx] 7 [sp] 37 [r8]
  Adding insn 74 to worklist
processing block 8 lr out =  0 [ax] 1 [dx] 7 [sp] 37 [r8]
  Adding insn 198 to worklist
  Adding insn 5 to worklist
  Adding insn 177 to worklist
processing block 2 lr out =  1 [dx] 7 [sp] 37 [r8]
  Adding insn 200 to worklist
  Adding insn 181 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 17 count 14 (    1)
;;   ======================================================
;;   -- basic block 2 from 182 to 13 -- after reload
;;   ======================================================

;;	  0--> b  0: i 182 [--sp]=di                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 183 unspec/v[sp] 4                          :athlon-vector,athlon-ieu,athlon-ieu
;;	  4--> b  0: i 181 ax=dx-0xe0                              :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i   2 r8=cx                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i 200 {flags=cmp(ax&0xffffffffffffffdf,0);ax=ax&0xffffffffffffffdf;}:athlon-direct,athlon-ieu
;;	  7--> b  0: i  13 pc={(flags!=0)?L67:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 182
;;   new tail = 13

;;   ======================================================
;;   -- basic block 3 from 15 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i  15 flags=cmp(dx,0xe0)                      :athlon-direct,athlon-ieu
;;	  1--> b  0: i  16 pc={(flags==0)?L201:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 15
;;   new tail = 16

;;   ======================================================
;;   -- basic block 4 from 34 to 41 -- after reload
;;   ======================================================

;;	  0--> b  0: i  34 cx=[`IV256']                            :athlon-direct,athlon-load
;;	  3--> b  0: i  35 [r8+0x10]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  36 cx=[const(`IV256'+0x8)]                 :athlon-direct,athlon-load
;;	  6--> b  0: i  37 [r8+0x18]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  38 cx=[const(`IV256'+0x10)]                :athlon-direct,athlon-load
;;	  9--> b  0: i  39 [r8+0x20]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  40 cx=[const(`IV256'+0x18)]                :athlon-direct,athlon-load
;;	 12--> b  0: i  41 [r8+0x28]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 12
;;   new head = 34
;;   new tail = 41

;;   ======================================================
;;   -- basic block 5 from 44 to 64 -- after reload
;;   ======================================================

;;	  0--> b  0: i 178 di=r8+0x40                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 170 ax=r8                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  44 [r8+0x30]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  63 xmm0=const_vector                       :athlon-double,athlon-fpsched,athlon-fmul
;;	  1--> b  0: i  45 [r8+0x34]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  56 {di=di&0xfffffffffffffff8;clobber flags;}:athlon-direct,athlon-ieu
;;	  2--> b  0: i  50 [r8+0x38]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  54 [r8+0x70]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  57 {ax=ax-di;clobber flags;}               :athlon-direct,athlon-ieu
;;	  4--> b  0: i  58 cx=ax+0x78                              :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i 199 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  60 {cx=zxn(cx 0>>0x3);clobber flags;}      :athlon-direct,athlon-ieu
;;	  7--> b  0: i  62 {cx=0;di=cx<<0x3+di;[di]=0;use ax;use cx;}:athlon-vector,athlon-load,athlon-ieu0*6
;;	  8--> b  0: i  64 [r8+0x78]=unspec[xmm0] 104              :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	Ready list (final):  
;;   total time = 8
;;   new head = 178
;;   new tail = 64

;;   ======================================================
;;   -- basic block 6 from 144 to 196 -- after reload
;;   ======================================================

;;	  0--> b  0: i 144 [r8]=dx                                 :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 145 [r8+0x4]=0                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 196 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 146 [r8+0x8]=0x1                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 147 [r8+0xc]=0                              :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 3
;;   new head = 144
;;   new tail = 147

;;   ======================================================
;;   -- basic block 7 from 155 to 188 -- after reload
;;   ======================================================

;;	  0--> b  0: i 155 use ax                                  :nothing
;;	  0--> b  0: i 186 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	  1--> b  0: i 187 di=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 188 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 155
;;   new tail = 188

;;   ======================================================
;;   -- basic block 8 from 177 to 72 -- after reload
;;   ======================================================

;;	  0--> b  0: i 177 cx=dx-0x180                             :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i   5 ax=0x2                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 198 {flags=cmp(cx&0xffffffffffffff7f,0);cx=cx&0xffffffffffffff7f;}:athlon-direct,athlon-ieu
;;	  3--> b  0: i  72 pc={(flags!=0)?L148:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 177
;;   new tail = 72

;;   ======================================================
;;   -- basic block 9 from 74 to 75 -- after reload
;;   ======================================================

;;	  0--> b  0: i  74 flags=cmp(dx,0x180)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i  75 pc={(flags==0)?L202:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 74
;;   new tail = 75

;;   ======================================================
;;   -- basic block 10 from 101 to 116 -- after reload
;;   ======================================================

;;	  0--> b  0: i 101 cx=[`IV512']                            :athlon-direct,athlon-load
;;	  3--> b  0: i 102 [r8+0x88]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 103 cx=[const(`IV512'+0x8)]                 :athlon-direct,athlon-load
;;	  6--> b  0: i 104 [r8+0x90]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 105 cx=[const(`IV512'+0x10)]                :athlon-direct,athlon-load
;;	  9--> b  0: i 106 [r8+0x98]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i 107 cx=[const(`IV512'+0x18)]                :athlon-direct,athlon-load
;;	 12--> b  0: i 108 [r8+0xa0]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i 109 cx=[const(`IV512'+0x20)]                :athlon-direct,athlon-load
;;	 15--> b  0: i 110 [r8+0xa8]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i 111 cx=[const(`IV512'+0x28)]                :athlon-direct,athlon-load
;;	 18--> b  0: i 112 [r8+0xb0]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i 113 cx=[const(`IV512'+0x30)]                :athlon-direct,athlon-load
;;	 21--> b  0: i 114 [r8+0xb8]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 21--> b  0: i 115 cx=[const(`IV512'+0x38)]                :athlon-direct,athlon-load
;;	 24--> b  0: i 116 [r8+0xc0]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 24
;;   new head = 101
;;   new tail = 116

;;   ======================================================
;;   -- basic block 11 from 119 to 203 -- after reload
;;   ======================================================

;;	  0--> b  0: i 174 di=r8+0xe0                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 172 ax=r8                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 119 [r8+0xc8]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 120 [r8+0xd0]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 125 [r8+0xd8]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 131 {di=di&0xfffffffffffffff8;clobber flags;}:athlon-direct,athlon-ieu
;;	  2--> b  0: i 129 [r8+0x110]=0                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 132 {ax=ax-di;clobber flags;}               :athlon-direct,athlon-ieu
;;	  4--> b  0: i 133 cx=ax+0x118                             :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i 197 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i 135 {cx=zxn(cx 0>>0x3);clobber flags;}      :athlon-direct,athlon-ieu
;;	  7--> b  0: i 137 {cx=0;di=cx<<0x3+di;[di]=0;use ax;use cx;}:athlon-vector,athlon-load,athlon-ieu0*6
;;	  8--> b  0: i 138 [r8+0x158]=0                            :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i 139 [r8+0x160]=0                            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i 140 [r8+0x168]=0                            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i 141 [r8+0x170]=0                            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i 203 pc=L142                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 174
;;   new tail = 203

;;   ======================================================
;;   -- basic block 12 from 20 to 205 -- after reload
;;   ======================================================

;;	  0--> b  0: i  20 cx=[`IV224']                            :athlon-direct,athlon-load
;;	  3--> b  0: i  21 [r8+0x10]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  22 cx=[const(`IV224'+0x8)]                 :athlon-direct,athlon-load
;;	  6--> b  0: i  23 [r8+0x18]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  24 cx=[const(`IV224'+0x10)]                :athlon-direct,athlon-load
;;	  9--> b  0: i  25 [r8+0x20]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  26 cx=[const(`IV224'+0x18)]                :athlon-direct,athlon-load
;;	 12--> b  0: i  27 [r8+0x28]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i 205 pc=L42                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 20
;;   new tail = 205

;;   ======================================================
;;   -- basic block 13 from 79 to 207 -- after reload
;;   ======================================================

;;	  0--> b  0: i  79 cx=[`IV384']                            :athlon-direct,athlon-load
;;	  3--> b  0: i  80 [r8+0x88]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  81 cx=[const(`IV384'+0x8)]                 :athlon-direct,athlon-load
;;	  6--> b  0: i  82 [r8+0x90]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  83 cx=[const(`IV384'+0x10)]                :athlon-direct,athlon-load
;;	  9--> b  0: i  84 [r8+0x98]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  85 cx=[const(`IV384'+0x18)]                :athlon-direct,athlon-load
;;	 12--> b  0: i  86 [r8+0xa0]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i  87 cx=[const(`IV384'+0x20)]                :athlon-direct,athlon-load
;;	 15--> b  0: i  88 [r8+0xa8]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i  89 cx=[const(`IV384'+0x28)]                :athlon-direct,athlon-load
;;	 18--> b  0: i  90 [r8+0xb0]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i  91 cx=[const(`IV384'+0x30)]                :athlon-direct,athlon-load
;;	 21--> b  0: i  92 [r8+0xb8]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 21--> b  0: i  93 cx=[const(`IV384'+0x38)]                :athlon-direct,athlon-load
;;	 24--> b  0: i  94 [r8+0xc0]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 24--> b  0: i 207 pc=L117                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 24
;;   new head = 79
;;   new tail = 207



starting the processing of deferred insns
ending the processing of deferred insns


Init

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 5 [di] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8]
;;  ref usage 	r0={10d,10u} r1={1d,5u} r2={33d,33u} r5={8d,10u} r7={3d,16u} r16={1e} r17={13d,4u} r21={2d,1u} r22={1d} r23={1d} r24={1d} r37={2d,45u} r38={1d} 
;;    total ref usage 201{76d,124u,1e} in 104{104 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 7 [sp] 17 [flags] 37 [r8]
;; live  in  	 1 [dx] 2 [cx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 7 [sp] 17 [flags] 37 [r8]
;; live  kill	
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 7 11 2 NOTE_INSN_FUNCTION_BEG)
(note 11 4 182 2 NOTE_INSN_DELETED)
(insn/f:TI 182 11 183 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 5 di)) blake_ref.c:203 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil)))
(insn:TI 183 182 184 2 (unspec_volatile [
            (reg/f:DI 7 sp)
        ] UNSPECV_PROLOGUE_USE) blake_ref.c:203 679 {prologue_use}
     (nil))
(note 184 183 181 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 181 184 2 2 (set (reg:SI 0 ax [orig:102 D.5934 ] [102])
        (plus:SI (reg/v:SI 1 dx [orig:101 hashbitlen ] [101])
            (const_int -224 [0xffffffffffffff20]))) blake_ref.c:207 213 {*leasi}
     (nil))
(insn 2 181 200 2 (set (reg/v/f:DI 37 r8 [orig:100 state ] [100])
        (reg:DI 2 cx [ state ])) blake_ref.c:203 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ state ])
        (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
            (nil))))
(insn:TI 200 2 13 2 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (and:SI (reg:SI 0 ax [orig:102 D.5934 ] [102])
                        (const_int -33 [0xffffffffffffffdf]))
                    (const_int 0 [0])))
            (set (reg:SI 0 ax [orig:102 D.5934 ] [102])
                (and:SI (reg:SI 0 ax [orig:102 D.5934 ] [102])
                    (const_int -33 [0xffffffffffffffdf])))
        ]) blake_ref.c:207 392 {*andsi_2}
     (expr_list:REG_UNUSED (reg:SI 0 ax [orig:102 D.5934 ] [102])
        (nil)))
(jump_insn:TI 13 200 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) blake_ref.c:207 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 67)
;;  succ:       3 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

;; basic block 3, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 1 dx [orig:101 hashbitlen ] [101])
            (const_int 224 [0xe0]))) blake_ref.c:210 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 16 15 31 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 201)
            (pc))) blake_ref.c:210 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 201)
;;  succ:       12 [28.0%]  (CAN_FALLTHRU)
;;              4 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

;; basic block 4, loop depth 0, count 0, freq 111, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       3 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 2 [cx]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 2 [cx]
;; live  kill	
(note 31 16 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 34 31 35 4 (set (reg:DI 2 cx [orig:112 MEM[(void *)&IV256] ] [112])
        (mem/u/c:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>) [0 MEM[(void *)&IV256]+0 S8 A256])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>) [0 MEM[(void *)&IV256]+0 S8 A256])
        (nil)))
(insn:TI 35 34 36 4 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+0 S8 A8])
        (reg:DI 2 cx [orig:112 MEM[(void *)&IV256] ] [112])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:112 MEM[(void *)&IV256] ] [112])
        (nil)))
(insn 36 35 37 4 (set (reg:DI 2 cx [orig:113 MEM[(void *)&IV256]+8 ] [113])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV256]+8 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV256]+8 S8 A64])
        (nil)))
(insn:TI 37 36 38 4 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 16B]+8 S8 A8])
        (reg:DI 2 cx [orig:113 MEM[(void *)&IV256]+8 ] [113])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:113 MEM[(void *)&IV256]+8 ] [113])
        (nil)))
(insn 38 37 39 4 (set (reg:DI 2 cx [orig:114 MEM[(void *)&IV256]+16 ] [114])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV256]+16 S8 A128])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV256]+16 S8 A128])
        (nil)))
(insn:TI 39 38 40 4 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 32 [0x20])) [0 MEM[(void *)state_18(D) + 16B]+16 S8 A8])
        (reg:DI 2 cx [orig:114 MEM[(void *)&IV256]+16 ] [114])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:114 MEM[(void *)&IV256]+16 ] [114])
        (nil)))
(insn 40 39 41 4 (set (reg:DI 2 cx [orig:115 MEM[(void *)&IV256]+24 ] [115])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV256]+24 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV256]+24 S8 A64])
        (nil)))
(insn:TI 41 40 42 4 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 40 [0x28])) [0 MEM[(void *)state_18(D) + 16B]+24 S8 A8])
        (reg:DI 2 cx [orig:115 MEM[(void *)&IV256]+24 ] [115])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:115 MEM[(void *)&IV256]+24 ] [115])
        (nil)))
;;  succ:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

;; basic block 5, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              12 [100.0%]  (CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 2 [cx] 5 [di] 17 [flags] 21 [xmm0]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 5 [di] 21 [xmm0]
;; live  kill	 17 [flags]
(code_label 42 41 43 5 73 "" [1 uses])
(note 43 42 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 46 43 53 5 NOTE_INSN_DELETED)
(note 53 46 59 5 NOTE_INSN_DELETED)
(note 59 53 178 5 NOTE_INSN_DELETED)
(insn:TI 178 59 170 5 (set (reg/f:DI 5 di [123])
        (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
            (const_int 64 [0x40]))) 214 {*leadi}
     (nil))
(insn 170 178 44 5 (set (reg/f:SI 0 ax [orig:117 D.5936 ] [117])
        (reg:SI 37 r8 [orig:100 state ] [100])) 90 {*movsi_internal}
     (nil))
(insn 44 170 63 5 (set (mem:SI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 48 [0x30])) [2 state_18(D)->t32+0 S4 A64])
        (const_int 0 [0])) blake_ref.c:215 90 {*movsi_internal}
     (nil))
(insn:TI 63 44 45 5 (set (reg:V4SI 21 xmm0 [126])
        (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])) blake_ref.c:221 1194 {*movv4si_internal}
     (expr_list:REG_EQUIV (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])
        (nil)))
(insn 45 63 56 5 (set (mem:SI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 52 [0x34])) [2 state_18(D)->t32+4 S4 A32])
        (const_int 0 [0])) blake_ref.c:216 90 {*movsi_internal}
     (nil))
(insn:TI 56 45 50 5 (parallel [
            (set (reg/f:DI 5 di [123])
                (and:DI (reg/f:DI 5 di [123])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 50 56 54 5 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 56 [0x38])) [0  S8 A8])
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 54 50 57 5 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 112 [0x70])) [0  S8 A8])
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn:TI 57 54 58 5 (parallel [
            (set (reg/f:SI 0 ax [orig:117 D.5936 ] [117])
                (minus:SI (reg/f:SI 0 ax [orig:117 D.5936 ] [117])
                    (reg:SI 5 di [123])))
            (clobber (reg:CC 17 flags))
        ]) 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 58 57 199 5 (set (reg:SI 2 cx [118])
        (plus:SI (reg/f:SI 0 ax [orig:117 D.5936 ] [117])
            (const_int 120 [0x78]))) 213 {*leasi}
     (expr_list:REG_DEAD (reg/f:SI 0 ax [orig:117 D.5936 ] [117])
        (nil)))
(insn 199 58 60 5 (parallel [
            (set (reg:DI 0 ax [119])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 60 199 62 5 (parallel [
            (set (reg:DI 2 cx)
                (zero_extend:DI (lshiftrt:SI (reg:SI 2 cx [118])
                        (const_int 3 [0x3]))))
            (clobber (reg:CC 17 flags))
        ]) 550 {*lshrsi3_1_zext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 62 60 64 5 (parallel [
            (set (reg:DI 2 cx [125])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [123])
                (plus:DI (ashift:DI (reg:DI 2 cx [125])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [123])))
            (set (mem:BLK (reg/f:DI 5 di [123]) [0  A64])
                (const_int 0 [0]))
            (use (reg:DI 0 ax [119]))
            (use (reg:DI 2 cx [125]))
        ]) 933 {*rep_stosdi_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [119])
        (expr_list:REG_UNUSED (reg/f:DI 5 di [123])
            (expr_list:REG_UNUSED (reg:DI 2 cx [125])
                (nil)))))
(insn:TI 64 62 142 5 (set (mem:V16QI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 120 [0x78])) [2 MEM[(unsigned int *)state_18(D) + 120B]+0 S16 A32])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [126])
            ] UNSPEC_STOREU)) blake_ref.c:221 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V16QI 21 xmm0 [126])
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

;; basic block 6, loop depth 0, count 0, freq 205, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              11 [100.0%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 142 64 143 6 74 "" [1 uses])
(note 143 142 144 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 144 143 145 6 (set (mem:SI (reg/v/f:DI 37 r8 [orig:100 state ] [100]) [2 state_18(D)->hashbitlen+0 S4 A64])
        (reg/v:SI 1 dx [orig:101 hashbitlen ] [101])) blake_ref.c:251 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 1 dx [orig:101 hashbitlen ] [101])
        (nil)))
(insn 145 144 196 6 (set (mem:SI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 4 [0x4])) [2 state_18(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:252 90 {*movsi_internal}
     (nil))
(insn 196 145 146 6 (parallel [
            (set (reg:DI 0 ax [orig:88 D.5935 ] [88])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:256 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 146 196 147 6 (set (mem:SI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 8 [0x8])) [2 state_18(D)->init+0 S4 A64])
        (const_int 1 [0x1])) blake_ref.c:253 90 {*movsi_internal}
     (nil))
(insn 147 146 148 6 (set (mem:SI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 12 [0xc])) [2 state_18(D)->nullt+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:254 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 37 r8 [orig:100 state ] [100])
        (nil)))
;;  succ:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       8 [67.0%]  (CAN_FALLTHRU)
;;              6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 5 [di] 7 [sp]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 5 [di] 7 [sp]
;; live  kill	
(code_label 148 147 149 7 75 "" [1 uses])
(note 149 148 155 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 155 149 209 7 (use (reg/i:SI 0 ax)) blake_ref.c:257 -1
     (nil))
(note 209 155 186 7 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 186 209 187 7 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:257 677 {blockage}
     (nil))
(insn/f:TI 187 186 188 7 (set (reg:DI 5 di)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:257 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 5 di)
            (nil))))
(jump_insn:TI 188 187 189 7 (simple_return) blake_ref.c:257 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

(barrier 189 188 67)
;; basic block 8, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	
(code_label 67 189 68 8 71 "" [1 uses])
(note 68 67 70 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(note 70 68 177 8 NOTE_INSN_DELETED)
(insn:TI 177 70 5 8 (set (reg:SI 2 cx [orig:127 D.5934 ] [127])
        (plus:SI (reg/v:SI 1 dx [orig:101 hashbitlen ] [101])
            (const_int -384 [0xfffffffffffffe80]))) blake_ref.c:227 213 {*leasi}
     (nil))
(insn 5 177 198 8 (set (reg:SI 0 ax [orig:88 D.5935 ] [88])
        (const_int 2 [0x2])) blake_ref.c:249 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))
(insn:TI 198 5 72 8 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (and:SI (reg:SI 2 cx [orig:127 D.5934 ] [127])
                        (const_int -129 [0xffffffffffffff7f]))
                    (const_int 0 [0])))
            (set (reg:SI 2 cx [orig:127 D.5934 ] [127])
                (and:SI (reg:SI 2 cx [orig:127 D.5934 ] [127])
                    (const_int -129 [0xffffffffffffff7f])))
        ]) blake_ref.c:227 392 {*andsi_2}
     (expr_list:REG_UNUSED (reg:SI 2 cx [orig:127 D.5934 ] [127])
        (nil)))
(jump_insn:TI 72 198 73 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 148)
            (pc))) blake_ref.c:227 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6700 (nil)))
 -> 148)
;;  succ:       9 [33.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              7 [67.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 1 [dx] 7 [sp] 37 [r8]

;; basic block 9, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [33.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 73 72 74 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 74 73 75 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 1 dx [orig:101 hashbitlen ] [101])
            (const_int 384 [0x180]))) blake_ref.c:230 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 75 74 98 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 202)
            (pc))) blake_ref.c:230 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 202)
;;  succ:       13 [28.0%]  (CAN_FALLTHRU)
;;              10 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

;; basic block 10, loop depth 0, count 0, freq 37, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       9 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 2 [cx]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 2 [cx]
;; live  kill	
(note 98 75 101 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn:TI 101 98 102 10 (set (reg:DI 2 cx [orig:141 MEM[(void *)&IV512] ] [141])
        (mem/u/c:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>) [0 MEM[(void *)&IV512]+0 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>) [0 MEM[(void *)&IV512]+0 S8 A256])
        (nil)))
(insn:TI 102 101 103 10 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 136 [0x88])) [0 MEM[(void *)state_18(D) + 136B]+0 S8 A8])
        (reg:DI 2 cx [orig:141 MEM[(void *)&IV512] ] [141])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:141 MEM[(void *)&IV512] ] [141])
        (nil)))
(insn 103 102 104 10 (set (reg:DI 2 cx [orig:142 MEM[(void *)&IV512]+8 ] [142])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV512]+8 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV512]+8 S8 A64])
        (nil)))
(insn:TI 104 103 105 10 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 144 [0x90])) [0 MEM[(void *)state_18(D) + 136B]+8 S8 A8])
        (reg:DI 2 cx [orig:142 MEM[(void *)&IV512]+8 ] [142])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:142 MEM[(void *)&IV512]+8 ] [142])
        (nil)))
(insn 105 104 106 10 (set (reg:DI 2 cx [orig:143 MEM[(void *)&IV512]+16 ] [143])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV512]+16 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV512]+16 S8 A128])
        (nil)))
(insn:TI 106 105 107 10 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 152 [0x98])) [0 MEM[(void *)state_18(D) + 136B]+16 S8 A8])
        (reg:DI 2 cx [orig:143 MEM[(void *)&IV512]+16 ] [143])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:143 MEM[(void *)&IV512]+16 ] [143])
        (nil)))
(insn 107 106 108 10 (set (reg:DI 2 cx [orig:144 MEM[(void *)&IV512]+24 ] [144])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV512]+24 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV512]+24 S8 A64])
        (nil)))
(insn:TI 108 107 109 10 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 160 [0xa0])) [0 MEM[(void *)state_18(D) + 136B]+24 S8 A8])
        (reg:DI 2 cx [orig:144 MEM[(void *)&IV512]+24 ] [144])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:144 MEM[(void *)&IV512]+24 ] [144])
        (nil)))
(insn 109 108 110 10 (set (reg:DI 2 cx [orig:145 MEM[(void *)&IV512]+32 ] [145])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 32 [0x20]))) [0 MEM[(void *)&IV512]+32 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 32 [0x20]))) [0 MEM[(void *)&IV512]+32 S8 A256])
        (nil)))
(insn:TI 110 109 111 10 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 168 [0xa8])) [0 MEM[(void *)state_18(D) + 136B]+32 S8 A8])
        (reg:DI 2 cx [orig:145 MEM[(void *)&IV512]+32 ] [145])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:145 MEM[(void *)&IV512]+32 ] [145])
        (nil)))
(insn 111 110 112 10 (set (reg:DI 2 cx [orig:146 MEM[(void *)&IV512]+40 ] [146])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 40 [0x28]))) [0 MEM[(void *)&IV512]+40 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 40 [0x28]))) [0 MEM[(void *)&IV512]+40 S8 A64])
        (nil)))
(insn:TI 112 111 113 10 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 176 [0xb0])) [0 MEM[(void *)state_18(D) + 136B]+40 S8 A8])
        (reg:DI 2 cx [orig:146 MEM[(void *)&IV512]+40 ] [146])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:146 MEM[(void *)&IV512]+40 ] [146])
        (nil)))
(insn 113 112 114 10 (set (reg:DI 2 cx [orig:147 MEM[(void *)&IV512]+48 ] [147])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 48 [0x30]))) [0 MEM[(void *)&IV512]+48 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 48 [0x30]))) [0 MEM[(void *)&IV512]+48 S8 A128])
        (nil)))
(insn:TI 114 113 115 10 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 184 [0xb8])) [0 MEM[(void *)state_18(D) + 136B]+48 S8 A8])
        (reg:DI 2 cx [orig:147 MEM[(void *)&IV512]+48 ] [147])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:147 MEM[(void *)&IV512]+48 ] [147])
        (nil)))
(insn 115 114 116 10 (set (reg:DI 2 cx [orig:148 MEM[(void *)&IV512]+56 ] [148])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 56 [0x38]))) [0 MEM[(void *)&IV512]+56 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 56 [0x38]))) [0 MEM[(void *)&IV512]+56 S8 A64])
        (nil)))
(insn:TI 116 115 117 10 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 192 [0xc0])) [0 MEM[(void *)state_18(D) + 136B]+56 S8 A8])
        (reg:DI 2 cx [orig:148 MEM[(void *)&IV512]+56 ] [148])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:148 MEM[(void *)&IV512]+56 ] [148])
        (nil)))
;;  succ:       11 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

;; basic block 11, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              13 [100.0%]  (CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 2 [cx] 5 [di] 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 2 [cx] 5 [di]
;; live  kill	 17 [flags]
(code_label 117 116 118 11 77 "" [1 uses])
(note 118 117 121 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(note 121 118 128 11 NOTE_INSN_DELETED)
(note 128 121 134 11 NOTE_INSN_DELETED)
(note 134 128 174 11 NOTE_INSN_DELETED)
(insn:TI 174 134 172 11 (set (reg/f:DI 5 di [156])
        (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
            (const_int 224 [0xe0]))) 214 {*leadi}
     (nil))
(insn 172 174 119 11 (set (reg/f:SI 0 ax [orig:150 D.5936 ] [150])
        (reg:SI 37 r8 [orig:100 state ] [100])) 90 {*movsi_internal}
     (nil))
(insn 119 172 120 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 200 [0xc8])) [3 state_18(D)->t64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:235 89 {*movdi_internal}
     (nil))
(insn:TI 120 119 125 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 208 [0xd0])) [3 state_18(D)->t64+8 S8 A64])
        (const_int 0 [0])) blake_ref.c:236 89 {*movdi_internal}
     (nil))
(insn 125 120 131 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 216 [0xd8])) [0  S8 A8])
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn:TI 131 125 129 11 (parallel [
            (set (reg/f:DI 5 di [156])
                (and:DI (reg/f:DI 5 di [156])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 129 131 132 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 272 [0x110])) [0  S8 A8])
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn:TI 132 129 133 11 (parallel [
            (set (reg/f:SI 0 ax [orig:150 D.5936 ] [150])
                (minus:SI (reg/f:SI 0 ax [orig:150 D.5936 ] [150])
                    (reg:SI 5 di [156])))
            (clobber (reg:CC 17 flags))
        ]) 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 133 132 197 11 (set (reg:SI 2 cx [151])
        (plus:SI (reg/f:SI 0 ax [orig:150 D.5936 ] [150])
            (const_int 280 [0x118]))) 213 {*leasi}
     (expr_list:REG_DEAD (reg/f:SI 0 ax [orig:150 D.5936 ] [150])
        (nil)))
(insn 197 133 135 11 (parallel [
            (set (reg:DI 0 ax [152])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 135 197 137 11 (parallel [
            (set (reg:DI 2 cx)
                (zero_extend:DI (lshiftrt:SI (reg:SI 2 cx [151])
                        (const_int 3 [0x3]))))
            (clobber (reg:CC 17 flags))
        ]) 550 {*lshrsi3_1_zext}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 137 135 138 11 (parallel [
            (set (reg:DI 2 cx [158])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [156])
                (plus:DI (ashift:DI (reg:DI 2 cx [158])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [156])))
            (set (mem:BLK (reg/f:DI 5 di [156]) [0  A64])
                (const_int 0 [0]))
            (use (reg:DI 0 ax [152]))
            (use (reg:DI 2 cx [158]))
        ]) 933 {*rep_stosdi_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [152])
        (expr_list:REG_UNUSED (reg/f:DI 5 di [156])
            (expr_list:REG_UNUSED (reg:DI 2 cx [158])
                (nil)))))
(insn:TI 138 137 139 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 344 [0x158])) [3 state_18(D)->salt64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:241 89 {*movdi_internal}
     (nil))
(insn 139 138 140 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 352 [0x160])) [3 state_18(D)->salt64+8 S8 A64])
        (const_int 0 [0])) blake_ref.c:242 89 {*movdi_internal}
     (nil))
(insn:TI 140 139 141 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 360 [0x168])) [3 state_18(D)->salt64+16 S8 A64])
        (const_int 0 [0])) blake_ref.c:243 89 {*movdi_internal}
     (nil))
(insn 141 140 203 11 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 368 [0x170])) [3 state_18(D)->salt64+24 S8 A64])
        (const_int 0 [0])) blake_ref.c:244 89 {*movdi_internal}
     (nil))
(jump_insn 203 141 204 11 (set (pc)
        (label_ref 142)) 654 {jump}
     (nil)
 -> 142)
;;  succ:       6 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

(barrier 204 203 201)
;; basic block 12, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [28.0%]  (CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 2 [cx]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 2 [cx]
;; live  kill	
(code_label 201 204 17 12 79 "" [1 uses])
(note 17 201 20 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn:TI 20 17 21 12 (set (reg:DI 2 cx [orig:106 MEM[(void *)&IV224] ] [106])
        (mem/u/c:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>) [0 MEM[(void *)&IV224]+0 S8 A256])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>) [0 MEM[(void *)&IV224]+0 S8 A256])
        (nil)))
(insn:TI 21 20 22 12 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+0 S8 A8])
        (reg:DI 2 cx [orig:106 MEM[(void *)&IV224] ] [106])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:106 MEM[(void *)&IV224] ] [106])
        (nil)))
(insn 22 21 23 12 (set (reg:DI 2 cx [orig:107 MEM[(void *)&IV224]+8 ] [107])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV224]+8 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV224]+8 S8 A64])
        (nil)))
(insn:TI 23 22 24 12 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 16B]+8 S8 A8])
        (reg:DI 2 cx [orig:107 MEM[(void *)&IV224]+8 ] [107])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:107 MEM[(void *)&IV224]+8 ] [107])
        (nil)))
(insn 24 23 25 12 (set (reg:DI 2 cx [orig:108 MEM[(void *)&IV224]+16 ] [108])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV224]+16 S8 A128])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV224]+16 S8 A128])
        (nil)))
(insn:TI 25 24 26 12 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 32 [0x20])) [0 MEM[(void *)state_18(D) + 16B]+16 S8 A8])
        (reg:DI 2 cx [orig:108 MEM[(void *)&IV224]+16 ] [108])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:108 MEM[(void *)&IV224]+16 ] [108])
        (nil)))
(insn 26 25 27 12 (set (reg:DI 2 cx [orig:109 MEM[(void *)&IV224]+24 ] [109])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV224]+24 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV224]+24 S8 A64])
        (nil)))
(insn:TI 27 26 205 12 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 40 [0x28])) [0 MEM[(void *)state_18(D) + 16B]+24 S8 A8])
        (reg:DI 2 cx [orig:109 MEM[(void *)&IV224]+24 ] [109])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:109 MEM[(void *)&IV224]+24 ] [109])
        (nil)))
(jump_insn 205 27 206 12 (set (pc)
        (label_ref 42)) 654 {jump}
     (nil)
 -> 42)
;;  succ:       5 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

(barrier 206 205 202)
;; basic block 13, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 12, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [28.0%]  (CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 2 [cx]
;; live  in  	 1 [dx] 7 [sp] 37 [r8]
;; live  gen 	 2 [cx]
;; live  kill	
(code_label 202 206 76 13 80 "" [1 uses])
(note 76 202 79 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 79 76 80 13 (set (reg:DI 2 cx [orig:131 MEM[(void *)&IV384] ] [131])
        (mem/u/c:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>) [0 MEM[(void *)&IV384]+0 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>) [0 MEM[(void *)&IV384]+0 S8 A256])
        (nil)))
(insn:TI 80 79 81 13 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 136 [0x88])) [0 MEM[(void *)state_18(D) + 136B]+0 S8 A8])
        (reg:DI 2 cx [orig:131 MEM[(void *)&IV384] ] [131])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:131 MEM[(void *)&IV384] ] [131])
        (nil)))
(insn 81 80 82 13 (set (reg:DI 2 cx [orig:132 MEM[(void *)&IV384]+8 ] [132])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV384]+8 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV384]+8 S8 A64])
        (nil)))
(insn:TI 82 81 83 13 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 144 [0x90])) [0 MEM[(void *)state_18(D) + 136B]+8 S8 A8])
        (reg:DI 2 cx [orig:132 MEM[(void *)&IV384]+8 ] [132])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:132 MEM[(void *)&IV384]+8 ] [132])
        (nil)))
(insn 83 82 84 13 (set (reg:DI 2 cx [orig:133 MEM[(void *)&IV384]+16 ] [133])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV384]+16 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV384]+16 S8 A128])
        (nil)))
(insn:TI 84 83 85 13 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 152 [0x98])) [0 MEM[(void *)state_18(D) + 136B]+16 S8 A8])
        (reg:DI 2 cx [orig:133 MEM[(void *)&IV384]+16 ] [133])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:133 MEM[(void *)&IV384]+16 ] [133])
        (nil)))
(insn 85 84 86 13 (set (reg:DI 2 cx [orig:134 MEM[(void *)&IV384]+24 ] [134])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV384]+24 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV384]+24 S8 A64])
        (nil)))
(insn:TI 86 85 87 13 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 160 [0xa0])) [0 MEM[(void *)state_18(D) + 136B]+24 S8 A8])
        (reg:DI 2 cx [orig:134 MEM[(void *)&IV384]+24 ] [134])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:134 MEM[(void *)&IV384]+24 ] [134])
        (nil)))
(insn 87 86 88 13 (set (reg:DI 2 cx [orig:135 MEM[(void *)&IV384]+32 ] [135])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 32 [0x20]))) [0 MEM[(void *)&IV384]+32 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 32 [0x20]))) [0 MEM[(void *)&IV384]+32 S8 A256])
        (nil)))
(insn:TI 88 87 89 13 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 168 [0xa8])) [0 MEM[(void *)state_18(D) + 136B]+32 S8 A8])
        (reg:DI 2 cx [orig:135 MEM[(void *)&IV384]+32 ] [135])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:135 MEM[(void *)&IV384]+32 ] [135])
        (nil)))
(insn 89 88 90 13 (set (reg:DI 2 cx [orig:136 MEM[(void *)&IV384]+40 ] [136])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 40 [0x28]))) [0 MEM[(void *)&IV384]+40 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 40 [0x28]))) [0 MEM[(void *)&IV384]+40 S8 A64])
        (nil)))
(insn:TI 90 89 91 13 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 176 [0xb0])) [0 MEM[(void *)state_18(D) + 136B]+40 S8 A8])
        (reg:DI 2 cx [orig:136 MEM[(void *)&IV384]+40 ] [136])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:136 MEM[(void *)&IV384]+40 ] [136])
        (nil)))
(insn 91 90 92 13 (set (reg:DI 2 cx [orig:137 MEM[(void *)&IV384]+48 ] [137])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 48 [0x30]))) [0 MEM[(void *)&IV384]+48 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 48 [0x30]))) [0 MEM[(void *)&IV384]+48 S8 A128])
        (nil)))
(insn:TI 92 91 93 13 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 184 [0xb8])) [0 MEM[(void *)state_18(D) + 136B]+48 S8 A8])
        (reg:DI 2 cx [orig:137 MEM[(void *)&IV384]+48 ] [137])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:137 MEM[(void *)&IV384]+48 ] [137])
        (nil)))
(insn 93 92 94 13 (set (reg:DI 2 cx [orig:138 MEM[(void *)&IV384]+56 ] [138])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 56 [0x38]))) [0 MEM[(void *)&IV384]+56 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 56 [0x38]))) [0 MEM[(void *)&IV384]+56 S8 A64])
        (nil)))
(insn:TI 94 93 207 13 (set (mem:DI (plus:DI (reg/v/f:DI 37 r8 [orig:100 state ] [100])
                (const_int 192 [0xc0])) [0 MEM[(void *)state_18(D) + 136B]+56 S8 A8])
        (reg:DI 2 cx [orig:138 MEM[(void *)&IV384]+56 ] [138])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:138 MEM[(void *)&IV384]+56 ] [138])
        (nil)))
(jump_insn 207 94 208 13 (set (pc)
        (label_ref 117)) 654 {jump}
     (nil)
 -> 117)
;;  succ:       11 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 7 [sp] 37 [r8]

(barrier 208 207 169)
(note 169 208 0 NOTE_INSN_DELETED)

;; Function AddSalt (AddSalt, funcdef_no=14, decl_uid=3185, cgraph_uid=14, symbol_order=22)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)


AddSalt

Dataflow summary:
def_info->table_size = 30, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 7[sp] 17[flags]
;;  ref usage 	r0={19d,20u} r1={1d,8u,12e} r2={1d,10u,8e} r7={1d,7u} r17={4d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r37={1d} r38={1d} 
;;    total ref usage 99{32d,47u,20e} in 38{38 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d19(1){ }d20(2){ }d21(7){ }d24(21){ }d25(22){ }d26(23){ }d27(24){ }d28(37){ }d29(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 7 [sp]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]

( 2 )->[3]->( 1 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 2 )->[4]->( 6 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 7 [sp]

( 4 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 4 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 3 6 5 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 11 to worklist
  Adding insn 60 to worklist
  Adding insn 65 to worklist
  Adding insn 51 to worklist
  Adding insn 14 to worklist
  Adding insn 70 to worklist
  Adding insn 69 to worklist
  Adding insn 43 to worklist
  Adding insn 40 to worklist
  Adding insn 37 to worklist
  Adding insn 34 to worklist
  Adding insn 63 to worklist
  Adding insn 62 to worklist
  Adding insn 27 to worklist
  Adding insn 24 to worklist
  Adding insn 21 to worklist
  Adding insn 18 to worklist
Finished finding needed instructions:
processing block 3 lr out =  0 [ax] 7 [sp]
processing block 6 lr out =  0 [ax] 7 [sp]
  Adding insn 67 to worklist
  Adding insn 26 to worklist
  Adding insn 25 to worklist
  Adding insn 23 to worklist
  Adding insn 22 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 17 to worklist
  Adding insn 16 to worklist
processing block 5 lr out =  0 [ax] 7 [sp]
  Adding insn 66 to worklist
  Adding insn 42 to worklist
  Adding insn 41 to worklist
  Adding insn 39 to worklist
  Adding insn 38 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 33 to worklist
  Adding insn 32 to worklist
processing block 4 lr out =  1 [dx] 2 [cx] 7 [sp]
  Adding insn 13 to worklist
processing block 2 lr out =  0 [ax] 1 [dx] 2 [cx] 7 [sp]
  Adding insn 10 to worklist
  Adding insn 5 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)
;;   ======================================================
;;   -- basic block 2 from 60 to 11 -- after reload
;;   ======================================================

;;	  0--> b  0: i  60 unspec/v[sp] 4                          :athlon-vector,athlon-ieu,athlon-ieu
;;	  1--> b  0: i  10 flags=cmp([cx+0x8],0x1)                 :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i   5 ax=0x1                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i  11 pc={(flags==0)?L74:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 60
;;   new tail = 11

;;   ======================================================
;;   -- basic block 3 from 51 to 65 -- after reload
;;   ======================================================

;;	  0--> b  0: i  51 use ax                                  :nothing
;;	  0--> b  0: i  65 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 51
;;   new tail = 65

;;   ======================================================
;;   -- basic block 4 from 13 to 14 -- after reload
;;   ======================================================

;;	  0--> b  0: i  13 flags=cmp([cx],0x17f)                   :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i  14 pc={(flags<=0)?L75:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 13
;;   new tail = 14

;;   ======================================================
;;   -- basic block 5 from 32 to 70 -- after reload
;;   ======================================================

;;	  0--> b  0: i  32 ax=[dx]                                 :athlon-direct,athlon-load
;;	  3--> b  0: i  33 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	  4--> b  0: i  34 [cx+0x158]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  35 ax=[dx+0x8]                             :athlon-direct,athlon-load
;;	  7--> b  0: i  36 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	  8--> b  0: i  37 [cx+0x160]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i  38 ax=[dx+0x10]                            :athlon-direct,athlon-load
;;	 11--> b  0: i  39 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 12--> b  0: i  40 [cx+0x168]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i  41 ax=[dx+0x18]                            :athlon-direct,athlon-load
;;	 15--> b  0: i  42 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 16--> b  0: i  43 [cx+0x170]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  66 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 16--> b  0: i  69 use ax                                  :nothing
;;	 17--> b  0: i  70 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 17
;;   new head = 32
;;   new tail = 70

;;   ======================================================
;;   -- basic block 6 from 16 to 63 -- after reload
;;   ======================================================

;;	  0--> b  0: i  16 ax=[dx]                                 :athlon-direct,athlon-load
;;	  3--> b  0: i  17 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	  4--> b  0: i  18 [cx+0x78]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  19 ax=[dx+0x4]                             :athlon-direct,athlon-load
;;	  7--> b  0: i  20 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	  8--> b  0: i  21 [cx+0x7c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i  22 ax=[dx+0x8]                             :athlon-direct,athlon-load
;;	 11--> b  0: i  23 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 12--> b  0: i  24 [cx+0x80]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i  25 ax=[dx+0xc]                             :athlon-direct,athlon-load
;;	 15--> b  0: i  26 ax=bswap(ax)                            :athlon-direct,athlon-ieu
;;	 16--> b  0: i  27 [cx+0x84]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  67 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 16--> b  0: i  62 use ax                                  :nothing
;;	 17--> b  0: i  63 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 17
;;   new head = 16
;;   new tail = 63



starting the processing of deferred insns
ending the processing of deferred insns


AddSalt

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 7[sp] 17[flags]
;;  ref usage 	r0={19d,20u} r1={1d,8u,12e} r2={1d,10u,8e} r7={1d,7u} r17={4d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r37={1d} r38={1d} 
;;    total ref usage 99{32d,47u,20e} in 38{38 regular + 0 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 8 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 8 60 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 60 4 61 2 (unspec_volatile [
            (reg/f:DI 7 sp)
        ] UNSPECV_PROLOGUE_USE) blake_ref.c:261 679 {prologue_use}
     (nil))
(note 61 60 10 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 10 61 5 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                    (const_int 8 [0x8])) [2 state_4(D)->init+0 S4 A64])
            (const_int 1 [0x1]))) blake_ref.c:268 7 {*cmpsi_1}
     (nil))
(insn 5 10 11 2 (set (reg:SI 0 ax [orig:87 D.5941 ] [87])
        (const_int 1 [0x1])) blake_ref.c:269 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(jump_insn:TI 11 5 45 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 74)
            (pc))) blake_ref.c:268 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3782 (nil)))
 -> 74)
;;  succ:       3 [62.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [37.8%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7693, maybe hot
;; Invalid sum of incoming frequencies 6218, should be 7693
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       2 [62.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
(note 45 11 51 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 51 45 65 3 (use (reg/i:SI 0 ax)) blake_ref.c:285 -1
     (nil))
(jump_insn:TI 65 51 64 3 (simple_return) blake_ref.c:285 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 64 65 74)
;; basic block 4, loop depth 0, count 0, freq 3782, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [37.8%]  (CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 74 64 12 4 85 "" [1 uses])
(note 12 74 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 13 12 14 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 2 cx [orig:143 state ] [143]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:271 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 14 13 31 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 75)
            (pc))) blake_ref.c:271 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 3900 (nil)))
 -> 75)
;;  succ:       6 [39.0%]  (CAN_FALLTHRU)
;;              5 [61.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 2307, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [61.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(note 31 14 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 32 31 33 5 (set (reg:DI 0 ax [orig:149 MEM[(const BitSequence *)salt_7(D)] ] [149])
        (mem:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8])
        (nil)))
(insn:TI 33 32 34 5 (set (reg:DI 0 ax [orig:94 D.5944 ] [94])
        (bswap:DI (reg:DI 0 ax [orig:149 MEM[(const BitSequence *)salt_7(D)] ] [149]))) 766 {*bswapdi2}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 344 [0x158])) [3 state_4(D)->salt64+0 S8 A64])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8]))
            (nil))))
(insn:TI 34 33 35 5 (set (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 344 [0x158])) [3 state_4(D)->salt64+0 S8 A64])
        (reg:DI 0 ax [orig:94 D.5944 ] [94])) blake_ref.c:278 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:94 D.5944 ] [94])
        (nil)))
(insn 35 34 36 5 (set (reg:DI 0 ax [orig:150 MEM[(const BitSequence *)salt_7(D) + 8B] ] [150])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8])
        (nil)))
(insn:TI 36 35 37 5 (set (reg:DI 0 ax [orig:95 D.5944 ] [95])
        (bswap:DI (reg:DI 0 ax [orig:150 MEM[(const BitSequence *)salt_7(D) + 8B] ] [150]))) 766 {*bswapdi2}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 352 [0x160])) [3 state_4(D)->salt64+8 S8 A64])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                        (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8]))
            (nil))))
(insn:TI 37 36 38 5 (set (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 352 [0x160])) [3 state_4(D)->salt64+8 S8 A64])
        (reg:DI 0 ax [orig:95 D.5944 ] [95])) blake_ref.c:279 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:95 D.5944 ] [95])
        (nil)))
(insn 38 37 39 5 (set (reg:DI 0 ax [orig:151 MEM[(const BitSequence *)salt_7(D) + 16B] ] [151])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8])
        (nil)))
(insn:TI 39 38 40 5 (set (reg:DI 0 ax [orig:96 D.5944 ] [96])
        (bswap:DI (reg:DI 0 ax [orig:151 MEM[(const BitSequence *)salt_7(D) + 16B] ] [151]))) 766 {*bswapdi2}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 360 [0x168])) [3 state_4(D)->salt64+16 S8 A64])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                        (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8]))
            (nil))))
(insn:TI 40 39 41 5 (set (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 360 [0x168])) [3 state_4(D)->salt64+16 S8 A64])
        (reg:DI 0 ax [orig:96 D.5944 ] [96])) blake_ref.c:280 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:96 D.5944 ] [96])
        (nil)))
(insn 41 40 42 5 (set (reg:DI 0 ax [orig:152 MEM[(const BitSequence *)salt_7(D) + 24B] ] [152])
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)salt_7(D) + 24B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 1 dx [orig:144 salt ] [144])
        (nil)))
(insn:TI 42 41 43 5 (set (reg:DI 0 ax [orig:97 D.5944 ] [97])
        (bswap:DI (reg:DI 0 ax [orig:152 MEM[(const BitSequence *)salt_7(D) + 24B] ] [152]))) 766 {*bswapdi2}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 368 [0x170])) [3 state_4(D)->salt64+24 S8 A64])
        (nil)))
(insn:TI 43 42 66 5 (set (mem:DI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 368 [0x170])) [3 state_4(D)->salt64+24 S8 A64])
        (reg:DI 0 ax [orig:97 D.5944 ] [97])) blake_ref.c:281 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 2 cx [orig:143 state ] [143])
        (expr_list:REG_DEAD (reg:DI 0 ax [orig:97 D.5944 ] [97])
            (nil))))
(insn 66 43 69 5 (parallel [
            (set (reg:DI 0 ax [orig:87 D.5941 ] [87])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:284 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 69 66 70 5 (use (reg/i:SI 0 ax)) blake_ref.c:285 -1
     (nil))
(jump_insn:TI 70 69 73 5 (simple_return) blake_ref.c:285 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 73 70 75)
;; basic block 6, loop depth 0, count 0, freq 1475, maybe hot
;;  prev block 5, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [39.0%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 75 73 15 6 86 "" [1 uses])
(note 15 75 16 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 16 15 17 6 (set (reg:SI 0 ax [orig:145 MEM[(const BitSequence *)salt_7(D)] ] [145])
        (mem:SI (reg/v/f:DI 1 dx [orig:144 salt ] [144]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:DI 1 dx [orig:144 salt ] [144]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8])
        (nil)))
(insn:TI 17 16 18 6 (set (reg:SI 0 ax [orig:90 D.5943 ] [90])
        (bswap:SI (reg:SI 0 ax [orig:145 MEM[(const BitSequence *)salt_7(D)] ] [145]))) 765 {*bswapsi2}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 120 [0x78])) [2 state_4(D)->salt32+0 S4 A64])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/v/f:DI 1 dx [orig:144 salt ] [144]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8]))
            (nil))))
(insn:TI 18 17 19 6 (set (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 120 [0x78])) [2 state_4(D)->salt32+0 S4 A64])
        (reg:SI 0 ax [orig:90 D.5943 ] [90])) blake_ref.c:272 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:90 D.5943 ] [90])
        (nil)))
(insn 19 18 20 6 (set (reg:SI 0 ax [orig:146 MEM[(const BitSequence *)salt_7(D) + 4B] ] [146])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8])
        (nil)))
(insn:TI 20 19 21 6 (set (reg:SI 0 ax [orig:91 D.5943 ] [91])
        (bswap:SI (reg:SI 0 ax [orig:146 MEM[(const BitSequence *)salt_7(D) + 4B] ] [146]))) 765 {*bswapsi2}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 124 [0x7c])) [2 state_4(D)->salt32+4 S4 A32])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                        (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8]))
            (nil))))
(insn:TI 21 20 22 6 (set (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 124 [0x7c])) [2 state_4(D)->salt32+4 S4 A32])
        (reg:SI 0 ax [orig:91 D.5943 ] [91])) blake_ref.c:273 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:91 D.5943 ] [91])
        (nil)))
(insn 22 21 23 6 (set (reg:SI 0 ax [orig:147 MEM[(const BitSequence *)salt_7(D) + 8B] ] [147])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8])
        (nil)))
(insn:TI 23 22 24 6 (set (reg:SI 0 ax [orig:92 D.5943 ] [92])
        (bswap:SI (reg:SI 0 ax [orig:147 MEM[(const BitSequence *)salt_7(D) + 8B] ] [147]))) 765 {*bswapsi2}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 128 [0x80])) [2 state_4(D)->salt32+8 S4 A64])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                        (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8]))
            (nil))))
(insn:TI 24 23 25 6 (set (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 128 [0x80])) [2 state_4(D)->salt32+8 S4 A64])
        (reg:SI 0 ax [orig:92 D.5943 ] [92])) blake_ref.c:274 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:92 D.5943 ] [92])
        (nil)))
(insn 25 24 26 6 (set (reg:SI 0 ax [orig:148 MEM[(const BitSequence *)salt_7(D) + 12B] ] [148])
        (mem:SI (plus:DI (reg/v/f:DI 1 dx [orig:144 salt ] [144])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)salt_7(D) + 12B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 1 dx [orig:144 salt ] [144])
        (nil)))
(insn:TI 26 25 27 6 (set (reg:SI 0 ax [orig:93 D.5943 ] [93])
        (bswap:SI (reg:SI 0 ax [orig:148 MEM[(const BitSequence *)salt_7(D) + 12B] ] [148]))) 765 {*bswapsi2}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 132 [0x84])) [2 state_4(D)->salt32+12 S4 A32])
        (nil)))
(insn:TI 27 26 67 6 (set (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:143 state ] [143])
                (const_int 132 [0x84])) [2 state_4(D)->salt32+12 S4 A32])
        (reg:SI 0 ax [orig:93 D.5943 ] [93])) blake_ref.c:275 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 2 cx [orig:143 state ] [143])
        (expr_list:REG_DEAD (reg:SI 0 ax [orig:93 D.5943 ] [93])
            (nil))))
(insn 67 27 62 6 (parallel [
            (set (reg:DI 0 ax [orig:87 D.5941 ] [87])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:284 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 62 67 63 6 (use (reg/i:SI 0 ax)) -1
     (nil))
(jump_insn:TI 63 62 58 6 (simple_return) 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 58 63 59)
(note 59 58 0 NOTE_INSN_DELETED)

;; Function Update (Update, funcdef_no=17, decl_uid=3189, cgraph_uid=17, symbol_order=25)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 14 count 10 (    1)


Update

Dataflow summary:
def_info->table_size = 135, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={3d,5u} r7={5d,20u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={14d,5u} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={2d} r26={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d,4u} r38={3d} r39={2d} r40={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 188{148d,40u,0e} in 29{27 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d5(1){ }d8(2){ }d9(7){ }d39(21){ }d42(22){ }d45(23){ }d48(24){ }d71(37){ }d74(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

( 0 )->[2]->( 3 6 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 7 [sp] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

( 2 )->[3]->( 4 9 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

( 3 )->[4]->( 5 9 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

( 7 4 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 7 [sp] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 2 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

( 6 )->[7]->( 5 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

( 7 6 )->[8]->( 1 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 7 [sp]

( 4 3 )->[9]->( 1 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 7 [sp]

( 5 8 9 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 9 to worklist
  Adding insn 50 to worklist
  Adding insn 12 to worklist
  Adding insn 15 to worklist
  Adding insn 55 to worklist
  Adding insn 53 to worklist
  Adding insn 44 to worklist
  Adding insn 27 to worklist
  Adding insn 30 to worklist
  Adding insn 66 to worklist
  Adding insn 64 to worklist
  Adding insn 62 to worklist
  Adding insn 36 to worklist
  Adding insn 76 to worklist
  Adding insn 74 to worklist
  Adding insn 72 to worklist
  Adding insn 21 to worklist
Finished finding needed instructions:
processing block 5 lr out =  0 [ax] 7 [sp]
  Adding insn 54 to worklist
  Adding insn 59 to worklist
processing block 9 lr out =  0 [ax] 7 [sp]
  Adding insn 75 to worklist
  Adding insn 71 to worklist
processing block 4 lr out =  1 [dx] 2 [cx] 7 [sp] 37 [r8]
  Adding insn 14 to worklist
processing block 3 lr out =  1 [dx] 2 [cx] 7 [sp] 37 [r8]
  Adding insn 11 to worklist
processing block 8 lr out =  0 [ax] 7 [sp]
  Adding insn 65 to worklist
  Adding insn 61 to worklist
processing block 7 lr out =  1 [dx] 2 [cx] 7 [sp] 37 [r8]
  Adding insn 29 to worklist
processing block 6 lr out =  1 [dx] 2 [cx] 7 [sp] 37 [r8]
  Adding insn 26 to worklist
processing block 2 lr out =  1 [dx] 2 [cx] 7 [sp] 37 [r8]
  Adding insn 8 to worklist
  Adding insn 49 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 14 count 10 (    1)
;;   ======================================================
;;   -- basic block 2 from 49 to 9 -- after reload
;;   ======================================================

;;	  0--> b  0: i  49 {sp=sp-0x28;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  1--> b  0: i  50 unspec/v[sp] 4                          :athlon-vector,athlon-ieu,athlon-ieu
;;	  2--> b  0: i   8 flags=cmp([cx],0x17f)                   :athlon-direct,athlon-load,athlon-ieu
;;	  6--> b  0: i   9 pc={(flags>0)?L24:pc}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 49
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 11 to 12 -- after reload
;;   ======================================================

;;	  0--> b  0: i  11 flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  12 pc={(flags!=0)?L16:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 11
;;   new tail = 12

;;   ======================================================
;;   -- basic block 4 from 14 to 15 -- after reload
;;   ======================================================

;;	  0--> b  0: i  14 flags=cmp([cx+0x4],0x200)               :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i  15 pc={(flags==0)?L16:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 14
;;   new tail = 15

;;   ======================================================
;;   -- basic block 5 from 59 to 55 -- after reload
;;   ======================================================

;;	  0--> b  0: i  59 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  44 use ax                                  :nothing
;;	  1--> b  0: i  53 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	  3--> b  0: i  54 {sp=sp+0x28;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  4--> b  0: i  55 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 59
;;   new tail = 55

;;   ======================================================
;;   -- basic block 6 from 26 to 27 -- after reload
;;   ======================================================

;;	  0--> b  0: i  26 flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  27 pc={(flags!=0)?L31:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 26
;;   new tail = 27

;;   ======================================================
;;   -- basic block 7 from 29 to 30 -- after reload
;;   ======================================================

;;	  0--> b  0: i  29 flags=cmp([cx+0x4],0x400)               :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i  30 pc={(flags!=0)?L37:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 29
;;   new tail = 30

;;   ======================================================
;;   -- basic block 8 from 36 to 66 -- after reload
;;   ======================================================

;;	  0--> b  0: i  36 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  1--> b  0: i  61 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  62 use ax                                  :nothing
;;	  2--> b  0: i  64 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	  4--> b  0: i  65 {sp=sp+0x28;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  5--> b  0: i  66 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 36
;;   new tail = 66

;;   ======================================================
;;   -- basic block 9 from 21 to 76 -- after reload
;;   ======================================================

;;	  0--> b  0: i  21 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  1--> b  0: i  71 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  72 use ax                                  :nothing
;;	  2--> b  0: i  74 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	  4--> b  0: i  75 {sp=sp+0x28;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  5--> b  0: i  76 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 21
;;   new tail = 76



starting the processing of deferred insns
ending the processing of deferred insns


Update

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={3d,5u} r7={5d,20u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={14d,5u} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={2d} r26={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d,4u} r38={3d} r39={2d} r40={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 188{148d,40u,0e} in 29{27 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 7 [sp] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 49 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 49 5 50 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -40 [0xffffffffffffffd8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:397 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -40 [0xffffffffffffffd8])))
            (nil))))
(insn:TI 50 49 51 2 (unspec_volatile [
            (reg/f:DI 7 sp)
        ] UNSPECV_PROLOGUE_USE) blake_ref.c:397 679 {prologue_use}
     (nil))
(note 51 50 8 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 8 51 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 2 cx [orig:91 state ] [91]) [2 state_2(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 9 8 10 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 24)
;;  succ:       3 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              6 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

;; basic block 3, loop depth 0, count 0, freq 5000, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 37 r8 [orig:93 databitlen ] [93])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 12 11 13 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2071 (nil)))
 -> 16)
;;  succ:       4 [79.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              9 [20.7%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

;; basic block 4, loop depth 0, count 0, freq 3964, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [79.3%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 14 13 15 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:91 state ] [91])
                    (const_int 4 [0x4])) [2 state_2(D)->datalen+0 S4 A32])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 15 14 37 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 16)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 16)
;;  succ:       5 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              9 [28.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

;; basic block 5, loop depth 0, count 0, freq 5061, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [62.2%]  (CAN_FALLTHRU)
;;              4 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 7 [sp] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 7 [sp]
;; live  kill	 17 [flags]
(code_label 37 15 38 5 90 "" [1 uses])
(note 38 37 59 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 59 38 44 5 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:403 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 44 59 80 5 (use (reg/i:SI 0 ax)) blake_ref.c:403 -1
     (nil))
(note 80 44 53 5 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 53 80 54 5 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:403 677 {blockage}
     (nil))
(insn/f:TI 54 53 55 5 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:403 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 40 [0x28])))
            (nil))))
(jump_insn:TI 55 54 56 5 (simple_return) blake_ref.c:403 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 56 55 24)
;; basic block 6, loop depth 0, count 0, freq 5000, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 24 56 25 6 88 "" [1 uses])
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 26 25 27 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 37 r8 [orig:93 databitlen ] [93])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 27 26 28 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 31)
;;  succ:       7 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [29.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

;; basic block 7, loop depth 0, count 0, freq 3550, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 29 28 30 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 2 cx [orig:91 state ] [91])
                    (const_int 4 [0x4])) [2 state_2(D)->datalen+0 S4 A32])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 30 29 31 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6218 (nil)))
 -> 37)
;;  succ:       5 [62.2%]  (CAN_FALLTHRU)
;;              8 [37.8%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]

;; basic block 8, loop depth 0, count 0, freq 2793, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [37.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              6 [29.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 7 [sp]
;; live  kill	 17 [flags]
(code_label 31 30 32 8 91 "" [1 uses])
(note 32 31 36 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 36 32 61 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 61 36 62 8 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:403 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 62 61 81 8 (use (reg/i:SI 0 ax)) blake_ref.c:403 -1
     (nil))
(note 81 62 64 8 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 64 81 65 8 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:403 677 {blockage}
     (nil))
(insn/f:TI 65 64 66 8 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:403 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 40 [0x28])))
            (nil))))
(jump_insn:TI 66 65 69 8 (simple_return) blake_ref.c:403 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 69 66 16)
;; basic block 9, loop depth 0, count 0, freq 2146, maybe hot
;;  prev block 8, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [28.0%]  (CAN_FALLTHRU)
;;              3 [20.7%]  (CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 7 [sp]
;; live  kill	 17 [flags]
(code_label 16 69 17 9 89 "" [2 uses])
(note 17 16 21 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 21 17 71 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 71 21 72 9 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:403 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 72 71 82 9 (use (reg/i:SI 0 ax)) blake_ref.c:403 -1
     (nil))
(note 82 72 74 9 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 74 82 75 9 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:403 677 {blockage}
     (nil))
(insn/f:TI 75 74 76 9 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:403 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 40 [0x28])))
            (nil))))
(jump_insn:TI 76 75 79 9 (simple_return) blake_ref.c:403 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 79 76 48)
(note 48 79 0 NOTE_INSN_DELETED)

;; Function Final (Final, funcdef_no=20, decl_uid=3192, cgraph_uid=20, symbol_order=28)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 84 n_edges 123 count 84 (    1)


Final

Dataflow summary:
def_info->table_size = 2550, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11]
;;  ref usage 	r0={189d,184u,5e} r1={79d,81u} r2={93d,85u,1e} r3={4d,201u,39e} r4={4d,98u} r5={9d,8u} r6={9d,9u,1e} r7={16d,174u} r8={29d} r9={29d} r10={29d} r11={29d} r12={29d} r13={29d} r14={29d} r15={29d} r16={2e} r17={193d,44u} r18={29d} r19={29d} r21={30d} r22={30d} r23={30d} r24={30d} r25={28d} r26={28d} r29={28d} r30={28d} r31={28d} r32={28d} r33={28d} r34={28d} r35={28d} r36={28d} r37={97d,89u} r38={49d,24u} r39={34d,7u} r40={41d,15u,4e} r53={29d} r54={29d} r55={29d} r56={29d} r57={29d} r58={29d} r59={29d} r60={29d} r61={29d} r62={29d} r63={29d} r64={29d} r65={29d} r66={29d} r67={29d} r68={29d} r69={29d} r70={29d} r71={29d} r72={29d} r73={29d} r74={29d} r75={29d} r76={29d} r77={29d} r78={29d} r79={29d} r80={29d} 
;;    total ref usage 3390{2319d,1019u,52e} in 712{683 regular + 29 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

( 0 )->[2]->( 25 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 3 [bx] 4 [si] 7 [sp] 17 [flags] 39 [r10]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 4 [si] 7 [sp] 17 [flags] 39 [r10]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

( 2 )->[3]->( 4 15 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

( 3 )->[4]->( 55 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

( 4 )->[5]->( 44 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

( 5 )->[6]->( 70 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 6 )->[7]->( 8 70 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 7 70 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 8 46 )->[9]->( 67 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

( 9 )->[10]->( 11 57 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 57 11 67 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

( 12 56 83 )->[13]->( 14 43 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 13 )->[14]->( 22 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	

( 3 )->[15]->( 40 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]

( 15 )->[16]->( 17 58 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

( 16 )->[17]->( 76 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]

( 17 )->[18]->( 19 76 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]

( 63 18 76 )->[19]->( 20 21 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 39 [r10]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]

( 19 )->[20]->( 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 1 [dx]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]

( 20 19 )->[21]->( 22 43 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 21 14 )->[22]->( 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 22 43 )->[23]->( 24 32 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 23 )->[24]->( 1 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 7 [sp]

( 2 )->[25]->( 33 26 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]

( 25 )->[26]->( 27 47 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 37 [r8] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  gen 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 37 [r8] 40 [r11]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

( 26 )->[27]->( 29 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]

( 27 )->[28]->( 29 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
;; live  gen 	 2 [cx]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]
;; live  out 	 3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]

( 27 28 )->[29]->( 30 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]
;; lr  use 	 3 [bx] 7 [sp] 38 [r9] 40 [r11]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

( 39 73 29 54 69 81 )->[30]->( 31 32 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 30 )->[31]->( 32 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 31 30 23 )->[32]->( 1 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

( 25 )->[33]->( 68 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]

( 33 )->[34]->( 35 64 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

( 34 )->[35]->( 71 36 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

( 35 71 )->[36]->( 37 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 36 66 )->[37]->( 75 38 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 37 )->[38]->( 39 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 38 75 )->[39]->( 30 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

( 15 )->[40]->( 42 41 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]

( 40 )->[41]->( 42 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]
;; live  gen 	 2 [cx]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]

( 40 41 )->[42]->( 43 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 6 [bp]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 13 42 21 )->[43]->( 23 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 5 )->[44]->( 45 46 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

( 44 )->[45]->( 46 )
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

( 44 45 )->[46]->( 9 )
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 26 )->[47]->( 78 48 )
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

( 47 )->[48]->( 72 49 )
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

( 48 )->[49]->( 82 50 )
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 49 )->[50]->( 51 82 )
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 50 82 )->[51]->( 52 )
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 1 [dx]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 51 72 )->[52]->( 53 )
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 39 [r10]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

( 79 52 80 )->[53]->( 81 54 )
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 39 [r10]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 53 )->[54]->( 30 )
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

( 4 )->[55]->( 83 56 )
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 39 [r10]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 55 )->[56]->( 13 )
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

( 10 )->[57]->( 12 )
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 16 )->[58]->( 62 59 )
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

( 58 )->[59]->( 74 60 )
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 59 )->[60]->( 61 74 )
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 60 74 )->[61]->( 63 )
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 58 )->[62]->( 63 )
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 62 61 )->[63]->( 19 )
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 39 [r10]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]

( 34 )->[64]->( 77 65 )
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 1 [dx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 64 )->[65]->( 66 77 )
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 65 77 )->[66]->( 37 )
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 9 )->[67]->( 12 )
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 33 )->[68]->( 73 69 )
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; lr  use 	 3 [bx] 7 [sp] 38 [r9] 39 [r10]
;; lr  def 	 17 [flags] 38 [r9]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags] 38 [r9]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 68 )->[69]->( 30 )
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

( 7 6 )->[70]->( 8 )
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

( 35 )->[71]->( 36 )
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

( 48 )->[72]->( 52 )
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 68 )->[73]->( 30 )
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

( 60 59 )->[74]->( 61 )
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

( 37 )->[75]->( 39 )
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 18 17 )->[76]->( 19 )
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 39 [r10]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]

( 65 64 )->[77]->( 66 )
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]

( 47 )->[78]->( 80 79 )
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]

( 78 )->[79]->( 53 80 )
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]

( 79 78 )->[80]->( 53 )
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 39 [r10]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

( 53 )->[81]->( 30 )
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

( 50 49 )->[82]->( 51 )
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]

( 55 )->[83]->( 13 )
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

( 32 24 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 9 to worklist
  Adding insn 14 to worklist
  Adding insn 13 to worklist
  Adding insn 12 to worklist
  Adding insn 11 to worklist
  Adding insn 1291 to worklist
  Adding insn 1289 to worklist
  Adding insn 1288 to worklist
  Adding insn 1287 to worklist
  Adding insn 1286 to worklist
  Adding insn 459 to worklist
  Adding insn 455 to worklist
  Adding insn 454 to worklist
  Adding insn 452 to worklist
  Adding insn 450 to worklist
  Adding insn 447 to worklist
  Adding insn 446 to worklist
  Adding insn 444 to worklist
  Adding insn 442 to worklist
  Adding insn 438 to worklist
  Adding insn 437 to worklist
  Adding insn 435 to worklist
  Adding insn 433 to worklist
  Adding insn 430 to worklist
  Adding insn 429 to worklist
  Adding insn 427 to worklist
  Adding insn 425 to worklist
  Adding insn 462 to worklist
  Adding insn 490 to worklist
  Adding insn 508 to worklist
  Adding insn 504 to worklist
  Adding insn 512 to worklist
  Adding insn 528 to worklist
  Adding insn 527 to worklist
  Adding insn 523 to worklist
  Adding insn 532 to worklist
  Adding insn 544 to worklist
  Adding insn 550 to worklist
  Adding insn 569 to worklist
  Adding insn 567 to worklist
  Adding insn 1392 to worklist
  Adding insn 614 to worklist
  Adding insn 611 to worklist
  Adding insn 634 to worklist
  Adding insn 650 to worklist
  Adding insn 643 to worklist
  Adding insn 640 to worklist
  Adding insn 654 to worklist
  Adding insn 736 to worklist
  Adding insn 734 to worklist
  Adding insn 762 to worklist
  Adding insn 759 to worklist
  Adding insn 753 to worklist
  Adding insn 575 to worklist
  Adding insn 925 to worklist
  Adding insn 923 to worklist
  Adding insn 921 to worklist
  Adding insn 918 to worklist
  Adding insn 915 to worklist
  Adding insn 912 to worklist
  Adding insn 909 to worklist
  Adding insn 905 to worklist
  Adding insn 901 to worklist
  Adding insn 897 to worklist
  Adding insn 895 to worklist
  Adding insn 892 to worklist
  Adding insn 889 to worklist
  Adding insn 886 to worklist
  Adding insn 883 to worklist
  Adding insn 879 to worklist
  Adding insn 875 to worklist
  Adding insn 871 to worklist
  Adding insn 869 to worklist
  Adding insn 866 to worklist
  Adding insn 863 to worklist
  Adding insn 860 to worklist
  Adding insn 857 to worklist
  Adding insn 853 to worklist
  Adding insn 849 to worklist
  Adding insn 845 to worklist
  Adding insn 843 to worklist
  Adding insn 840 to worklist
  Adding insn 837 to worklist
  Adding insn 834 to worklist
  Adding insn 831 to worklist
  Adding insn 827 to worklist
  Adding insn 823 to worklist
  Adding insn 819 to worklist
  Adding insn 817 to worklist
  Adding insn 814 to worklist
  Adding insn 811 to worklist
  Adding insn 808 to worklist
  Adding insn 805 to worklist
  Adding insn 801 to worklist
  Adding insn 797 to worklist
  Adding insn 793 to worklist
  Adding insn 791 to worklist
  Adding insn 788 to worklist
  Adding insn 785 to worklist
  Adding insn 782 to worklist
  Adding insn 779 to worklist
  Adding insn 775 to worklist
  Adding insn 771 to worklist
  Adding insn 1383 to worklist
  Adding insn 1377 to worklist
  Adding insn 1375 to worklist
  Adding insn 978 to worklist
  Adding insn 976 to worklist
  Adding insn 973 to worklist
  Adding insn 970 to worklist
  Adding insn 967 to worklist
  Adding insn 964 to worklist
  Adding insn 960 to worklist
  Adding insn 956 to worklist
  Adding insn 952 to worklist
  Adding insn 950 to worklist
  Adding insn 947 to worklist
  Adding insn 944 to worklist
  Adding insn 941 to worklist
  Adding insn 938 to worklist
  Adding insn 934 to worklist
  Adding insn 930 to worklist
  Adding insn 42 to worklist
  Adding insn 39 to worklist
  Adding insn 38 to worklist
  Adding insn 36 to worklist
  Adding insn 34 to worklist
  Adding insn 32 to worklist
  Adding insn 31 to worklist
  Adding insn 29 to worklist
  Adding insn 27 to worklist
  Adding insn 172 to worklist
  Adding insn 169 to worklist
  Adding insn 175 to worklist
  Adding insn 179 to worklist
  Adding insn 184 to worklist
  Adding insn 388 to worklist
  Adding insn 386 to worklist
  Adding insn 384 to worklist
  Adding insn 381 to worklist
  Adding insn 378 to worklist
  Adding insn 375 to worklist
  Adding insn 373 to worklist
  Adding insn 370 to worklist
  Adding insn 367 to worklist
  Adding insn 364 to worklist
  Adding insn 362 to worklist
  Adding insn 359 to worklist
  Adding insn 356 to worklist
  Adding insn 353 to worklist
  Adding insn 351 to worklist
  Adding insn 348 to worklist
  Adding insn 345 to worklist
  Adding insn 342 to worklist
  Adding insn 340 to worklist
  Adding insn 337 to worklist
  Adding insn 334 to worklist
  Adding insn 331 to worklist
  Adding insn 329 to worklist
  Adding insn 326 to worklist
  Adding insn 323 to worklist
  Adding insn 320 to worklist
  Adding insn 318 to worklist
  Adding insn 315 to worklist
  Adding insn 312 to worklist
  Adding insn 307 to worklist
  Adding insn 302 to worklist
  Adding insn 400 to worklist
  Adding insn 398 to worklist
  Adding insn 395 to worklist
  Adding insn 392 to worklist
  Adding insn 1300 to worklist
  Adding insn 1294 to worklist
  Adding insn 1016 to worklist
  Adding insn 45 to worklist
  Adding insn 73 to worklist
  Adding insn 76 to worklist
  Adding insn 996 to worklist
  Adding insn 989 to worklist
  Adding insn 114 to worklist
  Adding insn 129 to worklist
  Adding insn 1399 to worklist
  Adding insn 617 to worklist
  Adding insn 621 to worklist
  Adding insn 628 to worklist
  Adding insn 624 to worklist
  Adding insn 1401 to worklist
  Adding insn 584 to worklist
  Adding insn 493 to worklist
  Adding insn 495 to worklist
  Adding insn 1403 to worklist
  Adding insn 1010 to worklist
  Adding insn 1006 to worklist
  Adding insn 190 to worklist
  Adding insn 221 to worklist
  Adding insn 224 to worklist
  Adding insn 253 to worklist
  Adding insn 246 to worklist
  Adding insn 257 to worklist
  Adding insn 268 to worklist
  Adding insn 273 to worklist
  Adding insn 272 to worklist
  Adding insn 281 to worklist
  Adding insn 279 to worklist
  Adding insn 1408 to worklist
  Adding insn 297 to worklist
  Adding insn 467 to worklist
  Adding insn 465 to worklist
  Adding insn 1411 to worklist
  Adding insn 483 to worklist
  Adding insn 1413 to worklist
  Adding insn 559 to worklist
  Adding insn 668 to worklist
  Adding insn 708 to worklist
  Adding insn 701 to worklist
  Adding insn 698 to worklist
  Adding insn 712 to worklist
  Adding insn 1416 to worklist
  Adding insn 723 to worklist
  Adding insn 682 to worklist
  Adding insn 681 to worklist
  Adding insn 680 to worklist
  Adding insn 676 to worklist
  Adding insn 670 to worklist
  Adding insn 1418 to worklist
  Adding insn 728 to worklist
  Adding insn 727 to worklist
  Adding insn 91 to worklist
  Adding insn 84 to worklist
  Adding insn 95 to worklist
  Adding insn 1420 to worklist
  Adding insn 111 to worklist
  Adding insn 110 to worklist
  Adding insn 106 to worklist
  Adding insn 1422 to worklist
  Adding insn 538 to worklist
  Adding insn 50 to worklist
  Adding insn 48 to worklist
  Adding insn 1425 to worklist
  Adding insn 66 to worklist
  Adding insn 1427 to worklist
  Adding insn 518 to worklist
  Adding insn 1429 to worklist
  Adding insn 78 to worklist
  Adding insn 1431 to worklist
  Adding insn 230 to worklist
  Adding insn 229 to worklist
  Adding insn 225 to worklist
  Adding insn 1433 to worklist
  Adding insn 56 to worklist
  Adding insn 1435 to worklist
  Adding insn 718 to worklist
  Adding insn 1437 to worklist
  Adding insn 120 to worklist
  Adding insn 1439 to worklist
  Adding insn 660 to worklist
  Adding insn 1441 to worklist
  Adding insn 101 to worklist
  Adding insn 203 to worklist
  Adding insn 196 to worklist
  Adding insn 193 to worklist
  Adding insn 207 to worklist
  Adding insn 1443 to worklist
  Adding insn 213 to worklist
  Adding insn 1445 to worklist
  Adding insn 287 to worklist
  Adding insn 1447 to worklist
  Adding insn 263 to worklist
  Adding insn 1449 to worklist
  Adding insn 473 to worklist
Finished finding needed instructions:
processing block 32 lr out =  0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
  Adding insn 1299 to worklist
  Adding insn 1298 to worklist
  Adding insn 1297 to worklist
  Adding insn 1296 to worklist
  Adding insn 1295 to worklist
  Adding insn 1371 to worklist
processing block 31 lr out =  7 [sp]
  Adding insn 399 to worklist
  Adding insn 397 to worklist
  Adding insn 1195 to worklist
  Adding insn 394 to worklist
  Adding insn 391 to worklist
processing block 30 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 387 to worklist
  Adding insn 385 to worklist
  Adding insn 383 to worklist
  Adding insn 1193 to worklist
  Adding insn 380 to worklist
  Adding insn 377 to worklist
  Adding insn 374 to worklist
  Adding insn 372 to worklist
  Adding insn 1191 to worklist
  Adding insn 369 to worklist
  Adding insn 366 to worklist
  Adding insn 363 to worklist
  Adding insn 361 to worklist
  Adding insn 1189 to worklist
  Adding insn 358 to worklist
  Adding insn 355 to worklist
  Adding insn 352 to worklist
  Adding insn 350 to worklist
  Adding insn 1187 to worklist
  Adding insn 347 to worklist
  Adding insn 344 to worklist
  Adding insn 341 to worklist
  Adding insn 339 to worklist
  Adding insn 1185 to worklist
  Adding insn 336 to worklist
  Adding insn 333 to worklist
  Adding insn 330 to worklist
  Adding insn 328 to worklist
  Adding insn 1183 to worklist
  Adding insn 325 to worklist
  Adding insn 322 to worklist
  Adding insn 319 to worklist
  Adding insn 317 to worklist
  Adding insn 1181 to worklist
  Adding insn 314 to worklist
  Adding insn 311 to worklist
  Adding insn 306 to worklist
  Adding insn 304 to worklist
  Adding insn 1270 to worklist
  Adding insn 301 to worklist
processing block 73 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp]
  Adding insn 57 to worklist
  Adding insn 55 to worklist
  Adding insn 53 to worklist
  Adding insn 1282 to worklist
processing block 69 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp]
  Adding insn 67 to worklist
  Adding insn 65 to worklist
  Adding insn 63 to worklist
  Adding insn 1281 to worklist
processing block 68 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 49 to worklist
  Adding insn 47 to worklist
processing block 39 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp]
  Adding insn 133 to worklist
  Adding insn 1175 to worklist
processing block 75 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 119 to worklist
  Adding insn 117 to worklist
  Adding insn 1280 to worklist
processing block 38 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 128 to worklist
  Adding insn 126 to worklist
  Adding insn 1279 to worklist
processing block 37 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 113 to worklist
processing block 36 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 995 to worklist
  Adding insn 994 to worklist
  Adding insn 993 to worklist
  Adding insn 991 to worklist
  Adding insn 990 to worklist
  Adding insn 988 to worklist
processing block 71 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
processing block 35 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 75 to worklist
processing block 66 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 109 to worklist
  Adding insn 108 to worklist
  Adding insn 107 to worklist
  Adding insn 105 to worklist
processing block 77 lr out =  1 [dx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 102 to worklist
  Adding insn 100 to worklist
  Adding insn 99 to worklist
processing block 65 lr out =  1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 94 to worklist
processing block 64 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 90 to worklist
  Adding insn 87 to worklist
  Adding insn 86 to worklist
  Adding insn 85 to worklist
  Adding insn 83 to worklist
processing block 34 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 72 to worklist
processing block 33 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
  Adding insn 44 to worklist
processing block 29 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp]
  Adding insn 183 to worklist
processing block 28 lr out =  3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]
  Adding insn 1273 to worklist
processing block 27 lr out =  2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
  Adding insn 174 to worklist
processing block 81 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp]
  Adding insn 288 to worklist
  Adding insn 286 to worklist
  Adding insn 284 to worklist
  Adding insn 1272 to worklist
processing block 54 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp]
  Adding insn 298 to worklist
  Adding insn 296 to worklist
  Adding insn 294 to worklist
  Adding insn 1271 to worklist
processing block 53 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 280 to worklist
  Adding insn 278 to worklist
processing block 80 lr out =  1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
  Adding insn 215 to worklist
  Adding insn 214 to worklist
  Adding insn 212 to worklist
  Adding insn 211 to worklist
processing block 79 lr out =  1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
  Adding insn 206 to worklist
processing block 78 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
  Adding insn 202 to worklist
  Adding insn 199 to worklist
  Adding insn 198 to worklist
  Adding insn 197 to worklist
  Adding insn 195 to worklist
  Adding insn 194 to worklist
  Adding insn 192 to worklist
processing block 52 lr out =  1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
  Adding insn 275 to worklist
  Adding insn 274 to worklist
  Adding insn 271 to worklist
  Adding insn 270 to worklist
  Adding insn 269 to worklist
processing block 72 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 228 to worklist
  Adding insn 227 to worklist
  Adding insn 1372 to worklist
processing block 51 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 267 to worklist
processing block 82 lr out =  1 [dx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 264 to worklist
  Adding insn 262 to worklist
  Adding insn 261 to worklist
processing block 50 lr out =  1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 256 to worklist
processing block 49 lr out =  1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 252 to worklist
  Adding insn 249 to worklist
  Adding insn 248 to worklist
  Adding insn 247 to worklist
  Adding insn 245 to worklist
  Adding insn 244 to worklist
processing block 48 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 220 to worklist
  Adding insn 223 to worklist
processing block 47 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
  Adding insn 189 to worklist
processing block 26 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 171 to worklist
  Adding insn 1277 to worklist
  Adding insn 1276 to worklist
  Adding insn 1179 to worklist
  Adding insn 166 to worklist
  Adding insn 1180 to worklist
  Adding insn 165 to worklist
  Adding insn 164 to worklist
  Adding insn 163 to worklist
  Adding insn 162 to worklist
  Adding insn 161 to worklist
  Adding insn 160 to worklist
  Adding insn 159 to worklist
  Adding insn 157 to worklist
  Adding insn 156 to worklist
  Adding insn 1275 to worklist
  Adding insn 154 to worklist
  Adding insn 153 to worklist
  Adding insn 1176 to worklist
  Adding insn 151 to worklist
  Adding insn 150 to worklist
  Adding insn 149 to worklist
  Adding insn 1274 to worklist
processing block 25 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
  Adding insn 1283 to worklist
  Adding insn 37 to worklist
  Adding insn 1173 to worklist
  Adding insn 35 to worklist
  Adding insn 1171 to worklist
  Adding insn 33 to worklist
  Adding insn 1169 to worklist
  Adding insn 30 to worklist
  Adding insn 1167 to worklist
  Adding insn 28 to worklist
  Adding insn 1165 to worklist
  Adding insn 26 to worklist
  Adding insn 1163 to worklist
  Adding insn 1082 to worklist
  Adding insn 1081 to worklist
  Adding insn 1161 to worklist
  Adding insn 19 to worklist
  Adding insn 16 to worklist
  Adding insn 15 to worklist
processing block 24 lr out =  0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
  Adding insn 1382 to worklist
  Adding insn 1381 to worklist
  Adding insn 1380 to worklist
  Adding insn 1379 to worklist
  Adding insn 1378 to worklist
  Adding insn 1374 to worklist
  Adding insn 977 to worklist
  Adding insn 975 to worklist
  Adding insn 1252 to worklist
  Adding insn 972 to worklist
  Adding insn 969 to worklist
  Adding insn 966 to worklist
  Adding insn 963 to worklist
  Adding insn 962 to worklist
  Adding insn 959 to worklist
  Adding insn 955 to worklist
  Adding insn 951 to worklist
  Adding insn 949 to worklist
  Adding insn 1250 to worklist
  Adding insn 946 to worklist
  Adding insn 943 to worklist
  Adding insn 940 to worklist
  Adding insn 937 to worklist
  Adding insn 936 to worklist
  Adding insn 933 to worklist
  Adding insn 929 to worklist
processing block 23 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 924 to worklist
  Adding insn 922 to worklist
  Adding insn 920 to worklist
  Adding insn 1248 to worklist
  Adding insn 917 to worklist
  Adding insn 914 to worklist
  Adding insn 911 to worklist
  Adding insn 908 to worklist
  Adding insn 907 to worklist
  Adding insn 904 to worklist
  Adding insn 900 to worklist
  Adding insn 896 to worklist
  Adding insn 894 to worklist
  Adding insn 1246 to worklist
  Adding insn 891 to worklist
  Adding insn 888 to worklist
  Adding insn 885 to worklist
  Adding insn 882 to worklist
  Adding insn 881 to worklist
  Adding insn 878 to worklist
  Adding insn 874 to worklist
  Adding insn 870 to worklist
  Adding insn 868 to worklist
  Adding insn 1244 to worklist
  Adding insn 865 to worklist
  Adding insn 862 to worklist
  Adding insn 859 to worklist
  Adding insn 856 to worklist
  Adding insn 855 to worklist
  Adding insn 852 to worklist
  Adding insn 848 to worklist
  Adding insn 844 to worklist
  Adding insn 842 to worklist
  Adding insn 1242 to worklist
  Adding insn 839 to worklist
  Adding insn 836 to worklist
  Adding insn 833 to worklist
  Adding insn 830 to worklist
  Adding insn 829 to worklist
  Adding insn 826 to worklist
  Adding insn 822 to worklist
  Adding insn 818 to worklist
  Adding insn 816 to worklist
  Adding insn 1240 to worklist
  Adding insn 813 to worklist
  Adding insn 810 to worklist
  Adding insn 807 to worklist
  Adding insn 804 to worklist
  Adding insn 803 to worklist
  Adding insn 800 to worklist
  Adding insn 796 to worklist
  Adding insn 792 to worklist
  Adding insn 790 to worklist
  Adding insn 1238 to worklist
  Adding insn 787 to worklist
  Adding insn 784 to worklist
  Adding insn 781 to worklist
  Adding insn 778 to worklist
  Adding insn 777 to worklist
  Adding insn 774 to worklist
  Adding insn 770 to worklist
processing block 22 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 574 to worklist
  Adding insn 572 to worklist
  Adding insn 1263 to worklist
processing block 14 lr out =  3 [bx] 4 [si] 7 [sp]
processing block 43 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 583 to worklist
  Adding insn 581 to worklist
  Adding insn 1262 to worklist
processing block 13 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 568 to worklist
  Adding insn 566 to worklist
processing block 83 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp]
  Adding insn 474 to worklist
  Adding insn 472 to worklist
  Adding insn 470 to worklist
  Adding insn 1268 to worklist
processing block 56 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp]
  Adding insn 484 to worklist
  Adding insn 482 to worklist
  Adding insn 480 to worklist
  Adding insn 1267 to worklist
processing block 55 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 466 to worklist
  Adding insn 464 to worklist
processing block 12 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp]
  Adding insn 563 to worklist
  Adding insn 1225 to worklist
processing block 67 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 537 to worklist
  Adding insn 535 to worklist
  Adding insn 1266 to worklist
processing block 11 lr out =  3 [bx] 4 [si] 7 [sp]
processing block 57 lr out =  3 [bx] 4 [si] 7 [sp]
processing block 10 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 543 to worklist
  Adding insn 549 to worklist
  Adding insn 547 to worklist
  Adding insn 1265 to worklist
processing block 9 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp]
  Adding insn 531 to worklist
  Adding insn 530 to worklist
processing block 46 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 1009 to worklist
  Adding insn 1008 to worklist
  Adding insn 1005 to worklist
  Adding insn 1004 to worklist
  Adding insn 1003 to worklist
  Adding insn 1002 to worklist
processing block 45 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
processing block 44 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 492 to worklist
processing block 8 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 526 to worklist
  Adding insn 525 to worklist
  Adding insn 524 to worklist
  Adding insn 522 to worklist
processing block 70 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp]
  Adding insn 519 to worklist
  Adding insn 517 to worklist
  Adding insn 516 to worklist
processing block 7 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 511 to worklist
processing block 6 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 507 to worklist
  Adding insn 503 to worklist
  Adding insn 502 to worklist
  Adding insn 501 to worklist
  Adding insn 500 to worklist
processing block 5 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 489 to worklist
processing block 4 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
  Adding insn 461 to worklist
processing block 42 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 627 to worklist
  Adding insn 626 to worklist
  Adding insn 625 to worklist
processing block 41 lr out =  0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]
  Adding insn 1257 to worklist
processing block 40 lr out =  0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]
  Adding insn 616 to worklist
processing block 21 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 761 to worklist
  Adding insn 758 to worklist
  Adding insn 755 to worklist
  Adding insn 754 to worklist
  Adding insn 752 to worklist
  Adding insn 750 to worklist
processing block 20 lr out =  1 [dx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 1254 to worklist
processing block 19 lr out =  1 [dx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 735 to worklist
  Adding insn 1255 to worklist
  Adding insn 733 to worklist
processing block 76 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
  Adding insn 662 to worklist
  Adding insn 661 to worklist
  Adding insn 659 to worklist
  Adding insn 658 to worklist
processing block 18 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
  Adding insn 653 to worklist
processing block 17 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
  Adding insn 649 to worklist
  Adding insn 646 to worklist
  Adding insn 645 to worklist
  Adding insn 642 to worklist
  Adding insn 641 to worklist
  Adding insn 639 to worklist
  Adding insn 638 to worklist
  Adding insn 637 to worklist
  Adding insn 1232 to worklist
  Adding insn 636 to worklist
processing block 63 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
  Adding insn 730 to worklist
  Adding insn 729 to worklist
  Adding insn 726 to worklist
  Adding insn 725 to worklist
  Adding insn 724 to worklist
processing block 62 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 679 to worklist
  Adding insn 1256 to worklist
  Adding insn 675 to worklist
  Adding insn 674 to worklist
  Adding insn 1235 to worklist
  Adding insn 672 to worklist
  Adding insn 671 to worklist
processing block 61 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 722 to worklist
processing block 74 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp]
  Adding insn 719 to worklist
  Adding insn 717 to worklist
  Adding insn 716 to worklist
processing block 60 lr out =  0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 711 to worklist
processing block 59 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 707 to worklist
  Adding insn 704 to worklist
  Adding insn 703 to worklist
  Adding insn 700 to worklist
  Adding insn 699 to worklist
  Adding insn 697 to worklist
  Adding insn 696 to worklist
  Adding insn 695 to worklist
  Adding insn 1236 to worklist
  Adding insn 694 to worklist
processing block 58 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 667 to worklist
processing block 16 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
  Adding insn 633 to worklist
processing block 15 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]
  Adding insn 613 to worklist
  Adding insn 1261 to worklist
  Adding insn 1260 to worklist
  Adding insn 1230 to worklist
  Adding insn 608 to worklist
  Adding insn 1231 to worklist
  Adding insn 607 to worklist
  Adding insn 606 to worklist
  Adding insn 605 to worklist
  Adding insn 1228 to worklist
  Adding insn 604 to worklist
  Adding insn 603 to worklist
  Adding insn 602 to worklist
  Adding insn 601 to worklist
  Adding insn 599 to worklist
  Adding insn 598 to worklist
  Adding insn 1259 to worklist
  Adding insn 596 to worklist
  Adding insn 595 to worklist
  Adding insn 1226 to worklist
  Adding insn 593 to worklist
  Adding insn 592 to worklist
  Adding insn 591 to worklist
  Adding insn 1258 to worklist
processing block 3 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
  Adding insn 1269 to worklist
  Adding insn 453 to worklist
  Adding insn 1223 to worklist
  Adding insn 451 to worklist
  Adding insn 1221 to worklist
  Adding insn 449 to worklist
  Adding insn 1219 to worklist
  Adding insn 445 to worklist
  Adding insn 1217 to worklist
  Adding insn 443 to worklist
  Adding insn 1215 to worklist
  Adding insn 441 to worklist
  Adding insn 1213 to worklist
  Adding insn 439 to worklist
  Adding insn 1211 to worklist
  Adding insn 436 to worklist
  Adding insn 1209 to worklist
  Adding insn 434 to worklist
  Adding insn 1207 to worklist
  Adding insn 432 to worklist
  Adding insn 1205 to worklist
  Adding insn 428 to worklist
  Adding insn 1203 to worklist
  Adding insn 426 to worklist
  Adding insn 1201 to worklist
  Adding insn 424 to worklist
  Adding insn 1199 to worklist
  Adding insn 422 to worklist
  Adding insn 1197 to worklist
  Adding insn 1084 to worklist
  Adding insn 1083 to worklist
  Adding insn 415 to worklist
  Adding insn 1285 to worklist
  Adding insn 412 to worklist
  Adding insn 411 to worklist
processing block 2 lr out =  2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
  Adding insn 8 to worklist
  Adding insn 7 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
  Adding insn 1290 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 84 n_edges 123 count 84 (    1)
;;   ======================================================
;;   -- basic block 2 from 1286 to 9 -- after reload
;;   ======================================================

;;	  0--> b  0: i1286 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i1287 [--sp]=di                               :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i1288 [--sp]=si                               :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i1289 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i1290 {sp=sp-0x48;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  4--> b  0: i1291 unspec/v[sp] 4                          :athlon-vector,athlon-ieu,athlon-ieu
;;	  5--> b  0: i   7 r10=[cx]                                :athlon-direct,athlon-load
;;	  6--> b  0: i   2 bx=cx                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i   3 si=dx                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  11 [sp+0x2c]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i  12 [sp+0x2d]=0x1                           :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i  13 [sp+0x2e]=0xffffffffffffff80            :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i   8 flags=cmp(r10,0x17f)                    :athlon-direct,athlon-ieu
;;	  8--> b  0: i  14 [sp+0x2f]=0xffffffffffffff81            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i   9 pc={(flags<=0)?L1387:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 1286
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 411 to 459 -- after reload
;;   ======================================================

;;	  0--> b  0: i 411 ax=[cx+0xc8]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 412 cx=sxn([cx+0x4])                        :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i 415 r8=[bx+0xd0]                            :athlon-direct,athlon-load
;;	  4--> b  0: i1285 dx=cx                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i1083 {flags=cmp(cx+ax,cx);cx=cx+ax;}         :athlon-direct,athlon-ieu
;;	  5--> b  0: i1084 {r8=ltu(flags,0)+r8+0;clobber flags;}   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 455 [sp+0x3f]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i1197 r9=r8                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i 438 [sp+0x37]=r8                            :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 422 {r9=r9 0>>0x20;clobber flags;}          :athlon-direct,athlon-ieu
;;	  8--> b  0: i1199 r11=r9                                  :athlon-direct,athlon-ieu
;;	  8--> b  0: i 430 [sp+0x33]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i 424 {r11=r11 0>>0x18;clobber flags;}        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 425 [sp+0x30]=r11                           :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i1201 r11=r9                                  :athlon-direct,athlon-ieu
;;	 11--> b  0: i 426 {r11=r11 0>>0x10;clobber flags;}        :athlon-direct,athlon-ieu
;;	 12--> b  0: i 427 [sp+0x31]=r11                           :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i1203 r11=r9                                  :athlon-direct,athlon-ieu
;;	 12--> b  0: i1205 r9=r8                                   :athlon-direct,athlon-ieu
;;	 13--> b  0: i 432 {r9=r9 0>>0x18;clobber flags;}          :athlon-direct,athlon-ieu
;;	 13--> b  0: i 428 {r11=r11 0>>0x8;clobber flags;}         :athlon-direct,athlon-ieu
;;	 14--> b  0: i 433 [sp+0x34]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i1207 r9=r8                                   :athlon-direct,athlon-ieu
;;	 14--> b  0: i 429 [sp+0x32]=r11                           :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i 434 {r9=r9 0>>0x10;clobber flags;}          :athlon-direct,athlon-ieu
;;	 16--> b  0: i 435 [sp+0x35]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i1209 r9=r8                                   :athlon-direct,athlon-ieu
;;	 16--> b  0: i1211 r8=cx                                   :athlon-direct,athlon-ieu
;;	 17--> b  0: i 439 {r8=r8 0>>0x20;clobber flags;}          :athlon-direct,athlon-ieu
;;	 17--> b  0: i 436 {r9=r9 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 18--> b  0: i 437 [sp+0x36]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i1213 r9=r8                                   :athlon-direct,athlon-ieu
;;	 18--> b  0: i 447 [sp+0x3b]=r8                            :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i 441 {r9=r9 0>>0x18;clobber flags;}          :athlon-direct,athlon-ieu
;;	 20--> b  0: i 442 [sp+0x38]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	 20--> b  0: i1215 r9=r8                                   :athlon-direct,athlon-ieu
;;	 21--> b  0: i 443 {r9=r9 0>>0x10;clobber flags;}          :athlon-direct,athlon-ieu
;;	 22--> b  0: i 444 [sp+0x39]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	 22--> b  0: i1217 r9=r8                                   :athlon-direct,athlon-ieu
;;	 22--> b  0: i1219 r8=cx                                   :athlon-direct,athlon-ieu
;;	 23--> b  0: i 449 {r8=r8 0>>0x18;clobber flags;}          :athlon-direct,athlon-ieu
;;	 23--> b  0: i 445 {r9=r9 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 24--> b  0: i 450 [sp+0x3c]=r8                            :athlon-direct,athlon-agu,athlon-store
;;	 24--> b  0: i1221 r8=cx                                   :athlon-direct,athlon-ieu
;;	 24--> b  0: i 446 [sp+0x3a]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	 25--> b  0: i 451 {r8=r8 0>>0x10;clobber flags;}          :athlon-direct,athlon-ieu
;;	 26--> b  0: i 452 [sp+0x3d]=r8                            :athlon-direct,athlon-agu,athlon-store
;;	 26--> b  0: i1223 r8=cx                                   :athlon-direct,athlon-ieu
;;	 27--> b  0: i 453 {r8=r8 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 27--> b  0: i1269 flags=cmp(dx&0x7,0)                     :athlon-direct,athlon-ieu
;;	 28--> b  0: i 454 [sp+0x3e]=r8                            :athlon-direct,athlon-agu,athlon-store
;;	 28--> b  0: i 459 pc={(flags!=0)?L587:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 28
;;   new head = 411
;;   new tail = 459

;;   ======================================================
;;   -- basic block 4 from 461 to 462 -- after reload
;;   ======================================================

;;	  0--> b  0: i 461 flags=cmp(dx,0x378)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i 462 pc={(flags==0)?L1388:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 461
;;   new tail = 462

;;   ======================================================
;;   -- basic block 5 from 489 to 490 -- after reload
;;   ======================================================

;;	  0--> b  0: i 489 flags=cmp(dx,0x377)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i 490 pc={(flags<=0)?L1389:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 489
;;   new tail = 490

;;   ======================================================
;;   -- basic block 6 from 500 to 508 -- after reload
;;   ======================================================

;;	  0--> b  0: i 500 r8=0x400                                :athlon-direct,athlon-ieu
;;	  1--> b  0: i 501 {r8=r8-dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 502 r8=sxn(r8)                              :athlon-direct,athlon-ieu
;;	  3--> b  0: i 503 {ax=ax-r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	  3--> b  0: i 507 flags=cmp(dx,0x400)                     :athlon-direct,athlon-ieu
;;	  4--> b  0: i 504 [bx+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 508 pc={(flags==0)?L1033:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 500
;;   new tail = 508

;;   ======================================================
;;   -- basic block 7 from 511 to 512 -- after reload
;;   ======================================================

;;	  0--> b  0: i 511 flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 512 pc={(flags!=0)?L1033:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 511
;;   new tail = 512

;;   ======================================================
;;   -- basic block 8 from 522 to 528 -- after reload
;;   ======================================================

;;	  0--> b  0: i 522 {ax=ax-0x378;clobber flags;}            :athlon-direct,athlon-ieu
;;	  0--> b  0: i 525 dx=const(`padding'+0x1)                 :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 524 r8=0x378                                :athlon-direct,athlon-ieu
;;	  1--> b  0: i 523 [bx+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 526 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 527 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 528 [bx+0xc]=0x1                            :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 3
;;   new head = 522
;;   new tail = 528

;;   ======================================================
;;   -- basic block 9 from 530 to 532 -- after reload
;;   ======================================================

;;	  0--> b  0: i 530 ax=[bx]                                 :athlon-direct,athlon-load
;;	  3--> b  0: i 531 flags=cmp(ax,0x180)                     :athlon-direct,athlon-ieu
;;	  4--> b  0: i 532 pc={(flags==0)?L1390:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 530
;;   new tail = 532

;;   ======================================================
;;   -- basic block 10 from 1265 to 544 -- after reload
;;   ======================================================

;;	  0--> b  0: i 543 flags=cmp(ax,0x17f)                     :athlon-direct,athlon-ieu
;;	  0--> b  0: i1265 dx=sp+0x2d                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 547 r8=0x8                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 549 cx=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 544 pc={(flags>0)?L553:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 543
;;   new tail = 544

;;   ======================================================
;;   -- basic block 11 from 550 to 550 -- after reload
;;   ======================================================

;;	  0--> b  0: i 550 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 550
;;   new tail = 550

;;   ======================================================
;;   -- basic block 12 from 1225 to 563 -- after reload
;;   ======================================================

;;	  0--> b  0: i1225 ax=[bx+0xc8]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 563 {ax=ax-0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1225
;;   new tail = 563

;;   ======================================================
;;   -- basic block 13 from 566 to 569 -- after reload
;;   ======================================================

;;	  0--> b  0: i 566 {ax=ax-0x80;clobber flags;}             :athlon-direct,athlon-ieu
;;	  0--> b  0: i 568 flags=cmp([bx],0x17f)                   :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i 567 [bx+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 569 pc={(flags>0)?L578:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 566
;;   new tail = 569

;;   ======================================================
;;   -- basic block 14 from 1392 to 1392 -- after reload
;;   ======================================================

;;	  0--> b  0: i1392 pc=L760                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1392
;;   new tail = 1392

;;   ======================================================
;;   -- basic block 15 from 1258 to 614 -- after reload
;;   ======================================================

;;	  0--> b  0: i1258 r8=dx+0x7                               :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 591 flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  0--> b  0: i1226 cx=dx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 601 bp=0x8                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 604 di=0xff                                 :athlon-direct,athlon-ieu
;;	  1--> b  0: i 607 r9=0x80                                 :athlon-direct,athlon-ieu
;;	  2--> b  0: i 592 r8={(flags<0)?r8:dx}                    :athlon-direct,athlon-ieu
;;	  2--> b  0: i 595 {cx=cx>>0x1f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  3--> b  0: i 596 {cx=cx 0>>0x1d;clobber flags;}          :athlon-direct,athlon-ieu
;;	  3--> b  0: i 593 {r8=r8>>0x3;clobber flags;}             :athlon-direct,athlon-ieu
;;	  4--> b  0: i1259 r11=dx+cx                               :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i 603 r8=sxn(r8)                              :athlon-direct,athlon-ieu
;;	  6--> b  0: i 598 {r11=r11&0x7;clobber flags;}            :athlon-direct,athlon-ieu
;;	  7--> b  0: i 599 {r11=r11-cx;clobber flags;}             :athlon-direct,athlon-ieu
;;	  8--> b  0: i 602 {bp=bp-r11;clobber flags;}              :athlon-direct,athlon-ieu
;;	  9--> b  0: i1228 cx=bp                                   :athlon-direct,athlon-ieu
;;	 10--> b  0: i 605 {di=di<<cx;clobber flags;}              :athlon-direct,athlon-ieu
;;	 10--> b  0: i1231 cx=r11                                  :athlon-direct,athlon-ieu
;;	 10--> b  0: i 606 {di=di&[bx+r8+0xd8];clobber flags;}     :athlon-direct,athlon-load,athlon-ieu
;;	 11--> b  0: i 608 {r9=r9>>cx;clobber flags;}              :athlon-direct,athlon-ieu
;;	 12--> b  0: i1230 cx=r9                                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i1261 r9=dx-0x379                             :athlon-direct,athlon-agu,nothing
;;	 14--> b  0: i1260 {cx=cx^di;clobber flags;}               :athlon-direct,athlon-ieu
;;	 14--> b  0: i 613 flags=cmp(r9,0x5)                       :athlon-direct,athlon-ieu
;;	 15--> b  0: i 611 [bx+r8+0xd8]=cx                         :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i 614 pc={(leu(flags,0))?L1394:pc}            :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 15
;;   new head = 1258
;;   new tail = 614

;;   ======================================================
;;   -- basic block 16 from 633 to 634 -- after reload
;;   ======================================================

;;	  0--> b  0: i 633 flags=cmp(dx,0x377)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i 634 pc={(flags>0)?L665:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 633
;;   new tail = 634

;;   ======================================================
;;   -- basic block 17 from 636 to 650 -- after reload
;;   ======================================================

;;	  0--> b  0: i 636 r8=0x378                                :athlon-direct,athlon-ieu
;;	  1--> b  0: i1232 cx=r8                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 637 {cx=cx-dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 641 {dx=dx&0xfffffffffffffff8;clobber flags;}:athlon-direct,athlon-ieu
;;	  3--> b  0: i 642 {dx=dx+0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	  3--> b  0: i 638 cx=sxn(cx)                              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 645 {r8=r8-dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  4--> b  0: i 639 {ax=ax-cx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  4--> b  0: i 643 [bx+0x4]=dx                             :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 646 r8=sxn(r8)                              :athlon-direct,athlon-ieu
;;	  5--> b  0: i 640 [bx+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 649 flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  7--> b  0: i 650 pc={(flags!=0)?L1034:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 636
;;   new tail = 650

;;   ======================================================
;;   -- basic block 18 from 653 to 654 -- after reload
;;   ======================================================

;;	  0--> b  0: i 653 flags=cmp(dx,0x400)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i 654 pc={(flags==0)?L1034:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 653
;;   new tail = 654

;;   ======================================================
;;   -- basic block 19 from 733 to 736 -- after reload
;;   ======================================================

;;	  0--> b  0: i 733 {ax=ax-0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 735 flags=cmp(r10,0x180)                    :athlon-direct,athlon-ieu
;;	  0--> b  0: i1255 dx=sp+0x2c                              :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 734 [bx+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 736 pc={(flags==0)?L1317:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 733
;;   new tail = 736

;;   ======================================================
;;   -- basic block 20 from 1254 to 1254 -- after reload
;;   ======================================================

;;	  0--> b  0: i1254 dx=sp+0x2d                              :athlon-direct,athlon-agu,nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1254
;;   new tail = 1254

;;   ======================================================
;;   -- basic block 21 from 750 to 762 -- after reload
;;   ======================================================

;;	  0--> b  0: i 750 r8=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 752 cx=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 753 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  2--> b  0: i 754 ax=[bx+0xc8]                            :athlon-direct,athlon-load
;;	  2--> b  0: i 755 dx=[bx]                                 :athlon-direct,athlon-load
;;	  5--> b  0: i 758 {ax=ax-0x80;clobber flags;}             :athlon-direct,athlon-ieu
;;	  5--> b  0: i 761 flags=cmp(dx,0x17f)                     :athlon-direct,athlon-ieu
;;	  6--> b  0: i 759 [bx+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 762 pc={(flags>0)?L578:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 750
;;   new tail = 762

;;   ======================================================
;;   -- basic block 22 from 1263 to 575 -- after reload
;;   ======================================================

;;	  0--> b  0: i1263 dx=sp+0x30                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 572 r8=0x80                                 :athlon-direct,athlon-ieu
;;	  0--> b  0: i 574 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 575 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 1263
;;   new tail = 575

;;   ======================================================
;;   -- basic block 23 from 770 to 925 -- after reload
;;   ======================================================

;;	  0--> b  0: i 770 ax=zxn([bx+0x8f])                       :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 771 [si]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 774 ax=zxn([bx+0x8e])                       :athlon-direct,athlon-load,athlon-ieu
;;	  8--> b  0: i 775 [si+0x1]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i 777 ax=zxn([bx+0x8c])                       :athlon-direct,athlon-load,athlon-ieu
;;	 12--> b  0: i 778 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 13--> b  0: i 779 [si+0x2]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 13--> b  0: i 781 ax=zxn([bx+0x8c])                       :athlon-direct,athlon-load,athlon-ieu
;;	 17--> b  0: i 782 [si+0x3]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i 784 ax=zxn([bx+0x8b])                       :athlon-direct,athlon-load,athlon-ieu
;;	 21--> b  0: i 785 [si+0x4]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 21--> b  0: i 787 ax=zxn([bx+0x8a])                       :athlon-direct,athlon-load,athlon-ieu
;;	 25--> b  0: i 788 [si+0x5]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 25--> b  0: i1238 ax=[bx+0x88]                            :athlon-direct,athlon-load
;;	 28--> b  0: i 790 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 29--> b  0: i 791 [si+0x6]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 29--> b  0: i 792 ax=[bx+0x88]                            :athlon-direct,athlon-load
;;	 32--> b  0: i 793 [si+0x7]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 32--> b  0: i 796 ax=zxn([bx+0x97])                       :athlon-direct,athlon-load,athlon-ieu
;;	 36--> b  0: i 797 [si+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 36--> b  0: i 800 ax=zxn([bx+0x96])                       :athlon-direct,athlon-load,athlon-ieu
;;	 40--> b  0: i 801 [si+0x9]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 40--> b  0: i 803 ax=zxn([bx+0x94])                       :athlon-direct,athlon-load,athlon-ieu
;;	 44--> b  0: i 804 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 45--> b  0: i 805 [si+0xa]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 45--> b  0: i 807 ax=zxn([bx+0x94])                       :athlon-direct,athlon-load,athlon-ieu
;;	 49--> b  0: i 808 [si+0xb]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 49--> b  0: i 810 ax=zxn([bx+0x93])                       :athlon-direct,athlon-load,athlon-ieu
;;	 53--> b  0: i 811 [si+0xc]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 53--> b  0: i 813 ax=zxn([bx+0x92])                       :athlon-direct,athlon-load,athlon-ieu
;;	 57--> b  0: i 814 [si+0xd]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 57--> b  0: i1240 ax=[bx+0x90]                            :athlon-direct,athlon-load
;;	 60--> b  0: i 816 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 61--> b  0: i 817 [si+0xe]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 61--> b  0: i 818 ax=[bx+0x90]                            :athlon-direct,athlon-load
;;	 64--> b  0: i 819 [si+0xf]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 64--> b  0: i 822 ax=zxn([bx+0x9f])                       :athlon-direct,athlon-load,athlon-ieu
;;	 68--> b  0: i 823 [si+0x10]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 68--> b  0: i 826 ax=zxn([bx+0x9e])                       :athlon-direct,athlon-load,athlon-ieu
;;	 72--> b  0: i 827 [si+0x11]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 72--> b  0: i 829 ax=zxn([bx+0x9c])                       :athlon-direct,athlon-load,athlon-ieu
;;	 76--> b  0: i 830 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 77--> b  0: i 831 [si+0x12]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 77--> b  0: i 833 ax=zxn([bx+0x9c])                       :athlon-direct,athlon-load,athlon-ieu
;;	 81--> b  0: i 834 [si+0x13]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 81--> b  0: i 836 ax=zxn([bx+0x9b])                       :athlon-direct,athlon-load,athlon-ieu
;;	 85--> b  0: i 837 [si+0x14]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 85--> b  0: i 839 ax=zxn([bx+0x9a])                       :athlon-direct,athlon-load,athlon-ieu
;;	 89--> b  0: i 840 [si+0x15]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 89--> b  0: i1242 ax=[bx+0x98]                            :athlon-direct,athlon-load
;;	 92--> b  0: i 842 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 93--> b  0: i 843 [si+0x16]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 93--> b  0: i 844 ax=[bx+0x98]                            :athlon-direct,athlon-load
;;	 96--> b  0: i 845 [si+0x17]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 96--> b  0: i 848 ax=zxn([bx+0xa7])                       :athlon-direct,athlon-load,athlon-ieu
;;	100--> b  0: i 849 [si+0x18]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	100--> b  0: i 852 ax=zxn([bx+0xa6])                       :athlon-direct,athlon-load,athlon-ieu
;;	104--> b  0: i 853 [si+0x19]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	104--> b  0: i 855 ax=zxn([bx+0xa4])                       :athlon-direct,athlon-load,athlon-ieu
;;	108--> b  0: i 856 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	109--> b  0: i 857 [si+0x1a]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	109--> b  0: i 859 ax=zxn([bx+0xa4])                       :athlon-direct,athlon-load,athlon-ieu
;;	113--> b  0: i 860 [si+0x1b]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	113--> b  0: i 862 ax=zxn([bx+0xa3])                       :athlon-direct,athlon-load,athlon-ieu
;;	117--> b  0: i 863 [si+0x1c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	117--> b  0: i 865 ax=zxn([bx+0xa2])                       :athlon-direct,athlon-load,athlon-ieu
;;	121--> b  0: i 866 [si+0x1d]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	121--> b  0: i1244 ax=[bx+0xa0]                            :athlon-direct,athlon-load
;;	124--> b  0: i 868 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	125--> b  0: i 869 [si+0x1e]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	125--> b  0: i 870 ax=[bx+0xa0]                            :athlon-direct,athlon-load
;;	128--> b  0: i 871 [si+0x1f]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	128--> b  0: i 874 ax=zxn([bx+0xaf])                       :athlon-direct,athlon-load,athlon-ieu
;;	132--> b  0: i 875 [si+0x20]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	132--> b  0: i 878 ax=zxn([bx+0xae])                       :athlon-direct,athlon-load,athlon-ieu
;;	136--> b  0: i 879 [si+0x21]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	136--> b  0: i 881 ax=zxn([bx+0xac])                       :athlon-direct,athlon-load,athlon-ieu
;;	140--> b  0: i 882 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	141--> b  0: i 883 [si+0x22]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	141--> b  0: i 885 ax=zxn([bx+0xac])                       :athlon-direct,athlon-load,athlon-ieu
;;	145--> b  0: i 886 [si+0x23]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	145--> b  0: i 888 ax=zxn([bx+0xab])                       :athlon-direct,athlon-load,athlon-ieu
;;	149--> b  0: i 889 [si+0x24]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	149--> b  0: i 891 ax=zxn([bx+0xaa])                       :athlon-direct,athlon-load,athlon-ieu
;;	153--> b  0: i 892 [si+0x25]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	153--> b  0: i1246 ax=[bx+0xa8]                            :athlon-direct,athlon-load
;;	156--> b  0: i 894 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	157--> b  0: i 895 [si+0x26]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	157--> b  0: i 896 ax=[bx+0xa8]                            :athlon-direct,athlon-load
;;	160--> b  0: i 897 [si+0x27]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	160--> b  0: i 900 ax=zxn([bx+0xb7])                       :athlon-direct,athlon-load,athlon-ieu
;;	164--> b  0: i 901 [si+0x28]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	164--> b  0: i 904 ax=zxn([bx+0xb6])                       :athlon-direct,athlon-load,athlon-ieu
;;	168--> b  0: i 905 [si+0x29]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	168--> b  0: i 907 ax=zxn([bx+0xb4])                       :athlon-direct,athlon-load,athlon-ieu
;;	172--> b  0: i 908 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	173--> b  0: i 909 [si+0x2a]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	173--> b  0: i 911 ax=zxn([bx+0xb4])                       :athlon-direct,athlon-load,athlon-ieu
;;	177--> b  0: i 912 [si+0x2b]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	177--> b  0: i 914 ax=zxn([bx+0xb3])                       :athlon-direct,athlon-load,athlon-ieu
;;	181--> b  0: i 915 [si+0x2c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	181--> b  0: i 917 ax=zxn([bx+0xb2])                       :athlon-direct,athlon-load,athlon-ieu
;;	185--> b  0: i 918 [si+0x2d]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	185--> b  0: i1248 ax=[bx+0xb0]                            :athlon-direct,athlon-load
;;	188--> b  0: i 920 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	189--> b  0: i 921 [si+0x2e]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	189--> b  0: i 922 ax=[bx+0xb0]                            :athlon-direct,athlon-load
;;	192--> b  0: i 923 [si+0x2f]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	192--> b  0: i 924 flags=cmp([bx],0x200)                   :athlon-direct,athlon-load,athlon-ieu
;;	196--> b  0: i 925 pc={(flags!=0)?L1058:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 196
;;   new head = 770
;;   new tail = 925

;;   ======================================================
;;   -- basic block 24 from 929 to 1383 -- after reload
;;   ======================================================

;;	  0--> b  0: i 929 ax=zxn([bx+0xbf])                       :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 930 [si+0x30]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 933 ax=zxn([bx+0xbe])                       :athlon-direct,athlon-load,athlon-ieu
;;	  8--> b  0: i 934 [si+0x31]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i 936 ax=zxn([bx+0xbc])                       :athlon-direct,athlon-load,athlon-ieu
;;	 12--> b  0: i 937 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 13--> b  0: i 938 [si+0x32]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 13--> b  0: i 940 ax=zxn([bx+0xbc])                       :athlon-direct,athlon-load,athlon-ieu
;;	 17--> b  0: i 941 [si+0x33]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 17--> b  0: i 943 ax=zxn([bx+0xbb])                       :athlon-direct,athlon-load,athlon-ieu
;;	 21--> b  0: i 944 [si+0x34]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 21--> b  0: i 946 ax=zxn([bx+0xba])                       :athlon-direct,athlon-load,athlon-ieu
;;	 25--> b  0: i 947 [si+0x35]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 25--> b  0: i1250 ax=[bx+0xb8]                            :athlon-direct,athlon-load
;;	 28--> b  0: i 949 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 29--> b  0: i 950 [si+0x36]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 29--> b  0: i 951 ax=[bx+0xb8]                            :athlon-direct,athlon-load
;;	 32--> b  0: i 952 [si+0x37]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 32--> b  0: i 955 ax=zxn([bx+0xc7])                       :athlon-direct,athlon-load,athlon-ieu
;;	 36--> b  0: i 956 [si+0x38]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 36--> b  0: i 959 ax=zxn([bx+0xc6])                       :athlon-direct,athlon-load,athlon-ieu
;;	 40--> b  0: i 960 [si+0x39]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 40--> b  0: i 962 ax=zxn([bx+0xc4])                       :athlon-direct,athlon-load,athlon-ieu
;;	 44--> b  0: i 963 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 45--> b  0: i 964 [si+0x3a]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 45--> b  0: i 966 ax=zxn([bx+0xc4])                       :athlon-direct,athlon-load,athlon-ieu
;;	 49--> b  0: i 967 [si+0x3b]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 49--> b  0: i 969 ax=zxn([bx+0xc3])                       :athlon-direct,athlon-load,athlon-ieu
;;	 53--> b  0: i 970 [si+0x3c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 53--> b  0: i 972 ax=zxn([bx+0xc2])                       :athlon-direct,athlon-load,athlon-ieu
;;	 57--> b  0: i 973 [si+0x3d]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 57--> b  0: i1252 ax=[bx+0xc0]                            :athlon-direct,athlon-load
;;	 60--> b  0: i 975 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 61--> b  0: i 976 [si+0x3e]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 61--> b  0: i 977 ax=[bx+0xc0]                            :athlon-direct,athlon-load
;;	 64--> b  0: i 978 [si+0x3f]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 64--> b  0: i1374 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	 64--> b  0: i1375 use ax                                  :nothing
;;	 65--> b  0: i1377 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	 67--> b  0: i1378 {sp=sp+0x48;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 68--> b  0: i1379 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 69--> b  0: i1380 si=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 70--> b  0: i1381 di=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 71--> b  0: i1382 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 72--> b  0: i1383 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 72
;;   new head = 929
;;   new tail = 1383

;;   ======================================================
;;   -- basic block 25 from 15 to 42 -- after reload
;;   ======================================================

;;	  0--> b  0: i  15 r9=[cx+0x30]                            :athlon-direct,athlon-load
;;	  0--> b  0: i  16 ax=[cx+0x4]                             :athlon-direct,athlon-load
;;	  1--> b  0: i  19 cx=[cx+0x34]                            :athlon-direct,athlon-load
;;	  3--> b  0: i1161 dx=r9                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i1081 {flags=cmp(dx+ax,dx);dx=dx+ax;}         :athlon-direct,athlon-ieu
;;	  5--> b  0: i1082 {cx=ltu(flags,0)+cx+0;clobber flags;}   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  39 [sp+0x37]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i1163 r8=cx                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  32 [sp+0x33]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i  26 {r8=r8 0>>0x18;clobber flags;}          :athlon-direct,athlon-ieu
;;	  8--> b  0: i  27 [sp+0x30]=r8                            :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i1165 r8=cx                                   :athlon-direct,athlon-ieu
;;	  9--> b  0: i  28 {r8=r8 0>>0x10;clobber flags;}          :athlon-direct,athlon-ieu
;;	 10--> b  0: i  29 [sp+0x31]=r8                            :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i1167 r8=cx                                   :athlon-direct,athlon-ieu
;;	 10--> b  0: i1169 cx=dx                                   :athlon-direct,athlon-ieu
;;	 11--> b  0: i  33 {cx=cx 0>>0x18;clobber flags;}          :athlon-direct,athlon-ieu
;;	 11--> b  0: i  30 {r8=r8 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 12--> b  0: i  34 [sp+0x34]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i1171 cx=dx                                   :athlon-direct,athlon-ieu
;;	 12--> b  0: i  31 [sp+0x32]=r8                            :athlon-direct,athlon-agu,athlon-store
;;	 13--> b  0: i  35 {cx=cx 0>>0x10;clobber flags;}          :athlon-direct,athlon-ieu
;;	 14--> b  0: i  36 [sp+0x35]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i1173 cx=dx                                   :athlon-direct,athlon-ieu
;;	 15--> b  0: i  37 {cx=cx 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 15--> b  0: i1283 flags=cmp(ax&0x7,0)                     :athlon-direct,athlon-ieu
;;	 16--> b  0: i  38 [sp+0x36]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  42 pc={(flags==0)?L1395:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 16
;;   new head = 15
;;   new tail = 42

;;   ======================================================
;;   -- basic block 26 from 1274 to 172 -- after reload
;;   ======================================================

;;	  0--> b  0: i1274 r8=ax+0x7                               :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 149 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  0--> b  0: i1176 cx=ax                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 161 bp=0xff                                 :athlon-direct,athlon-ieu
;;	  1--> b  0: i 165 di=0x80                                 :athlon-direct,athlon-ieu
;;	  2--> b  0: i 150 r8={(flags<0)?r8:ax}                    :athlon-direct,athlon-ieu
;;	  2--> b  0: i 153 {cx=cx>>0x1f;clobber flags;}            :athlon-direct,athlon-ieu
;;	  3--> b  0: i 154 {cx=cx 0>>0x1d;clobber flags;}          :athlon-direct,athlon-ieu
;;	  3--> b  0: i 151 {r8=r8>>0x3;clobber flags;}             :athlon-direct,athlon-ieu
;;	  4--> b  0: i1275 r11=ax+cx                               :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i 163 r8=sxn(r8)                              :athlon-direct,athlon-ieu
;;	  6--> b  0: i 156 {r11=r11&0x7;clobber flags;}            :athlon-direct,athlon-ieu
;;	  7--> b  0: i 157 {r11=r11-cx;clobber flags;}             :athlon-direct,athlon-ieu
;;	  7--> b  0: i 159 cx=0x8                                  :athlon-direct,athlon-ieu
;;	  8--> b  0: i 160 {cx=cx-r11;clobber flags;}              :athlon-direct,athlon-ieu
;;	  9--> b  0: i 162 {bp=bp<<cx;clobber flags;}              :athlon-direct,athlon-ieu
;;	  9--> b  0: i1180 cx=r11                                  :athlon-direct,athlon-ieu
;;	  9--> b  0: i 164 {bp=bp&[bx+r8+0x38];clobber flags;}     :athlon-direct,athlon-load,athlon-ieu
;;	 10--> b  0: i 166 {di=di>>cx;clobber flags;}              :athlon-direct,athlon-ieu
;;	 11--> b  0: i1179 cx=di                                   :athlon-direct,athlon-ieu
;;	 11--> b  0: i1277 di=ax-0x1b9                             :athlon-direct,athlon-agu,nothing
;;	 13--> b  0: i1276 {cx=cx^bp;clobber flags;}               :athlon-direct,athlon-ieu
;;	 13--> b  0: i 171 flags=cmp(di,0x5)                       :athlon-direct,athlon-ieu
;;	 14--> b  0: i 169 [bx+r8+0x38]=cx                         :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i 172 pc={(gtu(flags,0))?L187:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 14
;;   new head = 1274
;;   new tail = 172

;;   ======================================================
;;   -- basic block 27 from 174 to 175 -- after reload
;;   ======================================================

;;	  0--> b  0: i 174 flags=cmp(r10,0xe0)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i 175 pc={(flags==0)?L180:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 174
;;   new tail = 175

;;   ======================================================
;;   -- basic block 28 from 1273 to 179 -- after reload
;;   ======================================================

;;	  0--> b  0: i1273 {cx=cx^0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 179 [bx+r8+0x38]=cx                         :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 1
;;   new head = 1273
;;   new tail = 179

;;   ======================================================
;;   -- basic block 29 from 183 to 184 -- after reload
;;   ======================================================

;;	  0--> b  0: i 183 ax=r9+r11-0x8                           :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 184 [bx+0x4]=0x1c0                          :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 183
;;   new tail = 184

;;   ======================================================
;;   -- basic block 30 from 301 to 388 -- after reload
;;   ======================================================

;;	  0--> b  0: i 301 {ax=ax-0x40;clobber flags;}             :athlon-direct,athlon-ieu
;;	  0--> b  0: i1270 dx=sp+0x30                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 304 r8=0x40                                 :athlon-direct,athlon-ieu
;;	  1--> b  0: i 302 [bx+0x30]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 306 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 307 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 311 ax=zxn([bx+0x13])                       :athlon-direct,athlon-load,athlon-ieu
;;	  7--> b  0: i 312 [si]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 314 ax=zxn([bx+0x12])                       :athlon-direct,athlon-load,athlon-ieu
;;	 11--> b  0: i 315 [si+0x1]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 11--> b  0: i1181 ax=[bx+0x10]                            :athlon-direct,athlon-load
;;	 14--> b  0: i 317 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 15--> b  0: i 318 [si+0x2]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i 319 ax=[bx+0x10]                            :athlon-direct,athlon-load
;;	 18--> b  0: i 320 [si+0x3]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i 322 ax=zxn([bx+0x17])                       :athlon-direct,athlon-load,athlon-ieu
;;	 22--> b  0: i 323 [si+0x4]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 22--> b  0: i 325 ax=zxn([bx+0x16])                       :athlon-direct,athlon-load,athlon-ieu
;;	 26--> b  0: i 326 [si+0x5]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 26--> b  0: i1183 ax=[bx+0x14]                            :athlon-direct,athlon-load
;;	 29--> b  0: i 328 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 30--> b  0: i 329 [si+0x6]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 30--> b  0: i 330 ax=[bx+0x14]                            :athlon-direct,athlon-load
;;	 33--> b  0: i 331 [si+0x7]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 33--> b  0: i 333 ax=zxn([bx+0x1b])                       :athlon-direct,athlon-load,athlon-ieu
;;	 37--> b  0: i 334 [si+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 37--> b  0: i 336 ax=zxn([bx+0x1a])                       :athlon-direct,athlon-load,athlon-ieu
;;	 41--> b  0: i 337 [si+0x9]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 41--> b  0: i1185 ax=[bx+0x18]                            :athlon-direct,athlon-load
;;	 44--> b  0: i 339 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 45--> b  0: i 340 [si+0xa]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 45--> b  0: i 341 ax=[bx+0x18]                            :athlon-direct,athlon-load
;;	 48--> b  0: i 342 [si+0xb]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 48--> b  0: i 344 ax=zxn([bx+0x1f])                       :athlon-direct,athlon-load,athlon-ieu
;;	 52--> b  0: i 345 [si+0xc]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 52--> b  0: i 347 ax=zxn([bx+0x1e])                       :athlon-direct,athlon-load,athlon-ieu
;;	 56--> b  0: i 348 [si+0xd]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 56--> b  0: i1187 ax=[bx+0x1c]                            :athlon-direct,athlon-load
;;	 59--> b  0: i 350 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 60--> b  0: i 351 [si+0xe]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 60--> b  0: i 352 ax=[bx+0x1c]                            :athlon-direct,athlon-load
;;	 63--> b  0: i 353 [si+0xf]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 63--> b  0: i 355 ax=zxn([bx+0x23])                       :athlon-direct,athlon-load,athlon-ieu
;;	 67--> b  0: i 356 [si+0x10]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 67--> b  0: i 358 ax=zxn([bx+0x22])                       :athlon-direct,athlon-load,athlon-ieu
;;	 71--> b  0: i 359 [si+0x11]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 71--> b  0: i1189 ax=[bx+0x20]                            :athlon-direct,athlon-load
;;	 74--> b  0: i 361 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 75--> b  0: i 362 [si+0x12]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 75--> b  0: i 363 ax=[bx+0x20]                            :athlon-direct,athlon-load
;;	 78--> b  0: i 364 [si+0x13]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 78--> b  0: i 366 ax=zxn([bx+0x27])                       :athlon-direct,athlon-load,athlon-ieu
;;	 82--> b  0: i 367 [si+0x14]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 82--> b  0: i 369 ax=zxn([bx+0x26])                       :athlon-direct,athlon-load,athlon-ieu
;;	 86--> b  0: i 370 [si+0x15]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 86--> b  0: i1191 ax=[bx+0x24]                            :athlon-direct,athlon-load
;;	 89--> b  0: i 372 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 90--> b  0: i 373 [si+0x16]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 90--> b  0: i 374 ax=[bx+0x24]                            :athlon-direct,athlon-load
;;	 93--> b  0: i 375 [si+0x17]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 93--> b  0: i 377 ax=zxn([bx+0x2b])                       :athlon-direct,athlon-load,athlon-ieu
;;	 97--> b  0: i 378 [si+0x18]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 97--> b  0: i 380 ax=zxn([bx+0x2a])                       :athlon-direct,athlon-load,athlon-ieu
;;	101--> b  0: i 381 [si+0x19]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	101--> b  0: i1193 ax=[bx+0x28]                            :athlon-direct,athlon-load
;;	104--> b  0: i 383 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	105--> b  0: i 384 [si+0x1a]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	105--> b  0: i 385 ax=[bx+0x28]                            :athlon-direct,athlon-load
;;	108--> b  0: i 386 [si+0x1b]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	108--> b  0: i 387 flags=cmp([bx],0x100)                   :athlon-direct,athlon-load,athlon-ieu
;;	112--> b  0: i 388 pc={(flags!=0)?L1058:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 112
;;   new head = 301
;;   new tail = 388

;;   ======================================================
;;   -- basic block 31 from 391 to 400 -- after reload
;;   ======================================================

;;	  0--> b  0: i 391 ax=zxn([bx+0x2f])                       :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 392 [si+0x1c]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 394 ax=zxn([bx+0x2e])                       :athlon-direct,athlon-load,athlon-ieu
;;	  8--> b  0: i 395 [si+0x1d]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i1195 ax=[bx+0x2c]                            :athlon-direct,athlon-load
;;	 11--> b  0: i 397 {ax=ax 0>>0x8;clobber flags;}           :athlon-direct,athlon-ieu
;;	 12--> b  0: i 398 [si+0x1e]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i 399 ax=[bx+0x2c]                            :athlon-direct,athlon-load
;;	 15--> b  0: i 400 [si+0x1f]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 15
;;   new head = 391
;;   new tail = 400

;;   ======================================================
;;   -- basic block 32 from 1371 to 1300 -- after reload
;;   ======================================================

;;	  0--> b  0: i1371 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i1016 use ax                                  :nothing
;;	  1--> b  0: i1294 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	  3--> b  0: i1295 {sp=sp+0x48;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  4--> b  0: i1296 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i1297 si=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i1298 di=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i1299 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  8--> b  0: i1300 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 1371
;;   new tail = 1300

;;   ======================================================
;;   -- basic block 33 from 44 to 45 -- after reload
;;   ======================================================

;;	  0--> b  0: i  44 flags=cmp(ax,0x1b8)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i  45 pc={(flags==0)?L1396:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 44
;;   new tail = 45

;;   ======================================================
;;   -- basic block 34 from 72 to 73 -- after reload
;;   ======================================================

;;	  0--> b  0: i  72 flags=cmp(ax,0x1b7)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i  73 pc={(flags>0)?L81:pc}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 72
;;   new tail = 73

;;   ======================================================
;;   -- basic block 35 from 75 to 76 -- after reload
;;   ======================================================

;;	  0--> b  0: i  75 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  76 pc={(flags==0)?L1397:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 75
;;   new tail = 76

;;   ======================================================
;;   -- basic block 36 from 988 to 996 -- after reload
;;   ======================================================

;;	  0--> b  0: i 988 {dx=dx-0x1b8;clobber flags;}            :athlon-direct,athlon-ieu
;;	  0--> b  0: i 990 r8=0x1b8                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i 995 cx=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 989 [bx+0x30]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 991 {r8=r8-ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	  1--> b  0: i 994 dx=`padding'                            :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i 993 r8=sxn(r8)                              :athlon-direct,athlon-ieu
;;	  3--> b  0: i 996 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 988
;;   new tail = 996

;;   ======================================================
;;   -- basic block 37 from 113 to 114 -- after reload
;;   ======================================================

;;	  0--> b  0: i 113 flags=cmp([bx],0xe0)                    :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 114 pc={(flags==0)?L1398:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 113
;;   new tail = 114

;;   ======================================================
;;   -- basic block 38 from 1279 to 129 -- after reload
;;   ======================================================

;;	  0--> b  0: i1279 dx=sp+0x2d                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 126 r8=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 128 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 129 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 1279
;;   new tail = 129

;;   ======================================================
;;   -- basic block 39 from 1175 to 1399 -- after reload
;;   ======================================================

;;	  0--> b  0: i1175 ax=[bx+0x30]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 133 {ax=ax-0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	  3--> b  0: i1399 pc=L299                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1175
;;   new tail = 1399

;;   ======================================================
;;   -- basic block 40 from 616 to 617 -- after reload
;;   ======================================================

;;	  0--> b  0: i 616 flags=cmp(r10,0x180)                    :athlon-direct,athlon-ieu
;;	  1--> b  0: i 617 pc={(flags==0)?L622:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 616
;;   new tail = 617

;;   ======================================================
;;   -- basic block 41 from 1257 to 621 -- after reload
;;   ======================================================

;;	  0--> b  0: i1257 {cx=cx^0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 621 [bx+r8+0xd8]=cx                         :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 1
;;   new head = 1257
;;   new tail = 621

;;   ======================================================
;;   -- basic block 42 from 624 to 628 -- after reload
;;   ======================================================

;;	  0--> b  0: i 625 bp=sxn(bp)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 624 [bx+0x4]=0x380                          :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 626 {ax=ax-bp;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 627 {ax=ax-0x80;clobber flags;}             :athlon-direct,athlon-ieu
;;	  3--> b  0: i 628 [bx+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 3
;;   new head = 625
;;   new tail = 628

;;   ======================================================
;;   -- basic block 43 from 1262 to 1401 -- after reload
;;   ======================================================

;;	  0--> b  0: i1262 dx=sp+0x30                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 581 r8=0x80                                 :athlon-direct,athlon-ieu
;;	  0--> b  0: i 583 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 584 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i1401 pc=L766                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1262
;;   new tail = 1401

;;   ======================================================
;;   -- basic block 44 from 492 to 493 -- after reload
;;   ======================================================

;;	  0--> b  0: i 492 flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 493 pc={(flags!=0)?L1000:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 492
;;   new tail = 493

;;   ======================================================
;;   -- basic block 45 from 495 to 495 -- after reload
;;   ======================================================

;;	  0--> b  0: i 495 [bx+0xc]=0x1                            :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 495
;;   new tail = 495

;;   ======================================================
;;   -- basic block 46 from 1002 to 1403 -- after reload
;;   ======================================================

;;	  0--> b  0: i1002 r8=0x378                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i1009 cx=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i1003 {r8=r8-dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  1--> b  0: i1008 dx=`padding'                            :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i1004 r8=sxn(r8)                              :athlon-direct,athlon-ieu
;;	  3--> b  0: i1005 {ax=ax-r8;clobber flags;}               :athlon-direct,athlon-ieu
;;	  4--> b  0: i1006 [bx+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i1010 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  6--> b  0: i1403 pc=L1011                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 1002
;;   new tail = 1403

;;   ======================================================
;;   -- basic block 47 from 189 to 190 -- after reload
;;   ======================================================

;;	  0--> b  0: i 189 flags=cmp(ax,0x1b7)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i 190 pc={(flags<=0)?L1405:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 189
;;   new tail = 190

;;   ======================================================
;;   -- basic block 48 from 223 to 221 -- after reload
;;   ======================================================

;;	  0--> b  0: i 223 {dx=dx-0x200;clobber flags;}            :athlon-direct,athlon-ieu
;;	  0--> b  0: i 220 flags=cmp(ax,0x1f8)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i 224 [bx+0x30]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 221 pc={(flags>0)?L1406:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 223
;;   new tail = 221

;;   ======================================================
;;   -- basic block 49 from 244 to 253 -- after reload
;;   ======================================================

;;	  0--> b  0: i 244 {ax=ax&0xfffffffffffffff8;clobber flags;}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 247 r8=0x200                                :athlon-direct,athlon-ieu
;;	  1--> b  0: i 245 {ax=ax+0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	  2--> b  0: i 248 {r8=r8-ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 252 flags=cmp(ax,0x200)                     :athlon-direct,athlon-ieu
;;	  2--> b  0: i 246 [bx+0x4]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 249 r8=sxn(r8)                              :athlon-direct,athlon-ieu
;;	  3--> b  0: i 253 pc={(flags==0)?L1032:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 244
;;   new tail = 253

;;   ======================================================
;;   -- basic block 50 from 256 to 257 -- after reload
;;   ======================================================

;;	  0--> b  0: i 256 flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 257 pc={(flags!=0)?L1032:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 256
;;   new tail = 257

;;   ======================================================
;;   -- basic block 51 from 267 to 268 -- after reload
;;   ======================================================

;;	  0--> b  0: i 267 {dx=dx-0x1b8;clobber flags;}            :athlon-direct,athlon-ieu
;;	  1--> b  0: i 268 [bx+0x30]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 1
;;   new head = 267
;;   new tail = 268

;;   ======================================================
;;   -- basic block 52 from 269 to 275 -- after reload
;;   ======================================================

;;	  0--> b  0: i 270 dx=const(`padding'+0x1)                 :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 269 r8=0x1b8                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i 271 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 272 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 274 dx=[bx+0x30]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 275 r10=[bx]                                :athlon-direct,athlon-load
;;	  4--> b  0: i 273 [bx+0xc]=0x1                            :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 4
;;   new head = 270
;;   new tail = 273

;;   ======================================================
;;   -- basic block 53 from 278 to 281 -- after reload
;;   ======================================================

;;	  0--> b  0: i 278 {dx=dx-0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 280 flags=cmp(r10,0xe0)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i 279 [bx+0x30]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 281 pc={(flags==0)?L1407:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 278
;;   new tail = 281

;;   ======================================================
;;   -- basic block 54 from 1271 to 1408 -- after reload
;;   ======================================================

;;	  0--> b  0: i1271 dx=sp+0x2d                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 294 r8=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 296 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 297 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 298 ax=[bx+0x30]                            :athlon-direct,athlon-load
;;	  3--> b  0: i1408 pc=L299                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1271
;;   new tail = 1408

;;   ======================================================
;;   -- basic block 55 from 464 to 467 -- after reload
;;   ======================================================

;;	  0--> b  0: i 464 {ax=ax-0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 466 flags=cmp(r10,0x180)                    :athlon-direct,athlon-ieu
;;	  1--> b  0: i 465 [bx+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 467 pc={(flags==0)?L1410:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 464
;;   new tail = 467

;;   ======================================================
;;   -- basic block 56 from 1267 to 1411 -- after reload
;;   ======================================================

;;	  0--> b  0: i1267 dx=sp+0x2f                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 480 r8=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 482 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 483 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 484 ax=[bx+0xc8]                            :athlon-direct,athlon-load
;;	  3--> b  0: i1411 pc=L564                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1267
;;   new tail = 1411

;;   ======================================================
;;   -- basic block 57 from 559 to 1413 -- after reload
;;   ======================================================

;;	  0--> b  0: i 559 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  1--> b  0: i1413 pc=L560                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 559
;;   new tail = 1413

;;   ======================================================
;;   -- basic block 58 from 667 to 668 -- after reload
;;   ======================================================

;;	  0--> b  0: i 667 flags=cmp(dx,0x3f8)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i 668 pc={(flags>0)?L1415:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 667
;;   new tail = 668

;;   ======================================================
;;   -- basic block 59 from 694 to 708 -- after reload
;;   ======================================================

;;	  0--> b  0: i 694 r8=0x400                                :athlon-direct,athlon-ieu
;;	  1--> b  0: i1236 cx=r8                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 695 {cx=cx-dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 699 {dx=dx&0xfffffffffffffff8;clobber flags;}:athlon-direct,athlon-ieu
;;	  3--> b  0: i 700 {dx=dx+0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	  3--> b  0: i 696 cx=sxn(cx)                              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 703 {r8=r8-dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  4--> b  0: i 697 {ax=ax-cx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  4--> b  0: i 701 [bx+0x4]=dx                             :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 704 r8=sxn(r8)                              :athlon-direct,athlon-ieu
;;	  5--> b  0: i 698 [bx+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 707 flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  7--> b  0: i 708 pc={(flags!=0)?L1035:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 694
;;   new tail = 708

;;   ======================================================
;;   -- basic block 60 from 711 to 712 -- after reload
;;   ======================================================

;;	  0--> b  0: i 711 flags=cmp(dx,0x400)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i 712 pc={(flags==0)?L1035:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 711
;;   new tail = 712

;;   ======================================================
;;   -- basic block 61 from 722 to 1416 -- after reload
;;   ======================================================

;;	  0--> b  0: i 722 {ax=ax-0x378;clobber flags;}            :athlon-direct,athlon-ieu
;;	  1--> b  0: i 723 [bx+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i1416 pc=L1312                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 722
;;   new tail = 1416

;;   ======================================================
;;   -- basic block 62 from 670 to 682 -- after reload
;;   ======================================================

;;	  0--> b  0: i 671 cx=0x400                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i 670 [bx+0x4]=0x400                          :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 672 {cx=cx-dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i1235 dx=sxn(cx)                              :athlon-direct,athlon-ieu
;;	  2--> b  0: i 679 cx=bx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 674 {ax=ax-dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  3--> b  0: i1256 dx=bx+0xd8                              :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i 675 {ax=ax+0x400;clobber flags;}            :athlon-direct,athlon-ieu
;;	  5--> b  0: i 676 [bx+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 680 ax=call [`compress64']                  :athlon-vector,athlon-ieu
;;	  7--> b  0: i 682 {[bx+0xc8]=[bx+0xc8]-0x378;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	  7--> b  0: i 681 [bx+0x4]=0                              :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 7
;;   new head = 671
;;   new tail = 681

;;   ======================================================
;;   -- basic block 63 from 724 to 1418 -- after reload
;;   ======================================================

;;	  0--> b  0: i 725 dx=const(`padding'+0x1)                 :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 724 r8=0x378                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i 726 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 727 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 728 [bx+0xc]=0x1                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 729 ax=[bx+0xc8]                            :athlon-direct,athlon-load
;;	  4--> b  0: i 730 r10=[bx]                                :athlon-direct,athlon-load
;;	  4--> b  0: i1418 pc=L731                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 725
;;   new tail = 1418

;;   ======================================================
;;   -- basic block 64 from 83 to 91 -- after reload
;;   ======================================================

;;	  0--> b  0: i  85 r8=0x200                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i  83 {dx=dx-0x200;clobber flags;}            :athlon-direct,athlon-ieu
;;	  1--> b  0: i  86 {r8=r8-ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	  1--> b  0: i  84 [bx+0x30]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  87 r8=sxn(r8)                              :athlon-direct,athlon-ieu
;;	  3--> b  0: i  90 flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  91 pc={(flags!=0)?L1030:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 85
;;   new tail = 91

;;   ======================================================
;;   -- basic block 65 from 94 to 95 -- after reload
;;   ======================================================

;;	  0--> b  0: i  94 flags=cmp(ax,0x200)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i  95 pc={(flags==0)?L1030:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 94
;;   new tail = 95

;;   ======================================================
;;   -- basic block 66 from 105 to 1420 -- after reload
;;   ======================================================

;;	  0--> b  0: i 105 {dx=dx-0x1b8;clobber flags;}            :athlon-direct,athlon-ieu
;;	  0--> b  0: i 107 r8=0x1b8                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i 109 cx=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 106 [bx+0x30]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 108 dx=const(`padding'+0x1)                 :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i 110 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  4--> b  0: i 111 [bx+0xc]=0x1                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i1420 pc=L997                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 105
;;   new tail = 1420

;;   ======================================================
;;   -- basic block 67 from 1266 to 1422 -- after reload
;;   ======================================================

;;	  0--> b  0: i1266 dx=sp+0x2c                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 535 r8=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 537 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 538 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i1422 pc=L560                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1266
;;   new tail = 1422

;;   ======================================================
;;   -- basic block 68 from 47 to 50 -- after reload
;;   ======================================================

;;	  0--> b  0: i  47 {r9=r9-0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	  0--> b  0: i  49 flags=cmp(r10,0xe0)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i  48 [bx+0x30]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  50 pc={(flags==0)?L1424:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 47
;;   new tail = 50

;;   ======================================================
;;   -- basic block 69 from 1281 to 1425 -- after reload
;;   ======================================================

;;	  0--> b  0: i1281 dx=sp+0x2f                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  63 r8=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i  65 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  66 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i  67 ax=[bx+0x30]                            :athlon-direct,athlon-load
;;	  3--> b  0: i1425 pc=L299                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1281
;;   new tail = 1425

;;   ======================================================
;;   -- basic block 70 from 516 to 1427 -- after reload
;;   ======================================================

;;	  0--> b  0: i 516 dx=`padding'                            :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 517 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 518 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 519 ax=[bx+0xc8]                            :athlon-direct,athlon-load
;;	  3--> b  0: i1427 pc=L520                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 516
;;   new tail = 1427

;;   ======================================================
;;   -- basic block 71 from 78 to 1429 -- after reload
;;   ======================================================

;;	  0--> b  0: i  78 [bx+0xc]=0x1                            :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i1429 pc=L986                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 78
;;   new tail = 1429

;;   ======================================================
;;   -- basic block 72 from 225 to 1431 -- after reload
;;   ======================================================

;;	  0--> b  0: i 227 dx=const(`padding'+0x1)                 :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 225 [bx+0x4]=0x200                          :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i1372 {r8=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 228 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 229 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 230 {[bx+0x30]=[bx+0x30]-0x1b8;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	  3--> b  0: i1431 pc=L1304                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 227
;;   new tail = 1431

;;   ======================================================
;;   -- basic block 73 from 1282 to 1433 -- after reload
;;   ======================================================

;;	  0--> b  0: i1282 dx=sp+0x2e                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  53 r8=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i  55 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  56 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i  57 ax=[bx+0x30]                            :athlon-direct,athlon-load
;;	  3--> b  0: i1433 pc=L299                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1282
;;   new tail = 1433

;;   ======================================================
;;   -- basic block 74 from 716 to 1435 -- after reload
;;   ======================================================

;;	  0--> b  0: i 716 dx=const(`padding'+0x1)                 :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 717 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 718 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 719 ax=[bx+0xc8]                            :athlon-direct,athlon-load
;;	  3--> b  0: i1435 pc=L720                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 716
;;   new tail = 1435

;;   ======================================================
;;   -- basic block 75 from 1280 to 1437 -- after reload
;;   ======================================================

;;	  0--> b  0: i1280 dx=sp+0x2c                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 117 r8=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 119 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 120 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i1437 pc=L130                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1280
;;   new tail = 1437

;;   ======================================================
;;   -- basic block 76 from 658 to 1439 -- after reload
;;   ======================================================

;;	  0--> b  0: i 658 dx=const(`padding'+0x1)                 :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 659 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 660 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 661 ax=[bx+0xc8]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 662 r10=[bx]                                :athlon-direct,athlon-load
;;	  3--> b  0: i1439 pc=L731                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 658
;;   new tail = 1439

;;   ======================================================
;;   -- basic block 77 from 99 to 1441 -- after reload
;;   ======================================================

;;	  0--> b  0: i  99 dx=`padding'                            :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 100 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 101 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 102 dx=[bx+0x30]                            :athlon-direct,athlon-load
;;	  3--> b  0: i1441 pc=L103                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 99
;;   new tail = 1441

;;   ======================================================
;;   -- basic block 78 from 192 to 203 -- after reload
;;   ======================================================

;;	  0--> b  0: i 194 {ax=ax&0xfffffffffffffff8;clobber flags;}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 197 r8=0x1b8                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i 192 {dx=dx-0x1b8;clobber flags;}            :athlon-direct,athlon-ieu
;;	  1--> b  0: i 195 {ax=ax+0x8;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 193 [bx+0x30]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 198 {r8=r8-ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 196 [bx+0x4]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 199 r8=sxn(r8)                              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 202 flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i 203 pc={(flags!=0)?L1031:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 194
;;   new tail = 203

;;   ======================================================
;;   -- basic block 79 from 206 to 207 -- after reload
;;   ======================================================

;;	  0--> b  0: i 206 flags=cmp(ax,0x200)                     :athlon-direct,athlon-ieu
;;	  1--> b  0: i 207 pc={(flags!=0)?L276:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 206
;;   new tail = 207

;;   ======================================================
;;   -- basic block 80 from 211 to 1443 -- after reload
;;   ======================================================

;;	  0--> b  0: i 211 dx=const(`padding'+0x1)                 :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 212 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 213 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 214 dx=[bx+0x30]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 215 r10=[bx]                                :athlon-direct,athlon-load
;;	  3--> b  0: i1443 pc=L276                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 211
;;   new tail = 1443

;;   ======================================================
;;   -- basic block 81 from 1272 to 1445 -- after reload
;;   ======================================================

;;	  0--> b  0: i1272 dx=sp+0x2c                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 284 r8=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 286 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 287 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 288 ax=[bx+0x30]                            :athlon-direct,athlon-load
;;	  3--> b  0: i1445 pc=L299                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1272
;;   new tail = 1445

;;   ======================================================
;;   -- basic block 82 from 261 to 1447 -- after reload
;;   ======================================================

;;	  0--> b  0: i 261 dx=const(`padding'+0x1)                 :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 262 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 263 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 264 dx=[bx+0x30]                            :athlon-direct,athlon-load
;;	  3--> b  0: i1447 pc=L265                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 261
;;   new tail = 1447

;;   ======================================================
;;   -- basic block 83 from 1268 to 1449 -- after reload
;;   ======================================================

;;	  0--> b  0: i1268 dx=sp+0x2e                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 470 r8=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 472 cx=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 473 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  3--> b  0: i 474 ax=[bx+0xc8]                            :athlon-direct,athlon-load
;;	  3--> b  0: i1449 pc=L564                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1268
;;   new tail = 1449



starting the processing of deferred insns
ending the processing of deferred insns


Final

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11]
;;  ref usage 	r0={189d,184u,5e} r1={79d,81u} r2={93d,85u,1e} r3={4d,201u,39e} r4={4d,98u} r5={9d,8u} r6={9d,9u,1e} r7={16d,174u} r8={29d} r9={29d} r10={29d} r11={29d} r12={29d} r13={29d} r14={29d} r15={29d} r16={2e} r17={193d,44u} r18={29d} r19={29d} r21={30d} r22={30d} r23={30d} r24={30d} r25={28d} r26={28d} r29={28d} r30={28d} r31={28d} r32={28d} r33={28d} r34={28d} r35={28d} r36={28d} r37={97d,89u} r38={49d,24u} r39={34d,7u} r40={41d,15u,4e} r53={29d} r54={29d} r55={29d} r56={29d} r57={29d} r58={29d} r59={29d} r60={29d} r61={29d} r62={29d} r63={29d} r64={29d} r65={29d} r66={29d} r67={29d} r68={29d} r69={29d} r70={29d} r71={29d} r72={29d} r73={29d} r74={29d} r75={29d} r76={29d} r77={29d} r78={29d} r79={29d} r80={29d} 
;;    total ref usage 3390{2319d,1019u,52e} in 712{683 regular + 29 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 3 [bx] 4 [si] 7 [sp] 17 [flags] 39 [r10]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 4 [si] 7 [sp] 17 [flags] 39 [r10]
;; live  kill	 17 [flags]
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 1286 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 1286 4 1287 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) blake_ref.c:653 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f 1287 1286 1288 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 5 di)) blake_ref.c:653 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil)))
(insn/f:TI 1288 1287 1289 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 4 si)) blake_ref.c:653 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si)
        (nil)))
(insn/f 1289 1288 1290 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) blake_ref.c:653 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 1290 1289 1291 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -72 [0xffffffffffffffb8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:653 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -72 [0xffffffffffffffb8])))
            (nil))))
(insn:TI 1291 1290 1292 2 (unspec_volatile [
            (reg/f:DI 7 sp)
        ] UNSPECV_PROLOGUE_USE) blake_ref.c:653 679 {prologue_use}
     (nil))
(note 1292 1291 7 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 7 1292 2 2 (set (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (mem:SI (reg/f:DI 2 cx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) blake_ref.c:655 90 {*movsi_internal}
     (nil))
(insn:TI 2 7 3 2 (set (reg/v/f:DI 3 bx [orig:633 state ] [633])
        (reg:DI 2 cx [ state ])) blake_ref.c:653 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 11 2 (set (reg/v/f:DI 4 si [orig:634 hashval ] [634])
        (reg:DI 1 dx [ hashval ])) blake_ref.c:653 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ hashval ])
        (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [4 hashval+0 S8 A64])
            (nil))))
(insn 11 3 12 2 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 44 [0x2c])) [0  S1 A32])
        (const_int 0 [0])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn:TI 12 11 13 2 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 45 [0x2d])) [0  S1 A8])
        (const_int 1 [0x1])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 13 12 8 2 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 46 [0x2e])) [0  S1 A16])
        (const_int -128 [0xffffffffffffff80])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn:TI 8 13 14 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 383 [0x17f]))) blake_ref.c:655 7 {*cmpsi_1}
     (nil))
(insn 14 8 9 2 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 47 [0x2f])) [0  S1 A8])
        (const_int -127 [0xffffffffffffff81])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(jump_insn:TI 9 14 406 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1387)
            (pc))) blake_ref.c:655 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 3900 (nil)))
 -> 1387)
;;  succ:       25 [39.0%]  (CAN_FALLTHRU)
;;              3 [61.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 3, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [61.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
(note 406 9 414 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 414 406 457 3 NOTE_INSN_DELETED)
(note 457 414 411 3 NOTE_INSN_DELETED)
(insn:TI 411 457 412 3 (set (reg:DI 0 ax [orig:241 D.6036 ] [241])
        (mem:DI (plus:DI (reg/f:DI 2 cx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) blake_ref.c:539 89 {*movdi_internal}
     (nil))
(insn 412 411 415 3 (set (reg:DI 2 cx)
        (sign_extend:DI (mem:SI (plus:DI (reg/f:DI 2 cx [orig:633 state ] [633])
                    (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32]))) blake_ref.c:539 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 415 412 1285 3 (set (reg/v:DI 37 r8 [orig:245 high ] [245])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 208 [0xd0])) [3 state_4(D)->t64+8 S8 A64])) blake_ref.c:540 89 {*movdi_internal}
     (nil))
(insn:TI 1285 415 1083 3 (set (reg:DI 1 dx)
        (reg:DI 2 cx)) blake_ref.c:539 89 {*movdi_internal}
     (nil))
(insn 1083 1285 1084 3 (parallel [
            (set (reg:CCC 17 flags)
                (compare:CCC (plus:DI (reg:DI 2 cx [orig:243 D.6036 ] [243])
                        (reg:DI 0 ax [orig:241 D.6036 ] [241]))
                    (reg:DI 2 cx [orig:243 D.6036 ] [243])))
            (set (reg/v:DI 2 cx [orig:244 low ] [244])
                (plus:DI (reg:DI 2 cx [orig:243 D.6036 ] [243])
                    (reg:DI 0 ax [orig:241 D.6036 ] [241])))
        ]) blake_ref.c:542 303 {*adddi3_cc_overflow}
     (nil))
(insn:TI 1084 1083 455 3 (parallel [
            (set (reg/v:DI 37 r8 [orig:245 high ] [245])
                (plus:DI (plus:DI (ltu:DI (reg:CCC 17 flags)
                            (const_int 0 [0]))
                        (reg/v:DI 37 r8 [orig:245 high ] [245]))
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:542 285 {adddi3_carry}
     (expr_list:REG_DEAD (reg:CCC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 455 1084 1197 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 63 [0x3f])) [0 msglen+15 S1 A8])
        (reg:QI 2 cx [orig:244 low ] [244])) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 2 cx [orig:244 low ] [244])
        (nil)))
(insn:TI 1197 455 438 3 (set (reg:DI 38 r9 [orig:246 D.6036 ] [246])
        (reg/v:DI 37 r8 [orig:245 high ] [245])) blake_ref.c:543 89 {*movdi_internal}
     (nil))
(insn 438 1197 422 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 55 [0x37])) [0 msglen+7 S1 A8])
        (reg:QI 37 r8 [orig:245 high ] [245])) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 37 r8 [orig:245 high ] [245])
        (nil)))
(insn:TI 422 438 1199 3 (parallel [
            (set (reg:DI 38 r9 [orig:246 D.6036 ] [246])
                (lshiftrt:DI (reg:DI 38 r9 [orig:246 D.6036 ] [246])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 1199 422 430 3 (set (reg:SI 40 r11 [orig:755 D.6032 ] [755])
        (reg:SI 38 r9 [orig:246 D.6036 ] [246])) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn 430 1199 424 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 51 [0x33])) [0 msglen+3 S1 A8])
        (reg:QI 38 r9 [orig:246 D.6036 ] [246])) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 38 r9 [orig:246 D.6036 ] [246])
        (nil)))
(insn:TI 424 430 425 3 (parallel [
            (set (reg:SI 40 r11 [orig:755 D.6032 ] [755])
                (lshiftrt:SI (reg:SI 40 r11 [orig:755 D.6032 ] [755])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 425 424 1201 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 msglen+0 S1 A128])
        (reg:QI 40 r11 [orig:755 D.6032 ] [755])) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 40 r11 [orig:755 D.6032 ] [755])
        (nil)))
(insn 1201 425 426 3 (set (reg:SI 40 r11 [orig:756 D.6032 ] [756])
        (reg:SI 38 r9 [orig:246 D.6036 ] [246])) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn:TI 426 1201 427 3 (parallel [
            (set (reg:SI 40 r11 [orig:756 D.6032 ] [756])
                (lshiftrt:SI (reg:SI 40 r11 [orig:756 D.6032 ] [756])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 427 426 1203 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 49 [0x31])) [0 msglen+1 S1 A8])
        (reg:QI 40 r11 [orig:756 D.6032 ] [756])) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 40 r11 [orig:756 D.6032 ] [756])
        (nil)))
(insn 1203 427 1205 3 (set (reg:SI 40 r11 [orig:757 D.6032 ] [757])
        (reg:SI 38 r9 [orig:246 D.6036 ] [246])) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn 1205 1203 432 3 (set (reg:SI 38 r9 [orig:758 D.6032 ] [758])
        (reg:SI 37 r8 [orig:245 high ] [245])) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn:TI 432 1205 428 3 (parallel [
            (set (reg:SI 38 r9 [orig:758 D.6032 ] [758])
                (lshiftrt:SI (reg:SI 38 r9 [orig:758 D.6032 ] [758])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 428 432 433 3 (parallel [
            (set (reg:SI 40 r11 [orig:757 D.6032 ] [757])
                (lshiftrt:SI (reg:SI 40 r11 [orig:757 D.6032 ] [757])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 433 428 1207 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 52 [0x34])) [0 msglen+4 S1 A32])
        (reg:QI 38 r9 [orig:758 D.6032 ] [758])) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 38 r9 [orig:758 D.6032 ] [758])
        (nil)))
(insn 1207 433 429 3 (set (reg:SI 38 r9 [orig:759 D.6032 ] [759])
        (reg:SI 37 r8 [orig:245 high ] [245])) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn 429 1207 434 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 50 [0x32])) [0 msglen+2 S1 A16])
        (reg:QI 40 r11 [orig:757 D.6032 ] [757])) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 40 r11 [orig:757 D.6032 ] [757])
        (nil)))
(insn:TI 434 429 435 3 (parallel [
            (set (reg:SI 38 r9 [orig:759 D.6032 ] [759])
                (lshiftrt:SI (reg:SI 38 r9 [orig:759 D.6032 ] [759])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 435 434 1209 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 53 [0x35])) [0 msglen+5 S1 A8])
        (reg:QI 38 r9 [orig:759 D.6032 ] [759])) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 38 r9 [orig:759 D.6032 ] [759])
        (nil)))
(insn 1209 435 1211 3 (set (reg:SI 38 r9 [orig:760 D.6032 ] [760])
        (reg:SI 37 r8 [orig:245 high ] [245])) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn 1211 1209 439 3 (set (reg:DI 37 r8 [orig:263 D.6036 ] [263])
        (reg/v:DI 2 cx [orig:244 low ] [244])) blake_ref.c:544 89 {*movdi_internal}
     (nil))
(insn:TI 439 1211 436 3 (parallel [
            (set (reg:DI 37 r8 [orig:263 D.6036 ] [263])
                (lshiftrt:DI (reg:DI 37 r8 [orig:263 D.6036 ] [263])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 436 439 437 3 (parallel [
            (set (reg:SI 38 r9 [orig:760 D.6032 ] [760])
                (lshiftrt:SI (reg:SI 38 r9 [orig:760 D.6032 ] [760])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 437 436 1213 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 54 [0x36])) [0 msglen+6 S1 A16])
        (reg:QI 38 r9 [orig:760 D.6032 ] [760])) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 38 r9 [orig:760 D.6032 ] [760])
        (nil)))
(insn 1213 437 447 3 (set (reg:SI 38 r9 [orig:761 D.6032 ] [761])
        (reg:SI 37 r8 [orig:263 D.6036 ] [263])) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn 447 1213 441 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 59 [0x3b])) [0 msglen+11 S1 A8])
        (reg:QI 37 r8 [orig:263 D.6036 ] [263])) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 37 r8 [orig:263 D.6036 ] [263])
        (nil)))
(insn:TI 441 447 442 3 (parallel [
            (set (reg:SI 38 r9 [orig:761 D.6032 ] [761])
                (lshiftrt:SI (reg:SI 38 r9 [orig:761 D.6032 ] [761])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 442 441 1215 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [0 msglen+8 S1 A64])
        (reg:QI 38 r9 [orig:761 D.6032 ] [761])) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 38 r9 [orig:761 D.6032 ] [761])
        (nil)))
(insn 1215 442 443 3 (set (reg:SI 38 r9 [orig:762 D.6032 ] [762])
        (reg:SI 37 r8 [orig:263 D.6036 ] [263])) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn:TI 443 1215 444 3 (parallel [
            (set (reg:SI 38 r9 [orig:762 D.6032 ] [762])
                (lshiftrt:SI (reg:SI 38 r9 [orig:762 D.6032 ] [762])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 444 443 1217 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 57 [0x39])) [0 msglen+9 S1 A8])
        (reg:QI 38 r9 [orig:762 D.6032 ] [762])) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 38 r9 [orig:762 D.6032 ] [762])
        (nil)))
(insn 1217 444 1219 3 (set (reg:SI 38 r9 [orig:763 D.6032 ] [763])
        (reg:SI 37 r8 [orig:263 D.6036 ] [263])) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn 1219 1217 449 3 (set (reg:SI 37 r8 [orig:764 D.6032 ] [764])
        (reg:SI 2 cx [orig:244 low ] [244])) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn:TI 449 1219 445 3 (parallel [
            (set (reg:SI 37 r8 [orig:764 D.6032 ] [764])
                (lshiftrt:SI (reg:SI 37 r8 [orig:764 D.6032 ] [764])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 445 449 450 3 (parallel [
            (set (reg:SI 38 r9 [orig:763 D.6032 ] [763])
                (lshiftrt:SI (reg:SI 38 r9 [orig:763 D.6032 ] [763])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 450 445 1221 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 60 [0x3c])) [0 msglen+12 S1 A32])
        (reg:QI 37 r8 [orig:764 D.6032 ] [764])) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 37 r8 [orig:764 D.6032 ] [764])
        (nil)))
(insn 1221 450 446 3 (set (reg:SI 37 r8 [orig:765 D.6032 ] [765])
        (reg:SI 2 cx [orig:244 low ] [244])) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn 446 1221 451 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 58 [0x3a])) [0 msglen+10 S1 A16])
        (reg:QI 38 r9 [orig:763 D.6032 ] [763])) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 38 r9 [orig:763 D.6032 ] [763])
        (nil)))
(insn:TI 451 446 452 3 (parallel [
            (set (reg:SI 37 r8 [orig:765 D.6032 ] [765])
                (lshiftrt:SI (reg:SI 37 r8 [orig:765 D.6032 ] [765])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 452 451 1223 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 61 [0x3d])) [0 msglen+13 S1 A8])
        (reg:QI 37 r8 [orig:765 D.6032 ] [765])) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 37 r8 [orig:765 D.6032 ] [765])
        (nil)))
(insn 1223 452 453 3 (set (reg:SI 37 r8 [orig:766 D.6032 ] [766])
        (reg:SI 2 cx [orig:244 low ] [244])) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn:TI 453 1223 1269 3 (parallel [
            (set (reg:SI 37 r8 [orig:766 D.6032 ] [766])
                (lshiftrt:SI (reg:SI 37 r8 [orig:766 D.6032 ] [766])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 1269 453 454 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:QI (reg:QI 1 dx [orig:242 D.6033 ] [242])
                (const_int 7 [0x7]))
            (const_int 0 [0]))) blake_ref.c:546 359 {*testqi_1_maybe_si}
     (nil))
(insn:TI 454 1269 459 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 62 [0x3e])) [0 msglen+14 S1 A16])
        (reg:QI 37 r8 [orig:766 D.6032 ] [766])) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 37 r8 [orig:766 D.6032 ] [766])
        (nil)))
(jump_insn 459 454 460 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 587)
            (pc))) blake_ref.c:546 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 587)
;;  succ:       4 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              15 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 4, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 460 459 461 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 461 460 462 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 888 [0x378]))) blake_ref.c:549 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 462 461 488 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1388)
            (pc))) blake_ref.c:549 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 1388)
;;  succ:       55 [28.0%]  (CAN_FALLTHRU)
;;              5 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 5, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 488 462 489 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 489 488 490 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 887 [0x377]))) blake_ref.c:558 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 490 489 499 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1389)
            (pc))) blake_ref.c:558 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 1389)
;;  succ:       44 [50.0%]  (CAN_FALLTHRU)
;;              6 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(note 499 490 505 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(note 505 499 506 6 NOTE_INSN_DELETED)
(note 506 505 500 6 NOTE_INSN_DELETED)
(insn:TI 500 506 501 6 (set (reg:SI 37 r8 [772])
        (const_int 1024 [0x400])) blake_ref.c:568 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 1024 [0x400])
        (nil)))
(insn:TI 501 500 502 6 (parallel [
            (set (reg:SI 37 r8 [orig:771 D.6033 ] [771])
                (minus:SI (reg:SI 37 r8 [772])
                    (reg:SI 1 dx [orig:242 D.6033 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:568 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 502 501 503 6 (set (reg:DI 37 r8 [orig:287 D.6036 ] [287])
        (sign_extend:DI (reg:SI 37 r8 [orig:771 D.6033 ] [771]))) blake_ref.c:568 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 503 502 507 6 (parallel [
            (set (reg:DI 0 ax [orig:288 D.6036 ] [288])
                (minus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (reg:DI 37 r8 [orig:287 D.6036 ] [287])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:568 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 507 503 504 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:242 D.6033 ] [242])
        (nil)))
(insn:TI 504 507 508 6 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [orig:288 D.6036 ] [288])) blake_ref.c:568 89 {*movdi_internal}
     (nil))
(jump_insn 508 504 1024 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1033)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1400 (nil)))
 -> 1033)
;;  succ:       70 [14.0%]  (CAN_FALLTHRU)
;;              7 [86.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 7, loop depth 0, count 0, freq 944, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [86.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1024 508 509 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 509 1024 510 7 NOTE_INSN_DELETED)
(note 510 509 511 7 NOTE_INSN_DELETED)
(insn:TI 511 510 512 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 37 r8 [orig:287 D.6036 ] [287])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 512 511 520 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1033)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1628 (nil)))
 -> 1033)
;;  succ:       8 [83.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              70 [16.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 8, loop depth 0, count 0, freq 1098, maybe hot
;; Invalid sum of incoming frequencies 1327, should be 1098
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       7 [83.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              70 [100.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 520 512 521 8 125 "" [1 uses])
(note 521 520 522 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 522 521 525 8 (parallel [
            (set (reg:DI 0 ax [777])
                (plus:DI (reg:DI 0 ax [orig:288 D.6036 ] [288])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:570 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (nil))))
(insn 525 522 524 8 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 524 525 523 8 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) 89 {*movdi_internal}
     (nil))
(insn:TI 523 524 526 8 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [777])) blake_ref.c:570 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [777])
        (nil)))
(insn 526 523 527 8 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 527 526 528 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 528 527 1011 8 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:572 90 {*movsi_internal}
     (nil))
;;  succ:       9 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              46 [100.0%]  (CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 1011 528 529 9 145 "" [1 uses])
(note 529 1011 530 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 530 529 531 9 (set (reg:SI 0 ax [orig:290 D.6033 ] [290])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) blake_ref.c:574 90 {*movsi_internal}
     (nil))
(insn:TI 531 530 532 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:290 D.6033 ] [290])
            (const_int 384 [0x180]))) blake_ref.c:574 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 532 531 542 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1390)
            (pc))) blake_ref.c:574 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 1390)
;;  succ:       67 [28.0%]  (CAN_FALLTHRU)
;;              10 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

;; basic block 10, loop depth 0, count 0, freq 1581, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  kill	
(note 542 532 543 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn:TI 543 542 1265 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:290 D.6033 ] [290])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:290 D.6033 ] [290])
        (nil)))
(insn 1265 543 547 10 (set (reg/f:DI 1 dx [779])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 45 [0x2d]))) 214 {*leadi}
     (nil))
(insn 547 1265 549 10 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn:TI 549 547 544 10 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(jump_insn 544 549 545 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 553)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 553)
;;  succ:       11 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              57 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 11, loop depth 0, count 0, freq 791, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax]
;; live  kill	
(note 545 544 550 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 550 545 560 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       57 [100.0%]  (CAN_FALLTHRU)
;;              11 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              67 [100.0%]  (CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 560 550 561 12 128 "" [2 uses])
(note 561 560 562 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 562 561 1225 12 NOTE_INSN_DELETED)
(insn:TI 1225 562 563 12 (set (reg:DI 0 ax [1029])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) blake_ref.c:578 89 {*movdi_internal}
     (nil))
(insn:TI 563 1225 564 12 (parallel [
            (set (reg:DI 0 ax [orig:292 D.6036 ] [292])
                (plus:DI (reg:DI 0 ax [1029])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:578 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (plus:DI (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                (const_int -8 [0xfffffffffffffff8]))
            (nil))))
;;  succ:       13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              56 [100.0%]  (CAN_FALLTHRU)
;;              83 [100.0%]  (CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 564 563 565 13 122 "" [2 uses])
(note 565 564 566 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 566 565 568 13 (parallel [
            (set (reg:DI 0 ax [782])
                (plus:DI (reg:DI 0 ax [orig:292 D.6036 ] [292])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:580 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (nil))))
(insn 568 566 567 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(insn:TI 567 568 569 13 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [782])) blake_ref.c:580 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [782])
        (nil)))
(jump_insn:TI 569 567 1391 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 578)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 578)
;;  succ:       14 [50.0%]  (FALLTHRU)
;;              43 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 14, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 13, next block 15, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [50.0%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	
;; live  kill	
(note 1391 569 1392 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1392 1391 1393 14 (set (pc)
        (label_ref 760)) 654 {jump}
     (nil)
 -> 760)
;;  succ:       22 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1393 1392 587)
;; basic block 15, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [50.0%]  (CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 37 [r8] 38 [r9] 40 [r11]
;; live  kill	 17 [flags]
(code_label 587 1393 588 15 119 "" [1 uses])
(note 588 587 1258 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1258 588 591 15 (set (reg:SI 37 r8 [786])
        (plus:SI (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 7 [0x7]))) blake_ref.c:587 213 {*leasi}
     (nil))
(insn 591 1258 1226 15 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 0 [0]))) blake_ref.c:587 3 {*cmpsi_ccno_1}
     (nil))
(insn 1226 591 601 15 (set (reg:SI 2 cx [788])
        (reg:SI 1 dx [orig:242 D.6033 ] [242])) blake_ref.c:587 90 {*movsi_internal}
     (nil))
(insn:TI 601 1226 604 15 (set (reg:SI 6 bp [793])
        (const_int 8 [0x8])) blake_ref.c:587 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 8 [0x8])
        (nil)))
(insn 604 601 607 15 (set (reg:SI 5 di [796])
        (const_int 255 [0xff])) blake_ref.c:588 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 255 [0xff])
        (nil)))
(insn 607 604 592 15 (set (reg:SI 38 r9 [799])
        (const_int 128 [0x80])) blake_ref.c:588 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 128 [0x80])
        (nil)))
(insn:TI 592 607 595 15 (set (reg:SI 37 r8 [orig:785 D.6033 ] [785])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 37 r8 [786])
            (reg:SI 1 dx [orig:242 D.6033 ] [242]))) blake_ref.c:587 951 {*movsicc_noc}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil)))
(insn 595 592 596 15 (parallel [
            (set (reg:SI 2 cx [788])
                (ashiftrt:SI (reg:SI 2 cx [788])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 538 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 596 595 593 15 (parallel [
            (set (reg:SI 2 cx [789])
                (lshiftrt:SI (reg:SI 2 cx [788])
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 593 596 1259 15 (parallel [
            (set (reg:SI 37 r8 [787])
                (ashiftrt:SI (reg:SI 37 r8 [orig:785 D.6033 ] [785])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 545 {*ashrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 1259 593 603 15 (set (reg:SI 40 r11 [790])
        (plus:SI (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (reg:SI 2 cx [789]))) blake_ref.c:587 213 {*leasi}
     (nil))
(insn 603 1259 598 15 (set (reg:DI 37 r8 [orig:794 D.6033 ] [794])
        (sign_extend:DI (reg:SI 37 r8 [787]))) blake_ref.c:587 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 598 603 599 15 (parallel [
            (set (reg:SI 40 r11 [791])
                (and:SI (reg:SI 40 r11 [790])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 381 {*andsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 599 598 602 15 (parallel [
            (set (reg:SI 40 r11 [792])
                (minus:SI (reg:SI 40 r11 [791])
                    (reg:SI 2 cx [789])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 2 cx [789])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 602 599 1228 15 (parallel [
            (set (reg:SI 6 bp [orig:298 D.6033 ] [298])
                (minus:SI (reg:SI 6 bp [793])
                    (reg:SI 40 r11 [792])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (minus:SI (const_int 8 [0x8])
                (reg:SI 40 r11 [792]))
            (nil))))
(insn:TI 1228 602 605 15 (set (reg:QI 2 cx [1031])
        (reg:QI 6 bp [orig:298 D.6033 ] [298])) blake_ref.c:588 93 {*movqi_internal}
     (nil))
(insn:TI 605 1228 1231 15 (parallel [
            (set (reg:SI 5 di [orig:795 D.6033 ] [795])
                (ashift:SI (reg:SI 5 di [796])
                    (reg:QI 2 cx [1031])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:QI 2 cx [1031])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashift:SI (const_int 255 [0xff])
                    (subreg:QI (reg:SI 6 bp [orig:298 D.6033 ] [298]) 0))
                (nil)))))
(insn 1231 605 606 15 (set (reg:QI 2 cx [1033])
        (reg:QI 40 r11 [792])) blake_ref.c:588 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 40 r11 [792])
        (nil)))
(insn 606 1231 608 15 (parallel [
            (set (reg:QI 5 di [orig:797 D.6037 ] [797])
                (and:QI (reg:QI 5 di [orig:795 D.6033 ] [795])
                    (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                                (reg:DI 37 r8 [orig:794 D.6033 ] [794]))
                            (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 384 {*andqi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 608 606 1230 15 (parallel [
            (set (reg:SI 38 r9 [orig:798 D.6033 ] [798])
                (ashiftrt:SI (reg:SI 38 r9 [orig:798 D.6033 ] [798])
                    (reg:QI 2 cx [1033])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:QI 2 cx [1033])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashiftrt:SI (const_int 128 [0x80])
                    (subreg:QI (reg:SI 40 r11 [792]) 0))
                (nil)))))
(insn:TI 1230 608 1261 15 (set (reg:SI 2 cx [orig:798 D.6033 ] [798])
        (reg:SI 38 r9 [orig:798 D.6033 ] [798])) blake_ref.c:588 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [orig:798 D.6033 ] [798])
        (nil)))
(insn 1261 1230 1260 15 (set (reg:SI 38 r9 [orig:801 D.6035 ] [801])
        (plus:SI (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int -889 [0xfffffffffffffc87]))) blake_ref.c:590 213 {*leasi}
     (nil))
(insn:TI 1260 1261 613 15 (parallel [
            (set (reg:SI 2 cx [orig:305 D.6034 ] [305])
                (xor:SI (reg:SI 2 cx [orig:798 D.6033 ] [798])
                    (reg:SI 5 di [orig:797 D.6037 ] [797])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 5 di [orig:797 D.6037 ] [797])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 613 1260 611 15 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 38 r9 [orig:801 D.6035 ] [801])
            (const_int 5 [0x5]))) blake_ref.c:590 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 38 r9 [orig:801 D.6035 ] [801])
        (nil)))
(insn:TI 611 613 614 15 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (reg:DI 37 r8 [orig:794 D.6033 ] [794]))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (reg:QI 2 cx [orig:305 D.6034 ] [305])) blake_ref.c:588 93 {*movqi_internal}
     (nil))
(jump_insn 614 611 632 15 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1394)
            (pc))) blake_ref.c:590 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 1394)
;;  succ:       40 [50.0%]  (CAN_FALLTHRU)
;;              16 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]

;; basic block 16, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 632 614 633 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn:TI 633 632 634 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 887 [0x377]))) blake_ref.c:601 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 634 633 635 16 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 665)
            (pc))) blake_ref.c:601 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 665)
;;  succ:       17 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              58 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 17, loop depth 0, count 0, freq 762, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(note 635 634 647 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(note 647 635 648 17 NOTE_INSN_DELETED)
(note 648 647 636 17 NOTE_INSN_DELETED)
(insn:TI 636 648 1232 17 (set (reg:SI 37 r8 [808])
        (const_int 888 [0x378])) blake_ref.c:603 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 888 [0x378])
        (nil)))
(insn:TI 1232 636 637 17 (set (reg:SI 2 cx [orig:807 D.6033 ] [807])
        (reg:SI 37 r8 [808])) blake_ref.c:603 90 {*movsi_internal}
     (nil))
(insn:TI 637 1232 641 17 (parallel [
            (set (reg:SI 2 cx [orig:807 D.6033 ] [807])
                (minus:SI (reg:SI 2 cx [orig:807 D.6033 ] [807])
                    (reg:SI 1 dx [orig:242 D.6033 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:603 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 641 637 642 17 (parallel [
            (set (reg:SI 1 dx [orig:810 D.6035 ] [810])
                (and:SI (reg:SI 1 dx [orig:242 D.6033 ] [242])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:604 381 {*andsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 642 641 638 17 (parallel [
            (set (reg:SI 1 dx [orig:317 D.6033 ] [317])
                (plus:SI (reg:SI 1 dx [orig:810 D.6035 ] [810])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:604 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 638 642 645 17 (set (reg:DI 2 cx [orig:809 D.6036 ] [809])
        (sign_extend:DI (reg:SI 2 cx [orig:807 D.6033 ] [807]))) blake_ref.c:603 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 645 638 639 17 (parallel [
            (set (reg:SI 37 r8 [orig:811 D.6033 ] [811])
                (minus:SI (reg:SI 37 r8 [808])
                    (reg:SI 1 dx [orig:317 D.6033 ] [317])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:605 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 639 645 643 17 (parallel [
            (set (reg:DI 0 ax [orig:616 D.6039 ] [616])
                (minus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (reg:DI 2 cx [orig:809 D.6036 ] [809])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:603 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:809 D.6036 ] [809])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 643 639 646 17 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 1 dx [orig:317 D.6033 ] [317])) blake_ref.c:604 90 {*movsi_internal}
     (nil))
(insn:TI 646 643 640 17 (set (reg:DI 37 r8 [orig:319 D.6036 ] [319])
        (sign_extend:DI (reg:SI 37 r8 [orig:811 D.6033 ] [811]))) blake_ref.c:605 142 {*extendsidi2_rex64}
     (nil))
(insn 640 646 649 17 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [orig:616 D.6039 ] [616])) blake_ref.c:603 89 {*movdi_internal}
     (nil))
(insn:TI 649 640 650 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 37 r8 [orig:319 D.6036 ] [319])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 650 649 1026 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1034)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1400 (nil)))
 -> 1034)
;;  succ:       76 [14.0%]  (CAN_FALLTHRU)
;;              18 [86.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]

;; basic block 18, loop depth 0, count 0, freq 655, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       17 [86.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1026 650 651 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(note 651 1026 652 18 NOTE_INSN_DELETED)
(note 652 651 653 18 NOTE_INSN_DELETED)
(insn:TI 653 652 654 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:317 D.6033 ] [317])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:317 D.6033 ] [317])
        (nil)))
(jump_insn:TI 654 653 731 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1034)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1628 (nil)))
 -> 1034)
;;  succ:       19 [83.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              76 [16.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]

;; basic block 19, loop depth 0, count 0, freq 1525, maybe hot
;; Invalid sum of incoming frequencies 3919, should be 1525
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       63 [100.0%]  (CAN_FALLTHRU)
;;              18 [83.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              76 [100.0%]  (CAN_FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 39 [r10]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 731 654 732 19 135 "" [2 uses])
(note 732 731 733 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn:TI 733 732 735 19 (parallel [
            (set (reg:DI 0 ax [834])
                (plus:DI (reg:DI 0 ax [orig:616 D.6039 ] [616])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:628 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (nil))))
(insn 735 733 1255 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 384 [0x180]))) blake_ref.c:629 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (nil)))
(insn 1255 735 734 19 (set (reg/f:DI 1 dx [835])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 44 [0x2c]))) 214 {*leadi}
     (nil))
(insn:TI 734 1255 736 19 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [834])) blake_ref.c:628 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [834])
        (nil)))
(jump_insn 736 734 748 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1317)
            (pc))) blake_ref.c:629 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 1317)
;;  succ:       20 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              21 [28.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 20, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 1 [dx]
;; live  kill	
(note 748 736 1254 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1254 748 1317 20 (set (reg/f:DI 1 dx [836])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 45 [0x2d]))) 214 {*leadi}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 21, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              19 [28.0%]  (CAN_FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(code_label 1317 1254 1315 21 179 "" [1 uses])
(note 1315 1317 750 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn:TI 750 1315 752 21 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 752 750 753 21 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 753 752 754 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 754 753 755 21 (set (reg:DI 0 ax [orig:594 D.6039 ] [594])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 755 754 758 21 (set (reg:SI 1 dx [orig:283 D.6033 ] [283])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn:TI 758 755 761 21 (parallel [
            (set (reg:DI 0 ax [837])
                (plus:DI (reg:DI 0 ax [orig:594 D.6039 ] [594])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (nil))))
(insn 761 758 759 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:283 D.6033 ] [283])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:283 D.6033 ] [283])
        (nil)))
(insn:TI 759 761 762 21 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [837])) blake_ref.c:634 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [837])
        (nil)))
(jump_insn 762 759 760 21 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 578)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 0 (nil)))
 -> 578)
;;  succ:       22 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              43 (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 22, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 21, next block 23, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       21 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [100.0%]  (CAN_FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(code_label 760 762 570 22 142 "" [1 uses])
(note 570 760 1263 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1263 570 572 22 (set (reg/f:DI 1 dx [783])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) 214 {*leadi}
     (nil))
(insn 572 1263 574 22 (set (reg:DI 37 r8)
        (const_int 128 [0x80])) 89 {*movdi_internal}
     (nil))
(insn 574 572 575 22 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 575 574 766 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       23 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 23, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       22 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              43 [100.0%]  (CAN_FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 766 575 767 23 131 "" [1 uses])
(note 767 766 768 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(note 768 767 769 23 NOTE_INSN_DELETED)
(note 769 768 772 23 NOTE_INSN_DELETED)
(note 772 769 773 23 NOTE_INSN_DELETED)
(note 773 772 776 23 NOTE_INSN_DELETED)
(note 776 773 780 23 NOTE_INSN_DELETED)
(note 780 776 783 23 NOTE_INSN_DELETED)
(note 783 780 786 23 NOTE_INSN_DELETED)
(note 786 783 789 23 NOTE_INSN_DELETED)
(note 789 786 794 23 NOTE_INSN_DELETED)
(note 794 789 795 23 NOTE_INSN_DELETED)
(note 795 794 798 23 NOTE_INSN_DELETED)
(note 798 795 799 23 NOTE_INSN_DELETED)
(note 799 798 802 23 NOTE_INSN_DELETED)
(note 802 799 806 23 NOTE_INSN_DELETED)
(note 806 802 809 23 NOTE_INSN_DELETED)
(note 809 806 812 23 NOTE_INSN_DELETED)
(note 812 809 815 23 NOTE_INSN_DELETED)
(note 815 812 820 23 NOTE_INSN_DELETED)
(note 820 815 821 23 NOTE_INSN_DELETED)
(note 821 820 824 23 NOTE_INSN_DELETED)
(note 824 821 825 23 NOTE_INSN_DELETED)
(note 825 824 828 23 NOTE_INSN_DELETED)
(note 828 825 832 23 NOTE_INSN_DELETED)
(note 832 828 835 23 NOTE_INSN_DELETED)
(note 835 832 838 23 NOTE_INSN_DELETED)
(note 838 835 841 23 NOTE_INSN_DELETED)
(note 841 838 846 23 NOTE_INSN_DELETED)
(note 846 841 847 23 NOTE_INSN_DELETED)
(note 847 846 850 23 NOTE_INSN_DELETED)
(note 850 847 851 23 NOTE_INSN_DELETED)
(note 851 850 854 23 NOTE_INSN_DELETED)
(note 854 851 858 23 NOTE_INSN_DELETED)
(note 858 854 861 23 NOTE_INSN_DELETED)
(note 861 858 864 23 NOTE_INSN_DELETED)
(note 864 861 867 23 NOTE_INSN_DELETED)
(note 867 864 872 23 NOTE_INSN_DELETED)
(note 872 867 873 23 NOTE_INSN_DELETED)
(note 873 872 876 23 NOTE_INSN_DELETED)
(note 876 873 877 23 NOTE_INSN_DELETED)
(note 877 876 880 23 NOTE_INSN_DELETED)
(note 880 877 884 23 NOTE_INSN_DELETED)
(note 884 880 887 23 NOTE_INSN_DELETED)
(note 887 884 890 23 NOTE_INSN_DELETED)
(note 890 887 893 23 NOTE_INSN_DELETED)
(note 893 890 898 23 NOTE_INSN_DELETED)
(note 898 893 899 23 NOTE_INSN_DELETED)
(note 899 898 902 23 NOTE_INSN_DELETED)
(note 902 899 903 23 NOTE_INSN_DELETED)
(note 903 902 906 23 NOTE_INSN_DELETED)
(note 906 903 910 23 NOTE_INSN_DELETED)
(note 910 906 913 23 NOTE_INSN_DELETED)
(note 913 910 916 23 NOTE_INSN_DELETED)
(note 916 913 919 23 NOTE_INSN_DELETED)
(note 919 916 770 23 NOTE_INSN_DELETED)
(insn:TI 770 919 771 23 (set (reg:SI 0 ax [orig:840 D.6032 ] [840])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 143 [0x8f])) [3 state_4(D)->h64+7 S1 A8]))) blake_ref.c:638 138 {*zero_extendqisi2}
     (nil))
(insn:TI 771 770 774 23 (set (mem:QI (reg/v/f:DI 4 si [orig:634 hashval ] [634]) [0 *hashval_6(D)+0 S1 A8])
        (reg:QI 0 ax [orig:840 D.6032 ] [840])) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:840 D.6032 ] [840])
        (nil)))
(insn 774 771 775 23 (set (reg:SI 0 ax [orig:843 D.6032 ] [843])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 142 [0x8e])) [3 state_4(D)->h64+6 S2 A16]))) blake_ref.c:638 139 {*zero_extendhisi2}
     (nil))
(insn:TI 775 774 777 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 1 [0x1])) [0 MEM[(BitSequence *)hashval_6(D) + 1B]+0 S1 A8])
        (reg:QI 0 ax [orig:843 D.6032 ] [843])) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:843 D.6032 ] [843])
        (nil)))
(insn 777 775 778 23 (set (reg:DI 0 ax [orig:844 D.6036 ] [844])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 140 [0x8c])) [3 state_4(D)->h64+4 S4 A32]))) blake_ref.c:638 133 {*zero_extendsidi2}
     (nil))
(insn:TI 778 777 779 23 (parallel [
            (set (reg:SI 0 ax [orig:846 D.6032 ] [846])
                (lshiftrt:SI (reg:SI 0 ax [orig:844 D.6036 ] [844])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 779 778 781 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 2 [0x2])) [0 MEM[(BitSequence *)hashval_6(D) + 2B]+0 S1 A8])
        (reg:QI 0 ax [orig:846 D.6032 ] [846])) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:846 D.6032 ] [846])
        (nil)))
(insn 781 779 782 23 (set (reg:DI 0 ax [orig:847 D.6036 ] [847])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 140 [0x8c])) [3 state_4(D)->h64+4 S4 A32]))) blake_ref.c:638 133 {*zero_extendsidi2}
     (nil))
(insn:TI 782 781 784 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 3 [0x3])) [0 MEM[(BitSequence *)hashval_6(D) + 3B]+0 S1 A8])
        (reg:QI 0 ax [orig:847 D.6036 ] [847])) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:847 D.6036 ] [847])
        (nil)))
(insn 784 782 785 23 (set (reg:SI 0 ax [orig:850 D.6032 ] [850])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 139 [0x8b])) [3 state_4(D)->h64+3 S1 A8]))) blake_ref.c:638 138 {*zero_extendqisi2}
     (nil))
(insn:TI 785 784 787 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 4 [0x4])) [0 MEM[(BitSequence *)hashval_6(D) + 4B]+0 S1 A8])
        (reg:QI 0 ax [orig:850 D.6032 ] [850])) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:850 D.6032 ] [850])
        (nil)))
(insn 787 785 788 23 (set (reg:SI 0 ax [orig:852 D.6032 ] [852])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 138 [0x8a])) [3 state_4(D)->h64+2 S2 A16]))) blake_ref.c:638 139 {*zero_extendhisi2}
     (nil))
(insn:TI 788 787 1238 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 5 [0x5])) [0 MEM[(BitSequence *)hashval_6(D) + 5B]+0 S1 A8])
        (reg:QI 0 ax [orig:852 D.6032 ] [852])) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:852 D.6032 ] [852])
        (nil)))
(insn 1238 788 790 23 (set (reg:SI 0 ax [orig:854 D.6032 ] [854])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S4 A64])) blake_ref.c:638 90 {*movsi_internal}
     (nil))
(insn:TI 790 1238 791 23 (parallel [
            (set (reg:SI 0 ax [orig:854 D.6032 ] [854])
                (lshiftrt:SI (reg:SI 0 ax [orig:854 D.6032 ] [854])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 791 790 792 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 6 [0x6])) [0 MEM[(BitSequence *)hashval_6(D) + 6B]+0 S1 A8])
        (reg:QI 0 ax [orig:854 D.6032 ] [854])) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:854 D.6032 ] [854])
        (nil)))
(insn 792 791 793 23 (set (reg:DI 0 ax [orig:855 state_4(D)->h64 ] [855])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
        (nil)))
(insn:TI 793 792 796 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 7 [0x7])) [0 MEM[(BitSequence *)hashval_6(D) + 7B]+0 S1 A8])
        (reg:QI 0 ax [orig:855 state_4(D)->h64 ] [855])) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:855 state_4(D)->h64 ] [855])
        (nil)))
(insn 796 793 797 23 (set (reg:SI 0 ax [orig:858 D.6032 ] [858])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 151 [0x97])) [3 state_4(D)->h64+15 S1 A8]))) blake_ref.c:639 138 {*zero_extendqisi2}
     (nil))
(insn:TI 797 796 800 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 8 [0x8])) [0 MEM[(BitSequence *)hashval_6(D) + 8B]+0 S1 A8])
        (reg:QI 0 ax [orig:858 D.6032 ] [858])) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:858 D.6032 ] [858])
        (nil)))
(insn 800 797 801 23 (set (reg:SI 0 ax [orig:861 D.6032 ] [861])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 150 [0x96])) [3 state_4(D)->h64+14 S2 A16]))) blake_ref.c:639 139 {*zero_extendhisi2}
     (nil))
(insn:TI 801 800 803 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 9 [0x9])) [0 MEM[(BitSequence *)hashval_6(D) + 9B]+0 S1 A8])
        (reg:QI 0 ax [orig:861 D.6032 ] [861])) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:861 D.6032 ] [861])
        (nil)))
(insn 803 801 804 23 (set (reg:DI 0 ax [orig:862 D.6036 ] [862])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 148 [0x94])) [3 state_4(D)->h64+12 S4 A32]))) blake_ref.c:639 133 {*zero_extendsidi2}
     (nil))
(insn:TI 804 803 805 23 (parallel [
            (set (reg:SI 0 ax [orig:864 D.6032 ] [864])
                (lshiftrt:SI (reg:SI 0 ax [orig:862 D.6036 ] [862])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 805 804 807 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 10 [0xa])) [0 MEM[(BitSequence *)hashval_6(D) + 10B]+0 S1 A8])
        (reg:QI 0 ax [orig:864 D.6032 ] [864])) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:864 D.6032 ] [864])
        (nil)))
(insn 807 805 808 23 (set (reg:DI 0 ax [orig:865 D.6036 ] [865])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 148 [0x94])) [3 state_4(D)->h64+12 S4 A32]))) blake_ref.c:639 133 {*zero_extendsidi2}
     (nil))
(insn:TI 808 807 810 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 11 [0xb])) [0 MEM[(BitSequence *)hashval_6(D) + 11B]+0 S1 A8])
        (reg:QI 0 ax [orig:865 D.6036 ] [865])) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:865 D.6036 ] [865])
        (nil)))
(insn 810 808 811 23 (set (reg:SI 0 ax [orig:868 D.6032 ] [868])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 147 [0x93])) [3 state_4(D)->h64+11 S1 A8]))) blake_ref.c:639 138 {*zero_extendqisi2}
     (nil))
(insn:TI 811 810 813 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 12 [0xc])) [0 MEM[(BitSequence *)hashval_6(D) + 12B]+0 S1 A8])
        (reg:QI 0 ax [orig:868 D.6032 ] [868])) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:868 D.6032 ] [868])
        (nil)))
(insn 813 811 814 23 (set (reg:SI 0 ax [orig:870 D.6032 ] [870])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 146 [0x92])) [3 state_4(D)->h64+10 S2 A16]))) blake_ref.c:639 139 {*zero_extendhisi2}
     (nil))
(insn:TI 814 813 1240 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 13 [0xd])) [0 MEM[(BitSequence *)hashval_6(D) + 13B]+0 S1 A8])
        (reg:QI 0 ax [orig:870 D.6032 ] [870])) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:870 D.6032 ] [870])
        (nil)))
(insn 1240 814 816 23 (set (reg:SI 0 ax [orig:872 D.6032 ] [872])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S4 A64])) blake_ref.c:639 90 {*movsi_internal}
     (nil))
(insn:TI 816 1240 817 23 (parallel [
            (set (reg:SI 0 ax [orig:872 D.6032 ] [872])
                (lshiftrt:SI (reg:SI 0 ax [orig:872 D.6032 ] [872])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 817 816 818 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 14 [0xe])) [0 MEM[(BitSequence *)hashval_6(D) + 14B]+0 S1 A8])
        (reg:QI 0 ax [orig:872 D.6032 ] [872])) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:872 D.6032 ] [872])
        (nil)))
(insn 818 817 819 23 (set (reg:DI 0 ax [orig:873 state_4(D)->h64+8 ] [873])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
        (nil)))
(insn:TI 819 818 822 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 15 [0xf])) [0 MEM[(BitSequence *)hashval_6(D) + 15B]+0 S1 A8])
        (reg:QI 0 ax [orig:873 state_4(D)->h64+8 ] [873])) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:873 state_4(D)->h64+8 ] [873])
        (nil)))
(insn 822 819 823 23 (set (reg:SI 0 ax [orig:876 D.6032 ] [876])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 159 [0x9f])) [3 state_4(D)->h64+23 S1 A8]))) blake_ref.c:640 138 {*zero_extendqisi2}
     (nil))
(insn:TI 823 822 826 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 16 [0x10])) [0 MEM[(BitSequence *)hashval_6(D) + 16B]+0 S1 A8])
        (reg:QI 0 ax [orig:876 D.6032 ] [876])) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:876 D.6032 ] [876])
        (nil)))
(insn 826 823 827 23 (set (reg:SI 0 ax [orig:879 D.6032 ] [879])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 158 [0x9e])) [3 state_4(D)->h64+22 S2 A16]))) blake_ref.c:640 139 {*zero_extendhisi2}
     (nil))
(insn:TI 827 826 829 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 17 [0x11])) [0 MEM[(BitSequence *)hashval_6(D) + 17B]+0 S1 A8])
        (reg:QI 0 ax [orig:879 D.6032 ] [879])) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:879 D.6032 ] [879])
        (nil)))
(insn 829 827 830 23 (set (reg:DI 0 ax [orig:880 D.6036 ] [880])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 156 [0x9c])) [3 state_4(D)->h64+20 S4 A32]))) blake_ref.c:640 133 {*zero_extendsidi2}
     (nil))
(insn:TI 830 829 831 23 (parallel [
            (set (reg:SI 0 ax [orig:882 D.6032 ] [882])
                (lshiftrt:SI (reg:SI 0 ax [orig:880 D.6036 ] [880])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 831 830 833 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 18 [0x12])) [0 MEM[(BitSequence *)hashval_6(D) + 18B]+0 S1 A8])
        (reg:QI 0 ax [orig:882 D.6032 ] [882])) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:882 D.6032 ] [882])
        (nil)))
(insn 833 831 834 23 (set (reg:DI 0 ax [orig:883 D.6036 ] [883])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 156 [0x9c])) [3 state_4(D)->h64+20 S4 A32]))) blake_ref.c:640 133 {*zero_extendsidi2}
     (nil))
(insn:TI 834 833 836 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 19 [0x13])) [0 MEM[(BitSequence *)hashval_6(D) + 19B]+0 S1 A8])
        (reg:QI 0 ax [orig:883 D.6036 ] [883])) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:883 D.6036 ] [883])
        (nil)))
(insn 836 834 837 23 (set (reg:SI 0 ax [orig:886 D.6032 ] [886])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 155 [0x9b])) [3 state_4(D)->h64+19 S1 A8]))) blake_ref.c:640 138 {*zero_extendqisi2}
     (nil))
(insn:TI 837 836 839 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 20 [0x14])) [0 MEM[(BitSequence *)hashval_6(D) + 20B]+0 S1 A8])
        (reg:QI 0 ax [orig:886 D.6032 ] [886])) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:886 D.6032 ] [886])
        (nil)))
(insn 839 837 840 23 (set (reg:SI 0 ax [orig:888 D.6032 ] [888])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 154 [0x9a])) [3 state_4(D)->h64+18 S2 A16]))) blake_ref.c:640 139 {*zero_extendhisi2}
     (nil))
(insn:TI 840 839 1242 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 21 [0x15])) [0 MEM[(BitSequence *)hashval_6(D) + 21B]+0 S1 A8])
        (reg:QI 0 ax [orig:888 D.6032 ] [888])) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:888 D.6032 ] [888])
        (nil)))
(insn 1242 840 842 23 (set (reg:SI 0 ax [orig:890 D.6032 ] [890])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S4 A64])) blake_ref.c:640 90 {*movsi_internal}
     (nil))
(insn:TI 842 1242 843 23 (parallel [
            (set (reg:SI 0 ax [orig:890 D.6032 ] [890])
                (lshiftrt:SI (reg:SI 0 ax [orig:890 D.6032 ] [890])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 843 842 844 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 22 [0x16])) [0 MEM[(BitSequence *)hashval_6(D) + 22B]+0 S1 A8])
        (reg:QI 0 ax [orig:890 D.6032 ] [890])) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:890 D.6032 ] [890])
        (nil)))
(insn 844 843 845 23 (set (reg:DI 0 ax [orig:891 state_4(D)->h64+16 ] [891])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
        (nil)))
(insn:TI 845 844 848 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 23 [0x17])) [0 MEM[(BitSequence *)hashval_6(D) + 23B]+0 S1 A8])
        (reg:QI 0 ax [orig:891 state_4(D)->h64+16 ] [891])) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:891 state_4(D)->h64+16 ] [891])
        (nil)))
(insn 848 845 849 23 (set (reg:SI 0 ax [orig:894 D.6032 ] [894])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 167 [0xa7])) [3 state_4(D)->h64+31 S1 A8]))) blake_ref.c:641 138 {*zero_extendqisi2}
     (nil))
(insn:TI 849 848 852 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 24 [0x18])) [0 MEM[(BitSequence *)hashval_6(D) + 24B]+0 S1 A8])
        (reg:QI 0 ax [orig:894 D.6032 ] [894])) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:894 D.6032 ] [894])
        (nil)))
(insn 852 849 853 23 (set (reg:SI 0 ax [orig:897 D.6032 ] [897])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 166 [0xa6])) [3 state_4(D)->h64+30 S2 A16]))) blake_ref.c:641 139 {*zero_extendhisi2}
     (nil))
(insn:TI 853 852 855 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 25 [0x19])) [0 MEM[(BitSequence *)hashval_6(D) + 25B]+0 S1 A8])
        (reg:QI 0 ax [orig:897 D.6032 ] [897])) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:897 D.6032 ] [897])
        (nil)))
(insn 855 853 856 23 (set (reg:DI 0 ax [orig:898 D.6036 ] [898])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 164 [0xa4])) [3 state_4(D)->h64+28 S4 A32]))) blake_ref.c:641 133 {*zero_extendsidi2}
     (nil))
(insn:TI 856 855 857 23 (parallel [
            (set (reg:SI 0 ax [orig:900 D.6032 ] [900])
                (lshiftrt:SI (reg:SI 0 ax [orig:898 D.6036 ] [898])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 857 856 859 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 26 [0x1a])) [0 MEM[(BitSequence *)hashval_6(D) + 26B]+0 S1 A8])
        (reg:QI 0 ax [orig:900 D.6032 ] [900])) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:900 D.6032 ] [900])
        (nil)))
(insn 859 857 860 23 (set (reg:DI 0 ax [orig:901 D.6036 ] [901])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 164 [0xa4])) [3 state_4(D)->h64+28 S4 A32]))) blake_ref.c:641 133 {*zero_extendsidi2}
     (nil))
(insn:TI 860 859 862 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 27 [0x1b])) [0 MEM[(BitSequence *)hashval_6(D) + 27B]+0 S1 A8])
        (reg:QI 0 ax [orig:901 D.6036 ] [901])) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:901 D.6036 ] [901])
        (nil)))
(insn 862 860 863 23 (set (reg:SI 0 ax [orig:904 D.6032 ] [904])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 163 [0xa3])) [3 state_4(D)->h64+27 S1 A8]))) blake_ref.c:641 138 {*zero_extendqisi2}
     (nil))
(insn:TI 863 862 865 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 28 [0x1c])) [0 MEM[(BitSequence *)hashval_6(D) + 28B]+0 S1 A8])
        (reg:QI 0 ax [orig:904 D.6032 ] [904])) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:904 D.6032 ] [904])
        (nil)))
(insn 865 863 866 23 (set (reg:SI 0 ax [orig:906 D.6032 ] [906])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 162 [0xa2])) [3 state_4(D)->h64+26 S2 A16]))) blake_ref.c:641 139 {*zero_extendhisi2}
     (nil))
(insn:TI 866 865 1244 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 29 [0x1d])) [0 MEM[(BitSequence *)hashval_6(D) + 29B]+0 S1 A8])
        (reg:QI 0 ax [orig:906 D.6032 ] [906])) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:906 D.6032 ] [906])
        (nil)))
(insn 1244 866 868 23 (set (reg:SI 0 ax [orig:908 D.6032 ] [908])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S4 A64])) blake_ref.c:641 90 {*movsi_internal}
     (nil))
(insn:TI 868 1244 869 23 (parallel [
            (set (reg:SI 0 ax [orig:908 D.6032 ] [908])
                (lshiftrt:SI (reg:SI 0 ax [orig:908 D.6032 ] [908])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 869 868 870 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 30 [0x1e])) [0 MEM[(BitSequence *)hashval_6(D) + 30B]+0 S1 A8])
        (reg:QI 0 ax [orig:908 D.6032 ] [908])) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:908 D.6032 ] [908])
        (nil)))
(insn 870 869 871 23 (set (reg:DI 0 ax [orig:909 state_4(D)->h64+24 ] [909])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
        (nil)))
(insn:TI 871 870 874 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 31 [0x1f])) [0 MEM[(BitSequence *)hashval_6(D) + 31B]+0 S1 A8])
        (reg:QI 0 ax [orig:909 state_4(D)->h64+24 ] [909])) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:909 state_4(D)->h64+24 ] [909])
        (nil)))
(insn 874 871 875 23 (set (reg:SI 0 ax [orig:912 D.6032 ] [912])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 175 [0xaf])) [3 state_4(D)->h64+39 S1 A8]))) blake_ref.c:642 138 {*zero_extendqisi2}
     (nil))
(insn:TI 875 874 878 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 32 [0x20])) [0 MEM[(BitSequence *)hashval_6(D) + 32B]+0 S1 A8])
        (reg:QI 0 ax [orig:912 D.6032 ] [912])) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:912 D.6032 ] [912])
        (nil)))
(insn 878 875 879 23 (set (reg:SI 0 ax [orig:915 D.6032 ] [915])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 174 [0xae])) [3 state_4(D)->h64+38 S2 A16]))) blake_ref.c:642 139 {*zero_extendhisi2}
     (nil))
(insn:TI 879 878 881 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 33 [0x21])) [0 MEM[(BitSequence *)hashval_6(D) + 33B]+0 S1 A8])
        (reg:QI 0 ax [orig:915 D.6032 ] [915])) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:915 D.6032 ] [915])
        (nil)))
(insn 881 879 882 23 (set (reg:DI 0 ax [orig:916 D.6036 ] [916])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 172 [0xac])) [3 state_4(D)->h64+36 S4 A32]))) blake_ref.c:642 133 {*zero_extendsidi2}
     (nil))
(insn:TI 882 881 883 23 (parallel [
            (set (reg:SI 0 ax [orig:918 D.6032 ] [918])
                (lshiftrt:SI (reg:SI 0 ax [orig:916 D.6036 ] [916])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 883 882 885 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 34 [0x22])) [0 MEM[(BitSequence *)hashval_6(D) + 34B]+0 S1 A8])
        (reg:QI 0 ax [orig:918 D.6032 ] [918])) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:918 D.6032 ] [918])
        (nil)))
(insn 885 883 886 23 (set (reg:DI 0 ax [orig:919 D.6036 ] [919])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 172 [0xac])) [3 state_4(D)->h64+36 S4 A32]))) blake_ref.c:642 133 {*zero_extendsidi2}
     (nil))
(insn:TI 886 885 888 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 35 [0x23])) [0 MEM[(BitSequence *)hashval_6(D) + 35B]+0 S1 A8])
        (reg:QI 0 ax [orig:919 D.6036 ] [919])) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:919 D.6036 ] [919])
        (nil)))
(insn 888 886 889 23 (set (reg:SI 0 ax [orig:922 D.6032 ] [922])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 171 [0xab])) [3 state_4(D)->h64+35 S1 A8]))) blake_ref.c:642 138 {*zero_extendqisi2}
     (nil))
(insn:TI 889 888 891 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 36 [0x24])) [0 MEM[(BitSequence *)hashval_6(D) + 36B]+0 S1 A8])
        (reg:QI 0 ax [orig:922 D.6032 ] [922])) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:922 D.6032 ] [922])
        (nil)))
(insn 891 889 892 23 (set (reg:SI 0 ax [orig:924 D.6032 ] [924])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 170 [0xaa])) [3 state_4(D)->h64+34 S2 A16]))) blake_ref.c:642 139 {*zero_extendhisi2}
     (nil))
(insn:TI 892 891 1246 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 37 [0x25])) [0 MEM[(BitSequence *)hashval_6(D) + 37B]+0 S1 A8])
        (reg:QI 0 ax [orig:924 D.6032 ] [924])) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:924 D.6032 ] [924])
        (nil)))
(insn 1246 892 894 23 (set (reg:SI 0 ax [orig:926 D.6032 ] [926])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S4 A64])) blake_ref.c:642 90 {*movsi_internal}
     (nil))
(insn:TI 894 1246 895 23 (parallel [
            (set (reg:SI 0 ax [orig:926 D.6032 ] [926])
                (lshiftrt:SI (reg:SI 0 ax [orig:926 D.6032 ] [926])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 895 894 896 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 38 [0x26])) [0 MEM[(BitSequence *)hashval_6(D) + 38B]+0 S1 A8])
        (reg:QI 0 ax [orig:926 D.6032 ] [926])) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:926 D.6032 ] [926])
        (nil)))
(insn 896 895 897 23 (set (reg:DI 0 ax [orig:927 state_4(D)->h64+32 ] [927])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
        (nil)))
(insn:TI 897 896 900 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 39 [0x27])) [0 MEM[(BitSequence *)hashval_6(D) + 39B]+0 S1 A8])
        (reg:QI 0 ax [orig:927 state_4(D)->h64+32 ] [927])) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:927 state_4(D)->h64+32 ] [927])
        (nil)))
(insn 900 897 901 23 (set (reg:SI 0 ax [orig:930 D.6032 ] [930])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 183 [0xb7])) [3 state_4(D)->h64+47 S1 A8]))) blake_ref.c:643 138 {*zero_extendqisi2}
     (nil))
(insn:TI 901 900 904 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 40 [0x28])) [0 MEM[(BitSequence *)hashval_6(D) + 40B]+0 S1 A8])
        (reg:QI 0 ax [orig:930 D.6032 ] [930])) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:930 D.6032 ] [930])
        (nil)))
(insn 904 901 905 23 (set (reg:SI 0 ax [orig:933 D.6032 ] [933])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 182 [0xb6])) [3 state_4(D)->h64+46 S2 A16]))) blake_ref.c:643 139 {*zero_extendhisi2}
     (nil))
(insn:TI 905 904 907 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 41 [0x29])) [0 MEM[(BitSequence *)hashval_6(D) + 41B]+0 S1 A8])
        (reg:QI 0 ax [orig:933 D.6032 ] [933])) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:933 D.6032 ] [933])
        (nil)))
(insn 907 905 908 23 (set (reg:DI 0 ax [orig:934 D.6036 ] [934])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 180 [0xb4])) [3 state_4(D)->h64+44 S4 A32]))) blake_ref.c:643 133 {*zero_extendsidi2}
     (nil))
(insn:TI 908 907 909 23 (parallel [
            (set (reg:SI 0 ax [orig:936 D.6032 ] [936])
                (lshiftrt:SI (reg:SI 0 ax [orig:934 D.6036 ] [934])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 909 908 911 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 42 [0x2a])) [0 MEM[(BitSequence *)hashval_6(D) + 42B]+0 S1 A8])
        (reg:QI 0 ax [orig:936 D.6032 ] [936])) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:936 D.6032 ] [936])
        (nil)))
(insn 911 909 912 23 (set (reg:DI 0 ax [orig:937 D.6036 ] [937])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 180 [0xb4])) [3 state_4(D)->h64+44 S4 A32]))) blake_ref.c:643 133 {*zero_extendsidi2}
     (nil))
(insn:TI 912 911 914 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 43 [0x2b])) [0 MEM[(BitSequence *)hashval_6(D) + 43B]+0 S1 A8])
        (reg:QI 0 ax [orig:937 D.6036 ] [937])) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:937 D.6036 ] [937])
        (nil)))
(insn 914 912 915 23 (set (reg:SI 0 ax [orig:940 D.6032 ] [940])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 179 [0xb3])) [3 state_4(D)->h64+43 S1 A8]))) blake_ref.c:643 138 {*zero_extendqisi2}
     (nil))
(insn:TI 915 914 917 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 44 [0x2c])) [0 MEM[(BitSequence *)hashval_6(D) + 44B]+0 S1 A8])
        (reg:QI 0 ax [orig:940 D.6032 ] [940])) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:940 D.6032 ] [940])
        (nil)))
(insn 917 915 918 23 (set (reg:SI 0 ax [orig:942 D.6032 ] [942])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 178 [0xb2])) [3 state_4(D)->h64+42 S2 A16]))) blake_ref.c:643 139 {*zero_extendhisi2}
     (nil))
(insn:TI 918 917 1248 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 45 [0x2d])) [0 MEM[(BitSequence *)hashval_6(D) + 45B]+0 S1 A8])
        (reg:QI 0 ax [orig:942 D.6032 ] [942])) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:942 D.6032 ] [942])
        (nil)))
(insn 1248 918 920 23 (set (reg:SI 0 ax [orig:944 D.6032 ] [944])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S4 A64])) blake_ref.c:643 90 {*movsi_internal}
     (nil))
(insn:TI 920 1248 921 23 (parallel [
            (set (reg:SI 0 ax [orig:944 D.6032 ] [944])
                (lshiftrt:SI (reg:SI 0 ax [orig:944 D.6032 ] [944])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 921 920 922 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 46 [0x2e])) [0 MEM[(BitSequence *)hashval_6(D) + 46B]+0 S1 A8])
        (reg:QI 0 ax [orig:944 D.6032 ] [944])) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:944 D.6032 ] [944])
        (nil)))
(insn 922 921 923 23 (set (reg:DI 0 ax [orig:945 state_4(D)->h64+40 ] [945])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
        (nil)))
(insn:TI 923 922 924 23 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 47 [0x2f])) [0 MEM[(BitSequence *)hashval_6(D) + 47B]+0 S1 A8])
        (reg:QI 0 ax [orig:945 state_4(D)->h64+40 ] [945])) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:945 state_4(D)->h64+40 ] [945])
        (nil)))
(insn 924 923 925 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 512 [0x200]))) blake_ref.c:645 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 925 924 926 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1058)
            (pc))) blake_ref.c:645 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6218 (nil)))
 -> 1058)
;;  succ:       24 [37.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              32 [62.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 24, loop depth 0, count 0, freq 2307, maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       23 [37.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  kill	 17 [flags]
(note 926 925 927 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(note 927 926 928 24 NOTE_INSN_DELETED)
(note 928 927 931 24 NOTE_INSN_DELETED)
(note 931 928 932 24 NOTE_INSN_DELETED)
(note 932 931 935 24 NOTE_INSN_DELETED)
(note 935 932 939 24 NOTE_INSN_DELETED)
(note 939 935 942 24 NOTE_INSN_DELETED)
(note 942 939 945 24 NOTE_INSN_DELETED)
(note 945 942 948 24 NOTE_INSN_DELETED)
(note 948 945 953 24 NOTE_INSN_DELETED)
(note 953 948 954 24 NOTE_INSN_DELETED)
(note 954 953 957 24 NOTE_INSN_DELETED)
(note 957 954 958 24 NOTE_INSN_DELETED)
(note 958 957 961 24 NOTE_INSN_DELETED)
(note 961 958 965 24 NOTE_INSN_DELETED)
(note 965 961 968 24 NOTE_INSN_DELETED)
(note 968 965 971 24 NOTE_INSN_DELETED)
(note 971 968 974 24 NOTE_INSN_DELETED)
(note 974 971 929 24 NOTE_INSN_DELETED)
(insn:TI 929 974 930 24 (set (reg:SI 0 ax [orig:948 D.6032 ] [948])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 191 [0xbf])) [3 state_4(D)->h64+55 S1 A8]))) blake_ref.c:646 138 {*zero_extendqisi2}
     (nil))
(insn:TI 930 929 933 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 48 [0x30])) [0 MEM[(BitSequence *)hashval_6(D) + 48B]+0 S1 A8])
        (reg:QI 0 ax [orig:948 D.6032 ] [948])) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:948 D.6032 ] [948])
        (nil)))
(insn 933 930 934 24 (set (reg:SI 0 ax [orig:951 D.6032 ] [951])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 190 [0xbe])) [3 state_4(D)->h64+54 S2 A16]))) blake_ref.c:646 139 {*zero_extendhisi2}
     (nil))
(insn:TI 934 933 936 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 49 [0x31])) [0 MEM[(BitSequence *)hashval_6(D) + 49B]+0 S1 A8])
        (reg:QI 0 ax [orig:951 D.6032 ] [951])) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:951 D.6032 ] [951])
        (nil)))
(insn 936 934 937 24 (set (reg:DI 0 ax [orig:952 D.6036 ] [952])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 188 [0xbc])) [3 state_4(D)->h64+52 S4 A32]))) blake_ref.c:646 133 {*zero_extendsidi2}
     (nil))
(insn:TI 937 936 938 24 (parallel [
            (set (reg:SI 0 ax [orig:954 D.6032 ] [954])
                (lshiftrt:SI (reg:SI 0 ax [orig:952 D.6036 ] [952])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 938 937 940 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 50 [0x32])) [0 MEM[(BitSequence *)hashval_6(D) + 50B]+0 S1 A8])
        (reg:QI 0 ax [orig:954 D.6032 ] [954])) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:954 D.6032 ] [954])
        (nil)))
(insn 940 938 941 24 (set (reg:DI 0 ax [orig:955 D.6036 ] [955])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 188 [0xbc])) [3 state_4(D)->h64+52 S4 A32]))) blake_ref.c:646 133 {*zero_extendsidi2}
     (nil))
(insn:TI 941 940 943 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 51 [0x33])) [0 MEM[(BitSequence *)hashval_6(D) + 51B]+0 S1 A8])
        (reg:QI 0 ax [orig:955 D.6036 ] [955])) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:955 D.6036 ] [955])
        (nil)))
(insn 943 941 944 24 (set (reg:SI 0 ax [orig:958 D.6032 ] [958])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 187 [0xbb])) [3 state_4(D)->h64+51 S1 A8]))) blake_ref.c:646 138 {*zero_extendqisi2}
     (nil))
(insn:TI 944 943 946 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 52 [0x34])) [0 MEM[(BitSequence *)hashval_6(D) + 52B]+0 S1 A8])
        (reg:QI 0 ax [orig:958 D.6032 ] [958])) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:958 D.6032 ] [958])
        (nil)))
(insn 946 944 947 24 (set (reg:SI 0 ax [orig:960 D.6032 ] [960])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 186 [0xba])) [3 state_4(D)->h64+50 S2 A16]))) blake_ref.c:646 139 {*zero_extendhisi2}
     (nil))
(insn:TI 947 946 1250 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 53 [0x35])) [0 MEM[(BitSequence *)hashval_6(D) + 53B]+0 S1 A8])
        (reg:QI 0 ax [orig:960 D.6032 ] [960])) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:960 D.6032 ] [960])
        (nil)))
(insn 1250 947 949 24 (set (reg:SI 0 ax [orig:962 D.6032 ] [962])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S4 A64])) blake_ref.c:646 90 {*movsi_internal}
     (nil))
(insn:TI 949 1250 950 24 (parallel [
            (set (reg:SI 0 ax [orig:962 D.6032 ] [962])
                (lshiftrt:SI (reg:SI 0 ax [orig:962 D.6032 ] [962])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 950 949 951 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 54 [0x36])) [0 MEM[(BitSequence *)hashval_6(D) + 54B]+0 S1 A8])
        (reg:QI 0 ax [orig:962 D.6032 ] [962])) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:962 D.6032 ] [962])
        (nil)))
(insn 951 950 952 24 (set (reg:DI 0 ax [orig:963 state_4(D)->h64+48 ] [963])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
        (nil)))
(insn:TI 952 951 955 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 55 [0x37])) [0 MEM[(BitSequence *)hashval_6(D) + 55B]+0 S1 A8])
        (reg:QI 0 ax [orig:963 state_4(D)->h64+48 ] [963])) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:963 state_4(D)->h64+48 ] [963])
        (nil)))
(insn 955 952 956 24 (set (reg:SI 0 ax [orig:966 D.6032 ] [966])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 199 [0xc7])) [3 state_4(D)->h64+63 S1 A8]))) blake_ref.c:647 138 {*zero_extendqisi2}
     (nil))
(insn:TI 956 955 959 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 56 [0x38])) [0 MEM[(BitSequence *)hashval_6(D) + 56B]+0 S1 A8])
        (reg:QI 0 ax [orig:966 D.6032 ] [966])) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:966 D.6032 ] [966])
        (nil)))
(insn 959 956 960 24 (set (reg:SI 0 ax [orig:969 D.6032 ] [969])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 198 [0xc6])) [3 state_4(D)->h64+62 S2 A16]))) blake_ref.c:647 139 {*zero_extendhisi2}
     (nil))
(insn:TI 960 959 962 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 57 [0x39])) [0 MEM[(BitSequence *)hashval_6(D) + 57B]+0 S1 A8])
        (reg:QI 0 ax [orig:969 D.6032 ] [969])) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:969 D.6032 ] [969])
        (nil)))
(insn 962 960 963 24 (set (reg:DI 0 ax [orig:970 D.6036 ] [970])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 196 [0xc4])) [3 state_4(D)->h64+60 S4 A32]))) blake_ref.c:647 133 {*zero_extendsidi2}
     (nil))
(insn:TI 963 962 964 24 (parallel [
            (set (reg:SI 0 ax [orig:972 D.6032 ] [972])
                (lshiftrt:SI (reg:SI 0 ax [orig:970 D.6036 ] [970])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 964 963 966 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 58 [0x3a])) [0 MEM[(BitSequence *)hashval_6(D) + 58B]+0 S1 A8])
        (reg:QI 0 ax [orig:972 D.6032 ] [972])) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:972 D.6032 ] [972])
        (nil)))
(insn 966 964 967 24 (set (reg:DI 0 ax [orig:973 D.6036 ] [973])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 196 [0xc4])) [3 state_4(D)->h64+60 S4 A32]))) blake_ref.c:647 133 {*zero_extendsidi2}
     (nil))
(insn:TI 967 966 969 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 59 [0x3b])) [0 MEM[(BitSequence *)hashval_6(D) + 59B]+0 S1 A8])
        (reg:QI 0 ax [orig:973 D.6036 ] [973])) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:973 D.6036 ] [973])
        (nil)))
(insn 969 967 970 24 (set (reg:SI 0 ax [orig:976 D.6032 ] [976])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 195 [0xc3])) [3 state_4(D)->h64+59 S1 A8]))) blake_ref.c:647 138 {*zero_extendqisi2}
     (nil))
(insn:TI 970 969 972 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 60 [0x3c])) [0 MEM[(BitSequence *)hashval_6(D) + 60B]+0 S1 A8])
        (reg:QI 0 ax [orig:976 D.6032 ] [976])) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:976 D.6032 ] [976])
        (nil)))
(insn 972 970 973 24 (set (reg:SI 0 ax [orig:978 D.6032 ] [978])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 194 [0xc2])) [3 state_4(D)->h64+58 S2 A16]))) blake_ref.c:647 139 {*zero_extendhisi2}
     (nil))
(insn:TI 973 972 1252 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 61 [0x3d])) [0 MEM[(BitSequence *)hashval_6(D) + 61B]+0 S1 A8])
        (reg:QI 0 ax [orig:978 D.6032 ] [978])) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:978 D.6032 ] [978])
        (nil)))
(insn 1252 973 975 24 (set (reg:SI 0 ax [orig:980 D.6032 ] [980])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S4 A64])) blake_ref.c:647 90 {*movsi_internal}
     (nil))
(insn:TI 975 1252 976 24 (parallel [
            (set (reg:SI 0 ax [orig:980 D.6032 ] [980])
                (lshiftrt:SI (reg:SI 0 ax [orig:980 D.6032 ] [980])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 976 975 977 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 62 [0x3e])) [0 MEM[(BitSequence *)hashval_6(D) + 62B]+0 S1 A8])
        (reg:QI 0 ax [orig:980 D.6032 ] [980])) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:980 D.6032 ] [980])
        (nil)))
(insn 977 976 978 24 (set (reg:DI 0 ax [orig:981 state_4(D)->h64+56 ] [981])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:633 state ] [633])
        (nil)))
(insn:TI 978 977 1374 24 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 63 [0x3f])) [0 MEM[(BitSequence *)hashval_6(D) + 63B]+0 S1 A8])
        (reg:QI 0 ax [orig:981 state_4(D)->h64+56 ] [981])) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 4 si [orig:634 hashval ] [634])
        (expr_list:REG_DEAD (reg:QI 0 ax [orig:981 state_4(D)->h64+56 ] [981])
            (nil))))
(insn 1374 978 1375 24 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:659 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 1375 1374 1451 24 (use (reg/i:SI 0 ax)) blake_ref.c:659 -1
     (nil))
(note 1451 1375 1377 24 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 1377 1451 1378 24 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:659 677 {blockage}
     (nil))
(insn/f:TI 1378 1377 1379 24 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:659 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 72 [0x48])))
            (nil))))
(insn/f:TI 1379 1378 1380 24 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:659 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 1380 1379 1381 24 (set (reg:DI 4 si)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:659 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 4 si)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 1381 1380 1382 24 (set (reg:DI 5 di)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:659 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 5 di)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 1382 1381 1383 24 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:659 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 6 bp)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(jump_insn:TI 1383 1382 1386 24 (simple_return) blake_ref.c:659 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

(barrier 1386 1383 1387)
;; basic block 25, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [39.0%]  (CAN_FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 38 [r9]
;; live  kill	 17 [flags]
(code_label 1387 1386 10 25 180 "" [1 uses])
(note 10 1387 18 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(note 18 10 40 25 NOTE_INSN_DELETED)
(note 40 18 15 25 NOTE_INSN_DELETED)
(insn:TI 15 40 16 25 (set (reg:SI 38 r9 [orig:88 D.6032 ] [88])
        (mem:SI (plus:DI (reg/f:DI 2 cx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) blake_ref.c:416 90 {*movsi_internal}
     (nil))
(insn 16 15 19 25 (set (reg:SI 0 ax [orig:89 D.6033 ] [89])
        (mem:SI (plus:DI (reg/f:DI 2 cx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])) blake_ref.c:416 90 {*movsi_internal}
     (nil))
(insn:TI 19 16 1161 25 (set (reg/v:SI 2 cx [orig:92 high ] [92])
        (mem:SI (plus:DI (reg/f:DI 2 cx [orig:633 state ] [633])
                (const_int 52 [0x34])) [2 state_4(D)->t32+4 S4 A32])) blake_ref.c:417 90 {*movsi_internal}
     (nil))
(insn:TI 1161 19 1081 25 (set (reg/v:SI 1 dx [orig:91 low ] [91])
        (reg:SI 38 r9 [orig:88 D.6032 ] [88])) blake_ref.c:419 90 {*movsi_internal}
     (nil))
(insn:TI 1081 1161 1082 25 (parallel [
            (set (reg:CCC 17 flags)
                (compare:CCC (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                        (reg:SI 0 ax [orig:89 D.6033 ] [89]))
                    (reg/v:SI 1 dx [orig:91 low ] [91])))
            (set (reg/v:SI 1 dx [orig:91 low ] [91])
                (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                    (reg:SI 0 ax [orig:89 D.6033 ] [89])))
        ]) blake_ref.c:419 302 {*addsi3_cc_overflow}
     (nil))
(insn:TI 1082 1081 39 25 (parallel [
            (set (reg/v:SI 2 cx [orig:92 high ] [92])
                (plus:SI (plus:SI (ltu:SI (reg:CCC 17 flags)
                            (const_int 0 [0]))
                        (reg/v:SI 2 cx [orig:92 high ] [92]))
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:419 284 {addsi3_carry}
     (expr_list:REG_DEAD (reg:CCC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 39 1082 1163 25 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 55 [0x37])) [0 msglen+7 S1 A8])
        (reg:QI 1 dx [orig:91 low ] [91])) blake_ref.c:421 93 {*movqi_internal}
     (nil))
(insn:TI 1163 39 32 25 (set (reg:SI 37 r8 [orig:635 D.6032 ] [635])
        (reg/v:SI 2 cx [orig:92 high ] [92])) blake_ref.c:420 90 {*movsi_internal}
     (nil))
(insn 32 1163 26 25 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 51 [0x33])) [0 msglen+3 S1 A8])
        (reg:QI 2 cx [orig:92 high ] [92])) blake_ref.c:420 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 2 cx [orig:92 high ] [92])
        (nil)))
(insn:TI 26 32 27 25 (parallel [
            (set (reg:SI 37 r8 [orig:635 D.6032 ] [635])
                (lshiftrt:SI (reg:SI 37 r8 [orig:635 D.6032 ] [635])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 27 26 1165 25 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 msglen+0 S1 A128])
        (reg:QI 37 r8 [orig:635 D.6032 ] [635])) blake_ref.c:420 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 37 r8 [orig:635 D.6032 ] [635])
        (nil)))
(insn 1165 27 28 25 (set (reg:SI 37 r8 [orig:636 D.6032 ] [636])
        (reg/v:SI 2 cx [orig:92 high ] [92])) blake_ref.c:420 90 {*movsi_internal}
     (nil))
(insn:TI 28 1165 29 25 (parallel [
            (set (reg:SI 37 r8 [orig:636 D.6032 ] [636])
                (lshiftrt:SI (reg:SI 37 r8 [orig:636 D.6032 ] [636])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 29 28 1167 25 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 49 [0x31])) [0 msglen+1 S1 A8])
        (reg:QI 37 r8 [orig:636 D.6032 ] [636])) blake_ref.c:420 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 37 r8 [orig:636 D.6032 ] [636])
        (nil)))
(insn 1167 29 1169 25 (set (reg:SI 37 r8 [orig:637 D.6032 ] [637])
        (reg/v:SI 2 cx [orig:92 high ] [92])) blake_ref.c:420 90 {*movsi_internal}
     (nil))
(insn 1169 1167 33 25 (set (reg:SI 2 cx [orig:638 D.6032 ] [638])
        (reg/v:SI 1 dx [orig:91 low ] [91])) blake_ref.c:421 90 {*movsi_internal}
     (nil))
(insn:TI 33 1169 30 25 (parallel [
            (set (reg:SI 2 cx [orig:638 D.6032 ] [638])
                (lshiftrt:SI (reg:SI 2 cx [orig:638 D.6032 ] [638])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 30 33 34 25 (parallel [
            (set (reg:SI 37 r8 [orig:637 D.6032 ] [637])
                (lshiftrt:SI (reg:SI 37 r8 [orig:637 D.6032 ] [637])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 34 30 1171 25 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 52 [0x34])) [0 msglen+4 S1 A32])
        (reg:QI 2 cx [orig:638 D.6032 ] [638])) blake_ref.c:421 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 2 cx [orig:638 D.6032 ] [638])
        (nil)))
(insn 1171 34 31 25 (set (reg:SI 2 cx [orig:639 D.6032 ] [639])
        (reg/v:SI 1 dx [orig:91 low ] [91])) blake_ref.c:421 90 {*movsi_internal}
     (nil))
(insn 31 1171 35 25 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 50 [0x32])) [0 msglen+2 S1 A16])
        (reg:QI 37 r8 [orig:637 D.6032 ] [637])) blake_ref.c:420 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 37 r8 [orig:637 D.6032 ] [637])
        (nil)))
(insn:TI 35 31 36 25 (parallel [
            (set (reg:SI 2 cx [orig:639 D.6032 ] [639])
                (lshiftrt:SI (reg:SI 2 cx [orig:639 D.6032 ] [639])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 36 35 1173 25 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 53 [0x35])) [0 msglen+5 S1 A8])
        (reg:QI 2 cx [orig:639 D.6032 ] [639])) blake_ref.c:421 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 2 cx [orig:639 D.6032 ] [639])
        (nil)))
(insn 1173 36 37 25 (set (reg:SI 2 cx [orig:640 D.6032 ] [640])
        (reg/v:SI 1 dx [orig:91 low ] [91])) blake_ref.c:421 90 {*movsi_internal}
     (nil))
(insn:TI 37 1173 1283 25 (parallel [
            (set (reg:SI 2 cx [orig:640 D.6032 ] [640])
                (lshiftrt:SI (reg:SI 2 cx [orig:640 D.6032 ] [640])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 1283 37 38 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:QI (reg:QI 0 ax [orig:89 D.6033 ] [89])
                (const_int 7 [0x7]))
            (const_int 0 [0]))) blake_ref.c:423 359 {*testqi_1_maybe_si}
     (nil))
(insn:TI 38 1283 42 25 (set (mem/j/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 54 [0x36])) [0 msglen+6 S1 A16])
        (reg:QI 2 cx [orig:640 D.6032 ] [640])) blake_ref.c:421 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 2 cx [orig:640 D.6032 ] [640])
        (nil)))
(jump_insn 42 38 146 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1395)
            (pc))) blake_ref.c:423 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 1395)
;;  succ:       33 [50.0%]  (CAN_FALLTHRU)
;;              26 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]

;; basic block 26, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       25 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 37 [r8] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  gen 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 37 [r8] 40 [r11]
;; live  kill	 17 [flags]
(note 146 42 1274 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1274 146 149 26 (set (reg:SI 37 r8 [658])
        (plus:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 7 [0x7]))) blake_ref.c:464 213 {*leasi}
     (nil))
(insn 149 1274 1176 26 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 0 [0]))) blake_ref.c:464 3 {*cmpsi_ccno_1}
     (nil))
(insn 1176 149 161 26 (set (reg:SI 2 cx [660])
        (reg:SI 0 ax [orig:89 D.6033 ] [89])) blake_ref.c:464 90 {*movsi_internal}
     (nil))
(insn:TI 161 1176 165 26 (set (reg:SI 6 bp [668])
        (const_int 255 [0xff])) blake_ref.c:465 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 255 [0xff])
        (nil)))
(insn 165 161 150 26 (set (reg:SI 5 di [672])
        (const_int 128 [0x80])) blake_ref.c:465 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 128 [0x80])
        (nil)))
(insn:TI 150 165 153 26 (set (reg:SI 37 r8 [orig:657 D.6033 ] [657])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 37 r8 [658])
            (reg:SI 0 ax [orig:89 D.6033 ] [89]))) blake_ref.c:464 951 {*movsicc_noc}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil)))
(insn 153 150 154 26 (parallel [
            (set (reg:SI 2 cx [660])
                (ashiftrt:SI (reg:SI 2 cx [660])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 538 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 154 153 151 26 (parallel [
            (set (reg:SI 2 cx [661])
                (lshiftrt:SI (reg:SI 2 cx [660])
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 151 154 1275 26 (parallel [
            (set (reg:SI 37 r8 [659])
                (ashiftrt:SI (reg:SI 37 r8 [orig:657 D.6033 ] [657])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 545 {*ashrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (div:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
                (const_int 8 [0x8]))
            (nil))))
(insn:TI 1275 151 163 26 (set (reg:SI 40 r11 [662])
        (plus:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (reg:SI 2 cx [661]))) blake_ref.c:464 213 {*leasi}
     (nil))
(insn 163 1275 156 26 (set (reg:DI 37 r8 [orig:669 D.6033 ] [669])
        (sign_extend:DI (reg:SI 37 r8 [659]))) blake_ref.c:464 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 156 163 157 26 (parallel [
            (set (reg:SI 40 r11 [663])
                (and:SI (reg:SI 40 r11 [662])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 381 {*andsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 157 156 159 26 (parallel [
            (set (reg:SI 40 r11 [664])
                (minus:SI (reg:SI 40 r11 [663])
                    (reg:SI 2 cx [661])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 2 cx [661])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 159 157 160 26 (set (reg:SI 2 cx [666])
        (const_int 8 [0x8])) blake_ref.c:465 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 8 [0x8])
        (nil)))
(insn:TI 160 159 162 26 (parallel [
            (set (reg:SI 2 cx [orig:665 D.6033 ] [665])
                (minus:SI (reg:SI 2 cx [666])
                    (reg:SI 40 r11 [664])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (minus:SI (const_int 8 [0x8])
                (reg:SI 40 r11 [664]))
            (nil))))
(insn:TI 162 160 1180 26 (parallel [
            (set (reg:SI 6 bp [orig:667 D.6033 ] [667])
                (ashift:SI (reg:SI 6 bp [668])
                    (reg:QI 2 cx [orig:665 D.6033 ] [665])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:QI 2 cx [orig:665 D.6033 ] [665])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashift:SI (const_int 255 [0xff])
                    (subreg:QI (reg:SI 2 cx [orig:665 D.6033 ] [665]) 0))
                (nil)))))
(insn 1180 162 164 26 (set (reg:QI 2 cx [1006])
        (reg:QI 40 r11 [664])) blake_ref.c:465 93 {*movqi_internal}
     (nil))
(insn 164 1180 166 26 (parallel [
            (set (reg:QI 6 bp [orig:670 D.6037 ] [670])
                (and:QI (reg:QI 6 bp [orig:667 D.6033 ] [667])
                    (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                                (reg:DI 37 r8 [orig:669 D.6033 ] [669]))
                            (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 384 {*andqi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 166 164 1179 26 (parallel [
            (set (reg:SI 5 di [orig:671 D.6033 ] [671])
                (ashiftrt:SI (reg:SI 5 di [orig:671 D.6033 ] [671])
                    (reg:QI 2 cx [1006])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:QI 2 cx [1006])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashiftrt:SI (const_int 128 [0x80])
                    (subreg:QI (reg:SI 40 r11 [664]) 0))
                (nil)))))
(insn:TI 1179 166 1277 26 (set (reg:SI 2 cx [orig:671 D.6033 ] [671])
        (reg:SI 5 di [orig:671 D.6033 ] [671])) blake_ref.c:465 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [orig:671 D.6033 ] [671])
        (nil)))
(insn 1277 1179 1276 26 (set (reg:SI 5 di [orig:674 D.6035 ] [674])
        (plus:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int -441 [0xfffffffffffffe47]))) blake_ref.c:467 213 {*leasi}
     (nil))
(insn:TI 1276 1277 171 26 (parallel [
            (set (reg:SI 2 cx [orig:128 D.6034 ] [128])
                (xor:SI (reg:SI 2 cx [orig:671 D.6033 ] [671])
                    (reg:SI 6 bp [orig:670 D.6037 ] [670])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 6 bp [orig:670 D.6037 ] [670])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 171 1276 169 26 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 5 di [orig:674 D.6035 ] [674])
            (const_int 5 [0x5]))) blake_ref.c:467 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 5 di [orig:674 D.6035 ] [674])
        (nil)))
(insn:TI 169 171 172 26 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (reg:DI 37 r8 [orig:669 D.6033 ] [669]))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (reg:QI 2 cx [orig:128 D.6034 ] [128])) blake_ref.c:465 93 {*movqi_internal}
     (nil))
(jump_insn 172 169 173 26 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 187)
            (pc))) blake_ref.c:467 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 187)
;;  succ:       27 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              47 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 27, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 26, next block 28, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 17 [flags]
;; live  kill	
(note 173 172 174 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn:TI 174 173 175 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 224 [0xe0]))) blake_ref.c:469 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (nil)))
(jump_insn:TI 175 174 176 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 180)
            (pc))) blake_ref.c:469 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 180)
;;  succ:       29 [28.0%]  (CAN_FALLTHRU)
;;              28 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]

;; basic block 28, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 27, next block 29, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       27 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 40 [r11]
;; live  gen 	 2 [cx]
;; live  kill	 17 [flags]
(note 176 175 1273 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1273 176 179 28 (parallel [
            (set (reg:SI 2 cx [676])
                (xor:SI (reg:SI 2 cx [orig:128 D.6034 ] [128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:472 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 179 1273 180 28 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (reg:DI 37 r8 [orig:669 D.6033 ] [669]))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (reg:QI 2 cx [676])) blake_ref.c:472 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [orig:669 D.6033 ] [669])
        (expr_list:REG_DEAD (reg:QI 2 cx [676])
            (nil))))
;;  succ:       29 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]
;; live  out 	 3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]

;; basic block 29, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 28, next block 30, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [28.0%]  (CAN_FALLTHRU)
;;              28 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]
;; lr  use 	 3 [bx] 7 [sp] 38 [r9] 40 [r11]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 38 [r9] 40 [r11]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 180 179 181 29 107 "" [1 uses])
(note 181 180 182 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(note 182 181 183 29 NOTE_INSN_DELETED)
(insn:TI 183 182 184 29 (set (reg:SI 0 ax [orig:87 D.6031 ] [87])
        (plus:SI (plus:SI (reg:SI 38 r9 [orig:88 D.6032 ] [88])
                (reg:SI 40 r11 [664]))
            (const_int -8 [0xfffffffffffffff8]))) blake_ref.c:473 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 40 r11 [664])
        (expr_list:REG_DEAD (reg:SI 38 r9 [orig:88 D.6032 ] [88])
            (nil))))
(insn 184 183 299 29 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 448 [0x1c0])) blake_ref.c:475 90 {*movsi_internal}
     (nil))
;;  succ:       30 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

;; basic block 30, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 29, next block 31, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       39 [100.0%]  (CAN_FALLTHRU)
;;              73 [100.0%]  (CAN_FALLTHRU)
;;              29 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              54 [100.0%]  (CAN_FALLTHRU)
;;              69 [100.0%]  (CAN_FALLTHRU)
;;              81 [100.0%]  (CAN_FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(code_label 299 184 300 30 108 "" [5 uses])
(note 300 299 310 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(note 310 300 313 30 NOTE_INSN_DELETED)
(note 313 310 316 30 NOTE_INSN_DELETED)
(note 316 313 321 30 NOTE_INSN_DELETED)
(note 321 316 324 30 NOTE_INSN_DELETED)
(note 324 321 327 30 NOTE_INSN_DELETED)
(note 327 324 332 30 NOTE_INSN_DELETED)
(note 332 327 335 30 NOTE_INSN_DELETED)
(note 335 332 338 30 NOTE_INSN_DELETED)
(note 338 335 343 30 NOTE_INSN_DELETED)
(note 343 338 346 30 NOTE_INSN_DELETED)
(note 346 343 349 30 NOTE_INSN_DELETED)
(note 349 346 354 30 NOTE_INSN_DELETED)
(note 354 349 357 30 NOTE_INSN_DELETED)
(note 357 354 360 30 NOTE_INSN_DELETED)
(note 360 357 365 30 NOTE_INSN_DELETED)
(note 365 360 368 30 NOTE_INSN_DELETED)
(note 368 365 371 30 NOTE_INSN_DELETED)
(note 371 368 376 30 NOTE_INSN_DELETED)
(note 376 371 379 30 NOTE_INSN_DELETED)
(note 379 376 382 30 NOTE_INSN_DELETED)
(note 382 379 301 30 NOTE_INSN_DELETED)
(insn:TI 301 382 1270 30 (parallel [
            (set (reg:SI 0 ax [697])
                (plus:SI (reg:SI 0 ax [orig:87 D.6031 ] [87])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:511 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
            (nil))))
(insn 1270 301 304 30 (set (reg/f:DI 1 dx [698])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) 214 {*leadi}
     (nil))
(insn 304 1270 302 30 (set (reg:DI 37 r8)
        (const_int 64 [0x40])) 89 {*movdi_internal}
     (nil))
(insn:TI 302 304 306 30 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 0 ax [697])) blake_ref.c:511 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [697])
        (nil)))
(insn 306 302 307 30 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 307 306 311 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 311 307 312 30 (set (reg:SI 0 ax [orig:699 D.6032 ] [699])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 19 [0x13])) [2 state_4(D)->h32+3 S1 A8]))) blake_ref.c:515 138 {*zero_extendqisi2}
     (nil))
(insn:TI 312 311 314 30 (set (mem:QI (reg/v/f:DI 4 si [orig:634 hashval ] [634]) [0 *hashval_6(D)+0 S1 A8])
        (reg:QI 0 ax [orig:699 D.6032 ] [699])) blake_ref.c:515 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:699 D.6032 ] [699])
        (nil)))
(insn 314 312 315 30 (set (reg:SI 0 ax [orig:701 D.6032 ] [701])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 18 [0x12])) [2 state_4(D)->h32+2 S2 A16]))) blake_ref.c:515 139 {*zero_extendhisi2}
     (nil))
(insn:TI 315 314 1181 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 1 [0x1])) [0 MEM[(BitSequence *)hashval_6(D) + 1B]+0 S1 A8])
        (reg:QI 0 ax [orig:701 D.6032 ] [701])) blake_ref.c:515 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:701 D.6032 ] [701])
        (nil)))
(insn 1181 315 317 30 (set (reg:SI 0 ax [orig:703 D.6032 ] [703])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 90 {*movsi_internal}
     (nil))
(insn:TI 317 1181 318 30 (parallel [
            (set (reg:SI 0 ax [orig:703 D.6032 ] [703])
                (lshiftrt:SI (reg:SI 0 ax [orig:703 D.6032 ] [703])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:515 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
                (const_int 8 [0x8]))
            (nil))))
(insn:TI 318 317 319 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 2 [0x2])) [0 MEM[(BitSequence *)hashval_6(D) + 2B]+0 S1 A8])
        (reg:QI 0 ax [orig:703 D.6032 ] [703])) blake_ref.c:515 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:703 D.6032 ] [703])
        (nil)))
(insn 319 318 320 30 (set (reg:SI 0 ax [orig:705 state_4(D)->h32 ] [705])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
        (nil)))
(insn:TI 320 319 322 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 3 [0x3])) [0 MEM[(BitSequence *)hashval_6(D) + 3B]+0 S1 A8])
        (reg:QI 0 ax [orig:705 state_4(D)->h32 ] [705])) blake_ref.c:515 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:705 state_4(D)->h32 ] [705])
        (nil)))
(insn 322 320 323 30 (set (reg:SI 0 ax [orig:706 D.6032 ] [706])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 23 [0x17])) [2 state_4(D)->h32+7 S1 A8]))) blake_ref.c:516 138 {*zero_extendqisi2}
     (nil))
(insn:TI 323 322 325 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 4 [0x4])) [0 MEM[(BitSequence *)hashval_6(D) + 4B]+0 S1 A8])
        (reg:QI 0 ax [orig:706 D.6032 ] [706])) blake_ref.c:516 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:706 D.6032 ] [706])
        (nil)))
(insn 325 323 326 30 (set (reg:SI 0 ax [orig:708 D.6032 ] [708])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 22 [0x16])) [2 state_4(D)->h32+6 S2 A16]))) blake_ref.c:516 139 {*zero_extendhisi2}
     (nil))
(insn:TI 326 325 1183 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 5 [0x5])) [0 MEM[(BitSequence *)hashval_6(D) + 5B]+0 S1 A8])
        (reg:QI 0 ax [orig:708 D.6032 ] [708])) blake_ref.c:516 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:708 D.6032 ] [708])
        (nil)))
(insn 1183 326 328 30 (set (reg:SI 0 ax [orig:710 D.6032 ] [710])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 90 {*movsi_internal}
     (nil))
(insn:TI 328 1183 329 30 (parallel [
            (set (reg:SI 0 ax [orig:710 D.6032 ] [710])
                (lshiftrt:SI (reg:SI 0 ax [orig:710 D.6032 ] [710])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:516 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
                (const_int 8 [0x8]))
            (nil))))
(insn:TI 329 328 330 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 6 [0x6])) [0 MEM[(BitSequence *)hashval_6(D) + 6B]+0 S1 A8])
        (reg:QI 0 ax [orig:710 D.6032 ] [710])) blake_ref.c:516 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:710 D.6032 ] [710])
        (nil)))
(insn 330 329 331 30 (set (reg:SI 0 ax [orig:712 state_4(D)->h32+4 ] [712])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
        (nil)))
(insn:TI 331 330 333 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 7 [0x7])) [0 MEM[(BitSequence *)hashval_6(D) + 7B]+0 S1 A8])
        (reg:QI 0 ax [orig:712 state_4(D)->h32+4 ] [712])) blake_ref.c:516 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:712 state_4(D)->h32+4 ] [712])
        (nil)))
(insn 333 331 334 30 (set (reg:SI 0 ax [orig:713 D.6032 ] [713])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 27 [0x1b])) [2 state_4(D)->h32+11 S1 A8]))) blake_ref.c:517 138 {*zero_extendqisi2}
     (nil))
(insn:TI 334 333 336 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 8 [0x8])) [0 MEM[(BitSequence *)hashval_6(D) + 8B]+0 S1 A8])
        (reg:QI 0 ax [orig:713 D.6032 ] [713])) blake_ref.c:517 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:713 D.6032 ] [713])
        (nil)))
(insn 336 334 337 30 (set (reg:SI 0 ax [orig:715 D.6032 ] [715])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 26 [0x1a])) [2 state_4(D)->h32+10 S2 A16]))) blake_ref.c:517 139 {*zero_extendhisi2}
     (nil))
(insn:TI 337 336 1185 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 9 [0x9])) [0 MEM[(BitSequence *)hashval_6(D) + 9B]+0 S1 A8])
        (reg:QI 0 ax [orig:715 D.6032 ] [715])) blake_ref.c:517 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:715 D.6032 ] [715])
        (nil)))
(insn 1185 337 339 30 (set (reg:SI 0 ax [orig:717 D.6032 ] [717])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 90 {*movsi_internal}
     (nil))
(insn:TI 339 1185 340 30 (parallel [
            (set (reg:SI 0 ax [orig:717 D.6032 ] [717])
                (lshiftrt:SI (reg:SI 0 ax [orig:717 D.6032 ] [717])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:517 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
                (const_int 8 [0x8]))
            (nil))))
(insn:TI 340 339 341 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 10 [0xa])) [0 MEM[(BitSequence *)hashval_6(D) + 10B]+0 S1 A8])
        (reg:QI 0 ax [orig:717 D.6032 ] [717])) blake_ref.c:517 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:717 D.6032 ] [717])
        (nil)))
(insn 341 340 342 30 (set (reg:SI 0 ax [orig:719 state_4(D)->h32+8 ] [719])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
        (nil)))
(insn:TI 342 341 344 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 11 [0xb])) [0 MEM[(BitSequence *)hashval_6(D) + 11B]+0 S1 A8])
        (reg:QI 0 ax [orig:719 state_4(D)->h32+8 ] [719])) blake_ref.c:517 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:719 state_4(D)->h32+8 ] [719])
        (nil)))
(insn 344 342 345 30 (set (reg:SI 0 ax [orig:720 D.6032 ] [720])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 31 [0x1f])) [2 state_4(D)->h32+15 S1 A8]))) blake_ref.c:518 138 {*zero_extendqisi2}
     (nil))
(insn:TI 345 344 347 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 12 [0xc])) [0 MEM[(BitSequence *)hashval_6(D) + 12B]+0 S1 A8])
        (reg:QI 0 ax [orig:720 D.6032 ] [720])) blake_ref.c:518 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:720 D.6032 ] [720])
        (nil)))
(insn 347 345 348 30 (set (reg:SI 0 ax [orig:722 D.6032 ] [722])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 30 [0x1e])) [2 state_4(D)->h32+14 S2 A16]))) blake_ref.c:518 139 {*zero_extendhisi2}
     (nil))
(insn:TI 348 347 1187 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 13 [0xd])) [0 MEM[(BitSequence *)hashval_6(D) + 13B]+0 S1 A8])
        (reg:QI 0 ax [orig:722 D.6032 ] [722])) blake_ref.c:518 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:722 D.6032 ] [722])
        (nil)))
(insn 1187 348 350 30 (set (reg:SI 0 ax [orig:724 D.6032 ] [724])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 90 {*movsi_internal}
     (nil))
(insn:TI 350 1187 351 30 (parallel [
            (set (reg:SI 0 ax [orig:724 D.6032 ] [724])
                (lshiftrt:SI (reg:SI 0 ax [orig:724 D.6032 ] [724])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:518 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
                (const_int 8 [0x8]))
            (nil))))
(insn:TI 351 350 352 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 14 [0xe])) [0 MEM[(BitSequence *)hashval_6(D) + 14B]+0 S1 A8])
        (reg:QI 0 ax [orig:724 D.6032 ] [724])) blake_ref.c:518 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:724 D.6032 ] [724])
        (nil)))
(insn 352 351 353 30 (set (reg:SI 0 ax [orig:726 state_4(D)->h32+12 ] [726])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
        (nil)))
(insn:TI 353 352 355 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 15 [0xf])) [0 MEM[(BitSequence *)hashval_6(D) + 15B]+0 S1 A8])
        (reg:QI 0 ax [orig:726 state_4(D)->h32+12 ] [726])) blake_ref.c:518 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:726 state_4(D)->h32+12 ] [726])
        (nil)))
(insn 355 353 356 30 (set (reg:SI 0 ax [orig:727 D.6032 ] [727])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 35 [0x23])) [2 state_4(D)->h32+19 S1 A8]))) blake_ref.c:519 138 {*zero_extendqisi2}
     (nil))
(insn:TI 356 355 358 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 16 [0x10])) [0 MEM[(BitSequence *)hashval_6(D) + 16B]+0 S1 A8])
        (reg:QI 0 ax [orig:727 D.6032 ] [727])) blake_ref.c:519 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:727 D.6032 ] [727])
        (nil)))
(insn 358 356 359 30 (set (reg:SI 0 ax [orig:729 D.6032 ] [729])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 34 [0x22])) [2 state_4(D)->h32+18 S2 A16]))) blake_ref.c:519 139 {*zero_extendhisi2}
     (nil))
(insn:TI 359 358 1189 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 17 [0x11])) [0 MEM[(BitSequence *)hashval_6(D) + 17B]+0 S1 A8])
        (reg:QI 0 ax [orig:729 D.6032 ] [729])) blake_ref.c:519 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:729 D.6032 ] [729])
        (nil)))
(insn 1189 359 361 30 (set (reg:SI 0 ax [orig:731 D.6032 ] [731])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 90 {*movsi_internal}
     (nil))
(insn:TI 361 1189 362 30 (parallel [
            (set (reg:SI 0 ax [orig:731 D.6032 ] [731])
                (lshiftrt:SI (reg:SI 0 ax [orig:731 D.6032 ] [731])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:519 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
                (const_int 8 [0x8]))
            (nil))))
(insn:TI 362 361 363 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 18 [0x12])) [0 MEM[(BitSequence *)hashval_6(D) + 18B]+0 S1 A8])
        (reg:QI 0 ax [orig:731 D.6032 ] [731])) blake_ref.c:519 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:731 D.6032 ] [731])
        (nil)))
(insn 363 362 364 30 (set (reg:SI 0 ax [orig:733 state_4(D)->h32+16 ] [733])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
        (nil)))
(insn:TI 364 363 366 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 19 [0x13])) [0 MEM[(BitSequence *)hashval_6(D) + 19B]+0 S1 A8])
        (reg:QI 0 ax [orig:733 state_4(D)->h32+16 ] [733])) blake_ref.c:519 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:733 state_4(D)->h32+16 ] [733])
        (nil)))
(insn 366 364 367 30 (set (reg:SI 0 ax [orig:734 D.6032 ] [734])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 39 [0x27])) [2 state_4(D)->h32+23 S1 A8]))) blake_ref.c:520 138 {*zero_extendqisi2}
     (nil))
(insn:TI 367 366 369 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 20 [0x14])) [0 MEM[(BitSequence *)hashval_6(D) + 20B]+0 S1 A8])
        (reg:QI 0 ax [orig:734 D.6032 ] [734])) blake_ref.c:520 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:734 D.6032 ] [734])
        (nil)))
(insn 369 367 370 30 (set (reg:SI 0 ax [orig:736 D.6032 ] [736])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 38 [0x26])) [2 state_4(D)->h32+22 S2 A16]))) blake_ref.c:520 139 {*zero_extendhisi2}
     (nil))
(insn:TI 370 369 1191 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 21 [0x15])) [0 MEM[(BitSequence *)hashval_6(D) + 21B]+0 S1 A8])
        (reg:QI 0 ax [orig:736 D.6032 ] [736])) blake_ref.c:520 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:736 D.6032 ] [736])
        (nil)))
(insn 1191 370 372 30 (set (reg:SI 0 ax [orig:738 D.6032 ] [738])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 90 {*movsi_internal}
     (nil))
(insn:TI 372 1191 373 30 (parallel [
            (set (reg:SI 0 ax [orig:738 D.6032 ] [738])
                (lshiftrt:SI (reg:SI 0 ax [orig:738 D.6032 ] [738])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:520 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
                (const_int 8 [0x8]))
            (nil))))
(insn:TI 373 372 374 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 22 [0x16])) [0 MEM[(BitSequence *)hashval_6(D) + 22B]+0 S1 A8])
        (reg:QI 0 ax [orig:738 D.6032 ] [738])) blake_ref.c:520 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:738 D.6032 ] [738])
        (nil)))
(insn 374 373 375 30 (set (reg:SI 0 ax [orig:740 state_4(D)->h32+20 ] [740])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
        (nil)))
(insn:TI 375 374 377 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 23 [0x17])) [0 MEM[(BitSequence *)hashval_6(D) + 23B]+0 S1 A8])
        (reg:QI 0 ax [orig:740 state_4(D)->h32+20 ] [740])) blake_ref.c:520 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:740 state_4(D)->h32+20 ] [740])
        (nil)))
(insn 377 375 378 30 (set (reg:SI 0 ax [orig:741 D.6032 ] [741])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 43 [0x2b])) [2 state_4(D)->h32+27 S1 A8]))) blake_ref.c:521 138 {*zero_extendqisi2}
     (nil))
(insn:TI 378 377 380 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 24 [0x18])) [0 MEM[(BitSequence *)hashval_6(D) + 24B]+0 S1 A8])
        (reg:QI 0 ax [orig:741 D.6032 ] [741])) blake_ref.c:521 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:741 D.6032 ] [741])
        (nil)))
(insn 380 378 381 30 (set (reg:SI 0 ax [orig:743 D.6032 ] [743])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 42 [0x2a])) [2 state_4(D)->h32+26 S2 A16]))) blake_ref.c:521 139 {*zero_extendhisi2}
     (nil))
(insn:TI 381 380 1193 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 25 [0x19])) [0 MEM[(BitSequence *)hashval_6(D) + 25B]+0 S1 A8])
        (reg:QI 0 ax [orig:743 D.6032 ] [743])) blake_ref.c:521 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:743 D.6032 ] [743])
        (nil)))
(insn 1193 381 383 30 (set (reg:SI 0 ax [orig:745 D.6032 ] [745])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 90 {*movsi_internal}
     (nil))
(insn:TI 383 1193 384 30 (parallel [
            (set (reg:SI 0 ax [orig:745 D.6032 ] [745])
                (lshiftrt:SI (reg:SI 0 ax [orig:745 D.6032 ] [745])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:521 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
                (const_int 8 [0x8]))
            (nil))))
(insn:TI 384 383 385 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 26 [0x1a])) [0 MEM[(BitSequence *)hashval_6(D) + 26B]+0 S1 A8])
        (reg:QI 0 ax [orig:745 D.6032 ] [745])) blake_ref.c:521 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:745 D.6032 ] [745])
        (nil)))
(insn 385 384 386 30 (set (reg:SI 0 ax [orig:747 state_4(D)->h32+24 ] [747])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
        (nil)))
(insn:TI 386 385 387 30 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 27 [0x1b])) [0 MEM[(BitSequence *)hashval_6(D) + 27B]+0 S1 A8])
        (reg:QI 0 ax [orig:747 state_4(D)->h32+24 ] [747])) blake_ref.c:521 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:747 state_4(D)->h32+24 ] [747])
        (nil)))
(insn 387 386 388 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 256 [0x100]))) blake_ref.c:523 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 388 387 389 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1058)
            (pc))) blake_ref.c:523 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6218 (nil)))
 -> 1058)
;;  succ:       31 [37.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              32 [62.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 31, loop depth 0, count 0, freq 1475, maybe hot
;;  prev block 30, next block 32, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       30 [37.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(note 389 388 390 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(note 390 389 393 31 NOTE_INSN_DELETED)
(note 393 390 396 31 NOTE_INSN_DELETED)
(note 396 393 391 31 NOTE_INSN_DELETED)
(insn:TI 391 396 392 31 (set (reg:SI 0 ax [orig:748 D.6032 ] [748])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 47 [0x2f])) [2 state_4(D)->h32+31 S1 A8]))) blake_ref.c:524 138 {*zero_extendqisi2}
     (nil))
(insn:TI 392 391 394 31 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 28 [0x1c])) [0 MEM[(BitSequence *)hashval_6(D) + 28B]+0 S1 A8])
        (reg:QI 0 ax [orig:748 D.6032 ] [748])) blake_ref.c:524 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:748 D.6032 ] [748])
        (nil)))
(insn 394 392 395 31 (set (reg:SI 0 ax [orig:750 D.6032 ] [750])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 46 [0x2e])) [2 state_4(D)->h32+30 S2 A16]))) blake_ref.c:524 139 {*zero_extendhisi2}
     (nil))
(insn:TI 395 394 1195 31 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 29 [0x1d])) [0 MEM[(BitSequence *)hashval_6(D) + 29B]+0 S1 A8])
        (reg:QI 0 ax [orig:750 D.6032 ] [750])) blake_ref.c:524 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:750 D.6032 ] [750])
        (nil)))
(insn 1195 395 397 31 (set (reg:SI 0 ax [orig:752 D.6032 ] [752])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 90 {*movsi_internal}
     (nil))
(insn:TI 397 1195 398 31 (parallel [
            (set (reg:SI 0 ax [orig:752 D.6032 ] [752])
                (lshiftrt:SI (reg:SI 0 ax [orig:752 D.6032 ] [752])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:524 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])
                (const_int 8 [0x8]))
            (nil))))
(insn:TI 398 397 399 31 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 30 [0x1e])) [0 MEM[(BitSequence *)hashval_6(D) + 30B]+0 S1 A8])
        (reg:QI 0 ax [orig:752 D.6032 ] [752])) blake_ref.c:524 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:752 D.6032 ] [752])
        (nil)))
(insn 399 398 400 31 (set (reg:SI 0 ax [orig:754 state_4(D)->h32+28 ] [754])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:633 state ] [633])
        (nil)))
(insn:TI 400 399 1058 31 (set (mem:QI (plus:DI (reg/v/f:DI 4 si [orig:634 hashval ] [634])
                (const_int 31 [0x1f])) [0 MEM[(BitSequence *)hashval_6(D) + 31B]+0 S1 A8])
        (reg:QI 0 ax [orig:754 state_4(D)->h32+28 ] [754])) blake_ref.c:524 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 4 si [orig:634 hashval ] [634])
        (expr_list:REG_DEAD (reg:QI 0 ax [orig:754 state_4(D)->h32+28 ] [754])
            (nil))))
;;  succ:       32 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 32, loop depth 0, count 0, freq 7693, maybe hot
;;  prev block 31, next block 33, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       31 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              30 [62.2%]  (CAN_FALLTHRU)
;;              23 [62.2%]  (CAN_FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  kill	 17 [flags]
(code_label 1058 400 1017 32 160 "" [2 uses])
(note 1017 1058 1371 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1371 1017 1016 32 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:659 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 1016 1371 1452 32 (use (reg/i:SI 0 ax)) blake_ref.c:659 -1
     (nil))
(note 1452 1016 1294 32 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 1294 1452 1295 32 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:659 677 {blockage}
     (nil))
(insn/f:TI 1295 1294 1296 32 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:659 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 72 [0x48])))
            (nil))))
(insn/f:TI 1296 1295 1297 32 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:659 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
            (nil))))
(insn/f:TI 1297 1296 1298 32 (set (reg:DI 4 si)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:659 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 4 si)
            (nil))))
(insn/f:TI 1298 1297 1299 32 (set (reg:DI 5 di)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:659 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 5 di)
            (nil))))
(insn/f:TI 1299 1298 1300 32 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:659 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 6 bp)
            (nil))))
(jump_insn:TI 1300 1299 1301 32 (simple_return) blake_ref.c:659 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

(barrier 1301 1300 1395)
;; basic block 33, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 32, next block 34, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       25 [50.0%]  (CAN_FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 1395 1301 43 33 185 "" [1 uses])
(note 43 1395 44 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn:TI 44 43 45 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 440 [0x1b8]))) blake_ref.c:426 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 45 44 71 33 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1396)
            (pc))) blake_ref.c:426 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 1396)
;;  succ:       68 [28.0%]  (CAN_FALLTHRU)
;;              34 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]

;; basic block 34, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 33, next block 35, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       33 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 71 45 72 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn:TI 72 71 73 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 439 [0x1b7]))) blake_ref.c:435 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 73 72 74 34 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) blake_ref.c:435 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 81)
;;  succ:       35 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              64 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 35, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 34, next block 36, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       34 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 74 73 75 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn:TI 75 74 76 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 0 [0]))) blake_ref.c:437 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 76 75 986 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1397)
            (pc))) blake_ref.c:437 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 1397)
;;  succ:       71 [50.0%]  (CAN_FALLTHRU)
;;              36 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 36, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 35, next block 37, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       35 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              71 [100.0%]  (CAN_FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 986 76 987 36 100 "" [1 uses])
(note 987 986 992 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(note 992 987 988 36 NOTE_INSN_DELETED)
(insn:TI 988 992 990 36 (parallel [
            (set (reg:SI 1 dx [983])
                (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:440 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
            (nil))))
(insn 990 988 995 36 (set (reg:SI 37 r8 [985])
        (const_int 440 [0x1b8])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 440 [0x1b8])
        (nil)))
(insn 995 990 989 36 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(insn:TI 989 995 991 36 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [983])) blake_ref.c:440 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [983])
        (nil)))
(insn 991 989 994 36 (parallel [
            (set (reg:SI 37 r8 [orig:984 D.6033 ] [984])
                (minus:SI (reg:SI 37 r8 [985])
                    (reg:SI 0 ax [orig:89 D.6033 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:89 D.6033 ] [89])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (const_int 440 [0x1b8])
                    (reg:SI 0 ax [orig:89 D.6033 ] [89]))
                (nil)))))
(insn 994 991 993 36 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn:TI 993 994 996 36 (set (reg:DI 37 r8)
        (sign_extend:DI (reg:SI 37 r8 [orig:984 D.6033 ] [984]))) 142 {*extendsidi2_rex64}
     (nil))
(call_insn:TI 996 993 997 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       37 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 37, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 36, next block 38, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       36 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              66 [100.0%]  (CAN_FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 997 996 112 37 144 "" [1 uses])
(note 112 997 113 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn:TI 113 112 114 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 224 [0xe0]))) blake_ref.c:451 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 114 113 124 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1398)
            (pc))) blake_ref.c:451 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 1398)
;;  succ:       75 [28.0%]  (CAN_FALLTHRU)
;;              38 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 38, loop depth 0, count 0, freq 1011, maybe hot
;;  prev block 37, next block 39, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       37 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(note 124 114 1279 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1279 124 126 38 (set (reg/f:DI 1 dx [653])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 45 [0x2d]))) 214 {*leadi}
     (nil))
(insn 126 1279 128 38 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 128 126 129 38 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 129 128 130 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       39 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 39, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 38, next block 40, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       38 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              75 [100.0%]  (CAN_FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 130 129 131 39 104 "" [1 uses])
(note 131 130 132 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(note 132 131 1175 39 NOTE_INSN_DELETED)
(insn:TI 1175 132 133 39 (set (reg:SI 0 ax [1003])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) blake_ref.c:455 90 {*movsi_internal}
     (nil))
(insn:TI 133 1175 1399 39 (parallel [
            (set (reg:SI 0 ax [orig:115 D.6032 ] [115])
                (plus:SI (reg:SI 0 ax [1003])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:455 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                (const_int -8 [0xfffffffffffffff8]))
            (nil))))
(jump_insn 1399 133 1400 39 (set (pc)
        (label_ref 299)) 654 {jump}
     (nil)
 -> 299)
;;  succ:       30 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1400 1399 1394)
;; basic block 40, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 39, next block 41, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [50.0%]  (CAN_FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 1394 1400 615 40 184 "" [1 uses])
(note 615 1394 616 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn:TI 616 615 617 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 384 [0x180]))) blake_ref.c:592 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (nil)))
(jump_insn:TI 617 616 618 40 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 622)
            (pc))) blake_ref.c:592 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 622)
;;  succ:       42 [28.0%]  (CAN_FALLTHRU)
;;              41 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]

;; basic block 41, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 40, next block 42, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       40 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8]
;; live  gen 	 2 [cx]
;; live  kill	 17 [flags]
(note 618 617 1257 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1257 618 621 41 (parallel [
            (set (reg:SI 2 cx [803])
                (xor:SI (reg:SI 2 cx [orig:305 D.6034 ] [305])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:595 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 621 1257 622 41 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (reg:DI 37 r8 [orig:794 D.6033 ] [794]))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (reg:QI 2 cx [803])) blake_ref.c:595 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [orig:794 D.6033 ] [794])
        (expr_list:REG_DEAD (reg:QI 2 cx [803])
            (nil))))
;;  succ:       42 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]

;; basic block 42, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 41, next block 43, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       40 [28.0%]  (CAN_FALLTHRU)
;;              41 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 6 [bp]
;; live  kill	 17 [flags]
(code_label 622 621 623 42 133 "" [1 uses])
(note 623 622 625 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn:TI 625 623 624 42 (set (reg:DI 6 bp [orig:804 D.6036 ] [804])
        (sign_extend:DI (reg:SI 6 bp [orig:298 D.6033 ] [298]))) blake_ref.c:634 142 {*extendsidi2_rex64}
     (nil))
(insn 624 625 626 42 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 896 [0x380])) blake_ref.c:598 90 {*movsi_internal}
     (nil))
(insn:TI 626 624 627 42 (parallel [
            (set (reg:DI 0 ax [orig:805 D.6036 ] [805])
                (minus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (reg:DI 6 bp [orig:804 D.6036 ] [804])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 6 bp [orig:804 D.6036 ] [804])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 627 626 628 42 (parallel [
            (set (reg:DI 0 ax [806])
                (plus:DI (reg:DI 0 ax [orig:805 D.6036 ] [805])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (nil))))
(insn:TI 628 627 578 42 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [806])) blake_ref.c:634 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [806])
        (nil)))
;;  succ:       43 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 43, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 42, next block 44, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [50.0%]  (CAN_FALLTHRU)
;;              42 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              21 (CAN_FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(code_label 578 628 579 43 130 "" [2 uses])
(note 579 578 1262 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1262 579 581 43 (set (reg/f:DI 1 dx [784])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) 214 {*leadi}
     (nil))
(insn 581 1262 583 43 (set (reg:DI 37 r8)
        (const_int 128 [0x80])) 89 {*movdi_internal}
     (nil))
(insn 583 581 584 43 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 584 583 1401 43 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn:TI 1401 584 1402 43 (set (pc)
        (label_ref 766)) 654 {jump}
     (nil)
 -> 766)
;;  succ:       23 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1402 1401 1389)
;; basic block 44, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 43, next block 45, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [50.0%]  (CAN_FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 1389 1402 491 44 182 "" [1 uses])
(note 491 1389 492 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn:TI 492 491 493 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 0 [0]))) blake_ref.c:560 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 493 492 494 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1000)
            (pc))) blake_ref.c:560 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 1000)
;;  succ:       45 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              46 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 45, loop depth 0, count 0, freq 549, maybe hot
;;  prev block 44, next block 46, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       44 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	
;; live  kill	
(note 494 493 495 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn:TI 495 494 1000 45 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:561 90 {*movsi_internal}
     (nil))
;;  succ:       46 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 46, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 45, next block 47, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       44 [50.0%]  (CAN_FALLTHRU)
;;              45 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 1000 495 1001 46 124 "" [1 uses])
(note 1001 1000 1002 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1002 1001 1009 46 (set (reg:SI 37 r8 [988])
        (const_int 888 [0x378])) blake_ref.c:563 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 888 [0x378])
        (nil)))
(insn 1009 1002 1003 46 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(insn:TI 1003 1009 1008 46 (parallel [
            (set (reg:SI 37 r8 [orig:987 D.6033 ] [987])
                (minus:SI (reg:SI 37 r8 [988])
                    (reg:SI 1 dx [orig:242 D.6033 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:563 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:242 D.6033 ] [242])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 1008 1003 1004 46 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn:TI 1004 1008 1005 46 (set (reg:DI 37 r8 [orig:603 D.6036 ] [603])
        (sign_extend:DI (reg:SI 37 r8 [orig:987 D.6033 ] [987]))) blake_ref.c:563 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 1005 1004 1006 46 (parallel [
            (set (reg:DI 0 ax [989])
                (minus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (reg:DI 37 r8 [orig:603 D.6036 ] [603])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:563 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (nil))))
(insn:TI 1006 1005 1010 46 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [989])) blake_ref.c:563 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [989])
        (nil)))
(call_insn:TI 1010 1006 1403 46 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn:TI 1403 1010 1404 46 (set (pc)
        (label_ref 1011)) 654 {jump}
     (nil)
 -> 1011)
;;  succ:       9 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1404 1403 187)
;; basic block 47, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 46, next block 48, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [50.0%]  (CAN_FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 187 1404 188 47 106 "" [1 uses])
(note 188 187 189 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn:TI 189 188 190 47 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 439 [0x1b7]))) blake_ref.c:478 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 190 189 219 47 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1405)
            (pc))) blake_ref.c:478 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 1405)
;;  succ:       78 [29.0%]  (CAN_FALLTHRU)
;;              48 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 48, loop depth 0, count 0, freq 692, maybe hot
;;  prev block 47, next block 49, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       47 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
(note 219 190 223 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn:TI 223 219 220 48 (parallel [
            (set (reg:SI 1 dx [685])
                (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:487 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 220 223 224 48 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 504 [0x1f8]))) blake_ref.c:485 7 {*cmpsi_1}
     (nil))
(insn:TI 224 220 221 48 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [685])) blake_ref.c:487 90 {*movsi_internal}
     (nil))
(jump_insn 221 224 241 48 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1406)
            (pc))) blake_ref.c:485 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 1406)
;;  succ:       72 [29.0%]  (CAN_FALLTHRU)
;;              49 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 49, loop depth 0, count 0, freq 491, maybe hot
;;  prev block 48, next block 50, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       48 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(note 241 221 250 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(note 250 241 251 49 NOTE_INSN_DELETED)
(note 251 250 244 49 NOTE_INSN_DELETED)
(insn:TI 244 251 247 49 (parallel [
            (set (reg:SI 0 ax [orig:686 D.6035 ] [686])
                (and:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:498 381 {*andsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 247 244 245 49 (set (reg:SI 37 r8 [688])
        (const_int 512 [0x200])) blake_ref.c:499 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 512 [0x200])
        (nil)))
(insn:TI 245 247 248 49 (parallel [
            (set (reg:SI 0 ax [orig:146 D.6033 ] [146])
                (plus:SI (reg:SI 0 ax [orig:686 D.6035 ] [686])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:498 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 248 245 252 49 (parallel [
            (set (reg:SI 37 r8 [orig:687 D.6033 ] [687])
                (minus:SI (reg:SI 37 r8 [688])
                    (reg:SI 0 ax [orig:146 D.6033 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:499 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (minus:SI (const_int 512 [0x200])
                (reg:SI 0 ax [orig:146 D.6033 ] [146]))
            (nil))))
(insn 252 248 246 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:146 D.6033 ] [146])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:146 D.6033 ] [146])
        (nil)))
(insn 246 252 249 49 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 0 ax [orig:146 D.6033 ] [146])) blake_ref.c:498 90 {*movsi_internal}
     (nil))
(insn:TI 249 246 253 49 (set (reg:DI 37 r8 [orig:148 D.6036 ] [148])
        (sign_extend:DI (reg:SI 37 r8 [orig:687 D.6033 ] [687]))) blake_ref.c:499 142 {*extendsidi2_rex64}
     (nil))
(jump_insn 253 249 1022 49 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1032)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1400 (nil)))
 -> 1032)
;;  succ:       82 [14.0%]  (CAN_FALLTHRU)
;;              50 [86.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 50, loop depth 0, count 0, freq 422, maybe hot
;;  prev block 49, next block 51, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       49 [86.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1022 253 254 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(note 254 1022 255 50 NOTE_INSN_DELETED)
(note 255 254 256 50 NOTE_INSN_DELETED)
(insn:TI 256 255 257 50 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 37 r8 [orig:148 D.6036 ] [148])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 257 256 265 50 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1032)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1628 (nil)))
 -> 1032)
;;  succ:       51 [83.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              82 [16.3%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 51, loop depth 0, count 0, freq 491, maybe hot
;; Invalid sum of incoming frequencies 593, should be 491
;;  prev block 50, next block 52, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       50 [83.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              82 [100.0%]  (CAN_FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 1 [dx]
;; live  kill	 17 [flags]
(code_label 265 257 266 51 113 "" [1 uses])
(note 266 265 267 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn:TI 267 266 268 51 (parallel [
            (set (reg:SI 1 dx [693])
                (plus:SI (reg:SI 1 dx [orig:143 D.6032 ] [143])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:500 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
            (nil))))
(insn:TI 268 267 1304 51 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [693])) blake_ref.c:500 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [693])
        (nil)))
;;  succ:       52 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 52, loop depth 0, count 0, freq 692, maybe hot
;;  prev block 51, next block 53, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       51 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              72 [100.0%]  (CAN_FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 39 [r10]
;; live  kill	
(code_label 1304 268 1302 52 177 "" [1 uses])
(note 1302 1304 270 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn:TI 270 1302 269 52 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 269 270 271 52 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) 89 {*movdi_internal}
     (nil))
(insn 271 269 272 52 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 272 271 274 52 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 274 272 275 52 (set (reg:SI 1 dx [orig:609 D.6031 ] [609])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 275 274 273 52 (set (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn:TI 273 275 276 52 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:502 90 {*movsi_internal}
     (nil))
;;  succ:       53 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

;; basic block 53, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 52, next block 54, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       79 [83.7%]  (CAN_FALLTHRU)
;;              52 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              80 [100.0%]  (CAN_FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 39 [r10]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 276 273 277 53 110 "" [2 uses])
(note 277 276 278 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn:TI 278 277 280 53 (parallel [
            (set (reg:SI 1 dx [694])
                (plus:SI (reg:SI 1 dx [orig:609 D.6031 ] [609])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:505 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
            (nil))))
(insn 280 278 279 53 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 224 [0xe0]))) blake_ref.c:506 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (nil)))
(insn:TI 279 280 281 53 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [694])) blake_ref.c:505 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [694])
        (nil)))
(jump_insn 281 279 292 53 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1407)
            (pc))) blake_ref.c:506 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 1407)
;;  succ:       81 [28.0%]  (CAN_FALLTHRU)
;;              54 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 54, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 53, next block 55, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       53 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(note 292 281 1271 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1271 292 294 54 (set (reg/f:DI 1 dx [696])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 45 [0x2d]))) 214 {*leadi}
     (nil))
(insn 294 1271 296 54 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 296 294 297 54 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 297 296 298 54 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 298 297 1408 54 (set (reg:SI 0 ax [orig:87 D.6031 ] [87])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1408 298 1409 54 (set (pc)
        (label_ref 299)) 654 {jump}
     (nil)
 -> 299)
;;  succ:       30 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1409 1408 1388)
;; basic block 55, loop depth 0, count 0, freq 854, maybe hot
;;  prev block 54, next block 56, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [28.0%]  (CAN_FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 39 [r10]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 1388 1409 463 55 181 "" [1 uses])
(note 463 1388 464 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn:TI 464 463 466 55 (parallel [
            (set (reg:DI 0 ax [768])
                (plus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:551 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (nil))))
(insn 466 464 465 55 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 384 [0x180]))) blake_ref.c:552 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (nil)))
(insn:TI 465 466 467 55 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [768])) blake_ref.c:551 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [768])
        (nil)))
(jump_insn 467 465 478 55 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1410)
            (pc))) blake_ref.c:552 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 1410)
;;  succ:       83 [28.0%]  (CAN_FALLTHRU)
;;              56 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 56, loop depth 0, count 0, freq 615, maybe hot
;;  prev block 55, next block 57, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       55 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(note 478 467 1267 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1267 478 480 56 (set (reg/f:DI 1 dx [770])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 47 [0x2f]))) 214 {*leadi}
     (nil))
(insn 480 1267 482 56 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 482 480 483 56 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 483 482 484 56 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 484 483 1411 56 (set (reg:DI 0 ax [orig:292 D.6036 ] [292])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 1411 484 1412 56 (set (pc)
        (label_ref 564)) 654 {jump}
     (nil)
 -> 564)
;;  succ:       13 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1412 1411 553)
;; basic block 57, loop depth 0, count 0, freq 791, maybe hot
;;  prev block 56, next block 58, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [50.0%]  (CAN_FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 553 1412 554 57 129 "" [1 uses])
(note 554 553 559 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 559 554 1413 57 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn:TI 1413 559 1414 57 (set (pc)
        (label_ref 560)) 654 {jump}
     (nil)
 -> 560)
;;  succ:       12 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1414 1413 665)
;; basic block 58, loop depth 0, count 0, freq 762, maybe hot
;;  prev block 57, next block 59, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [50.0%]  (CAN_FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 665 1414 666 58 134 "" [1 uses])
(note 666 665 667 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn:TI 667 666 668 58 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:242 D.6033 ] [242])
            (const_int 1016 [0x3f8]))) blake_ref.c:608 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 668 667 693 58 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1415)
            (pc))) blake_ref.c:608 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 1415)
;;  succ:       62 [29.0%]  (CAN_FALLTHRU)
;;              59 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 59, loop depth 0, count 0, freq 541, maybe hot
;;  prev block 58, next block 60, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       58 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(note 693 668 705 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(note 705 693 706 59 NOTE_INSN_DELETED)
(note 706 705 694 59 NOTE_INSN_DELETED)
(insn:TI 694 706 1236 59 (set (reg:SI 37 r8 [824])
        (const_int 1024 [0x400])) blake_ref.c:619 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 1024 [0x400])
        (nil)))
(insn:TI 1236 694 695 59 (set (reg:SI 2 cx [orig:823 D.6033 ] [823])
        (reg:SI 37 r8 [824])) blake_ref.c:619 90 {*movsi_internal}
     (nil))
(insn:TI 695 1236 699 59 (parallel [
            (set (reg:SI 2 cx [orig:823 D.6033 ] [823])
                (minus:SI (reg:SI 2 cx [orig:823 D.6033 ] [823])
                    (reg:SI 1 dx [orig:242 D.6033 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:619 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 699 695 700 59 (parallel [
            (set (reg:SI 1 dx [orig:826 D.6035 ] [826])
                (and:SI (reg:SI 1 dx [orig:242 D.6033 ] [242])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:621 381 {*andsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 700 699 696 59 (parallel [
            (set (reg:SI 1 dx [orig:330 D.6033 ] [330])
                (plus:SI (reg:SI 1 dx [orig:826 D.6035 ] [826])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:621 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 696 700 703 59 (set (reg:DI 2 cx [orig:825 D.6036 ] [825])
        (sign_extend:DI (reg:SI 2 cx [orig:823 D.6033 ] [823]))) blake_ref.c:619 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 703 696 697 59 (parallel [
            (set (reg:SI 37 r8 [orig:827 D.6033 ] [827])
                (minus:SI (reg:SI 37 r8 [824])
                    (reg:SI 1 dx [orig:330 D.6033 ] [330])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:622 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 697 703 701 59 (parallel [
            (set (reg:DI 0 ax [orig:327 D.6036 ] [327])
                (minus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (reg:DI 2 cx [orig:825 D.6036 ] [825])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:619 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:825 D.6036 ] [825])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 701 697 704 59 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 1 dx [orig:330 D.6033 ] [330])) blake_ref.c:621 90 {*movsi_internal}
     (nil))
(insn:TI 704 701 698 59 (set (reg:DI 37 r8 [orig:332 D.6036 ] [332])
        (sign_extend:DI (reg:SI 37 r8 [orig:827 D.6033 ] [827]))) blake_ref.c:622 142 {*extendsidi2_rex64}
     (nil))
(insn 698 704 707 59 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [orig:327 D.6036 ] [327])) blake_ref.c:619 89 {*movdi_internal}
     (nil))
(insn:TI 707 698 708 59 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 37 r8 [orig:332 D.6036 ] [332])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 708 707 1028 59 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1035)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1400 (nil)))
 -> 1035)
;;  succ:       74 [14.0%]  (CAN_FALLTHRU)
;;              60 [86.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 60, loop depth 0, count 0, freq 465, maybe hot
;;  prev block 59, next block 61, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       59 [86.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1028 708 709 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(note 709 1028 710 60 NOTE_INSN_DELETED)
(note 710 709 711 60 NOTE_INSN_DELETED)
(insn:TI 711 710 712 60 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:330 D.6033 ] [330])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:330 D.6033 ] [330])
        (nil)))
(jump_insn:TI 712 711 720 60 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1035)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1628 (nil)))
 -> 1035)
;;  succ:       61 [83.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              74 [16.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 61, loop depth 0, count 0, freq 541, maybe hot
;; Invalid sum of incoming frequencies 654, should be 541
;;  prev block 60, next block 62, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       60 [83.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              74 [100.0%]  (CAN_FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 720 712 721 61 138 "" [1 uses])
(note 721 720 722 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn:TI 722 721 723 61 (parallel [
            (set (reg:DI 0 ax [833])
                (plus:DI (reg:DI 0 ax [orig:327 D.6036 ] [327])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:623 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (nil))))
(insn:TI 723 722 1416 61 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [833])) blake_ref.c:623 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [833])
        (nil)))
(jump_insn 1416 723 1417 61 (set (pc)
        (label_ref 1312)) 654 {jump}
     (nil)
 -> 1312)
;;  succ:       63 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1417 1416 1415)
;; basic block 62, loop depth 0, count 0, freq 2457, maybe hot
;; Invalid sum of incoming frequencies 221, should be 2457
;;  prev block 61, next block 63, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       58 [29.0%]  (CAN_FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	 17 [flags]
(code_label 1415 1417 669 62 193 "" [1 uses])
(note 669 1415 671 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn:TI 671 669 670 62 (set (reg:SI 2 cx [818])
        (const_int 1024 [0x400])) blake_ref.c:362 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 1024 [0x400])
        (nil)))
(insn 670 671 672 62 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 1024 [0x400])) blake_ref.c:611 90 {*movsi_internal}
     (nil))
(insn:TI 672 670 1235 62 (parallel [
            (set (reg:SI 2 cx [orig:817 D.6033 ] [817])
                (minus:SI (reg:SI 2 cx [orig:817 D.6033 ] [817])
                    (reg:SI 1 dx [orig:242 D.6033 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:242 D.6033 ] [242])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 1235 672 679 62 (set (reg:DI 1 dx)
        (sign_extend:DI (reg:SI 2 cx [orig:817 D.6033 ] [817]))) blake_ref.c:362 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:817 D.6033 ] [817])
        (nil)))
(insn 679 1235 674 62 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) blake_ref.c:364 89 {*movdi_internal}
     (nil))
(insn:TI 674 679 1256 62 (parallel [
            (set (reg:DI 0 ax [orig:820 D.6036 ] [820])
                (minus:DI (reg:DI 0 ax [orig:241 D.6036 ] [241])
                    (reg:DI 1 dx [orig:819 D.6036 ] [819])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:819 D.6036 ] [819])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 1256 674 675 62 (set (reg/f:DI 1 dx [orig:822 D.6040 ] [822])
        (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
            (const_int 216 [0xd8]))) blake_ref.c:359 214 {*leadi}
     (nil))
(insn:TI 675 1256 676 62 (parallel [
            (set (reg:DI 0 ax [821])
                (plus:DI (reg:DI 0 ax [orig:820 D.6036 ] [820])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (nil))))
(insn:TI 676 675 680 62 (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 0 ax [821])) blake_ref.c:362 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [821])
        (nil)))
(call_insn:TI 680 676 682 62 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:364 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn:TI 682 680 681 62 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                            (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:613 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 681 682 1312 62 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:391 90 {*movsi_internal}
     (nil))
;;  succ:       63 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 63, loop depth 0, count 0, freq 2998, maybe hot
;;  prev block 62, next block 64, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       62 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              61 [100.0%]  (CAN_FALLTHRU)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 39 [r10]
;; live  kill	
(code_label 1312 681 1310 63 178 "" [1 uses])
(note 1310 1312 725 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn:TI 725 1310 724 63 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 724 725 726 63 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) 89 {*movdi_internal}
     (nil))
(insn 726 724 727 63 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 727 726 728 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 728 727 729 63 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:625 90 {*movsi_internal}
     (nil))
(insn:TI 729 728 730 63 (set (reg:DI 0 ax [orig:616 D.6039 ] [616])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 730 729 1418 63 (set (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1418 730 1419 63 (set (pc)
        (label_ref 731)) 654 {jump}
     (nil)
 -> 731)
;;  succ:       19 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]

(barrier 1419 1418 81)
;; basic block 64, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 63, next block 65, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       34 [50.0%]  (CAN_FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 1 [dx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(code_label 81 1419 82 64 99 "" [1 uses])
(note 82 81 88 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(note 88 82 89 64 NOTE_INSN_DELETED)
(note 89 88 85 64 NOTE_INSN_DELETED)
(insn:TI 85 89 83 64 (set (reg:SI 37 r8 [646])
        (const_int 512 [0x200])) blake_ref.c:446 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 512 [0x200])
        (nil)))
(insn 83 85 86 64 (parallel [
            (set (reg:SI 1 dx [orig:109 D.6032 ] [109])
                (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:445 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 86 83 84 64 (parallel [
            (set (reg:SI 37 r8 [orig:645 D.6033 ] [645])
                (minus:SI (reg:SI 37 r8 [646])
                    (reg:SI 0 ax [orig:89 D.6033 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:446 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (minus:SI (const_int 512 [0x200])
                (reg:SI 0 ax [orig:89 D.6033 ] [89]))
            (nil))))
(insn 84 86 87 64 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [orig:109 D.6032 ] [109])) blake_ref.c:445 90 {*movsi_internal}
     (nil))
(insn:TI 87 84 90 64 (set (reg:DI 37 r8 [orig:111 D.6036 ] [111])
        (sign_extend:DI (reg:SI 37 r8 [orig:645 D.6033 ] [645]))) blake_ref.c:446 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 90 87 91 64 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 37 r8 [orig:111 D.6036 ] [111])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 91 90 1018 64 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1030)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1400 (nil)))
 -> 1030)
;;  succ:       77 [14.0%]  (CAN_FALLTHRU)
;;              65 [86.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 65, loop depth 0, count 0, freq 604, maybe hot
;;  prev block 64, next block 66, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       64 [86.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1018 91 92 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(note 92 1018 93 65 NOTE_INSN_DELETED)
(note 93 92 94 65 NOTE_INSN_DELETED)
(insn:TI 94 93 95 65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 D.6033 ] [89])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:89 D.6033 ] [89])
        (nil)))
(jump_insn:TI 95 94 103 65 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1030)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1628 (nil)))
 -> 1030)
;;  succ:       66 [83.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              77 [16.3%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 66, loop depth 0, count 0, freq 702, maybe hot
;; Invalid sum of incoming frequencies 849, should be 702
;;  prev block 65, next block 67, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       65 [83.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              77 [100.0%]  (CAN_FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 103 95 104 66 101 "" [1 uses])
(note 104 103 105 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn:TI 105 104 107 66 (parallel [
            (set (reg:SI 1 dx [651])
                (plus:SI (reg:SI 1 dx [orig:109 D.6032 ] [109])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:447 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
            (nil))))
(insn 107 105 109 66 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) 89 {*movdi_internal}
     (nil))
(insn 109 107 106 66 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(insn:TI 106 109 108 66 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [651])) blake_ref.c:447 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [651])
        (nil)))
(insn 108 106 110 66 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(call_insn:TI 110 108 111 66 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 111 110 1420 66 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:449 90 {*movsi_internal}
     (nil))
(jump_insn 1420 111 1421 66 (set (pc)
        (label_ref 997)) 654 {jump}
     (nil)
 -> 997)
;;  succ:       37 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1421 1420 1390)
;; basic block 67, loop depth 0, count 0, freq 615, maybe hot
;;  prev block 66, next block 68, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [28.0%]  (CAN_FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(code_label 1390 1421 533 67 183 "" [1 uses])
(note 533 1390 1266 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1266 533 535 67 (set (reg/f:DI 1 dx [778])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 44 [0x2c]))) 214 {*leadi}
     (nil))
(insn 535 1266 537 67 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 537 535 538 67 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 538 537 1422 67 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn:TI 1422 538 1423 67 (set (pc)
        (label_ref 560)) 654 {jump}
     (nil)
 -> 560)
;;  succ:       12 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1423 1422 1396)
;; basic block 68, loop depth 0, count 0, freq 546, maybe hot
;;  prev block 67, next block 69, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       33 [28.0%]  (CAN_FALLTHRU)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; lr  use 	 3 [bx] 7 [sp] 38 [r9] 39 [r10]
;; lr  def 	 17 [flags] 38 [r9]
;; live  in  	 3 [bx] 4 [si] 7 [sp] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags] 38 [r9]
;; live  kill	 17 [flags]
(code_label 1396 1423 46 68 186 "" [1 uses])
(note 46 1396 47 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn:TI 47 46 49 68 (parallel [
            (set (reg:SI 38 r9 [642])
                (plus:SI (reg:SI 38 r9 [orig:88 D.6032 ] [88])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:428 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                    (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
            (nil))))
(insn 49 47 48 68 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10 [orig:612 D.6033 ] [612])
            (const_int 224 [0xe0]))) blake_ref.c:429 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (nil)))
(insn:TI 48 49 50 68 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 38 r9 [642])) blake_ref.c:428 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [642])
        (nil)))
(jump_insn 50 48 61 68 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1424)
            (pc))) blake_ref.c:429 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 1424)
;;  succ:       73 [28.0%]  (CAN_FALLTHRU)
;;              69 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 69, loop depth 0, count 0, freq 393, maybe hot
;;  prev block 68, next block 70, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       68 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(note 61 50 1281 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1281 61 63 69 (set (reg/f:DI 1 dx [644])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 47 [0x2f]))) 214 {*leadi}
     (nil))
(insn 63 1281 65 69 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 65 63 66 69 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 66 65 67 69 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 67 66 1425 69 (set (reg:SI 0 ax [orig:115 D.6032 ] [115])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1425 67 1426 69 (set (pc)
        (label_ref 299)) 654 {jump}
     (nil)
 -> 299)
;;  succ:       30 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1426 1425 1033)
;; basic block 70, loop depth 0, count 0, freq 537, maybe hot
;; Invalid sum of incoming frequencies 308, should be 537
;;  prev block 69, next block 71, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [16.3%]  (CAN_FALLTHRU)
;;              6 [14.0%]  (CAN_FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 1033 1426 514 70 149 "" [2 uses])
(note 514 1033 516 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn:TI 516 514 517 70 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 517 516 518 70 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 518 517 519 70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 519 518 1427 70 (set (reg:DI 0 ax [orig:288 D.6036 ] [288])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 1427 519 1428 70 (set (pc)
        (label_ref 520)) 654 {jump}
     (nil)
 -> 520)
;;  succ:       8 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1428 1427 1397)
;; basic block 71, loop depth 0, count 0, freq 351, maybe hot
;;  prev block 70, next block 72, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       35 [50.0%]  (CAN_FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 1397 1428 77 71 187 "" [1 uses])
(note 77 1397 78 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn:TI 78 77 1429 71 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:438 90 {*movsi_internal}
     (nil))
(jump_insn 1429 78 1430 71 (set (pc)
        (label_ref 986)) 654 {jump}
     (nil)
 -> 986)
;;  succ:       36 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]

(barrier 1430 1429 1406)
;; basic block 72, loop depth 0, count 0, freq 201, maybe hot
;;  prev block 71, next block 73, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       48 [29.0%]  (CAN_FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	 17 [flags]
(code_label 1406 1430 222 72 190 "" [1 uses])
(note 222 1406 227 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn:TI 227 222 225 72 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 225 227 1372 72 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 512 [0x200])) blake_ref.c:488 90 {*movsi_internal}
     (nil))
(insn 1372 225 228 72 (parallel [
            (set (reg:DI 37 r8)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 228 1372 229 72 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 229 228 230 72 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 230 229 1431 72 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                        (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                            (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:490 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1431 230 1432 72 (set (pc)
        (label_ref 1304)) 654 {jump}
     (nil)
 -> 1304)
;;  succ:       52 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1432 1431 1424)
;; basic block 73, loop depth 0, count 0, freq 153, maybe hot
;;  prev block 72, next block 74, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       68 [28.0%]  (CAN_FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(code_label 1424 1432 51 73 194 "" [1 uses])
(note 51 1424 1282 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1282 51 53 73 (set (reg/f:DI 1 dx [643])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 46 [0x2e]))) 214 {*leadi}
     (nil))
(insn 53 1282 55 73 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 55 53 56 73 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 56 55 57 73 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 57 56 1433 73 (set (reg:SI 0 ax [orig:115 D.6032 ] [115])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1433 57 1434 73 (set (pc)
        (label_ref 299)) 654 {jump}
     (nil)
 -> 299)
;;  succ:       30 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1434 1433 1035)
;; basic block 74, loop depth 0, count 0, freq 265, maybe hot
;; Invalid sum of incoming frequencies 152, should be 265
;;  prev block 73, next block 75, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       60 [16.3%]  (CAN_FALLTHRU)
;;              59 [14.0%]  (CAN_FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 1035 1434 714 74 151 "" [2 uses])
(note 714 1035 716 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn:TI 716 714 717 74 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 717 716 718 74 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 718 717 719 74 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 719 718 1435 74 (set (reg:DI 0 ax [orig:327 D.6036 ] [327])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 1435 719 1436 74 (set (pc)
        (label_ref 720)) 654 {jump}
     (nil)
 -> 720)
;;  succ:       61 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1436 1435 1398)
;; basic block 75, loop depth 0, count 0, freq 393, maybe hot
;;  prev block 74, next block 76, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       37 [28.0%]  (CAN_FALLTHRU)
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(code_label 1398 1436 115 75 188 "" [1 uses])
(note 115 1398 1280 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1280 115 117 75 (set (reg/f:DI 1 dx [652])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 44 [0x2c]))) 214 {*leadi}
     (nil))
(insn 117 1280 119 75 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 119 117 120 75 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 120 119 1437 75 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn:TI 1437 120 1438 75 (set (pc)
        (label_ref 130)) 654 {jump}
     (nil)
 -> 130)
;;  succ:       39 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1438 1437 1034)
;; basic block 76, loop depth 0, count 0, freq 373, maybe hot
;; Invalid sum of incoming frequencies 214, should be 373
;;  prev block 75, next block 77, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       18 [16.3%]  (CAN_FALLTHRU)
;;              17 [14.0%]  (CAN_FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 39 [r10]
;; live  kill	
(code_label 1034 1438 656 76 150 "" [2 uses])
(note 656 1034 658 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn:TI 658 656 659 76 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 659 658 660 76 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 660 659 661 76 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 661 660 662 76 (set (reg:DI 0 ax [orig:616 D.6039 ] [616])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 662 661 1439 76 (set (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1439 662 1440 76 (set (pc)
        (label_ref 731)) 654 {jump}
     (nil)
 -> 731)
;;  succ:       19 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 39 [r10]

(barrier 1440 1439 1030)
;; basic block 77, loop depth 0, count 0, freq 343, maybe hot
;; Invalid sum of incoming frequencies 196, should be 343
;;  prev block 76, next block 78, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       65 [16.3%]  (CAN_FALLTHRU)
;;              64 [14.0%]  (CAN_FALLTHRU)
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 1030 1440 97 77 146 "" [2 uses])
(note 97 1030 99 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn:TI 99 97 100 77 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 100 99 101 77 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 101 100 102 77 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 102 101 1441 77 (set (reg:SI 1 dx [orig:109 D.6032 ] [109])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1441 102 1442 77 (set (pc)
        (label_ref 103)) 654 {jump}
     (nil)
 -> 103)
;;  succ:       66 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]

(barrier 1442 1441 1405)
;; basic block 78, loop depth 0, count 0, freq 283, maybe hot
;;  prev block 77, next block 79, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       47 [29.0%]  (CAN_FALLTHRU)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(code_label 1405 1442 191 78 189 "" [1 uses])
(note 191 1405 200 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(note 200 191 201 78 NOTE_INSN_DELETED)
(note 201 200 194 78 NOTE_INSN_DELETED)
(insn:TI 194 201 197 78 (parallel [
            (set (reg:SI 0 ax [orig:678 D.6035 ] [678])
                (and:SI (reg:SI 0 ax [orig:89 D.6033 ] [89])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:481 381 {*andsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 197 194 192 78 (set (reg:SI 37 r8 [680])
        (const_int 440 [0x1b8])) blake_ref.c:482 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 440 [0x1b8])
        (nil)))
(insn 192 197 195 78 (parallel [
            (set (reg:SI 1 dx [orig:609 D.6031 ] [609])
                (plus:SI (reg/v:SI 1 dx [orig:91 low ] [91])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:480 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 195 192 193 78 (parallel [
            (set (reg:SI 0 ax [orig:137 D.6033 ] [137])
                (plus:SI (reg:SI 0 ax [orig:678 D.6035 ] [678])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:481 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 193 195 198 78 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 1 dx [orig:609 D.6031 ] [609])) blake_ref.c:480 90 {*movsi_internal}
     (nil))
(insn:TI 198 193 196 78 (parallel [
            (set (reg:SI 37 r8 [orig:679 D.6033 ] [679])
                (minus:SI (reg:SI 37 r8 [680])
                    (reg:SI 0 ax [orig:137 D.6033 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:482 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (minus:SI (const_int 440 [0x1b8])
                (reg:SI 0 ax [orig:137 D.6033 ] [137]))
            (nil))))
(insn 196 198 199 78 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 0 ax [orig:137 D.6033 ] [137])) blake_ref.c:481 90 {*movsi_internal}
     (nil))
(insn:TI 199 196 202 78 (set (reg:DI 37 r8 [orig:139 D.6036 ] [139])
        (sign_extend:DI (reg:SI 37 r8 [orig:679 D.6033 ] [679]))) blake_ref.c:482 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 202 199 203 78 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 37 r8 [orig:139 D.6036 ] [139])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 203 202 1020 78 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1031)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1400 (nil)))
 -> 1031)
;;  succ:       80 [14.0%]  (CAN_FALLTHRU)
;;              79 [86.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]

;; basic block 79, loop depth 0, count 0, freq 243, maybe hot
;;  prev block 78, next block 80, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       78 [86.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1020 203 204 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(note 204 1020 205 79 NOTE_INSN_DELETED)
(note 205 204 206 79 NOTE_INSN_DELETED)
(insn:TI 206 205 207 79 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:137 D.6033 ] [137])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:137 D.6033 ] [137])
        (nil)))
(jump_insn:TI 207 206 1031 79 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 276)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 8372 (nil)))
 -> 276)
;;  succ:       53 [83.7%]  (CAN_FALLTHRU)
;;              80 [16.3%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 39 [r10]

;; basic block 80, loop depth 0, count 0, freq 61, maybe hot
;;  prev block 79, next block 81, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       79 [16.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              78 [14.0%]  (CAN_FALLTHRU)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 39 [r10]
;; live  kill	
(code_label 1031 207 209 80 147 "" [1 uses])
(note 209 1031 211 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn:TI 211 209 212 80 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 212 211 213 80 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 213 212 214 80 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 214 213 215 80 (set (reg:SI 1 dx [orig:609 D.6031 ] [609])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 215 214 1443 80 (set (reg:SI 39 r10 [orig:612 D.6033 ] [612])
        (mem:SI (reg/v/f:DI 3 bx [orig:633 state ] [633]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1443 215 1444 80 (set (pc)
        (label_ref 276)) 654 {jump}
     (nil)
 -> 276)
;;  succ:       53 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp] 39 [r10]

(barrier 1444 1443 1407)
;; basic block 81, loop depth 0, count 0, freq 273, maybe hot
;;  prev block 80, next block 82, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       53 [28.0%]  (CAN_FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(code_label 1407 1444 282 81 191 "" [1 uses])
(note 282 1407 1272 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1272 282 284 81 (set (reg/f:DI 1 dx [695])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 44 [0x2c]))) 214 {*leadi}
     (nil))
(insn 284 1272 286 81 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 286 284 287 81 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 287 286 288 81 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 288 287 1445 81 (set (reg:SI 0 ax [orig:87 D.6031 ] [87])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1445 288 1446 81 (set (pc)
        (label_ref 299)) 654 {jump}
     (nil)
 -> 299)
;;  succ:       30 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1446 1445 1032)
;; basic block 82, loop depth 0, count 0, freq 240, maybe hot
;; Invalid sum of incoming frequencies 138, should be 240
;;  prev block 81, next block 83, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       50 [16.3%]  (CAN_FALLTHRU)
;;              49 [14.0%]  (CAN_FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 3 [bx] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 1032 1446 259 82 148 "" [2 uses])
(note 259 1032 261 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn:TI 261 259 262 82 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 262 261 263 82 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 263 262 264 82 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 264 263 1447 82 (set (reg:SI 1 dx [orig:143 D.6032 ] [143])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1447 264 1448 82 (set (pc)
        (label_ref 265)) 654 {jump}
     (nil)
 -> 265)
;;  succ:       51 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]

(barrier 1448 1447 1410)
;; basic block 83, loop depth 0, count 0, freq 239, maybe hot
;;  prev block 82, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       55 [28.0%]  (CAN_FALLTHRU)
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(code_label 1410 1448 468 83 192 "" [1 uses])
(note 468 1410 1268 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1268 468 470 83 (set (reg/f:DI 1 dx [769])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 46 [0x2e]))) 214 {*leadi}
     (nil))
(insn 470 1268 472 83 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 472 470 473 83 (set (reg:DI 2 cx)
        (reg/v/f:DI 3 bx [orig:633 state ] [633])) 89 {*movdi_internal}
     (nil))
(call_insn:TI 473 472 474 83 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 474 473 1449 83 (set (reg:DI 0 ax [orig:292 D.6036 ] [292])
        (mem:DI (plus:DI (reg/v/f:DI 3 bx [orig:633 state ] [633])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 1449 474 1450 83 (set (pc)
        (label_ref 564)) 654 {jump}
     (nil)
 -> 564)
;;  succ:       13 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

(barrier 1450 1449 1160)
(note 1160 1450 0 NOTE_INSN_DELETED)

;; Function Hash (Hash, funcdef_no=21, decl_uid=3197, cgraph_uid=21, symbol_order=29)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 25 count 19 (    1)


Hash

Dataflow summary:
def_info->table_size = 245, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 5 [di] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9] 39[r10] 40[r11]
;;  ref usage 	r0={33d,30u} r1={7d,4u} r2={15d,14u} r3={4d,8u} r5={6d,6u} r7={7d,74u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1e} r17={15d,7u} r18={4d} r19={4d} r20={4e} r21={6d,1u} r22={5d} r23={5d} r24={5d} r25={4d} r26={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d,4u} r38={7d,4u} r39={5d,3u} r40={6d,2u} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 485{323d,157u,5e} in 121{117 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(1){ }d-1(2){ }d-1(3){ }d-1(5){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9]

( 0 )->[2]->( 3 10 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 7 [sp] 17 [flags] 39 [r10]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 7 [sp] 17 [flags] 39 [r10]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

( 2 )->[3]->( 14 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

( 3 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

( 4 14 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 17 [flags] 21 [xmm0] 40 [r11]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 21 [xmm0] 40 [r11]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

( 5 13 )->[6]->( 7 16 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]

( 6 )->[7]->( 8 15 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]

( 7 16 15 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 38 [r9]
;; lr  use 	 3 [bx] 7 [sp] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 38 [r9]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 10 8 17 )->[9]->( 1 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 7 [sp]

( 2 )->[10]->( 11 9 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

( 10 )->[11]->( 18 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

( 11 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

( 12 18 )->[13]->( 6 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 17 [flags] 40 [r11]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 40 [r11]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

( 3 )->[14]->( 5 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

( 7 )->[15]->( 8 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 2 [cx] 38 [r9]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp] 38 [r9]
;; live  out 	 3 [bx] 7 [sp] 38 [r9]

( 6 )->[16]->( 8 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]

( 16 )->[17]->( 9 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 2 [cx] 38 [r9]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 3 [bx] 7 [sp] 38 [r9]

( 11 )->[18]->( 13 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

( 9 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(5){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 15 to worklist
  Adding insn 212 to worklist
  Adding insn 210 to worklist
  Adding insn 209 to worklist
  Adding insn 18 to worklist
  Adding insn 41 to worklist
  Adding insn 39 to worklist
  Adding insn 37 to worklist
  Adding insn 35 to worklist
  Adding insn 54 to worklist
  Adding insn 52 to worklist
  Adding insn 45 to worklist
  Adding insn 44 to worklist
  Adding insn 127 to worklist
  Adding insn 125 to worklist
  Adding insn 124 to worklist
  Adding insn 123 to worklist
  Adding insn 122 to worklist
  Adding insn 130 to worklist
  Adding insn 154 to worklist
  Adding insn 219 to worklist
  Adding insn 215 to worklist
  Adding insn 163 to worklist
  Adding insn 62 to worklist
  Adding insn 65 to worklist
  Adding insn 104 to worklist
  Adding insn 102 to worklist
  Adding insn 100 to worklist
  Adding insn 98 to worklist
  Adding insn 96 to worklist
  Adding insn 94 to worklist
  Adding insn 92 to worklist
  Adding insn 90 to worklist
  Adding insn 241 to worklist
  Adding insn 119 to worklist
  Adding insn 118 to worklist
  Adding insn 117 to worklist
  Adding insn 116 to worklist
  Adding insn 115 to worklist
  Adding insn 108 to worklist
  Adding insn 107 to worklist
  Adding insn 243 to worklist
  Adding insn 28 to worklist
  Adding insn 26 to worklist
  Adding insn 24 to worklist
  Adding insn 22 to worklist
  Adding insn 245 to worklist
  Adding insn 136 to worklist
  Adding insn 199 to worklist
  Adding insn 142 to worklist
  Adding insn 247 to worklist
  Adding insn 236 to worklist
  Adding insn 148 to worklist
  Adding insn 201 to worklist
  Adding insn 249 to worklist
  Adding insn 83 to worklist
  Adding insn 81 to worklist
  Adding insn 79 to worklist
  Adding insn 77 to worklist
  Adding insn 75 to worklist
  Adding insn 73 to worklist
  Adding insn 71 to worklist
  Adding insn 69 to worklist
Finished finding needed instructions:
processing block 9 lr out =  0 [ax] 3 [bx] 5 [di] 7 [sp]
  Adding insn 218 to worklist
  Adding insn 217 to worklist
  Adding insn 216 to worklist
processing block 8 lr out =  0 [ax] 7 [sp]
  Adding insn 153 to worklist
  Adding insn 152 to worklist
processing block 15 lr out =  3 [bx] 7 [sp] 38 [r9]
  Adding insn 200 to worklist
  Adding insn 135 to worklist
processing block 7 lr out =  1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
  Adding insn 129 to worklist
processing block 17 lr out =  0 [ax] 7 [sp]
  Adding insn 235 to worklist
  Adding insn 234 to worklist
  Adding insn 202 to worklist
  Adding insn 147 to worklist
processing block 16 lr out =  1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
  Adding insn 141 to worklist
processing block 6 lr out =  1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
  Adding insn 126 to worklist
processing block 5 lr out =  1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
  Adding insn 53 to worklist
  Adding insn 197 to worklist
  Adding insn 231 to worklist
  Adding insn 51 to worklist
  Adding insn 207 to worklist
  Adding insn 206 to worklist
processing block 14 lr out =  1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
  Adding insn 27 to worklist
  Adding insn 25 to worklist
  Adding insn 23 to worklist
  Adding insn 21 to worklist
processing block 4 lr out =  1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
  Adding insn 40 to worklist
  Adding insn 38 to worklist
  Adding insn 36 to worklist
  Adding insn 34 to worklist
processing block 3 lr out =  1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
  Adding insn 17 to worklist
processing block 13 lr out =  1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
  Adding insn 198 to worklist
  Adding insn 229 to worklist
  Adding insn 114 to worklist
  Adding insn 204 to worklist
  Adding insn 203 to worklist
processing block 18 lr out =  1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
  Adding insn 82 to worklist
  Adding insn 80 to worklist
  Adding insn 78 to worklist
  Adding insn 76 to worklist
  Adding insn 74 to worklist
  Adding insn 72 to worklist
  Adding insn 70 to worklist
  Adding insn 68 to worklist
processing block 12 lr out =  1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
  Adding insn 103 to worklist
  Adding insn 101 to worklist
  Adding insn 99 to worklist
  Adding insn 97 to worklist
  Adding insn 95 to worklist
  Adding insn 93 to worklist
  Adding insn 91 to worklist
  Adding insn 89 to worklist
processing block 11 lr out =  1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
  Adding insn 64 to worklist
processing block 10 lr out =  0 [ax] 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
  Adding insn 230 to worklist
  Adding insn 7 to worklist
  Adding insn 205 to worklist
processing block 2 lr out =  1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
  Adding insn 232 to worklist
  Adding insn 208 to worklist
  Adding insn 2 to worklist
  Adding insn 211 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 25 count 19 (    1)
;;   ======================================================
;;   -- basic block 2 from 209 to 15 -- after reload
;;   ======================================================

;;	  0--> b  0: i 209 [--sp]=di                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 210 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 211 {sp=sp-0x1b8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  3--> b  0: i 212 unspec/v[sp] 4                          :athlon-vector,athlon-ieu,athlon-ieu
;;	  5--> b  0: i 208 ax=cx-0xe0                              :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i   2 r10=cx                                  :athlon-direct,athlon-ieu
;;	  7--> b  0: i 232 {flags=cmp(ax&0xffffffffffffffdf,0);ax=ax&0xffffffffffffffdf;}:athlon-direct,athlon-ieu
;;	  8--> b  0: i  15 pc={(flags!=0)?L57:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 209
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 17 to 18 -- after reload
;;   ======================================================

;;	  0--> b  0: i  17 flags=cmp(cx,0xe0)                      :athlon-direct,athlon-ieu
;;	  1--> b  0: i  18 pc={(flags==0)?L238:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 17
;;   new tail = 18

;;   ======================================================
;;   -- basic block 4 from 34 to 41 -- after reload
;;   ======================================================

;;	  0--> b  0: i  34 ax=[`IV256']                            :athlon-direct,athlon-load
;;	  3--> b  0: i  35 [sp+0x40]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  36 ax=[const(`IV256'+0x8)]                 :athlon-direct,athlon-load
;;	  6--> b  0: i  37 [sp+0x48]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  38 ax=[const(`IV256'+0x10)]                :athlon-direct,athlon-load
;;	  9--> b  0: i  39 [sp+0x50]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  40 ax=[const(`IV256'+0x18)]                :athlon-direct,athlon-load
;;	 12--> b  0: i  41 [sp+0x58]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 12
;;   new head = 34
;;   new tail = 41

;;   ======================================================
;;   -- basic block 5 from 44 to 54 -- after reload
;;   ======================================================

;;	  0--> b  0: i 206 bx=sp+0x30                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  51 cx=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 231 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  45 [sp+0x64]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  53 xmm0=const_vector                       :athlon-double,athlon-fpsched,athlon-fmul
;;	  2--> b  0: i 207 r11=bx+0x38                             :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i  44 [sp+0x60]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 197 di=r11                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i  52 {cx=0;di=cx<<0x3+di;[di]=0;use ax;use cx;}:athlon-vector,athlon-load,athlon-ieu0*6
;;	  6--> b  0: i  54 [sp+0xa8]=unspec[xmm0] 104              :athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2))*2
;;	Ready list (final):  
;;   total time = 6
;;   new head = 206
;;   new tail = 54

;;   ======================================================
;;   -- basic block 6 from 122 to 127 -- after reload
;;   ======================================================

;;	  0--> b  0: i 126 flags=cmp(r10,0x17f)                    :athlon-direct,athlon-ieu
;;	  0--> b  0: i 122 [sp+0x30]=r10                           :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 123 [sp+0x34]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 124 [sp+0x38]=0x1                           :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 125 [sp+0x3c]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 127 pc={(flags>0)?L139:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 126
;;   new tail = 127

;;   ======================================================
;;   -- basic block 7 from 129 to 130 -- after reload
;;   ======================================================

;;	  0--> b  0: i 129 flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 130 pc={(flags!=0)?L239:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 129
;;   new tail = 130

;;   ======================================================
;;   -- basic block 8 from 152 to 154 -- after reload
;;   ======================================================

;;	  0--> b  0: i 152 dx=r9                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 153 cx=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 154 ax=call [`Final']                       :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 152
;;   new tail = 154

;;   ======================================================
;;   -- basic block 9 from 163 to 219 -- after reload
;;   ======================================================

;;	  0--> b  0: i 163 use ax                                  :nothing
;;	  0--> b  0: i 215 unspec/v[0] 0                           :athlon-vector,athlon-ieu,athlon-ieu
;;	  2--> b  0: i 216 {sp=sp+0x1b8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  3--> b  0: i 217 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 218 di=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i 219 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 163
;;   new tail = 219

;;   ======================================================
;;   -- basic block 10 from 205 to 62 -- after reload
;;   ======================================================

;;	  0--> b  0: i 205 cx=cx-0x180                             :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i   7 ax=0x2                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 230 {flags=cmp(cx&0xffffffffffffff7f,0);cx=cx&0xffffffffffffff7f;}:athlon-direct,athlon-ieu
;;	  3--> b  0: i  62 pc={(flags!=0)?L156:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 205
;;   new tail = 62

;;   ======================================================
;;   -- basic block 11 from 64 to 65 -- after reload
;;   ======================================================

;;	  0--> b  0: i  64 flags=cmp(r10,0x180)                    :athlon-direct,athlon-ieu
;;	  1--> b  0: i  65 pc={(flags==0)?L240:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 64
;;   new tail = 65

;;   ======================================================
;;   -- basic block 12 from 89 to 104 -- after reload
;;   ======================================================

;;	  0--> b  0: i  89 ax=[`IV512']                            :athlon-direct,athlon-load
;;	  3--> b  0: i  90 [sp+0xb8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  91 ax=[const(`IV512'+0x8)]                 :athlon-direct,athlon-load
;;	  6--> b  0: i  92 [sp+0xc0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  93 ax=[const(`IV512'+0x10)]                :athlon-direct,athlon-load
;;	  9--> b  0: i  94 [sp+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  95 ax=[const(`IV512'+0x18)]                :athlon-direct,athlon-load
;;	 12--> b  0: i  96 [sp+0xd0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i  97 ax=[const(`IV512'+0x20)]                :athlon-direct,athlon-load
;;	 15--> b  0: i  98 [sp+0xd8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i  99 ax=[const(`IV512'+0x28)]                :athlon-direct,athlon-load
;;	 18--> b  0: i 100 [sp+0xe0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i 101 ax=[const(`IV512'+0x30)]                :athlon-direct,athlon-load
;;	 21--> b  0: i 102 [sp+0xe8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 21--> b  0: i 103 ax=[const(`IV512'+0x38)]                :athlon-direct,athlon-load
;;	 24--> b  0: i 104 [sp+0xf0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 24
;;   new head = 89
;;   new tail = 104

;;   ======================================================
;;   -- basic block 13 from 107 to 241 -- after reload
;;   ======================================================

;;	  0--> b  0: i 203 bx=sp+0x30                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 114 cx=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 229 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 108 [sp+0x100]=0                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 107 [sp+0xf8]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 204 r11=bx+0xd8                             :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i 116 [sp+0x188]=0                            :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 117 [sp+0x190]=0                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 118 [sp+0x198]=0                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 119 [sp+0x1a0]=0                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 198 di=r11                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i 115 {cx=0;di=cx<<0x3+di;[di]=0;use ax;use cx;}:athlon-vector,athlon-load,athlon-ieu0*6
;;	  6--> b  0: i 241 pc=L120                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 203
;;   new tail = 241

;;   ======================================================
;;   -- basic block 14 from 21 to 243 -- after reload
;;   ======================================================

;;	  0--> b  0: i  21 ax=[`IV224']                            :athlon-direct,athlon-load
;;	  3--> b  0: i  22 [sp+0x40]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  23 ax=[const(`IV224'+0x8)]                 :athlon-direct,athlon-load
;;	  6--> b  0: i  24 [sp+0x48]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  25 ax=[const(`IV224'+0x10)]                :athlon-direct,athlon-load
;;	  9--> b  0: i  26 [sp+0x50]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  27 ax=[const(`IV224'+0x18)]                :athlon-direct,athlon-load
;;	 12--> b  0: i  28 [sp+0x58]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i 243 pc=L42                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 21
;;   new tail = 243

;;   ======================================================
;;   -- basic block 15 from 199 to 245 -- after reload
;;   ======================================================

;;	  0--> b  0: i 135 cx=bx                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 199 [sp+0x28]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 136 ax=call [`Update32.part.0']             :athlon-vector,athlon-ieu
;;	  2--> b  0: i 200 r9=[sp+0x28]                            :athlon-direct,athlon-load
;;	  2--> b  0: i 245 pc=L149                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 135
;;   new tail = 245

;;   ======================================================
;;   -- basic block 16 from 141 to 142 -- after reload
;;   ======================================================

;;	  0--> b  0: i 141 flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 142 pc={(flags==0)?L149:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 141
;;   new tail = 142

;;   ======================================================
;;   -- basic block 17 from 201 to 247 -- after reload
;;   ======================================================

;;	  0--> b  0: i 147 cx=bx                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 201 [sp+0x28]=r9                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 148 ax=call [`Update64.part.1']             :athlon-vector,athlon-ieu
;;	  2--> b  0: i 202 r9=[sp+0x28]                            :athlon-direct,athlon-load
;;	  2--> b  0: i 235 cx=bx                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 234 dx=r9                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i 236 ax=call [`Final']                       :athlon-vector,athlon-ieu
;;	  7--> b  0: i 247 pc=L156                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 147
;;   new tail = 247

;;   ======================================================
;;   -- basic block 18 from 68 to 249 -- after reload
;;   ======================================================

;;	  0--> b  0: i  68 ax=[`IV384']                            :athlon-direct,athlon-load
;;	  3--> b  0: i  69 [sp+0xb8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  70 ax=[const(`IV384'+0x8)]                 :athlon-direct,athlon-load
;;	  6--> b  0: i  71 [sp+0xc0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  72 ax=[const(`IV384'+0x10)]                :athlon-direct,athlon-load
;;	  9--> b  0: i  73 [sp+0xc8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  74 ax=[const(`IV384'+0x18)]                :athlon-direct,athlon-load
;;	 12--> b  0: i  75 [sp+0xd0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i  76 ax=[const(`IV384'+0x20)]                :athlon-direct,athlon-load
;;	 15--> b  0: i  77 [sp+0xd8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 15--> b  0: i  78 ax=[const(`IV384'+0x28)]                :athlon-direct,athlon-load
;;	 18--> b  0: i  79 [sp+0xe0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 18--> b  0: i  80 ax=[const(`IV384'+0x30)]                :athlon-direct,athlon-load
;;	 21--> b  0: i  81 [sp+0xe8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 21--> b  0: i  82 ax=[const(`IV384'+0x38)]                :athlon-direct,athlon-load
;;	 24--> b  0: i  83 [sp+0xf0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	 24--> b  0: i 249 pc=L105                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 24
;;   new head = 68
;;   new tail = 249



starting the processing of deferred insns
ending the processing of deferred insns


Hash

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 5 [di] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9] 39[r10] 40[r11]
;;  ref usage 	r0={33d,30u} r1={7d,4u} r2={15d,14u} r3={4d,8u} r5={6d,6u} r7={7d,74u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1e} r17={15d,7u} r18={4d} r19={4d} r20={4e} r21={6d,1u} r22={5d} r23={5d} r24={5d} r25={4d} r26={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d,4u} r38={7d,4u} r39={5d,3u} r40={6d,2u} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 485{323d,157u,5e} in 121{117 regular + 4 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 7 [sp] 17 [flags] 39 [r10]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 7 [sp] 17 [flags] 39 [r10]
;; live  kill	 17 [flags]
(note 9 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 9 13 2 NOTE_INSN_FUNCTION_BEG)
(note 13 6 209 2 NOTE_INSN_DELETED)
(insn/f:TI 209 13 210 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 5 di)) blake_ref.c:662 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil)))
(insn/f 210 209 211 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) blake_ref.c:662 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 211 210 212 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:662 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -440 [0xfffffffffffffe48])))
            (nil))))
(insn:TI 212 211 213 2 (unspec_volatile [
            (reg/f:DI 7 sp)
        ] UNSPECV_PROLOGUE_USE) blake_ref.c:662 679 {prologue_use}
     (nil))
(note 213 212 208 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 208 213 2 2 (set (reg:SI 0 ax [orig:99 D.6062 ] [99])
        (plus:SI (reg:SI 2 cx [orig:95 hashbitlen ] [95])
            (const_int -224 [0xffffffffffffff20]))) blake_ref.c:207 213 {*leasi}
     (nil))
(insn 2 208 232 2 (set (reg/v:SI 39 r10 [orig:95 hashbitlen ] [95])
        (reg:SI 2 cx [ hashbitlen ])) blake_ref.c:662 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [2 hashbitlen+0 S4 A64])
        (nil)))
(insn:TI 232 2 15 2 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (and:SI (reg:SI 0 ax [orig:99 D.6062 ] [99])
                        (const_int -33 [0xffffffffffffffdf]))
                    (const_int 0 [0])))
            (set (reg:SI 0 ax [orig:99 D.6062 ] [99])
                (and:SI (reg:SI 0 ax [orig:99 D.6062 ] [99])
                    (const_int -33 [0xffffffffffffffdf])))
        ]) blake_ref.c:207 392 {*andsi_2}
     (expr_list:REG_UNUSED (reg:SI 0 ax [orig:99 D.6062 ] [99])
        (nil)))
(jump_insn:TI 15 232 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) blake_ref.c:207 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 57)
;;  succ:       3 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              10 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 3, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 2 cx [orig:95 hashbitlen ] [95])
            (const_int 224 [0xe0]))) blake_ref.c:210 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:95 hashbitlen ] [95])
        (nil)))
(jump_insn:TI 18 17 32 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 238)
            (pc))) blake_ref.c:210 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 238)
;;  succ:       14 [28.0%]  (CAN_FALLTHRU)
;;              4 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 4, loop depth 0, count 0, freq 111, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       3 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax]
;; live  kill	
(note 32 18 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 34 32 35 4 (set (reg:DI 0 ax [orig:107 MEM[(char * {ref-all})&IV256] ] [107])
        (mem/u/c:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>) [0 MEM[(char * {ref-all})&IV256]+0 S8 A256])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>) [0 MEM[(char * {ref-all})&IV256]+0 S8 A256])
        (nil)))
(insn:TI 35 34 36 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 MEM[(char * {ref-all})&state + 16B]+0 S8 A128])
        (reg:DI 0 ax [orig:107 MEM[(char * {ref-all})&IV256] ] [107])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:107 MEM[(char * {ref-all})&IV256] ] [107])
        (nil)))
(insn 36 35 37 4 (set (reg:DI 0 ax [orig:108 MEM[(char * {ref-all})&IV256]+8 ] [108])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV256]+8 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV256]+8 S8 A64])
        (nil)))
(insn:TI 37 36 38 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [0 MEM[(char * {ref-all})&state + 16B]+8 S8 A64])
        (reg:DI 0 ax [orig:108 MEM[(char * {ref-all})&IV256]+8 ] [108])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:108 MEM[(char * {ref-all})&IV256]+8 ] [108])
        (nil)))
(insn 38 37 39 4 (set (reg:DI 0 ax [orig:109 MEM[(char * {ref-all})&IV256]+16 ] [109])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV256]+16 S8 A128])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV256]+16 S8 A128])
        (nil)))
(insn:TI 39 38 40 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 MEM[(char * {ref-all})&state + 16B]+16 S8 A128])
        (reg:DI 0 ax [orig:109 MEM[(char * {ref-all})&IV256]+16 ] [109])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:109 MEM[(char * {ref-all})&IV256]+16 ] [109])
        (nil)))
(insn 40 39 41 4 (set (reg:DI 0 ax [orig:110 MEM[(char * {ref-all})&IV256]+24 ] [110])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV256]+24 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV256]+24 S8 A64])
        (nil)))
(insn:TI 41 40 42 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 88 [0x58])) [0 MEM[(char * {ref-all})&state + 16B]+24 S8 A64])
        (reg:DI 0 ax [orig:110 MEM[(char * {ref-all})&IV256]+24 ] [110])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:110 MEM[(char * {ref-all})&IV256]+24 ] [110])
        (nil)))
;;  succ:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 5, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [100.0%]  (CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 17 [flags] 21 [xmm0] 40 [r11]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 21 [xmm0] 40 [r11]
;; live  kill	 17 [flags]
(code_label 42 41 43 5 198 "" [1 uses])
(note 43 42 206 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 206 43 51 5 (set (reg/f:DI 3 bx [148])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) 214 {*leadi}
     (nil))
(insn 51 206 231 5 (set (reg:DI 2 cx [116])
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))
(insn 231 51 45 5 (parallel [
            (set (reg:DI 0 ax [115])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 45 231 53 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 100 [0x64])) [2 state.t32+4 S4 A32])
        (const_int 0 [0])) blake_ref.c:216 90 {*movsi_internal}
     (nil))
(insn 53 45 207 5 (set (reg:V4SI 21 xmm0 [117])
        (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])) blake_ref.c:221 1194 {*movv4si_internal}
     (expr_list:REG_EQUIV (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])
        (nil)))
(insn:TI 207 53 44 5 (set (reg/f:DI 40 r11 [112])
        (plus:DI (reg/f:DI 3 bx [148])
            (const_int 56 [0x38]))) 214 {*leadi}
     (nil))
(insn 44 207 197 5 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [2 state.t32+0 S4 A128])
        (const_int 0 [0])) blake_ref.c:215 90 {*movsi_internal}
     (nil))
(insn:TI 197 44 52 5 (set (reg/f:DI 5 di [orig:114 D.6063 ] [114])
        (reg/f:DI 40 r11 [112])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 40 r11 [112])
        (nil)))
(insn:TI 52 197 54 5 (parallel [
            (set (reg:DI 2 cx [116])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [orig:114 D.6063 ] [114])
                (plus:DI (ashift:DI (reg:DI 2 cx [116])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [orig:114 D.6063 ] [114])))
            (set (mem/c:BLK (reg/f:DI 5 di [orig:114 D.6063 ] [114]) [0 MEM[(void *)&state + 56B]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 0 ax [115]))
            (use (reg:DI 2 cx [116]))
        ]) 933 {*rep_stosdi_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [115])
        (expr_list:REG_UNUSED (reg/f:DI 5 di [orig:114 D.6063 ] [114])
            (expr_list:REG_UNUSED (reg:DI 2 cx [116])
                (nil)))))
(insn:TI 54 52 120 5 (set (mem/c:V16QI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [2 MEM[(unsigned int *)&state + 120B]+0 S16 A64])
        (unspec:V16QI [
                (reg:V16QI 21 xmm0 [117])
            ] UNSPEC_STOREU)) blake_ref.c:221 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V16QI 21 xmm0 [117])
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 6, loop depth 0, count 0, freq 205, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              13 [100.0%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 120 54 121 6 199 "" [1 uses])
(note 121 120 126 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 126 121 122 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 39 r10 [orig:95 hashbitlen ] [95])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg/v:SI 39 r10 [orig:95 hashbitlen ] [95])
        (nil)))
(insn 122 126 123 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [2 state.hashbitlen+0 S4 A128])
        (reg/v:SI 39 r10 [orig:95 hashbitlen ] [95])) blake_ref.c:251 90 {*movsi_internal}
     (nil))
(insn 123 122 124 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 52 [0x34])) [2 state.datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:252 90 {*movsi_internal}
     (nil))
(insn:TI 124 123 125 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 56 [0x38])) [2 state.init+0 S4 A64])
        (const_int 1 [0x1])) blake_ref.c:253 90 {*movsi_internal}
     (nil))
(insn 125 124 127 6 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 60 [0x3c])) [2 state.nullt+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:254 90 {*movsi_internal}
     (nil))
(jump_insn 127 125 128 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 139)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 139)
;;  succ:       7 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              16 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]

;; basic block 7, loop depth 0, count 0, freq 60, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 17 [flags]
;; live  kill	
(note 128 127 129 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 129 128 130 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 37 r8 [orig:97 databitlen ] [97])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 130 129 149 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 239)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2071 (nil)))
 -> 239)
;;  succ:       8 [79.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              15 [20.7%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]

;; basic block 8, loop depth 0, count 0, freq 86, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       7 [79.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              16 [71.0%]  (CAN_FALLTHRU)
;;              15 [100.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 38 [r9]
;; lr  use 	 3 [bx] 7 [sp] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 38 [r9]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 149 130 150 8 204 "" [2 uses])
(note 150 149 152 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 152 150 153 8 (set (reg:DI 1 dx)
        (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])) blake_ref.c:673 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])
        (nil)))
(insn 153 152 154 8 (set (reg:DI 2 cx)
        (reg/f:DI 3 bx [148])) blake_ref.c:673 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [148])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -384 [0xfffffffffffffe80]))
            (nil))))
(call_insn:TI 154 153 156 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>) [0 Final S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:673 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
;;  succ:       9 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       10 [67.0%]  (CAN_FALLTHRU)
;;              8 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              17 [100.0%]  (CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 7 [sp]
;; live  kill	 17 [flags]
(code_label 156 154 157 9 200 "" [2 uses])
(note 157 156 163 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 163 157 251 9 (use (reg/i:SI 0 ax)) blake_ref.c:677 -1
     (nil))
(note 251 163 215 9 NOTE_INSN_EPILOGUE_BEG)
(insn:TI 215 251 216 9 (unspec_volatile [
            (const_int 0 [0])
        ] UNSPECV_BLOCKAGE) blake_ref.c:677 677 {blockage}
     (nil))
(insn/f:TI 216 215 217 9 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 440 [0x1b8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) blake_ref.c:677 968 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 440 [0x1b8])))
            (nil))))
(insn/f:TI 217 216 218 9 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:677 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
            (nil))))
(insn/f:TI 218 217 219 9 (set (reg:DI 5 di)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) blake_ref.c:677 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 5 di)
            (nil))))
(jump_insn:TI 219 218 220 9 (simple_return) blake_ref.c:677 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 7 [sp]

(barrier 220 219 57)
;; basic block 10, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	
(code_label 57 220 58 10 196 "" [1 uses])
(note 58 57 60 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(note 60 58 205 10 NOTE_INSN_DELETED)
(insn:TI 205 60 7 10 (set (reg:SI 2 cx [orig:118 D.6062 ] [118])
        (plus:SI (reg:SI 2 cx [orig:95 hashbitlen ] [95])
            (const_int -384 [0xfffffffffffffe80]))) blake_ref.c:227 213 {*leasi}
     (nil))
(insn 7 205 230 10 (set (reg:SI 0 ax [orig:87 D.6061 ] [87])
        (const_int 2 [0x2])) blake_ref.c:249 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))
(insn:TI 230 7 62 10 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (and:SI (reg:SI 2 cx [orig:118 D.6062 ] [118])
                        (const_int -129 [0xffffffffffffff7f]))
                    (const_int 0 [0])))
            (set (reg:SI 2 cx [orig:118 D.6062 ] [118])
                (and:SI (reg:SI 2 cx [orig:118 D.6062 ] [118])
                    (const_int -129 [0xffffffffffffff7f])))
        ]) blake_ref.c:227 392 {*andsi_2}
     (expr_list:REG_UNUSED (reg:SI 2 cx [orig:118 D.6062 ] [118])
        (nil)))
(jump_insn:TI 62 230 63 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 156)
            (pc))) blake_ref.c:227 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6700 (nil)))
 -> 156)
;;  succ:       11 [33.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              9 [67.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 0 [ax] 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 11, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [33.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 17 [flags]
;; live  kill	
(note 63 62 64 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn:TI 64 63 65 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 39 r10 [orig:95 hashbitlen ] [95])
            (const_int 384 [0x180]))) blake_ref.c:230 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 65 64 87 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 240)
            (pc))) blake_ref.c:230 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 240)
;;  succ:       18 [28.0%]  (CAN_FALLTHRU)
;;              12 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 12, loop depth 0, count 0, freq 37, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       11 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax]
;; live  kill	
(note 87 65 89 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn:TI 89 87 90 12 (set (reg:DI 0 ax [orig:130 MEM[(char * {ref-all})&IV512] ] [130])
        (mem/u/c:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>) [0 MEM[(char * {ref-all})&IV512]+0 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>) [0 MEM[(char * {ref-all})&IV512]+0 S8 A256])
        (nil)))
(insn:TI 90 89 91 12 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [0 MEM[(char * {ref-all})&state + 136B]+0 S8 A64])
        (reg:DI 0 ax [orig:130 MEM[(char * {ref-all})&IV512] ] [130])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:130 MEM[(char * {ref-all})&IV512] ] [130])
        (nil)))
(insn 91 90 92 12 (set (reg:DI 0 ax [orig:131 MEM[(char * {ref-all})&IV512]+8 ] [131])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV512]+8 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV512]+8 S8 A64])
        (nil)))
(insn:TI 92 91 93 12 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [0 MEM[(char * {ref-all})&state + 136B]+8 S8 A64])
        (reg:DI 0 ax [orig:131 MEM[(char * {ref-all})&IV512]+8 ] [131])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:131 MEM[(char * {ref-all})&IV512]+8 ] [131])
        (nil)))
(insn 93 92 94 12 (set (reg:DI 0 ax [orig:132 MEM[(char * {ref-all})&IV512]+16 ] [132])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV512]+16 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV512]+16 S8 A128])
        (nil)))
(insn:TI 94 93 95 12 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 200 [0xc8])) [0 MEM[(char * {ref-all})&state + 136B]+16 S8 A64])
        (reg:DI 0 ax [orig:132 MEM[(char * {ref-all})&IV512]+16 ] [132])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:132 MEM[(char * {ref-all})&IV512]+16 ] [132])
        (nil)))
(insn 95 94 96 12 (set (reg:DI 0 ax [orig:133 MEM[(char * {ref-all})&IV512]+24 ] [133])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV512]+24 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV512]+24 S8 A64])
        (nil)))
(insn:TI 96 95 97 12 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [0 MEM[(char * {ref-all})&state + 136B]+24 S8 A64])
        (reg:DI 0 ax [orig:133 MEM[(char * {ref-all})&IV512]+24 ] [133])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:133 MEM[(char * {ref-all})&IV512]+24 ] [133])
        (nil)))
(insn 97 96 98 12 (set (reg:DI 0 ax [orig:134 MEM[(char * {ref-all})&IV512]+32 ] [134])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 32 [0x20]))) [0 MEM[(char * {ref-all})&IV512]+32 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 32 [0x20]))) [0 MEM[(char * {ref-all})&IV512]+32 S8 A256])
        (nil)))
(insn:TI 98 97 99 12 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 216 [0xd8])) [0 MEM[(char * {ref-all})&state + 136B]+32 S8 A64])
        (reg:DI 0 ax [orig:134 MEM[(char * {ref-all})&IV512]+32 ] [134])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:134 MEM[(char * {ref-all})&IV512]+32 ] [134])
        (nil)))
(insn 99 98 100 12 (set (reg:DI 0 ax [orig:135 MEM[(char * {ref-all})&IV512]+40 ] [135])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 40 [0x28]))) [0 MEM[(char * {ref-all})&IV512]+40 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 40 [0x28]))) [0 MEM[(char * {ref-all})&IV512]+40 S8 A64])
        (nil)))
(insn:TI 100 99 101 12 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [0 MEM[(char * {ref-all})&state + 136B]+40 S8 A64])
        (reg:DI 0 ax [orig:135 MEM[(char * {ref-all})&IV512]+40 ] [135])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:135 MEM[(char * {ref-all})&IV512]+40 ] [135])
        (nil)))
(insn 101 100 102 12 (set (reg:DI 0 ax [orig:136 MEM[(char * {ref-all})&IV512]+48 ] [136])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 48 [0x30]))) [0 MEM[(char * {ref-all})&IV512]+48 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 48 [0x30]))) [0 MEM[(char * {ref-all})&IV512]+48 S8 A128])
        (nil)))
(insn:TI 102 101 103 12 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 232 [0xe8])) [0 MEM[(char * {ref-all})&state + 136B]+48 S8 A64])
        (reg:DI 0 ax [orig:136 MEM[(char * {ref-all})&IV512]+48 ] [136])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:136 MEM[(char * {ref-all})&IV512]+48 ] [136])
        (nil)))
(insn 103 102 104 12 (set (reg:DI 0 ax [orig:137 MEM[(char * {ref-all})&IV512]+56 ] [137])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 56 [0x38]))) [0 MEM[(char * {ref-all})&IV512]+56 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 56 [0x38]))) [0 MEM[(char * {ref-all})&IV512]+56 S8 A64])
        (nil)))
(insn:TI 104 103 105 12 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [0 MEM[(char * {ref-all})&state + 136B]+56 S8 A64])
        (reg:DI 0 ax [orig:137 MEM[(char * {ref-all})&IV512]+56 ] [137])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:137 MEM[(char * {ref-all})&IV512]+56 ] [137])
        (nil)))
;;  succ:       13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 13, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              18 [100.0%]  (CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 17 [flags] 40 [r11]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 40 [r11]
;; live  kill	 17 [flags]
(code_label 105 104 106 13 202 "" [1 uses])
(note 106 105 203 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 203 106 114 13 (set (reg/f:DI 3 bx [148])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) 214 {*leadi}
     (nil))
(insn 114 203 229 13 (set (reg:DI 2 cx [143])
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))
(insn 229 114 108 13 (parallel [
            (set (reg:DI 0 ax [142])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 108 229 107 13 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 256 [0x100])) [3 state.t64+8 S8 A128])
        (const_int 0 [0])) blake_ref.c:236 89 {*movdi_internal}
     (nil))
(insn 107 108 204 13 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 248 [0xf8])) [3 state.t64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:235 89 {*movdi_internal}
     (nil))
(insn:TI 204 107 116 13 (set (reg/f:DI 40 r11 [139])
        (plus:DI (reg/f:DI 3 bx [148])
            (const_int 216 [0xd8]))) 214 {*leadi}
     (nil))
(insn 116 204 117 13 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 392 [0x188])) [3 state.salt64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:241 89 {*movdi_internal}
     (nil))
(insn 117 116 118 13 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 400 [0x190])) [3 state.salt64+8 S8 A128])
        (const_int 0 [0])) blake_ref.c:242 89 {*movdi_internal}
     (nil))
(insn:TI 118 117 119 13 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 408 [0x198])) [3 state.salt64+16 S8 A64])
        (const_int 0 [0])) blake_ref.c:243 89 {*movdi_internal}
     (nil))
(insn 119 118 198 13 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 416 [0x1a0])) [3 state.salt64+24 S8 A128])
        (const_int 0 [0])) blake_ref.c:244 89 {*movdi_internal}
     (nil))
(insn:TI 198 119 115 13 (set (reg/f:DI 5 di [orig:141 D.6064 ] [141])
        (reg/f:DI 40 r11 [139])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 40 r11 [139])
        (nil)))
(insn:TI 115 198 241 13 (parallel [
            (set (reg:DI 2 cx [143])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [orig:141 D.6064 ] [141])
                (plus:DI (ashift:DI (reg:DI 2 cx [143])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [orig:141 D.6064 ] [141])))
            (set (mem/c:BLK (reg/f:DI 5 di [orig:141 D.6064 ] [141]) [0 MEM[(void *)&state + 216B]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 0 ax [142]))
            (use (reg:DI 2 cx [143]))
        ]) 933 {*rep_stosdi_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [142])
        (expr_list:REG_UNUSED (reg/f:DI 5 di [orig:141 D.6064 ] [141])
            (expr_list:REG_UNUSED (reg:DI 2 cx [143])
                (nil)))))
(jump_insn:TI 241 115 242 13 (set (pc)
        (label_ref 120)) 654 {jump}
     (nil)
 -> 120)
;;  succ:       6 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

(barrier 242 241 238)
;; basic block 14, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [28.0%]  (CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 238 242 19 14 212 "" [1 uses])
(note 19 238 21 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn:TI 21 19 22 14 (set (reg:DI 0 ax [orig:102 MEM[(char * {ref-all})&IV224] ] [102])
        (mem/u/c:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>) [0 MEM[(char * {ref-all})&IV224]+0 S8 A256])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>) [0 MEM[(char * {ref-all})&IV224]+0 S8 A256])
        (nil)))
(insn:TI 22 21 23 14 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0 MEM[(char * {ref-all})&state + 16B]+0 S8 A128])
        (reg:DI 0 ax [orig:102 MEM[(char * {ref-all})&IV224] ] [102])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:102 MEM[(char * {ref-all})&IV224] ] [102])
        (nil)))
(insn 23 22 24 14 (set (reg:DI 0 ax [orig:103 MEM[(char * {ref-all})&IV224]+8 ] [103])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV224]+8 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV224]+8 S8 A64])
        (nil)))
(insn:TI 24 23 25 14 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 72 [0x48])) [0 MEM[(char * {ref-all})&state + 16B]+8 S8 A64])
        (reg:DI 0 ax [orig:103 MEM[(char * {ref-all})&IV224]+8 ] [103])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:103 MEM[(char * {ref-all})&IV224]+8 ] [103])
        (nil)))
(insn 25 24 26 14 (set (reg:DI 0 ax [orig:104 MEM[(char * {ref-all})&IV224]+16 ] [104])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV224]+16 S8 A128])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV224]+16 S8 A128])
        (nil)))
(insn:TI 26 25 27 14 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0 MEM[(char * {ref-all})&state + 16B]+16 S8 A128])
        (reg:DI 0 ax [orig:104 MEM[(char * {ref-all})&IV224]+16 ] [104])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:104 MEM[(char * {ref-all})&IV224]+16 ] [104])
        (nil)))
(insn 27 26 28 14 (set (reg:DI 0 ax [orig:105 MEM[(char * {ref-all})&IV224]+24 ] [105])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV224]+24 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV224]+24 S8 A64])
        (nil)))
(insn:TI 28 27 243 14 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 88 [0x58])) [0 MEM[(char * {ref-all})&state + 16B]+24 S8 A64])
        (reg:DI 0 ax [orig:105 MEM[(char * {ref-all})&IV224]+24 ] [105])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:105 MEM[(char * {ref-all})&IV224]+24 ] [105])
        (nil)))
(jump_insn 243 28 244 14 (set (pc)
        (label_ref 42)) 654 {jump}
     (nil)
 -> 42)
;;  succ:       5 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

(barrier 244 243 239)
;; basic block 15, loop depth 0, count 0, freq 26, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [20.7%]  (CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 2 [cx] 38 [r9]
;; live  kill	
(code_label 239 244 131 15 213 "" [1 uses])
(note 131 239 135 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn:TI 135 131 199 15 (set (reg:DI 2 cx)
        (reg/f:DI 3 bx [148])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -384 [0xfffffffffffffe80]))
        (nil)))
(insn 199 135 136 15 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-392 S8 A64])
        (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])
        (nil)))
(call_insn:TI 136 199 200 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 200 136 245 15 (set (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-392 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 245 200 246 15 (set (pc)
        (label_ref 149)) 654 {jump}
     (nil)
 -> 149)
;;  succ:       8 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 38 [r9]
;; live  out 	 3 [bx] 7 [sp] 38 [r9]

(barrier 246 245 139)
;; basic block 16, loop depth 0, count 0, freq 60, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [50.0%]  (CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 139 246 140 16 203 "" [1 uses])
(note 140 139 141 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn:TI 141 140 142 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 37 r8 [orig:97 databitlen ] [97])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 142 141 143 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 149)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 149)
;;  succ:       8 [71.0%]  (CAN_FALLTHRU)
;;              17 [29.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]

;; basic block 17, loop depth 0, count 0, freq 34, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [29.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 38 [r9]
;; live  kill	
(note 143 142 147 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn:TI 147 143 201 17 (set (reg:DI 2 cx)
        (reg/f:DI 3 bx [148])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -384 [0xfffffffffffffe80]))
        (nil)))
(insn 201 147 148 17 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-392 S8 A64])
        (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])
        (nil)))
(call_insn:TI 148 201 202 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn:TI 202 148 235 17 (set (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [6 %sfp+-392 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 235 202 234 17 (set (reg:DI 2 cx)
        (reg/f:DI 3 bx [148])) blake_ref.c:673 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [148])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -384 [0xfffffffffffffe80]))
            (nil))))
(insn:TI 234 235 236 17 (set (reg:DI 1 dx)
        (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])) blake_ref.c:673 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 38 r9 [orig:98 hashval ] [98])
        (nil)))
(call_insn:TI 236 234 247 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>) [0 Final S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:673 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>)
                    (nil)))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(jump_insn:TI 247 236 248 17 (set (pc)
        (label_ref 156)) 654 {jump}
     (nil)
 -> 156)
;;  succ:       9 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 248 247 240)
;; basic block 18, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 17, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [28.0%]  (CAN_FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 240 248 66 18 214 "" [1 uses])
(note 66 240 68 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn:TI 68 66 69 18 (set (reg:DI 0 ax [orig:121 MEM[(char * {ref-all})&IV384] ] [121])
        (mem/u/c:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>) [0 MEM[(char * {ref-all})&IV384]+0 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>) [0 MEM[(char * {ref-all})&IV384]+0 S8 A256])
        (nil)))
(insn:TI 69 68 70 18 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 184 [0xb8])) [0 MEM[(char * {ref-all})&state + 136B]+0 S8 A64])
        (reg:DI 0 ax [orig:121 MEM[(char * {ref-all})&IV384] ] [121])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:121 MEM[(char * {ref-all})&IV384] ] [121])
        (nil)))
(insn 70 69 71 18 (set (reg:DI 0 ax [orig:122 MEM[(char * {ref-all})&IV384]+8 ] [122])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV384]+8 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV384]+8 S8 A64])
        (nil)))
(insn:TI 71 70 72 18 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 192 [0xc0])) [0 MEM[(char * {ref-all})&state + 136B]+8 S8 A64])
        (reg:DI 0 ax [orig:122 MEM[(char * {ref-all})&IV384]+8 ] [122])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:122 MEM[(char * {ref-all})&IV384]+8 ] [122])
        (nil)))
(insn 72 71 73 18 (set (reg:DI 0 ax [orig:123 MEM[(char * {ref-all})&IV384]+16 ] [123])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV384]+16 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV384]+16 S8 A128])
        (nil)))
(insn:TI 73 72 74 18 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 200 [0xc8])) [0 MEM[(char * {ref-all})&state + 136B]+16 S8 A64])
        (reg:DI 0 ax [orig:123 MEM[(char * {ref-all})&IV384]+16 ] [123])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:123 MEM[(char * {ref-all})&IV384]+16 ] [123])
        (nil)))
(insn 74 73 75 18 (set (reg:DI 0 ax [orig:124 MEM[(char * {ref-all})&IV384]+24 ] [124])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV384]+24 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV384]+24 S8 A64])
        (nil)))
(insn:TI 75 74 76 18 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 208 [0xd0])) [0 MEM[(char * {ref-all})&state + 136B]+24 S8 A64])
        (reg:DI 0 ax [orig:124 MEM[(char * {ref-all})&IV384]+24 ] [124])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:124 MEM[(char * {ref-all})&IV384]+24 ] [124])
        (nil)))
(insn 76 75 77 18 (set (reg:DI 0 ax [orig:125 MEM[(char * {ref-all})&IV384]+32 ] [125])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 32 [0x20]))) [0 MEM[(char * {ref-all})&IV384]+32 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 32 [0x20]))) [0 MEM[(char * {ref-all})&IV384]+32 S8 A256])
        (nil)))
(insn:TI 77 76 78 18 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 216 [0xd8])) [0 MEM[(char * {ref-all})&state + 136B]+32 S8 A64])
        (reg:DI 0 ax [orig:125 MEM[(char * {ref-all})&IV384]+32 ] [125])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:125 MEM[(char * {ref-all})&IV384]+32 ] [125])
        (nil)))
(insn 78 77 79 18 (set (reg:DI 0 ax [orig:126 MEM[(char * {ref-all})&IV384]+40 ] [126])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 40 [0x28]))) [0 MEM[(char * {ref-all})&IV384]+40 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 40 [0x28]))) [0 MEM[(char * {ref-all})&IV384]+40 S8 A64])
        (nil)))
(insn:TI 79 78 80 18 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 224 [0xe0])) [0 MEM[(char * {ref-all})&state + 136B]+40 S8 A64])
        (reg:DI 0 ax [orig:126 MEM[(char * {ref-all})&IV384]+40 ] [126])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:126 MEM[(char * {ref-all})&IV384]+40 ] [126])
        (nil)))
(insn 80 79 81 18 (set (reg:DI 0 ax [orig:127 MEM[(char * {ref-all})&IV384]+48 ] [127])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 48 [0x30]))) [0 MEM[(char * {ref-all})&IV384]+48 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 48 [0x30]))) [0 MEM[(char * {ref-all})&IV384]+48 S8 A128])
        (nil)))
(insn:TI 81 80 82 18 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 232 [0xe8])) [0 MEM[(char * {ref-all})&state + 136B]+48 S8 A64])
        (reg:DI 0 ax [orig:127 MEM[(char * {ref-all})&IV384]+48 ] [127])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:127 MEM[(char * {ref-all})&IV384]+48 ] [127])
        (nil)))
(insn 82 81 83 18 (set (reg:DI 0 ax [orig:128 MEM[(char * {ref-all})&IV384]+56 ] [128])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 56 [0x38]))) [0 MEM[(char * {ref-all})&IV384]+56 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 56 [0x38]))) [0 MEM[(char * {ref-all})&IV384]+56 S8 A64])
        (nil)))
(insn:TI 83 82 249 18 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 240 [0xf0])) [0 MEM[(char * {ref-all})&state + 136B]+56 S8 A64])
        (reg:DI 0 ax [orig:128 MEM[(char * {ref-all})&IV384]+56 ] [128])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:128 MEM[(char * {ref-all})&IV384]+56 ] [128])
        (nil)))
(jump_insn 249 83 250 18 (set (pc)
        (label_ref 105)) 654 {jump}
     (nil)
 -> 105)
;;  succ:       13 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 1 [dx] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

(barrier 250 249 196)
(note 196 250 0 NOTE_INSN_DELETED)
