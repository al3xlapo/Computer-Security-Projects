
;; Function compress32 (compress32, funcdef_no=11, decl_uid=3211, cgraph_uid=11, symbol_order=19)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
verify found no changes in insn with uid = 420.
verify found no changes in insn with uid = 422.
ending the processing of deferred insns


compress32

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 17[flags]
;;  ref usage 	r0={1d,2u} r1={1d,1u} r2={1d,1u} r6={1d,8u} r7={1d,8u} r16={1d,7u,2e} r17={139d,2u} r20={1d,40u} r21={1d} r22={1d} r23={1d} r24={1d} r37={1d} r38={1d} r113={2d,2u} r128={1d,2u} r129={1d,2u} r130={1d,2u} r131={1d,2u} r132={1d,2u} r133={1d,2u} r134={1d,2u} r135={1d,2u} r136={1d,2u} r137={1d,2u} r138={1d,2u} r139={1d,2u} r141={1d,2u} r142={1d,2u} r144={1d,2u} r146={1d,2u} r147={1d,2u} r149={1d,2u} r152={1d,2u} r154={1d,2u} r155={1d,2u} r157={1d,2u} r160={1d,2u} r162={1d,2u} r163={1d,2u} r165={1d,2u} r168={1d,2u} r170={1d,2u} r171={1d,2u} r173={1d,2u} r176={1d,2u} r178={1d,2u} r179={1d,2u} r181={1d,2u} r184={1d,2u} r186={1d,2u} r187={1d,2u} r189={1d,2u} r192={1d,2u} r194={1d,2u} r195={1d,2u} r197={1d,2u} r200={1d,2u} r202={1d,2u} r203={1d,2u} r205={1d,2u} r206={2d,3u} r209={1d,2u} r211={1d,2u} r212={1d,2u} r214={1d,2u} r217={2d,3u} r219={3d,3u} r220={2d,3u} r222={2d,3u} r225={1d,2u} r227={1d,2u} r228={1d,2u} r230={1d,2u} r233={2d,3u} r235={3d,3u} r238={2d,3u} r241={1d,2u} r243={1d,2u} r244={1d,2u} r247={1d,2u} r250={2d,3u} r252={3d,3u} r254={2d,3u} r256={2d,3u} r260={1d,2u} r262={1d,2u} r264={1d,2u} r266={1d,2u} r270={2d,3u} r273={3d,3u} r274={2d,3u} r276={2d,3u} r281={2d,17u} r293={2d,2u} r296={2d,1u} r297={2d,2u} r298={2d,1u} r301={2d,2u} r304={2d,1u} r305={2d,2u} r306={2d,1u} r309={2d,2u} r312={2d,1u} r313={2d,2u} r314={2d,1u} r317={2d,2u} r320={2d,1u} r321={2d,2u} r322={2d,1u} r325={2d,2u} r328={2d,1u} r329={2d,2u} r330={2d,1u} r333={2d,2u} r336={2d,1u} r337={2d,2u} r338={2d,1u} r341={2d,2u} r344={2d,1u} r345={2d,2u} r346={2d,1u} r349={2d,2u} r352={2d,1u} r353={2d,2u} r354={2d,1u} r356={1d,17u} r357={1d,16u,15e} r358={1d,1u} r359={1d,1u} r360={1d,1u} r361={1d,1u} r362={1d,1u} r363={1d,1u} r364={1d,1u} r365={1d,1u} r366={1d,1u} r367={1d,1u} r368={1d,1u} r369={1d,1u} r370={1d,1u} r371={1d,1u} r372={1d,1u} r373={1d,1u} r374={1d,1u} r375={1d,1u} r376={1d,1u} r377={1d,1u} r378={1d,1u} r379={1d,1u} r380={1d,1u} r381={1d,1u} r382={1d,1u} r383={1d,1u} r384={1d,1u} r385={1d,1u} r386={1d,1u} r387={1d,1u} r388={1d,1u} r389={1d,1u} r390={1d,1u} r391={1d,1u} r392={1d,1u} r393={1d,1u} r394={1d,1u} r395={1d,1u} r396={1d,1u} r397={1d,1u} r398={1d,1u} r399={1d,1u} r400={1d,1u} r401={1d,1u} r402={1d,1u} r403={1d,1u} r404={1d,1u} r405={1d,1u} r406={1d,1u} r407={1d,1u} r408={1d,1u} r409={1d,1u} r410={1d,1u} r411={1d,1u} r412={1d,1u} r413={1d,1u} r414={1d,1u} r415={1d,1u} r416={1d,1u} r417={1d,1u} r418={1d,1u} r419={1d,1u} r420={1d,1u} r421={1d,1u} r422={1d,1u} r423={1d,1u} r424={1d,1u} r425={1d,1u} r426={1d,1u} r427={1d,1u} r428={1d,1u} r429={1d,1u} r430={1d,1u} r431={1d,1u} r432={1d,1u} r433={1d,1u} r434={1d,1u} r435={1d,1u} r436={1d,1u} r437={1d,1u} r438={1d,2u,1e} r439={1d,16u} r440={1d,2u,1e} r444={1d,2u,1e} r446={1d,2u,1e} r450={1d,2u,1e} r452={1d,2u,1e} r456={1d,2u,1e} r458={1d,2u,1e} r462={1d,2u,1e} r464={1d,2u,1e} r468={1d,2u,1e} r470={1d,2u,1e} r474={1d,2u,1e} r476={1d,2u,1e} r480={1d,2u,1e} r482={1d,2u,1e} r486={1d,1u} r487={1d,1u} r488={1d,1u} r489={1d,1u} r490={1d,1u} r491={1d,1u} r492={1d,1u} r493={1d,2u} r494={1d,1u} r495={1d,1u} r496={1d,1u} r497={1d,1u} r498={1d,1u} r499={1d,1u} r500={1d,1u} r501={1d,1u} r502={1d,1u} r503={1d,1u} r504={1d,1u} r505={1d,1u} r506={1d,1u} r507={1d,1u} r511={1d,1u} r512={1d,1u} r513={1d,1u} r514={1d,1u} r515={1d,1u} 
;;    total ref usage 974{444d,497u,33e} in 317{317 regular + 0 call} insns.
(note 27 0 60 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 667, maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 128 129 130 131 132 133 134 135 136 137 138 139 206 220 254 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373
;; live  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  gen 	 17 [flags] 128 129 130 131 132 133 134 135 136 137 138 139 206 220 254 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373
;; live  kill	 17 [flags]
(note 60 27 28 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 28 60 29 2 (set (reg/v/f:DI 356 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:9 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ state ])
        (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
            (nil))))
(insn 29 28 30 2 (set (reg/v/f:DI 357 [ datablock ])
        (reg:DI 1 dx [ datablock ])) blake_ref.c:9 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ datablock ])
        (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [4 datablock+0 S8 A64])
            (nil))))
(note 30 29 62 2 NOTE_INSN_FUNCTION_BEG)
(insn 62 30 63 2 (set (reg:SI 358 [ MEM[(const BitSequence *)datablock_5(D)] ])
        (mem:SI (reg/v/f:DI 357 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 63 62 64 2 (set (reg:SI 293 [ D.5786 ])
        (bswap:SI (reg:SI 358 [ MEM[(const BitSequence *)datablock_5(D)] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 358 [ MEM[(const BitSequence *)datablock_5(D)] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/v/f:DI 357 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8]))
            (nil))))
(insn 64 63 65 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 m+0 S4 A128])
        (reg:SI 293 [ D.5786 ])) blake_ref.c:32 90 {*movsi_internal}
     (nil))
(insn 65 64 66 2 (set (reg:SI 359 [ MEM[(const BitSequence *)datablock_5(D) + 4B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 66 65 67 2 (set (reg:SI 297 [ D.5786 ])
        (bswap:SI (reg:SI 359 [ MEM[(const BitSequence *)datablock_5(D) + 4B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 359 [ MEM[(const BitSequence *)datablock_5(D) + 4B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8]))
            (nil))))
(insn 67 66 68 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -60 [0xffffffffffffffc4])) [2 m+4 S4 A32])
        (reg:SI 297 [ D.5786 ])) blake_ref.c:33 90 {*movsi_internal}
     (nil))
(insn 68 67 69 2 (set (reg:SI 360 [ MEM[(const BitSequence *)datablock_5(D) + 8B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 69 68 70 2 (set (reg:SI 301 [ D.5786 ])
        (bswap:SI (reg:SI 360 [ MEM[(const BitSequence *)datablock_5(D) + 8B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 360 [ MEM[(const BitSequence *)datablock_5(D) + 8B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8]))
            (nil))))
(insn 70 69 71 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 m+8 S4 A64])
        (reg:SI 301 [ D.5786 ])) blake_ref.c:34 90 {*movsi_internal}
     (nil))
(insn 71 70 72 2 (set (reg:SI 361 [ MEM[(const BitSequence *)datablock_5(D) + 12B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 72 71 73 2 (set (reg:SI 305 [ D.5786 ])
        (bswap:SI (reg:SI 361 [ MEM[(const BitSequence *)datablock_5(D) + 12B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 361 [ MEM[(const BitSequence *)datablock_5(D) + 12B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8]))
            (nil))))
(insn 73 72 74 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -52 [0xffffffffffffffcc])) [2 m+12 S4 A32])
        (reg:SI 305 [ D.5786 ])) blake_ref.c:35 90 {*movsi_internal}
     (nil))
(insn 74 73 75 2 (set (reg:SI 362 [ MEM[(const BitSequence *)datablock_5(D) + 16B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 75 74 76 2 (set (reg:SI 309 [ D.5786 ])
        (bswap:SI (reg:SI 362 [ MEM[(const BitSequence *)datablock_5(D) + 16B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 362 [ MEM[(const BitSequence *)datablock_5(D) + 16B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8]))
            (nil))))
(insn 76 75 77 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [2 m+16 S4 A128])
        (reg:SI 309 [ D.5786 ])) blake_ref.c:36 90 {*movsi_internal}
     (nil))
(insn 77 76 78 2 (set (reg:SI 363 [ MEM[(const BitSequence *)datablock_5(D) + 20B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 78 77 79 2 (set (reg:SI 313 [ D.5786 ])
        (bswap:SI (reg:SI 363 [ MEM[(const BitSequence *)datablock_5(D) + 20B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 363 [ MEM[(const BitSequence *)datablock_5(D) + 20B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8]))
            (nil))))
(insn 79 78 80 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [2 m+20 S4 A32])
        (reg:SI 313 [ D.5786 ])) blake_ref.c:37 90 {*movsi_internal}
     (nil))
(insn 80 79 81 2 (set (reg:SI 364 [ MEM[(const BitSequence *)datablock_5(D) + 24B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 81 80 82 2 (set (reg:SI 317 [ D.5786 ])
        (bswap:SI (reg:SI 364 [ MEM[(const BitSequence *)datablock_5(D) + 24B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 364 [ MEM[(const BitSequence *)datablock_5(D) + 24B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8]))
            (nil))))
(insn 82 81 83 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 m+24 S4 A64])
        (reg:SI 317 [ D.5786 ])) blake_ref.c:38 90 {*movsi_internal}
     (nil))
(insn 83 82 84 2 (set (reg:SI 365 [ MEM[(const BitSequence *)datablock_5(D) + 28B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 84 83 85 2 (set (reg:SI 321 [ D.5786 ])
        (bswap:SI (reg:SI 365 [ MEM[(const BitSequence *)datablock_5(D) + 28B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 365 [ MEM[(const BitSequence *)datablock_5(D) + 28B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8]))
            (nil))))
(insn 85 84 86 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 m+28 S4 A32])
        (reg:SI 321 [ D.5786 ])) blake_ref.c:39 90 {*movsi_internal}
     (nil))
(insn 86 85 87 2 (set (reg:SI 366 [ MEM[(const BitSequence *)datablock_5(D) + 32B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 87 86 88 2 (set (reg:SI 325 [ D.5786 ])
        (bswap:SI (reg:SI 366 [ MEM[(const BitSequence *)datablock_5(D) + 32B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 366 [ MEM[(const BitSequence *)datablock_5(D) + 32B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8]))
            (nil))))
(insn 88 87 89 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 m+32 S4 A128])
        (reg:SI 325 [ D.5786 ])) blake_ref.c:40 90 {*movsi_internal}
     (nil))
(insn 89 88 90 2 (set (reg:SI 367 [ MEM[(const BitSequence *)datablock_5(D) + 36B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 90 89 91 2 (set (reg:SI 329 [ D.5786 ])
        (bswap:SI (reg:SI 367 [ MEM[(const BitSequence *)datablock_5(D) + 36B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 367 [ MEM[(const BitSequence *)datablock_5(D) + 36B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8]))
            (nil))))
(insn 91 90 92 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 m+36 S4 A32])
        (reg:SI 329 [ D.5786 ])) blake_ref.c:41 90 {*movsi_internal}
     (nil))
(insn 92 91 93 2 (set (reg:SI 368 [ MEM[(const BitSequence *)datablock_5(D) + 40B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 93 92 94 2 (set (reg:SI 333 [ D.5786 ])
        (bswap:SI (reg:SI 368 [ MEM[(const BitSequence *)datablock_5(D) + 40B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 368 [ MEM[(const BitSequence *)datablock_5(D) + 40B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8]))
            (nil))))
(insn 94 93 95 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 m+40 S4 A64])
        (reg:SI 333 [ D.5786 ])) blake_ref.c:42 90 {*movsi_internal}
     (nil))
(insn 95 94 96 2 (set (reg:SI 369 [ MEM[(const BitSequence *)datablock_5(D) + 44B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 96 95 97 2 (set (reg:SI 337 [ D.5786 ])
        (bswap:SI (reg:SI 369 [ MEM[(const BitSequence *)datablock_5(D) + 44B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 369 [ MEM[(const BitSequence *)datablock_5(D) + 44B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8]))
            (nil))))
(insn 97 96 98 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [2 m+44 S4 A32])
        (reg:SI 337 [ D.5786 ])) blake_ref.c:43 90 {*movsi_internal}
     (nil))
(insn 98 97 99 2 (set (reg:SI 370 [ MEM[(const BitSequence *)datablock_5(D) + 48B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 99 98 100 2 (set (reg:SI 341 [ D.5786 ])
        (bswap:SI (reg:SI 370 [ MEM[(const BitSequence *)datablock_5(D) + 48B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 370 [ MEM[(const BitSequence *)datablock_5(D) + 48B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8]))
            (nil))))
(insn 100 99 101 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 m+48 S4 A128])
        (reg:SI 341 [ D.5786 ])) blake_ref.c:44 90 {*movsi_internal}
     (nil))
(insn 101 100 102 2 (set (reg:SI 371 [ MEM[(const BitSequence *)datablock_5(D) + 52B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 102 101 103 2 (set (reg:SI 345 [ D.5786 ])
        (bswap:SI (reg:SI 371 [ MEM[(const BitSequence *)datablock_5(D) + 52B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 371 [ MEM[(const BitSequence *)datablock_5(D) + 52B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8]))
            (nil))))
(insn 103 102 104 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 m+52 S4 A32])
        (reg:SI 345 [ D.5786 ])) blake_ref.c:45 90 {*movsi_internal}
     (nil))
(insn 104 103 105 2 (set (reg:SI 372 [ MEM[(const BitSequence *)datablock_5(D) + 56B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 105 104 106 2 (set (reg:SI 349 [ D.5786 ])
        (bswap:SI (reg:SI 372 [ MEM[(const BitSequence *)datablock_5(D) + 56B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 372 [ MEM[(const BitSequence *)datablock_5(D) + 56B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                        (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8]))
            (nil))))
(insn 106 105 107 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 m+56 S4 A64])
        (reg:SI 349 [ D.5786 ])) blake_ref.c:46 90 {*movsi_internal}
     (nil))
(insn 107 106 108 2 (set (reg:SI 373 [ MEM[(const BitSequence *)datablock_5(D) + 60B] ])
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 60 [0x3c])) [0 MEM[(const BitSequence *)datablock_5(D) + 60B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 357 [ datablock ])
        (nil)))
(insn 108 107 109 2 (set (reg:SI 353 [ D.5786 ])
        (bswap:SI (reg:SI 373 [ MEM[(const BitSequence *)datablock_5(D) + 60B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 373 [ MEM[(const BitSequence *)datablock_5(D) + 60B] ])
        (nil)))
(insn 109 108 110 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [2 m+60 S4 A32])
        (reg:SI 353 [ D.5786 ])) blake_ref.c:47 90 {*movsi_internal}
     (nil))
(insn 110 109 111 2 (set (reg:SI 128 [ v$0 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 16 [0x10])) [2 state_246(D)->h32+0 S4 A64])) blake_ref.c:50 90 {*movsi_internal}
     (nil))
(insn 111 110 112 2 (set (reg:SI 129 [ v$1 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 20 [0x14])) [2 state_246(D)->h32+4 S4 A32])) blake_ref.c:51 90 {*movsi_internal}
     (nil))
(insn 112 111 113 2 (set (reg:SI 130 [ v$2 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 24 [0x18])) [2 state_246(D)->h32+8 S4 A64])) blake_ref.c:52 90 {*movsi_internal}
     (nil))
(insn 113 112 114 2 (set (reg:SI 131 [ v$3 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 28 [0x1c])) [2 state_246(D)->h32+12 S4 A32])) blake_ref.c:53 90 {*movsi_internal}
     (nil))
(insn 114 113 115 2 (set (reg:SI 132 [ v$4 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 32 [0x20])) [2 state_246(D)->h32+16 S4 A64])) blake_ref.c:54 90 {*movsi_internal}
     (nil))
(insn 115 114 116 2 (set (reg:SI 133 [ v$5 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 36 [0x24])) [2 state_246(D)->h32+20 S4 A32])) blake_ref.c:55 90 {*movsi_internal}
     (nil))
(insn 116 115 117 2 (set (reg:SI 134 [ v$6 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 40 [0x28])) [2 state_246(D)->h32+24 S4 A64])) blake_ref.c:56 90 {*movsi_internal}
     (nil))
(insn 117 116 118 2 (set (reg:SI 135 [ v$7 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 44 [0x2c])) [2 state_246(D)->h32+28 S4 A32])) blake_ref.c:57 90 {*movsi_internal}
     (nil))
(insn 118 117 119 2 (set (reg:SI 136 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 120 [0x78])) [2 state_246(D)->salt32+0 S4 A64])) blake_ref.c:58 90 {*movsi_internal}
     (nil))
(insn 119 118 120 2 (parallel [
            (set (reg:SI 254 [ v$8 ])
                (xor:SI (reg:SI 136 [ D.5781 ])
                    (const_int 608135816 [0x243f6a88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:58 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 120 119 121 2 (set (reg:SI 137 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 124 [0x7c])) [2 state_246(D)->salt32+4 S4 A32])) blake_ref.c:59 90 {*movsi_internal}
     (nil))
(insn 121 120 122 2 (parallel [
            (set (reg:SI 274 [ v$9 ])
                (xor:SI (reg:SI 137 [ D.5781 ])
                    (const_int -2052912941 [0xffffffff85a308d3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:59 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 122 121 123 2 (set (reg:SI 138 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 128 [0x80])) [2 state_246(D)->salt32+8 S4 A64])) blake_ref.c:60 90 {*movsi_internal}
     (nil))
(insn 123 122 124 2 (parallel [
            (set (reg:SI 220 [ v$10 ])
                (xor:SI (reg:SI 138 [ D.5781 ])
                    (const_int 320440878 [0x13198a2e])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:60 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 124 123 125 2 (set (reg:SI 139 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 132 [0x84])) [2 state_246(D)->salt32+12 S4 A32])) blake_ref.c:61 90 {*movsi_internal}
     (nil))
(insn 125 124 126 2 (parallel [
            (set (reg:SI 206 [ v$11 ])
                (xor:SI (reg:SI 139 [ D.5781 ])
                    (const_int 57701188 [0x3707344])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:61 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 126 125 127 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                    (const_int 12 [0xc])) [2 state_246(D)->nullt+0 S4 A32])
            (const_int 0 [0]))) blake_ref.c:62 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 127 126 128 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 418)
            (pc))) blake_ref.c:62 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 418)
;;  succ:       4 [50.0%] 
;;              3 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 220 254 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 220 254 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356

;; basic block 3, loop depth 0, count 0, freq 334, maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u105(6){ }u106(7){ }u107(16){ }u108(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 220 254 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 356
;; lr  def 	 17 [flags] 141 142 219 235 252 273
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 220 254 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356
;; live  gen 	 141 142 219 235 252 273
;; live  kill	 17 [flags]
(note 128 127 129 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 3 (set (reg:SI 141 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 48 [0x30])) [2 state_246(D)->t32+0 S4 A64])) blake_ref.c:69 90 {*movsi_internal}
     (nil))
(insn 130 129 131 3 (parallel [
            (set (reg:SI 235 [ v$12 ])
                (xor:SI (reg:SI 141 [ D.5781 ])
                    (const_int -1542899678 [0xffffffffa4093822])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:69 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 131 130 132 3 (parallel [
            (set (reg:SI 252 [ v$13 ])
                (xor:SI (reg:SI 141 [ D.5781 ])
                    (const_int 698298832 [0x299f31d0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:70 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 141 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 132 131 133 3 (set (reg:SI 142 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 52 [0x34])) [2 state_246(D)->t32+4 S4 A32])) blake_ref.c:71 90 {*movsi_internal}
     (nil))
(insn 133 132 134 3 (parallel [
            (set (reg:SI 273 [ v$14 ])
                (xor:SI (reg:SI 142 [ D.5781 ])
                    (const_int 137296536 [0x82efa98])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:71 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 134 133 420 3 (parallel [
            (set (reg:SI 219 [ v$15 ])
                (xor:SI (reg:SI 142 [ D.5781 ])
                    (const_int -330404727 [0xffffffffec4e6c89])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:72 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 142 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(jump_insn 420 134 421 3 (set (pc)
        (label_ref 135)) -1
     (nil)
 -> 135)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 219 220 235 252 254 273 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 219 220 235 252 254 273 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356

(barrier 421 420 418)
;; basic block 4, loop depth 0, count 0, freq 334, maybe hot
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u115(6){ }u116(7){ }u117(16){ }u118(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 220 254 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 219 235 252 273
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 220 254 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356
;; live  gen 	 219 235 252 273
;; live  kill	
(code_label 418 421 417 4 5 "" [1 uses])
(note 417 418 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 417 32 4 (set (reg:SI 219 [ v$15 ])
        (const_int -330404727 [0xffffffffec4e6c89])) blake_ref.c:66 90 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:SI 273 [ v$14 ])
        (const_int 137296536 [0x82efa98])) blake_ref.c:65 90 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:SI 252 [ v$13 ])
        (const_int 698298832 [0x299f31d0])) blake_ref.c:64 90 {*movsi_internal}
     (nil))
(insn 34 33 135 4 (set (reg:SI 235 [ v$12 ])
        (const_int -1542899678 [0xffffffffa4093822])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 219 220 235 252 254 273 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 219 220 235 252 254 273 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356

;; basic block 5, loop depth 0, count 0, freq 670, maybe hot
;;  prev block 4, next block 6, flags: (HOT_PARTITION, RTL)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u119(6){ }u120(7){ }u121(16){ }u122(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 219 220 235 252 254 273 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135
;; lr  def 	 113 217 222 233 238 250 256 270 276 281 296 298 304 306 312 314 320 322 328 330 336 338 344 346 352 354
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 219 220 235 252 254 273 274 293 297 301 305 309 313 317 321 325 329 333 337 341 345 349 353 356
;; live  gen 	 113 217 222 233 238 250 256 270 276 281 296 298 304 306 312 314 320 322 328 330 336 338 344 346 352 354
;; live  kill	
(code_label 135 34 136 5 2 "" [1 uses])
(note 136 135 137 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 137 136 35 5 (set (reg:DI 281 [ ivtmp.77 ])
        (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)) 89 {*movdi_internal}
     (nil))
(insn 35 137 36 5 (set (reg:SI 217 [ v$0 ])
        (reg:SI 128 [ v$0 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:SI 233 [ v$1 ])
        (reg:SI 129 [ v$1 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 37 36 38 5 (set (reg:SI 250 [ v$2 ])
        (reg:SI 130 [ v$2 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:SI 270 [ v$3 ])
        (reg:SI 131 [ v$3 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:SI 276 [ v$4 ])
        (reg:SI 132 [ v$4 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:SI 222 [ v$5 ])
        (reg:SI 133 [ v$5 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:SI 238 [ v$6 ])
        (reg:SI 134 [ v$6 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 42 41 43 5 (set (reg:SI 256 [ v$7 ])
        (reg:SI 135 [ v$7 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:SI 113 [ D.5779 ])
        (const_int 14 [0xe])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:SI 354 [ D.5787 ])
        (const_int 1065670069 [0x3f84d5b5])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:SI 352 [ D.5787 ])
        (const_int -1253635817 [0xffffffffb5470917])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:SI 346 [ D.5787 ])
        (const_int -1062458953 [0xffffffffc0ac29b7])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:SI 344 [ D.5787 ])
        (const_int -914599715 [0xffffffffc97c50dd])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:SI 338 [ D.5787 ])
        (const_int -1101764913 [0xffffffffbe5466cf])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:SI 336 [ D.5787 ])
        (const_int 887688300 [0x34e90c6c])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 50 49 51 5 (set (reg:SI 330 [ D.5787 ])
        (const_int 1160258022 [0x452821e6])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 51 50 52 5 (set (reg:SI 328 [ D.5787 ])
        (const_int 953160567 [0x38d01377])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 52 51 53 5 (set (reg:SI 322 [ D.5787 ])
        (const_int 137296536 [0x82efa98])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 53 52 54 5 (set (reg:SI 320 [ D.5787 ])
        (const_int -330404727 [0xffffffffec4e6c89])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:SI 314 [ D.5787 ])
        (const_int -1542899678 [0xffffffffa4093822])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 55 54 56 5 (set (reg:SI 312 [ D.5787 ])
        (const_int 698298832 [0x299f31d0])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:SI 306 [ D.5787 ])
        (const_int 320440878 [0x13198a2e])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 57 56 58 5 (set (reg:SI 304 [ D.5787 ])
        (const_int 57701188 [0x3707344])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 58 57 59 5 (set (reg:SI 298 [ D.5787 ])
        (const_int 608135816 [0x243f6a88])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 59 58 369 5 (set (reg:SI 296 [ D.5787 ])
        (const_int -2052912941 [0xffffffff85a308d3])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 281 293 296 297 298 301 304 305 306 309 312 313 314 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354 356
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 281 293 296 297 298 301 304 305 306 309 312 313 314 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354 356

;; basic block 6, loop depth 0, count 0, freq 9333, maybe hot
;;  prev block 5, next block 7, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              7 [100.0%]  (DFS_BACK)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u131(6){ }u132(7){ }u133(16){ }u134(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 281 293 296 297 298 301 304 305 306 309 312 313 314 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354 356
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 281 293 296 297 298 301 304 305 306 309 312 313 314 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354
;; lr  def 	 17 [flags
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 281 293 296 297 298 301 304 305 306 309 312 313 314 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354 356
;; live  gen 	 17 [flags
;; live  kill	 17 [flags]
(code_label 369 59 138 6 4 "" [1 uses])
(note 138 369 139 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 6 (parallel [
            (set (reg:SI 374 [ D.5781 ])
                (xor:SI (reg:SI 293 [ D.5786 ])
                    (reg:SI 296 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 296 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 293 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 140 139 141 6 (parallel [
            (set (reg:SI 375 [ D.5781 ])
                (plus:SI (reg:SI 374 [ D.5781 ])
                    (reg:SI 276 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 374 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 141 140 142 6 (parallel [
            (set (reg:SI 144 [ D.5781 ])
                (plus:SI (reg:SI 375 [ D.5781 ])
                    (reg:SI 217 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 375 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 217 [ v$0 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 142 141 143 6 (parallel [
            (set (reg:SI 376 [ D.5781 ])
                (xor:SI (reg:SI 144 [ D.5781 ])
                    (reg:SI 235 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 235 [ v$12 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 143 142 144 6 (parallel [
            (set (reg:SI 146 [ D.5781 ])
                (rotate:SI (reg:SI 376 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 586 {*rotlsi3_1}
     (expr_list:REG_DEAD (reg:SI 376 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 144 143 145 6 (parallel [
            (set (reg:SI 147 [ D.5781 ])
                (plus:SI (reg:SI 146 [ D.5781 ])
                    (reg:SI 254 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 254 [ v$8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 145 144 146 6 (parallel [
            (set (reg:SI 377 [ D.5781 ])
                (xor:SI (reg:SI 147 [ D.5781 ])
                    (reg:SI 276 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 276 [ v$4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 146 145 147 6 (parallel [
            (set (reg:SI 149 [ D.5781 ])
                (rotatert:SI (reg:SI 377 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 377 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 147 146 148 6 (parallel [
            (set (reg:SI 378 [ D.5781 ])
                (xor:SI (reg:SI 297 [ D.5786 ])
                    (reg:SI 298 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 298 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 297 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 148 147 149 6 (parallel [
            (set (reg:SI 379 [ D.5781 ])
                (plus:SI (reg:SI 378 [ D.5781 ])
                    (reg:SI 144 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 378 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 144 [ D.5781 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 149 148 150 6 (parallel [
            (set (reg:SI 152 [ D.5781 ])
                (plus:SI (reg:SI 379 [ D.5781 ])
                    (reg:SI 149 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 379 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 150 149 151 6 (parallel [
            (set (reg:SI 380 [ D.5781 ])
                (xor:SI (reg:SI 146 [ D.5781 ])
                    (reg:SI 152 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 146 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 151 150 152 6 (parallel [
            (set (reg:SI 154 [ D.5781 ])
                (rotatert:SI (reg:SI 380 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 380 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 152 151 153 6 (parallel [
            (set (reg:SI 155 [ D.5781 ])
                (plus:SI (reg:SI 147 [ D.5781 ])
                    (reg:SI 154 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 147 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 153 152 154 6 (parallel [
            (set (reg:SI 381 [ D.5781 ])
                (xor:SI (reg:SI 149 [ D.5781 ])
                    (reg:SI 155 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 149 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 154 153 155 6 (parallel [
            (set (reg:SI 157 [ D.5781 ])
                (rotatert:SI (reg:SI 381 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 381 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 155 154 156 6 (parallel [
            (set (reg:SI 382 [ D.5781 ])
                (xor:SI (reg:SI 301 [ D.5786 ])
                    (reg:SI 304 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 304 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 301 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 156 155 157 6 (parallel [
            (set (reg:SI 383 [ D.5781 ])
                (plus:SI (reg:SI 382 [ D.5781 ])
                    (reg:SI 222 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 382 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 157 156 158 6 (parallel [
            (set (reg:SI 160 [ D.5781 ])
                (plus:SI (reg:SI 383 [ D.5781 ])
                    (reg:SI 233 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 383 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 233 [ v$1 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 158 157 159 6 (parallel [
            (set (reg:SI 384 [ D.5781 ])
                (xor:SI (reg:SI 160 [ D.5781 ])
                    (reg:SI 252 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 252 [ v$13 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 159 158 160 6 (parallel [
            (set (reg:SI 162 [ D.5781 ])
                (rotate:SI (reg:SI 384 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 586 {*rotlsi3_1}
     (expr_list:REG_DEAD (reg:SI 384 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 160 159 161 6 (parallel [
            (set (reg:SI 163 [ D.5781 ])
                (plus:SI (reg:SI 162 [ D.5781 ])
                    (reg:SI 274 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 274 [ v$9 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 161 160 162 6 (parallel [
            (set (reg:SI 385 [ D.5781 ])
                (xor:SI (reg:SI 163 [ D.5781 ])
                    (reg:SI 222 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 222 [ v$5 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 162 161 163 6 (parallel [
            (set (reg:SI 165 [ D.5781 ])
                (rotatert:SI (reg:SI 385 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 385 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 163 162 164 6 (parallel [
            (set (reg:SI 386 [ D.5781 ])
                (xor:SI (reg:SI 305 [ D.5786 ])
                    (reg:SI 306 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 306 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 305 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 164 163 165 6 (parallel [
            (set (reg:SI 387 [ D.5781 ])
                (plus:SI (reg:SI 386 [ D.5781 ])
                    (reg:SI 160 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 386 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 160 [ D.5781 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 165 164 166 6 (parallel [
            (set (reg:SI 168 [ D.5781 ])
                (plus:SI (reg:SI 387 [ D.5781 ])
                    (reg:SI 165 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 387 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 166 165 167 6 (parallel [
            (set (reg:SI 388 [ D.5781 ])
                (xor:SI (reg:SI 162 [ D.5781 ])
                    (reg:SI 168 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 162 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 167 166 168 6 (parallel [
            (set (reg:SI 170 [ D.5781 ])
                (rotatert:SI (reg:SI 388 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 388 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 168 167 169 6 (parallel [
            (set (reg:SI 171 [ D.5781 ])
                (plus:SI (reg:SI 163 [ D.5781 ])
                    (reg:SI 170 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 163 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 169 168 170 6 (parallel [
            (set (reg:SI 389 [ D.5781 ])
                (xor:SI (reg:SI 165 [ D.5781 ])
                    (reg:SI 171 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 165 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 170 169 171 6 (parallel [
            (set (reg:SI 173 [ D.5781 ])
                (rotatert:SI (reg:SI 389 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 389 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 171 170 172 6 (parallel [
            (set (reg:SI 390 [ D.5781 ])
                (xor:SI (reg:SI 309 [ D.5786 ])
                    (reg:SI 312 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 312 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 309 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 172 171 173 6 (parallel [
            (set (reg:SI 391 [ D.5781 ])
                (plus:SI (reg:SI 390 [ D.5781 ])
                    (reg:SI 238 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 390 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 173 172 174 6 (parallel [
            (set (reg:SI 176 [ D.5781 ])
                (plus:SI (reg:SI 391 [ D.5781 ])
                    (reg:SI 250 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 391 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 250 [ v$2 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 174 173 175 6 (parallel [
            (set (reg:SI 392 [ D.5781 ])
                (xor:SI (reg:SI 176 [ D.5781 ])
                    (reg:SI 273 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 273 [ v$14 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 175 174 176 6 (parallel [
            (set (reg:SI 178 [ D.5781 ])
                (rotate:SI (reg:SI 392 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 586 {*rotlsi3_1}
     (expr_list:REG_DEAD (reg:SI 392 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 176 175 177 6 (parallel [
            (set (reg:SI 179 [ D.5781 ])
                (plus:SI (reg:SI 178 [ D.5781 ])
                    (reg:SI 220 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 220 [ v$10 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 177 176 178 6 (parallel [
            (set (reg:SI 393 [ D.5781 ])
                (xor:SI (reg:SI 179 [ D.5781 ])
                    (reg:SI 238 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 238 [ v$6 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 178 177 179 6 (parallel [
            (set (reg:SI 181 [ D.5781 ])
                (rotatert:SI (reg:SI 393 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 393 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 179 178 180 6 (parallel [
            (set (reg:SI 394 [ D.5781 ])
                (xor:SI (reg:SI 313 [ D.5786 ])
                    (reg:SI 314 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 314 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 313 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 180 179 181 6 (parallel [
            (set (reg:SI 395 [ D.5781 ])
                (plus:SI (reg:SI 394 [ D.5781 ])
                    (reg:SI 176 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 394 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 176 [ D.5781 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 181 180 182 6 (parallel [
            (set (reg:SI 184 [ D.5781 ])
                (plus:SI (reg:SI 395 [ D.5781 ])
                    (reg:SI 181 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 395 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 182 181 183 6 (parallel [
            (set (reg:SI 396 [ D.5781 ])
                (xor:SI (reg:SI 178 [ D.5781 ])
                    (reg:SI 184 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 178 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 183 182 184 6 (parallel [
            (set (reg:SI 186 [ D.5781 ])
                (rotatert:SI (reg:SI 396 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 396 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 184 183 185 6 (parallel [
            (set (reg:SI 187 [ D.5781 ])
                (plus:SI (reg:SI 179 [ D.5781 ])
                    (reg:SI 186 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 179 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 185 184 186 6 (parallel [
            (set (reg:SI 397 [ D.5781 ])
                (xor:SI (reg:SI 181 [ D.5781 ])
                    (reg:SI 187 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 181 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 186 185 187 6 (parallel [
            (set (reg:SI 189 [ D.5781 ])
                (rotatert:SI (reg:SI 397 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 397 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 187 186 188 6 (parallel [
            (set (reg:SI 398 [ D.5781 ])
                (xor:SI (reg:SI 317 [ D.5786 ])
                    (reg:SI 320 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 320 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 317 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 188 187 189 6 (parallel [
            (set (reg:SI 399 [ D.5781 ])
                (plus:SI (reg:SI 398 [ D.5781 ])
                    (reg:SI 256 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 398 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 189 188 190 6 (parallel [
            (set (reg:SI 192 [ D.5781 ])
                (plus:SI (reg:SI 399 [ D.5781 ])
                    (reg:SI 270 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 399 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 270 [ v$3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 190 189 191 6 (parallel [
            (set (reg:SI 400 [ D.5781 ])
                (xor:SI (reg:SI 192 [ D.5781 ])
                    (reg:SI 219 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 219 [ v$15 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 191 190 192 6 (parallel [
            (set (reg:SI 194 [ D.5781 ])
                (rotate:SI (reg:SI 400 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 586 {*rotlsi3_1}
     (expr_list:REG_DEAD (reg:SI 400 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 192 191 193 6 (parallel [
            (set (reg:SI 195 [ D.5781 ])
                (plus:SI (reg:SI 194 [ D.5781 ])
                    (reg:SI 206 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 206 [ v$11 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 193 192 194 6 (parallel [
            (set (reg:SI 401 [ D.5781 ])
                (xor:SI (reg:SI 195 [ D.5781 ])
                    (reg:SI 256 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 256 [ v$7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 194 193 195 6 (parallel [
            (set (reg:SI 197 [ D.5781 ])
                (rotatert:SI (reg:SI 401 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 401 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 195 194 196 6 (parallel [
            (set (reg:SI 402 [ D.5781 ])
                (xor:SI (reg:SI 321 [ D.5786 ])
                    (reg:SI 322 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 322 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 321 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 196 195 197 6 (parallel [
            (set (reg:SI 403 [ D.5781 ])
                (plus:SI (reg:SI 402 [ D.5781 ])
                    (reg:SI 192 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 402 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 192 [ D.5781 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 197 196 198 6 (parallel [
            (set (reg:SI 200 [ D.5781 ])
                (plus:SI (reg:SI 403 [ D.5781 ])
                    (reg:SI 197 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 403 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 198 197 199 6 (parallel [
            (set (reg:SI 404 [ D.5781 ])
                (xor:SI (reg:SI 194 [ D.5781 ])
                    (reg:SI 200 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 194 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 199 198 200 6 (parallel [
            (set (reg:SI 202 [ D.5781 ])
                (rotatert:SI (reg:SI 404 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 404 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 200 199 201 6 (parallel [
            (set (reg:SI 203 [ D.5781 ])
                (plus:SI (reg:SI 195 [ D.5781 ])
                    (reg:SI 202 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 195 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 201 200 202 6 (parallel [
            (set (reg:SI 405 [ D.5781 ])
                (xor:SI (reg:SI 197 [ D.5781 ])
                    (reg:SI 203 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 197 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 202 201 203 6 (parallel [
            (set (reg:SI 205 [ D.5781 ])
                (rotatert:SI (reg:SI 405 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 405 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 203 202 204 6 (parallel [
            (set (reg:SI 406 [ D.5781 ])
                (xor:SI (reg:SI 325 [ D.5786 ])
                    (reg:SI 328 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 328 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 325 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 204 203 205 6 (parallel [
            (set (reg:SI 407 [ D.5781 ])
                (plus:SI (reg:SI 406 [ D.5781 ])
                    (reg:SI 152 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 406 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 152 [ D.5781 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 205 204 206 6 (parallel [
            (set (reg:SI 209 [ D.5781 ])
                (plus:SI (reg:SI 407 [ D.5781 ])
                    (reg:SI 173 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 407 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 206 205 207 6 (parallel [
            (set (reg:SI 408 [ D.5781 ])
                (xor:SI (reg:SI 202 [ D.5781 ])
                    (reg:SI 209 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 202 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 207 206 208 6 (parallel [
            (set (reg:SI 211 [ D.5781 ])
                (rotate:SI (reg:SI 408 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 586 {*rotlsi3_1}
     (expr_list:REG_DEAD (reg:SI 408 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 208 207 209 6 (parallel [
            (set (reg:SI 212 [ D.5781 ])
                (plus:SI (reg:SI 187 [ D.5781 ])
                    (reg:SI 211 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 187 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 209 208 210 6 (parallel [
            (set (reg:SI 409 [ D.5781 ])
                (xor:SI (reg:SI 173 [ D.5781 ])
                    (reg:SI 212 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 173 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 210 209 211 6 (parallel [
            (set (reg:SI 214 [ D.5781 ])
                (rotatert:SI (reg:SI 409 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 409 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 211 210 212 6 (parallel [
            (set (reg:SI 410 [ D.5781 ])
                (xor:SI (reg:SI 329 [ D.5786 ])
                    (reg:SI 330 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 330 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 329 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 212 211 213 6 (parallel [
            (set (reg:SI 411 [ D.5781 ])
                (plus:SI (reg:SI 410 [ D.5781 ])
                    (reg:SI 209 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 410 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 209 [ D.5781 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 213 212 214 6 (parallel [
            (set (reg:SI 217 [ v$0 ])
                (plus:SI (reg:SI 411 [ D.5781 ])
                    (reg:SI 214 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 411 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 214 213 215 6 (parallel [
            (set (reg:SI 412 [ D.5781 ])
                (xor:SI (reg:SI 211 [ D.5781 ])
                    (reg:SI 217 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 211 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 215 214 216 6 (parallel [
            (set (reg:SI 219 [ v$15 ])
                (rotatert:SI (reg:SI 412 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 412 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 216 215 217 6 (parallel [
            (set (reg:SI 220 [ v$10 ])
                (plus:SI (reg:SI 212 [ D.5781 ])
                    (reg:SI 219 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 212 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 217 216 218 6 (parallel [
            (set (reg:SI 413 [ D.5781 ])
                (xor:SI (reg:SI 214 [ D.5781 ])
                    (reg:SI 220 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 214 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 218 217 219 6 (parallel [
            (set (reg:SI 222 [ v$5 ])
                (rotatert:SI (reg:SI 413 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 413 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 219 218 220 6 (parallel [
            (set (reg:SI 414 [ D.5781 ])
                (xor:SI (reg:SI 333 [ D.5786 ])
                    (reg:SI 336 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 336 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 333 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 220 219 221 6 (parallel [
            (set (reg:SI 415 [ D.5781 ])
                (plus:SI (reg:SI 414 [ D.5781 ])
                    (reg:SI 168 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 414 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 168 [ D.5781 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 221 220 222 6 (parallel [
            (set (reg:SI 225 [ D.5781 ])
                (plus:SI (reg:SI 415 [ D.5781 ])
                    (reg:SI 189 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 415 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 222 221 223 6 (parallel [
            (set (reg:SI 416 [ D.5781 ])
                (xor:SI (reg:SI 154 [ D.5781 ])
                    (reg:SI 225 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 154 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 223 222 224 6 (parallel [
            (set (reg:SI 227 [ D.5781 ])
                (rotate:SI (reg:SI 416 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 586 {*rotlsi3_1}
     (expr_list:REG_DEAD (reg:SI 416 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 224 223 225 6 (parallel [
            (set (reg:SI 228 [ D.5781 ])
                (plus:SI (reg:SI 203 [ D.5781 ])
                    (reg:SI 227 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 203 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 225 224 226 6 (parallel [
            (set (reg:SI 417 [ D.5781 ])
                (xor:SI (reg:SI 189 [ D.5781 ])
                    (reg:SI 228 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 189 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 226 225 227 6 (parallel [
            (set (reg:SI 230 [ D.5781 ])
                (rotatert:SI (reg:SI 417 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 417 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 227 226 228 6 (parallel [
            (set (reg:SI 418 [ D.5781 ])
                (xor:SI (reg:SI 337 [ D.5786 ])
                    (reg:SI 338 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 338 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 337 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 228 227 229 6 (parallel [
            (set (reg:SI 419 [ D.5781 ])
                (plus:SI (reg:SI 418 [ D.5781 ])
                    (reg:SI 225 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 418 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 225 [ D.5781 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 229 228 230 6 (parallel [
            (set (reg:SI 233 [ v$1 ])
                (plus:SI (reg:SI 419 [ D.5781 ])
                    (reg:SI 230 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 419 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 230 229 231 6 (parallel [
            (set (reg:SI 420 [ D.5781 ])
                (xor:SI (reg:SI 227 [ D.5781 ])
                    (reg:SI 233 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 227 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 231 230 232 6 (parallel [
            (set (reg:SI 235 [ v$12 ])
                (rotatert:SI (reg:SI 420 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 420 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 232 231 233 6 (parallel [
            (set (reg:SI 206 [ v$11 ])
                (plus:SI (reg:SI 228 [ D.5781 ])
                    (reg:SI 235 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 228 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 233 232 234 6 (parallel [
            (set (reg:SI 421 [ D.5781 ])
                (xor:SI (reg:SI 230 [ D.5781 ])
                    (reg:SI 206 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 230 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 234 233 235 6 (parallel [
            (set (reg:SI 238 [ v$6 ])
                (rotatert:SI (reg:SI 421 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 421 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 235 234 236 6 (parallel [
            (set (reg:SI 422 [ D.5781 ])
                (xor:SI (reg:SI 341 [ D.5786 ])
                    (reg:SI 344 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 344 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 341 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 236 235 237 6 (parallel [
            (set (reg:SI 423 [ D.5781 ])
                (plus:SI (reg:SI 422 [ D.5781 ])
                    (reg:SI 184 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 422 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 184 [ D.5781 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 237 236 238 6 (parallel [
            (set (reg:SI 241 [ D.5781 ])
                (plus:SI (reg:SI 423 [ D.5781 ])
                    (reg:SI 205 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 423 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 238 237 239 6 (parallel [
            (set (reg:SI 424 [ D.5781 ])
                (xor:SI (reg:SI 170 [ D.5781 ])
                    (reg:SI 241 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 170 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 239 238 240 6 (parallel [
            (set (reg:SI 243 [ D.5781 ])
                (rotate:SI (reg:SI 424 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 586 {*rotlsi3_1}
     (expr_list:REG_DEAD (reg:SI 424 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 240 239 241 6 (parallel [
            (set (reg:SI 244 [ D.5781 ])
                (plus:SI (reg:SI 155 [ D.5781 ])
                    (reg:SI 243 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 155 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 241 240 242 6 (parallel [
            (set (reg:SI 425 [ D.5781 ])
                (xor:SI (reg:SI 205 [ D.5781 ])
                    (reg:SI 244 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 205 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 242 241 243 6 (parallel [
            (set (reg:SI 247 [ D.5781 ])
                (rotatert:SI (reg:SI 425 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 425 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 243 242 244 6 (parallel [
            (set (reg:SI 426 [ D.5781 ])
                (xor:SI (reg:SI 345 [ D.5786 ])
                    (reg:SI 346 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 346 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 345 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 244 243 245 6 (parallel [
            (set (reg:SI 427 [ D.5781 ])
                (plus:SI (reg:SI 426 [ D.5781 ])
                    (reg:SI 241 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 426 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 241 [ D.5781 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 245 244 246 6 (parallel [
            (set (reg:SI 250 [ v$2 ])
                (plus:SI (reg:SI 427 [ D.5781 ])
                    (reg:SI 247 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 427 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 246 245 247 6 (parallel [
            (set (reg:SI 428 [ D.5781 ])
                (xor:SI (reg:SI 243 [ D.5781 ])
                    (reg:SI 250 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 243 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 247 246 248 6 (parallel [
            (set (reg:SI 252 [ v$13 ])
                (rotatert:SI (reg:SI 428 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 428 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 248 247 249 6 (parallel [
            (set (reg:SI 254 [ v$8 ])
                (plus:SI (reg:SI 244 [ D.5781 ])
                    (reg:SI 252 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 244 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 249 248 250 6 (parallel [
            (set (reg:SI 429 [ D.5781 ])
                (xor:SI (reg:SI 247 [ D.5781 ])
                    (reg:SI 254 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 247 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 250 249 251 6 (parallel [
            (set (reg:SI 256 [ v$7 ])
                (rotatert:SI (reg:SI 429 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 429 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 251 250 252 6 (parallel [
            (set (reg:SI 430 [ D.5781 ])
                (xor:SI (reg:SI 349 [ D.5786 ])
                    (reg:SI 352 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 352 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 349 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 252 251 253 6 (parallel [
            (set (reg:SI 431 [ D.5781 ])
                (plus:SI (reg:SI 430 [ D.5781 ])
                    (reg:SI 200 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 430 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 200 [ D.5781 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 253 252 254 6 (parallel [
            (set (reg:SI 260 [ D.5781 ])
                (plus:SI (reg:SI 431 [ D.5781 ])
                    (reg:SI 157 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 431 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 254 253 255 6 (parallel [
            (set (reg:SI 432 [ D.5781 ])
                (xor:SI (reg:SI 186 [ D.5781 ])
                    (reg:SI 260 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 186 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 255 254 256 6 (parallel [
            (set (reg:SI 262 [ D.5781 ])
                (rotate:SI (reg:SI 432 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 586 {*rotlsi3_1}
     (expr_list:REG_DEAD (reg:SI 432 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 256 255 257 6 (parallel [
            (set (reg:SI 264 [ D.5781 ])
                (plus:SI (reg:SI 171 [ D.5781 ])
                    (reg:SI 262 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 171 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 257 256 258 6 (parallel [
            (set (reg:SI 433 [ D.5781 ])
                (xor:SI (reg:SI 157 [ D.5781 ])
                    (reg:SI 264 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 157 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 258 257 259 6 (parallel [
            (set (reg:SI 266 [ D.5781 ])
                (rotatert:SI (reg:SI 433 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 433 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 259 258 260 6 (parallel [
            (set (reg:SI 434 [ D.5781 ])
                (xor:SI (reg:SI 353 [ D.5786 ])
                    (reg:SI 354 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 354 [ D.5787 ])
        (expr_list:REG_DEAD (reg:SI 353 [ D.5786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 260 259 261 6 (parallel [
            (set (reg:SI 435 [ D.5781 ])
                (plus:SI (reg:SI 434 [ D.5781 ])
                    (reg:SI 260 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 434 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 260 [ D.5781 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 261 260 262 6 (parallel [
            (set (reg:SI 270 [ v$3 ])
                (plus:SI (reg:SI 435 [ D.5781 ])
                    (reg:SI 266 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 435 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 262 261 263 6 (parallel [
            (set (reg:SI 436 [ D.5781 ])
                (xor:SI (reg:SI 262 [ D.5781 ])
                    (reg:SI 270 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 262 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 263 262 264 6 (parallel [
            (set (reg:SI 273 [ v$14 ])
                (rotatert:SI (reg:SI 436 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 436 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 264 263 265 6 (parallel [
            (set (reg:SI 274 [ v$9 ])
                (plus:SI (reg:SI 264 [ D.5781 ])
                    (reg:SI 273 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 264 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 265 264 266 6 (parallel [
            (set (reg:SI 437 [ D.5781 ])
                (xor:SI (reg:SI 266 [ D.5781 ])
                    (reg:SI 274 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 266 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 266 265 267 6 (parallel [
            (set (reg:SI 276 [ v$4 ])
                (rotatert:SI (reg:SI 437 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 587 {*rotrsi3_1}
     (expr_list:REG_DEAD (reg:SI 437 [ D.5781 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(note 267 266 268 6 NOTE_INSN_DELETED)
(insn 268 267 269 6 (parallel [
            (set (reg:DI 281 [ ivtmp.77 ])
                (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 269 268 270 6 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:SI (reg:SI 113 [ D.5779 ])
                        (const_int -1 [0xffffffffffffffff]))
                    (const_int 0 [0])))
            (set (reg:SI 113 [ D.5779 ])
                (plus:SI (reg:SI 113 [ D.5779 ])
                    (const_int -1 [0xffffffffffffffff])))
        ]) blake_ref.c:76 225 {*addsi_2}
     (nil))
(jump_insn 270 269 271 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 372)
            (pc))) blake_ref.c:76 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 667 (nil)))
 -> 372)
;;  succ:       7 [93.3%]  (FALLTHRU)
;;              8 [6.7%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 281 356
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 281 356

;; basic block 7, loop depth 0, count 0, freq 8710, maybe hot
;;  prev block 6, next block 8, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [93.3%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u363(6){ }u364(7){ }u365(16){ }u366(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 281 356
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 281
;; lr  def 	 293 296 297 298 301 304 305 306 309 312 313 314 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354 438 439 440 444 446 450 452 456 458 462 464 468 470 474 476 480 482
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 281 356
;; live  gen 	 293 296 297 298 301 304 305 306 309 312 313 314 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354 438 439 440 444 446 450 452 456 458 462 464 468 470 474 476 480 482
;; live  kill	
(note 271 270 273 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 273 271 274 7 NOTE_INSN_DELETED)
(insn 274 273 275 7 (set (reg:DI 438 [ D.5782 ])
        (zero_extend:DI (mem:QI (reg:DI 281 [ ivtmp.77 ]) [0 MEM[base: _514, offset: 0B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 275 274 276 7 (set (reg:SI 293 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 438 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(note 276 275 277 7 NOTE_INSN_DELETED)
(insn 277 276 278 7 (set (reg/f:DI 439)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 278 277 279 7 (set (reg:DI 440 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 1 [0x1])) [0 MEM[base: _514, offset: 1B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 279 278 281 7 (set (reg:SI 296 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 440 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 440 [ D.5782 ])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 281 279 284 7 (set (reg:SI 297 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 440 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 440 [ D.5782 ])
        (nil)))
(insn 284 281 285 7 (set (reg:SI 298 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 438 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 438 [ D.5782 ])
        (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 438 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
            (nil))))
(note 285 284 286 7 NOTE_INSN_DELETED)
(insn 286 285 287 7 (set (reg:DI 444 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 2 [0x2])) [0 MEM[base: _514, offset: 2B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 287 286 288 7 (set (reg:SI 301 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 444 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(note 288 287 290 7 NOTE_INSN_DELETED)
(insn 290 288 291 7 (set (reg:DI 446 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 3 [0x3])) [0 MEM[base: _514, offset: 3B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 291 290 293 7 (set (reg:SI 304 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 446 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 446 [ D.5782 ])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 293 291 296 7 (set (reg:SI 305 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 446 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 446 [ D.5782 ])
        (nil)))
(insn 296 293 297 7 (set (reg:SI 306 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 444 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 444 [ D.5782 ])
        (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 444 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
            (nil))))
(note 297 296 298 7 NOTE_INSN_DELETED)
(insn 298 297 299 7 (set (reg:DI 450 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 4 [0x4])) [0 MEM[base: _514, offset: 4B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 299 298 300 7 (set (reg:SI 309 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 450 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(note 300 299 302 7 NOTE_INSN_DELETED)
(insn 302 300 303 7 (set (reg:DI 452 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 5 [0x5])) [0 MEM[base: _514, offset: 5B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 303 302 305 7 (set (reg:SI 312 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 452 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 452 [ D.5782 ])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 305 303 308 7 (set (reg:SI 313 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 452 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 452 [ D.5782 ])
        (nil)))
(insn 308 305 309 7 (set (reg:SI 314 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 450 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 450 [ D.5782 ])
        (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 450 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
            (nil))))
(note 309 308 310 7 NOTE_INSN_DELETED)
(insn 310 309 311 7 (set (reg:DI 456 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 6 [0x6])) [0 MEM[base: _514, offset: 6B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 311 310 312 7 (set (reg:SI 317 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 456 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(note 312 311 314 7 NOTE_INSN_DELETED)
(insn 314 312 315 7 (set (reg:DI 458 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 7 [0x7])) [0 MEM[base: _514, offset: 7B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 315 314 317 7 (set (reg:SI 320 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 458 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 458 [ D.5782 ])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 317 315 320 7 (set (reg:SI 321 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 458 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 458 [ D.5782 ])
        (nil)))
(insn 320 317 321 7 (set (reg:SI 322 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 456 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 456 [ D.5782 ])
        (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 456 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
            (nil))))
(note 321 320 322 7 NOTE_INSN_DELETED)
(insn 322 321 323 7 (set (reg:DI 462 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 8 [0x8])) [0 MEM[base: _514, offset: 8B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 323 322 324 7 (set (reg:SI 325 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 462 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(note 324 323 326 7 NOTE_INSN_DELETED)
(insn 326 324 327 7 (set (reg:DI 464 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 9 [0x9])) [0 MEM[base: _514, offset: 9B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 327 326 329 7 (set (reg:SI 328 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 464 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 464 [ D.5782 ])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 329 327 332 7 (set (reg:SI 329 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 464 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 464 [ D.5782 ])
        (nil)))
(insn 332 329 333 7 (set (reg:SI 330 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 462 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 462 [ D.5782 ])
        (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 462 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
            (nil))))
(note 333 332 334 7 NOTE_INSN_DELETED)
(insn 334 333 335 7 (set (reg:DI 468 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 10 [0xa])) [0 MEM[base: _514, offset: 10B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 335 334 336 7 (set (reg:SI 333 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 468 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(note 336 335 338 7 NOTE_INSN_DELETED)
(insn 338 336 339 7 (set (reg:DI 470 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 11 [0xb])) [0 MEM[base: _514, offset: 11B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 339 338 341 7 (set (reg:SI 336 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 470 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 470 [ D.5782 ])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 341 339 344 7 (set (reg:SI 337 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 470 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 470 [ D.5782 ])
        (nil)))
(insn 344 341 345 7 (set (reg:SI 338 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 468 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 468 [ D.5782 ])
        (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 468 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
            (nil))))
(note 345 344 346 7 NOTE_INSN_DELETED)
(insn 346 345 347 7 (set (reg:DI 474 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 12 [0xc])) [0 MEM[base: _514, offset: 12B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 347 346 348 7 (set (reg:SI 341 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 474 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(note 348 347 350 7 NOTE_INSN_DELETED)
(insn 350 348 351 7 (set (reg:DI 476 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 13 [0xd])) [0 MEM[base: _514, offset: 13B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 351 350 353 7 (set (reg:SI 344 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 476 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 476 [ D.5782 ])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 353 351 356 7 (set (reg:SI 345 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 476 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 476 [ D.5782 ])
        (nil)))
(insn 356 353 357 7 (set (reg:SI 346 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 474 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 474 [ D.5782 ])
        (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 474 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
            (nil))))
(note 357 356 358 7 NOTE_INSN_DELETED)
(insn 358 357 359 7 (set (reg:DI 480 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 14 [0xe])) [0 MEM[base: _514, offset: 14B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 359 358 360 7 (set (reg:SI 349 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 480 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(note 360 359 362 7 NOTE_INSN_DELETED)
(insn 362 360 363 7 (set (reg:DI 482 [ D.5782 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 15 [0xf])) [0 MEM[base: _514, offset: 15B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 363 362 365 7 (set (reg:SI 352 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 482 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 482 [ D.5782 ])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
        (nil)))
(insn 365 363 368 7 (set (reg:SI 353 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 482 [ D.5782 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 482 [ D.5782 ])
        (nil)))
(insn 368 365 422 7 (set (reg:SI 354 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 480 [ D.5782 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 480 [ D.5782 ])
        (expr_list:REG_DEAD (reg/f:DI 439)
            (expr_list:REG_EQUAL (mem/u:SI (plus:DI (mult:DI (reg:DI 480 [ D.5782 ])
                            (const_int 4 [0x4]))
                        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) [2 c32 S4 A32])
                (nil)))))
(jump_insn 422 368 423 7 (set (pc)
        (label_ref 369)) -1
     (nil)
 -> 369)
;;  succ:       6 [100.0%]  (DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 281 293 296 297 298 301 304 305 306 309 312 313 314 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354 356
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 281 293 296 297 298 301 304 305 306 309 312 313 314 317 320 321 322 325 328 329 330 333 336 337 338 341 344 345 346 349 352 353 354 356

(barrier 423 422 372)
;; basic block 8, loop depth 0, count 0, freq 667, maybe hot
;;  prev block 7, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       6 [6.7%]  (LOOP_EXIT)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u479(6){ }u480(7){ }u481(16){ }u482(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 356
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 356
;; lr  def 	 0 [ax] 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 511 512 513 514 515
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 129 130 131 132 133 134 135 136 137 138 139 206 217 219 220 222 233 235 238 250 252 254 256 270 273 274 276 356
;; live  gen 	 0 [ax] 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 511 512 513 514 515
;; live  kill	
(code_label 372 423 373 8 3 "" [1 uses])
(note 373 372 375 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 375 373 376 8 (set (reg:V2SI 487)
        (vec_concat:V2SI (reg:SI 250 [ v$2 ])
            (reg:SI 270 [ v$3 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 270 [ v$3 ])
        (expr_list:REG_DEAD (reg:SI 250 [ v$2 ])
            (nil))))
(insn 376 375 377 8 (set (reg:V2SI 488)
        (vec_concat:V2SI (reg:SI 217 [ v$0 ])
            (reg:SI 233 [ v$1 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 233 [ v$1 ])
        (expr_list:REG_DEAD (reg:SI 217 [ v$0 ])
            (nil))))
(insn 377 376 378 8 (set (reg:V4SI 486 [ vect_cst_.55 ])
        (vec_concat:V4SI (reg:V2SI 488)
            (reg:V2SI 487))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 488)
        (expr_list:REG_DEAD (reg:V2SI 487)
            (nil))))
(insn 378 377 379 8 (set (reg:V2SI 490)
        (vec_concat:V2SI (reg:SI 220 [ v$10 ])
            (reg:SI 206 [ v$11 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 220 [ v$10 ])
        (expr_list:REG_DEAD (reg:SI 206 [ v$11 ])
            (nil))))
(insn 379 378 380 8 (set (reg:V2SI 491)
        (vec_concat:V2SI (reg:SI 254 [ v$8 ])
            (reg:SI 274 [ v$9 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 274 [ v$9 ])
        (expr_list:REG_DEAD (reg:SI 254 [ v$8 ])
            (nil))))
(insn 380 379 381 8 (set (reg:V4SI 489 [ vect_cst_.58 ])
        (vec_concat:V4SI (reg:V2SI 491)
            (reg:V2SI 490))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 491)
        (expr_list:REG_DEAD (reg:V2SI 490)
            (nil))))
(insn 381 380 382 8 (set (reg:V4SI 492 [ D.5780 ])
        (xor:V4SI (reg:V4SI 486 [ vect_cst_.55 ])
            (reg:V4SI 489 [ vect_cst_.58 ]))) blake_ref.c:93 3431 {*xorv4si3}
     (expr_list:REG_DEAD (reg:V4SI 489 [ vect_cst_.58 ])
        (expr_list:REG_DEAD (reg:V4SI 486 [ vect_cst_.55 ])
            (nil))))
(insn 382 381 383 8 (set (reg:V2SI 494)
        (vec_concat:V2SI (reg:SI 138 [ D.5781 ])
            (reg:SI 139 [ D.5781 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 139 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 138 [ D.5781 ])
            (nil))))
(insn 383 382 384 8 (set (reg:V2SI 495)
        (vec_concat:V2SI (reg:SI 136 [ D.5781 ])
            (reg:SI 137 [ D.5781 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 137 [ D.5781 ])
        (expr_list:REG_DEAD (reg:SI 136 [ D.5781 ])
            (nil))))
(insn 384 383 385 8 (set (reg:V4SI 493 [ vect_cst_.52 ])
        (vec_concat:V4SI (reg:V2SI 495)
            (reg:V2SI 494))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 495)
        (expr_list:REG_DEAD (reg:V2SI 494)
            (nil))))
(insn 385 384 386 8 (set (reg:V4SI 496 [ D.5780 ])
        (xor:V4SI (reg:V4SI 492 [ D.5780 ])
            (reg:V4SI 493 [ vect_cst_.52 ]))) blake_ref.c:93 3431 {*xorv4si3}
     (expr_list:REG_DEAD (reg:V4SI 492 [ D.5780 ])
        (nil)))
(insn 386 385 387 8 (set (reg:V2SI 498)
        (vec_concat:V2SI (reg:SI 130 [ v$2 ])
            (reg:SI 131 [ v$3 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 131 [ v$3 ])
        (expr_list:REG_DEAD (reg:SI 130 [ v$2 ])
            (nil))))
(insn 387 386 388 8 (set (reg:V2SI 499)
        (vec_concat:V2SI (reg:SI 128 [ v$0 ])
            (reg:SI 129 [ v$1 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 129 [ v$1 ])
        (expr_list:REG_DEAD (reg:SI 128 [ v$0 ])
            (nil))))
(insn 388 387 389 8 (set (reg:V4SI 497 [ vect_cst_.50 ])
        (vec_concat:V4SI (reg:V2SI 499)
            (reg:V2SI 498))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 499)
        (expr_list:REG_DEAD (reg:V2SI 498)
            (nil))))
(insn 389 388 390 8 (set (reg:V4SI 500 [ vect__497.56 ])
        (xor:V4SI (reg:V4SI 496 [ D.5780 ])
            (reg:V4SI 497 [ vect_cst_.50 ]))) blake_ref.c:93 3431 {*xorv4si3}
     (expr_list:REG_DEAD (reg:V4SI 497 [ vect_cst_.50 ])
        (expr_list:REG_DEAD (reg:V4SI 496 [ D.5780 ])
            (nil))))
(insn 390 389 392 8 (set (mem:V16QI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 16 [0x10])) [2 MEM[(unsigned int *)state_246(D) + 16B]+0 S16 A32])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 500 [ vect__497.56 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:93 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V4SI 500 [ vect__497.56 ])
        (nil)))
(insn 392 390 393 8 (set (reg:V2SI 502)
        (vec_concat:V2SI (reg:SI 273 [ v$14 ])
            (reg:SI 219 [ v$15 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 273 [ v$14 ])
        (expr_list:REG_DEAD (reg:SI 219 [ v$15 ])
            (nil))))
(insn 393 392 394 8 (set (reg:V2SI 503)
        (vec_concat:V2SI (reg:SI 235 [ v$12 ])
            (reg:SI 252 [ v$13 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 252 [ v$13 ])
        (expr_list:REG_DEAD (reg:SI 235 [ v$12 ])
            (nil))))
(insn 394 393 395 8 (set (reg:V4SI 501 [ vect_cst_.54 ])
        (vec_concat:V4SI (reg:V2SI 503)
            (reg:V2SI 502))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 503)
        (expr_list:REG_DEAD (reg:V2SI 502)
            (nil))))
(insn 395 394 396 8 (set (reg:V2SI 505)
        (vec_concat:V2SI (reg:SI 238 [ v$6 ])
            (reg:SI 256 [ v$7 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 256 [ v$7 ])
        (expr_list:REG_DEAD (reg:SI 238 [ v$6 ])
            (nil))))
(insn 396 395 397 8 (set (reg:V2SI 506)
        (vec_concat:V2SI (reg:SI 276 [ v$4 ])
            (reg:SI 222 [ v$5 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 276 [ v$4 ])
        (expr_list:REG_DEAD (reg:SI 222 [ v$5 ])
            (nil))))
(insn 397 396 398 8 (set (reg:V4SI 504 [ vect_cst_.57 ])
        (vec_concat:V4SI (reg:V2SI 506)
            (reg:V2SI 505))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 506)
        (expr_list:REG_DEAD (reg:V2SI 505)
            (nil))))
(insn 398 397 402 8 (set (reg:V4SI 507 [ D.5780 ])
        (xor:V4SI (reg:V4SI 501 [ vect_cst_.54 ])
            (reg:V4SI 504 [ vect_cst_.57 ]))) blake_ref.c:93 3431 {*xorv4si3}
     (expr_list:REG_DEAD (reg:V4SI 504 [ vect_cst_.57 ])
        (expr_list:REG_DEAD (reg:V4SI 501 [ vect_cst_.54 ])
            (nil))))
(insn 402 398 403 8 (set (reg:V4SI 511 [ D.5780 ])
        (xor:V4SI (reg:V4SI 507 [ D.5780 ])
            (reg:V4SI 493 [ vect_cst_.52 ]))) blake_ref.c:93 3431 {*xorv4si3}
     (expr_list:REG_DEAD (reg:V4SI 507 [ D.5780 ])
        (expr_list:REG_DEAD (reg:V4SI 493 [ vect_cst_.52 ])
            (nil))))
(insn 403 402 404 8 (set (reg:V2SI 513)
        (vec_concat:V2SI (reg:SI 134 [ v$6 ])
            (reg:SI 135 [ v$7 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 135 [ v$7 ])
        (expr_list:REG_DEAD (reg:SI 134 [ v$6 ])
            (nil))))
(insn 404 403 405 8 (set (reg:V2SI 514)
        (vec_concat:V2SI (reg:SI 132 [ v$4 ])
            (reg:SI 133 [ v$5 ]))) 3671 {*vec_concatv2si}
     (expr_list:REG_DEAD (reg:SI 133 [ v$5 ])
        (expr_list:REG_DEAD (reg:SI 132 [ v$4 ])
            (nil))))
(insn 405 404 406 8 (set (reg:V4SI 512 [ vect_cst_.49 ])
        (vec_concat:V4SI (reg:V2SI 514)
            (reg:V2SI 513))) 3672 {*vec_concatv4si}
     (expr_list:REG_DEAD (reg:V2SI 514)
        (expr_list:REG_DEAD (reg:V2SI 513)
            (nil))))
(insn 406 405 407 8 (set (reg:V4SI 515 [ vect__497.56 ])
        (xor:V4SI (reg:V4SI 511 [ D.5780 ])
            (reg:V4SI 512 [ vect_cst_.49 ]))) blake_ref.c:93 3431 {*xorv4si3}
     (expr_list:REG_DEAD (reg:V4SI 512 [ vect_cst_.49 ])
        (expr_list:REG_DEAD (reg:V4SI 511 [ D.5780 ])
            (nil))))
(insn 407 406 412 8 (set (mem:V16QI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 32 [0x20])) [2 MEM[(unsigned int *)state_246(D) + 32B]+0 S16 A32])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 515 [ vect__497.56 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:93 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V4SI 515 [ vect__497.56 ])
        (expr_list:REG_DEAD (reg/v/f:DI 356 [ state ])
            (nil))))
(insn 412 407 413 8 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) blake_ref.c:103 90 {*movsi_internal}
     (nil))
(insn 413 412 0 8 (use (reg/i:SI 0 ax)) blake_ref.c:103 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function compress64 (compress64, funcdef_no=12, decl_uid=3221, cgraph_uid=12, symbol_order=20)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
verify found no changes in insn with uid = 407.
verify found no changes in insn with uid = 409.
ending the processing of deferred insns


compress64

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 17[flags]
;;  ref usage 	r0={1d,2u} r1={1d,1u} r2={1d,1u} r6={1d,8u} r7={1d,8u} r16={1d,7u,2e} r17={139d,2u} r20={1d,40u} r21={1d} r22={1d} r23={1d} r24={1d} r37={1d} r38={1d} r100={2d,2u} r119={1d,2u} r120={1d,2u} r121={1d,2u} r122={1d,2u} r123={1d,2u} r124={1d,2u} r125={1d,2u} r126={1d,2u} r127={1d,2u,1e} r128={1d,2u,1e} r129={1d,2u,1e} r130={1d,2u,1e} r132={1d,2u,2e} r133={1d,2u,2e} r135={1d,2u} r137={1d,2u} r138={1d,2u} r140={1d,2u} r143={1d,2u} r145={1d,2u} r146={1d,2u} r148={1d,2u} r151={1d,2u} r153={1d,2u} r154={1d,2u} r156={1d,2u} r159={1d,2u} r161={1d,2u} r162={1d,2u} r164={1d,2u} r167={1d,2u} r169={1d,2u} r170={1d,2u} r172={1d,2u} r175={1d,2u} r177={1d,2u} r178={1d,2u} r180={1d,2u} r183={1d,2u} r185={1d,2u} r186={1d,2u} r188={1d,2u} r191={1d,2u} r193={1d,2u} r194={1d,2u} r196={1d,2u} r197={2d,3u} r200={1d,2u} r202={1d,2u} r203={1d,2u} r205={1d,2u} r208={2d,3u} r210={3d,3u} r211={2d,3u} r214={2d,3u} r217={1d,2u} r219={1d,2u} r220={1d,2u} r222={1d,2u} r225={2d,3u} r227={3d,3u} r230={2d,3u} r233={1d,2u} r235={1d,2u} r236={1d,2u} r238={1d,2u} r241={2d,3u} r243={3d,3u} r244={2d,3u} r246={2d,3u} r250={1d,2u} r252={1d,2u} r253={1d,2u} r255={1d,2u} r258={2d,3u} r260={3d,3u} r262={2d,3u} r264={2d,3u} r269={2d,17u} r287={2d,2u} r290={2d,1u} r291={2d,2u} r292={2d,1u} r295={2d,2u} r298={2d,1u} r299={2d,2u} r300={2d,1u} r303={2d,2u} r306={2d,1u} r307={2d,2u} r308={2d,1u} r311={2d,2u} r314={2d,1u} r315={2d,2u} r316={2d,1u} r319={2d,2u} r322={2d,1u} r323={2d,2u} r324={2d,1u} r327={2d,2u} r330={2d,1u} r331={2d,2u} r332={2d,1u} r335={2d,2u} r338={2d,1u} r339={2d,2u} r340={2d,1u} r343={2d,2u} r346={2d,1u} r347={2d,2u} r348={2d,1u} r350={1d,19u} r351={1d,16u,15e} r352={1d,1u} r353={1d,1u} r354={1d,1u} r355={1d,1u} r356={1d,1u} r357={1d,1u} r358={1d,1u} r359={1d,1u} r360={1d,1u} r361={1d,1u} r362={1d,1u} r363={1d,1u} r364={1d,1u} r365={1d,1u} r366={1d,1u} r367={1d,1u} r368={1d,1u} r369={1d,1u} r370={1d,1u} r371={1d,1u} r372={1d,1u} r373={1d,1u} r374={1d,1u} r375={1d,1u} r376={1d,1u} r377={1d,1u} r378={1d,1u} r379={1d,1u} r380={1d,1u} r381={1d,1u} r382={1d,1u} r383={1d,1u} r384={1d,1u} r385={1d,1u} r386={1d,1u} r387={1d,1u} r388={1d,1u} r389={1d,1u} r390={1d,1u} r391={1d,1u} r392={1d,1u} r393={1d,1u} r394={1d,1u} r395={1d,1u} r396={1d,1u} r397={1d,1u} r398={1d,1u} r399={1d,1u} r400={1d,1u} r401={1d,1u} r402={1d,1u} r403={1d,1u} r404={1d,1u} r405={1d,1u} r406={1d,1u} r407={1d,1u} r408={1d,1u} r409={1d,1u} r410={1d,1u} r411={1d,1u} r412={1d,1u} r413={1d,1u} r414={1d,1u} r415={1d,1u} r416={1d,1u} r417={1d,1u} r418={1d,1u} r419={1d,1u} r420={1d,1u} r421={1d,1u} r422={1d,1u} r423={1d,1u} r424={1d,1u} r425={1d,1u} r426={1d,1u} r427={1d,1u} r428={1d,1u} r429={1d,1u} r430={1d,1u} r431={1d,1u} r432={1d,1u} r433={1d,1u} r434={1d,1u} r435={1d,1u} r436={1d,1u} r437={1d,1u} r438={1d,1u} r439={1d,1u} r440={1d,2u,1e} r441={1d,16u} r442={1d,2u,1e} r446={1d,2u,1e} r448={1d,2u,1e} r452={1d,2u,1e} r454={1d,2u,1e} r458={1d,2u,1e} r460={1d,2u,1e} r464={1d,2u,1e} r466={1d,2u,1e} r470={1d,2u,1e} r472={1d,2u,1e} r476={1d,2u,1e} r478={1d,2u,1e} r482={1d,2u,1e} r484={1d,2u,1e} r488={1d,1u} r489={1d,1u} r490={1d,1u} r491={1d,2u} r492={1d,1u} r493={1d,1u} r494={1d,1u} r495={1d,1u} r496={1d,1u} r497={1d,1u} r498={1d,2u} r499={1d,1u} r500={1d,1u} r501={1d,1u} r502={1d,1u} r503={1d,1u} r504={1d,1u} r506={1d,1u} r507={1d,1u} r508={1d,1u} r509={1d,1u} r510={1d,1u} r511={1d,1u} r513={1d,1u} r514={1d,1u} r515={1d,1u} 
;;    total ref usage 999{451d,507u,41e} in 326{326 regular + 0 call} insns.
(note 5 0 38 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 588, maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 119 120 121 122 123 124 125 126 127 128 129 130 197 211 244 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371
;; live  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  gen 	 17 [flags] 119 120 121 122 123 124 125 126 127 128 129 130 197 211 244 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371
;; live  kill	 17 [flags]
(note 38 5 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 6 38 7 2 (set (reg/v/f:DI 350 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:106 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ state ])
        (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
            (nil))))
(insn 7 6 8 2 (set (reg/v/f:DI 351 [ datablock ])
        (reg:DI 1 dx [ datablock ])) blake_ref.c:106 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ datablock ])
        (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [4 datablock+0 S8 A64])
            (nil))))
(note 8 7 40 2 NOTE_INSN_FUNCTION_BEG)
(insn 40 8 41 2 (set (reg:DI 352 [ MEM[(const BitSequence *)datablock_5(D)] ])
        (mem:DI (reg/v/f:DI 351 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:DI 287 [ D.5867 ])
        (bswap:DI (reg:DI 352 [ MEM[(const BitSequence *)datablock_5(D)] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 352 [ MEM[(const BitSequence *)datablock_5(D)] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/v/f:DI 351 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8]))
            (nil))))
(insn 42 41 43 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -128 [0xffffffffffffff80])) [3 m+0 S8 A128])
        (reg:DI 287 [ D.5867 ])) blake_ref.c:129 89 {*movdi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 353 [ MEM[(const BitSequence *)datablock_5(D) + 8B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 44 43 45 2 (set (reg:DI 291 [ D.5867 ])
        (bswap:DI (reg:DI 353 [ MEM[(const BitSequence *)datablock_5(D) + 8B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 353 [ MEM[(const BitSequence *)datablock_5(D) + 8B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8]))
            (nil))))
(insn 45 44 46 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -120 [0xffffffffffffff88])) [3 m+8 S8 A64])
        (reg:DI 291 [ D.5867 ])) blake_ref.c:130 89 {*movdi_internal}
     (nil))
(insn 46 45 47 2 (set (reg:DI 354 [ MEM[(const BitSequence *)datablock_5(D) + 16B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 47 46 48 2 (set (reg:DI 295 [ D.5867 ])
        (bswap:DI (reg:DI 354 [ MEM[(const BitSequence *)datablock_5(D) + 16B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 354 [ MEM[(const BitSequence *)datablock_5(D) + 16B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8]))
            (nil))))
(insn 48 47 49 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -112 [0xffffffffffffff90])) [3 m+16 S8 A128])
        (reg:DI 295 [ D.5867 ])) blake_ref.c:131 89 {*movdi_internal}
     (nil))
(insn 49 48 50 2 (set (reg:DI 355 [ MEM[(const BitSequence *)datablock_5(D) + 24B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:DI 299 [ D.5867 ])
        (bswap:DI (reg:DI 355 [ MEM[(const BitSequence *)datablock_5(D) + 24B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 355 [ MEM[(const BitSequence *)datablock_5(D) + 24B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8]))
            (nil))))
(insn 51 50 52 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [3 m+24 S8 A64])
        (reg:DI 299 [ D.5867 ])) blake_ref.c:132 89 {*movdi_internal}
     (nil))
(insn 52 51 53 2 (set (reg:DI 356 [ MEM[(const BitSequence *)datablock_5(D) + 32B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 53 52 54 2 (set (reg:DI 303 [ D.5867 ])
        (bswap:DI (reg:DI 356 [ MEM[(const BitSequence *)datablock_5(D) + 32B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 356 [ MEM[(const BitSequence *)datablock_5(D) + 32B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8]))
            (nil))))
(insn 54 53 55 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -96 [0xffffffffffffffa0])) [3 m+32 S8 A128])
        (reg:DI 303 [ D.5867 ])) blake_ref.c:133 89 {*movdi_internal}
     (nil))
(insn 55 54 56 2 (set (reg:DI 357 [ MEM[(const BitSequence *)datablock_5(D) + 40B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 56 55 57 2 (set (reg:DI 307 [ D.5867 ])
        (bswap:DI (reg:DI 357 [ MEM[(const BitSequence *)datablock_5(D) + 40B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 357 [ MEM[(const BitSequence *)datablock_5(D) + 40B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8]))
            (nil))))
(insn 57 56 58 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -88 [0xffffffffffffffa8])) [3 m+40 S8 A64])
        (reg:DI 307 [ D.5867 ])) blake_ref.c:134 89 {*movdi_internal}
     (nil))
(insn 58 57 59 2 (set (reg:DI 358 [ MEM[(const BitSequence *)datablock_5(D) + 48B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 59 58 60 2 (set (reg:DI 311 [ D.5867 ])
        (bswap:DI (reg:DI 358 [ MEM[(const BitSequence *)datablock_5(D) + 48B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 358 [ MEM[(const BitSequence *)datablock_5(D) + 48B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8]))
            (nil))))
(insn 60 59 61 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [3 m+48 S8 A128])
        (reg:DI 311 [ D.5867 ])) blake_ref.c:135 89 {*movdi_internal}
     (nil))
(insn 61 60 62 2 (set (reg:DI 359 [ MEM[(const BitSequence *)datablock_5(D) + 56B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 62 61 63 2 (set (reg:DI 315 [ D.5867 ])
        (bswap:DI (reg:DI 359 [ MEM[(const BitSequence *)datablock_5(D) + 56B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 359 [ MEM[(const BitSequence *)datablock_5(D) + 56B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8]))
            (nil))))
(insn 63 62 64 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [3 m+56 S8 A64])
        (reg:DI 315 [ D.5867 ])) blake_ref.c:136 89 {*movdi_internal}
     (nil))
(insn 64 63 65 2 (set (reg:DI 360 [ MEM[(const BitSequence *)datablock_5(D) + 64B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 65 64 66 2 (set (reg:DI 319 [ D.5867 ])
        (bswap:DI (reg:DI 360 [ MEM[(const BitSequence *)datablock_5(D) + 64B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 360 [ MEM[(const BitSequence *)datablock_5(D) + 64B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8]))
            (nil))))
(insn 66 65 67 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [3 m+64 S8 A128])
        (reg:DI 319 [ D.5867 ])) blake_ref.c:137 89 {*movdi_internal}
     (nil))
(insn 67 66 68 2 (set (reg:DI 361 [ MEM[(const BitSequence *)datablock_5(D) + 72B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 68 67 69 2 (set (reg:DI 323 [ D.5867 ])
        (bswap:DI (reg:DI 361 [ MEM[(const BitSequence *)datablock_5(D) + 72B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 361 [ MEM[(const BitSequence *)datablock_5(D) + 72B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8]))
            (nil))))
(insn 69 68 70 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [3 m+72 S8 A64])
        (reg:DI 323 [ D.5867 ])) blake_ref.c:138 89 {*movdi_internal}
     (nil))
(insn 70 69 71 2 (set (reg:DI 362 [ MEM[(const BitSequence *)datablock_5(D) + 80B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 71 70 72 2 (set (reg:DI 327 [ D.5867 ])
        (bswap:DI (reg:DI 362 [ MEM[(const BitSequence *)datablock_5(D) + 80B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 362 [ MEM[(const BitSequence *)datablock_5(D) + 80B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8]))
            (nil))))
(insn 72 71 73 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [3 m+80 S8 A128])
        (reg:DI 327 [ D.5867 ])) blake_ref.c:139 89 {*movdi_internal}
     (nil))
(insn 73 72 74 2 (set (reg:DI 363 [ MEM[(const BitSequence *)datablock_5(D) + 88B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 74 73 75 2 (set (reg:DI 331 [ D.5867 ])
        (bswap:DI (reg:DI 363 [ MEM[(const BitSequence *)datablock_5(D) + 88B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 363 [ MEM[(const BitSequence *)datablock_5(D) + 88B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8]))
            (nil))))
(insn 75 74 76 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 m+88 S8 A64])
        (reg:DI 331 [ D.5867 ])) blake_ref.c:140 89 {*movdi_internal}
     (nil))
(insn 76 75 77 2 (set (reg:DI 364 [ MEM[(const BitSequence *)datablock_5(D) + 96B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 77 76 78 2 (set (reg:DI 335 [ D.5867 ])
        (bswap:DI (reg:DI 364 [ MEM[(const BitSequence *)datablock_5(D) + 96B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 364 [ MEM[(const BitSequence *)datablock_5(D) + 96B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8]))
            (nil))))
(insn 78 77 79 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 m+96 S8 A128])
        (reg:DI 335 [ D.5867 ])) blake_ref.c:141 89 {*movdi_internal}
     (nil))
(insn 79 78 80 2 (set (reg:DI 365 [ MEM[(const BitSequence *)datablock_5(D) + 104B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 80 79 81 2 (set (reg:DI 339 [ D.5867 ])
        (bswap:DI (reg:DI 365 [ MEM[(const BitSequence *)datablock_5(D) + 104B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 365 [ MEM[(const BitSequence *)datablock_5(D) + 104B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8]))
            (nil))))
(insn 81 80 82 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 m+104 S8 A64])
        (reg:DI 339 [ D.5867 ])) blake_ref.c:142 89 {*movdi_internal}
     (nil))
(insn 82 81 83 2 (set (reg:DI 366 [ MEM[(const BitSequence *)datablock_5(D) + 112B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 83 82 84 2 (set (reg:DI 343 [ D.5867 ])
        (bswap:DI (reg:DI 366 [ MEM[(const BitSequence *)datablock_5(D) + 112B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 366 [ MEM[(const BitSequence *)datablock_5(D) + 112B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                        (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8]))
            (nil))))
(insn 84 83 85 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 m+112 S8 A128])
        (reg:DI 343 [ D.5867 ])) blake_ref.c:143 89 {*movdi_internal}
     (nil))
(insn 85 84 86 2 (set (reg:DI 367 [ MEM[(const BitSequence *)datablock_5(D) + 120B] ])
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 120 [0x78])) [0 MEM[(const BitSequence *)datablock_5(D) + 120B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 351 [ datablock ])
        (nil)))
(insn 86 85 87 2 (set (reg:DI 347 [ D.5867 ])
        (bswap:DI (reg:DI 367 [ MEM[(const BitSequence *)datablock_5(D) + 120B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 367 [ MEM[(const BitSequence *)datablock_5(D) + 120B] ])
        (nil)))
(insn 87 86 88 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 m+120 S8 A64])
        (reg:DI 347 [ D.5867 ])) blake_ref.c:144 89 {*movdi_internal}
     (nil))
(insn 88 87 89 2 (set (reg:DI 119 [ v$0 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 136 [0x88])) [3 state_534(D)->h64+0 S8 A64])) blake_ref.c:147 89 {*movdi_internal}
     (nil))
(insn 89 88 90 2 (set (reg:DI 120 [ v$1 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 144 [0x90])) [3 state_534(D)->h64+8 S8 A64])) blake_ref.c:148 89 {*movdi_internal}
     (nil))
(insn 90 89 91 2 (set (reg:DI 121 [ v$2 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 152 [0x98])) [3 state_534(D)->h64+16 S8 A64])) blake_ref.c:149 89 {*movdi_internal}
     (nil))
(insn 91 90 92 2 (set (reg:DI 122 [ v$3 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 160 [0xa0])) [3 state_534(D)->h64+24 S8 A64])) blake_ref.c:150 89 {*movdi_internal}
     (nil))
(insn 92 91 93 2 (set (reg:DI 123 [ v$4 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 168 [0xa8])) [3 state_534(D)->h64+32 S8 A64])) blake_ref.c:151 89 {*movdi_internal}
     (nil))
(insn 93 92 94 2 (set (reg:DI 124 [ v$5 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 176 [0xb0])) [3 state_534(D)->h64+40 S8 A64])) blake_ref.c:152 89 {*movdi_internal}
     (nil))
(insn 94 93 95 2 (set (reg:DI 125 [ v$6 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 184 [0xb8])) [3 state_534(D)->h64+48 S8 A64])) blake_ref.c:153 89 {*movdi_internal}
     (nil))
(insn 95 94 96 2 (set (reg:DI 126 [ v$7 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 192 [0xc0])) [3 state_534(D)->h64+56 S8 A64])) blake_ref.c:154 89 {*movdi_internal}
     (nil))
(insn 96 95 97 2 (set (reg:DI 127 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 344 [0x158])) [3 state_534(D)->salt64+0 S8 A64])) blake_ref.c:155 89 {*movdi_internal}
     (nil))
(insn 97 96 98 2 (set (reg:DI 368)
        (const_int 2611923443488327891 [0x243f6a8885a308d3])) blake_ref.c:155 89 {*movdi_internal}
     (nil))
(insn 98 97 99 2 (parallel [
            (set (reg:DI 244 [ v$8 ])
                (xor:DI (reg:DI 127 [ D.5863 ])
                    (reg:DI 368)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:155 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 368)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (xor:DI (reg:DI 127 [ D.5863 ])
                    (const_int 2611923443488327891 [0x243f6a8885a308d3]))
                (nil)))))
(insn 99 98 100 2 (set (reg:DI 128 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 352 [0x160])) [3 state_534(D)->salt64+8 S8 A64])) blake_ref.c:156 89 {*movdi_internal}
     (nil))
(insn 100 99 101 2 (set (reg:DI 369)
        (const_int 1376283091369227076 [0x13198a2e03707344])) blake_ref.c:156 89 {*movdi_internal}
     (nil))
(insn 101 100 102 2 (parallel [
            (set (reg:DI 262 [ v$9 ])
                (xor:DI (reg:DI 128 [ D.5863 ])
                    (reg:DI 369)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:156 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 369)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (xor:DI (reg:DI 128 [ D.5863 ])
                    (const_int 1376283091369227076 [0x13198a2e03707344]))
                (nil)))))
(insn 102 101 103 2 (set (reg:DI 129 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 360 [0x168])) [3 state_534(D)->salt64+16 S8 A64])) blake_ref.c:157 89 {*movdi_internal}
     (nil))
(insn 103 102 104 2 (set (reg:DI 370)
        (const_int -6626703657320631856 [0xa4093822299f31d0])) blake_ref.c:157 89 {*movdi_internal}
     (nil))
(insn 104 103 105 2 (parallel [
            (set (reg:DI 211 [ v$10 ])
                (xor:DI (reg:DI 129 [ D.5863 ])
                    (reg:DI 370)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:157 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 370)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (xor:DI (reg:DI 129 [ D.5863 ])
                    (const_int -6626703657320631856 [0xa4093822299f31d0]))
                (nil)))))
(insn 105 104 106 2 (set (reg:DI 130 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 368 [0x170])) [3 state_534(D)->salt64+24 S8 A64])) blake_ref.c:158 89 {*movdi_internal}
     (nil))
(insn 106 105 107 2 (set (reg:DI 371)
        (const_int 589684135938649225 [0x82efa98ec4e6c89])) blake_ref.c:158 89 {*movdi_internal}
     (nil))
(insn 107 106 108 2 (parallel [
            (set (reg:DI 197 [ v$11 ])
                (xor:DI (reg:DI 130 [ D.5863 ])
                    (reg:DI 371)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:158 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 371)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (xor:DI (reg:DI 130 [ D.5863 ])
                    (const_int 589684135938649225 [0x82efa98ec4e6c89]))
                (nil)))))
(insn 108 107 109 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 350 [ state ])
                    (const_int 12 [0xc])) [2 state_534(D)->nullt+0 S4 A32])
            (const_int 0 [0]))) blake_ref.c:159 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 109 108 110 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 406)
            (pc))) blake_ref.c:159 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 406)
;;  succ:       4 [50.0%] 
;;              3 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 211 244 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 211 244 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350

;; basic block 3, loop depth 0, count 0, freq 294, maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u113(6){ }u114(7){ }u115(16){ }u116(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 211 244 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 350
;; lr  def 	 17 [flags] 132 133 210 227 243 260 372 373 374 375
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 211 244 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350
;; live  gen 	 132 133 210 227 243 260 372 373 374 375
;; live  kill	 17 [flags]
(note 110 109 111 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 3 (set (reg:DI 132 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 200 [0xc8])) [3 state_534(D)->t64+0 S8 A64])) blake_ref.c:166 89 {*movdi_internal}
     (nil))
(insn 112 111 113 3 (set (reg:DI 372)
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:166 89 {*movdi_internal}
     (nil))
(insn 113 112 114 3 (parallel [
            (set (reg:DI 227 [ v$12 ])
                (xor:DI (reg:DI 132 [ D.5863 ])
                    (reg:DI 372)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:166 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 372)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (xor:DI (reg:DI 132 [ D.5863 ])
                    (const_int 4983270260364809079 [0x452821e638d01377]))
                (nil)))))
(insn 114 113 115 3 (set (reg:DI 373)
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:167 89 {*movdi_internal}
     (nil))
(insn 115 114 116 3 (parallel [
            (set (reg:DI 243 [ v$13 ])
                (xor:DI (reg:DI 132 [ D.5863 ])
                    (reg:DI 373)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:167 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 373)
        (expr_list:REG_DEAD (reg:DI 132 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (xor:DI (reg:DI 132 [ D.5863 ])
                        (const_int -4732044268327596948 [0xbe5466cf34e90c6c]))
                    (nil))))))
(insn 116 115 117 3 (set (reg:DI 133 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 208 [0xd0])) [3 state_534(D)->t64+8 S8 A64])) blake_ref.c:168 89 {*movdi_internal}
     (nil))
(insn 117 116 118 3 (set (reg:DI 374)
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:168 89 {*movdi_internal}
     (nil))
(insn 118 117 119 3 (parallel [
            (set (reg:DI 260 [ v$14 ])
                (xor:DI (reg:DI 133 [ D.5863 ])
                    (reg:DI 374)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:168 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 374)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (xor:DI (reg:DI 133 [ D.5863 ])
                    (const_int -4563226453097033507 [0xc0ac29b7c97c50dd]))
                (nil)))))
(insn 119 118 120 3 (set (reg:DI 375)
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:169 89 {*movdi_internal}
     (nil))
(insn 120 119 407 3 (parallel [
            (set (reg:DI 210 [ v$15 ])
                (xor:DI (reg:DI 133 [ D.5863 ])
                    (reg:DI 375)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:169 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 375)
        (expr_list:REG_DEAD (reg:DI 133 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (xor:DI (reg:DI 133 [ D.5863 ])
                        (const_int 4577018097722394903 [0x3f84d5b5b5470917]))
                    (nil))))))
(jump_insn 407 120 408 3 (set (pc)
        (label_ref 121)) -1
     (nil)
 -> 121)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 210 211 227 243 244 260 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 210 211 227 243 244 260 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350

(barrier 408 407 406)
;; basic block 4, loop depth 0, count 0, freq 294, maybe hot
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u131(6){ }u132(7){ }u133(16){ }u134(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 211 244 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 210 227 243 260
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 211 244 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350
;; live  gen 	 210 227 243 260
;; live  kill	
(code_label 406 408 405 4 12 "" [1 uses])
(note 405 406 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 405 10 4 (set (reg:DI 210 [ v$15 ])
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:163 89 {*movdi_internal}
     (nil))
(insn 10 9 11 4 (set (reg:DI 260 [ v$14 ])
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:162 89 {*movdi_internal}
     (nil))
(insn 11 10 12 4 (set (reg:DI 243 [ v$13 ])
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:161 89 {*movdi_internal}
     (nil))
(insn 12 11 121 4 (set (reg:DI 227 [ v$12 ])
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 210 211 227 243 244 260 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 210 211 227 243 244 260 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350

;; basic block 5, loop depth 0, count 0, freq 590, maybe hot
;;  prev block 4, next block 6, flags: (HOT_PARTITION, RTL)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u135(6){ }u136(7){ }u137(16){ }u138(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 210 211 227 243 244 260 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126
;; lr  def 	 100 208 214 225 230 241 246 258 264 269 290 292 298 300 306 308 314 316 322 324 330 332 338 340 346 348
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 210 211 227 243 244 260 262 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 350
;; live  gen 	 100 208 214 225 230 241 246 258 264 269 290 292 298 300 306 308 314 316 322 324 330 332 338 340 346 348
;; live  kill	
(code_label 121 12 122 5 9 "" [1 uses])
(note 122 121 123 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 13 5 (set (reg:DI 269 [ ivtmp.149 ])
        (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)) 89 {*movdi_internal}
     (nil))
(insn 13 123 14 5 (set (reg:DI 208 [ v$0 ])
        (reg:DI 119 [ v$0 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 14 13 15 5 (set (reg:DI 225 [ v$1 ])
        (reg:DI 120 [ v$1 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 15 14 16 5 (set (reg:DI 241 [ v$2 ])
        (reg:DI 121 [ v$2 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 16 15 17 5 (set (reg:DI 258 [ v$3 ])
        (reg:DI 122 [ v$3 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 17 16 18 5 (set (reg:DI 264 [ v$4 ])
        (reg:DI 123 [ v$4 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 18 17 19 5 (set (reg:DI 214 [ v$5 ])
        (reg:DI 124 [ v$5 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 19 18 20 5 (set (reg:DI 230 [ v$6 ])
        (reg:DI 125 [ v$6 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 20 19 21 5 (set (reg:DI 246 [ v$7 ])
        (reg:DI 126 [ v$7 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 21 20 22 5 (set (reg:SI 100 [ D.5861 ])
        (const_int 16 [0x10])) blake_ref.c:160 90 {*movsi_internal}
     (nil))
(insn 22 21 23 5 (set (reg:DI 348 [ D.5868 ])
        (const_int 577009281997405206 [0x801f2e2858efc16])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 23 22 24 5 (set (reg:DI 346 [ D.5868 ])
        (const_int 7163292796296056425 [0x636920d871574e69])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 24 23 25 5 (set (reg:DI 340 [ D.5868 ])
        (const_int -5008970055469465703 [0xba7c9045f12c7f99])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 25 24 26 5 (set (reg:DI 338 [ D.5868 ])
        (const_int 2639559389850201335 [0x24a19947b3916cf7])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 26 25 27 5 (set (reg:DI 332 [ D.5868 ])
        (const_int 3458046377305235383 [0x2ffd72dbd01adfb7])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 27 26 28 5 (set (reg:DI 330 [ D.5868 ])
        (const_int -5124621466747896170 [0xb8e1afed6a267e96])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:DI 324 [ D.5868 ])
        (const_int -7919907764393346277 [0x9216d5d98979fb1b])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:DI 322 [ D.5868 ])
        (const_int -3372901835766516308 [0xd1310ba698dfb5ac])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:DI 316 [ D.5868 ])
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:DI 314 [ D.5868 ])
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:DI 308 [ D.5868 ])
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 306 [ D.5868 ])
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:DI 300 [ D.5868 ])
        (const_int -6626703657320631856 [0xa4093822299f31d0])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:DI 298 [ D.5868 ])
        (const_int 589684135938649225 [0x82efa98ec4e6c89])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:DI 292 [ D.5868 ])
        (const_int 2611923443488327891 [0x243f6a8885a308d3])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 37 36 355 5 (set (reg:DI 290 [ D.5868 ])
        (const_int 1376283091369227076 [0x13198a2e03707344])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 269 287 290 291 292 295 298 299 300 303 306 307 308 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348 350
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 269 287 290 291 292 295 298 299 300 303 306 307 308 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348 350

;; basic block 6, loop depth 0, count 0, freq 9412, maybe hot
;;  prev block 5, next block 7, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              7 [100.0%]  (DFS_BACK)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u147(6){ }u148(7){ }u149(16){ }u150(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 269 287 290 291 292 295 298 299 300 303 306 307 308 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348 350
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 269 287 290 291 292 295 298 299 300 303 306 307 308 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348
;; lr  def 	 17 [flags
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 269 287 290 291 292 295 298 299 300 303 306 307 308 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348 350
;; live  gen 	 17 [flags
;; live  kill	 17 [flags]
(code_label 355 37 124 6 11 "" [1 uses])
(note 124 355 125 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 6 (parallel [
            (set (reg:DI 376 [ D.5863 ])
                (xor:DI (reg:DI 287 [ D.5867 ])
                    (reg:DI 290 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 290 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 287 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 126 125 127 6 (parallel [
            (set (reg:DI 377 [ D.5863 ])
                (plus:DI (reg:DI 376 [ D.5863 ])
                    (reg:DI 264 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 376 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 127 126 128 6 (parallel [
            (set (reg:DI 135 [ D.5863 ])
                (plus:DI (reg:DI 377 [ D.5863 ])
                    (reg:DI 208 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 377 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 208 [ v$0 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 128 127 129 6 (parallel [
            (set (reg:DI 378 [ D.5863 ])
                (xor:DI (reg:DI 135 [ D.5863 ])
                    (reg:DI 227 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 227 [ v$12 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 129 128 130 6 (parallel [
            (set (reg:DI 137 [ D.5863 ])
                (rotate:DI (reg:DI 378 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 588 {*rotldi3_1}
     (expr_list:REG_DEAD (reg:DI 378 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 130 129 131 6 (parallel [
            (set (reg:DI 138 [ D.5863 ])
                (plus:DI (reg:DI 137 [ D.5863 ])
                    (reg:DI 244 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 244 [ v$8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 131 130 132 6 (parallel [
            (set (reg:DI 379 [ D.5863 ])
                (xor:DI (reg:DI 138 [ D.5863 ])
                    (reg:DI 264 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 264 [ v$4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 132 131 133 6 (parallel [
            (set (reg:DI 140 [ D.5863 ])
                (rotatert:DI (reg:DI 379 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 379 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 133 132 134 6 (parallel [
            (set (reg:DI 380 [ D.5863 ])
                (xor:DI (reg:DI 291 [ D.5867 ])
                    (reg:DI 292 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 292 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 291 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 134 133 135 6 (parallel [
            (set (reg:DI 381 [ D.5863 ])
                (plus:DI (reg:DI 380 [ D.5863 ])
                    (reg:DI 135 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 380 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 135 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 135 134 136 6 (parallel [
            (set (reg:DI 143 [ D.5863 ])
                (plus:DI (reg:DI 381 [ D.5863 ])
                    (reg:DI 140 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 381 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 136 135 137 6 (parallel [
            (set (reg:DI 382 [ D.5863 ])
                (xor:DI (reg:DI 137 [ D.5863 ])
                    (reg:DI 143 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 137 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 137 136 138 6 (parallel [
            (set (reg:DI 145 [ D.5863 ])
                (rotatert:DI (reg:DI 382 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 382 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 138 137 139 6 (parallel [
            (set (reg:DI 146 [ D.5863 ])
                (plus:DI (reg:DI 138 [ D.5863 ])
                    (reg:DI 145 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 138 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 139 138 140 6 (parallel [
            (set (reg:DI 383 [ D.5863 ])
                (xor:DI (reg:DI 140 [ D.5863 ])
                    (reg:DI 146 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 140 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 140 139 141 6 (parallel [
            (set (reg:DI 148 [ D.5863 ])
                (rotatert:DI (reg:DI 383 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 383 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 141 140 142 6 (parallel [
            (set (reg:DI 384 [ D.5863 ])
                (xor:DI (reg:DI 295 [ D.5867 ])
                    (reg:DI 298 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 298 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 295 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 142 141 143 6 (parallel [
            (set (reg:DI 385 [ D.5863 ])
                (plus:DI (reg:DI 384 [ D.5863 ])
                    (reg:DI 214 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 384 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 143 142 144 6 (parallel [
            (set (reg:DI 151 [ D.5863 ])
                (plus:DI (reg:DI 385 [ D.5863 ])
                    (reg:DI 225 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 385 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 225 [ v$1 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 144 143 145 6 (parallel [
            (set (reg:DI 386 [ D.5863 ])
                (xor:DI (reg:DI 151 [ D.5863 ])
                    (reg:DI 243 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 243 [ v$13 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 145 144 146 6 (parallel [
            (set (reg:DI 153 [ D.5863 ])
                (rotate:DI (reg:DI 386 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 588 {*rotldi3_1}
     (expr_list:REG_DEAD (reg:DI 386 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 146 145 147 6 (parallel [
            (set (reg:DI 154 [ D.5863 ])
                (plus:DI (reg:DI 153 [ D.5863 ])
                    (reg:DI 262 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 262 [ v$9 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 147 146 148 6 (parallel [
            (set (reg:DI 387 [ D.5863 ])
                (xor:DI (reg:DI 154 [ D.5863 ])
                    (reg:DI 214 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 214 [ v$5 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 148 147 149 6 (parallel [
            (set (reg:DI 156 [ D.5863 ])
                (rotatert:DI (reg:DI 387 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 387 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 149 148 150 6 (parallel [
            (set (reg:DI 388 [ D.5863 ])
                (xor:DI (reg:DI 299 [ D.5867 ])
                    (reg:DI 300 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 300 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 299 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 150 149 151 6 (parallel [
            (set (reg:DI 389 [ D.5863 ])
                (plus:DI (reg:DI 388 [ D.5863 ])
                    (reg:DI 151 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 388 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 151 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 151 150 152 6 (parallel [
            (set (reg:DI 159 [ D.5863 ])
                (plus:DI (reg:DI 389 [ D.5863 ])
                    (reg:DI 156 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 389 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 152 151 153 6 (parallel [
            (set (reg:DI 390 [ D.5863 ])
                (xor:DI (reg:DI 153 [ D.5863 ])
                    (reg:DI 159 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 153 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 153 152 154 6 (parallel [
            (set (reg:DI 161 [ D.5863 ])
                (rotatert:DI (reg:DI 390 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 390 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 154 153 155 6 (parallel [
            (set (reg:DI 162 [ D.5863 ])
                (plus:DI (reg:DI 154 [ D.5863 ])
                    (reg:DI 161 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 154 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 155 154 156 6 (parallel [
            (set (reg:DI 391 [ D.5863 ])
                (xor:DI (reg:DI 156 [ D.5863 ])
                    (reg:DI 162 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 156 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 156 155 157 6 (parallel [
            (set (reg:DI 164 [ D.5863 ])
                (rotatert:DI (reg:DI 391 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 391 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 157 156 158 6 (parallel [
            (set (reg:DI 392 [ D.5863 ])
                (xor:DI (reg:DI 303 [ D.5867 ])
                    (reg:DI 306 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 306 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 303 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 158 157 159 6 (parallel [
            (set (reg:DI 393 [ D.5863 ])
                (plus:DI (reg:DI 392 [ D.5863 ])
                    (reg:DI 230 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 392 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 159 158 160 6 (parallel [
            (set (reg:DI 167 [ D.5863 ])
                (plus:DI (reg:DI 393 [ D.5863 ])
                    (reg:DI 241 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 393 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 241 [ v$2 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 160 159 161 6 (parallel [
            (set (reg:DI 394 [ D.5863 ])
                (xor:DI (reg:DI 167 [ D.5863 ])
                    (reg:DI 260 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 260 [ v$14 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 161 160 162 6 (parallel [
            (set (reg:DI 169 [ D.5863 ])
                (rotate:DI (reg:DI 394 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 588 {*rotldi3_1}
     (expr_list:REG_DEAD (reg:DI 394 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 162 161 163 6 (parallel [
            (set (reg:DI 170 [ D.5863 ])
                (plus:DI (reg:DI 169 [ D.5863 ])
                    (reg:DI 211 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 211 [ v$10 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 163 162 164 6 (parallel [
            (set (reg:DI 395 [ D.5863 ])
                (xor:DI (reg:DI 170 [ D.5863 ])
                    (reg:DI 230 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 230 [ v$6 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 164 163 165 6 (parallel [
            (set (reg:DI 172 [ D.5863 ])
                (rotatert:DI (reg:DI 395 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 395 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 165 164 166 6 (parallel [
            (set (reg:DI 396 [ D.5863 ])
                (xor:DI (reg:DI 307 [ D.5867 ])
                    (reg:DI 308 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 308 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 307 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 166 165 167 6 (parallel [
            (set (reg:DI 397 [ D.5863 ])
                (plus:DI (reg:DI 396 [ D.5863 ])
                    (reg:DI 167 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 396 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 167 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 167 166 168 6 (parallel [
            (set (reg:DI 175 [ D.5863 ])
                (plus:DI (reg:DI 397 [ D.5863 ])
                    (reg:DI 172 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 397 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 168 167 169 6 (parallel [
            (set (reg:DI 398 [ D.5863 ])
                (xor:DI (reg:DI 169 [ D.5863 ])
                    (reg:DI 175 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 169 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 169 168 170 6 (parallel [
            (set (reg:DI 177 [ D.5863 ])
                (rotatert:DI (reg:DI 398 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 398 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 170 169 171 6 (parallel [
            (set (reg:DI 178 [ D.5863 ])
                (plus:DI (reg:DI 170 [ D.5863 ])
                    (reg:DI 177 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 170 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 171 170 172 6 (parallel [
            (set (reg:DI 399 [ D.5863 ])
                (xor:DI (reg:DI 172 [ D.5863 ])
                    (reg:DI 178 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 172 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 172 171 173 6 (parallel [
            (set (reg:DI 180 [ D.5863 ])
                (rotatert:DI (reg:DI 399 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 399 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 173 172 174 6 (parallel [
            (set (reg:DI 400 [ D.5863 ])
                (xor:DI (reg:DI 311 [ D.5867 ])
                    (reg:DI 314 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 314 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 311 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 174 173 175 6 (parallel [
            (set (reg:DI 401 [ D.5863 ])
                (plus:DI (reg:DI 400 [ D.5863 ])
                    (reg:DI 246 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 400 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 175 174 176 6 (parallel [
            (set (reg:DI 183 [ D.5863 ])
                (plus:DI (reg:DI 401 [ D.5863 ])
                    (reg:DI 258 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 401 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 258 [ v$3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 176 175 177 6 (parallel [
            (set (reg:DI 402 [ D.5863 ])
                (xor:DI (reg:DI 183 [ D.5863 ])
                    (reg:DI 210 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 210 [ v$15 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 177 176 178 6 (parallel [
            (set (reg:DI 185 [ D.5863 ])
                (rotate:DI (reg:DI 402 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 588 {*rotldi3_1}
     (expr_list:REG_DEAD (reg:DI 402 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 178 177 179 6 (parallel [
            (set (reg:DI 186 [ D.5863 ])
                (plus:DI (reg:DI 185 [ D.5863 ])
                    (reg:DI 197 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 197 [ v$11 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 179 178 180 6 (parallel [
            (set (reg:DI 403 [ D.5863 ])
                (xor:DI (reg:DI 186 [ D.5863 ])
                    (reg:DI 246 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 246 [ v$7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 180 179 181 6 (parallel [
            (set (reg:DI 188 [ D.5863 ])
                (rotatert:DI (reg:DI 403 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 403 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 181 180 182 6 (parallel [
            (set (reg:DI 404 [ D.5863 ])
                (xor:DI (reg:DI 315 [ D.5867 ])
                    (reg:DI 316 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 316 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 315 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 182 181 183 6 (parallel [
            (set (reg:DI 405 [ D.5863 ])
                (plus:DI (reg:DI 404 [ D.5863 ])
                    (reg:DI 183 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 404 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 183 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 183 182 184 6 (parallel [
            (set (reg:DI 191 [ D.5863 ])
                (plus:DI (reg:DI 405 [ D.5863 ])
                    (reg:DI 188 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 405 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 184 183 185 6 (parallel [
            (set (reg:DI 406 [ D.5863 ])
                (xor:DI (reg:DI 185 [ D.5863 ])
                    (reg:DI 191 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 185 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 185 184 186 6 (parallel [
            (set (reg:DI 193 [ D.5863 ])
                (rotatert:DI (reg:DI 406 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 406 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 186 185 187 6 (parallel [
            (set (reg:DI 194 [ D.5863 ])
                (plus:DI (reg:DI 186 [ D.5863 ])
                    (reg:DI 193 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 186 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 187 186 188 6 (parallel [
            (set (reg:DI 407 [ D.5863 ])
                (xor:DI (reg:DI 188 [ D.5863 ])
                    (reg:DI 194 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 188 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 188 187 189 6 (parallel [
            (set (reg:DI 196 [ D.5863 ])
                (rotatert:DI (reg:DI 407 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 407 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 189 188 190 6 (parallel [
            (set (reg:DI 408 [ D.5863 ])
                (xor:DI (reg:DI 319 [ D.5867 ])
                    (reg:DI 322 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 322 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 319 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 190 189 191 6 (parallel [
            (set (reg:DI 409 [ D.5863 ])
                (plus:DI (reg:DI 408 [ D.5863 ])
                    (reg:DI 143 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 408 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 143 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 191 190 192 6 (parallel [
            (set (reg:DI 200 [ D.5863 ])
                (plus:DI (reg:DI 409 [ D.5863 ])
                    (reg:DI 164 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 409 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 192 191 193 6 (parallel [
            (set (reg:DI 410 [ D.5863 ])
                (xor:DI (reg:DI 193 [ D.5863 ])
                    (reg:DI 200 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 193 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 193 192 194 6 (parallel [
            (set (reg:DI 202 [ D.5863 ])
                (rotate:DI (reg:DI 410 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 588 {*rotldi3_1}
     (expr_list:REG_DEAD (reg:DI 410 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 194 193 195 6 (parallel [
            (set (reg:DI 203 [ D.5863 ])
                (plus:DI (reg:DI 178 [ D.5863 ])
                    (reg:DI 202 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 178 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 195 194 196 6 (parallel [
            (set (reg:DI 411 [ D.5863 ])
                (xor:DI (reg:DI 164 [ D.5863 ])
                    (reg:DI 203 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 164 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 196 195 197 6 (parallel [
            (set (reg:DI 205 [ D.5863 ])
                (rotatert:DI (reg:DI 411 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 411 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 197 196 198 6 (parallel [
            (set (reg:DI 412 [ D.5863 ])
                (xor:DI (reg:DI 323 [ D.5867 ])
                    (reg:DI 324 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 324 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 323 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 198 197 199 6 (parallel [
            (set (reg:DI 413 [ D.5863 ])
                (plus:DI (reg:DI 412 [ D.5863 ])
                    (reg:DI 200 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 412 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 200 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 199 198 200 6 (parallel [
            (set (reg:DI 208 [ v$0 ])
                (plus:DI (reg:DI 413 [ D.5863 ])
                    (reg:DI 205 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 413 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 200 199 201 6 (parallel [
            (set (reg:DI 414 [ D.5863 ])
                (xor:DI (reg:DI 202 [ D.5863 ])
                    (reg:DI 208 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 202 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 201 200 202 6 (parallel [
            (set (reg:DI 210 [ v$15 ])
                (rotatert:DI (reg:DI 414 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 414 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 202 201 203 6 (parallel [
            (set (reg:DI 211 [ v$10 ])
                (plus:DI (reg:DI 203 [ D.5863 ])
                    (reg:DI 210 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 203 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 203 202 204 6 (parallel [
            (set (reg:DI 415 [ D.5863 ])
                (xor:DI (reg:DI 205 [ D.5863 ])
                    (reg:DI 211 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 205 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 204 203 205 6 (parallel [
            (set (reg:DI 214 [ v$5 ])
                (rotatert:DI (reg:DI 415 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 415 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 205 204 206 6 (parallel [
            (set (reg:DI 416 [ D.5863 ])
                (xor:DI (reg:DI 327 [ D.5867 ])
                    (reg:DI 330 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 330 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 327 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 206 205 207 6 (parallel [
            (set (reg:DI 417 [ D.5863 ])
                (plus:DI (reg:DI 416 [ D.5863 ])
                    (reg:DI 159 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 416 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 159 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 207 206 208 6 (parallel [
            (set (reg:DI 217 [ D.5863 ])
                (plus:DI (reg:DI 417 [ D.5863 ])
                    (reg:DI 180 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 417 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 208 207 209 6 (parallel [
            (set (reg:DI 418 [ D.5863 ])
                (xor:DI (reg:DI 145 [ D.5863 ])
                    (reg:DI 217 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 145 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 209 208 210 6 (parallel [
            (set (reg:DI 219 [ D.5863 ])
                (rotate:DI (reg:DI 418 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 588 {*rotldi3_1}
     (expr_list:REG_DEAD (reg:DI 418 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 210 209 211 6 (parallel [
            (set (reg:DI 220 [ D.5863 ])
                (plus:DI (reg:DI 194 [ D.5863 ])
                    (reg:DI 219 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 194 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 211 210 212 6 (parallel [
            (set (reg:DI 419 [ D.5863 ])
                (xor:DI (reg:DI 180 [ D.5863 ])
                    (reg:DI 220 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 180 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 212 211 213 6 (parallel [
            (set (reg:DI 222 [ D.5863 ])
                (rotatert:DI (reg:DI 419 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 419 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 213 212 214 6 (parallel [
            (set (reg:DI 420 [ D.5863 ])
                (xor:DI (reg:DI 331 [ D.5867 ])
                    (reg:DI 332 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 332 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 331 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 214 213 215 6 (parallel [
            (set (reg:DI 421 [ D.5863 ])
                (plus:DI (reg:DI 420 [ D.5863 ])
                    (reg:DI 217 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 420 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 217 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 215 214 216 6 (parallel [
            (set (reg:DI 225 [ v$1 ])
                (plus:DI (reg:DI 421 [ D.5863 ])
                    (reg:DI 222 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 421 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 216 215 217 6 (parallel [
            (set (reg:DI 422 [ D.5863 ])
                (xor:DI (reg:DI 219 [ D.5863 ])
                    (reg:DI 225 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 219 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 217 216 218 6 (parallel [
            (set (reg:DI 227 [ v$12 ])
                (rotatert:DI (reg:DI 422 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 422 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 218 217 219 6 (parallel [
            (set (reg:DI 197 [ v$11 ])
                (plus:DI (reg:DI 220 [ D.5863 ])
                    (reg:DI 227 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 220 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 219 218 220 6 (parallel [
            (set (reg:DI 423 [ D.5863 ])
                (xor:DI (reg:DI 222 [ D.5863 ])
                    (reg:DI 197 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 222 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 220 219 221 6 (parallel [
            (set (reg:DI 230 [ v$6 ])
                (rotatert:DI (reg:DI 423 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 423 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 221 220 222 6 (parallel [
            (set (reg:DI 424 [ D.5863 ])
                (xor:DI (reg:DI 335 [ D.5867 ])
                    (reg:DI 338 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 338 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 335 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 222 221 223 6 (parallel [
            (set (reg:DI 425 [ D.5863 ])
                (plus:DI (reg:DI 424 [ D.5863 ])
                    (reg:DI 175 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 424 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 175 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 223 222 224 6 (parallel [
            (set (reg:DI 233 [ D.5863 ])
                (plus:DI (reg:DI 425 [ D.5863 ])
                    (reg:DI 196 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 425 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 224 223 225 6 (parallel [
            (set (reg:DI 426 [ D.5863 ])
                (xor:DI (reg:DI 161 [ D.5863 ])
                    (reg:DI 233 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 161 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 225 224 226 6 (parallel [
            (set (reg:DI 235 [ D.5863 ])
                (rotate:DI (reg:DI 426 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 588 {*rotldi3_1}
     (expr_list:REG_DEAD (reg:DI 426 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 226 225 227 6 (parallel [
            (set (reg:DI 236 [ D.5863 ])
                (plus:DI (reg:DI 146 [ D.5863 ])
                    (reg:DI 235 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 146 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 227 226 228 6 (parallel [
            (set (reg:DI 427 [ D.5863 ])
                (xor:DI (reg:DI 196 [ D.5863 ])
                    (reg:DI 236 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 196 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 228 227 229 6 (parallel [
            (set (reg:DI 238 [ D.5863 ])
                (rotatert:DI (reg:DI 427 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 427 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 229 228 230 6 (parallel [
            (set (reg:DI 428 [ D.5863 ])
                (xor:DI (reg:DI 339 [ D.5867 ])
                    (reg:DI 340 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 340 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 339 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 230 229 231 6 (parallel [
            (set (reg:DI 429 [ D.5863 ])
                (plus:DI (reg:DI 428 [ D.5863 ])
                    (reg:DI 233 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 428 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 233 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 231 230 232 6 (parallel [
            (set (reg:DI 241 [ v$2 ])
                (plus:DI (reg:DI 429 [ D.5863 ])
                    (reg:DI 238 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 429 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 232 231 233 6 (parallel [
            (set (reg:DI 430 [ D.5863 ])
                (xor:DI (reg:DI 235 [ D.5863 ])
                    (reg:DI 241 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 235 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 233 232 234 6 (parallel [
            (set (reg:DI 243 [ v$13 ])
                (rotatert:DI (reg:DI 430 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 430 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 234 233 235 6 (parallel [
            (set (reg:DI 244 [ v$8 ])
                (plus:DI (reg:DI 236 [ D.5863 ])
                    (reg:DI 243 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 236 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 235 234 236 6 (parallel [
            (set (reg:DI 431 [ D.5863 ])
                (xor:DI (reg:DI 238 [ D.5863 ])
                    (reg:DI 244 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 238 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 236 235 237 6 (parallel [
            (set (reg:DI 246 [ v$7 ])
                (rotatert:DI (reg:DI 431 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 431 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 237 236 238 6 (parallel [
            (set (reg:DI 432 [ D.5863 ])
                (xor:DI (reg:DI 343 [ D.5867 ])
                    (reg:DI 346 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 346 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 343 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 238 237 239 6 (parallel [
            (set (reg:DI 433 [ D.5863 ])
                (plus:DI (reg:DI 432 [ D.5863 ])
                    (reg:DI 191 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 432 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 191 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 239 238 240 6 (parallel [
            (set (reg:DI 250 [ D.5863 ])
                (plus:DI (reg:DI 433 [ D.5863 ])
                    (reg:DI 148 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 433 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 240 239 241 6 (parallel [
            (set (reg:DI 434 [ D.5863 ])
                (xor:DI (reg:DI 177 [ D.5863 ])
                    (reg:DI 250 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 177 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 241 240 242 6 (parallel [
            (set (reg:DI 252 [ D.5863 ])
                (rotate:DI (reg:DI 434 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 588 {*rotldi3_1}
     (expr_list:REG_DEAD (reg:DI 434 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 242 241 243 6 (parallel [
            (set (reg:DI 253 [ D.5863 ])
                (plus:DI (reg:DI 162 [ D.5863 ])
                    (reg:DI 252 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 162 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 243 242 244 6 (parallel [
            (set (reg:DI 435 [ D.5863 ])
                (xor:DI (reg:DI 148 [ D.5863 ])
                    (reg:DI 253 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 148 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 244 243 245 6 (parallel [
            (set (reg:DI 255 [ D.5863 ])
                (rotatert:DI (reg:DI 435 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 435 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 245 244 246 6 (parallel [
            (set (reg:DI 436 [ D.5863 ])
                (xor:DI (reg:DI 347 [ D.5867 ])
                    (reg:DI 348 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 348 [ D.5868 ])
        (expr_list:REG_DEAD (reg:DI 347 [ D.5867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 246 245 247 6 (parallel [
            (set (reg:DI 437 [ D.5863 ])
                (plus:DI (reg:DI 436 [ D.5863 ])
                    (reg:DI 250 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 436 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 250 [ D.5863 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 247 246 248 6 (parallel [
            (set (reg:DI 258 [ v$3 ])
                (plus:DI (reg:DI 437 [ D.5863 ])
                    (reg:DI 255 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 437 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 248 247 249 6 (parallel [
            (set (reg:DI 438 [ D.5863 ])
                (xor:DI (reg:DI 252 [ D.5863 ])
                    (reg:DI 258 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 252 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 249 248 250 6 (parallel [
            (set (reg:DI 260 [ v$14 ])
                (rotatert:DI (reg:DI 438 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 438 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 250 249 251 6 (parallel [
            (set (reg:DI 262 [ v$9 ])
                (plus:DI (reg:DI 253 [ D.5863 ])
                    (reg:DI 260 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 253 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 251 250 252 6 (parallel [
            (set (reg:DI 439 [ D.5863 ])
                (xor:DI (reg:DI 255 [ D.5863 ])
                    (reg:DI 262 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 255 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 252 251 253 6 (parallel [
            (set (reg:DI 264 [ v$4 ])
                (rotatert:DI (reg:DI 439 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 589 {*rotrdi3_1}
     (expr_list:REG_DEAD (reg:DI 439 [ D.5863 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(note 253 252 254 6 NOTE_INSN_DELETED)
(insn 254 253 255 6 (parallel [
            (set (reg:DI 269 [ ivtmp.149 ])
                (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 255 254 256 6 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:SI (reg:SI 100 [ D.5861 ])
                        (const_int -1 [0xffffffffffffffff]))
                    (const_int 0 [0])))
            (set (reg:SI 100 [ D.5861 ])
                (plus:SI (reg:SI 100 [ D.5861 ])
                    (const_int -1 [0xffffffffffffffff])))
        ]) blake_ref.c:173 225 {*addsi_2}
     (nil))
(jump_insn 256 255 257 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 358)
            (pc))) blake_ref.c:173 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 588 (nil)))
 -> 358)
;;  succ:       7 [94.1%]  (FALLTHRU)
;;              8 [5.9%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 269 350
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 269 350

;; basic block 7, loop depth 0, count 0, freq 8859, maybe hot
;;  prev block 6, next block 8, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [94.1%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u379(6){ }u380(7){ }u381(16){ }u382(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 269 350
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 269
;; lr  def 	 287 290 291 292 295 298 299 300 303 306 307 308 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348 440 441 442 446 448 452 454 458 460 464 466 470 472 476 478 482 484
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 269 350
;; live  gen 	 287 290 291 292 295 298 299 300 303 306 307 308 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348 440 441 442 446 448 452 454 458 460 464 466 470 472 476 478 482 484
;; live  kill	
(note 257 256 259 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 259 257 260 7 NOTE_INSN_DELETED)
(insn 260 259 261 7 (set (reg:DI 440 [ D.5864 ])
        (zero_extend:DI (mem:QI (reg:DI 269 [ ivtmp.149 ]) [0 MEM[base: _802, offset: 0B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 261 260 262 7 (set (reg:DI 287 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 440 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(note 262 261 263 7 NOTE_INSN_DELETED)
(insn 263 262 264 7 (set (reg/f:DI 441)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 264 263 265 7 (set (reg:DI 442 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 1 [0x1])) [0 MEM[base: _802, offset: 1B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 265 264 267 7 (set (reg:DI 290 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 442 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 442 [ D.5864 ])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 267 265 270 7 (set (reg:DI 291 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 442 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 442 [ D.5864 ])
        (nil)))
(insn 270 267 271 7 (set (reg:DI 292 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 440 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 440 [ D.5864 ])
        (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 440 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
            (nil))))
(note 271 270 272 7 NOTE_INSN_DELETED)
(insn 272 271 273 7 (set (reg:DI 446 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 2 [0x2])) [0 MEM[base: _802, offset: 2B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 273 272 274 7 (set (reg:DI 295 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 446 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(note 274 273 276 7 NOTE_INSN_DELETED)
(insn 276 274 277 7 (set (reg:DI 448 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 3 [0x3])) [0 MEM[base: _802, offset: 3B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 277 276 279 7 (set (reg:DI 298 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 448 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 448 [ D.5864 ])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 279 277 282 7 (set (reg:DI 299 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 448 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 448 [ D.5864 ])
        (nil)))
(insn 282 279 283 7 (set (reg:DI 300 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 446 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 446 [ D.5864 ])
        (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 446 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
            (nil))))
(note 283 282 284 7 NOTE_INSN_DELETED)
(insn 284 283 285 7 (set (reg:DI 452 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 4 [0x4])) [0 MEM[base: _802, offset: 4B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 285 284 286 7 (set (reg:DI 303 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 452 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(note 286 285 288 7 NOTE_INSN_DELETED)
(insn 288 286 289 7 (set (reg:DI 454 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 5 [0x5])) [0 MEM[base: _802, offset: 5B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 289 288 291 7 (set (reg:DI 306 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 454 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 454 [ D.5864 ])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 291 289 294 7 (set (reg:DI 307 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 454 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 454 [ D.5864 ])
        (nil)))
(insn 294 291 295 7 (set (reg:DI 308 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 452 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 452 [ D.5864 ])
        (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 452 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
            (nil))))
(note 295 294 296 7 NOTE_INSN_DELETED)
(insn 296 295 297 7 (set (reg:DI 458 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 6 [0x6])) [0 MEM[base: _802, offset: 6B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 297 296 298 7 (set (reg:DI 311 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 458 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(note 298 297 300 7 NOTE_INSN_DELETED)
(insn 300 298 301 7 (set (reg:DI 460 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 7 [0x7])) [0 MEM[base: _802, offset: 7B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 301 300 303 7 (set (reg:DI 314 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 460 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 460 [ D.5864 ])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 303 301 306 7 (set (reg:DI 315 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 460 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 460 [ D.5864 ])
        (nil)))
(insn 306 303 307 7 (set (reg:DI 316 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 458 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 458 [ D.5864 ])
        (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 458 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
            (nil))))
(note 307 306 308 7 NOTE_INSN_DELETED)
(insn 308 307 309 7 (set (reg:DI 464 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 8 [0x8])) [0 MEM[base: _802, offset: 8B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 309 308 310 7 (set (reg:DI 319 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 464 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(note 310 309 312 7 NOTE_INSN_DELETED)
(insn 312 310 313 7 (set (reg:DI 466 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 9 [0x9])) [0 MEM[base: _802, offset: 9B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 313 312 315 7 (set (reg:DI 322 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 466 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 466 [ D.5864 ])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 315 313 318 7 (set (reg:DI 323 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 466 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 466 [ D.5864 ])
        (nil)))
(insn 318 315 319 7 (set (reg:DI 324 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 464 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 464 [ D.5864 ])
        (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 464 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
            (nil))))
(note 319 318 320 7 NOTE_INSN_DELETED)
(insn 320 319 321 7 (set (reg:DI 470 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 10 [0xa])) [0 MEM[base: _802, offset: 10B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 321 320 322 7 (set (reg:DI 327 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 470 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(note 322 321 324 7 NOTE_INSN_DELETED)
(insn 324 322 325 7 (set (reg:DI 472 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 11 [0xb])) [0 MEM[base: _802, offset: 11B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 325 324 327 7 (set (reg:DI 330 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 472 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 472 [ D.5864 ])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 327 325 330 7 (set (reg:DI 331 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 472 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 472 [ D.5864 ])
        (nil)))
(insn 330 327 331 7 (set (reg:DI 332 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 470 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 470 [ D.5864 ])
        (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 470 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
            (nil))))
(note 331 330 332 7 NOTE_INSN_DELETED)
(insn 332 331 333 7 (set (reg:DI 476 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 12 [0xc])) [0 MEM[base: _802, offset: 12B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 333 332 334 7 (set (reg:DI 335 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 476 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(note 334 333 336 7 NOTE_INSN_DELETED)
(insn 336 334 337 7 (set (reg:DI 478 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 13 [0xd])) [0 MEM[base: _802, offset: 13B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 337 336 339 7 (set (reg:DI 338 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 478 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 478 [ D.5864 ])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 339 337 342 7 (set (reg:DI 339 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 478 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 478 [ D.5864 ])
        (nil)))
(insn 342 339 343 7 (set (reg:DI 340 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 476 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 476 [ D.5864 ])
        (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 476 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
            (nil))))
(note 343 342 344 7 NOTE_INSN_DELETED)
(insn 344 343 345 7 (set (reg:DI 482 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 14 [0xe])) [0 MEM[base: _802, offset: 14B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 345 344 346 7 (set (reg:DI 343 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 482 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(note 346 345 348 7 NOTE_INSN_DELETED)
(insn 348 346 349 7 (set (reg:DI 484 [ D.5864 ])
        (zero_extend:DI (mem:QI (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 15 [0xf])) [0 MEM[base: _802, offset: 15B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 349 348 351 7 (set (reg:DI 346 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 484 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 484 [ D.5864 ])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
        (nil)))
(insn 351 349 354 7 (set (reg:DI 347 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 484 [ D.5864 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 484 [ D.5864 ])
        (nil)))
(insn 354 351 409 7 (set (reg:DI 348 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 482 [ D.5864 ])
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 482 [ D.5864 ])
        (expr_list:REG_DEAD (reg/f:DI 441)
            (expr_list:REG_EQUAL (mem/u:DI (plus:DI (mult:DI (reg:DI 482 [ D.5864 ])
                            (const_int 8 [0x8]))
                        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) [3 c64 S8 A64])
                (nil)))))
(jump_insn 409 354 410 7 (set (pc)
        (label_ref 355)) -1
     (nil)
 -> 355)
;;  succ:       6 [100.0%]  (DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 269 287 290 291 292 295 298 299 300 303 306 307 308 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348 350
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 269 287 290 291 292 295 298 299 300 303 306 307 308 311 314 315 316 319 322 323 324 327 330 331 332 335 338 339 340 343 346 347 348 350

(barrier 410 409 358)
;; basic block 8, loop depth 0, count 0, freq 588, maybe hot
;;  prev block 7, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       6 [5.9%]  (LOOP_EXIT)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u495(6){ }u496(7){ }u497(16){ }u498(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 350
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 350
;; lr  def 	 0 [ax] 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 506 507 508 509 510 511 513 514 515
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 119 120 121 122 123 124 125 126 127 128 129 130 197 208 210 211 214 225 227 230 241 243 244 246 258 260 262 264 350
;; live  gen 	 0 [ax] 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 506 507 508 509 510 511 513 514 515
;; live  kill	
(code_label 358 410 359 8 10 "" [1 uses])
(note 359 358 361 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 361 359 362 8 (set (reg:V2DI 488 [ vect_cst_.130 ])
        (vec_concat:V2DI (reg:DI 244 [ v$8 ])
            (reg:DI 262 [ v$9 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 262 [ v$9 ])
        (expr_list:REG_DEAD (reg:DI 244 [ v$8 ])
            (nil))))
(insn 362 361 363 8 (set (reg:V2DI 489 [ vect_cst_.125 ])
        (vec_concat:V2DI (reg:DI 208 [ v$0 ])
            (reg:DI 225 [ v$1 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 225 [ v$1 ])
        (expr_list:REG_DEAD (reg:DI 208 [ v$0 ])
            (nil))))
(insn 363 362 364 8 (set (reg:V2DI 490 [ D.5862 ])
        (xor:V2DI (reg:V2DI 488 [ vect_cst_.130 ])
            (reg:V2DI 489 [ vect_cst_.125 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 489 [ vect_cst_.125 ])
        (expr_list:REG_DEAD (reg:V2DI 488 [ vect_cst_.130 ])
            (nil))))
(insn 364 363 365 8 (set (reg:V2DI 491 [ vect_cst_.120 ])
        (vec_concat:V2DI (reg:DI 127 [ D.5863 ])
            (reg:DI 128 [ D.5863 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 128 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 127 [ D.5863 ])
            (nil))))
(insn 365 364 366 8 (set (reg:V2DI 492 [ D.5862 ])
        (xor:V2DI (reg:V2DI 490 [ D.5862 ])
            (reg:V2DI 491 [ vect_cst_.120 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 490 [ D.5862 ])
        (nil)))
(insn 366 365 367 8 (set (reg:V2DI 493 [ vect_cst_.116 ])
        (vec_concat:V2DI (reg:DI 119 [ v$0 ])
            (reg:DI 120 [ v$1 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 120 [ v$1 ])
        (expr_list:REG_DEAD (reg:DI 119 [ v$0 ])
            (nil))))
(insn 367 366 368 8 (set (reg:V2DI 494 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 492 [ D.5862 ])
            (reg:V2DI 493 [ vect_cst_.116 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 493 [ vect_cst_.116 ])
        (expr_list:REG_DEAD (reg:V2DI 492 [ D.5862 ])
            (nil))))
(insn 368 367 370 8 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 136 [0x88])) [3 MEM[(long long unsigned int *)state_534(D) + 136B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 494 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V2DI 494 [ vect__785.126 ])
        (nil)))
(insn 370 368 371 8 (set (reg:V2DI 495 [ vect_cst_.124 ])
        (vec_concat:V2DI (reg:DI 241 [ v$2 ])
            (reg:DI 258 [ v$3 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 258 [ v$3 ])
        (expr_list:REG_DEAD (reg:DI 241 [ v$2 ])
            (nil))))
(insn 371 370 372 8 (set (reg:V2DI 496 [ vect_cst_.129 ])
        (vec_concat:V2DI (reg:DI 211 [ v$10 ])
            (reg:DI 197 [ v$11 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 211 [ v$10 ])
        (expr_list:REG_DEAD (reg:DI 197 [ v$11 ])
            (nil))))
(insn 372 371 373 8 (set (reg:V2DI 497 [ D.5862 ])
        (xor:V2DI (reg:V2DI 495 [ vect_cst_.124 ])
            (reg:V2DI 496 [ vect_cst_.129 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 496 [ vect_cst_.129 ])
        (expr_list:REG_DEAD (reg:V2DI 495 [ vect_cst_.124 ])
            (nil))))
(insn 373 372 374 8 (set (reg:V2DI 498 [ vect_cst_.119 ])
        (vec_concat:V2DI (reg:DI 129 [ D.5863 ])
            (reg:DI 130 [ D.5863 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 130 [ D.5863 ])
        (expr_list:REG_DEAD (reg:DI 129 [ D.5863 ])
            (nil))))
(insn 374 373 375 8 (set (reg:V2DI 499 [ D.5862 ])
        (xor:V2DI (reg:V2DI 497 [ D.5862 ])
            (reg:V2DI 498 [ vect_cst_.119 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 497 [ D.5862 ])
        (nil)))
(insn 375 374 376 8 (set (reg:V2DI 500 [ vect_cst_.115 ])
        (vec_concat:V2DI (reg:DI 121 [ v$2 ])
            (reg:DI 122 [ v$3 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 122 [ v$3 ])
        (expr_list:REG_DEAD (reg:DI 121 [ v$2 ])
            (nil))))
(insn 376 375 377 8 (set (reg:V2DI 501 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 499 [ D.5862 ])
            (reg:V2DI 500 [ vect_cst_.115 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 500 [ vect_cst_.115 ])
        (expr_list:REG_DEAD (reg:V2DI 499 [ D.5862 ])
            (nil))))
(insn 377 376 379 8 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 152 [0x98])) [3 MEM[(long long unsigned int *)state_534(D) + 152B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 501 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V2DI 501 [ vect__785.126 ])
        (nil)))
(insn 379 377 380 8 (set (reg:V2DI 502 [ vect_cst_.123 ])
        (vec_concat:V2DI (reg:DI 227 [ v$12 ])
            (reg:DI 243 [ v$13 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 243 [ v$13 ])
        (expr_list:REG_DEAD (reg:DI 227 [ v$12 ])
            (nil))))
(insn 380 379 381 8 (set (reg:V2DI 503 [ vect_cst_.128 ])
        (vec_concat:V2DI (reg:DI 264 [ v$4 ])
            (reg:DI 214 [ v$5 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 264 [ v$4 ])
        (expr_list:REG_DEAD (reg:DI 214 [ v$5 ])
            (nil))))
(insn 381 380 383 8 (set (reg:V2DI 504 [ D.5862 ])
        (xor:V2DI (reg:V2DI 502 [ vect_cst_.123 ])
            (reg:V2DI 503 [ vect_cst_.128 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 503 [ vect_cst_.128 ])
        (expr_list:REG_DEAD (reg:V2DI 502 [ vect_cst_.123 ])
            (nil))))
(insn 383 381 384 8 (set (reg:V2DI 506 [ D.5862 ])
        (xor:V2DI (reg:V2DI 504 [ D.5862 ])
            (reg:V2DI 491 [ vect_cst_.120 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 504 [ D.5862 ])
        (expr_list:REG_DEAD (reg:V2DI 491 [ vect_cst_.120 ])
            (nil))))
(insn 384 383 385 8 (set (reg:V2DI 507 [ vect_cst_.114 ])
        (vec_concat:V2DI (reg:DI 123 [ v$4 ])
            (reg:DI 124 [ v$5 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 124 [ v$5 ])
        (expr_list:REG_DEAD (reg:DI 123 [ v$4 ])
            (nil))))
(insn 385 384 386 8 (set (reg:V2DI 508 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 506 [ D.5862 ])
            (reg:V2DI 507 [ vect_cst_.114 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 507 [ vect_cst_.114 ])
        (expr_list:REG_DEAD (reg:V2DI 506 [ D.5862 ])
            (nil))))
(insn 386 385 388 8 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 168 [0xa8])) [3 MEM[(long long unsigned int *)state_534(D) + 168B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 508 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V2DI 508 [ vect__785.126 ])
        (nil)))
(insn 388 386 389 8 (set (reg:V2DI 509 [ vect_cst_.127 ])
        (vec_concat:V2DI (reg:DI 230 [ v$6 ])
            (reg:DI 246 [ v$7 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 246 [ v$7 ])
        (expr_list:REG_DEAD (reg:DI 230 [ v$6 ])
            (nil))))
(insn 389 388 390 8 (set (reg:V2DI 510 [ vect_cst_.122 ])
        (vec_concat:V2DI (reg:DI 260 [ v$14 ])
            (reg:DI 210 [ v$15 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 260 [ v$14 ])
        (expr_list:REG_DEAD (reg:DI 210 [ v$15 ])
            (nil))))
(insn 390 389 392 8 (set (reg:V2DI 511 [ D.5862 ])
        (xor:V2DI (reg:V2DI 509 [ vect_cst_.127 ])
            (reg:V2DI 510 [ vect_cst_.122 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 510 [ vect_cst_.122 ])
        (expr_list:REG_DEAD (reg:V2DI 509 [ vect_cst_.127 ])
            (nil))))
(insn 392 390 393 8 (set (reg:V2DI 513 [ D.5862 ])
        (xor:V2DI (reg:V2DI 511 [ D.5862 ])
            (reg:V2DI 498 [ vect_cst_.119 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 511 [ D.5862 ])
        (expr_list:REG_DEAD (reg:V2DI 498 [ vect_cst_.119 ])
            (nil))))
(insn 393 392 394 8 (set (reg:V2DI 514 [ vect_cst_.113 ])
        (vec_concat:V2DI (reg:DI 125 [ v$6 ])
            (reg:DI 126 [ v$7 ]))) 3673 {vec_concatv2di}
     (expr_list:REG_DEAD (reg:DI 126 [ v$7 ])
        (expr_list:REG_DEAD (reg:DI 125 [ v$6 ])
            (nil))))
(insn 394 393 395 8 (set (reg:V2DI 515 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 513 [ D.5862 ])
            (reg:V2DI 514 [ vect_cst_.113 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (expr_list:REG_DEAD (reg:V2DI 514 [ vect_cst_.113 ])
        (expr_list:REG_DEAD (reg:V2DI 513 [ D.5862 ])
            (nil))))
(insn 395 394 400 8 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 184 [0xb8])) [3 MEM[(long long unsigned int *)state_534(D) + 184B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 515 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V2DI 515 [ vect__785.126 ])
        (expr_list:REG_DEAD (reg/v/f:DI 350 [ state ])
            (nil))))
(insn 400 395 401 8 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) blake_ref.c:199 90 {*movsi_internal}
     (nil))
(insn 401 400 0 8 (use (reg/i:SI 0 ax)) blake_ref.c:199 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function Update32.part.0 (Update32.part.0, funcdef_no=22, decl_uid=5562, cgraph_uid=0, symbol_order=31)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
verify found no changes in insn with uid = 223.
verify found no changes in insn with uid = 225.
verify found no changes in insn with uid = 227.
verify found no changes in insn with uid = 229.
rescanning insn with uid = 231.
rescanning insn with uid = 232.
rescanning insn with uid = 233.
ending the processing of deferred insns


Update32.part.0

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={5d,2u} r1={7d,4u} r2={7d,4u} r6={1d,27u} r7={1d,30u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,26u,3e} r17={46d,14u} r18={3d} r19={3d} r20={1d,27u} r21={4d} r22={4d} r23={4d} r24={4d} r25={3d} r26={3d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={5d,2u} r38={4d} r39={3d} r40={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r88={2d,5u,1e} r89={1d,2u} r91={1d,3u} r92={1d,2u} r96={1d,2u} r102={1d,2u} r107={1d,10u} r109={1d,2u} r119={1d,1u} r122={2d,9u} r123={1d,1u} r124={1d,16u,3e} r125={3d,7u} r126={3d,9u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r146={1d,8u} r147={2d,3u} r148={1d,2u} r149={1d,1u} r151={1d,1u} r152={1d,2u} r158={1d,1u} r159={1d,1u} r162={1d,2u} r167={1d,1u} r168={1d,1u} r169={1d,2u} r175={1d,1u} r176={2d,3u} r177={2d,3u} r178={1d,1u} r179={1d,2u} r180={1d,1u} r183={1d,1u} r185={1d,1u} 
;;    total ref usage 549{284d,258u,7e} in 115{112 regular + 3 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags] 88 124 125 126 127
;; live  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; live  gen 	 17 [flags] 88 124 125 126 127
;; live  kill	 17 [flags]
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 124 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:289 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ state ])
        (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
            (nil))))
(insn 3 2 4 2 (set (reg/v/f:DI 125 [ data ])
        (reg:DI 1 dx [ data ])) blake_ref.c:289 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ data ])
        (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [4 data+0 S8 A64])
            (nil))))
(insn 4 3 5 2 (set (reg/v:DI 126 [ databitlen ])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:289 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ databitlen ])
        (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
            (nil))))
(note 5 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 5 11 2 (set (reg:SI 127 [ state_1(D)->datalen ])
        (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])) blake_ref.c:298 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/v:SI 88 [ left ])
                (ashiftrt:SI (reg:SI 127 [ state_1(D)->datalen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:298 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 127 [ state_1(D)->datalen ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                            (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 88 [ left ])
            (const_int 0 [0]))) blake_ref.c:302 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 50)
            (pc))) blake_ref.c:302 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 50)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126

;; basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u15(6){ }u16(7){ }u17(16){ }u18(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 126
;; lr  def 	 17 [flags] 89 91 128 129
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126
;; live  gen 	 17 [flags] 89 91 128 129
;; live  kill	 17 [flags]
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 128)
        (const_int 64 [0x40])) blake_ref.c:299 90 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg/v:SI 89 [ fill ])
                (minus:SI (reg:SI 128)
                    (reg/v:SI 88 [ left ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:299 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 128)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (const_int 64 [0x40])
                    (reg/v:SI 88 [ left ]))
                (nil)))))
(insn 17 16 18 3 (set (reg:DI 91 [ D.5880 ])
        (sign_extend:DI (reg/v:SI 89 [ fill ]))) blake_ref.c:302 142 {*extendsidi2_rex64}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 129 [ D.5880 ])
                (lshiftrt:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:302 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 19 18 20 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 129 [ D.5880 ])
            (reg:DI 91 [ D.5880 ]))) blake_ref.c:302 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 129 [ D.5880 ])
        (nil)))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) blake_ref.c:302 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 50)
;;  succ:       4 [29.0%]  (FALLTHRU)
;;              7 [71.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 124 125 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 124 125 126

;; basic block 4, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [29.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u27(6){ }u28(7){ }u29(16){ }u30(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 124 125 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 91 124 125
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 96 130 131 137
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 124 125 126
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 37 [r8] 92 96 130 131 137
;; live  kill	 17 [flags]
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (parallel [
            (set (reg/f:DI 92 [ D.5881 ])
                (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:303 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 23 22 24 4 (set (reg:DI 130 [ D.5882 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:303 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 88 [ left ])
        (nil)))
(insn 24 23 28 4 (parallel [
            (set (reg:DI 131 [ D.5883 ])
                (plus:DI (reg/f:DI 92 [ D.5881 ])
                    (reg:DI 130 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:303 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 130 [ D.5882 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 28 24 29 4 (set (reg:DI 37 r8)
        (reg:DI 91 [ D.5880 ])) blake_ref.c:303 89 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:DI 1 dx)
        (reg/v/f:DI 125 [ data ])) blake_ref.c:303 89 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 2 cx)
        (reg:DI 131 [ D.5883 ])) blake_ref.c:303 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 131 [ D.5883 ])
        (nil)))
(call_insn 31 30 34 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>) [0 memcpy S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:303 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 2 cx))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 37 r8))
                    (nil))))))
(insn 34 31 35 4 (set (reg:SI 137 [ state_1(D)->t32 ])
        (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])) blake_ref.c:306 90 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:SI 96 [ D.5884 ])
                (plus:SI (reg:SI 137 [ state_1(D)->t32 ])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:306 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 137 [ state_1(D)->t32 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                            (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
                    (const_int 512 [0x200]))
                (nil)))))
(insn 36 35 37 4 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
        (reg:SI 96 [ D.5884 ])) blake_ref.c:306 90 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 96 [ D.5884 ])
            (const_int 0 [0]))) blake_ref.c:307 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 96 [ D.5884 ])
        (nil)))
(jump_insn 38 37 39 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) blake_ref.c:307 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 41)
;;  succ:       5 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 92 124 125 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 92 124 125 126

;; basic block 5, loop depth 0, count 0, freq 65, maybe hot
;;  prev block 4, next block 6, flags: (HOT_PARTITION, RTL)
;;  pred:       4 [50.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u49(6){ }u50(7){ }u51(16){ }u52(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 92 124 125 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 92 124 125 126
;; live  gen 	
;; live  kill	 17 [flags]
(note 39 38 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 5 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                        (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                            (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:308 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 92 124 125 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 92 124 125 126

;; basic block 6, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 5, next block 7, flags: (HOT_PARTITION, RTL)
;;  pred:       4 [50.0%] 
;;              5 [100.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u55(6){ }u56(7){ }u57(16){ }u58(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 92 124 125 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 92 124 125 126
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 125 126 138 139
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 92 124 125 126
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 88 125 126 138 139
;; live  kill	 17 [flags]
(code_label 41 40 42 6 16 "" [1 uses])
(note 42 41 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 6 (set (reg:DI 1 dx)
        (reg/f:DI 92 [ D.5881 ])) blake_ref.c:310 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ D.5881 ])
        (nil)))
(insn 44 43 45 6 (set (reg:DI 2 cx)
        (reg/v/f:DI 124 [ state ])) blake_ref.c:310 89 {*movdi_internal}
     (nil))
(call_insn 45 44 46 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>) [0 compress32 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:310 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 46 45 47 6 (parallel [
            (set (reg/v/f:DI 125 [ data ])
                (plus:DI (reg/v/f:DI 125 [ data ])
                    (reg:DI 91 [ D.5880 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:311 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 91 [ D.5880 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 47 46 48 6 (parallel [
            (set (reg:SI 138 [ D.5879 ])
                (ashift:SI (reg/v:SI 89 [ fill ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:312 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg/v:SI 89 [ fill ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 48 47 49 6 (set (reg:DI 139 [ D.5880 ])
        (sign_extend:DI (reg:SI 138 [ D.5879 ]))) blake_ref.c:312 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 138 [ D.5879 ])
        (nil)))
(insn 49 48 6 6 (parallel [
            (set (reg/v:DI 126 [ databitlen ])
                (minus:DI (reg/v:DI 126 [ databitlen ])
                    (reg:DI 139 [ D.5880 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:312 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 139 [ D.5880 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 6 49 50 6 (set (reg/v:SI 88 [ left ])
        (const_int 0 [0])) blake_ref.c:314 90 {*movsi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126

;; basic block 7, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 6, next block 8, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0%] 
;;              3 [71.0%] 
;;              6 [100.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u70(6){ }u71(7){ }u72(16){ }u73(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 50 6 51 7 15 "" [2 uses])
(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 7 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 126 [ databitlen ])
            (const_int 511 [0x1ff]))) blake_ref.c:318 8 {*cmpdi_1}
     (nil))
(jump_insn 53 52 54 7 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 188)
            (pc))) blake_ref.c:318 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 188)
;;  succ:       8 [91.0%]  (FALLTHRU)
;;              13 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126

;; basic block 8, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 7, next block 9, flags: (HOT_PARTITION, RTL)
;;  pred:       7 [91.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u76(6){ }u77(7){ }u78(16){ }u79(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 126
;; lr  def 	 17 [flags] 122 140 141 142 143
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126
;; live  gen 	 122 140 141 142 143
;; live  kill	 17 [flags]
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 8 (parallel [
            (set (reg:DI 140 [ D.5880 ])
                (plus:DI (reg/v:DI 126 [ databitlen ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 56 55 57 8 (parallel [
            (set (reg:DI 141 [ D.5880 ])
                (lshiftrt:DI (reg:DI 140 [ D.5880 ])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) 546 {*lshrdi3_1}
     (expr_list:REG_DEAD (reg:DI 140 [ D.5880 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 57 56 58 8 (parallel [
            (set (reg:DI 142 [ D.5882 ])
                (plus:DI (reg:DI 141 [ D.5880 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 141 [ D.5880 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 58 57 59 8 (parallel [
            (set (reg:DI 143 [ D.5882 ])
                (ashift:DI (reg:DI 142 [ D.5882 ])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 142 [ D.5882 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 59 58 74 8 (parallel [
            (set (reg/v/f:DI 122 [ data ])
                (plus:DI (reg/v/f:DI 125 [ data ])
                    (reg:DI 143 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 143 [ D.5882 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126

;; basic block 9, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 8, next block 10, flags: (HOT_PARTITION, RTL)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              11 [91.0%]  (DFS_BACK)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u86(6){ }u87(7){ }u88(16){ }u89(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124
;; lr  def 	 17 [flags] 102 144
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126
;; live  gen 	 17 [flags] 102 144
;; live  kill	 17 [flags]
(code_label 74 59 60 9 19 "" [1 uses])
(note 60 74 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 9 (set (reg:SI 144 [ state_1(D)->t32 ])
        (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])) blake_ref.c:321 90 {*movsi_internal}
     (nil))
(insn 62 61 63 9 (parallel [
            (set (reg:SI 102 [ D.5884 ])
                (plus:SI (reg:SI 144 [ state_1(D)->t32 ])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:321 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 144 [ state_1(D)->t32 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                            (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
                    (const_int 512 [0x200]))
                (nil)))))
(insn 63 62 64 9 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
        (reg:SI 102 [ D.5884 ])) blake_ref.c:321 90 {*movsi_internal}
     (nil))
(insn 64 63 65 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 102 [ D.5884 ])
            (const_int 0 [0]))) blake_ref.c:323 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 102 [ D.5884 ])
        (nil)))
(jump_insn 65 64 66 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) blake_ref.c:323 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 68)
;;  succ:       10 [50.0%]  (FALLTHRU)
;;              11 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126

;; basic block 10, loop depth 0, count 0, freq 4550, maybe hot
;;  prev block 9, next block 11, flags: (HOT_PARTITION, RTL)
;;  pred:       9 [50.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u97(6){ }u98(7){ }u99(16){ }u100(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126
;; live  gen 	
;; live  kill	 17 [flags]
(note 66 65 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 10 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                        (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                            (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:324 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126

;; basic block 11, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 10, next block 12, flags: (HOT_PARTITION, RTL)
;;  pred:       9 [50.0%] 
;;              10 [100.0%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u103(6){ }u104(7){ }u105(16){ }u106(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122 124 125
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 125
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 125
;; live  kill	 17 [flags]
(code_label 68 67 69 11 18 "" [1 uses])
(note 69 68 70 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 11 (set (reg:DI 1 dx)
        (reg/v/f:DI 125 [ data ])) blake_ref.c:325 89 {*movdi_internal}
     (nil))
(insn 71 70 72 11 (set (reg:DI 2 cx)
        (reg/v/f:DI 124 [ state ])) blake_ref.c:325 89 {*movdi_internal}
     (nil))
(call_insn 72 71 73 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>) [0 compress32 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:325 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 73 72 75 11 (parallel [
            (set (reg/v/f:DI 125 [ data ])
                (plus:DI (reg/v/f:DI 125 [ data ])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:326 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 75 73 76 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 125 [ data ])
            (reg/v/f:DI 122 [ data ]))) blake_ref.c:318 8 {*cmpdi_1}
     (nil))
(jump_insn 76 75 77 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 74)
            (pc))) blake_ref.c:318 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 74)
;;  succ:       9 [91.0%]  (DFS_BACK)
;;              12 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 125 126

;; basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 11, next block 13, flags: (HOT_PARTITION, RTL)
;;  pred:       11 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u116(6){ }u117(7){ }u118(16){ }u119(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126
;; lr  def 	 17 [flags] 126
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 126
;; live  gen 	 126
;; live  kill	 17 [flags]
(note 77 76 78 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 223 12 (parallel [
            (set (reg/v:DI 126 [ databitlen ])
                (and:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 511 [0x1ff])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 223 78 224 12 (set (pc)
        (label_ref 79)) -1
     (nil)
 -> 79)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 126

(barrier 224 223 188)
;; basic block 13, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 12, next block 14, flags: (HOT_PARTITION, RTL)
;;  pred:       7 [9.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u121(6){ }u122(7){ }u123(16){ }u124(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125
;; lr  def 	 122
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 125 126
;; live  gen 	 122
;; live  kill	
(code_label 188 224 187 13 28 "" [1 uses])
(note 187 188 7 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 7 187 79 13 (set (reg/v/f:DI 122 [ data ])
        (reg/v/f:DI 125 [ data ])) blake_ref.c:318 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 125 [ data ])
        (nil)))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 126

;; basic block 14, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 13, next block 15, flags: (HOT_PARTITION, RTL)
;;  pred:       13 [100.0%]  (FALLTHRU)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u126(6){ }u127(7){ }u128(16){ }u129(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 126
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 126
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 79 7 80 14 17 "" [1 uses])
(note 80 79 81 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 126 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:330 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 82 81 83 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 174)
            (pc))) blake_ref.c:330 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 174)
;;  succ:       15 [29.0%]  (FALLTHRU)
;;              26 [71.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 126

;; basic block 15, loop depth 0, count 0, freq 261, maybe hot
;;  prev block 14, next block 16, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [29.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u132(6){ }u133(7){ }u134(16){ }u135(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 126
;; lr  def 	 17 [flags] 107 109 146
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122 124 126
;; live  gen 	 17 [flags] 107 109 146
;; live  kill	 17 [flags]
(note 83 82 84 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 15 (parallel [
            (set (reg:DI 107 [ D.5880 ])
                (lshiftrt:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:332 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 85 84 86 15 (set (reg:DI 109 [ D.5882 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:331 142 {*extendsidi2_rex64}
     (nil))
(note 86 85 87 15 NOTE_INSN_DELETED)
(insn 87 86 91 15 (set (reg:DI 146 [ D.5883 ])
        (plus:DI (plus:DI (reg/v/f:DI 124 [ state ])
                (reg:DI 109 [ D.5882 ]))
            (const_int 56 [0x38]))) blake_ref.c:331 214 {*leadi}
     (nil))
(insn 91 87 92 15 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg:DI 107 [ D.5880 ]) 0)
            (const_int 8 [0x8]))) blake_ref.c:331 7 {*cmpsi_1}
     (nil))
(jump_insn 92 91 189 15 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 127)
;;  succ:       21 [50.0%] 
;;              16 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146

;; basic block 16, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 15, next block 17, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [50.0%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u143(6){ }u144(7){ }u145(16){ }u146(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; live  gen 	 17 [flags]
;; live  kill	
(note 189 92 93 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(note 93 189 233 16 NOTE_INSN_DELETED)
(insn 233 93 95 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:DI (reg:DI 107 [ D.5880 ])
                (const_int 4 [0x4]))
            (const_int 0 [0]))) blake_ref.c:331 -1
     (nil))
(jump_insn 95 233 190 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9000 (nil)))
 -> 108)
;;  succ:       18 [90.0%] 
;;              17 [10.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146

;; basic block 17, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 16, next block 18, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [10.0%]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u150(6){ }u151(7){ }u152(16){ }u153(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 122 146
;; lr  def 	 151 152 158
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; live  gen 	 151 152 158
;; live  kill	
(note 190 95 96 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 96 190 97 17 (set (reg:SI 151)
        (mem:SI (reg/v/f:DI 122 [ data ]) [0  S4 A8])) blake_ref.c:331 90 {*movsi_internal}
     (nil))
(insn 97 96 98 17 (set (mem:SI (reg:DI 146 [ D.5883 ]) [0  S4 A8])
        (reg:SI 151)) blake_ref.c:331 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 151)
        (nil)))
(insn 98 97 99 17 (set (reg:DI 152 [ D.5880 ])
        (zero_extend:DI (subreg:SI (reg:DI 107 [ D.5880 ]) 0))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(note 99 98 100 17 NOTE_INSN_DELETED)
(note 100 99 102 17 NOTE_INSN_DELETED)
(note 102 100 103 17 NOTE_INSN_DELETED)
(note 103 102 104 17 NOTE_INSN_DELETED)
(insn 104 103 105 17 (set (reg:SI 158)
        (mem:SI (plus:DI (plus:DI (reg/v/f:DI 122 [ data ])
                    (reg:DI 152 [ D.5880 ]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])) blake_ref.c:331 90 {*movsi_internal}
     (nil))
(insn 105 104 225 17 (set (mem:SI (plus:DI (plus:DI (reg:DI 146 [ D.5883 ])
                    (reg:DI 152 [ D.5880 ]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])
        (reg:SI 158)) blake_ref.c:331 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 152 [ D.5880 ])
        (expr_list:REG_DEAD (reg:DI 146 [ D.5883 ])
            (expr_list:REG_DEAD (reg:SI 158)
                (nil)))))
(jump_insn 225 105 226 17 (set (pc)
        (label_ref 159)) -1
     (nil)
 -> 159)
;;  succ:       24 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126

(barrier 226 225 108)
;; basic block 18, loop depth 0, count 0, freq 118, maybe hot
;;  prev block 17, next block 19, flags: (HOT_PARTITION, RTL)
;;  pred:       16 [90.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u167(6){ }u168(7){ }u169(16){ }u170(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 108 226 191 18 23 "" [1 uses])
(note 191 108 109 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 109 191 110 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (subreg:SI (reg:DI 107 [ D.5880 ]) 0)
            (const_int 0 [0]))) blake_ref.c:331 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 110 109 192 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 159)
;;  succ:       24 [50.0%] 
;;              19 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146

;; basic block 19, loop depth 0, count 0, freq 59, maybe hot
;;  prev block 18, next block 20, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       18 [50.0%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u173(6){ }u174(7){ }u175(16){ }u176(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 122 146
;; lr  def 	 17 [flags] 159
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; live  gen 	 17 [flags] 159
;; live  kill	
(note 192 110 111 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 111 192 112 19 (set (reg:QI 159)
        (mem:QI (reg/v/f:DI 122 [ data ]) [0  S1 A8])) blake_ref.c:331 93 {*movqi_internal}
     (nil))
(insn 112 111 113 19 (set (mem:QI (reg:DI 146 [ D.5883 ]) [0  S1 A8])
        (reg:QI 159)) blake_ref.c:331 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 159)
        (nil)))
(note 113 112 232 19 NOTE_INSN_DELETED)
(insn 232 113 115 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:DI (reg:DI 107 [ D.5880 ])
                (const_int 2 [0x2]))
            (const_int 0 [0]))) blake_ref.c:331 -1
     (nil))
(jump_insn 115 232 193 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 159)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9000 (nil)))
 -> 159)
;;  succ:       24 [90.0%] 
;;              20 [10.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146

;; basic block 20, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 19, next block 21, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [10.0%]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u183(6){ }u184(7){ }u185(16){ }u186(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 122 146
;; lr  def 	 162 167
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; live  gen 	 162 167
;; live  kill	
(note 193 115 116 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 116 193 118 20 (set (reg:DI 162 [ D.5880 ])
        (zero_extend:DI (subreg:SI (reg:DI 107 [ D.5880 ]) 0))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(note 118 116 121 20 NOTE_INSN_DELETED)
(note 121 118 122 20 NOTE_INSN_DELETED)
(insn 122 121 123 20 (set (reg:HI 167)
        (mem:HI (plus:DI (plus:DI (reg/v/f:DI 122 [ data ])
                    (reg:DI 162 [ D.5880 ]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])) blake_ref.c:331 92 {*movhi_internal}
     (nil))
(insn 123 122 227 20 (set (mem:HI (plus:DI (plus:DI (reg:DI 146 [ D.5883 ])
                    (reg:DI 162 [ D.5880 ]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (reg:HI 167)) blake_ref.c:331 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg:DI 162 [ D.5880 ])
        (expr_list:REG_DEAD (reg:DI 146 [ D.5883 ])
            (expr_list:REG_DEAD (reg:HI 167)
                (nil)))))
(jump_insn 227 123 228 20 (set (pc)
        (label_ref 159)) -1
     (nil)
 -> 159)
;;  succ:       24 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126

(barrier 228 227 127)
;; basic block 21, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 20, next block 22, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [50.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u195(6){ }u196(7){ }u197(16){ }u198(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 122 146
;; lr  def 	 17 [flags] 147 148 149 168 169 175 176
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 146
;; live  gen 	 17 [flags] 147 148 149 168 169 175 176
;; live  kill	 17 [flags]
(code_label 127 228 195 21 21 "" [1 uses])
(note 195 127 128 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 128 195 129 21 (set (reg:DI 168)
        (mem:DI (reg/v/f:DI 122 [ data ]) [0  S8 A8])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 129 128 130 21 (set (mem:DI (reg:DI 146 [ D.5883 ]) [0  S8 A8])
        (reg:DI 168)) blake_ref.c:331 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 168)
        (nil)))
(insn 130 129 131 21 (set (reg:DI 169 [ D.5880 ])
        (zero_extend:DI (subreg:SI (reg:DI 107 [ D.5880 ]) 0))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(note 131 130 132 21 NOTE_INSN_DELETED)
(note 132 131 134 21 NOTE_INSN_DELETED)
(note 134 132 135 21 NOTE_INSN_DELETED)
(note 135 134 136 21 NOTE_INSN_DELETED)
(insn 136 135 137 21 (set (reg:DI 175)
        (mem:DI (plus:DI (plus:DI (reg/v/f:DI 122 [ data ])
                    (reg:DI 169 [ D.5880 ]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 137 136 138 21 (set (mem:DI (plus:DI (plus:DI (reg:DI 146 [ D.5883 ])
                    (reg:DI 169 [ D.5880 ]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])
        (reg:DI 175)) blake_ref.c:331 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 169 [ D.5880 ])
        (expr_list:REG_DEAD (reg:DI 175)
            (nil))))
(insn 138 137 139 21 (parallel [
            (set (reg/f:DI 176)
                (plus:DI (reg:DI 146 [ D.5883 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 139 138 140 21 (parallel [
            (set (reg/f:DI 176)
                (and:DI (reg/f:DI 176)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 380 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 140 139 141 21 (parallel [
            (set (reg/f:DI 148 [ D.5883 ])
                (minus:DI (reg:DI 146 [ D.5883 ])
                    (reg/f:DI 176)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 146 [ D.5883 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 141 140 142 21 (parallel [
            (set (reg/f:DI 149 [ data ])
                (minus:DI (reg/v/f:DI 122 [ data ])
                    (reg/f:DI 148 [ D.5883 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 142 141 143 21 (parallel [
            (set (reg:SI 147 [ D.5880 ])
                (plus:SI (subreg:SI (reg:DI 107 [ D.5880 ]) 0)
                    (subreg:SI (reg/f:DI 148 [ D.5883 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:DI 148 [ D.5883 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 143 142 144 21 (parallel [
            (set (reg:SI 147 [ D.5880 ])
                (and:SI (reg:SI 147 [ D.5880 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 381 {*andsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 144 143 145 21 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 147 [ D.5880 ])
            (const_int 8 [0x8]))) blake_ref.c:331 7 {*cmpsi_1}
     (nil))
(jump_insn 145 144 196 21 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 159)
;;  succ:       24 [20.0%] 
;;              22 [80.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 147 149 176
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 147 149 176

;; basic block 22, loop depth 0, count 0, freq 105, maybe hot
;;  prev block 21, next block 23, flags: (HOT_PARTITION, RTL)
;;  pred:       21 [80.0%]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u223(6){ }u224(7){ }u225(16){ }u226(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 147 149 176
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 147
;; lr  def 	 17 [flags] 177 178
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 147 149 176
;; live  gen 	 177 178
;; live  kill	 17 [flags]
(note 196 145 146 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 146 196 147 22 (parallel [
            (set (reg:SI 178)
                (and:SI (reg:SI 147 [ D.5880 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 381 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 147 [ D.5880 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 147 146 148 22 (set (reg:SI 177)
        (const_int 0 [0])) blake_ref.c:331 90 {*movsi_internal}
     (nil))
;;  succ:       23 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 149 176 177 178
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 149 176 177 178

;; basic block 23, loop depth 0, count 0, freq 105, maybe hot
;;  prev block 22, next block 24, flags: (HOT_PARTITION, RTL)
;;  pred:       22 [100.0%]  (FALLTHRU)
;;              23 [80.0%]  (DFS_BACK)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u228(6){ }u229(7){ }u230(16){ }u231(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 149 176 177 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 149 176 177 178
;; lr  def 	 17 [flags] 177 179 180
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 149 176 177 178
;; live  gen 	 17 [flags] 177 179 180
;; live  kill	 17 [flags]
(code_label 148 147 197 23 25 "" [1 uses])
(note 197 148 149 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 149 197 150 23 (set (reg:DI 179)
        (zero_extend:DI (reg:SI 177))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn 150 149 151 23 (set (reg:DI 180)
        (mem:DI (plus:DI (reg/f:DI 149 [ data ])
                (reg:DI 179)) [0  S8 A8])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 151 150 152 23 (set (mem:DI (plus:DI (reg/f:DI 176)
                (reg:DI 179)) [0  S8 A64])
        (reg:DI 180)) blake_ref.c:331 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 180)
        (expr_list:REG_DEAD (reg:DI 179)
            (nil))))
(insn 152 151 153 23 (parallel [
            (set (reg:SI 177)
                (plus:SI (reg:SI 177)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 153 152 154 23 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 177)
            (reg:SI 178))) blake_ref.c:331 7 {*cmpsi_1}
     (nil))
(jump_insn 154 153 159 23 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 148)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 8000 (nil)))
 -> 148)
;;  succ:       23 [80.0%]  (DFS_BACK)
;;              24 [20.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 149 176 177 178
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126 149 176 177 178

;; basic block 24, loop depth 0, count 0, freq 178, maybe hot
;;  prev block 23, next block 25, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [90.0%] 
;;              18 [50.0%] 
;;              17 [100.0%] 
;;              21 [20.0%] 
;;              23 [20.0%]  (FALLTHRU,LOOP_EXIT)
;;              20 [100.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u242(6){ }u243(7){ }u244(16){ }u245(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 124 126
;; lr  def 	 17 [flags] 183
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 107 109 122 124 126
;; live  gen 	 17 [flags] 183
;; live  kill	
(code_label 159 154 200 24 22 "" [5 uses])
(note 200 159 160 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(note 160 200 161 24 NOTE_INSN_DELETED)
(insn 161 160 162 24 (set (reg:SI 183)
        (plus:SI (mult:SI (reg/v:SI 88 [ left ])
                (const_int 8 [0x8]))
            (subreg:SI (reg/v:DI 126 [ databitlen ]) 0))) blake_ref.c:333 213 {*leasi}
     (expr_list:REG_DEAD (reg/v:SI 88 [ left ])
        (nil)))
(insn 162 161 163 24 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (reg:SI 183)) blake_ref.c:333 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 183)
        (nil)))
(note 163 162 231 24 NOTE_INSN_DELETED)
(insn 231 163 165 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:DI (reg/v:DI 126 [ databitlen ])
                (const_int 7 [0x7]))
            (const_int 0 [0]))) blake_ref.c:335 -1
     (nil))
(jump_insn 165 231 166 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 177)
            (pc))) blake_ref.c:335 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 177)
;;  succ:       25 [50.0%]  (FALLTHRU)
;;              27 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 109 122 124
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 109 122 124

;; basic block 25, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 24, next block 26, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       24 [50.0%]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u254(6){ }u255(7){ }u256(16){ }u257(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 109 122 124
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 109 122 124
;; lr  def 	 17 [flags] 119 185
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 109 122 124
;; live  gen 	 119 185
;; live  kill	 17 [flags]
(note 166 165 167 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 25 (set (reg:QI 119 [ D.5887 ])
        (mem:QI (plus:DI (reg/v/f:DI 122 [ data ])
                (reg:DI 107 [ D.5880 ])) [0 *_40+0 S1 A8])) blake_ref.c:336 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 122 [ data ])
        (nil)))
(insn 168 167 169 25 (parallel [
            (set (reg:DI 185)
                (plus:DI (reg/v/f:DI 124 [ state ])
                    (reg:DI 107 [ D.5880 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:336 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/v/f:DI 124 [ state ])
        (expr_list:REG_DEAD (reg:DI 107 [ D.5880 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(note 169 168 171 25 NOTE_INSN_DELETED)
(insn 171 169 229 25 (set (mem/j:QI (plus:DI (plus:DI (reg:DI 109 [ D.5882 ])
                    (reg:DI 185))
                (const_int 56 [0x38])) [0 state_1(D)->data32 S1 A8])
        (reg:QI 119 [ D.5887 ])) blake_ref.c:336 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 109 [ D.5882 ])
        (expr_list:REG_DEAD (reg:DI 185)
            (expr_list:REG_DEAD (reg:QI 119 [ D.5887 ])
                (nil)))))
(jump_insn 229 171 230 25 (set (pc)
        (label_ref 177)) -1
     (nil)
 -> 177)
;;  succ:       27 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 230 229 174)
;; basic block 26, loop depth 0, count 0, freq 639, maybe hot
;;  prev block 25, next block 27, flags: (HOT_PARTITION, RTL)
;;  pred:       14 [71.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u266(6){ }u267(7){ }u268(16){ }u269(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124
;; live  gen 	
;; live  kill	
(code_label 174 230 175 26 20 "" [1 uses])
(note 175 174 176 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 26 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:339 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 124 [ state ])
        (nil)))
;;  succ:       27 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 26, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       24 [50.0%] 
;;              26 [100.0%]  (FALLTHRU)
;;              25 [100.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u271(6){ }u272(7){ }u273(16){ }u274(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 123
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	 0 [ax] 123
(code_label 177 176 178 27 27 "" [2 uses])
(note 178 177 181 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 181 178 182 27 (clobber (reg/i:SI 0 ax)) blake_ref.c:343 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 ax)
        (nil)))
(insn 182 181 180 27 (clobber (reg:SI 123 [ <retval> ])) blake_ref.c:343 -1
     (nil))
(insn 180 182 183 27 (set (reg/i:SI 0 ax)
        (reg:SI 123 [ <retval> ])) blake_ref.c:343 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 123 [ <retval> ])
        (nil)))
(insn 183 180 0 27 (use (reg/i:SI 0 ax)) blake_ref.c:343 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function Update64.part.1 (Update64.part.1, funcdef_no=23, decl_uid=5571, cgraph_uid=1, symbol_order=32)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
verify found no changes in insn with uid = 189.
verify found no changes in insn with uid = 191.
verify found no changes in insn with uid = 193.
verify found no changes in insn with uid = 195.
rescanning insn with uid = 197.
rescanning insn with uid = 198.
rescanning insn with uid = 199.
ending the processing of deferred insns


Update64.part.1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={5d,2u} r1={7d,4u} r2={7d,4u} r6={1d,21u} r7={1d,24u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,20u,3e} r17={38d,10u} r18={3d} r19={3d} r20={1d,21u} r21={4d} r22={4d} r23={4d} r24={4d} r25={1d} r26={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={5d,2u} r38={4d} r39={3d} r40={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r88={2d,5u,1e} r89={1d,2u} r91={1d,3u} r92={1d,2u} r103={1d,10u} r106={1d,2u} r116={1d,1u} r117={2d,9u} r119={1d,1u} r120={1d,12u,1e} r121={3d,7u} r122={3d,9u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r140={1d,8u} r141={1d,1u} r142={1d,2u} r143={2d,2u} r145={1d,1u} r146={1d,2u} r152={1d,1u} r153={1d,1u} r156={1d,2u} r161={1d,1u} r162={1d,1u} r163={1d,2u} r169={1d,1u} r170={3d,4u} r171={1d,1u} r172={2d,3u} r174={1d,1u} r176={1d,1u} 
;;    total ref usage 489{267d,217u,5e} in 97{94 regular + 3 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags] 88 120 121 122 123
;; live  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; live  gen 	 17 [flags] 88 120 121 122 123
;; live  kill	 17 [flags]
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 120 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:345 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ state ])
        (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
            (nil))))
(insn 3 2 4 2 (set (reg/v/f:DI 121 [ data ])
        (reg:DI 1 dx [ data ])) blake_ref.c:345 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ data ])
        (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [4 data+0 S8 A64])
            (nil))))
(insn 4 3 5 2 (set (reg/v:DI 122 [ databitlen ])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:345 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ databitlen ])
        (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
            (nil))))
(note 5 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 5 11 2 (set (reg:SI 123 [ state_1(D)->datalen ])
        (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])) blake_ref.c:354 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/v:SI 88 [ left ])
                (ashiftrt:SI (reg:SI 123 [ state_1(D)->datalen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:354 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 123 [ state_1(D)->datalen ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                            (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 88 [ left ])
            (const_int 0 [0]))) blake_ref.c:358 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) blake_ref.c:358 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 42)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              5 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122

;; basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u15(6){ }u16(7){ }u17(16){ }u18(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 122
;; lr  def 	 17 [flags] 89 91 124 125
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122
;; live  gen 	 17 [flags] 89 91 124 125
;; live  kill	 17 [flags]
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 124)
        (const_int 128 [0x80])) blake_ref.c:355 90 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg/v:SI 89 [ fill ])
                (minus:SI (reg:SI 124)
                    (reg/v:SI 88 [ left ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:355 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 124)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (const_int 128 [0x80])
                    (reg/v:SI 88 [ left ]))
                (nil)))))
(insn 17 16 18 3 (set (reg:DI 91 [ D.5911 ])
        (sign_extend:DI (reg/v:SI 89 [ fill ]))) blake_ref.c:358 142 {*extendsidi2_rex64}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 125 [ D.5911 ])
                (lshiftrt:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:358 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 19 18 20 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 125 [ D.5911 ])
            (reg:DI 91 [ D.5911 ]))) blake_ref.c:358 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 125 [ D.5911 ])
        (nil)))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) blake_ref.c:358 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 42)
;;  succ:       4 [29.0%]  (FALLTHRU)
;;              5 [71.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 120 121 122
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 120 121 122

;; basic block 4, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [29.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u27(6){ }u28(7){ }u29(16){ }u30(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 120 121 122
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 120 121 122
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 92 121 122 126 127 133 134
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 120 121 122
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 88 92 121 122 126 127 133 134
;; live  kill	 17 [flags]
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (parallel [
            (set (reg/f:DI 92 [ D.5912 ])
                (plus:DI (reg/v/f:DI 120 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 23 22 24 4 (set (reg:DI 126 [ D.5913 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:359 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 88 [ left ])
        (nil)))
(insn 24 23 28 4 (parallel [
            (set (reg:DI 127 [ D.5914 ])
                (plus:DI (reg/f:DI 92 [ D.5912 ])
                    (reg:DI 126 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 126 [ D.5913 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 28 24 29 4 (set (reg:DI 37 r8)
        (reg:DI 91 [ D.5911 ])) blake_ref.c:359 89 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:DI 1 dx)
        (reg/v/f:DI 121 [ data ])) blake_ref.c:359 89 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 2 cx)
        (reg:DI 127 [ D.5914 ])) blake_ref.c:359 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 127 [ D.5914 ])
        (nil)))
(call_insn 31 30 34 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>) [0 memcpy S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:359 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 2 cx))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 37 r8))
                    (nil))))))
(insn 34 31 35 4 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                        (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                            (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 35 34 36 4 (set (reg:DI 1 dx)
        (reg/f:DI 92 [ D.5912 ])) blake_ref.c:364 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ D.5912 ])
        (nil)))
(insn 36 35 37 4 (set (reg:DI 2 cx)
        (reg/v/f:DI 120 [ state ])) blake_ref.c:364 89 {*movdi_internal}
     (nil))
(call_insn 37 36 38 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:364 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 38 37 39 4 (parallel [
            (set (reg/v/f:DI 121 [ data ])
                (plus:DI (reg/v/f:DI 121 [ data ])
                    (reg:DI 91 [ D.5911 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:365 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 91 [ D.5911 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 39 38 40 4 (parallel [
            (set (reg:SI 133 [ D.5910 ])
                (ashift:SI (reg/v:SI 89 [ fill ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:366 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg/v:SI 89 [ fill ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 40 39 41 4 (set (reg:DI 134 [ D.5911 ])
        (sign_extend:DI (reg:SI 133 [ D.5910 ]))) blake_ref.c:366 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 133 [ D.5910 ])
        (nil)))
(insn 41 40 6 4 (parallel [
            (set (reg/v:DI 122 [ databitlen ])
                (minus:DI (reg/v:DI 122 [ databitlen ])
                    (reg:DI 134 [ D.5911 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:366 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 134 [ D.5911 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 6 41 42 4 (set (reg/v:SI 88 [ left ])
        (const_int 0 [0])) blake_ref.c:368 90 {*movsi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122

;; basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 4, next block 6, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0%] 
;;              3 [71.0%] 
;;              4 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u55(6){ }u56(7){ }u57(16){ }u58(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 42 6 43 5 45 "" [2 uses])
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 5 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 122 [ databitlen ])
            (const_int 1023 [0x3ff]))) blake_ref.c:372 8 {*cmpdi_1}
     (nil))
(jump_insn 45 44 46 5 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 160)
            (pc))) blake_ref.c:372 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 160)
;;  succ:       6 [91.0%]  (FALLTHRU)
;;              9 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122

;; basic block 6, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 5, next block 7, flags: (HOT_PARTITION, RTL)
;;  pred:       5 [91.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u61(6){ }u62(7){ }u63(16){ }u64(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121 122
;; lr  def 	 17 [flags] 117 135 136 137 138
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122
;; live  gen 	 117 135 136 137 138
;; live  kill	 17 [flags]
(note 46 45 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 6 (parallel [
            (set (reg:DI 135 [ D.5911 ])
                (plus:DI (reg/v:DI 122 [ databitlen ])
                    (const_int -1024 [0xfffffffffffffc00])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 48 47 49 6 (parallel [
            (set (reg:DI 136 [ D.5911 ])
                (lshiftrt:DI (reg:DI 135 [ D.5911 ])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) 546 {*lshrdi3_1}
     (expr_list:REG_DEAD (reg:DI 135 [ D.5911 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 49 48 50 6 (parallel [
            (set (reg:DI 137 [ D.5913 ])
                (plus:DI (reg:DI 136 [ D.5911 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 136 [ D.5911 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 50 49 51 6 (parallel [
            (set (reg:DI 138 [ D.5913 ])
                (ashift:DI (reg:DI 137 [ D.5913 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 137 [ D.5913 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 51 50 58 6 (parallel [
            (set (reg/v/f:DI 117 [ data ])
                (plus:DI (reg/v/f:DI 121 [ data ])
                    (reg:DI 138 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 138 [ D.5913 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 121 122
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 121 122

;; basic block 7, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 6, next block 8, flags: (HOT_PARTITION, RTL)
;;  pred:       6 [100.0%]  (FALLTHRU)
;;              7 [91.0%]  (DFS_BACK)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u71(6){ }u72(7){ }u73(16){ }u74(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 121 122
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 117 120 121
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 121
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 121 122
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags] 121
;; live  kill	 17 [flags]
(code_label 58 51 52 7 47 "" [1 uses])
(note 52 58 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                        (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                            (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:375 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 54 53 55 7 (set (reg:DI 1 dx)
        (reg/v/f:DI 121 [ data ])) blake_ref.c:376 89 {*movdi_internal}
     (nil))
(insn 55 54 56 7 (set (reg:DI 2 cx)
        (reg/v/f:DI 120 [ state ])) blake_ref.c:376 89 {*movdi_internal}
     (nil))
(call_insn 56 55 57 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:376 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 57 56 59 7 (parallel [
            (set (reg/v/f:DI 121 [ data ])
                (plus:DI (reg/v/f:DI 121 [ data ])
                    (const_int 128 [0x80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:377 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 59 57 60 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 121 [ data ])
            (reg/v/f:DI 117 [ data ]))) blake_ref.c:372 8 {*cmpdi_1}
     (nil))
(jump_insn 60 59 61 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 58)
            (pc))) blake_ref.c:372 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 58)
;;  succ:       7 [91.0%]  (DFS_BACK)
;;              8 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 121 122
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 121 122

;; basic block 8, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 7, next block 9, flags: (HOT_PARTITION, RTL)
;;  pred:       7 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u86(6){ }u87(7){ }u88(16){ }u89(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 122
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122
;; lr  def 	 17 [flags] 122
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 122
;; live  gen 	 122
;; live  kill	 17 [flags]
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 189 8 (parallel [
            (set (reg/v:DI 122 [ databitlen ])
                (and:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 1023 [0x3ff])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 189 62 190 8 (set (pc)
        (label_ref 63)) -1
     (nil)
 -> 63)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 122
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 122

(barrier 190 189 160)
;; basic block 9, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 8, next block 10, flags: (HOT_PARTITION, RTL)
;;  pred:       5 [9.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u91(6){ }u92(7){ }u93(16){ }u94(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 121
;; lr  def 	 117
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 121 122
;; live  gen 	 117
;; live  kill	
(code_label 160 190 159 9 54 "" [1 uses])
(note 159 160 7 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 7 159 63 9 (set (reg/v/f:DI 117 [ data ])
        (reg/v/f:DI 121 [ data ])) blake_ref.c:372 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 121 [ data ])
        (nil)))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 122
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 122

;; basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 9, next block 11, flags: (HOT_PARTITION, RTL)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u96(6){ }u97(7){ }u98(16){ }u99(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 122
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 122
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 122
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 63 7 64 10 46 "" [1 uses])
(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 122 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:381 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 66 65 67 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) blake_ref.c:381 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 146)
;;  succ:       11 [29.0%]  (FALLTHRU)
;;              20 [71.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 122
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 122

;; basic block 11, loop depth 0, count 0, freq 261, maybe hot
;;  prev block 10, next block 12, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [29.0%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u102(6){ }u103(7){ }u104(16){ }u105(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 122
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 122
;; lr  def 	 17 [flags] 103 106 140
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 117 120 122
;; live  gen 	 17 [flags] 103 106 140
;; live  kill	 17 [flags]
(note 67 66 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 11 (parallel [
            (set (reg:DI 103 [ D.5911 ])
                (lshiftrt:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:383 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 69 68 70 11 (set (reg:DI 106 [ D.5913 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:382 142 {*extendsidi2_rex64}
     (nil))
(note 70 69 71 11 NOTE_INSN_DELETED)
(insn 71 70 75 11 (set (reg:DI 140 [ D.5914 ])
        (plus:DI (plus:DI (reg/v/f:DI 120 [ state ])
                (reg:DI 106 [ D.5913 ]))
            (const_int 216 [0xd8]))) blake_ref.c:382 214 {*leadi}
     (nil))
(insn 75 71 76 11 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg:DI 103 [ D.5911 ]) 0)
            (const_int 8 [0x8]))) blake_ref.c:382 7 {*cmpsi_1}
     (nil))
(jump_insn 76 75 161 11 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 111)
;;  succ:       17 [50.0%] 
;;              12 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140

;; basic block 12, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 11, next block 13, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [50.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u113(6){ }u114(7){ }u115(16){ }u116(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; live  gen 	 17 [flags]
;; live  kill	
(note 161 76 77 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 77 161 199 12 NOTE_INSN_DELETED)
(insn 199 77 79 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:DI (reg:DI 103 [ D.5911 ])
                (const_int 4 [0x4]))
            (const_int 0 [0]))) blake_ref.c:382 -1
     (nil))
(jump_insn 79 199 162 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9000 (nil)))
 -> 92)
;;  succ:       14 [90.0%] 
;;              13 [10.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140

;; basic block 13, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 12, next block 14, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [10.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u120(6){ }u121(7){ }u122(16){ }u123(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103 117 140
;; lr  def 	 145 146 152
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; live  gen 	 145 146 152
;; live  kill	
(note 162 79 80 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 80 162 81 13 (set (reg:SI 145)
        (mem:SI (reg/v/f:DI 117 [ data ]) [0  S4 A8])) blake_ref.c:382 90 {*movsi_internal}
     (nil))
(insn 81 80 82 13 (set (mem:SI (reg:DI 140 [ D.5914 ]) [0  S4 A8])
        (reg:SI 145)) blake_ref.c:382 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 145)
        (nil)))
(insn 82 81 83 13 (set (reg:DI 146 [ D.5911 ])
        (zero_extend:DI (subreg:SI (reg:DI 103 [ D.5911 ]) 0))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(note 83 82 84 13 NOTE_INSN_DELETED)
(note 84 83 86 13 NOTE_INSN_DELETED)
(note 86 84 87 13 NOTE_INSN_DELETED)
(note 87 86 88 13 NOTE_INSN_DELETED)
(insn 88 87 89 13 (set (reg:SI 152)
        (mem:SI (plus:DI (plus:DI (reg/v/f:DI 117 [ data ])
                    (reg:DI 146 [ D.5911 ]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])) blake_ref.c:382 90 {*movsi_internal}
     (nil))
(insn 89 88 191 13 (set (mem:SI (plus:DI (plus:DI (reg:DI 140 [ D.5914 ])
                    (reg:DI 146 [ D.5911 ]))
                (const_int -4 [0xfffffffffffffffc])) [0  S4 A8])
        (reg:SI 152)) blake_ref.c:382 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 146 [ D.5911 ])
        (expr_list:REG_DEAD (reg:DI 140 [ D.5914 ])
            (expr_list:REG_DEAD (reg:SI 152)
                (nil)))))
(jump_insn 191 89 192 13 (set (pc)
        (label_ref 131)) -1
     (nil)
 -> 131)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122

(barrier 192 191 92)
;; basic block 14, loop depth 0, count 0, freq 118, maybe hot
;;  prev block 13, next block 15, flags: (HOT_PARTITION, RTL)
;;  pred:       12 [90.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u137(6){ }u138(7){ }u139(16){ }u140(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 92 192 163 14 51 "" [1 uses])
(note 163 92 93 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 93 163 94 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (subreg:SI (reg:DI 103 [ D.5911 ]) 0)
            (const_int 0 [0]))) blake_ref.c:382 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 94 93 164 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 131)
;;  succ:       18 [50.0%] 
;;              15 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140

;; basic block 15, loop depth 0, count 0, freq 59, maybe hot
;;  prev block 14, next block 16, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [50.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u143(6){ }u144(7){ }u145(16){ }u146(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103 117 140
;; lr  def 	 17 [flags] 153
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; live  gen 	 17 [flags] 153
;; live  kill	
(note 164 94 95 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 95 164 96 15 (set (reg:QI 153)
        (mem:QI (reg/v/f:DI 117 [ data ]) [0  S1 A8])) blake_ref.c:382 93 {*movqi_internal}
     (nil))
(insn 96 95 97 15 (set (mem:QI (reg:DI 140 [ D.5914 ]) [0  S1 A8])
        (reg:QI 153)) blake_ref.c:382 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 153)
        (nil)))
(note 97 96 198 15 NOTE_INSN_DELETED)
(insn 198 97 99 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:DI (reg:DI 103 [ D.5911 ])
                (const_int 2 [0x2]))
            (const_int 0 [0]))) blake_ref.c:382 -1
     (nil))
(jump_insn 99 198 165 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 131)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9000 (nil)))
 -> 131)
;;  succ:       18 [90.0%] 
;;              16 [10.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140

;; basic block 16, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 15, next block 17, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [10.0%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u153(6){ }u154(7){ }u155(16){ }u156(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103 117 140
;; lr  def 	 156 161
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; live  gen 	 156 161
;; live  kill	
(note 165 99 100 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 100 165 102 16 (set (reg:DI 156 [ D.5911 ])
        (zero_extend:DI (subreg:SI (reg:DI 103 [ D.5911 ]) 0))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(note 102 100 105 16 NOTE_INSN_DELETED)
(note 105 102 106 16 NOTE_INSN_DELETED)
(insn 106 105 107 16 (set (reg:HI 161)
        (mem:HI (plus:DI (plus:DI (reg/v/f:DI 117 [ data ])
                    (reg:DI 156 [ D.5911 ]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])) blake_ref.c:382 92 {*movhi_internal}
     (nil))
(insn 107 106 193 16 (set (mem:HI (plus:DI (plus:DI (reg:DI 140 [ D.5914 ])
                    (reg:DI 156 [ D.5911 ]))
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (reg:HI 161)) blake_ref.c:382 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg:DI 156 [ D.5911 ])
        (expr_list:REG_DEAD (reg:DI 140 [ D.5914 ])
            (expr_list:REG_DEAD (reg:HI 161)
                (nil)))))
(jump_insn 193 107 194 16 (set (pc)
        (label_ref 131)) -1
     (nil)
 -> 131)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122

(barrier 194 193 111)
;; basic block 17, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 16, next block 18, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [50.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u165(6){ }u166(7){ }u167(16){ }u168(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103 117 140
;; lr  def 	 17 [flags] 141 142 143 162 163 169 170 171 172
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122 140
;; live  gen 	 141 142 143 162 163 169 170 171 172
;; live  kill	 17 [flags]
(code_label 111 194 167 17 49 "" [1 uses])
(note 167 111 112 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 112 167 113 17 (set (reg:DI 162)
        (mem:DI (reg/v/f:DI 117 [ data ]) [0  S8 A8])) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 113 112 114 17 (set (mem:DI (reg:DI 140 [ D.5914 ]) [0  S8 A8])
        (reg:DI 162)) blake_ref.c:382 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 162)
        (nil)))
(insn 114 113 115 17 (set (reg:DI 163 [ D.5911 ])
        (zero_extend:DI (subreg:SI (reg:DI 103 [ D.5911 ]) 0))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(note 115 114 116 17 NOTE_INSN_DELETED)
(note 116 115 118 17 NOTE_INSN_DELETED)
(note 118 116 119 17 NOTE_INSN_DELETED)
(note 119 118 120 17 NOTE_INSN_DELETED)
(insn 120 119 121 17 (set (reg:DI 169)
        (mem:DI (plus:DI (plus:DI (reg/v/f:DI 117 [ data ])
                    (reg:DI 163 [ D.5911 ]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 121 120 122 17 (set (mem:DI (plus:DI (plus:DI (reg:DI 140 [ D.5914 ])
                    (reg:DI 163 [ D.5911 ]))
                (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])
        (reg:DI 169)) blake_ref.c:382 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 163 [ D.5911 ])
        (expr_list:REG_DEAD (reg:DI 169)
            (nil))))
(insn 122 121 123 17 (parallel [
            (set (reg/f:DI 170)
                (plus:DI (reg:DI 140 [ D.5914 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 123 122 124 17 (parallel [
            (set (reg/f:DI 170)
                (and:DI (reg/f:DI 170)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 380 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 124 123 125 17 (parallel [
            (set (reg/f:DI 142 [ D.5914 ])
                (minus:DI (reg:DI 140 [ D.5914 ])
                    (reg/f:DI 170)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 140 [ D.5914 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 125 124 126 17 (parallel [
            (set (reg/f:DI 143 [ data ])
                (minus:DI (reg/v/f:DI 117 [ data ])
                    (reg/f:DI 142 [ D.5914 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 126 125 127 17 (parallel [
            (set (reg:SI 141 [ D.5911 ])
                (plus:SI (subreg:SI (reg:DI 103 [ D.5911 ]) 0)
                    (subreg:SI (reg/f:DI 142 [ D.5914 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:DI 142 [ D.5914 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(note 127 126 128 17 NOTE_INSN_DELETED)
(insn 128 127 129 17 (parallel [
            (set (reg:SI 171)
                (lshiftrt:SI (reg:SI 141 [ D.5911 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 141 [ D.5911 ])
            (nil))))
(insn 129 128 130 17 (set (reg:DI 172)
        (zero_extend:DI (reg:SI 171))) blake_ref.c:382 133 {*zero_extendsidi2}
     (expr_list:REG_DEAD (reg:SI 171)
        (nil)))
(insn 130 129 131 17 (parallel [
            (set (reg:DI 172)
                (const_int 0 [0]))
            (set (reg/f:DI 170)
                (plus:DI (ashift:DI (reg:DI 172)
                        (const_int 3 [0x3]))
                    (reg/f:DI 170)))
            (set (reg/f:DI 143 [ data ])
                (plus:DI (ashift:DI (reg:DI 172)
                        (const_int 3 [0x3]))
                    (reg/f:DI 143 [ data ])))
            (set (mem:BLK (reg/f:DI 170) [0  A64])
                (mem:BLK (reg/f:DI 143 [ data ]) [0  A8]))
            (use (reg:DI 172))
        ]) blake_ref.c:382 919 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 172)
        (expr_list:REG_UNUSED (reg/f:DI 170)
            (expr_list:REG_UNUSED (reg/f:DI 143 [ data ])
                (nil)))))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122

;; basic block 18, loop depth 0, count 0, freq 262, maybe hot
;;  prev block 17, next block 19, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [90.0%] 
;;              14 [50.0%] 
;;              13 [100.0%] 
;;              17 [100.0%]  (FALLTHRU)
;;              16 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u200(6){ }u201(7){ }u202(16){ }u203(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 120 122
;; lr  def 	 17 [flags] 174
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 103 106 117 120 122
;; live  gen 	 17 [flags] 174
;; live  kill	
(code_label 131 130 168 18 50 "" [4 uses])
(note 168 131 132 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(note 132 168 133 18 NOTE_INSN_DELETED)
(insn 133 132 134 18 (set (reg:SI 174)
        (plus:SI (mult:SI (reg/v:SI 88 [ left ])
                (const_int 8 [0x8]))
            (subreg:SI (reg/v:DI 122 [ databitlen ]) 0))) blake_ref.c:384 213 {*leasi}
     (expr_list:REG_DEAD (reg/v:SI 88 [ left ])
        (nil)))
(insn 134 133 135 18 (set (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (reg:SI 174)) blake_ref.c:384 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 174)
        (nil)))
(note 135 134 197 18 NOTE_INSN_DELETED)
(insn 197 135 137 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:DI (reg/v:DI 122 [ databitlen ])
                (const_int 7 [0x7]))
            (const_int 0 [0]))) blake_ref.c:387 -1
     (nil))
(jump_insn 137 197 138 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 149)
            (pc))) blake_ref.c:387 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 149)
;;  succ:       19 [50.0%]  (FALLTHRU)
;;              21 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103 106 117 120
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103 106 117 120

;; basic block 19, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 18, next block 20, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       18 [50.0%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u212(6){ }u213(7){ }u214(16){ }u215(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103 106 117 120
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103 106 117 120
;; lr  def 	 17 [flags] 116 176
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103 106 117 120
;; live  gen 	 116 176
;; live  kill	 17 [flags]
(note 138 137 139 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 19 (set (reg:QI 116 [ D.5917 ])
        (mem:QI (plus:DI (reg/v/f:DI 117 [ data ])
                (reg:DI 103 [ D.5911 ])) [0 *_37+0 S1 A8])) blake_ref.c:388 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 117 [ data ])
        (nil)))
(insn 140 139 141 19 (parallel [
            (set (reg:DI 176)
                (plus:DI (reg/v/f:DI 120 [ state ])
                    (reg:DI 103 [ D.5911 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:388 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/v/f:DI 120 [ state ])
        (expr_list:REG_DEAD (reg:DI 103 [ D.5911 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(note 141 140 143 19 NOTE_INSN_DELETED)
(insn 143 141 195 19 (set (mem/j:QI (plus:DI (plus:DI (reg:DI 106 [ D.5913 ])
                    (reg:DI 176))
                (const_int 216 [0xd8])) [0 state_1(D)->data64 S1 A8])
        (reg:QI 116 [ D.5917 ])) blake_ref.c:388 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 106 [ D.5913 ])
        (expr_list:REG_DEAD (reg:DI 176)
            (expr_list:REG_DEAD (reg:QI 116 [ D.5917 ])
                (nil)))))
(jump_insn 195 143 196 19 (set (pc)
        (label_ref 149)) -1
     (nil)
 -> 149)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 196 195 146)
;; basic block 20, loop depth 0, count 0, freq 639, maybe hot
;;  prev block 19, next block 21, flags: (HOT_PARTITION, RTL)
;;  pred:       10 [71.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u224(6){ }u225(7){ }u226(16){ }u227(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120
;; live  gen 	
;; live  kill	
(code_label 146 196 147 20 48 "" [1 uses])
(note 147 146 148 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 20 (set (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:391 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 120 [ state ])
        (nil)))
;;  succ:       21 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 20, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       18 [50.0%] 
;;              20 [100.0%]  (FALLTHRU)
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u229(6){ }u230(7){ }u231(16){ }u232(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 119
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	 0 [ax] 119
(code_label 149 148 150 21 53 "" [2 uses])
(note 150 149 153 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 153 150 154 21 (clobber (reg/i:SI 0 ax)) blake_ref.c:394 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 ax)
        (nil)))
(insn 154 153 152 21 (clobber (reg:SI 119 [ <retval> ])) blake_ref.c:394 -1
     (nil))
(insn 152 154 155 21 (set (reg/i:SI 0 ax)
        (reg:SI 119 [ <retval> ])) blake_ref.c:394 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 119 [ <retval> ])
        (nil)))
(insn 155 152 0 21 (use (reg/i:SI 0 ax)) blake_ref.c:394 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function GetHashStateSize (GetHashStateSize, funcdef_no=10, decl_uid=3156, cgraph_uid=10, symbol_order=18)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
ending the processing of deferred insns


GetHashStateSize

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={1d,2u} r1={1d} r2={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r37={1d} r38={1d} 
;;    total ref usage 22{13d,9u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 2 10 2 (set (reg/i:SI 0 ax)
        (const_int 376 [0x178])) blake_ref.c:7 90 {*movsi_internal}
     (nil))
(insn 10 9 0 2 (use (reg/i:SI 0 ax)) blake_ref.c:7 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function Init (Init, funcdef_no=13, decl_uid=3182, cgraph_uid=13, symbol_order=21)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
verify found no changes in insn with uid = 161.
verify found no changes in insn with uid = 163.
verify found no changes in insn with uid = 165.
ending the processing of deferred insns


Init

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 17[flags]
;;  ref usage 	r0={1d,2u} r1={1d,1u} r2={1d,1u} r6={1d,13u} r7={1d,13u} r16={1d,12u,2e} r17={18d,4u} r20={1d,13u} r21={1d} r22={1d} r23={1d} r24={1d} r37={1d} r38={1d} r88={2d,1u} r100={1d,29u} r101={1d,5u} r102={1d,1u} r104={1d,3u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,3u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r123={3d,4u} r124={1d,1u} r125={2d,2u} r126={1d,1u} r127={1d,1u} r129={1d,7u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,7u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r156={3d,4u} r157={1d,1u} r158={2d,2u} 
;;    total ref usage 247{84d,161u,2e} in 105{105 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102
;; live  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  gen 	 17 [flags] 100 101 102
;; live  kill	 17 [flags]
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (reg/v/f:DI 100 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:203 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ state ])
        (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
            (nil))))
(insn 3 2 4 2 (set (reg/v:SI 101 [ hashbitlen ])
        (reg:SI 1 dx [ hashbitlen ])) blake_ref.c:203 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ hashbitlen ])
        (expr_list:REG_EQUIV (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [2 hashbitlen+0 S4 A64])
            (nil))))
(note 4 3 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 4 11 2 (parallel [
            (set (reg:SI 102 [ D.5934 ])
                (plus:SI (reg/v:SI 101 [ hashbitlen ])
                    (const_int -224 [0xffffffffffffff20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 11 10 12 2 NOTE_INSN_DELETED)
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 102 [ D.5934 ])
                (const_int -33 [0xffffffffffffffdf]))
            (const_int 0 [0]))) blake_ref.c:207 362 {*testsi_1}
     (expr_list:REG_DEAD (reg:SI 102 [ D.5934 ])
        (nil)))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) blake_ref.c:207 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 67)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101

;; basic block 3, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u12(6){ }u13(7){ }u14(16){ }u15(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  gen 	 17 [flags]
;; live  kill	
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 101 [ hashbitlen ])
            (const_int 224 [0xe0]))) blake_ref.c:210 7 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) blake_ref.c:210 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 30)
;;  succ:       4 [28.0%]  (FALLTHRU)
;;              5 [72.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101

;; basic block 4, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [28.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u18(6){ }u19(7){ }u20(16){ }u21(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100
;; lr  def 	 17 [flags] 104 106 107 108 109
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  gen 	 104 106 107 108 109
;; live  kill	 17 [flags]
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 20 4 (parallel [
            (set (reg/f:DI 104)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:211 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 20 18 21 4 (set (reg:DI 106 [ MEM[(void *)&IV224] ])
        (mem/u/c:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>) [0 MEM[(void *)&IV224]+0 S8 A256])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+0 S8 A8])
        (reg:DI 106 [ MEM[(void *)&IV224] ])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 106 [ MEM[(void *)&IV224] ])
        (nil)))
(insn 22 21 23 4 (set (reg:DI 107 [ MEM[(void *)&IV224]+8 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV224]+8 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (mem:DI (plus:DI (reg/f:DI 104)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 16B]+8 S8 A8])
        (reg:DI 107 [ MEM[(void *)&IV224]+8 ])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 107 [ MEM[(void *)&IV224]+8 ])
        (nil)))
(insn 24 23 25 4 (set (reg:DI 108 [ MEM[(void *)&IV224]+16 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV224]+16 S8 A128])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (mem:DI (plus:DI (reg/f:DI 104)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+16 S8 A8])
        (reg:DI 108 [ MEM[(void *)&IV224]+16 ])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 108 [ MEM[(void *)&IV224]+16 ])
        (nil)))
(insn 26 25 27 4 (set (reg:DI 109 [ MEM[(void *)&IV224]+24 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV224]+24 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 27 26 161 4 (set (mem:DI (plus:DI (reg/f:DI 104)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 16B]+24 S8 A8])
        (reg:DI 109 [ MEM[(void *)&IV224]+24 ])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 109 [ MEM[(void *)&IV224]+24 ])
        (expr_list:REG_DEAD (reg/f:DI 104)
            (nil))))
(jump_insn 161 27 162 4 (set (pc)
        (label_ref 42)) -1
     (nil)
 -> 42)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101

(barrier 162 161 30)
;; basic block 5, loop depth 0, count 0, freq 111, maybe hot
;;  prev block 4, next block 6, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [72.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u31(6){ }u32(7){ }u33(16){ }u34(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100
;; lr  def 	 17 [flags] 110 112 113 114 115
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  gen 	 110 112 113 114 115
;; live  kill	 17 [flags]
(code_label 30 162 31 5 72 "" [1 uses])
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 34 5 (parallel [
            (set (reg/f:DI 110)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:213 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 34 32 35 5 (set (reg:DI 112 [ MEM[(void *)&IV256] ])
        (mem/u/c:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>) [0 MEM[(void *)&IV256]+0 S8 A256])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+0 S8 A8])
        (reg:DI 112 [ MEM[(void *)&IV256] ])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 112 [ MEM[(void *)&IV256] ])
        (nil)))
(insn 36 35 37 5 (set (reg:DI 113 [ MEM[(void *)&IV256]+8 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV256]+8 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 37 36 38 5 (set (mem:DI (plus:DI (reg/f:DI 110)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 16B]+8 S8 A8])
        (reg:DI 113 [ MEM[(void *)&IV256]+8 ])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 113 [ MEM[(void *)&IV256]+8 ])
        (nil)))
(insn 38 37 39 5 (set (reg:DI 114 [ MEM[(void *)&IV256]+16 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV256]+16 S8 A128])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (set (mem:DI (plus:DI (reg/f:DI 110)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+16 S8 A8])
        (reg:DI 114 [ MEM[(void *)&IV256]+16 ])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 114 [ MEM[(void *)&IV256]+16 ])
        (nil)))
(insn 40 39 41 5 (set (reg:DI 115 [ MEM[(void *)&IV256]+24 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV256]+24 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (mem:DI (plus:DI (reg/f:DI 110)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 16B]+24 S8 A8])
        (reg:DI 115 [ MEM[(void *)&IV256]+24 ])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 115 [ MEM[(void *)&IV256]+24 ])
        (expr_list:REG_DEAD (reg/f:DI 110)
            (nil))))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101

;; basic block 6, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 5, next block 7, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u44(6){ }u45(7){ }u46(16){ }u47(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100
;; lr  def 	 17 [flags] 117 118 119 123 124 125 126
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  gen 	 117 118 119 123 124 125 126
;; live  kill	 17 [flags]
(code_label 42 41 43 6 73 "" [1 uses])
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 6 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 48 [0x30])) [2 state_18(D)->t32+0 S4 A64])
        (const_int 0 [0])) blake_ref.c:215 90 {*movsi_internal}
     (nil))
(insn 45 44 46 6 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 52 [0x34])) [2 state_18(D)->t32+4 S4 A32])
        (const_int 0 [0])) blake_ref.c:216 90 {*movsi_internal}
     (nil))
(note 46 45 49 6 NOTE_INSN_DELETED)
(insn 49 46 50 6 (set (reg:DI 119)
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 50 49 53 6 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 56 [0x38])) [0  S8 A8])
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(note 53 50 54 6 NOTE_INSN_DELETED)
(insn 54 53 55 6 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 112 [0x70])) [0  S8 A8])
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 55 54 56 6 (parallel [
            (set (reg/f:DI 123)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 56 55 57 6 (parallel [
            (set (reg/f:DI 123)
                (and:DI (reg/f:DI 123)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 57 56 58 6 (parallel [
            (set (reg/f:SI 117 [ D.5936 ])
                (minus:SI (subreg:SI (reg/v/f:DI 100 [ state ]) 0)
                    (subreg:SI (reg/f:DI 123) 0)))
            (clobber (reg:CC 17 flags))
        ]) 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 58 57 59 6 (set (reg:SI 118)
        (plus:SI (reg/f:SI 117 [ D.5936 ])
            (const_int 120 [0x78]))) 213 {*leasi}
     (expr_list:REG_DEAD (reg/f:SI 117 [ D.5936 ])
        (nil)))
(note 59 58 60 6 NOTE_INSN_DELETED)
(insn 60 59 61 6 (parallel [
            (set (reg:SI 124)
                (lshiftrt:SI (reg:SI 118)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 118)
            (nil))))
(insn 61 60 62 6 (set (reg:DI 125)
        (zero_extend:DI (reg:SI 124))) 133 {*zero_extendsidi2}
     (expr_list:REG_DEAD (reg:SI 124)
        (nil)))
(insn 62 61 63 6 (parallel [
            (set (reg:DI 125)
                (const_int 0 [0]))
            (set (reg/f:DI 123)
                (plus:DI (ashift:DI (reg:DI 125)
                        (const_int 3 [0x3]))
                    (reg/f:DI 123)))
            (set (mem:BLK (reg/f:DI 123) [0  A64])
                (const_int 0 [0]))
            (use (reg:DI 119))
            (use (reg:DI 125))
        ]) 933 {*rep_stosdi_rex64}
     (expr_list:REG_DEAD (reg:DI 119)
        (expr_list:REG_UNUSED (reg:DI 125)
            (expr_list:REG_UNUSED (reg/f:DI 123)
                (nil)))))
(insn 63 62 64 6 (set (reg:V4SI 126)
        (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])) blake_ref.c:221 1194 {*movv4si_internal}
     (nil))
(insn 64 63 163 6 (set (mem:V16QI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 120 [0x78])) [2 MEM[(unsigned int *)state_18(D) + 120B]+0 S16 A32])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 126) 0)
            ] UNSPEC_STOREU)) blake_ref.c:221 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V4SI 126)
        (nil)))
(jump_insn 163 64 164 6 (set (pc)
        (label_ref 142)) -1
     (nil)
 -> 142)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101

(barrier 164 163 67)
;; basic block 7, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 6, next block 8, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u69(6){ }u70(7){ }u71(16){ }u72(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101
;; lr  def 	 17 [flags] 88 127
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  gen 	 17 [flags] 88 127
;; live  kill	 17 [flags]
(code_label 67 164 68 7 71 "" [1 uses])
(note 68 67 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 7 (parallel [
            (set (reg:SI 127 [ D.5934 ])
                (plus:SI (reg/v:SI 101 [ hashbitlen ])
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 70 69 5 7 NOTE_INSN_DELETED)
(insn 5 70 71 7 (set (reg:SI 88 [ D.5935 ])
        (const_int 2 [0x2])) blake_ref.c:249 90 {*movsi_internal}
     (nil))
(insn 71 5 72 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 127 [ D.5934 ])
                (const_int -129 [0xffffffffffffff7f]))
            (const_int 0 [0]))) blake_ref.c:227 362 {*testsi_1}
     (expr_list:REG_DEAD (reg:SI 127 [ D.5934 ])
        (nil)))
(jump_insn 72 71 73 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 148)
            (pc))) blake_ref.c:227 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6700 (nil)))
 -> 148)
;;  succ:       8 [33.0%]  (FALLTHRU)
;;              13 [67.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 100 101
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 100 101

;; basic block 8, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 7, next block 9, flags: (HOT_PARTITION, RTL)
;;  pred:       7 [33.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u77(6){ }u78(7){ }u79(16){ }u80(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  gen 	 17 [flags]
;; live  kill	
(note 73 72 74 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 101 [ hashbitlen ])
            (const_int 384 [0x180]))) blake_ref.c:230 7 {*cmpsi_1}
     (nil))
(jump_insn 75 74 76 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 97)
            (pc))) blake_ref.c:230 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 97)
;;  succ:       9 [28.0%]  (FALLTHRU)
;;              10 [72.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101

;; basic block 9, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 8, next block 10, flags: (HOT_PARTITION, RTL)
;;  pred:       8 [28.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u83(6){ }u84(7){ }u85(16){ }u86(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100
;; lr  def 	 17 [flags] 129 131 132 133 134 135 136 137 138
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  gen 	 129 131 132 133 134 135 136 137 138
;; live  kill	 17 [flags]
(note 76 75 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 79 9 (parallel [
            (set (reg/f:DI 129)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:231 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 79 77 80 9 (set (reg:DI 131 [ MEM[(void *)&IV384] ])
        (mem/u/c:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>) [0 MEM[(void *)&IV384]+0 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 80 79 81 9 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 136 [0x88])) [0 MEM[(void *)state_18(D) + 136B]+0 S8 A8])
        (reg:DI 131 [ MEM[(void *)&IV384] ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 131 [ MEM[(void *)&IV384] ])
        (nil)))
(insn 81 80 82 9 (set (reg:DI 132 [ MEM[(void *)&IV384]+8 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV384]+8 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 82 81 83 9 (set (mem:DI (plus:DI (reg/f:DI 129)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 136B]+8 S8 A8])
        (reg:DI 132 [ MEM[(void *)&IV384]+8 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 132 [ MEM[(void *)&IV384]+8 ])
        (nil)))
(insn 83 82 84 9 (set (reg:DI 133 [ MEM[(void *)&IV384]+16 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV384]+16 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 84 83 85 9 (set (mem:DI (plus:DI (reg/f:DI 129)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 136B]+16 S8 A8])
        (reg:DI 133 [ MEM[(void *)&IV384]+16 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 133 [ MEM[(void *)&IV384]+16 ])
        (nil)))
(insn 85 84 86 9 (set (reg:DI 134 [ MEM[(void *)&IV384]+24 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV384]+24 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 86 85 87 9 (set (mem:DI (plus:DI (reg/f:DI 129)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 136B]+24 S8 A8])
        (reg:DI 134 [ MEM[(void *)&IV384]+24 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 134 [ MEM[(void *)&IV384]+24 ])
        (nil)))
(insn 87 86 88 9 (set (reg:DI 135 [ MEM[(void *)&IV384]+32 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 32 [0x20]))) [0 MEM[(void *)&IV384]+32 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 88 87 89 9 (set (mem:DI (plus:DI (reg/f:DI 129)
                (const_int 32 [0x20])) [0 MEM[(void *)state_18(D) + 136B]+32 S8 A8])
        (reg:DI 135 [ MEM[(void *)&IV384]+32 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 135 [ MEM[(void *)&IV384]+32 ])
        (nil)))
(insn 89 88 90 9 (set (reg:DI 136 [ MEM[(void *)&IV384]+40 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 40 [0x28]))) [0 MEM[(void *)&IV384]+40 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 90 89 91 9 (set (mem:DI (plus:DI (reg/f:DI 129)
                (const_int 40 [0x28])) [0 MEM[(void *)state_18(D) + 136B]+40 S8 A8])
        (reg:DI 136 [ MEM[(void *)&IV384]+40 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 136 [ MEM[(void *)&IV384]+40 ])
        (nil)))
(insn 91 90 92 9 (set (reg:DI 137 [ MEM[(void *)&IV384]+48 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 48 [0x30]))) [0 MEM[(void *)&IV384]+48 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 92 91 93 9 (set (mem:DI (plus:DI (reg/f:DI 129)
                (const_int 48 [0x30])) [0 MEM[(void *)state_18(D) + 136B]+48 S8 A8])
        (reg:DI 137 [ MEM[(void *)&IV384]+48 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 137 [ MEM[(void *)&IV384]+48 ])
        (nil)))
(insn 93 92 94 9 (set (reg:DI 138 [ MEM[(void *)&IV384]+56 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 56 [0x38]))) [0 MEM[(void *)&IV384]+56 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 94 93 165 9 (set (mem:DI (plus:DI (reg/f:DI 129)
                (const_int 56 [0x38])) [0 MEM[(void *)state_18(D) + 136B]+56 S8 A8])
        (reg:DI 138 [ MEM[(void *)&IV384]+56 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 138 [ MEM[(void *)&IV384]+56 ])
        (expr_list:REG_DEAD (reg/f:DI 129)
            (nil))))
(jump_insn 165 94 166 9 (set (pc)
        (label_ref 117)) -1
     (nil)
 -> 117)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101

(barrier 166 165 97)
;; basic block 10, loop depth 0, count 0, freq 37, maybe hot
;;  prev block 9, next block 11, flags: (HOT_PARTITION, RTL)
;;  pred:       8 [72.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u104(6){ }u105(7){ }u106(16){ }u107(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100
;; lr  def 	 17 [flags] 139 141 142 143 144 145 146 147 148
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  gen 	 139 141 142 143 144 145 146 147 148
;; live  kill	 17 [flags]
(code_label 97 166 98 10 76 "" [1 uses])
(note 98 97 99 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 101 10 (parallel [
            (set (reg/f:DI 139)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:233 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 101 99 102 10 (set (reg:DI 141 [ MEM[(void *)&IV512] ])
        (mem/u/c:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>) [0 MEM[(void *)&IV512]+0 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 102 101 103 10 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 136 [0x88])) [0 MEM[(void *)state_18(D) + 136B]+0 S8 A8])
        (reg:DI 141 [ MEM[(void *)&IV512] ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 141 [ MEM[(void *)&IV512] ])
        (nil)))
(insn 103 102 104 10 (set (reg:DI 142 [ MEM[(void *)&IV512]+8 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 8 [0x8]))) [0 MEM[(void *)&IV512]+8 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 104 103 105 10 (set (mem:DI (plus:DI (reg/f:DI 139)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 136B]+8 S8 A8])
        (reg:DI 142 [ MEM[(void *)&IV512]+8 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 142 [ MEM[(void *)&IV512]+8 ])
        (nil)))
(insn 105 104 106 10 (set (reg:DI 143 [ MEM[(void *)&IV512]+16 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 16 [0x10]))) [0 MEM[(void *)&IV512]+16 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 106 105 107 10 (set (mem:DI (plus:DI (reg/f:DI 139)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 136B]+16 S8 A8])
        (reg:DI 143 [ MEM[(void *)&IV512]+16 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 143 [ MEM[(void *)&IV512]+16 ])
        (nil)))
(insn 107 106 108 10 (set (reg:DI 144 [ MEM[(void *)&IV512]+24 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 24 [0x18]))) [0 MEM[(void *)&IV512]+24 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 108 107 109 10 (set (mem:DI (plus:DI (reg/f:DI 139)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 136B]+24 S8 A8])
        (reg:DI 144 [ MEM[(void *)&IV512]+24 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 144 [ MEM[(void *)&IV512]+24 ])
        (nil)))
(insn 109 108 110 10 (set (reg:DI 145 [ MEM[(void *)&IV512]+32 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 32 [0x20]))) [0 MEM[(void *)&IV512]+32 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 110 109 111 10 (set (mem:DI (plus:DI (reg/f:DI 139)
                (const_int 32 [0x20])) [0 MEM[(void *)state_18(D) + 136B]+32 S8 A8])
        (reg:DI 145 [ MEM[(void *)&IV512]+32 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 145 [ MEM[(void *)&IV512]+32 ])
        (nil)))
(insn 111 110 112 10 (set (reg:DI 146 [ MEM[(void *)&IV512]+40 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 40 [0x28]))) [0 MEM[(void *)&IV512]+40 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 112 111 113 10 (set (mem:DI (plus:DI (reg/f:DI 139)
                (const_int 40 [0x28])) [0 MEM[(void *)state_18(D) + 136B]+40 S8 A8])
        (reg:DI 146 [ MEM[(void *)&IV512]+40 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 146 [ MEM[(void *)&IV512]+40 ])
        (nil)))
(insn 113 112 114 10 (set (reg:DI 147 [ MEM[(void *)&IV512]+48 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 48 [0x30]))) [0 MEM[(void *)&IV512]+48 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 114 113 115 10 (set (mem:DI (plus:DI (reg/f:DI 139)
                (const_int 48 [0x30])) [0 MEM[(void *)state_18(D) + 136B]+48 S8 A8])
        (reg:DI 147 [ MEM[(void *)&IV512]+48 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 147 [ MEM[(void *)&IV512]+48 ])
        (nil)))
(insn 115 114 116 10 (set (reg:DI 148 [ MEM[(void *)&IV512]+56 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 56 [0x38]))) [0 MEM[(void *)&IV512]+56 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 116 115 117 10 (set (mem:DI (plus:DI (reg/f:DI 139)
                (const_int 56 [0x38])) [0 MEM[(void *)state_18(D) + 136B]+56 S8 A8])
        (reg:DI 148 [ MEM[(void *)&IV512]+56 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 148 [ MEM[(void *)&IV512]+56 ])
        (expr_list:REG_DEAD (reg/f:DI 139)
            (nil))))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101

;; basic block 11, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 10, next block 12, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u125(6){ }u126(7){ }u127(16){ }u128(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100
;; lr  def 	 17 [flags] 150 151 152 156 157 158
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  gen 	 150 151 152 156 157 158
;; live  kill	 17 [flags]
(code_label 117 116 118 11 77 "" [1 uses])
(note 118 117 119 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 200 [0xc8])) [3 state_18(D)->t64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:235 89 {*movdi_internal}
     (nil))
(insn 120 119 121 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 208 [0xd0])) [3 state_18(D)->t64+8 S8 A64])
        (const_int 0 [0])) blake_ref.c:236 89 {*movdi_internal}
     (nil))
(note 121 120 124 11 NOTE_INSN_DELETED)
(insn 124 121 125 11 (set (reg:DI 152)
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 125 124 128 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 216 [0xd8])) [0  S8 A8])
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(note 128 125 129 11 NOTE_INSN_DELETED)
(insn 129 128 130 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 272 [0x110])) [0  S8 A8])
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 130 129 131 11 (parallel [
            (set (reg/f:DI 156)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 224 [0xe0])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 131 130 132 11 (parallel [
            (set (reg/f:DI 156)
                (and:DI (reg/f:DI 156)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 132 131 133 11 (parallel [
            (set (reg/f:SI 150 [ D.5936 ])
                (minus:SI (subreg:SI (reg/v/f:DI 100 [ state ]) 0)
                    (subreg:SI (reg/f:DI 156) 0)))
            (clobber (reg:CC 17 flags))
        ]) 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 133 132 134 11 (set (reg:SI 151)
        (plus:SI (reg/f:SI 150 [ D.5936 ])
            (const_int 280 [0x118]))) 213 {*leasi}
     (expr_list:REG_DEAD (reg/f:SI 150 [ D.5936 ])
        (nil)))
(note 134 133 135 11 NOTE_INSN_DELETED)
(insn 135 134 136 11 (parallel [
            (set (reg:SI 157)
                (lshiftrt:SI (reg:SI 151)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 151)
            (nil))))
(insn 136 135 137 11 (set (reg:DI 158)
        (zero_extend:DI (reg:SI 157))) 133 {*zero_extendsidi2}
     (expr_list:REG_DEAD (reg:SI 157)
        (nil)))
(insn 137 136 138 11 (parallel [
            (set (reg:DI 158)
                (const_int 0 [0]))
            (set (reg/f:DI 156)
                (plus:DI (ashift:DI (reg:DI 158)
                        (const_int 3 [0x3]))
                    (reg/f:DI 156)))
            (set (mem:BLK (reg/f:DI 156) [0  A64])
                (const_int 0 [0]))
            (use (reg:DI 152))
            (use (reg:DI 158))
        ]) 933 {*rep_stosdi_rex64}
     (expr_list:REG_DEAD (reg:DI 152)
        (expr_list:REG_UNUSED (reg:DI 158)
            (expr_list:REG_UNUSED (reg/f:DI 156)
                (nil)))))
(insn 138 137 139 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 344 [0x158])) [3 state_18(D)->salt64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:241 89 {*movdi_internal}
     (nil))
(insn 139 138 140 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 352 [0x160])) [3 state_18(D)->salt64+8 S8 A64])
        (const_int 0 [0])) blake_ref.c:242 89 {*movdi_internal}
     (nil))
(insn 140 139 141 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 360 [0x168])) [3 state_18(D)->salt64+16 S8 A64])
        (const_int 0 [0])) blake_ref.c:243 89 {*movdi_internal}
     (nil))
(insn 141 140 142 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 368 [0x170])) [3 state_18(D)->salt64+24 S8 A64])
        (const_int 0 [0])) blake_ref.c:244 89 {*movdi_internal}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101

;; basic block 12, loop depth 0, count 0, freq 205, maybe hot
;;  prev block 11, next block 13, flags: (HOT_PARTITION, RTL)
;;  pred:       11 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u152(6){ }u153(7){ }u154(16){ }u155(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  def 	 88
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; live  gen 	 88
;; live  kill	
(code_label 142 141 143 12 74 "" [1 uses])
(note 143 142 144 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 12 (set (mem:SI (reg/v/f:DI 100 [ state ]) [2 state_18(D)->hashbitlen+0 S4 A64])
        (reg/v:SI 101 [ hashbitlen ])) blake_ref.c:251 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 101 [ hashbitlen ])
        (nil)))
(insn 145 144 146 12 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 4 [0x4])) [2 state_18(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:252 90 {*movsi_internal}
     (nil))
(insn 146 145 147 12 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 8 [0x8])) [2 state_18(D)->init+0 S4 A64])
        (const_int 1 [0x1])) blake_ref.c:253 90 {*movsi_internal}
     (nil))
(insn 147 146 6 12 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 12 [0xc])) [2 state_18(D)->nullt+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:254 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 100 [ state ])
        (nil)))
(insn 6 147 148 12 (set (reg:SI 88 [ D.5935 ])
        (const_int 0 [0])) blake_ref.c:256 90 {*movsi_internal}
     (nil))
;;  succ:       13 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 13, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 12, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       7 [67.0%] 
;;              12 [100.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u161(6){ }u162(7){ }u163(16){ }u164(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 0 [ax]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 148 6 149 13 75 "" [1 uses])
(note 149 148 154 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 154 149 155 13 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ D.5935 ])) blake_ref.c:257 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 88 [ D.5935 ])
        (nil)))
(insn 155 154 0 13 (use (reg/i:SI 0 ax)) blake_ref.c:257 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function AddSalt (AddSalt, funcdef_no=14, decl_uid=3185, cgraph_uid=14, symbol_order=22)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
verify found no changes in insn with uid = 57.
ending the processing of deferred insns


AddSalt

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 17[flags]
;;  ref usage 	r0={1d,2u} r1={1d,1u} r2={1d,1u} r6={1d,6u} r7={1d,6u} r16={1d,5u,2e} r17={2d,2u} r20={1d,6u} r21={1d} r22={1d} r23={1d} r24={1d} r37={1d} r38={1d} r87={3d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r143={1d,10u} r144={1d,8u,6e} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} 
;;    total ref usage 108{36d,64u,8e} in 36{36 regular + 0 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 143 144
;; live  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  gen 	 17 [flags] 87 143 144
;; live  kill	
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 143 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:261 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ state ])
        (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
            (nil))))
(insn 3 2 4 2 (set (reg/v/f:DI 144 [ salt ])
        (reg:DI 1 dx [ salt ])) blake_ref.c:261 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ salt ])
        (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [4 salt+0 S8 A64])
            (nil))))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 10 2 (set (reg:SI 87 [ D.5941 ])
        (const_int 1 [0x1])) blake_ref.c:269 90 {*movsi_internal}
     (nil))
(insn 10 5 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                    (const_int 8 [0x8])) [2 state_4(D)->init+0 S4 A64])
            (const_int 1 [0x1]))) blake_ref.c:268 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 44)
            (pc))) blake_ref.c:268 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6218 (nil)))
 -> 44)
;;  succ:       6 [62.2%] 
;;              3 [37.8%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 143 144
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 143 144

;; basic block 3, loop depth 0, count 0, freq 3782, maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [37.8%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u10(6){ }u11(7){ }u12(16){ }u13(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 144
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 144
;; live  gen 	 17 [flags]
;; live  kill	
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 143 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:271 7 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) blake_ref.c:271 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 6100 (nil)))
 -> 30)
;;  succ:       4 [39.0%]  (FALLTHRU)
;;              5 [61.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 144
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 144

;; basic block 4, loop depth 0, count 0, freq 1475, maybe hot
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [39.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u16(6){ }u17(7){ }u18(16){ }u19(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 144
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 144
;; lr  def 	 87 90 91 92 93 145 146 147 148
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 144
;; live  gen 	 87 90 91 92 93 145 146 147 148
;; live  kill	
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 145 [ MEM[(const BitSequence *)salt_7(D)] ])
        (mem:SI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:SI 90 [ D.5943 ])
        (bswap:SI (reg:SI 145 [ MEM[(const BitSequence *)salt_7(D)] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 145 [ MEM[(const BitSequence *)salt_7(D)] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8]))
            (nil))))
(insn 18 17 19 4 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 120 [0x78])) [2 state_4(D)->salt32+0 S4 A64])
        (reg:SI 90 [ D.5943 ])) blake_ref.c:272 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90 [ D.5943 ])
        (nil)))
(insn 19 18 20 4 (set (reg:SI 146 [ MEM[(const BitSequence *)salt_7(D) + 4B] ])
        (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:SI 91 [ D.5943 ])
        (bswap:SI (reg:SI 146 [ MEM[(const BitSequence *)salt_7(D) + 4B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 146 [ MEM[(const BitSequence *)salt_7(D) + 4B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                        (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8]))
            (nil))))
(insn 21 20 22 4 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 124 [0x7c])) [2 state_4(D)->salt32+4 S4 A32])
        (reg:SI 91 [ D.5943 ])) blake_ref.c:273 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91 [ D.5943 ])
        (nil)))
(insn 22 21 23 4 (set (reg:SI 147 [ MEM[(const BitSequence *)salt_7(D) + 8B] ])
        (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 92 [ D.5943 ])
        (bswap:SI (reg:SI 147 [ MEM[(const BitSequence *)salt_7(D) + 8B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 147 [ MEM[(const BitSequence *)salt_7(D) + 8B] ])
        (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                        (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8]))
            (nil))))
(insn 24 23 25 4 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 128 [0x80])) [2 state_4(D)->salt32+8 S4 A64])
        (reg:SI 92 [ D.5943 ])) blake_ref.c:274 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ D.5943 ])
        (nil)))
(insn 25 24 26 4 (set (reg:SI 148 [ MEM[(const BitSequence *)salt_7(D) + 12B] ])
        (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)salt_7(D) + 12B]+0 S4 A8])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 144 [ salt ])
        (nil)))
(insn 26 25 27 4 (set (reg:SI 93 [ D.5943 ])
        (bswap:SI (reg:SI 148 [ MEM[(const BitSequence *)salt_7(D) + 12B] ]))) 765 {*bswapsi2}
     (expr_list:REG_DEAD (reg:SI 148 [ MEM[(const BitSequence *)salt_7(D) + 12B] ])
        (nil)))
(insn 27 26 7 4 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 132 [0x84])) [2 state_4(D)->salt32+12 S4 A32])
        (reg:SI 93 [ D.5943 ])) blake_ref.c:275 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 143 [ state ])
        (expr_list:REG_DEAD (reg:SI 93 [ D.5943 ])
            (nil))))
(insn 7 27 57 4 (set (reg:SI 87 [ D.5941 ])
        (const_int 0 [0])) blake_ref.c:284 90 {*movsi_internal}
     (nil))
(jump_insn 57 7 58 4 (set (pc)
        (label_ref 44)) -1
     (nil)
 -> 44)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 58 57 30)
;; basic block 5, loop depth 0, count 0, freq 2307, maybe hot
;;  prev block 4, next block 6, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [61.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u39(6){ }u40(7){ }u41(16){ }u42(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 144
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 144
;; lr  def 	 87 94 95 96 97 149 150 151 152
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 144
;; live  gen 	 87 94 95 96 97 149 150 151 152
;; live  kill	
(code_label 30 58 31 5 83 "" [1 uses])
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:DI 149 [ MEM[(const BitSequence *)salt_7(D)] ])
        (mem:DI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 94 [ D.5944 ])
        (bswap:DI (reg:DI 149 [ MEM[(const BitSequence *)salt_7(D)] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 149 [ MEM[(const BitSequence *)salt_7(D)] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8]))
            (nil))))
(insn 34 33 35 5 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 344 [0x158])) [3 state_4(D)->salt64+0 S8 A64])
        (reg:DI 94 [ D.5944 ])) blake_ref.c:278 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94 [ D.5944 ])
        (nil)))
(insn 35 34 36 5 (set (reg:DI 150 [ MEM[(const BitSequence *)salt_7(D) + 8B] ])
        (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:DI 95 [ D.5944 ])
        (bswap:DI (reg:DI 150 [ MEM[(const BitSequence *)salt_7(D) + 8B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 150 [ MEM[(const BitSequence *)salt_7(D) + 8B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                        (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8]))
            (nil))))
(insn 37 36 38 5 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 352 [0x160])) [3 state_4(D)->salt64+8 S8 A64])
        (reg:DI 95 [ D.5944 ])) blake_ref.c:279 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 95 [ D.5944 ])
        (nil)))
(insn 38 37 39 5 (set (reg:DI 151 [ MEM[(const BitSequence *)salt_7(D) + 16B] ])
        (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:DI 96 [ D.5944 ])
        (bswap:DI (reg:DI 151 [ MEM[(const BitSequence *)salt_7(D) + 16B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 151 [ MEM[(const BitSequence *)salt_7(D) + 16B] ])
        (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                        (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8]))
            (nil))))
(insn 40 39 41 5 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 360 [0x168])) [3 state_4(D)->salt64+16 S8 A64])
        (reg:DI 96 [ D.5944 ])) blake_ref.c:280 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96 [ D.5944 ])
        (nil)))
(insn 41 40 42 5 (set (reg:DI 152 [ MEM[(const BitSequence *)salt_7(D) + 24B] ])
        (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)salt_7(D) + 24B]+0 S8 A8])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 144 [ salt ])
        (nil)))
(insn 42 41 43 5 (set (reg:DI 97 [ D.5944 ])
        (bswap:DI (reg:DI 152 [ MEM[(const BitSequence *)salt_7(D) + 24B] ]))) 766 {*bswapdi2}
     (expr_list:REG_DEAD (reg:DI 152 [ MEM[(const BitSequence *)salt_7(D) + 24B] ])
        (nil)))
(insn 43 42 6 5 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 368 [0x170])) [3 state_4(D)->salt64+24 S8 A64])
        (reg:DI 97 [ D.5944 ])) blake_ref.c:281 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 143 [ state ])
        (expr_list:REG_DEAD (reg:DI 97 [ D.5944 ])
            (nil))))
(insn 6 43 44 5 (set (reg:SI 87 [ D.5941 ])
        (const_int 0 [0])) blake_ref.c:284 90 {*movsi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 6, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 5, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [62.2%] 
;;              5 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u62(6){ }u63(7){ }u64(16){ }u65(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 44 6 45 6 82 "" [2 uses])
(note 45 44 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 45 51 6 (set (reg/i:SI 0 ax)
        (reg:SI 87 [ D.5941 ])) blake_ref.c:285 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 87 [ D.5941 ])
        (nil)))
(insn 51 50 0 6 (use (reg/i:SI 0 ax)) blake_ref.c:285 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function Update (Update, funcdef_no=17, decl_uid=3189, cgraph_uid=17, symbol_order=25)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
verify found no changes in insn with uid = 46.
ending the processing of deferred insns


Update

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={3d,2u} r1={5d,3u} r2={5d,3u} r6={1d,9u} r7={1d,11u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,8u,3e} r17={7d,5u} r18={2d} r19={2d} r20={1d,9u} r21={3d} r22={3d} r23={3d} r24={3d} r25={2d} r26={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={5d,3u} r38={3d} r39={2d} r40={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r91={1d,5u} r92={1d,2u} r93={1d,4u} 
;;    total ref usage 214{147d,64u,3e} in 24{22 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags] 91 92 93
;; live  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; live  gen 	 17 [flags] 91 92 93
;; live  kill	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/v/f:DI 91 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:397 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ state ])
        (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
            (nil))))
(insn 3 2 4 2 (set (reg/v/f:DI 92 [ data ])
        (reg:DI 1 dx [ data ])) blake_ref.c:397 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ data ])
        (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [4 data+0 S8 A64])
            (nil))))
(insn 4 3 5 2 (set (reg/v:DI 93 [ databitlen ])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:397 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ databitlen ])
        (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
            (nil))))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 91 [ state ]) [2 state_2(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 24)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93

;; basic block 3, loop depth 0, count 0, freq 5000, maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u12(6){ }u13(7){ }u14(16){ }u15(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; live  gen 	 17 [flags]
;; live  kill	
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 93 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2071 (nil)))
 -> 16)
;;  succ:       4 [79.3%]  (FALLTHRU)
;;              5 [20.7%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93

;; basic block 4, loop depth 0, count 0, freq 3964, maybe hot
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [79.3%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u18(6){ }u19(7){ }u20(16){ }u21(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; live  gen 	 17 [flags]
;; live  kill	
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 91 [ state ])
                    (const_int 4 [0x4])) [2 state_2(D)->datalen+0 S4 A32])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 37)
;;  succ:       9 [72.0%] 
;;              5 [28.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93

;; basic block 5, loop depth 0, count 0, freq 2146, maybe hot
;;  prev block 4, next block 6, flags: (HOT_PARTITION, RTL)
;;  pred:       4 [28.0%]  (FALLTHRU)
;;              3 [20.7%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u24(6){ }u25(7){ }u26(16){ }u27(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(code_label 16 15 17 5 89 "" [1 uses])
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 5 (set (reg:DI 37 r8)
        (reg/v:DI 93 [ databitlen ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 93 [ databitlen ])
        (nil)))
(insn 19 18 20 5 (set (reg:DI 1 dx)
        (reg/v/f:DI 92 [ data ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 92 [ data ])
        (nil)))
(insn 20 19 21 5 (set (reg:DI 2 cx)
        (reg/v/f:DI 91 [ state ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 91 [ state ])
        (nil)))
(call_insn 21 20 46 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 46 21 47 5 (set (pc)
        (label_ref 37)) -1
     (nil)
 -> 37)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 47 46 24)
;; basic block 6, loop depth 0, count 0, freq 5000, maybe hot
;;  prev block 5, next block 7, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u35(6){ }u36(7){ }u37(16){ }u38(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 24 47 25 6 88 "" [1 uses])
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 93 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 27 26 28 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 31)
;;  succ:       7 [71.0%]  (FALLTHRU)
;;              8 [29.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93

;; basic block 7, loop depth 0, count 0, freq 3550, maybe hot
;;  prev block 6, next block 8, flags: (HOT_PARTITION, RTL)
;;  pred:       6 [71.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u41(6){ }u42(7){ }u43(16){ }u44(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; live  gen 	 17 [flags]
;; live  kill	
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 91 [ state ])
                    (const_int 4 [0x4])) [2 state_2(D)->datalen+0 S4 A32])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (nil))
(jump_insn 30 29 31 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6218 (nil)))
 -> 37)
;;  succ:       9 [62.2%] 
;;              8 [37.8%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93

;; basic block 8, loop depth 0, count 0, freq 2793, maybe hot
;;  prev block 7, next block 9, flags: (HOT_PARTITION, RTL)
;;  pred:       7 [37.8%]  (FALLTHRU)
;;              6 [29.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u47(6){ }u48(7){ }u49(16){ }u50(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 92 93
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(code_label 31 30 32 8 91 "" [1 uses])
(note 32 31 33 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 8 (set (reg:DI 37 r8)
        (reg/v:DI 93 [ databitlen ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 93 [ databitlen ])
        (nil)))
(insn 34 33 35 8 (set (reg:DI 1 dx)
        (reg/v/f:DI 92 [ data ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 92 [ data ])
        (nil)))
(insn 35 34 36 8 (set (reg:DI 2 cx)
        (reg/v/f:DI 91 [ state ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 91 [ state ])
        (nil)))
(call_insn 36 35 37 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 8, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       7 [62.2%] 
;;              8 [100.0%]  (FALLTHRU)
;;              4 [72.0%] 
;;              5 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u58(6){ }u59(7){ }u60(16){ }u61(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 37 36 38 9 90 "" [3 uses])
(note 38 37 43 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 43 38 44 9 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) blake_ref.c:403 90 {*movsi_internal}
     (nil))
(insn 44 43 0 9 (use (reg/i:SI 0 ax)) blake_ref.c:403 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function Final (Final, funcdef_no=20, decl_uid=3192, cgraph_uid=20, symbol_order=28)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
verify found no changes in insn with uid = 1107.
verify found no changes in insn with uid = 1109.
verify found no changes in insn with uid = 1111.
verify found no changes in insn with uid = 1113.
verify found no changes in insn with uid = 1115.
verify found no changes in insn with uid = 1117.
verify found no changes in insn with uid = 1119.
verify found no changes in insn with uid = 1121.
verify found no changes in insn with uid = 1123.
verify found no changes in insn with uid = 1125.
verify found no changes in insn with uid = 1127.
verify found no changes in insn with uid = 1129.
verify found no changes in insn with uid = 1131.
verify found no changes in insn with uid = 1133.
verify found no changes in insn with uid = 1135.
verify found no changes in insn with uid = 1137.
verify found no changes in insn with uid = 1139.
verify found no changes in insn with uid = 1141.
verify found no changes in insn with uid = 1143.
verify found no changes in insn with uid = 1145.
verify found no changes in insn with uid = 1147.
verify found no changes in insn with uid = 1150.
verify found no changes in insn with uid = 1152.
verify found no changes in insn with uid = 1154.
verify found no changes in insn with uid = 1156.
rescanning insn with uid = 1158.
rescanning insn with uid = 1159.
ending the processing of deferred insns


Final

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={34d,2u} r1={67d,34u} r2={67d,34u} r6={1d,84u} r7={1d,117u} r8={33d} r9={33d} r10={33d} r11={33d} r12={33d} r13={33d} r14={33d} r15={33d} r16={1d,83u,2e} r17={217d,44u} r18={33d} r19={33d} r20={1d,133u,17e} r21={34d} r22={34d} r23={34d} r24={34d} r25={32d} r26={32d} r29={32d} r30={32d} r31={32d} r32={32d} r33={32d} r34={32d} r35={32d} r36={32d} r37={66d,32u} r38={34d} r39={33d} r40={33d} r53={33d} r54={33d} r55={33d} r56={33d} r57={33d} r58={33d} r59={33d} r60={33d} r61={33d} r62={33d} r63={33d} r64={33d} r65={33d} r66={33d} r67={33d} r68={33d} r69={33d} r70={33d} r71={33d} r72={33d} r73={33d} r74={33d} r75={33d} r76={33d} r77={33d} r78={33d} r79={33d} r80={33d} r87={3d,1u} r88={1d,5u} r89={1d,19u,3e} r91={1d,9u} r92={2d,5u} r109={2d,2u} r111={1d,2u} r115={3d,1u} r128={1d,2u} r137={1d,3u,1e} r139={1d,2u} r143={2d,2u} r146={1d,3u,1e} r148={1d,2u} r241={1d,10u} r242={1d,21u,6e} r243={1d,2u} r244={1d,5u} r245={2d,6u} r246={1d,4u} r263={1d,4u} r283={2d,1u} r287={1d,3u} r288={2d,2u} r290={1d,2u} r292={3d,1u} r298={1d,2u,1e} r305={1d,2u} r317={1d,3u,1e} r319={1d,2u} r327={2d,2u} r330={1d,3u,1e} r332={1d,2u} r594={2d,1u} r603={1d,2u} r609={4d,2u} r612={7d,7u} r616={4d,2u} r633={1d,220u,10e} r634={1d,96u} r635={1d,1u} r636={1d,1u} r637={1d,1u} r638={1d,1u} r639={1d,1u} r640={1d,1u} r642={1d,1u} r643={1d,1u} r644={1d,1u} r645={1d,1u} r646={1d,1u} r651={1d,1u} r652={1d,1u} r653={1d,1u} r654={1d,1u} r655={1d,1u} r656={1d,1u} r657={1d,1u} r658={1d,1u} r659={1d,1u} r660={1d,1u} r661={1d,2u} r662={1d,1u} r663={1d,1u} r664={1d,3u,2e} r665={1d,1u,1e} r666={1d,1u} r667={1d,1u} r668={1d,1u} r669={1d,3u} r670={1d,1u} r671={1d,1u} r672={1d,1u} r674={1d,1u} r676={1d,1u} r678={1d,1u} r679={1d,1u} r680={1d,1u} r685={1d,1u} r686={1d,1u} r687={1d,1u} r688={1d,1u} r693={1d,1u} r694={1d,1u} r695={1d,1u} r696={1d,1u} r697={1d,1u} r698={1d,1u} r699={1d,1u} r701={1d,1u} r703={1d,1u} r704={1d,1u} r705={1d,1u} r706={1d,1u} r708={1d,1u} r710={1d,1u} r711={1d,1u} r712={1d,1u} r713={1d,1u} r715={1d,1u} r717={1d,1u} r718={1d,1u} r719={1d,1u} r720={1d,1u} r722={1d,1u} r724={1d,1u} r725={1d,1u} r726={1d,1u} r727={1d,1u} r729={1d,1u} r731={1d,1u} r732={1d,1u} r733={1d,1u} r734={1d,1u} r736={1d,1u} r738={1d,1u} r739={1d,1u} r740={1d,1u} r741={1d,1u} r743={1d,1u} r745={1d,1u} r746={1d,1u} r747={1d,1u} r748={1d,1u} r750={1d,1u} r752={1d,1u} r753={1d,1u} r754={1d,1u} r755={1d,1u} r756={1d,1u} r757={1d,1u} r758={1d,1u} r759={1d,1u} r760={1d,1u} r761={1d,1u} r762={1d,1u} r763={1d,1u} r764={1d,1u} r765={1d,1u} r766={1d,1u} r768={1d,1u} r769={1d,1u} r770={1d,1u} r771={1d,1u} r772={1d,1u} r777={1d,1u} r778={1d,1u} r779={1d,1u} r780={1d,1u} r781={1d,1u} r782={1d,1u} r783={1d,1u} r784={1d,1u} r785={1d,1u} r786={1d,1u} r787={1d,1u} r788={1d,1u} r789={1d,2u} r790={1d,1u} r791={1d,1u} r792={1d,2u,2e} r793={1d,1u} r794={1d,3u} r795={1d,1u} r796={1d,1u} r797={1d,1u} r798={1d,1u} r799={1d,1u} r801={1d,1u} r803={1d,1u} r804={1d,1u} r805={1d,1u} r806={1d,1u} r807={1d,1u} r808={1d,2u} r809={1d,1u} r810={1d,1u} r811={1d,1u} r817={1d,1u} r818={1d,1u} r819={1d,1u} r820={1d,1u} r821={1d,1u} r822={1d,1u} r823={1d,1u} r824={1d,2u} r825={1d,1u} r826={1d,1u} r827={1d,1u} r833={1d,1u} r834={1d,1u} r835={1d,1u} r836={1d,1u} r837={1d,1u} r840={1d,1u} r843={1d,1u} r844={1d,1u} r846={1d,1u} r847={1d,1u} r850={1d,1u} r852={1d,1u} r853={1d,1u} r854={1d,1u} r855={1d,1u} r858={1d,1u} r861={1d,1u} r862={1d,1u} r864={1d,1u} r865={1d,1u} r868={1d,1u} r870={1d,1u} r871={1d,1u} r872={1d,1u} r873={1d,1u} r876={1d,1u} r879={1d,1u} r880={1d,1u} r882={1d,1u} r883={1d,1u} r886={1d,1u} r888={1d,1u} r889={1d,1u} r890={1d,1u} r891={1d,1u} r894={1d,1u} r897={1d,1u} r898={1d,1u} r900={1d,1u} r901={1d,1u} r904={1d,1u} r906={1d,1u} r907={1d,1u} r908={1d,1u} r909={1d,1u} r912={1d,1u} r915={1d,1u} r916={1d,1u} r918={1d,1u} r919={1d,1u} r922={1d,1u} r924={1d,1u} r925={1d,1u} r926={1d,1u} r927={1d,1u} r930={1d,1u} r933={1d,1u} r934={1d,1u} r936={1d,1u} r937={1d,1u} r940={1d,1u} r942={1d,1u} r943={1d,1u} r944={1d,1u} r945={1d,1u} r948={1d,1u} r951={1d,1u} r952={1d,1u} r954={1d,1u} r955={1d,1u} r958={1d,1u} r960={1d,1u} r961={1d,1u} r962={1d,1u} r963={1d,1u} r966={1d,1u} r969={1d,1u} r970={1d,1u} r972={1d,1u} r973={1d,1u} r976={1d,1u} r978={1d,1u} r979={1d,1u} r980={1d,1u} r981={1d,1u} r983={1d,1u} r984={1d,1u} r985={1d,1u} r987={1d,1u} r988={1d,1u} r989={1d,1u} 
;;    total ref usage 3898{2571d,1279u,48e} in 720{687 regular + 33 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 612 633 634
;; live  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  gen 	 17 [flags] 612 633 634
;; live  kill	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 633 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:653 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ state ])
        (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
            (nil))))
(insn 3 2 4 2 (set (reg/v/f:DI 634 [ hashval ])
        (reg:DI 1 dx [ hashval ])) blake_ref.c:653 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ hashval ])
        (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [4 hashval+0 S8 A64])
            (nil))))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) blake_ref.c:655 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 612 [ D.6033 ])
            (const_int 383 [0x17f]))) blake_ref.c:655 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 405)
            (pc))) blake_ref.c:655 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 6100 (nil)))
 -> 405)
;;  succ:       3 [39.0%]  (FALLTHRU)
;;              40 [61.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 633 634

;; basic block 3, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [39.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u11(6){ }u12(7){ }u13(16){ }u14(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 17 [flags] 88 89 91 92 635 636 637 638 639 640
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 633 634
;; live  gen 	 17 [flags] 88 89 91 92 635 636 637 638 639 640
;; live  kill	 17 [flags]
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 zz+0 S1 A32])
        (const_int 0 [0])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 12 11 13 3 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -19 [0xffffffffffffffed])) [0 zo+0 S1 A8])
        (const_int 1 [0x1])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 13 12 14 3 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0 oz+0 S1 A16])
        (const_int -128 [0xffffffffffffff80])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 14 13 15 3 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -17 [0xffffffffffffffef])) [0 oo+0 S1 A8])
        (const_int -127 [0xffffffffffffff81])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:SI 88 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) blake_ref.c:416 90 {*movsi_internal}
     (nil))
(insn 16 15 18 3 (set (reg:SI 89 [ D.6033 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])) blake_ref.c:416 90 {*movsi_internal}
     (nil))
(note 18 16 19 3 NOTE_INSN_DELETED)
(insn 19 18 1081 3 (set (reg/v:SI 92 [ high ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 52 [0x34])) [2 state_4(D)->t32+4 S4 A32])) blake_ref.c:417 90 {*movsi_internal}
     (nil))
(insn 1081 19 1082 3 (parallel [
            (set (reg:CCC 17 flags)
                (compare:CCC (plus:SI (reg:SI 88 [ D.6032 ])
                        (reg:SI 89 [ D.6033 ]))
                    (reg:SI 88 [ D.6032 ])))
            (set (reg/v:SI 91 [ low ])
                (plus:SI (reg:SI 88 [ D.6032 ])
                    (reg:SI 89 [ D.6033 ])))
        ]) blake_ref.c:419 302 {*addsi3_cc_overflow}
     (nil))
(insn 1082 1081 26 3 (parallel [
            (set (reg/v:SI 92 [ high ])
                (plus:SI (plus:SI (ltu:SI (reg:CCC 17 flags)
                            (const_int 0 [0]))
                        (reg/v:SI 92 [ high ]))
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:419 284 {addsi3_carry}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 26 1082 27 3 (parallel [
            (set (reg:SI 635 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 92 [ high ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 27 26 28 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 msglen+0 S1 A128])
        (subreg:QI (reg:SI 635 [ D.6032 ]) 0)) blake_ref.c:420 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 635 [ D.6032 ])
        (nil)))
(insn 28 27 29 3 (parallel [
            (set (reg:SI 636 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 92 [ high ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 29 28 30 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -15 [0xfffffffffffffff1])) [0 msglen+1 S1 A8])
        (subreg:QI (reg:SI 636 [ D.6032 ]) 0)) blake_ref.c:420 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 636 [ D.6032 ])
        (nil)))
(insn 30 29 31 3 (parallel [
            (set (reg:SI 637 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 92 [ high ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 31 30 32 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -14 [0xfffffffffffffff2])) [0 msglen+2 S1 A16])
        (subreg:QI (reg:SI 637 [ D.6032 ]) 0)) blake_ref.c:420 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 637 [ D.6032 ])
        (nil)))
(insn 32 31 33 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -13 [0xfffffffffffffff3])) [0 msglen+3 S1 A8])
        (subreg:QI (reg/v:SI 92 [ high ]) 0)) blake_ref.c:420 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v:SI 92 [ high ])
        (nil)))
(insn 33 32 34 3 (parallel [
            (set (reg:SI 638 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 91 [ low ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 34 33 35 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 msglen+4 S1 A32])
        (subreg:QI (reg:SI 638 [ D.6032 ]) 0)) blake_ref.c:421 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 638 [ D.6032 ])
        (nil)))
(insn 35 34 36 3 (parallel [
            (set (reg:SI 639 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 91 [ low ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 36 35 37 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -11 [0xfffffffffffffff5])) [0 msglen+5 S1 A8])
        (subreg:QI (reg:SI 639 [ D.6032 ]) 0)) blake_ref.c:421 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 639 [ D.6032 ])
        (nil)))
(insn 37 36 38 3 (parallel [
            (set (reg:SI 640 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 91 [ low ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 38 37 39 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -10 [0xfffffffffffffff6])) [0 msglen+6 S1 A16])
        (subreg:QI (reg:SI 640 [ D.6032 ]) 0)) blake_ref.c:421 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 640 [ D.6032 ])
        (nil)))
(insn 39 38 40 3 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -9 [0xfffffffffffffff7])) [0 msglen+7 S1 A8])
        (subreg:QI (reg/v:SI 91 [ low ]) 0)) blake_ref.c:421 93 {*movqi_internal}
     (nil))
(note 40 39 1159 3 NOTE_INSN_DELETED)
(insn 1159 40 42 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 89 [ D.6033 ])
                (const_int 7 [0x7]))
            (const_int 0 [0]))) blake_ref.c:423 -1
     (nil))
(jump_insn 42 1159 43 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 145)
            (pc))) blake_ref.c:423 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 145)
;;  succ:       4 [50.0%]  (FALLTHRU)
;;              20 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 612 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 612 633 634

;; basic block 4, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [50.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u53(6){ }u54(7){ }u55(16){ }u56(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 612 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(note 43 42 44 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6033 ])
            (const_int 440 [0x1b8]))) blake_ref.c:426 7 {*cmpsi_1}
     (nil))
(jump_insn 45 44 46 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) blake_ref.c:426 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 70)
;;  succ:       5 [28.0%]  (FALLTHRU)
;;              8 [72.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 612 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 612 633 634

;; basic block 5, loop depth 0, count 0, freq 546, maybe hot
;;  prev block 4, next block 6, flags: (HOT_PARTITION, RTL)
;;  pred:       4 [28.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u59(6){ }u60(7){ }u61(16){ }u62(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 612 633
;; lr  def 	 17 [flags] 642
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 612 633 634
;; live  gen 	 17 [flags] 642
;; live  kill	 17 [flags]
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 5 (parallel [
            (set (reg:SI 642)
                (plus:SI (reg:SI 88 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:428 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 88 [ D.6032 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 48 47 49 5 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 642)) blake_ref.c:428 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 642)
        (nil)))
(insn 49 48 50 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 224 [0xe0]))) blake_ref.c:429 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 612 [ D.6033 ])
        (nil)))
(jump_insn 50 49 51 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) blake_ref.c:429 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 60)
;;  succ:       6 [28.0%]  (FALLTHRU)
;;              7 [72.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 6, loop depth 0, count 0, freq 153, maybe hot
;;  prev block 5, next block 7, flags: (HOT_PARTITION, RTL)
;;  pred:       5 [28.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u68(6){ }u69(7){ }u70(16){ }u71(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 115 643
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 115 643
;; live  kill	 17 [flags]
(note 51 50 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 6 (parallel [
            (set (reg/f:DI 643)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -18 [0xffffffffffffffee])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 53 52 54 6 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 54 53 55 6 (set (reg:DI 1 dx)
        (reg/f:DI 643)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 643)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee]))
            (nil))))
(insn 55 54 56 6 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 56 55 57 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 57 56 1107 6 (set (reg:SI 115 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1107 57 1108 6 (set (pc)
        (label_ref 134)) -1
     (nil)
 -> 134)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115 633 634

(barrier 1108 1107 60)
;; basic block 7, loop depth 0, count 0, freq 393, maybe hot
;;  prev block 6, next block 8, flags: (HOT_PARTITION, RTL)
;;  pred:       5 [72.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u81(6){ }u82(7){ }u83(16){ }u84(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 115 644
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 115 644
;; live  kill	 17 [flags]
(code_label 60 1108 61 7 97 "" [1 uses])
(note 61 60 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 7 (parallel [
            (set (reg/f:DI 644)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -17 [0xffffffffffffffef])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 63 62 64 7 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 64 63 65 7 (set (reg:DI 1 dx)
        (reg/f:DI 644)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 644)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -17 [0xffffffffffffffef]))
            (nil))))
(insn 65 64 66 7 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 66 65 67 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 67 66 1109 7 (set (reg:SI 115 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1109 67 1110 7 (set (pc)
        (label_ref 134)) -1
     (nil)
 -> 134)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115 633 634

(barrier 1110 1109 70)
;; basic block 8, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 7, next block 9, flags: (HOT_PARTITION, RTL)
;;  pred:       4 [72.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u94(6){ }u95(7){ }u96(16){ }u97(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 70 1110 71 8 96 "" [1 uses])
(note 71 70 72 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.6033 ])
            (const_int 439 [0x1b7]))) blake_ref.c:435 7 {*cmpsi_1}
     (nil))
(jump_insn 73 72 74 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) blake_ref.c:435 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 81)
;;  succ:       9 [50.0%]  (FALLTHRU)
;;              11 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634

;; basic block 9, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 8, next block 10, flags: (HOT_PARTITION, RTL)
;;  pred:       8 [50.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u100(6){ }u101(7){ }u102(16){ }u103(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(note 74 73 75 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6033 ])
            (const_int 0 [0]))) blake_ref.c:437 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 76 75 77 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 986)
            (pc))) blake_ref.c:437 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 986)
;;  succ:       10 [50.0%]  (FALLTHRU)
;;              82 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634

;; basic block 10, loop depth 0, count 0, freq 351, maybe hot
;;  prev block 9, next block 11, flags: (HOT_PARTITION, RTL)
;;  pred:       9 [50.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u106(6){ }u107(7){ }u108(16){ }u109(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; live  gen 	
;; live  kill	
(note 77 76 78 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 1111 10 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:438 90 {*movsi_internal}
     (nil))
(jump_insn 1111 78 1112 10 (set (pc)
        (label_ref 986)) -1
     (nil)
 -> 986)
;;  succ:       82 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634

(barrier 1112 1111 81)
;; basic block 11, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 10, next block 12, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [50.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u111(6){ }u112(7){ }u113(16){ }u114(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633
;; lr  def 	 17 [flags] 109 111 645 646
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; live  gen 	 17 [flags] 109 111 645 646
;; live  kill	 17 [flags]
(code_label 81 1112 82 11 99 "" [1 uses])
(note 82 81 83 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 11 (parallel [
            (set (reg:SI 109 [ D.6032 ])
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:445 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/v:SI 91 [ low ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 84 83 85 11 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 109 [ D.6032 ])) blake_ref.c:445 90 {*movsi_internal}
     (nil))
(insn 85 84 86 11 (set (reg:SI 646)
        (const_int 512 [0x200])) blake_ref.c:446 90 {*movsi_internal}
     (nil))
(insn 86 85 87 11 (parallel [
            (set (reg:SI 645 [ D.6033 ])
                (minus:SI (reg:SI 646)
                    (reg:SI 89 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:446 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 646)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (const_int 512 [0x200])
                    (reg:SI 89 [ D.6033 ]))
                (nil)))))
(insn 87 86 88 11 (set (reg:DI 111 [ D.6036 ])
        (sign_extend:DI (reg:SI 645 [ D.6033 ]))) blake_ref.c:446 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 645 [ D.6033 ])
        (nil)))
(note 88 87 89 11 NOTE_INSN_DELETED)
(note 89 88 90 11 NOTE_INSN_DELETED)
(insn 90 89 91 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 111 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 91 90 1018 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1030)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1400 (nil)))
 -> 1030)
;;  succ:       13 [14.0%] 
;;              12 [86.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 109 111 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 109 111 633 634

;; basic block 12, loop depth 0, count 0, freq 604, maybe hot
;;  prev block 11, next block 13, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [86.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u126(6){ }u127(7){ }u128(16){ }u129(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 109 111 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 109 111 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(note 1018 91 92 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 92 1018 93 12 NOTE_INSN_DELETED)
(note 93 92 94 12 NOTE_INSN_DELETED)
(insn 94 93 95 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6033 ])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ D.6033 ])
        (nil)))
(jump_insn 95 94 1030 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 8372 (nil)))
 -> 103)
;;  succ:       14 [83.7%] 
;;              13 [16.3%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 111 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 111 633 634

;; basic block 13, loop depth 0, count 0, freq 343, maybe hot
;; Invalid sum of incoming frequencies 196, should be 343
;;  prev block 12, next block 14, flags: (HOT_PARTITION, RTL)
;;  pred:       12 [16.3%]  (FALLTHRU)
;;              11 [14.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u134(6){ }u135(7){ }u136(16){ }u137(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 109
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 109
;; live  kill	
(code_label 1030 95 97 13 146 "" [1 uses])
(note 97 1030 98 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 13 (set (reg:DI 37 r8)
        (reg:DI 111 [ D.6036 ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 111 [ D.6036 ])
        (nil)))
(insn 99 98 100 13 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 100 99 101 13 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 101 100 102 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 102 101 103 13 (set (reg:SI 109 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 633 634

;; basic block 14, loop depth 0, count 0, freq 702, maybe hot
;; Invalid sum of incoming frequencies 849, should be 702
;;  prev block 13, next block 15, flags: (HOT_PARTITION, RTL)
;;  pred:       13 [100.0%]  (FALLTHRU)
;;              12 [83.7%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u145(6){ }u146(7){ }u147(16){ }u148(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 651
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 651
;; live  kill	 17 [flags]
(code_label 103 102 104 14 101 "" [1 uses])
(note 104 103 105 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 14 (parallel [
            (set (reg:SI 651)
                (plus:SI (reg:SI 109 [ D.6032 ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:447 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 109 [ D.6032 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 106 105 107 14 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 651)) blake_ref.c:447 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 651)
        (nil)))
(insn 107 106 108 14 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) 89 {*movdi_internal}
     (nil))
(insn 108 107 109 14 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 109 108 110 14 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 110 109 111 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 111 110 997 14 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:449 90 {*movsi_internal}
     (nil))
;;  succ:       15 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 15, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 14, next block 16, flags: (HOT_PARTITION, RTL)
;;  pred:       14 [100.0%]  (FALLTHRU)
;;              82 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u158(6){ }u159(7){ }u160(16){ }u161(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 997 111 112 15 144 "" [1 uses])
(note 112 997 113 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 224 [0xe0]))) blake_ref.c:451 7 {*cmpsi_1}
     (nil))
(jump_insn 114 113 115 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 123)
            (pc))) blake_ref.c:451 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 123)
;;  succ:       16 [28.0%]  (FALLTHRU)
;;              17 [72.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 16, loop depth 0, count 0, freq 393, maybe hot
;;  prev block 15, next block 17, flags: (HOT_PARTITION, RTL)
;;  pred:       15 [28.0%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u164(6){ }u165(7){ }u166(16){ }u167(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 652
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 652
;; live  kill	 17 [flags]
(note 115 114 116 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 16 (parallel [
            (set (reg/f:DI 652)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 117 116 118 16 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 118 117 119 16 (set (reg:DI 1 dx)
        (reg/f:DI 652)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 652)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec]))
            (nil))))
(insn 119 118 120 16 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 120 119 1113 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1113 120 1114 16 (set (pc)
        (label_ref 130)) -1
     (nil)
 -> 130)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

(barrier 1114 1113 123)
;; basic block 17, loop depth 0, count 0, freq 1011, maybe hot
;;  prev block 16, next block 18, flags: (HOT_PARTITION, RTL)
;;  pred:       15 [72.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u176(6){ }u177(7){ }u178(16){ }u179(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 653
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 653
;; live  kill	 17 [flags]
(code_label 123 1114 124 17 103 "" [1 uses])
(note 124 123 125 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 17 (parallel [
            (set (reg/f:DI 653)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 126 125 127 17 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 127 126 128 17 (set (reg:DI 1 dx)
        (reg/f:DI 653)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 653)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -19 [0xffffffffffffffed]))
            (nil))))
(insn 128 127 129 17 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 129 128 130 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 18, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 17, next block 19, flags: (HOT_PARTITION, RTL)
;;  pred:       17 [100.0%]  (FALLTHRU)
;;              16 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u188(6){ }u189(7){ }u190(16){ }u191(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 17 [flags] 115 654
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 115 654
;; live  kill	 17 [flags]
(code_label 130 129 131 18 104 "" [1 uses])
(note 131 130 132 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 133 18 (set (reg:SI 654 [ state_4(D)->t32 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) blake_ref.c:455 90 {*movsi_internal}
     (nil))
(insn 133 132 134 18 (parallel [
            (set (reg:SI 115 [ D.6032 ])
                (plus:SI (reg:SI 654 [ state_4(D)->t32 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:455 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 654 [ state_4(D)->t32 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                    (const_int -8 [0xfffffffffffffff8]))
                (nil)))))
;;  succ:       19 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115 633 634

;; basic block 19, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 18, next block 20, flags: (HOT_PARTITION, RTL)
;;  pred:       18 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;;              7 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u195(6){ }u196(7){ }u197(16){ }u198(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 655 656
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 655 656
;; live  kill	 17 [flags]
(code_label 134 133 135 19 98 "" [2 uses])
(note 135 134 136 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 19 (parallel [
            (set (reg:SI 655)
                (plus:SI (reg:SI 115 [ D.6032 ])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:457 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 115 [ D.6032 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 137 136 138 19 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 655)) blake_ref.c:457 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 655)
        (nil)))
(insn 138 137 139 19 (parallel [
            (set (reg/f:DI 656)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 139 138 140 19 (set (reg:DI 37 r8)
        (const_int 64 [0x40])) 89 {*movdi_internal}
     (nil))
(insn 140 139 141 19 (set (reg:DI 1 dx)
        (reg/f:DI 656)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 656)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))
(insn 141 140 142 19 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 142 141 1115 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1115 142 1116 19 (set (pc)
        (label_ref 308)) -1
     (nil)
 -> 308)
;;  succ:       38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

(barrier 1116 1115 145)
;; basic block 20, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 19, next block 21, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [50.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u210(6){ }u211(7){ }u212(16){ }u213(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 633
;; lr  def 	 17 [flags] 128 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 674
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 612 633 634
;; live  gen 	 17 [flags] 128 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 674
;; live  kill	 17 [flags]
(code_label 145 1116 146 20 95 "" [1 uses])
(note 146 145 148 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 148 146 149 20 (parallel [
            (set (reg:SI 658)
                (plus:SI (reg:SI 89 [ D.6033 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 149 148 150 20 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 89 [ D.6033 ])
            (const_int 0 [0]))) blake_ref.c:464 3 {*cmpsi_ccno_1}
     (nil))
(insn 150 149 151 20 (set (reg:SI 657 [ D.6033 ])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 658)
            (reg:SI 89 [ D.6033 ]))) blake_ref.c:464 951 {*movsicc_noc}
     (expr_list:REG_DEAD (reg:SI 658)
        (expr_list:REG_DEAD (reg:CCGOC 17 flags)
            (nil))))
(insn 151 150 153 20 (parallel [
            (set (reg:SI 659)
                (ashiftrt:SI (reg:SI 657 [ D.6033 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 657 [ D.6033 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (div:SI (reg:SI 89 [ D.6033 ])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 153 151 154 20 (parallel [
            (set (reg:SI 660)
                (ashiftrt:SI (reg:SI 89 [ D.6033 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 538 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 154 153 155 20 (parallel [
            (set (reg:SI 661)
                (lshiftrt:SI (reg:SI 660)
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 660)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 155 154 156 20 (parallel [
            (set (reg:SI 662)
                (plus:SI (reg:SI 89 [ D.6033 ])
                    (reg:SI 661)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 156 155 157 20 (parallel [
            (set (reg:SI 663)
                (and:SI (reg:SI 662)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 381 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 662)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 157 156 159 20 (parallel [
            (set (reg:SI 664)
                (minus:SI (reg:SI 663)
                    (reg:SI 661)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 663)
        (expr_list:REG_DEAD (reg:SI 661)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 159 157 160 20 (set (reg:SI 666)
        (const_int 8 [0x8])) blake_ref.c:465 90 {*movsi_internal}
     (nil))
(insn 160 159 161 20 (parallel [
            (set (reg:SI 665 [ D.6033 ])
                (minus:SI (reg:SI 666)
                    (reg:SI 664)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 666)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (const_int 8 [0x8])
                    (reg:SI 664))
                (nil)))))
(insn 161 160 162 20 (set (reg:SI 668)
        (const_int 255 [0xff])) blake_ref.c:465 90 {*movsi_internal}
     (nil))
(insn 162 161 163 20 (parallel [
            (set (reg:SI 667 [ D.6033 ])
                (ashift:SI (reg:SI 668)
                    (subreg:QI (reg:SI 665 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 668)
        (expr_list:REG_DEAD (reg:SI 665 [ D.6033 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (ashift:SI (const_int 255 [0xff])
                        (subreg:QI (reg:SI 665 [ D.6033 ]) 0))
                    (nil))))))
(insn 163 162 164 20 (set (reg:DI 669 [ D.6033 ])
        (sign_extend:DI (reg:SI 659))) blake_ref.c:464 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 659)
        (nil)))
(insn 164 163 165 20 (parallel [
            (set (reg:QI 670 [ D.6037 ])
                (and:QI (subreg:QI (reg:SI 667 [ D.6033 ]) 0)
                    (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                                (reg:DI 669 [ D.6033 ]))
                            (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 384 {*andqi_1}
     (expr_list:REG_DEAD (reg:SI 667 [ D.6033 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 165 164 166 20 (set (reg:SI 672)
        (const_int 128 [0x80])) blake_ref.c:465 90 {*movsi_internal}
     (nil))
(insn 166 165 167 20 (parallel [
            (set (reg:SI 671 [ D.6033 ])
                (ashiftrt:SI (reg:SI 672)
                    (subreg:QI (reg:SI 664) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 672)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashiftrt:SI (const_int 128 [0x80])
                    (subreg:QI (reg:SI 664) 0))
                (nil)))))
(insn 167 166 169 20 (parallel [
            (set (reg:QI 128 [ D.6034 ])
                (xor:QI (reg:QI 670 [ D.6037 ])
                    (subreg:QI (reg:SI 671 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 406 {*xorqi_1}
     (expr_list:REG_DEAD (reg:SI 671 [ D.6033 ])
        (expr_list:REG_DEAD (reg:QI 670 [ D.6037 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 169 167 170 20 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 669 [ D.6033 ]))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (reg:QI 128 [ D.6034 ])) blake_ref.c:465 93 {*movqi_internal}
     (nil))
(insn 170 169 171 20 (parallel [
            (set (reg:SI 674 [ D.6035 ])
                (plus:SI (reg:SI 89 [ D.6033 ])
                    (const_int -441 [0xfffffffffffffe47])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:467 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 171 170 172 20 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 674 [ D.6035 ])
            (const_int 5 [0x5]))) blake_ref.c:467 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 674 [ D.6035 ])
        (nil)))
(jump_insn 172 171 173 20 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 187)
            (pc))) blake_ref.c:467 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 187)
;;  succ:       21 [50.0%]  (FALLTHRU)
;;              24 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 128 612 633 634 664 669
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 91 128 612 633 634 664 669

;; basic block 21, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 20, next block 22, flags: (HOT_PARTITION, RTL)
;;  pred:       20 [50.0%]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u249(6){ }u250(7){ }u251(16){ }u252(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 128 612 633 634 664 669
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 128 612 633 634 664 669
;; live  gen 	 17 [flags]
;; live  kill	
(note 173 172 174 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 224 [0xe0]))) blake_ref.c:469 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 612 [ D.6033 ])
        (nil)))
(jump_insn 175 174 176 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 180)
            (pc))) blake_ref.c:469 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 180)
;;  succ:       23 [28.0%] 
;;              22 [72.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 128 633 634 664 669
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 128 633 634 664 669

;; basic block 22, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 21, next block 23, flags: (HOT_PARTITION, RTL)
;;  pred:       21 [72.0%]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u255(6){ }u256(7){ }u257(16){ }u258(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 128 633 634 664 669
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 633 669
;; lr  def 	 17 [flags] 676
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 128 633 634 664 669
;; live  gen 	 676
;; live  kill	 17 [flags]
(note 176 175 178 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 178 176 179 22 (parallel [
            (set (reg:QI 676)
                (xor:QI (reg:QI 128 [ D.6034 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:472 406 {*xorqi_1}
     (expr_list:REG_DEAD (reg:QI 128 [ D.6034 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 179 178 180 22 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 669 [ D.6033 ]))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (reg:QI 676)) blake_ref.c:472 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 676)
        (expr_list:REG_DEAD (reg:DI 669 [ D.6033 ])
            (nil))))
;;  succ:       23 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 633 634 664
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 633 634 664

;; basic block 23, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 22, next block 24, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       21 [28.0%] 
;;              22 [100.0%]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u263(6){ }u264(7){ }u265(16){ }u266(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 633 634 664
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 633 664
;; lr  def 	 87
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 633 634 664
;; live  gen 	 87
;; live  kill	
(code_label 180 179 181 23 107 "" [1 uses])
(note 181 180 182 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(note 182 181 183 23 NOTE_INSN_DELETED)
(insn 183 182 184 23 (set (reg:SI 87 [ D.6031 ])
        (plus:SI (plus:SI (reg:SI 88 [ D.6032 ])
                (reg:SI 664))
            (const_int -8 [0xfffffffffffffff8]))) blake_ref.c:473 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 88 [ D.6032 ])
        (expr_list:REG_DEAD (reg:SI 664)
            (nil))))
(insn 184 183 1117 23 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 448 [0x1c0])) blake_ref.c:475 90 {*movsi_internal}
     (nil))
(jump_insn 1117 184 1118 23 (set (pc)
        (label_ref 299)) -1
     (nil)
 -> 299)
;;  succ:       37 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 633 634

(barrier 1118 1117 187)
;; basic block 24, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 23, next block 25, flags: (HOT_PARTITION, RTL)
;;  pred:       20 [50.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u271(6){ }u272(7){ }u273(16){ }u274(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 612 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 187 1118 188 24 106 "" [1 uses])
(note 188 187 189 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 189 188 190 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.6033 ])
            (const_int 439 [0x1b7]))) blake_ref.c:478 7 {*cmpsi_1}
     (nil))
(jump_insn 190 189 191 24 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 218)
            (pc))) blake_ref.c:478 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 218)
;;  succ:       25 [29.0%]  (FALLTHRU)
;;              28 [71.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 612 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 612 633 634

;; basic block 25, loop depth 0, count 0, freq 283, maybe hot
;;  prev block 24, next block 26, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       24 [29.0%]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u277(6){ }u278(7){ }u279(16){ }u280(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633
;; lr  def 	 17 [flags] 137 139 609 678 679 680
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 612 633 634
;; live  gen 	 17 [flags] 137 139 609 678 679 680
;; live  kill	 17 [flags]
(note 191 190 192 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 25 (parallel [
            (set (reg:SI 609 [ D.6031 ])
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:480 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/v:SI 91 [ low ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 193 192 194 25 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 609 [ D.6031 ])) blake_ref.c:480 90 {*movsi_internal}
     (nil))
(insn 194 193 195 25 (parallel [
            (set (reg:SI 678 [ D.6035 ])
                (and:SI (reg:SI 89 [ D.6033 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:481 381 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ D.6033 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 195 194 196 25 (parallel [
            (set (reg:SI 137 [ D.6033 ])
                (plus:SI (reg:SI 678 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:481 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 678 [ D.6035 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 196 195 197 25 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 137 [ D.6033 ])) blake_ref.c:481 90 {*movsi_internal}
     (nil))
(insn 197 196 198 25 (set (reg:SI 680)
        (const_int 440 [0x1b8])) blake_ref.c:482 90 {*movsi_internal}
     (nil))
(insn 198 197 199 25 (parallel [
            (set (reg:SI 679 [ D.6033 ])
                (minus:SI (reg:SI 680)
                    (reg:SI 137 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:482 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 680)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (const_int 440 [0x1b8])
                    (reg:SI 137 [ D.6033 ]))
                (nil)))))
(insn 199 198 200 25 (set (reg:DI 139 [ D.6036 ])
        (sign_extend:DI (reg:SI 679 [ D.6033 ]))) blake_ref.c:482 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 679 [ D.6033 ])
        (nil)))
(note 200 199 201 25 NOTE_INSN_DELETED)
(note 201 200 202 25 NOTE_INSN_DELETED)
(insn 202 201 203 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 139 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 203 202 1020 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1031)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1400 (nil)))
 -> 1031)
;;  succ:       27 [14.0%] 
;;              26 [86.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 137 139 609 612 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 137 139 609 612 633 634

;; basic block 26, loop depth 0, count 0, freq 243, maybe hot
;;  prev block 25, next block 27, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       25 [86.0%]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u296(6){ }u297(7){ }u298(16){ }u299(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 137 139 609 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 137
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 137 139 609 612 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(note 1020 203 204 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(note 204 1020 205 26 NOTE_INSN_DELETED)
(note 205 204 206 26 NOTE_INSN_DELETED)
(insn 206 205 207 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 137 [ D.6033 ])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 137 [ D.6033 ])
        (nil)))
(jump_insn 207 206 1031 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 276)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 8372 (nil)))
 -> 276)
;;  succ:       34 [83.7%] 
;;              27 [16.3%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139 609 612 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139 609 612 633 634

;; basic block 27, loop depth 0, count 0, freq 61, maybe hot
;;  prev block 26, next block 28, flags: (HOT_PARTITION, RTL)
;;  pred:       26 [16.3%]  (FALLTHRU)
;;              25 [14.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u304(6){ }u305(7){ }u306(16){ }u307(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 609 612
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 609 612
;; live  kill	
(code_label 1031 207 209 27 147 "" [1 uses])
(note 209 1031 210 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 27 (set (reg:DI 37 r8)
        (reg:DI 139 [ D.6036 ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 139 [ D.6036 ])
        (nil)))
(insn 211 210 212 27 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 212 211 213 27 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 213 212 214 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 214 213 215 27 (set (reg:SI 609 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 215 214 1119 27 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1119 215 1120 27 (set (pc)
        (label_ref 276)) -1
     (nil)
 -> 276)
;;  succ:       34 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 609 612 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 609 612 633 634

(barrier 1120 1119 218)
;; basic block 28, loop depth 0, count 0, freq 692, maybe hot
;;  prev block 27, next block 29, flags: (HOT_PARTITION, RTL)
;;  pred:       24 [71.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u316(6){ }u317(7){ }u318(16){ }u319(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 218 1120 219 28 109 "" [1 uses])
(note 219 218 220 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 220 219 221 28 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.6033 ])
            (const_int 504 [0x1f8]))) blake_ref.c:485 7 {*cmpsi_1}
     (nil))
(jump_insn 221 220 222 28 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 240)
            (pc))) blake_ref.c:485 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 240)
;;  succ:       29 [29.0%]  (FALLTHRU)
;;              30 [71.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634

;; basic block 29, loop depth 0, count 0, freq 201, maybe hot
;;  prev block 28, next block 30, flags: (HOT_PARTITION, RTL)
;;  pred:       28 [29.0%]  (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u322(6){ }u323(7){ }u324(16){ }u325(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 609 612 685
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 609 612 685
;; live  kill	 17 [flags]
(note 222 221 223 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 223 222 224 29 (parallel [
            (set (reg:SI 685)
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:487 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/v:SI 91 [ low ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 224 223 225 29 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 685)) blake_ref.c:487 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 685)
        (nil)))
(insn 225 224 226 29 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 512 [0x200])) blake_ref.c:488 90 {*movsi_internal}
     (nil))
(insn 226 225 227 29 (set (reg:DI 37 r8)
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 227 226 228 29 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 228 227 229 29 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 229 228 230 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 230 229 231 29 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                        (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:490 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 231 230 232 29 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) 89 {*movdi_internal}
     (nil))
(insn 232 231 233 29 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 233 232 234 29 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 234 233 235 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 235 234 236 29 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:492 90 {*movsi_internal}
     (nil))
(insn 236 235 237 29 (set (reg:SI 609 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 237 236 1121 29 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1121 237 1122 29 (set (pc)
        (label_ref 276)) -1
     (nil)
 -> 276)
;;  succ:       34 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 609 612 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 609 612 633 634

(barrier 1122 1121 240)
;; basic block 30, loop depth 0, count 0, freq 491, maybe hot
;;  prev block 29, next block 31, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       28 [71.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u345(6){ }u346(7){ }u347(16){ }u348(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633
;; lr  def 	 17 [flags] 143 146 148 686 687 688
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; live  gen 	 17 [flags] 143 146 148 686 687 688
;; live  kill	 17 [flags]
(code_label 240 1122 241 30 112 "" [1 uses])
(note 241 240 242 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 30 (parallel [
            (set (reg:SI 143 [ D.6032 ])
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:496 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/v:SI 91 [ low ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 243 242 244 30 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 143 [ D.6032 ])) blake_ref.c:496 90 {*movsi_internal}
     (nil))
(insn 244 243 245 30 (parallel [
            (set (reg:SI 686 [ D.6035 ])
                (and:SI (reg:SI 89 [ D.6033 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:498 381 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ D.6033 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 245 244 246 30 (parallel [
            (set (reg:SI 146 [ D.6033 ])
                (plus:SI (reg:SI 686 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:498 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 686 [ D.6035 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 246 245 247 30 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 146 [ D.6033 ])) blake_ref.c:498 90 {*movsi_internal}
     (nil))
(insn 247 246 248 30 (set (reg:SI 688)
        (const_int 512 [0x200])) blake_ref.c:499 90 {*movsi_internal}
     (nil))
(insn 248 247 249 30 (parallel [
            (set (reg:SI 687 [ D.6033 ])
                (minus:SI (reg:SI 688)
                    (reg:SI 146 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:499 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 688)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (const_int 512 [0x200])
                    (reg:SI 146 [ D.6033 ]))
                (nil)))))
(insn 249 248 250 30 (set (reg:DI 148 [ D.6036 ])
        (sign_extend:DI (reg:SI 687 [ D.6033 ]))) blake_ref.c:499 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 687 [ D.6033 ])
        (nil)))
(note 250 249 251 30 NOTE_INSN_DELETED)
(note 251 250 252 30 NOTE_INSN_DELETED)
(insn 252 251 253 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 146 [ D.6033 ])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 146 [ D.6033 ])
        (nil)))
(jump_insn 253 252 1022 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1032)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1400 (nil)))
 -> 1032)
;;  succ:       32 [14.0%] 
;;              31 [86.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 148 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 148 633 634

;; basic block 31, loop depth 0, count 0, freq 422, maybe hot
;;  prev block 30, next block 32, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       30 [86.0%]  (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u364(6){ }u365(7){ }u366(16){ }u367(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 148 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 148
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 148 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(note 1022 253 254 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(note 254 1022 255 31 NOTE_INSN_DELETED)
(note 255 254 256 31 NOTE_INSN_DELETED)
(insn 256 255 257 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 148 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 257 256 1032 31 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 8372 (nil)))
 -> 265)
;;  succ:       33 [83.7%] 
;;              32 [16.3%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 148 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 148 633 634

;; basic block 32, loop depth 0, count 0, freq 240, maybe hot
;; Invalid sum of incoming frequencies 138, should be 240
;;  prev block 31, next block 33, flags: (HOT_PARTITION, RTL)
;;  pred:       31 [16.3%]  (FALLTHRU)
;;              30 [14.0%] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u372(6){ }u373(7){ }u374(16){ }u375(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 148 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 148 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 143
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 148 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 143
;; live  kill	
(code_label 1032 257 259 32 148 "" [1 uses])
(note 259 1032 260 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 32 (set (reg:DI 37 r8)
        (reg:DI 148 [ D.6036 ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 148 [ D.6036 ])
        (nil)))
(insn 261 260 262 32 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 262 261 263 32 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 263 262 264 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 264 263 265 32 (set (reg:SI 143 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       33 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 633 634

;; basic block 33, loop depth 0, count 0, freq 491, maybe hot
;; Invalid sum of incoming frequencies 593, should be 491
;;  prev block 32, next block 34, flags: (HOT_PARTITION, RTL)
;;  pred:       32 [100.0%]  (FALLTHRU)
;;              31 [83.7%] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u383(6){ }u384(7){ }u385(16){ }u386(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 609 612 693
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 609 612 693
;; live  kill	 17 [flags]
(code_label 265 264 266 33 113 "" [1 uses])
(note 266 265 267 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 33 (parallel [
            (set (reg:SI 693)
                (plus:SI (reg:SI 143 [ D.6032 ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:500 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 143 [ D.6032 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 268 267 269 33 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 693)) blake_ref.c:500 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 693)
        (nil)))
(insn 269 268 270 33 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) 89 {*movdi_internal}
     (nil))
(insn 270 269 271 33 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 271 270 272 33 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 272 271 273 33 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 273 272 274 33 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:502 90 {*movsi_internal}
     (nil))
(insn 274 273 275 33 (set (reg:SI 609 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 275 274 276 33 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       34 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 609 612 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 609 612 633 634

;; basic block 34, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 33, next block 35, flags: (HOT_PARTITION, RTL)
;;  pred:       26 [83.7%] 
;;              27 [100.0%] 
;;              33 [100.0%]  (FALLTHRU)
;;              29 [100.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u398(6){ }u399(7){ }u400(16){ }u401(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 609 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 609 612 633
;; lr  def 	 17 [flags] 694
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 609 612 633 634
;; live  gen 	 17 [flags] 694
;; live  kill	 17 [flags]
(code_label 276 275 277 34 110 "" [3 uses])
(note 277 276 278 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 278 277 279 34 (parallel [
            (set (reg:SI 694)
                (plus:SI (reg:SI 609 [ D.6031 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:505 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 609 [ D.6031 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 279 278 280 34 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 694)) blake_ref.c:505 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 694)
        (nil)))
(insn 280 279 281 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 224 [0xe0]))) blake_ref.c:506 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 612 [ D.6033 ])
        (nil)))
(jump_insn 281 280 282 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 291)
            (pc))) blake_ref.c:506 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 291)
;;  succ:       35 [28.0%]  (FALLTHRU)
;;              36 [72.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 35, loop depth 0, count 0, freq 273, maybe hot
;;  prev block 34, next block 36, flags: (HOT_PARTITION, RTL)
;;  pred:       34 [28.0%]  (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u407(6){ }u408(7){ }u409(16){ }u410(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 695
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 87 695
;; live  kill	 17 [flags]
(note 282 281 283 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 283 282 284 35 (parallel [
            (set (reg/f:DI 695)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 284 283 285 35 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 285 284 286 35 (set (reg:DI 1 dx)
        (reg/f:DI 695)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 695)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec]))
            (nil))))
(insn 286 285 287 35 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 287 286 288 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 288 287 1123 35 (set (reg:SI 87 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1123 288 1124 35 (set (pc)
        (label_ref 299)) -1
     (nil)
 -> 299)
;;  succ:       37 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 633 634

(barrier 1124 1123 291)
;; basic block 36, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 35, next block 37, flags: (HOT_PARTITION, RTL)
;;  pred:       34 [72.0%] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u420(6){ }u421(7){ }u422(16){ }u423(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 696
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 87 696
;; live  kill	 17 [flags]
(code_label 291 1124 292 36 115 "" [1 uses])
(note 292 291 293 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 293 292 294 36 (parallel [
            (set (reg/f:DI 696)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 294 293 295 36 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 295 294 296 36 (set (reg:DI 1 dx)
        (reg/f:DI 696)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 696)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -19 [0xffffffffffffffed]))
            (nil))))
(insn 296 295 297 36 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 297 296 298 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 298 297 299 36 (set (reg:SI 87 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       37 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 633 634

;; basic block 37, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 36, next block 38, flags: (HOT_PARTITION, RTL)
;;  pred:       36 [100.0%]  (FALLTHRU)
;;              23 [100.0%] 
;;              35 [100.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u433(6){ }u434(7){ }u435(16){ }u436(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 697 698
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 697 698
;; live  kill	 17 [flags]
(code_label 299 298 300 37 108 "" [2 uses])
(note 300 299 301 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 301 300 302 37 (parallel [
            (set (reg:SI 697)
                (plus:SI (reg:SI 87 [ D.6031 ])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:511 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 87 [ D.6031 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 302 301 303 37 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 697)) blake_ref.c:511 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 697)
        (nil)))
(insn 303 302 304 37 (parallel [
            (set (reg/f:DI 698)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 304 303 305 37 (set (reg:DI 37 r8)
        (const_int 64 [0x40])) 89 {*movdi_internal}
     (nil))
(insn 305 304 306 37 (set (reg:DI 1 dx)
        (reg/f:DI 698)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 698)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))
(insn 306 305 307 37 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 307 306 308 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       38 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 38, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 37, next block 39, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       37 [100.0%]  (FALLTHRU)
;;              19 [100.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u448(6){ }u449(7){ }u450(16){ }u451(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  def 	 17 [flags] 699 701 703 704 705 706 708 710 711 712 713 715 717 718 719 720 722 724 725 726 727 729 731 732 733 734 736 738 739 740 741 743 745 746 747
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 17 [flags] 699 701 703 704 705 706 708 710 711 712 713 715 717 718 719 720 722 724 725 726 727 729 731 732 733 734 736 738 739 740 741 743 745 746 747
;; live  kill	 17 [flags]
(code_label 308 307 309 38 105 "" [1 uses])
(note 309 308 310 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(note 310 309 311 38 NOTE_INSN_DELETED)
(insn 311 310 312 38 (set (reg:SI 699 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 19 [0x13])) [2 state_4(D)->h32+3 S1 A8]))) blake_ref.c:515 138 {*zero_extendqisi2}
     (nil))
(insn 312 311 313 38 (set (mem:QI (reg/v/f:DI 634 [ hashval ]) [0 *hashval_6(D)+0 S1 A8])
        (subreg:QI (reg:SI 699 [ D.6032 ]) 0)) blake_ref.c:515 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 699 [ D.6032 ])
        (nil)))
(note 313 312 314 38 NOTE_INSN_DELETED)
(insn 314 313 315 38 (set (reg:SI 701 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 18 [0x12])) [2 state_4(D)->h32+2 S2 A16]))) blake_ref.c:515 139 {*zero_extendhisi2}
     (nil))
(insn 315 314 316 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 1 [0x1])) [0 MEM[(BitSequence *)hashval_6(D) + 1B]+0 S1 A8])
        (subreg:QI (reg:SI 701 [ D.6032 ]) 0)) blake_ref.c:515 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 701 [ D.6032 ])
        (nil)))
(insn 316 315 317 38 (set (reg:SI 704 [ state_4(D)->h32 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 90 {*movsi_internal}
     (nil))
(insn 317 316 318 38 (parallel [
            (set (reg:SI 703 [ D.6032 ])
                (lshiftrt:SI (reg:SI 704 [ state_4(D)->h32 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:515 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 704 [ state_4(D)->h32 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 318 317 319 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 2 [0x2])) [0 MEM[(BitSequence *)hashval_6(D) + 2B]+0 S1 A8])
        (subreg:QI (reg:SI 703 [ D.6032 ]) 0)) blake_ref.c:515 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 703 [ D.6032 ])
        (nil)))
(insn 319 318 320 38 (set (reg:SI 705 [ state_4(D)->h32 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 90 {*movsi_internal}
     (nil))
(insn 320 319 321 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 3 [0x3])) [0 MEM[(BitSequence *)hashval_6(D) + 3B]+0 S1 A8])
        (subreg:QI (reg:SI 705 [ state_4(D)->h32 ]) 0)) blake_ref.c:515 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 705 [ state_4(D)->h32 ])
        (nil)))
(note 321 320 322 38 NOTE_INSN_DELETED)
(insn 322 321 323 38 (set (reg:SI 706 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 23 [0x17])) [2 state_4(D)->h32+7 S1 A8]))) blake_ref.c:516 138 {*zero_extendqisi2}
     (nil))
(insn 323 322 324 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 4 [0x4])) [0 MEM[(BitSequence *)hashval_6(D) + 4B]+0 S1 A8])
        (subreg:QI (reg:SI 706 [ D.6032 ]) 0)) blake_ref.c:516 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 706 [ D.6032 ])
        (nil)))
(note 324 323 325 38 NOTE_INSN_DELETED)
(insn 325 324 326 38 (set (reg:SI 708 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 22 [0x16])) [2 state_4(D)->h32+6 S2 A16]))) blake_ref.c:516 139 {*zero_extendhisi2}
     (nil))
(insn 326 325 327 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 5 [0x5])) [0 MEM[(BitSequence *)hashval_6(D) + 5B]+0 S1 A8])
        (subreg:QI (reg:SI 708 [ D.6032 ]) 0)) blake_ref.c:516 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 708 [ D.6032 ])
        (nil)))
(insn 327 326 328 38 (set (reg:SI 711 [ state_4(D)->h32+4 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 90 {*movsi_internal}
     (nil))
(insn 328 327 329 38 (parallel [
            (set (reg:SI 710 [ D.6032 ])
                (lshiftrt:SI (reg:SI 711 [ state_4(D)->h32+4 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:516 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 711 [ state_4(D)->h32+4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 329 328 330 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 6 [0x6])) [0 MEM[(BitSequence *)hashval_6(D) + 6B]+0 S1 A8])
        (subreg:QI (reg:SI 710 [ D.6032 ]) 0)) blake_ref.c:516 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 710 [ D.6032 ])
        (nil)))
(insn 330 329 331 38 (set (reg:SI 712 [ state_4(D)->h32+4 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 90 {*movsi_internal}
     (nil))
(insn 331 330 332 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 7 [0x7])) [0 MEM[(BitSequence *)hashval_6(D) + 7B]+0 S1 A8])
        (subreg:QI (reg:SI 712 [ state_4(D)->h32+4 ]) 0)) blake_ref.c:516 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 712 [ state_4(D)->h32+4 ])
        (nil)))
(note 332 331 333 38 NOTE_INSN_DELETED)
(insn 333 332 334 38 (set (reg:SI 713 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 27 [0x1b])) [2 state_4(D)->h32+11 S1 A8]))) blake_ref.c:517 138 {*zero_extendqisi2}
     (nil))
(insn 334 333 335 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 8 [0x8])) [0 MEM[(BitSequence *)hashval_6(D) + 8B]+0 S1 A8])
        (subreg:QI (reg:SI 713 [ D.6032 ]) 0)) blake_ref.c:517 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 713 [ D.6032 ])
        (nil)))
(note 335 334 336 38 NOTE_INSN_DELETED)
(insn 336 335 337 38 (set (reg:SI 715 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 26 [0x1a])) [2 state_4(D)->h32+10 S2 A16]))) blake_ref.c:517 139 {*zero_extendhisi2}
     (nil))
(insn 337 336 338 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 9 [0x9])) [0 MEM[(BitSequence *)hashval_6(D) + 9B]+0 S1 A8])
        (subreg:QI (reg:SI 715 [ D.6032 ]) 0)) blake_ref.c:517 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 715 [ D.6032 ])
        (nil)))
(insn 338 337 339 38 (set (reg:SI 718 [ state_4(D)->h32+8 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 90 {*movsi_internal}
     (nil))
(insn 339 338 340 38 (parallel [
            (set (reg:SI 717 [ D.6032 ])
                (lshiftrt:SI (reg:SI 718 [ state_4(D)->h32+8 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:517 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 718 [ state_4(D)->h32+8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 340 339 341 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 10 [0xa])) [0 MEM[(BitSequence *)hashval_6(D) + 10B]+0 S1 A8])
        (subreg:QI (reg:SI 717 [ D.6032 ]) 0)) blake_ref.c:517 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 717 [ D.6032 ])
        (nil)))
(insn 341 340 342 38 (set (reg:SI 719 [ state_4(D)->h32+8 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 90 {*movsi_internal}
     (nil))
(insn 342 341 343 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 11 [0xb])) [0 MEM[(BitSequence *)hashval_6(D) + 11B]+0 S1 A8])
        (subreg:QI (reg:SI 719 [ state_4(D)->h32+8 ]) 0)) blake_ref.c:517 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 719 [ state_4(D)->h32+8 ])
        (nil)))
(note 343 342 344 38 NOTE_INSN_DELETED)
(insn 344 343 345 38 (set (reg:SI 720 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 31 [0x1f])) [2 state_4(D)->h32+15 S1 A8]))) blake_ref.c:518 138 {*zero_extendqisi2}
     (nil))
(insn 345 344 346 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 12 [0xc])) [0 MEM[(BitSequence *)hashval_6(D) + 12B]+0 S1 A8])
        (subreg:QI (reg:SI 720 [ D.6032 ]) 0)) blake_ref.c:518 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 720 [ D.6032 ])
        (nil)))
(note 346 345 347 38 NOTE_INSN_DELETED)
(insn 347 346 348 38 (set (reg:SI 722 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 30 [0x1e])) [2 state_4(D)->h32+14 S2 A16]))) blake_ref.c:518 139 {*zero_extendhisi2}
     (nil))
(insn 348 347 349 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 13 [0xd])) [0 MEM[(BitSequence *)hashval_6(D) + 13B]+0 S1 A8])
        (subreg:QI (reg:SI 722 [ D.6032 ]) 0)) blake_ref.c:518 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 722 [ D.6032 ])
        (nil)))
(insn 349 348 350 38 (set (reg:SI 725 [ state_4(D)->h32+12 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 90 {*movsi_internal}
     (nil))
(insn 350 349 351 38 (parallel [
            (set (reg:SI 724 [ D.6032 ])
                (lshiftrt:SI (reg:SI 725 [ state_4(D)->h32+12 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:518 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 725 [ state_4(D)->h32+12 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 351 350 352 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 14 [0xe])) [0 MEM[(BitSequence *)hashval_6(D) + 14B]+0 S1 A8])
        (subreg:QI (reg:SI 724 [ D.6032 ]) 0)) blake_ref.c:518 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 724 [ D.6032 ])
        (nil)))
(insn 352 351 353 38 (set (reg:SI 726 [ state_4(D)->h32+12 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 90 {*movsi_internal}
     (nil))
(insn 353 352 354 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 15 [0xf])) [0 MEM[(BitSequence *)hashval_6(D) + 15B]+0 S1 A8])
        (subreg:QI (reg:SI 726 [ state_4(D)->h32+12 ]) 0)) blake_ref.c:518 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 726 [ state_4(D)->h32+12 ])
        (nil)))
(note 354 353 355 38 NOTE_INSN_DELETED)
(insn 355 354 356 38 (set (reg:SI 727 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 35 [0x23])) [2 state_4(D)->h32+19 S1 A8]))) blake_ref.c:519 138 {*zero_extendqisi2}
     (nil))
(insn 356 355 357 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 16 [0x10])) [0 MEM[(BitSequence *)hashval_6(D) + 16B]+0 S1 A8])
        (subreg:QI (reg:SI 727 [ D.6032 ]) 0)) blake_ref.c:519 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 727 [ D.6032 ])
        (nil)))
(note 357 356 358 38 NOTE_INSN_DELETED)
(insn 358 357 359 38 (set (reg:SI 729 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 34 [0x22])) [2 state_4(D)->h32+18 S2 A16]))) blake_ref.c:519 139 {*zero_extendhisi2}
     (nil))
(insn 359 358 360 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 17 [0x11])) [0 MEM[(BitSequence *)hashval_6(D) + 17B]+0 S1 A8])
        (subreg:QI (reg:SI 729 [ D.6032 ]) 0)) blake_ref.c:519 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 729 [ D.6032 ])
        (nil)))
(insn 360 359 361 38 (set (reg:SI 732 [ state_4(D)->h32+16 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 90 {*movsi_internal}
     (nil))
(insn 361 360 362 38 (parallel [
            (set (reg:SI 731 [ D.6032 ])
                (lshiftrt:SI (reg:SI 732 [ state_4(D)->h32+16 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:519 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 732 [ state_4(D)->h32+16 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 362 361 363 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 18 [0x12])) [0 MEM[(BitSequence *)hashval_6(D) + 18B]+0 S1 A8])
        (subreg:QI (reg:SI 731 [ D.6032 ]) 0)) blake_ref.c:519 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 731 [ D.6032 ])
        (nil)))
(insn 363 362 364 38 (set (reg:SI 733 [ state_4(D)->h32+16 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 90 {*movsi_internal}
     (nil))
(insn 364 363 365 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 19 [0x13])) [0 MEM[(BitSequence *)hashval_6(D) + 19B]+0 S1 A8])
        (subreg:QI (reg:SI 733 [ state_4(D)->h32+16 ]) 0)) blake_ref.c:519 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 733 [ state_4(D)->h32+16 ])
        (nil)))
(note 365 364 366 38 NOTE_INSN_DELETED)
(insn 366 365 367 38 (set (reg:SI 734 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 39 [0x27])) [2 state_4(D)->h32+23 S1 A8]))) blake_ref.c:520 138 {*zero_extendqisi2}
     (nil))
(insn 367 366 368 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 20 [0x14])) [0 MEM[(BitSequence *)hashval_6(D) + 20B]+0 S1 A8])
        (subreg:QI (reg:SI 734 [ D.6032 ]) 0)) blake_ref.c:520 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 734 [ D.6032 ])
        (nil)))
(note 368 367 369 38 NOTE_INSN_DELETED)
(insn 369 368 370 38 (set (reg:SI 736 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 38 [0x26])) [2 state_4(D)->h32+22 S2 A16]))) blake_ref.c:520 139 {*zero_extendhisi2}
     (nil))
(insn 370 369 371 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 21 [0x15])) [0 MEM[(BitSequence *)hashval_6(D) + 21B]+0 S1 A8])
        (subreg:QI (reg:SI 736 [ D.6032 ]) 0)) blake_ref.c:520 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 736 [ D.6032 ])
        (nil)))
(insn 371 370 372 38 (set (reg:SI 739 [ state_4(D)->h32+20 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 90 {*movsi_internal}
     (nil))
(insn 372 371 373 38 (parallel [
            (set (reg:SI 738 [ D.6032 ])
                (lshiftrt:SI (reg:SI 739 [ state_4(D)->h32+20 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:520 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 739 [ state_4(D)->h32+20 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 373 372 374 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 22 [0x16])) [0 MEM[(BitSequence *)hashval_6(D) + 22B]+0 S1 A8])
        (subreg:QI (reg:SI 738 [ D.6032 ]) 0)) blake_ref.c:520 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 738 [ D.6032 ])
        (nil)))
(insn 374 373 375 38 (set (reg:SI 740 [ state_4(D)->h32+20 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 90 {*movsi_internal}
     (nil))
(insn 375 374 376 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 23 [0x17])) [0 MEM[(BitSequence *)hashval_6(D) + 23B]+0 S1 A8])
        (subreg:QI (reg:SI 740 [ state_4(D)->h32+20 ]) 0)) blake_ref.c:520 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 740 [ state_4(D)->h32+20 ])
        (nil)))
(note 376 375 377 38 NOTE_INSN_DELETED)
(insn 377 376 378 38 (set (reg:SI 741 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 43 [0x2b])) [2 state_4(D)->h32+27 S1 A8]))) blake_ref.c:521 138 {*zero_extendqisi2}
     (nil))
(insn 378 377 379 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 24 [0x18])) [0 MEM[(BitSequence *)hashval_6(D) + 24B]+0 S1 A8])
        (subreg:QI (reg:SI 741 [ D.6032 ]) 0)) blake_ref.c:521 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 741 [ D.6032 ])
        (nil)))
(note 379 378 380 38 NOTE_INSN_DELETED)
(insn 380 379 381 38 (set (reg:SI 743 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 42 [0x2a])) [2 state_4(D)->h32+26 S2 A16]))) blake_ref.c:521 139 {*zero_extendhisi2}
     (nil))
(insn 381 380 382 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 25 [0x19])) [0 MEM[(BitSequence *)hashval_6(D) + 25B]+0 S1 A8])
        (subreg:QI (reg:SI 743 [ D.6032 ]) 0)) blake_ref.c:521 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 743 [ D.6032 ])
        (nil)))
(insn 382 381 383 38 (set (reg:SI 746 [ state_4(D)->h32+24 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 90 {*movsi_internal}
     (nil))
(insn 383 382 384 38 (parallel [
            (set (reg:SI 745 [ D.6032 ])
                (lshiftrt:SI (reg:SI 746 [ state_4(D)->h32+24 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:521 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 746 [ state_4(D)->h32+24 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 384 383 385 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 26 [0x1a])) [0 MEM[(BitSequence *)hashval_6(D) + 26B]+0 S1 A8])
        (subreg:QI (reg:SI 745 [ D.6032 ]) 0)) blake_ref.c:521 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 745 [ D.6032 ])
        (nil)))
(insn 385 384 386 38 (set (reg:SI 747 [ state_4(D)->h32+24 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 90 {*movsi_internal}
     (nil))
(insn 386 385 387 38 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 27 [0x1b])) [0 MEM[(BitSequence *)hashval_6(D) + 27B]+0 S1 A8])
        (subreg:QI (reg:SI 747 [ state_4(D)->h32+24 ]) 0)) blake_ref.c:521 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 747 [ state_4(D)->h32+24 ])
        (nil)))
(insn 387 386 388 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 256 [0x100]))) blake_ref.c:523 7 {*cmpsi_1}
     (nil))
(jump_insn 388 387 389 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1058)
            (pc))) blake_ref.c:523 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6218 (nil)))
 -> 1058)
;;  succ:       39 [37.8%]  (FALLTHRU)
;;              84 [62.2%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 39, loop depth 0, count 0, freq 1475, maybe hot
;;  prev block 38, next block 40, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       38 [37.8%]  (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u580(6){ }u581(7){ }u582(16){ }u583(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  def 	 17 [flags] 748 750 752 753 754
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 748 750 752 753 754
;; live  kill	 17 [flags]
(note 389 388 390 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(note 390 389 391 39 NOTE_INSN_DELETED)
(insn 391 390 392 39 (set (reg:SI 748 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 47 [0x2f])) [2 state_4(D)->h32+31 S1 A8]))) blake_ref.c:524 138 {*zero_extendqisi2}
     (nil))
(insn 392 391 393 39 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 28 [0x1c])) [0 MEM[(BitSequence *)hashval_6(D) + 28B]+0 S1 A8])
        (subreg:QI (reg:SI 748 [ D.6032 ]) 0)) blake_ref.c:524 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 748 [ D.6032 ])
        (nil)))
(note 393 392 394 39 NOTE_INSN_DELETED)
(insn 394 393 395 39 (set (reg:SI 750 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 46 [0x2e])) [2 state_4(D)->h32+30 S2 A16]))) blake_ref.c:524 139 {*zero_extendhisi2}
     (nil))
(insn 395 394 396 39 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 29 [0x1d])) [0 MEM[(BitSequence *)hashval_6(D) + 29B]+0 S1 A8])
        (subreg:QI (reg:SI 750 [ D.6032 ]) 0)) blake_ref.c:524 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 750 [ D.6032 ])
        (nil)))
(insn 396 395 397 39 (set (reg:SI 753 [ state_4(D)->h32+28 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 90 {*movsi_internal}
     (nil))
(insn 397 396 398 39 (parallel [
            (set (reg:SI 752 [ D.6032 ])
                (lshiftrt:SI (reg:SI 753 [ state_4(D)->h32+28 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:524 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 753 [ state_4(D)->h32+28 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 398 397 399 39 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 30 [0x1e])) [0 MEM[(BitSequence *)hashval_6(D) + 30B]+0 S1 A8])
        (subreg:QI (reg:SI 752 [ D.6032 ]) 0)) blake_ref.c:524 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 752 [ D.6032 ])
        (nil)))
(insn 399 398 400 39 (set (reg:SI 754 [ state_4(D)->h32+28 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 633 [ state ])
        (nil)))
(insn 400 399 1125 39 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 31 [0x1f])) [0 MEM[(BitSequence *)hashval_6(D) + 31B]+0 S1 A8])
        (subreg:QI (reg:SI 754 [ state_4(D)->h32+28 ]) 0)) blake_ref.c:524 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 754 [ state_4(D)->h32+28 ])
        (expr_list:REG_DEAD (reg/v/f:DI 634 [ hashval ])
            (nil))))
(jump_insn 1125 400 1126 39 (set (pc)
        (label_ref 1058)) blake_ref.c:656 -1
     (nil)
 -> 1058)
;;  succ:       84 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1126 1125 405)
;; basic block 40, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 39, next block 41, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [61.0%] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u602(6){ }u603(7){ }u604(16){ }u605(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 17 [flags] 241 242 243 244 245 246 263 755 756 757 758 759 760 761 762 763 764 765 766
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 633 634
;; live  gen 	 17 [flags] 241 242 243 244 245 246 263 755 756 757 758 759 760 761 762 763 764 765 766
;; live  kill	 17 [flags]
(code_label 405 1126 406 40 93 "" [1 uses])
(note 406 405 407 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 408 40 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 zz+0 S1 A32])
        (const_int 0 [0])) blake_ref.c:535 93 {*movqi_internal}
     (nil))
(insn 408 407 409 40 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -19 [0xffffffffffffffed])) [0 zo+0 S1 A8])
        (const_int 1 [0x1])) blake_ref.c:535 93 {*movqi_internal}
     (nil))
(insn 409 408 410 40 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0 oz+0 S1 A16])
        (const_int -128 [0xffffffffffffff80])) blake_ref.c:535 93 {*movqi_internal}
     (nil))
(insn 410 409 411 40 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -17 [0xffffffffffffffef])) [0 oo+0 S1 A8])
        (const_int -127 [0xffffffffffffff81])) blake_ref.c:535 93 {*movqi_internal}
     (nil))
(insn 411 410 412 40 (set (reg:DI 241 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) blake_ref.c:539 89 {*movdi_internal}
     (nil))
(insn 412 411 413 40 (set (reg:SI 242 [ D.6033 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])) blake_ref.c:539 90 {*movsi_internal}
     (nil))
(insn 413 412 414 40 (set (reg:DI 243 [ D.6036 ])
        (sign_extend:DI (reg:SI 242 [ D.6033 ]))) blake_ref.c:539 142 {*extendsidi2_rex64}
     (nil))
(note 414 413 415 40 NOTE_INSN_DELETED)
(insn 415 414 1083 40 (set (reg/v:DI 245 [ high ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 208 [0xd0])) [3 state_4(D)->t64+8 S8 A64])) blake_ref.c:540 89 {*movdi_internal}
     (nil))
(insn 1083 415 1084 40 (parallel [
            (set (reg:CCC 17 flags)
                (compare:CCC (plus:DI (reg:DI 241 [ D.6036 ])
                        (reg:DI 243 [ D.6036 ]))
                    (reg:DI 241 [ D.6036 ])))
            (set (reg/v:DI 244 [ low ])
                (plus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 243 [ D.6036 ])))
        ]) blake_ref.c:542 303 {*adddi3_cc_overflow}
     (expr_list:REG_DEAD (reg:DI 243 [ D.6036 ])
        (nil)))
(insn 1084 1083 422 40 (parallel [
            (set (reg/v:DI 245 [ high ])
                (plus:DI (plus:DI (ltu:DI (reg:CCC 17 flags)
                            (const_int 0 [0]))
                        (reg/v:DI 245 [ high ]))
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:542 285 {adddi3_carry}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 422 1084 424 40 (parallel [
            (set (reg:DI 246 [ D.6036 ])
                (lshiftrt:DI (reg/v:DI 245 [ high ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 424 422 425 40 (parallel [
            (set (reg:SI 755 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 246 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 425 424 426 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 msglen+0 S1 A128])
        (subreg:QI (reg:SI 755 [ D.6032 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 755 [ D.6032 ])
        (nil)))
(insn 426 425 427 40 (parallel [
            (set (reg:SI 756 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 246 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 427 426 428 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -15 [0xfffffffffffffff1])) [0 msglen+1 S1 A8])
        (subreg:QI (reg:SI 756 [ D.6032 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 756 [ D.6032 ])
        (nil)))
(insn 428 427 429 40 (parallel [
            (set (reg:SI 757 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 246 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 429 428 430 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -14 [0xfffffffffffffff2])) [0 msglen+2 S1 A16])
        (subreg:QI (reg:SI 757 [ D.6032 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 757 [ D.6032 ])
        (nil)))
(insn 430 429 432 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -13 [0xfffffffffffffff3])) [0 msglen+3 S1 A8])
        (subreg:QI (reg:DI 246 [ D.6036 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 246 [ D.6036 ])
        (nil)))
(insn 432 430 433 40 (parallel [
            (set (reg:SI 758 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg/v:DI 245 [ high ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 433 432 434 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 msglen+4 S1 A32])
        (subreg:QI (reg:SI 758 [ D.6032 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 758 [ D.6032 ])
        (nil)))
(insn 434 433 435 40 (parallel [
            (set (reg:SI 759 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg/v:DI 245 [ high ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 435 434 436 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -11 [0xfffffffffffffff5])) [0 msglen+5 S1 A8])
        (subreg:QI (reg:SI 759 [ D.6032 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 759 [ D.6032 ])
        (nil)))
(insn 436 435 437 40 (parallel [
            (set (reg:SI 760 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg/v:DI 245 [ high ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 437 436 438 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -10 [0xfffffffffffffff6])) [0 msglen+6 S1 A16])
        (subreg:QI (reg:SI 760 [ D.6032 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 760 [ D.6032 ])
        (nil)))
(insn 438 437 439 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -9 [0xfffffffffffffff7])) [0 msglen+7 S1 A8])
        (subreg:QI (reg/v:DI 245 [ high ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v:DI 245 [ high ])
        (nil)))
(insn 439 438 441 40 (parallel [
            (set (reg:DI 263 [ D.6036 ])
                (lshiftrt:DI (reg/v:DI 244 [ low ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 441 439 442 40 (parallel [
            (set (reg:SI 761 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 263 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 442 441 443 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 msglen+8 S1 A64])
        (subreg:QI (reg:SI 761 [ D.6032 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 761 [ D.6032 ])
        (nil)))
(insn 443 442 444 40 (parallel [
            (set (reg:SI 762 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 263 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 444 443 445 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -7 [0xfffffffffffffff9])) [0 msglen+9 S1 A8])
        (subreg:QI (reg:SI 762 [ D.6032 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 762 [ D.6032 ])
        (nil)))
(insn 445 444 446 40 (parallel [
            (set (reg:SI 763 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 263 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 446 445 447 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -6 [0xfffffffffffffffa])) [0 msglen+10 S1 A16])
        (subreg:QI (reg:SI 763 [ D.6032 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 763 [ D.6032 ])
        (nil)))
(insn 447 446 449 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -5 [0xfffffffffffffffb])) [0 msglen+11 S1 A8])
        (subreg:QI (reg:DI 263 [ D.6036 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 263 [ D.6036 ])
        (nil)))
(insn 449 447 450 40 (parallel [
            (set (reg:SI 764 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg/v:DI 244 [ low ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 450 449 451 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 msglen+12 S1 A32])
        (subreg:QI (reg:SI 764 [ D.6032 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 764 [ D.6032 ])
        (nil)))
(insn 451 450 452 40 (parallel [
            (set (reg:SI 765 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg/v:DI 244 [ low ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 452 451 453 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -3 [0xfffffffffffffffd])) [0 msglen+13 S1 A8])
        (subreg:QI (reg:SI 765 [ D.6032 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 765 [ D.6032 ])
        (nil)))
(insn 453 452 454 40 (parallel [
            (set (reg:SI 766 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg/v:DI 244 [ low ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 454 453 455 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -2 [0xfffffffffffffffe])) [0 msglen+14 S1 A16])
        (subreg:QI (reg:SI 766 [ D.6032 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 766 [ D.6032 ])
        (nil)))
(insn 455 454 457 40 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -1 [0xffffffffffffffff])) [0 msglen+15 S1 A8])
        (subreg:QI (reg/v:DI 244 [ low ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v:DI 244 [ low ])
        (nil)))
(note 457 455 1158 40 NOTE_INSN_DELETED)
(insn 1158 457 459 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 242 [ D.6033 ])
                (const_int 7 [0x7]))
            (const_int 0 [0]))) blake_ref.c:546 -1
     (nil))
(jump_insn 459 1158 460 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 587)
            (pc))) blake_ref.c:546 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 587)
;;  succ:       41 [50.0%]  (FALLTHRU)
;;              61 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634

;; basic block 41, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 40, next block 42, flags: (HOT_PARTITION, RTL)
;;  pred:       40 [50.0%]  (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u669(6){ }u670(7){ }u671(16){ }u672(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 242
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(note 460 459 461 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 461 460 462 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 242 [ D.6033 ])
            (const_int 888 [0x378]))) blake_ref.c:549 7 {*cmpsi_1}
     (nil))
(jump_insn 462 461 463 41 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 487)
            (pc))) blake_ref.c:549 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 487)
;;  succ:       42 [28.0%]  (FALLTHRU)
;;              45 [72.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634

;; basic block 42, loop depth 0, count 0, freq 854, maybe hot
;;  prev block 41, next block 43, flags: (HOT_PARTITION, RTL)
;;  pred:       41 [28.0%]  (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u675(6){ }u676(7){ }u677(16){ }u678(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 612 633
;; lr  def 	 17 [flags] 768
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 612 633 634
;; live  gen 	 17 [flags] 768
;; live  kill	 17 [flags]
(note 463 462 464 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 464 463 465 42 (parallel [
            (set (reg:DI 768)
                (plus:DI (reg:DI 241 [ D.6036 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:551 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 241 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 465 464 466 42 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 768)) blake_ref.c:551 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 768)
        (nil)))
(insn 466 465 467 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:552 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 612 [ D.6033 ])
        (nil)))
(jump_insn 467 466 468 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 477)
            (pc))) blake_ref.c:552 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 477)
;;  succ:       43 [28.0%]  (FALLTHRU)
;;              44 [72.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 43, loop depth 0, count 0, freq 239, maybe hot
;;  prev block 42, next block 44, flags: (HOT_PARTITION, RTL)
;;  pred:       42 [28.0%]  (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u684(6){ }u685(7){ }u686(16){ }u687(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 292 769
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 292 769
;; live  kill	 17 [flags]
(note 468 467 469 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 469 468 470 43 (parallel [
            (set (reg/f:DI 769)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -18 [0xffffffffffffffee])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 470 469 471 43 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 471 470 472 43 (set (reg:DI 1 dx)
        (reg/f:DI 769)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 769)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee]))
            (nil))))
(insn 472 471 473 43 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 473 472 474 43 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 474 473 1127 43 (set (reg:DI 292 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 1127 474 1128 43 (set (pc)
        (label_ref 564)) -1
     (nil)
 -> 564)
;;  succ:       58 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 292 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 292 633 634

(barrier 1128 1127 477)
;; basic block 44, loop depth 0, count 0, freq 615, maybe hot
;;  prev block 43, next block 45, flags: (HOT_PARTITION, RTL)
;;  pred:       42 [72.0%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u697(6){ }u698(7){ }u699(16){ }u700(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 292 770
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 292 770
;; live  kill	 17 [flags]
(code_label 477 1128 478 44 121 "" [1 uses])
(note 478 477 479 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 479 478 480 44 (parallel [
            (set (reg/f:DI 770)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -17 [0xffffffffffffffef])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 480 479 481 44 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 481 480 482 44 (set (reg:DI 1 dx)
        (reg/f:DI 770)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 770)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -17 [0xffffffffffffffef]))
            (nil))))
(insn 482 481 483 44 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 483 482 484 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 484 483 1129 44 (set (reg:DI 292 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 1129 484 1130 44 (set (pc)
        (label_ref 564)) -1
     (nil)
 -> 564)
;;  succ:       58 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 292 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 292 633 634

(barrier 1130 1129 487)
;; basic block 45, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 44, next block 46, flags: (HOT_PARTITION, RTL)
;;  pred:       41 [72.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u710(6){ }u711(7){ }u712(16){ }u713(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 242
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 487 1130 488 45 120 "" [1 uses])
(note 488 487 489 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 489 488 490 45 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 242 [ D.6033 ])
            (const_int 887 [0x377]))) blake_ref.c:558 7 {*cmpsi_1}
     (nil))
(jump_insn 490 489 491 45 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) blake_ref.c:558 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 498)
;;  succ:       46 [50.0%]  (FALLTHRU)
;;              48 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634

;; basic block 46, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 45, next block 47, flags: (HOT_PARTITION, RTL)
;;  pred:       45 [50.0%]  (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u716(6){ }u717(7){ }u718(16){ }u719(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 242
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(note 491 490 492 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 492 491 493 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 242 [ D.6033 ])
            (const_int 0 [0]))) blake_ref.c:560 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 493 492 494 46 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1000)
            (pc))) blake_ref.c:560 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 1000)
;;  succ:       47 [50.0%]  (FALLTHRU)
;;              83 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634

;; basic block 47, loop depth 0, count 0, freq 549, maybe hot
;;  prev block 46, next block 48, flags: (HOT_PARTITION, RTL)
;;  pred:       46 [50.0%]  (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u722(6){ }u723(7){ }u724(16){ }u725(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; live  gen 	
;; live  kill	
(note 494 493 495 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 495 494 1131 47 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:561 90 {*movsi_internal}
     (nil))
(jump_insn 1131 495 1132 47 (set (pc)
        (label_ref 1000)) -1
     (nil)
 -> 1000)
;;  succ:       83 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634

(barrier 1132 1131 498)
;; basic block 48, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 47, next block 49, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       45 [50.0%] 
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u727(6){ }u728(7){ }u729(16){ }u730(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633
;; lr  def 	 17 [flags] 287 288 771 772
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; live  gen 	 17 [flags] 287 288 771 772
;; live  kill	 17 [flags]
(code_label 498 1132 499 48 123 "" [1 uses])
(note 499 498 500 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 500 499 501 48 (set (reg:SI 772)
        (const_int 1024 [0x400])) blake_ref.c:568 90 {*movsi_internal}
     (nil))
(insn 501 500 502 48 (parallel [
            (set (reg:SI 771 [ D.6033 ])
                (minus:SI (reg:SI 772)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:568 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 772)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (const_int 1024 [0x400])
                    (reg:SI 242 [ D.6033 ]))
                (nil)))))
(insn 502 501 503 48 (set (reg:DI 287 [ D.6036 ])
        (sign_extend:DI (reg:SI 771 [ D.6033 ]))) blake_ref.c:568 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 771 [ D.6033 ])
        (nil)))
(insn 503 502 504 48 (parallel [
            (set (reg:DI 288 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 287 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:568 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 241 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 504 503 505 48 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 288 [ D.6036 ])) blake_ref.c:568 89 {*movdi_internal}
     (nil))
(note 505 504 506 48 NOTE_INSN_DELETED)
(note 506 505 507 48 NOTE_INSN_DELETED)
(insn 507 506 508 48 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 242 [ D.6033 ])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 242 [ D.6033 ])
        (nil)))
(jump_insn 508 507 1024 48 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1033)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1400 (nil)))
 -> 1033)
;;  succ:       50 [14.0%] 
;;              49 [86.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 287 288 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 287 288 633 634

;; basic block 49, loop depth 0, count 0, freq 944, maybe hot
;;  prev block 48, next block 50, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       48 [86.0%]  (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u743(6){ }u744(7){ }u745(16){ }u746(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 287 288 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 287
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 287 288 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(note 1024 508 509 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(note 509 1024 510 49 NOTE_INSN_DELETED)
(note 510 509 511 49 NOTE_INSN_DELETED)
(insn 511 510 512 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 287 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 512 511 1033 49 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 520)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 8372 (nil)))
 -> 520)
;;  succ:       51 [83.7%] 
;;              50 [16.3%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 287 288 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 287 288 633 634

;; basic block 50, loop depth 0, count 0, freq 537, maybe hot
;; Invalid sum of incoming frequencies 308, should be 537
;;  prev block 49, next block 51, flags: (HOT_PARTITION, RTL)
;;  pred:       49 [16.3%]  (FALLTHRU)
;;              48 [14.0%] 
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u751(6){ }u752(7){ }u753(16){ }u754(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 287 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 287 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 288
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 287 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 288
;; live  kill	
(code_label 1033 512 514 50 149 "" [1 uses])
(note 514 1033 515 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 515 514 516 50 (set (reg:DI 37 r8)
        (reg:DI 287 [ D.6036 ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 287 [ D.6036 ])
        (nil)))
(insn 516 515 517 50 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 517 516 518 50 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 518 517 519 50 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 519 518 520 50 (set (reg:DI 288 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       51 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 288 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 288 633 634

;; basic block 51, loop depth 0, count 0, freq 1098, maybe hot
;; Invalid sum of incoming frequencies 1327, should be 1098
;;  prev block 50, next block 52, flags: (HOT_PARTITION, RTL)
;;  pred:       50 [100.0%]  (FALLTHRU)
;;              49 [83.7%] 
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u762(6){ }u763(7){ }u764(16){ }u765(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 288 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 288 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 777
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 288 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 777
;; live  kill	 17 [flags]
(code_label 520 519 521 51 125 "" [1 uses])
(note 521 520 522 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 522 521 523 51 (parallel [
            (set (reg:DI 777)
                (plus:DI (reg:DI 288 [ D.6036 ])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:570 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 288 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 523 522 524 51 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 777)) blake_ref.c:570 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 777)
        (nil)))
(insn 524 523 525 51 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) 89 {*movdi_internal}
     (nil))
(insn 525 524 526 51 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 526 525 527 51 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 527 526 528 51 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 528 527 1011 51 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:572 90 {*movsi_internal}
     (nil))
;;  succ:       52 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 52, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 51, next block 53, flags: (HOT_PARTITION, RTL)
;;  pred:       51 [100.0%]  (FALLTHRU)
;;              83 [100.0%] 
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u775(6){ }u776(7){ }u777(16){ }u778(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 17 [flags] 290
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 17 [flags] 290
;; live  kill	
(code_label 1011 528 529 52 145 "" [1 uses])
(note 529 1011 530 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 530 529 531 52 (set (reg:SI 290 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) blake_ref.c:574 90 {*movsi_internal}
     (nil))
(insn 531 530 532 52 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 290 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:574 7 {*cmpsi_1}
     (nil))
(jump_insn 532 531 533 52 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 541)
            (pc))) blake_ref.c:574 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 541)
;;  succ:       53 [28.0%]  (FALLTHRU)
;;              54 [72.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 290 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 290 633 634

;; basic block 53, loop depth 0, count 0, freq 615, maybe hot
;;  prev block 52, next block 54, flags: (HOT_PARTITION, RTL)
;;  pred:       52 [28.0%]  (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u782(6){ }u783(7){ }u784(16){ }u785(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 778
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 778
;; live  kill	 17 [flags]
(note 533 532 534 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 534 533 535 53 (parallel [
            (set (reg/f:DI 778)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 535 534 536 53 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 536 535 537 53 (set (reg:DI 1 dx)
        (reg/f:DI 778)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 778)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec]))
            (nil))))
(insn 537 536 538 53 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 538 537 1133 53 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1133 538 1134 53 (set (pc)
        (label_ref 560)) -1
     (nil)
 -> 560)
;;  succ:       57 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

(barrier 1134 1133 541)
;; basic block 54, loop depth 0, count 0, freq 1581, maybe hot
;;  prev block 53, next block 55, flags: (HOT_PARTITION, RTL)
;;  pred:       52 [72.0%] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u794(6){ }u795(7){ }u796(16){ }u797(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 290 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 290
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 290 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 541 1134 542 54 127 "" [1 uses])
(note 542 541 543 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 543 542 544 54 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 290 [ D.6033 ])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 290 [ D.6033 ])
        (nil)))
(jump_insn 544 543 545 54 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 553)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 553)
;;  succ:       55 [50.0%]  (FALLTHRU)
;;              56 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 55, loop depth 0, count 0, freq 791, maybe hot
;;  prev block 54, next block 56, flags: (HOT_PARTITION, RTL)
;;  pred:       54 [50.0%]  (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u800(6){ }u801(7){ }u802(16){ }u803(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 779
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 779
;; live  kill	 17 [flags]
(note 545 544 546 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 546 545 547 55 (parallel [
            (set (reg/f:DI 779)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 547 546 548 55 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 548 547 549 55 (set (reg:DI 1 dx)
        (reg/f:DI 779)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 779)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -19 [0xffffffffffffffed]))
            (nil))))
(insn 549 548 550 55 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 550 549 1135 55 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1135 550 1136 55 (set (pc)
        (label_ref 560)) -1
     (nil)
 -> 560)
;;  succ:       57 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

(barrier 1136 1135 553)
;; basic block 56, loop depth 0, count 0, freq 791, maybe hot
;;  prev block 55, next block 57, flags: (HOT_PARTITION, RTL)
;;  pred:       54 [50.0%] 
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u812(6){ }u813(7){ }u814(16){ }u815(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 780
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 780
;; live  kill	 17 [flags]
(code_label 553 1136 554 56 129 "" [1 uses])
(note 554 553 555 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 555 554 556 56 (parallel [
            (set (reg/f:DI 780)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 556 555 557 56 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 557 556 558 56 (set (reg:DI 1 dx)
        (reg/f:DI 780)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 780)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -19 [0xffffffffffffffed]))
            (nil))))
(insn 558 557 559 56 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 559 558 560 56 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       57 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 57, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 56, next block 58, flags: (HOT_PARTITION, RTL)
;;  pred:       53 [100.0%] 
;;              56 [100.0%]  (FALLTHRU)
;;              55 [100.0%] 
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u824(6){ }u825(7){ }u826(16){ }u827(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 17 [flags] 292 781
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 292 781
;; live  kill	 17 [flags]
(code_label 560 559 561 57 128 "" [2 uses])
(note 561 560 562 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 562 561 563 57 (set (reg:DI 781 [ state_4(D)->t64 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) blake_ref.c:578 89 {*movdi_internal}
     (nil))
(insn 563 562 564 57 (parallel [
            (set (reg:DI 292 [ D.6036 ])
                (plus:DI (reg:DI 781 [ state_4(D)->t64 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:578 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 781 [ state_4(D)->t64 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                    (const_int -8 [0xfffffffffffffff8]))
                (nil)))))
;;  succ:       58 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 292 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 292 633 634

;; basic block 58, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 57, next block 59, flags: (HOT_PARTITION, RTL)
;;  pred:       57 [100.0%]  (FALLTHRU)
;;              43 [100.0%] 
;;              44 [100.0%] 
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u831(6){ }u832(7){ }u833(16){ }u834(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 292 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 292 633
;; lr  def 	 17 [flags] 782
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 292 633 634
;; live  gen 	 17 [flags] 782
;; live  kill	 17 [flags]
(code_label 564 563 565 58 122 "" [2 uses])
(note 565 564 566 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 566 565 567 58 (parallel [
            (set (reg:DI 782)
                (plus:DI (reg:DI 292 [ D.6036 ])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:580 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 292 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 567 566 568 58 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 782)) blake_ref.c:580 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 782)
        (nil)))
(insn 568 567 569 58 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn 569 568 760 58 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 578)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 578)
;;  succ:       59 [50.0%]  (FALLTHRU)
;;              60 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 59, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 58, next block 60, flags: (HOT_PARTITION, RTL)
;;  pred:       58 [50.0%]  (FALLTHRU)
;;              78 [100.0%] 
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u840(6){ }u841(7){ }u842(16){ }u843(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 783
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 783
;; live  kill	 17 [flags]
(code_label 760 569 570 59 142 "" [1 uses])
(note 570 760 571 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 571 570 572 59 (parallel [
            (set (reg/f:DI 783)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 572 571 573 59 (set (reg:DI 37 r8)
        (const_int 128 [0x80])) 89 {*movdi_internal}
     (nil))
(insn 573 572 574 59 (set (reg:DI 1 dx)
        (reg/f:DI 783)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 783)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))
(insn 574 573 575 59 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 575 574 1137 59 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1137 575 1138 59 (set (pc)
        (label_ref 766)) -1
     (nil)
 -> 766)
;;  succ:       80 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

(barrier 1138 1137 578)
;; basic block 60, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 59, next block 61, flags: (HOT_PARTITION, RTL)
;;  pred:       58 [50.0%] 
;;              64 [100.0%] 
;;              79 [100.0%] 
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u852(6){ }u853(7){ }u854(16){ }u855(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 784
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 784
;; live  kill	 17 [flags]
(code_label 578 1138 579 60 130 "" [3 uses])
(note 579 578 580 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 580 579 581 60 (parallel [
            (set (reg/f:DI 784)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 581 580 582 60 (set (reg:DI 37 r8)
        (const_int 128 [0x80])) 89 {*movdi_internal}
     (nil))
(insn 582 581 583 60 (set (reg:DI 1 dx)
        (reg/f:DI 784)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 784)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))
(insn 583 582 584 60 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 584 583 1139 60 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1139 584 1140 60 (set (pc)
        (label_ref 766)) -1
     (nil)
 -> 766)
;;  succ:       80 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

(barrier 1140 1139 587)
;; basic block 61, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 60, next block 62, flags: (HOT_PARTITION, RTL)
;;  pred:       40 [50.0%] 
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u864(6){ }u865(7){ }u866(16){ }u867(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 242 633
;; lr  def 	 17 [flags] 298 305 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 801
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634
;; live  gen 	 17 [flags] 298 305 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 801
;; live  kill	 17 [flags]
(code_label 587 1140 588 61 119 "" [1 uses])
(note 588 587 590 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 590 588 591 61 (parallel [
            (set (reg:SI 786)
                (plus:SI (reg:SI 242 [ D.6033 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 591 590 592 61 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 242 [ D.6033 ])
            (const_int 0 [0]))) blake_ref.c:587 3 {*cmpsi_ccno_1}
     (nil))
(insn 592 591 593 61 (set (reg:SI 785 [ D.6033 ])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 786)
            (reg:SI 242 [ D.6033 ]))) blake_ref.c:587 951 {*movsicc_noc}
     (expr_list:REG_DEAD (reg:SI 786)
        (expr_list:REG_DEAD (reg:CCGOC 17 flags)
            (nil))))
(insn 593 592 595 61 (parallel [
            (set (reg:SI 787)
                (ashiftrt:SI (reg:SI 785 [ D.6033 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 785 [ D.6033 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (div:SI (reg:SI 242 [ D.6033 ])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 595 593 596 61 (parallel [
            (set (reg:SI 788)
                (ashiftrt:SI (reg:SI 242 [ D.6033 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 538 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 596 595 597 61 (parallel [
            (set (reg:SI 789)
                (lshiftrt:SI (reg:SI 788)
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 788)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 597 596 598 61 (parallel [
            (set (reg:SI 790)
                (plus:SI (reg:SI 242 [ D.6033 ])
                    (reg:SI 789)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 598 597 599 61 (parallel [
            (set (reg:SI 791)
                (and:SI (reg:SI 790)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 381 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 790)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 599 598 601 61 (parallel [
            (set (reg:SI 792)
                (minus:SI (reg:SI 791)
                    (reg:SI 789)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 791)
        (expr_list:REG_DEAD (reg:SI 789)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 601 599 602 61 (set (reg:SI 793)
        (const_int 8 [0x8])) blake_ref.c:587 90 {*movsi_internal}
     (nil))
(insn 602 601 603 61 (parallel [
            (set (reg:SI 298 [ D.6033 ])
                (minus:SI (reg:SI 793)
                    (reg:SI 792)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 793)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (const_int 8 [0x8])
                    (reg:SI 792))
                (nil)))))
(insn 603 602 604 61 (set (reg:DI 794 [ D.6033 ])
        (sign_extend:DI (reg:SI 787))) blake_ref.c:587 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 787)
        (nil)))
(insn 604 603 605 61 (set (reg:SI 796)
        (const_int 255 [0xff])) blake_ref.c:588 90 {*movsi_internal}
     (nil))
(insn 605 604 606 61 (parallel [
            (set (reg:SI 795 [ D.6033 ])
                (ashift:SI (reg:SI 796)
                    (subreg:QI (reg:SI 298 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 796)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashift:SI (const_int 255 [0xff])
                    (subreg:QI (reg:SI 298 [ D.6033 ]) 0))
                (nil)))))
(insn 606 605 607 61 (parallel [
            (set (reg:QI 797 [ D.6037 ])
                (and:QI (subreg:QI (reg:SI 795 [ D.6033 ]) 0)
                    (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                                (reg:DI 794 [ D.6033 ]))
                            (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 384 {*andqi_1}
     (expr_list:REG_DEAD (reg:SI 795 [ D.6033 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 607 606 608 61 (set (reg:SI 799)
        (const_int 128 [0x80])) blake_ref.c:588 90 {*movsi_internal}
     (nil))
(insn 608 607 609 61 (parallel [
            (set (reg:SI 798 [ D.6033 ])
                (ashiftrt:SI (reg:SI 799)
                    (subreg:QI (reg:SI 792) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 799)
        (expr_list:REG_DEAD (reg:SI 792)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (ashiftrt:SI (const_int 128 [0x80])
                        (subreg:QI (reg:SI 792) 0))
                    (nil))))))
(insn 609 608 611 61 (parallel [
            (set (reg:QI 305 [ D.6034 ])
                (xor:QI (reg:QI 797 [ D.6037 ])
                    (subreg:QI (reg:SI 798 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 406 {*xorqi_1}
     (expr_list:REG_DEAD (reg:SI 798 [ D.6033 ])
        (expr_list:REG_DEAD (reg:QI 797 [ D.6037 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 611 609 612 61 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 794 [ D.6033 ]))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (reg:QI 305 [ D.6034 ])) blake_ref.c:588 93 {*movqi_internal}
     (nil))
(insn 612 611 613 61 (parallel [
            (set (reg:SI 801 [ D.6035 ])
                (plus:SI (reg:SI 242 [ D.6033 ])
                    (const_int -889 [0xfffffffffffffc87])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:590 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 613 612 614 61 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 801 [ D.6035 ])
            (const_int 5 [0x5]))) blake_ref.c:590 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 801 [ D.6035 ])
        (nil)))
(jump_insn 614 613 615 61 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 631)
            (pc))) blake_ref.c:590 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 631)
;;  succ:       62 [50.0%]  (FALLTHRU)
;;              65 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 298 305 612 633 634 794
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 298 305 612 633 634 794

;; basic block 62, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 61, next block 63, flags: (HOT_PARTITION, RTL)
;;  pred:       61 [50.0%]  (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u903(6){ }u904(7){ }u905(16){ }u906(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 298 305 612 633 634 794
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 298 305 612 633 634 794
;; live  gen 	 17 [flags]
;; live  kill	
(note 615 614 616 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 616 615 617 62 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:592 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 612 [ D.6033 ])
        (nil)))
(jump_insn 617 616 618 62 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 622)
            (pc))) blake_ref.c:592 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 622)
;;  succ:       64 [28.0%] 
;;              63 [72.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 298 305 633 634 794
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 298 305 633 634 794

;; basic block 63, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 62, next block 64, flags: (HOT_PARTITION, RTL)
;;  pred:       62 [72.0%]  (FALLTHRU)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u909(6){ }u910(7){ }u911(16){ }u912(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 298 305 633 634 794
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 305 633 794
;; lr  def 	 17 [flags] 803
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 298 305 633 634 794
;; live  gen 	 803
;; live  kill	 17 [flags]
(note 618 617 620 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 620 618 621 63 (parallel [
            (set (reg:QI 803)
                (xor:QI (reg:QI 305 [ D.6034 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:595 406 {*xorqi_1}
     (expr_list:REG_DEAD (reg:QI 305 [ D.6034 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 621 620 622 63 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 794 [ D.6033 ]))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (reg:QI 803)) blake_ref.c:595 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 803)
        (expr_list:REG_DEAD (reg:DI 794 [ D.6033 ])
            (nil))))
;;  succ:       64 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 298 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 298 633 634

;; basic block 64, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 63, next block 65, flags: (HOT_PARTITION, RTL)
;;  pred:       62 [28.0%] 
;;              63 [100.0%]  (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u917(6){ }u918(7){ }u919(16){ }u920(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 298 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 298 633
;; lr  def 	 17 [flags] 804 805 806
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 298 633 634
;; live  gen 	 804 805 806
;; live  kill	 17 [flags]
(code_label 622 621 623 64 133 "" [1 uses])
(note 623 622 624 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 624 623 625 64 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 896 [0x380])) blake_ref.c:598 90 {*movsi_internal}
     (nil))
(insn 625 624 626 64 (set (reg:DI 804 [ D.6036 ])
        (sign_extend:DI (reg:SI 298 [ D.6033 ]))) blake_ref.c:634 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 298 [ D.6033 ])
        (nil)))
(insn 626 625 627 64 (parallel [
            (set (reg:DI 805 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 804 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 804 [ D.6036 ])
        (expr_list:REG_DEAD (reg:DI 241 [ D.6036 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 627 626 628 64 (parallel [
            (set (reg:DI 806)
                (plus:DI (reg:DI 805 [ D.6036 ])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 805 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 628 627 1141 64 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 806)) blake_ref.c:634 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 806)
        (nil)))
(jump_insn 1141 628 1142 64 (set (pc)
        (label_ref 578)) -1
     (nil)
 -> 578)
;;  succ:       60 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

(barrier 1142 1141 631)
;; basic block 65, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 64, next block 66, flags: (HOT_PARTITION, RTL)
;;  pred:       61 [50.0%] 
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u928(6){ }u929(7){ }u930(16){ }u931(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 242
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 631 1142 632 65 132 "" [1 uses])
(note 632 631 633 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 633 632 634 65 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 242 [ D.6033 ])
            (const_int 887 [0x377]))) blake_ref.c:601 7 {*cmpsi_1}
     (nil))
(jump_insn 634 633 635 65 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 665)
            (pc))) blake_ref.c:601 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 665)
;;  succ:       66 [50.0%]  (FALLTHRU)
;;              69 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634

;; basic block 66, loop depth 0, count 0, freq 762, maybe hot
;;  prev block 65, next block 67, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       65 [50.0%]  (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u934(6){ }u935(7){ }u936(16){ }u937(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633
;; lr  def 	 17 [flags] 317 319 616 807 808 809 810 811
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 612 633 634
;; live  gen 	 17 [flags] 317 319 616 807 808 809 810 811
;; live  kill	 17 [flags]
(note 635 634 636 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 636 635 637 66 (set (reg:SI 808)
        (const_int 888 [0x378])) blake_ref.c:603 90 {*movsi_internal}
     (nil))
(insn 637 636 638 66 (parallel [
            (set (reg:SI 807 [ D.6033 ])
                (minus:SI (reg:SI 808)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:603 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (minus:SI (const_int 888 [0x378])
                (reg:SI 242 [ D.6033 ]))
            (nil))))
(insn 638 637 639 66 (set (reg:DI 809 [ D.6036 ])
        (sign_extend:DI (reg:SI 807 [ D.6033 ]))) blake_ref.c:603 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 807 [ D.6033 ])
        (nil)))
(insn 639 638 640 66 (parallel [
            (set (reg:DI 616 [ D.6039 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 809 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:603 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 809 [ D.6036 ])
        (expr_list:REG_DEAD (reg:DI 241 [ D.6036 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 640 639 641 66 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 616 [ D.6039 ])) blake_ref.c:603 89 {*movdi_internal}
     (nil))
(insn 641 640 642 66 (parallel [
            (set (reg:SI 810 [ D.6035 ])
                (and:SI (reg:SI 242 [ D.6033 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:604 381 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 242 [ D.6033 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 642 641 643 66 (parallel [
            (set (reg:SI 317 [ D.6033 ])
                (plus:SI (reg:SI 810 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:604 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 810 [ D.6035 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 643 642 645 66 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 317 [ D.6033 ])) blake_ref.c:604 90 {*movsi_internal}
     (nil))
(insn 645 643 646 66 (parallel [
            (set (reg:SI 811 [ D.6033 ])
                (minus:SI (reg:SI 808)
                    (reg:SI 317 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:605 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 808)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (const_int 888 [0x378])
                    (reg:SI 317 [ D.6033 ]))
                (nil)))))
(insn 646 645 647 66 (set (reg:DI 319 [ D.6036 ])
        (sign_extend:DI (reg:SI 811 [ D.6033 ]))) blake_ref.c:605 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 811 [ D.6033 ])
        (nil)))
(note 647 646 648 66 NOTE_INSN_DELETED)
(note 648 647 649 66 NOTE_INSN_DELETED)
(insn 649 648 650 66 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 319 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 650 649 1026 66 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1034)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1400 (nil)))
 -> 1034)
;;  succ:       68 [14.0%] 
;;              67 [86.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317 319 612 616 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317 319 612 616 633 634

;; basic block 67, loop depth 0, count 0, freq 655, maybe hot
;;  prev block 66, next block 68, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       66 [86.0%]  (FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u958(6){ }u959(7){ }u960(16){ }u961(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317 319 612 616 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 317 319 612 616 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(note 1026 650 651 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(note 651 1026 652 67 NOTE_INSN_DELETED)
(note 652 651 653 67 NOTE_INSN_DELETED)
(insn 653 652 654 67 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 317 [ D.6033 ])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 317 [ D.6033 ])
        (nil)))
(jump_insn 654 653 1034 67 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 731)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 8372 (nil)))
 -> 731)
;;  succ:       75 [83.7%] 
;;              68 [16.3%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 319 612 616 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 319 612 616 633 634

;; basic block 68, loop depth 0, count 0, freq 373, maybe hot
;; Invalid sum of incoming frequencies 214, should be 373
;;  prev block 67, next block 69, flags: (HOT_PARTITION, RTL)
;;  pred:       67 [16.3%]  (FALLTHRU)
;;              66 [14.0%] 
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u966(6){ }u967(7){ }u968(16){ }u969(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 319 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 319 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 612 616
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 319 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 612 616
;; live  kill	
(code_label 1034 654 656 68 150 "" [1 uses])
(note 656 1034 657 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 657 656 658 68 (set (reg:DI 37 r8)
        (reg:DI 319 [ D.6036 ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 319 [ D.6036 ])
        (nil)))
(insn 658 657 659 68 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 659 658 660 68 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 660 659 661 68 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 661 660 662 68 (set (reg:DI 616 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 662 661 1143 68 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1143 662 1144 68 (set (pc)
        (label_ref 731)) -1
     (nil)
 -> 731)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 616 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 616 633 634

(barrier 1144 1143 665)
;; basic block 69, loop depth 0, count 0, freq 762, maybe hot
;;  prev block 68, next block 70, flags: (HOT_PARTITION, RTL)
;;  pred:       65 [50.0%] 
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u978(6){ }u979(7){ }u980(16){ }u981(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 242
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 665 1144 666 69 134 "" [1 uses])
(note 666 665 667 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 667 666 668 69 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 242 [ D.6033 ])
            (const_int 1016 [0x3f8]))) blake_ref.c:608 7 {*cmpsi_1}
     (nil))
(jump_insn 668 667 669 69 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 692)
            (pc))) blake_ref.c:608 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 692)
;;  succ:       70 [29.0%]  (FALLTHRU)
;;              71 [71.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634

;; basic block 70, loop depth 0, count 0, freq 2457, maybe hot
;; Invalid sum of incoming frequencies 221, should be 2457
;;  prev block 69, next block 71, flags: (HOT_PARTITION, RTL)
;;  pred:       69 [29.0%]  (FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u984(6){ }u985(7){ }u986(16){ }u987(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 612 616 817 818 819 820 821 822
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 612 616 817 818 819 820 821 822
;; live  kill	 17 [flags]
(note 669 668 670 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 670 669 671 70 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 1024 [0x400])) blake_ref.c:611 90 {*movsi_internal}
     (nil))
(insn 671 670 672 70 (set (reg:SI 818)
        (const_int 1024 [0x400])) blake_ref.c:362 90 {*movsi_internal}
     (nil))
(insn 672 671 673 70 (parallel [
            (set (reg:SI 817 [ D.6033 ])
                (minus:SI (reg:SI 818)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 818)
        (expr_list:REG_DEAD (reg:SI 242 [ D.6033 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (minus:SI (const_int 1024 [0x400])
                        (reg:SI 242 [ D.6033 ]))
                    (nil))))))
(insn 673 672 674 70 (set (reg:DI 819 [ D.6036 ])
        (sign_extend:DI (reg:SI 817 [ D.6033 ]))) blake_ref.c:362 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 817 [ D.6033 ])
        (nil)))
(insn 674 673 675 70 (parallel [
            (set (reg:DI 820 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 819 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 819 [ D.6036 ])
        (expr_list:REG_DEAD (reg:DI 241 [ D.6036 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 675 674 676 70 (parallel [
            (set (reg:DI 821)
                (plus:DI (reg:DI 820 [ D.6036 ])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 820 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 676 675 677 70 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 821)) blake_ref.c:362 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 821)
        (nil)))
(insn 677 676 678 70 (parallel [
            (set (reg/f:DI 822 [ D.6040 ])
                (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 678 677 679 70 (set (reg:DI 1 dx)
        (reg/f:DI 822 [ D.6040 ])) blake_ref.c:364 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 822 [ D.6040 ])
        (nil)))
(insn 679 678 680 70 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) blake_ref.c:364 89 {*movdi_internal}
     (nil))
(call_insn 680 679 681 70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:364 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 681 680 682 70 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:391 90 {*movsi_internal}
     (nil))
(insn 682 681 683 70 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                        (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:613 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 683 682 684 70 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) 89 {*movdi_internal}
     (nil))
(insn 684 683 685 70 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 685 684 686 70 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 686 685 687 70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 687 686 688 70 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:615 90 {*movsi_internal}
     (nil))
(insn 688 687 689 70 (set (reg:DI 616 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 689 688 1145 70 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1145 689 1146 70 (set (pc)
        (label_ref 731)) -1
     (nil)
 -> 731)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 616 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 616 633 634

(barrier 1146 1145 692)
;; basic block 71, loop depth 0, count 0, freq 541, maybe hot
;;  prev block 70, next block 72, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       69 [71.0%] 
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u1015(6){ }u1016(7){ }u1017(16){ }u1018(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633
;; lr  def 	 17 [flags] 327 330 332 823 824 825 826 827
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; live  gen 	 17 [flags] 327 330 332 823 824 825 826 827
;; live  kill	 17 [flags]
(code_label 692 1146 693 71 137 "" [1 uses])
(note 693 692 694 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 694 693 695 71 (set (reg:SI 824)
        (const_int 1024 [0x400])) blake_ref.c:619 90 {*movsi_internal}
     (nil))
(insn 695 694 696 71 (parallel [
            (set (reg:SI 823 [ D.6033 ])
                (minus:SI (reg:SI 824)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:619 260 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (minus:SI (const_int 1024 [0x400])
                (reg:SI 242 [ D.6033 ]))
            (nil))))
(insn 696 695 697 71 (set (reg:DI 825 [ D.6036 ])
        (sign_extend:DI (reg:SI 823 [ D.6033 ]))) blake_ref.c:619 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 823 [ D.6033 ])
        (nil)))
(insn 697 696 698 71 (parallel [
            (set (reg:DI 327 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 825 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:619 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 825 [ D.6036 ])
        (expr_list:REG_DEAD (reg:DI 241 [ D.6036 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 698 697 699 71 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 327 [ D.6036 ])) blake_ref.c:619 89 {*movdi_internal}
     (nil))
(insn 699 698 700 71 (parallel [
            (set (reg:SI 826 [ D.6035 ])
                (and:SI (reg:SI 242 [ D.6033 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:621 381 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 242 [ D.6033 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 700 699 701 71 (parallel [
            (set (reg:SI 330 [ D.6033 ])
                (plus:SI (reg:SI 826 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:621 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 826 [ D.6035 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 701 700 703 71 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 330 [ D.6033 ])) blake_ref.c:621 90 {*movsi_internal}
     (nil))
(insn 703 701 704 71 (parallel [
            (set (reg:SI 827 [ D.6033 ])
                (minus:SI (reg:SI 824)
                    (reg:SI 330 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:622 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 824)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (const_int 1024 [0x400])
                    (reg:SI 330 [ D.6033 ]))
                (nil)))))
(insn 704 703 705 71 (set (reg:DI 332 [ D.6036 ])
        (sign_extend:DI (reg:SI 827 [ D.6033 ]))) blake_ref.c:622 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 827 [ D.6033 ])
        (nil)))
(note 705 704 706 71 NOTE_INSN_DELETED)
(note 706 705 707 71 NOTE_INSN_DELETED)
(insn 707 706 708 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 332 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 708 707 1028 71 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1035)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1400 (nil)))
 -> 1035)
;;  succ:       73 [14.0%] 
;;              72 [86.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327 330 332 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327 330 332 633 634

;; basic block 72, loop depth 0, count 0, freq 465, maybe hot
;;  prev block 71, next block 73, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       71 [86.0%]  (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u1039(6){ }u1040(7){ }u1041(16){ }u1042(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327 330 332 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 330
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327 330 332 633 634
;; live  gen 	 17 [flags]
;; live  kill	
(note 1028 708 709 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(note 709 1028 710 72 NOTE_INSN_DELETED)
(note 710 709 711 72 NOTE_INSN_DELETED)
(insn 711 710 712 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 330 [ D.6033 ])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 330 [ D.6033 ])
        (nil)))
(jump_insn 712 711 1035 72 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 720)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 8372 (nil)))
 -> 720)
;;  succ:       74 [83.7%] 
;;              73 [16.3%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327 332 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327 332 633 634

;; basic block 73, loop depth 0, count 0, freq 265, maybe hot
;; Invalid sum of incoming frequencies 152, should be 265
;;  prev block 72, next block 74, flags: (HOT_PARTITION, RTL)
;;  pred:       72 [16.3%]  (FALLTHRU)
;;              71 [14.0%] 
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u1047(6){ }u1048(7){ }u1049(16){ }u1050(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 332 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 332 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 327
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 332 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 327
;; live  kill	
(code_label 1035 712 714 73 151 "" [1 uses])
(note 714 1035 715 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 715 714 716 73 (set (reg:DI 37 r8)
        (reg:DI 332 [ D.6036 ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 332 [ D.6036 ])
        (nil)))
(insn 716 715 717 73 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 717 716 718 73 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 718 717 719 73 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 719 718 720 73 (set (reg:DI 327 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       74 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327 633 634

;; basic block 74, loop depth 0, count 0, freq 541, maybe hot
;; Invalid sum of incoming frequencies 654, should be 541
;;  prev block 73, next block 75, flags: (HOT_PARTITION, RTL)
;;  pred:       73 [100.0%]  (FALLTHRU)
;;              72 [83.7%] 
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u1058(6){ }u1059(7){ }u1060(16){ }u1061(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 612 616 833
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 327 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 612 616 833
;; live  kill	 17 [flags]
(code_label 720 719 721 74 138 "" [1 uses])
(note 721 720 722 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 722 721 723 74 (parallel [
            (set (reg:DI 833)
                (plus:DI (reg:DI 327 [ D.6036 ])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:623 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 327 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 723 722 724 74 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 833)) blake_ref.c:623 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 833)
        (nil)))
(insn 724 723 725 74 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) 89 {*movdi_internal}
     (nil))
(insn 725 724 726 74 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 726 725 727 74 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 727 726 728 74 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 728 727 729 74 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:625 90 {*movsi_internal}
     (nil))
(insn 729 728 730 74 (set (reg:DI 616 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 730 729 731 74 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       75 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 616 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 616 633 634

;; basic block 75, loop depth 0, count 0, freq 1525, maybe hot
;; Invalid sum of incoming frequencies 3919, should be 1525
;;  prev block 74, next block 76, flags: (HOT_PARTITION, RTL)
;;  pred:       74 [100.0%]  (FALLTHRU)
;;              67 [83.7%] 
;;              68 [100.0%] 
;;              70 [100.0%] 
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u1073(6){ }u1074(7){ }u1075(16){ }u1076(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 616 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 616 633
;; lr  def 	 17 [flags] 834
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 612 616 633 634
;; live  gen 	 17 [flags] 834
;; live  kill	 17 [flags]
(code_label 731 730 732 75 135 "" [3 uses])
(note 732 731 733 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 733 732 734 75 (parallel [
            (set (reg:DI 834)
                (plus:DI (reg:DI 616 [ D.6039 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:628 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 616 [ D.6039 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 734 733 735 75 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 834)) blake_ref.c:628 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 834)
        (nil)))
(insn 735 734 736 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:629 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 612 [ D.6033 ])
        (nil)))
(jump_insn 736 735 737 75 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 747)
            (pc))) blake_ref.c:629 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 747)
;;  succ:       76 [28.0%]  (FALLTHRU)
;;              77 [72.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 76, loop depth 0, count 0, freq 427, maybe hot
;;  prev block 75, next block 77, flags: (HOT_PARTITION, RTL)
;;  pred:       75 [28.0%]  (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u1082(6){ }u1083(7){ }u1084(16){ }u1085(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 283 594 835
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 283 594 835
;; live  kill	 17 [flags]
(note 737 736 738 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 738 737 739 76 (parallel [
            (set (reg/f:DI 835)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 739 738 740 76 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 740 739 741 76 (set (reg:DI 1 dx)
        (reg/f:DI 835)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 835)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec]))
            (nil))))
(insn 741 740 742 76 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 742 741 743 76 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 743 742 744 76 (set (reg:DI 594 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 744 743 1147 76 (set (reg:SI 283 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 1147 744 1148 76 (set (pc)
        (label_ref 756)) -1
     (nil)
 -> 756)
;;  succ:       78 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 283 594 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 283 594 633 634

(barrier 1148 1147 747)
;; basic block 77, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 76, next block 78, flags: (HOT_PARTITION, RTL)
;;  pred:       75 [72.0%] 
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u1096(6){ }u1097(7){ }u1098(16){ }u1099(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 283 594 836
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 283 594 836
;; live  kill	 17 [flags]
(code_label 747 1148 748 77 140 "" [1 uses])
(note 748 747 749 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 749 748 750 77 (parallel [
            (set (reg/f:DI 836)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 750 749 751 77 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 751 750 752 77 (set (reg:DI 1 dx)
        (reg/f:DI 836)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 836)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -19 [0xffffffffffffffed]))
            (nil))))
(insn 752 751 753 77 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 753 752 754 77 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 754 753 755 77 (set (reg:DI 594 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 755 754 756 77 (set (reg:SI 283 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       78 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 283 594 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 283 594 633 634

;; basic block 78, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 77, next block 79, flags: (HOT_PARTITION, RTL)
;;  pred:       77 [100.0%]  (FALLTHRU)
;;              76 [100.0%] 
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u1110(6){ }u1111(7){ }u1112(16){ }u1113(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 283 594 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 283 594 633
;; lr  def 	 17 [flags] 837
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 283 594 633 634
;; live  gen 	 17 [flags] 837
;; live  kill	 17 [flags]
(code_label 756 755 757 78 141 "" [1 uses])
(note 757 756 758 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 758 757 759 78 (parallel [
            (set (reg:DI 837)
                (plus:DI (reg:DI 594 [ D.6039 ])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 594 [ D.6039 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 759 758 761 78 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 837)) blake_ref.c:634 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 837)
        (nil)))
(insn 761 759 762 78 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 283 [ D.6033 ])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 283 [ D.6033 ])
        (nil)))
(jump_insn 762 761 1149 78 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 760)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 760)
;;  succ:       59 [100.0%] 
;;              79 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 79, loop depth 0, count 0, freq 0
;;  prev block 78, next block 80, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       78 (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	
;; lr  use 	
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
(note 1149 762 1150 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1150 1149 1151 79 (set (pc)
        (label_ref 578)) -1
     (nil)
 -> 578)
;;  succ:       60 [100.0%] 
;; lr  out 	
;; live  out 	

(barrier 1151 1150 766)
;; basic block 80, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 79, next block 81, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       59 [100.0%] 
;;              60 [100.0%] 
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u1119(6){ }u1120(7){ }u1121(16){ }u1122(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  def 	 17 [flags] 840 843 844 846 847 850 852 853 854 855 858 861 862 864 865 868 870 871 872 873 876 879 880 882 883 886 888 889 890 891 894 897 898 900 901 904 906 907 908 909 912 915 916 918 919 922 924 925 926 927 930 933 934 936 937 940 942 943 944 945
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 17 [flags] 840 843 844 846 847 850 852 853 854 855 858 861 862 864 865 868 870 871 872 873 876 879 880 882 883 886 888 889 890 891 894 897 898 900 901 904 906 907 908 909 912 915 916 918 919 922 924 925 926 927 930 933 934 936 937 940 942 943 944 945
;; live  kill	 17 [flags]
(code_label 766 1151 767 80 131 "" [2 uses])
(note 767 766 768 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(note 768 767 769 80 NOTE_INSN_DELETED)
(note 769 768 770 80 NOTE_INSN_DELETED)
(insn 770 769 771 80 (set (reg:SI 840 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 143 [0x8f])) [3 state_4(D)->h64+7 S1 A8]))) blake_ref.c:638 138 {*zero_extendqisi2}
     (nil))
(insn 771 770 772 80 (set (mem:QI (reg/v/f:DI 634 [ hashval ]) [0 *hashval_6(D)+0 S1 A8])
        (subreg:QI (reg:SI 840 [ D.6032 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 840 [ D.6032 ])
        (nil)))
(note 772 771 773 80 NOTE_INSN_DELETED)
(note 773 772 774 80 NOTE_INSN_DELETED)
(insn 774 773 775 80 (set (reg:SI 843 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 142 [0x8e])) [3 state_4(D)->h64+6 S2 A16]))) blake_ref.c:638 139 {*zero_extendhisi2}
     (nil))
(insn 775 774 776 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 1 [0x1])) [0 MEM[(BitSequence *)hashval_6(D) + 1B]+0 S1 A8])
        (subreg:QI (reg:SI 843 [ D.6032 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 843 [ D.6032 ])
        (nil)))
(note 776 775 777 80 NOTE_INSN_DELETED)
(insn 777 776 778 80 (set (reg:DI 844 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 140 [0x8c])) [3 state_4(D)->h64+4 S4 A32]))) blake_ref.c:638 133 {*zero_extendsidi2}
     (nil))
(insn 778 777 779 80 (parallel [
            (set (reg:SI 846 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 844 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 844 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 779 778 780 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 2 [0x2])) [0 MEM[(BitSequence *)hashval_6(D) + 2B]+0 S1 A8])
        (subreg:QI (reg:SI 846 [ D.6032 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 846 [ D.6032 ])
        (nil)))
(note 780 779 781 80 NOTE_INSN_DELETED)
(insn 781 780 782 80 (set (reg:DI 847 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 140 [0x8c])) [3 state_4(D)->h64+4 S4 A32]))) blake_ref.c:638 133 {*zero_extendsidi2}
     (nil))
(insn 782 781 783 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 3 [0x3])) [0 MEM[(BitSequence *)hashval_6(D) + 3B]+0 S1 A8])
        (subreg:QI (reg:DI 847 [ D.6036 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 847 [ D.6036 ])
        (nil)))
(note 783 782 784 80 NOTE_INSN_DELETED)
(insn 784 783 785 80 (set (reg:SI 850 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 139 [0x8b])) [3 state_4(D)->h64+3 S1 A8]))) blake_ref.c:638 138 {*zero_extendqisi2}
     (nil))
(insn 785 784 786 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 4 [0x4])) [0 MEM[(BitSequence *)hashval_6(D) + 4B]+0 S1 A8])
        (subreg:QI (reg:SI 850 [ D.6032 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 850 [ D.6032 ])
        (nil)))
(note 786 785 787 80 NOTE_INSN_DELETED)
(insn 787 786 788 80 (set (reg:SI 852 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 138 [0x8a])) [3 state_4(D)->h64+2 S2 A16]))) blake_ref.c:638 139 {*zero_extendhisi2}
     (nil))
(insn 788 787 789 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 5 [0x5])) [0 MEM[(BitSequence *)hashval_6(D) + 5B]+0 S1 A8])
        (subreg:QI (reg:SI 852 [ D.6032 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 852 [ D.6032 ])
        (nil)))
(insn 789 788 790 80 (set (reg:DI 853 [ state_4(D)->h64 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 89 {*movdi_internal}
     (nil))
(insn 790 789 791 80 (parallel [
            (set (reg:SI 854 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 853 [ state_4(D)->h64 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 853 [ state_4(D)->h64 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 791 790 792 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 6 [0x6])) [0 MEM[(BitSequence *)hashval_6(D) + 6B]+0 S1 A8])
        (subreg:QI (reg:SI 854 [ D.6032 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 854 [ D.6032 ])
        (nil)))
(insn 792 791 793 80 (set (reg:DI 855 [ state_4(D)->h64 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 89 {*movdi_internal}
     (nil))
(insn 793 792 794 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 7 [0x7])) [0 MEM[(BitSequence *)hashval_6(D) + 7B]+0 S1 A8])
        (subreg:QI (reg:DI 855 [ state_4(D)->h64 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 855 [ state_4(D)->h64 ])
        (nil)))
(note 794 793 795 80 NOTE_INSN_DELETED)
(note 795 794 796 80 NOTE_INSN_DELETED)
(insn 796 795 797 80 (set (reg:SI 858 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 151 [0x97])) [3 state_4(D)->h64+15 S1 A8]))) blake_ref.c:639 138 {*zero_extendqisi2}
     (nil))
(insn 797 796 798 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 8 [0x8])) [0 MEM[(BitSequence *)hashval_6(D) + 8B]+0 S1 A8])
        (subreg:QI (reg:SI 858 [ D.6032 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 858 [ D.6032 ])
        (nil)))
(note 798 797 799 80 NOTE_INSN_DELETED)
(note 799 798 800 80 NOTE_INSN_DELETED)
(insn 800 799 801 80 (set (reg:SI 861 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 150 [0x96])) [3 state_4(D)->h64+14 S2 A16]))) blake_ref.c:639 139 {*zero_extendhisi2}
     (nil))
(insn 801 800 802 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 9 [0x9])) [0 MEM[(BitSequence *)hashval_6(D) + 9B]+0 S1 A8])
        (subreg:QI (reg:SI 861 [ D.6032 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 861 [ D.6032 ])
        (nil)))
(note 802 801 803 80 NOTE_INSN_DELETED)
(insn 803 802 804 80 (set (reg:DI 862 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 148 [0x94])) [3 state_4(D)->h64+12 S4 A32]))) blake_ref.c:639 133 {*zero_extendsidi2}
     (nil))
(insn 804 803 805 80 (parallel [
            (set (reg:SI 864 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 862 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 862 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 805 804 806 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 10 [0xa])) [0 MEM[(BitSequence *)hashval_6(D) + 10B]+0 S1 A8])
        (subreg:QI (reg:SI 864 [ D.6032 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 864 [ D.6032 ])
        (nil)))
(note 806 805 807 80 NOTE_INSN_DELETED)
(insn 807 806 808 80 (set (reg:DI 865 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 148 [0x94])) [3 state_4(D)->h64+12 S4 A32]))) blake_ref.c:639 133 {*zero_extendsidi2}
     (nil))
(insn 808 807 809 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 11 [0xb])) [0 MEM[(BitSequence *)hashval_6(D) + 11B]+0 S1 A8])
        (subreg:QI (reg:DI 865 [ D.6036 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 865 [ D.6036 ])
        (nil)))
(note 809 808 810 80 NOTE_INSN_DELETED)
(insn 810 809 811 80 (set (reg:SI 868 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 147 [0x93])) [3 state_4(D)->h64+11 S1 A8]))) blake_ref.c:639 138 {*zero_extendqisi2}
     (nil))
(insn 811 810 812 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 12 [0xc])) [0 MEM[(BitSequence *)hashval_6(D) + 12B]+0 S1 A8])
        (subreg:QI (reg:SI 868 [ D.6032 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 868 [ D.6032 ])
        (nil)))
(note 812 811 813 80 NOTE_INSN_DELETED)
(insn 813 812 814 80 (set (reg:SI 870 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 146 [0x92])) [3 state_4(D)->h64+10 S2 A16]))) blake_ref.c:639 139 {*zero_extendhisi2}
     (nil))
(insn 814 813 815 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 13 [0xd])) [0 MEM[(BitSequence *)hashval_6(D) + 13B]+0 S1 A8])
        (subreg:QI (reg:SI 870 [ D.6032 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 870 [ D.6032 ])
        (nil)))
(insn 815 814 816 80 (set (reg:DI 871 [ state_4(D)->h64+8 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 89 {*movdi_internal}
     (nil))
(insn 816 815 817 80 (parallel [
            (set (reg:SI 872 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 871 [ state_4(D)->h64+8 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 871 [ state_4(D)->h64+8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 817 816 818 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 14 [0xe])) [0 MEM[(BitSequence *)hashval_6(D) + 14B]+0 S1 A8])
        (subreg:QI (reg:SI 872 [ D.6032 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 872 [ D.6032 ])
        (nil)))
(insn 818 817 819 80 (set (reg:DI 873 [ state_4(D)->h64+8 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 89 {*movdi_internal}
     (nil))
(insn 819 818 820 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 15 [0xf])) [0 MEM[(BitSequence *)hashval_6(D) + 15B]+0 S1 A8])
        (subreg:QI (reg:DI 873 [ state_4(D)->h64+8 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 873 [ state_4(D)->h64+8 ])
        (nil)))
(note 820 819 821 80 NOTE_INSN_DELETED)
(note 821 820 822 80 NOTE_INSN_DELETED)
(insn 822 821 823 80 (set (reg:SI 876 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 159 [0x9f])) [3 state_4(D)->h64+23 S1 A8]))) blake_ref.c:640 138 {*zero_extendqisi2}
     (nil))
(insn 823 822 824 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 16 [0x10])) [0 MEM[(BitSequence *)hashval_6(D) + 16B]+0 S1 A8])
        (subreg:QI (reg:SI 876 [ D.6032 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 876 [ D.6032 ])
        (nil)))
(note 824 823 825 80 NOTE_INSN_DELETED)
(note 825 824 826 80 NOTE_INSN_DELETED)
(insn 826 825 827 80 (set (reg:SI 879 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 158 [0x9e])) [3 state_4(D)->h64+22 S2 A16]))) blake_ref.c:640 139 {*zero_extendhisi2}
     (nil))
(insn 827 826 828 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 17 [0x11])) [0 MEM[(BitSequence *)hashval_6(D) + 17B]+0 S1 A8])
        (subreg:QI (reg:SI 879 [ D.6032 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 879 [ D.6032 ])
        (nil)))
(note 828 827 829 80 NOTE_INSN_DELETED)
(insn 829 828 830 80 (set (reg:DI 880 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 156 [0x9c])) [3 state_4(D)->h64+20 S4 A32]))) blake_ref.c:640 133 {*zero_extendsidi2}
     (nil))
(insn 830 829 831 80 (parallel [
            (set (reg:SI 882 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 880 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 880 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 831 830 832 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 18 [0x12])) [0 MEM[(BitSequence *)hashval_6(D) + 18B]+0 S1 A8])
        (subreg:QI (reg:SI 882 [ D.6032 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 882 [ D.6032 ])
        (nil)))
(note 832 831 833 80 NOTE_INSN_DELETED)
(insn 833 832 834 80 (set (reg:DI 883 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 156 [0x9c])) [3 state_4(D)->h64+20 S4 A32]))) blake_ref.c:640 133 {*zero_extendsidi2}
     (nil))
(insn 834 833 835 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 19 [0x13])) [0 MEM[(BitSequence *)hashval_6(D) + 19B]+0 S1 A8])
        (subreg:QI (reg:DI 883 [ D.6036 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 883 [ D.6036 ])
        (nil)))
(note 835 834 836 80 NOTE_INSN_DELETED)
(insn 836 835 837 80 (set (reg:SI 886 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 155 [0x9b])) [3 state_4(D)->h64+19 S1 A8]))) blake_ref.c:640 138 {*zero_extendqisi2}
     (nil))
(insn 837 836 838 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 20 [0x14])) [0 MEM[(BitSequence *)hashval_6(D) + 20B]+0 S1 A8])
        (subreg:QI (reg:SI 886 [ D.6032 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 886 [ D.6032 ])
        (nil)))
(note 838 837 839 80 NOTE_INSN_DELETED)
(insn 839 838 840 80 (set (reg:SI 888 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 154 [0x9a])) [3 state_4(D)->h64+18 S2 A16]))) blake_ref.c:640 139 {*zero_extendhisi2}
     (nil))
(insn 840 839 841 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 21 [0x15])) [0 MEM[(BitSequence *)hashval_6(D) + 21B]+0 S1 A8])
        (subreg:QI (reg:SI 888 [ D.6032 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 888 [ D.6032 ])
        (nil)))
(insn 841 840 842 80 (set (reg:DI 889 [ state_4(D)->h64+16 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 89 {*movdi_internal}
     (nil))
(insn 842 841 843 80 (parallel [
            (set (reg:SI 890 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 889 [ state_4(D)->h64+16 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 889 [ state_4(D)->h64+16 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 843 842 844 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 22 [0x16])) [0 MEM[(BitSequence *)hashval_6(D) + 22B]+0 S1 A8])
        (subreg:QI (reg:SI 890 [ D.6032 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 890 [ D.6032 ])
        (nil)))
(insn 844 843 845 80 (set (reg:DI 891 [ state_4(D)->h64+16 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 89 {*movdi_internal}
     (nil))
(insn 845 844 846 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 23 [0x17])) [0 MEM[(BitSequence *)hashval_6(D) + 23B]+0 S1 A8])
        (subreg:QI (reg:DI 891 [ state_4(D)->h64+16 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 891 [ state_4(D)->h64+16 ])
        (nil)))
(note 846 845 847 80 NOTE_INSN_DELETED)
(note 847 846 848 80 NOTE_INSN_DELETED)
(insn 848 847 849 80 (set (reg:SI 894 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 167 [0xa7])) [3 state_4(D)->h64+31 S1 A8]))) blake_ref.c:641 138 {*zero_extendqisi2}
     (nil))
(insn 849 848 850 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 24 [0x18])) [0 MEM[(BitSequence *)hashval_6(D) + 24B]+0 S1 A8])
        (subreg:QI (reg:SI 894 [ D.6032 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 894 [ D.6032 ])
        (nil)))
(note 850 849 851 80 NOTE_INSN_DELETED)
(note 851 850 852 80 NOTE_INSN_DELETED)
(insn 852 851 853 80 (set (reg:SI 897 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 166 [0xa6])) [3 state_4(D)->h64+30 S2 A16]))) blake_ref.c:641 139 {*zero_extendhisi2}
     (nil))
(insn 853 852 854 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 25 [0x19])) [0 MEM[(BitSequence *)hashval_6(D) + 25B]+0 S1 A8])
        (subreg:QI (reg:SI 897 [ D.6032 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 897 [ D.6032 ])
        (nil)))
(note 854 853 855 80 NOTE_INSN_DELETED)
(insn 855 854 856 80 (set (reg:DI 898 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 164 [0xa4])) [3 state_4(D)->h64+28 S4 A32]))) blake_ref.c:641 133 {*zero_extendsidi2}
     (nil))
(insn 856 855 857 80 (parallel [
            (set (reg:SI 900 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 898 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 898 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 857 856 858 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 26 [0x1a])) [0 MEM[(BitSequence *)hashval_6(D) + 26B]+0 S1 A8])
        (subreg:QI (reg:SI 900 [ D.6032 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 900 [ D.6032 ])
        (nil)))
(note 858 857 859 80 NOTE_INSN_DELETED)
(insn 859 858 860 80 (set (reg:DI 901 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 164 [0xa4])) [3 state_4(D)->h64+28 S4 A32]))) blake_ref.c:641 133 {*zero_extendsidi2}
     (nil))
(insn 860 859 861 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 27 [0x1b])) [0 MEM[(BitSequence *)hashval_6(D) + 27B]+0 S1 A8])
        (subreg:QI (reg:DI 901 [ D.6036 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 901 [ D.6036 ])
        (nil)))
(note 861 860 862 80 NOTE_INSN_DELETED)
(insn 862 861 863 80 (set (reg:SI 904 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 163 [0xa3])) [3 state_4(D)->h64+27 S1 A8]))) blake_ref.c:641 138 {*zero_extendqisi2}
     (nil))
(insn 863 862 864 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 28 [0x1c])) [0 MEM[(BitSequence *)hashval_6(D) + 28B]+0 S1 A8])
        (subreg:QI (reg:SI 904 [ D.6032 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 904 [ D.6032 ])
        (nil)))
(note 864 863 865 80 NOTE_INSN_DELETED)
(insn 865 864 866 80 (set (reg:SI 906 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 162 [0xa2])) [3 state_4(D)->h64+26 S2 A16]))) blake_ref.c:641 139 {*zero_extendhisi2}
     (nil))
(insn 866 865 867 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 29 [0x1d])) [0 MEM[(BitSequence *)hashval_6(D) + 29B]+0 S1 A8])
        (subreg:QI (reg:SI 906 [ D.6032 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 906 [ D.6032 ])
        (nil)))
(insn 867 866 868 80 (set (reg:DI 907 [ state_4(D)->h64+24 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 89 {*movdi_internal}
     (nil))
(insn 868 867 869 80 (parallel [
            (set (reg:SI 908 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 907 [ state_4(D)->h64+24 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 907 [ state_4(D)->h64+24 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 869 868 870 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 30 [0x1e])) [0 MEM[(BitSequence *)hashval_6(D) + 30B]+0 S1 A8])
        (subreg:QI (reg:SI 908 [ D.6032 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 908 [ D.6032 ])
        (nil)))
(insn 870 869 871 80 (set (reg:DI 909 [ state_4(D)->h64+24 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 89 {*movdi_internal}
     (nil))
(insn 871 870 872 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 31 [0x1f])) [0 MEM[(BitSequence *)hashval_6(D) + 31B]+0 S1 A8])
        (subreg:QI (reg:DI 909 [ state_4(D)->h64+24 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 909 [ state_4(D)->h64+24 ])
        (nil)))
(note 872 871 873 80 NOTE_INSN_DELETED)
(note 873 872 874 80 NOTE_INSN_DELETED)
(insn 874 873 875 80 (set (reg:SI 912 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 175 [0xaf])) [3 state_4(D)->h64+39 S1 A8]))) blake_ref.c:642 138 {*zero_extendqisi2}
     (nil))
(insn 875 874 876 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 32 [0x20])) [0 MEM[(BitSequence *)hashval_6(D) + 32B]+0 S1 A8])
        (subreg:QI (reg:SI 912 [ D.6032 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 912 [ D.6032 ])
        (nil)))
(note 876 875 877 80 NOTE_INSN_DELETED)
(note 877 876 878 80 NOTE_INSN_DELETED)
(insn 878 877 879 80 (set (reg:SI 915 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 174 [0xae])) [3 state_4(D)->h64+38 S2 A16]))) blake_ref.c:642 139 {*zero_extendhisi2}
     (nil))
(insn 879 878 880 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 33 [0x21])) [0 MEM[(BitSequence *)hashval_6(D) + 33B]+0 S1 A8])
        (subreg:QI (reg:SI 915 [ D.6032 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 915 [ D.6032 ])
        (nil)))
(note 880 879 881 80 NOTE_INSN_DELETED)
(insn 881 880 882 80 (set (reg:DI 916 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 172 [0xac])) [3 state_4(D)->h64+36 S4 A32]))) blake_ref.c:642 133 {*zero_extendsidi2}
     (nil))
(insn 882 881 883 80 (parallel [
            (set (reg:SI 918 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 916 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 916 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 883 882 884 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 34 [0x22])) [0 MEM[(BitSequence *)hashval_6(D) + 34B]+0 S1 A8])
        (subreg:QI (reg:SI 918 [ D.6032 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 918 [ D.6032 ])
        (nil)))
(note 884 883 885 80 NOTE_INSN_DELETED)
(insn 885 884 886 80 (set (reg:DI 919 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 172 [0xac])) [3 state_4(D)->h64+36 S4 A32]))) blake_ref.c:642 133 {*zero_extendsidi2}
     (nil))
(insn 886 885 887 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 35 [0x23])) [0 MEM[(BitSequence *)hashval_6(D) + 35B]+0 S1 A8])
        (subreg:QI (reg:DI 919 [ D.6036 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 919 [ D.6036 ])
        (nil)))
(note 887 886 888 80 NOTE_INSN_DELETED)
(insn 888 887 889 80 (set (reg:SI 922 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 171 [0xab])) [3 state_4(D)->h64+35 S1 A8]))) blake_ref.c:642 138 {*zero_extendqisi2}
     (nil))
(insn 889 888 890 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 36 [0x24])) [0 MEM[(BitSequence *)hashval_6(D) + 36B]+0 S1 A8])
        (subreg:QI (reg:SI 922 [ D.6032 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 922 [ D.6032 ])
        (nil)))
(note 890 889 891 80 NOTE_INSN_DELETED)
(insn 891 890 892 80 (set (reg:SI 924 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 170 [0xaa])) [3 state_4(D)->h64+34 S2 A16]))) blake_ref.c:642 139 {*zero_extendhisi2}
     (nil))
(insn 892 891 893 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 37 [0x25])) [0 MEM[(BitSequence *)hashval_6(D) + 37B]+0 S1 A8])
        (subreg:QI (reg:SI 924 [ D.6032 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 924 [ D.6032 ])
        (nil)))
(insn 893 892 894 80 (set (reg:DI 925 [ state_4(D)->h64+32 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 89 {*movdi_internal}
     (nil))
(insn 894 893 895 80 (parallel [
            (set (reg:SI 926 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 925 [ state_4(D)->h64+32 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 925 [ state_4(D)->h64+32 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 895 894 896 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 38 [0x26])) [0 MEM[(BitSequence *)hashval_6(D) + 38B]+0 S1 A8])
        (subreg:QI (reg:SI 926 [ D.6032 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 926 [ D.6032 ])
        (nil)))
(insn 896 895 897 80 (set (reg:DI 927 [ state_4(D)->h64+32 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 89 {*movdi_internal}
     (nil))
(insn 897 896 898 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 39 [0x27])) [0 MEM[(BitSequence *)hashval_6(D) + 39B]+0 S1 A8])
        (subreg:QI (reg:DI 927 [ state_4(D)->h64+32 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 927 [ state_4(D)->h64+32 ])
        (nil)))
(note 898 897 899 80 NOTE_INSN_DELETED)
(note 899 898 900 80 NOTE_INSN_DELETED)
(insn 900 899 901 80 (set (reg:SI 930 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 183 [0xb7])) [3 state_4(D)->h64+47 S1 A8]))) blake_ref.c:643 138 {*zero_extendqisi2}
     (nil))
(insn 901 900 902 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 40 [0x28])) [0 MEM[(BitSequence *)hashval_6(D) + 40B]+0 S1 A8])
        (subreg:QI (reg:SI 930 [ D.6032 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 930 [ D.6032 ])
        (nil)))
(note 902 901 903 80 NOTE_INSN_DELETED)
(note 903 902 904 80 NOTE_INSN_DELETED)
(insn 904 903 905 80 (set (reg:SI 933 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 182 [0xb6])) [3 state_4(D)->h64+46 S2 A16]))) blake_ref.c:643 139 {*zero_extendhisi2}
     (nil))
(insn 905 904 906 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 41 [0x29])) [0 MEM[(BitSequence *)hashval_6(D) + 41B]+0 S1 A8])
        (subreg:QI (reg:SI 933 [ D.6032 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 933 [ D.6032 ])
        (nil)))
(note 906 905 907 80 NOTE_INSN_DELETED)
(insn 907 906 908 80 (set (reg:DI 934 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 180 [0xb4])) [3 state_4(D)->h64+44 S4 A32]))) blake_ref.c:643 133 {*zero_extendsidi2}
     (nil))
(insn 908 907 909 80 (parallel [
            (set (reg:SI 936 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 934 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 934 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 909 908 910 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 42 [0x2a])) [0 MEM[(BitSequence *)hashval_6(D) + 42B]+0 S1 A8])
        (subreg:QI (reg:SI 936 [ D.6032 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 936 [ D.6032 ])
        (nil)))
(note 910 909 911 80 NOTE_INSN_DELETED)
(insn 911 910 912 80 (set (reg:DI 937 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 180 [0xb4])) [3 state_4(D)->h64+44 S4 A32]))) blake_ref.c:643 133 {*zero_extendsidi2}
     (nil))
(insn 912 911 913 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 43 [0x2b])) [0 MEM[(BitSequence *)hashval_6(D) + 43B]+0 S1 A8])
        (subreg:QI (reg:DI 937 [ D.6036 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 937 [ D.6036 ])
        (nil)))
(note 913 912 914 80 NOTE_INSN_DELETED)
(insn 914 913 915 80 (set (reg:SI 940 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 179 [0xb3])) [3 state_4(D)->h64+43 S1 A8]))) blake_ref.c:643 138 {*zero_extendqisi2}
     (nil))
(insn 915 914 916 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 44 [0x2c])) [0 MEM[(BitSequence *)hashval_6(D) + 44B]+0 S1 A8])
        (subreg:QI (reg:SI 940 [ D.6032 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 940 [ D.6032 ])
        (nil)))
(note 916 915 917 80 NOTE_INSN_DELETED)
(insn 917 916 918 80 (set (reg:SI 942 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 178 [0xb2])) [3 state_4(D)->h64+42 S2 A16]))) blake_ref.c:643 139 {*zero_extendhisi2}
     (nil))
(insn 918 917 919 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 45 [0x2d])) [0 MEM[(BitSequence *)hashval_6(D) + 45B]+0 S1 A8])
        (subreg:QI (reg:SI 942 [ D.6032 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 942 [ D.6032 ])
        (nil)))
(insn 919 918 920 80 (set (reg:DI 943 [ state_4(D)->h64+40 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 89 {*movdi_internal}
     (nil))
(insn 920 919 921 80 (parallel [
            (set (reg:SI 944 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 943 [ state_4(D)->h64+40 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 943 [ state_4(D)->h64+40 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 921 920 922 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 46 [0x2e])) [0 MEM[(BitSequence *)hashval_6(D) + 46B]+0 S1 A8])
        (subreg:QI (reg:SI 944 [ D.6032 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 944 [ D.6032 ])
        (nil)))
(insn 922 921 923 80 (set (reg:DI 945 [ state_4(D)->h64+40 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 89 {*movdi_internal}
     (nil))
(insn 923 922 924 80 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 47 [0x2f])) [0 MEM[(BitSequence *)hashval_6(D) + 47B]+0 S1 A8])
        (subreg:QI (reg:DI 945 [ state_4(D)->h64+40 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 945 [ state_4(D)->h64+40 ])
        (nil)))
(insn 924 923 925 80 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 512 [0x200]))) blake_ref.c:645 7 {*cmpsi_1}
     (nil))
(jump_insn 925 924 926 80 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1058)
            (pc))) blake_ref.c:645 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6218 (nil)))
 -> 1058)
;;  succ:       81 [37.8%]  (FALLTHRU)
;;              84 [62.2%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

;; basic block 81, loop depth 0, count 0, freq 2307, maybe hot
;;  prev block 80, next block 82, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       80 [37.8%]  (FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u1353(6){ }u1354(7){ }u1355(16){ }u1356(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; lr  def 	 17 [flags] 948 951 952 954 955 958 960 961 962 963 966 969 970 972 973 976 978 979 980 981
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  gen 	 948 951 952 954 955 958 960 961 962 963 966 969 970 972 973 976 978 979 980 981
;; live  kill	 17 [flags]
(note 926 925 927 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(note 927 926 928 81 NOTE_INSN_DELETED)
(note 928 927 929 81 NOTE_INSN_DELETED)
(insn 929 928 930 81 (set (reg:SI 948 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 191 [0xbf])) [3 state_4(D)->h64+55 S1 A8]))) blake_ref.c:646 138 {*zero_extendqisi2}
     (nil))
(insn 930 929 931 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 48 [0x30])) [0 MEM[(BitSequence *)hashval_6(D) + 48B]+0 S1 A8])
        (subreg:QI (reg:SI 948 [ D.6032 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 948 [ D.6032 ])
        (nil)))
(note 931 930 932 81 NOTE_INSN_DELETED)
(note 932 931 933 81 NOTE_INSN_DELETED)
(insn 933 932 934 81 (set (reg:SI 951 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 190 [0xbe])) [3 state_4(D)->h64+54 S2 A16]))) blake_ref.c:646 139 {*zero_extendhisi2}
     (nil))
(insn 934 933 935 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 49 [0x31])) [0 MEM[(BitSequence *)hashval_6(D) + 49B]+0 S1 A8])
        (subreg:QI (reg:SI 951 [ D.6032 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 951 [ D.6032 ])
        (nil)))
(note 935 934 936 81 NOTE_INSN_DELETED)
(insn 936 935 937 81 (set (reg:DI 952 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 188 [0xbc])) [3 state_4(D)->h64+52 S4 A32]))) blake_ref.c:646 133 {*zero_extendsidi2}
     (nil))
(insn 937 936 938 81 (parallel [
            (set (reg:SI 954 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 952 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 952 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 938 937 939 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 50 [0x32])) [0 MEM[(BitSequence *)hashval_6(D) + 50B]+0 S1 A8])
        (subreg:QI (reg:SI 954 [ D.6032 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 954 [ D.6032 ])
        (nil)))
(note 939 938 940 81 NOTE_INSN_DELETED)
(insn 940 939 941 81 (set (reg:DI 955 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 188 [0xbc])) [3 state_4(D)->h64+52 S4 A32]))) blake_ref.c:646 133 {*zero_extendsidi2}
     (nil))
(insn 941 940 942 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 51 [0x33])) [0 MEM[(BitSequence *)hashval_6(D) + 51B]+0 S1 A8])
        (subreg:QI (reg:DI 955 [ D.6036 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 955 [ D.6036 ])
        (nil)))
(note 942 941 943 81 NOTE_INSN_DELETED)
(insn 943 942 944 81 (set (reg:SI 958 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 187 [0xbb])) [3 state_4(D)->h64+51 S1 A8]))) blake_ref.c:646 138 {*zero_extendqisi2}
     (nil))
(insn 944 943 945 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 52 [0x34])) [0 MEM[(BitSequence *)hashval_6(D) + 52B]+0 S1 A8])
        (subreg:QI (reg:SI 958 [ D.6032 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 958 [ D.6032 ])
        (nil)))
(note 945 944 946 81 NOTE_INSN_DELETED)
(insn 946 945 947 81 (set (reg:SI 960 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 186 [0xba])) [3 state_4(D)->h64+50 S2 A16]))) blake_ref.c:646 139 {*zero_extendhisi2}
     (nil))
(insn 947 946 948 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 53 [0x35])) [0 MEM[(BitSequence *)hashval_6(D) + 53B]+0 S1 A8])
        (subreg:QI (reg:SI 960 [ D.6032 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 960 [ D.6032 ])
        (nil)))
(insn 948 947 949 81 (set (reg:DI 961 [ state_4(D)->h64+48 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 89 {*movdi_internal}
     (nil))
(insn 949 948 950 81 (parallel [
            (set (reg:SI 962 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 961 [ state_4(D)->h64+48 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 961 [ state_4(D)->h64+48 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 950 949 951 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 54 [0x36])) [0 MEM[(BitSequence *)hashval_6(D) + 54B]+0 S1 A8])
        (subreg:QI (reg:SI 962 [ D.6032 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 962 [ D.6032 ])
        (nil)))
(insn 951 950 952 81 (set (reg:DI 963 [ state_4(D)->h64+48 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 89 {*movdi_internal}
     (nil))
(insn 952 951 953 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 55 [0x37])) [0 MEM[(BitSequence *)hashval_6(D) + 55B]+0 S1 A8])
        (subreg:QI (reg:DI 963 [ state_4(D)->h64+48 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 963 [ state_4(D)->h64+48 ])
        (nil)))
(note 953 952 954 81 NOTE_INSN_DELETED)
(note 954 953 955 81 NOTE_INSN_DELETED)
(insn 955 954 956 81 (set (reg:SI 966 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 199 [0xc7])) [3 state_4(D)->h64+63 S1 A8]))) blake_ref.c:647 138 {*zero_extendqisi2}
     (nil))
(insn 956 955 957 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 56 [0x38])) [0 MEM[(BitSequence *)hashval_6(D) + 56B]+0 S1 A8])
        (subreg:QI (reg:SI 966 [ D.6032 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 966 [ D.6032 ])
        (nil)))
(note 957 956 958 81 NOTE_INSN_DELETED)
(note 958 957 959 81 NOTE_INSN_DELETED)
(insn 959 958 960 81 (set (reg:SI 969 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 198 [0xc6])) [3 state_4(D)->h64+62 S2 A16]))) blake_ref.c:647 139 {*zero_extendhisi2}
     (nil))
(insn 960 959 961 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 57 [0x39])) [0 MEM[(BitSequence *)hashval_6(D) + 57B]+0 S1 A8])
        (subreg:QI (reg:SI 969 [ D.6032 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 969 [ D.6032 ])
        (nil)))
(note 961 960 962 81 NOTE_INSN_DELETED)
(insn 962 961 963 81 (set (reg:DI 970 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 196 [0xc4])) [3 state_4(D)->h64+60 S4 A32]))) blake_ref.c:647 133 {*zero_extendsidi2}
     (nil))
(insn 963 962 964 81 (parallel [
            (set (reg:SI 972 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 970 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 970 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 964 963 965 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 58 [0x3a])) [0 MEM[(BitSequence *)hashval_6(D) + 58B]+0 S1 A8])
        (subreg:QI (reg:SI 972 [ D.6032 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 972 [ D.6032 ])
        (nil)))
(note 965 964 966 81 NOTE_INSN_DELETED)
(insn 966 965 967 81 (set (reg:DI 973 [ D.6036 ])
        (zero_extend:DI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 196 [0xc4])) [3 state_4(D)->h64+60 S4 A32]))) blake_ref.c:647 133 {*zero_extendsidi2}
     (nil))
(insn 967 966 968 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 59 [0x3b])) [0 MEM[(BitSequence *)hashval_6(D) + 59B]+0 S1 A8])
        (subreg:QI (reg:DI 973 [ D.6036 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 973 [ D.6036 ])
        (nil)))
(note 968 967 969 81 NOTE_INSN_DELETED)
(insn 969 968 970 81 (set (reg:SI 976 [ D.6032 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 195 [0xc3])) [3 state_4(D)->h64+59 S1 A8]))) blake_ref.c:647 138 {*zero_extendqisi2}
     (nil))
(insn 970 969 971 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 60 [0x3c])) [0 MEM[(BitSequence *)hashval_6(D) + 60B]+0 S1 A8])
        (subreg:QI (reg:SI 976 [ D.6032 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 976 [ D.6032 ])
        (nil)))
(note 971 970 972 81 NOTE_INSN_DELETED)
(insn 972 971 973 81 (set (reg:SI 978 [ D.6032 ])
        (zero_extend:SI (mem:HI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 194 [0xc2])) [3 state_4(D)->h64+58 S2 A16]))) blake_ref.c:647 139 {*zero_extendhisi2}
     (nil))
(insn 973 972 974 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 61 [0x3d])) [0 MEM[(BitSequence *)hashval_6(D) + 61B]+0 S1 A8])
        (subreg:QI (reg:SI 978 [ D.6032 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 978 [ D.6032 ])
        (nil)))
(insn 974 973 975 81 (set (reg:DI 979 [ state_4(D)->h64+56 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 89 {*movdi_internal}
     (nil))
(insn 975 974 976 81 (parallel [
            (set (reg:SI 980 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 979 [ state_4(D)->h64+56 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 544 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:DI 979 [ state_4(D)->h64+56 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 976 975 977 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 62 [0x3e])) [0 MEM[(BitSequence *)hashval_6(D) + 62B]+0 S1 A8])
        (subreg:QI (reg:SI 980 [ D.6032 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 980 [ D.6032 ])
        (nil)))
(insn 977 976 978 81 (set (reg:DI 981 [ state_4(D)->h64+56 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 633 [ state ])
        (nil)))
(insn 978 977 1152 81 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 63 [0x3f])) [0 MEM[(BitSequence *)hashval_6(D) + 63B]+0 S1 A8])
        (subreg:QI (reg:DI 981 [ state_4(D)->h64+56 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 981 [ state_4(D)->h64+56 ])
        (expr_list:REG_DEAD (reg/v/f:DI 634 [ hashval ])
            (nil))))
(jump_insn 1152 978 1153 81 (set (pc)
        (label_ref 1058)) blake_ref.c:658 -1
     (nil)
 -> 1058)
;;  succ:       84 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1153 1152 986)
;; basic block 82, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 81, next block 83, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [50.0%] 
;;              10 [100.0%] 
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u1433(6){ }u1434(7){ }u1435(16){ }u1436(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 983 984 985
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 983 984 985
;; live  kill	 17 [flags]
(code_label 986 1153 987 82 100 "" [2 uses])
(note 987 986 988 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 988 987 989 82 (parallel [
            (set (reg:SI 983)
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:440 217 {*addsi_1}
     (expr_list:REG_DEAD (reg/v:SI 91 [ low ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 989 988 990 82 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 983)) blake_ref.c:440 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 983)
        (nil)))
(insn 990 989 991 82 (set (reg:SI 985)
        (const_int 440 [0x1b8])) 90 {*movsi_internal}
     (nil))
(insn 991 990 992 82 (parallel [
            (set (reg:SI 984 [ D.6033 ])
                (minus:SI (reg:SI 985)
                    (reg:SI 89 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 985)
        (expr_list:REG_DEAD (reg:SI 89 [ D.6033 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (minus:SI (const_int 440 [0x1b8])
                        (reg:SI 89 [ D.6033 ]))
                    (nil))))))
(note 992 991 993 82 NOTE_INSN_DELETED)
(insn 993 992 994 82 (set (reg:DI 37 r8)
        (sign_extend:DI (reg:SI 984 [ D.6033 ]))) 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 984 [ D.6033 ])
        (nil)))
(insn 994 993 995 82 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 995 994 996 82 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 996 995 1154 82 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1154 996 1155 82 (set (pc)
        (label_ref 997)) -1
     (nil)
 -> 997)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

(barrier 1155 1154 1000)
;; basic block 83, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 82, next block 84, flags: (HOT_PARTITION, RTL)
;;  pred:       46 [50.0%] 
;;              47 [100.0%] 
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u1450(6){ }u1451(7){ }u1452(16){ }u1453(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 603 987 988 989
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241 242 633 634
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8] 603 987 988 989
;; live  kill	 17 [flags]
(code_label 1000 1155 1001 83 124 "" [2 uses])
(note 1001 1000 1002 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 1002 1001 1003 83 (set (reg:SI 988)
        (const_int 888 [0x378])) blake_ref.c:563 90 {*movsi_internal}
     (nil))
(insn 1003 1002 1004 83 (parallel [
            (set (reg:SI 987 [ D.6033 ])
                (minus:SI (reg:SI 988)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:563 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 988)
        (expr_list:REG_DEAD (reg:SI 242 [ D.6033 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (minus:SI (const_int 888 [0x378])
                        (reg:SI 242 [ D.6033 ]))
                    (nil))))))
(insn 1004 1003 1005 83 (set (reg:DI 603 [ D.6036 ])
        (sign_extend:DI (reg:SI 987 [ D.6033 ]))) blake_ref.c:563 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 987 [ D.6033 ])
        (nil)))
(insn 1005 1004 1006 83 (parallel [
            (set (reg:DI 989)
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 603 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:563 261 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 241 [ D.6036 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 1006 1005 1007 83 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 989)) blake_ref.c:563 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 989)
        (nil)))
(insn 1007 1006 1008 83 (set (reg:DI 37 r8)
        (reg:DI 603 [ D.6036 ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 603 [ D.6036 ])
        (nil)))
(insn 1008 1007 1009 83 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 1009 1008 1010 83 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 1010 1009 1156 83 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 1156 1010 1157 83 (set (pc)
        (label_ref 1011)) -1
     (nil)
 -> 1011)
;;  succ:       52 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 633 634

(barrier 1157 1156 1058)
;; basic block 84, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 83, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       39 [100.0%] 
;;              38 [62.2%] 
;;              80 [62.2%] 
;;              81 [100.0%] 
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u1468(6){ }u1469(7){ }u1470(16){ }u1471(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 1058 1157 1017 84 160 "" [4 uses])
(note 1017 1058 1015 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 1015 1017 1016 84 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) blake_ref.c:659 90 {*movsi_internal}
     (nil))
(insn 1016 1015 0 84 (use (reg/i:SI 0 ax)) blake_ref.c:659 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function Hash (Hash, funcdef_no=21, decl_uid=3197, cgraph_uid=21, symbol_order=29)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
starting the processing of deferred insns
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 188.
verify found no changes in insn with uid = 190.
verify found no changes in insn with uid = 192.
ending the processing of deferred insns


Hash

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={4d,3u} r1={7d,4u} r2={7d,4u} r6={1d,18u} r7={1d,21u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,17u,4e} r17={16d,7u} r18={3d} r19={3d} r20={1d,57u,3e} r21={4d} r22={4d} r23={4d} r24={4d} r25={3d} r26={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={6d,3u} r38={4d,1u} r39={3d} r40={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r87={2d,1u} r95={1d,6u} r96={1d,2u} r97={1d,4u} r98={1d,1u} r99={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r112={1d,2u} r114={1d} r115={1d,1u} r116={2d,2u} r117={1d,1u} r118={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r139={1d,2u} r141={1d} r142={1d,1u} r143={2d,2u} r148={2d,5u} 
;;    total ref usage 457{259d,191u,7e} in 111{108 regular + 3 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 0, next block 3, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 95 96 97 98 99
;; live  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; live  gen 	 17 [flags] 95 96 97 98 99
;; live  kill	 17 [flags]
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v:SI 95 [ hashbitlen ])
        (reg:SI 2 cx [ hashbitlen ])) blake_ref.c:662 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ hashbitlen ])
        (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [2 hashbitlen+0 S4 A64])
            (nil))))
(insn 3 2 4 2 (set (reg/v/f:DI 96 [ data ])
        (reg:DI 1 dx [ data ])) blake_ref.c:662 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ data ])
        (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [4 data+0 S8 A64])
            (nil))))
(insn 4 3 5 2 (set (reg/v:DI 97 [ databitlen ])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:662 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ databitlen ])
        (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
            (nil))))
(insn 5 4 6 2 (set (reg/v/f:DI 98 [ hashval ])
        (reg:DI 38 r9 [ hashval ])) blake_ref.c:662 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ hashval ])
        (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 24 [0x18])) [4 hashval+0 S8 A64])
            (nil))))
(note 6 5 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 6 13 2 (parallel [
            (set (reg:SI 99 [ D.6062 ])
                (plus:SI (reg/v:SI 95 [ hashbitlen ])
                    (const_int -224 [0xffffffffffffff20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 13 12 14 2 NOTE_INSN_DELETED)
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 99 [ D.6062 ])
                (const_int -33 [0xffffffffffffffdf]))
            (const_int 0 [0]))) blake_ref.c:207 362 {*testsi_1}
     (expr_list:REG_DEAD (reg:SI 99 [ D.6062 ])
        (nil)))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) blake_ref.c:207 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 57)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98

;; basic block 3, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 2, next block 4, flags: (HOT_PARTITION, RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u16(6){ }u17(7){ }u18(16){ }u19(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  gen 	 17 [flags]
;; live  kill	
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 95 [ hashbitlen ])
            (const_int 224 [0xe0]))) blake_ref.c:210 7 {*cmpsi_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) blake_ref.c:210 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 31)
;;  succ:       4 [28.0%]  (FALLTHRU)
;;              5 [72.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98

;; basic block 4, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 3, next block 5, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [28.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u22(6){ }u23(7){ }u24(16){ }u25(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 102 103 104 105
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  gen 	 102 103 104 105
;; live  kill	
(note 19 18 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 19 22 4 (set (reg:DI 102 [ MEM[(char * {ref-all})&IV224] ])
        (mem/u/c:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>) [0 MEM[(char * {ref-all})&IV224]+0 S8 A256])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -368 [0xfffffffffffffe90])) [0 MEM[(char * {ref-all})&state + 16B]+0 S8 A128])
        (reg:DI 102 [ MEM[(char * {ref-all})&IV224] ])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 102 [ MEM[(char * {ref-all})&IV224] ])
        (nil)))
(insn 23 22 24 4 (set (reg:DI 103 [ MEM[(char * {ref-all})&IV224]+8 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV224]+8 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -360 [0xfffffffffffffe98])) [0 MEM[(char * {ref-all})&state + 16B]+8 S8 A64])
        (reg:DI 103 [ MEM[(char * {ref-all})&IV224]+8 ])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 103 [ MEM[(char * {ref-all})&IV224]+8 ])
        (nil)))
(insn 25 24 26 4 (set (reg:DI 104 [ MEM[(char * {ref-all})&IV224]+16 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV224]+16 S8 A128])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -352 [0xfffffffffffffea0])) [0 MEM[(char * {ref-all})&state + 16B]+16 S8 A128])
        (reg:DI 104 [ MEM[(char * {ref-all})&IV224]+16 ])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 104 [ MEM[(char * {ref-all})&IV224]+16 ])
        (nil)))
(insn 27 26 28 4 (set (reg:DI 105 [ MEM[(char * {ref-all})&IV224]+24 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV224]+24 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 28 27 186 4 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -344 [0xfffffffffffffea8])) [0 MEM[(char * {ref-all})&state + 16B]+24 S8 A64])
        (reg:DI 105 [ MEM[(char * {ref-all})&IV224]+24 ])) blake_ref.c:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 105 [ MEM[(char * {ref-all})&IV224]+24 ])
        (nil)))
(jump_insn 186 28 187 4 (set (pc)
        (label_ref 42)) -1
     (nil)
 -> 42)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98

(barrier 187 186 31)
;; basic block 5, loop depth 0, count 0, freq 111, maybe hot
;;  prev block 4, next block 6, flags: (HOT_PARTITION, RTL)
;;  pred:       3 [72.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u34(6){ }u35(7){ }u36(16){ }u37(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 107 108 109 110
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  gen 	 107 108 109 110
;; live  kill	
(code_label 31 187 32 5 197 "" [1 uses])
(note 32 31 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 32 35 5 (set (reg:DI 107 [ MEM[(char * {ref-all})&IV256] ])
        (mem/u/c:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>) [0 MEM[(char * {ref-all})&IV256]+0 S8 A256])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -368 [0xfffffffffffffe90])) [0 MEM[(char * {ref-all})&state + 16B]+0 S8 A128])
        (reg:DI 107 [ MEM[(char * {ref-all})&IV256] ])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 107 [ MEM[(char * {ref-all})&IV256] ])
        (nil)))
(insn 36 35 37 5 (set (reg:DI 108 [ MEM[(char * {ref-all})&IV256]+8 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV256]+8 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 37 36 38 5 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -360 [0xfffffffffffffe98])) [0 MEM[(char * {ref-all})&state + 16B]+8 S8 A64])
        (reg:DI 108 [ MEM[(char * {ref-all})&IV256]+8 ])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 108 [ MEM[(char * {ref-all})&IV256]+8 ])
        (nil)))
(insn 38 37 39 5 (set (reg:DI 109 [ MEM[(char * {ref-all})&IV256]+16 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV256]+16 S8 A128])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -352 [0xfffffffffffffea0])) [0 MEM[(char * {ref-all})&state + 16B]+16 S8 A128])
        (reg:DI 109 [ MEM[(char * {ref-all})&IV256]+16 ])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 109 [ MEM[(char * {ref-all})&IV256]+16 ])
        (nil)))
(insn 40 39 41 5 (set (reg:DI 110 [ MEM[(char * {ref-all})&IV256]+24 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV256]+24 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -344 [0xfffffffffffffea8])) [0 MEM[(char * {ref-all})&state + 16B]+24 S8 A64])
        (reg:DI 110 [ MEM[(char * {ref-all})&IV256]+24 ])) blake_ref.c:213 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 110 [ MEM[(char * {ref-all})&IV256]+24 ])
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98

;; basic block 6, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 5, next block 7, flags: (HOT_PARTITION, RTL)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u46(6){ }u47(7){ }u48(16){ }u49(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 114 115 116 117 148
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  gen 	 112 114 115 116 117 148
;; live  kill	 17 [flags]
(code_label 42 41 43 6 198 "" [1 uses])
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -336 [0xfffffffffffffeb0])) [2 state.t32+0 S4 A128])
        (const_int 0 [0])) blake_ref.c:215 90 {*movsi_internal}
     (nil))
(insn 45 44 46 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -332 [0xfffffffffffffeb4])) [2 state.t32+4 S4 A32])
        (const_int 0 [0])) blake_ref.c:216 90 {*movsi_internal}
     (nil))
(insn 46 45 47 6 (parallel [
            (set (reg/f:DI 148)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 47 46 50 6 (parallel [
            (set (reg/f:DI 112)
                (plus:DI (reg/f:DI 148)
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 50 47 51 6 (set (reg:DI 115)
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 51 50 52 6 (set (reg:DI 116)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 52 51 53 6 (parallel [
            (set (reg:DI 116)
                (const_int 0 [0]))
            (set (reg/f:DI 114 [ D.6063 ])
                (plus:DI (ashift:DI (reg:DI 116)
                        (const_int 3 [0x3]))
                    (reg/f:DI 112)))
            (set (mem/c:BLK (reg/f:DI 112) [0 MEM[(void *)&state + 56B]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 115))
            (use (reg:DI 116))
        ]) 933 {*rep_stosdi_rex64}
     (expr_list:REG_DEAD (reg:DI 115)
        (expr_list:REG_DEAD (reg/f:DI 112)
            (expr_list:REG_UNUSED (reg:DI 116)
                (expr_list:REG_UNUSED (reg/f:DI 114 [ D.6063 ])
                    (nil))))))
(insn 53 52 54 6 (set (reg:V4SI 117)
        (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])) blake_ref.c:221 1194 {*movv4si_internal}
     (nil))
(insn 54 53 188 6 (set (mem/c:V16QI (plus:DI (reg/f:DI 20 frame)
                (const_int -264 [0xfffffffffffffef8])) [2 MEM[(unsigned int *)&state + 120B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 117) 0)
            ] UNSPEC_STOREU)) blake_ref.c:221 1312 {sse2_storedquv16qi}
     (expr_list:REG_DEAD (reg:V4SI 117)
        (nil)))
(jump_insn 188 54 189 6 (set (pc)
        (label_ref 120)) -1
     (nil)
 -> 120)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98 148
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98 148

(barrier 189 188 57)
;; basic block 7, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 6, next block 8, flags: (HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u61(6){ }u62(7){ }u63(16){ }u64(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95
;; lr  def 	 17 [flags] 87 118
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  gen 	 17 [flags] 87 118
;; live  kill	 17 [flags]
(code_label 57 189 58 7 196 "" [1 uses])
(note 58 57 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 7 (parallel [
            (set (reg:SI 118 [ D.6062 ])
                (plus:SI (reg/v:SI 95 [ hashbitlen ])
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 60 59 7 7 NOTE_INSN_DELETED)
(insn 7 60 61 7 (set (reg:SI 87 [ D.6061 ])
        (const_int 2 [0x2])) blake_ref.c:249 90 {*movsi_internal}
     (nil))
(insn 61 7 62 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 118 [ D.6062 ])
                (const_int -129 [0xffffffffffffff7f]))
            (const_int 0 [0]))) blake_ref.c:227 362 {*testsi_1}
     (expr_list:REG_DEAD (reg:SI 118 [ D.6062 ])
        (nil)))
(jump_insn 62 61 63 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 156)
            (pc))) blake_ref.c:227 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6700 (nil)))
 -> 156)
;;  succ:       8 [33.0%]  (FALLTHRU)
;;              18 [67.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 95 96 97 98
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 95 96 97 98

;; basic block 8, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 7, next block 9, flags: (HOT_PARTITION, RTL)
;;  pred:       7 [33.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u69(6){ }u70(7){ }u71(16){ }u72(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  gen 	 17 [flags]
;; live  kill	
(note 63 62 64 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 95 [ hashbitlen ])
            (const_int 384 [0x180]))) blake_ref.c:230 7 {*cmpsi_1}
     (nil))
(jump_insn 65 64 66 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) blake_ref.c:230 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 86)
;;  succ:       9 [28.0%]  (FALLTHRU)
;;              10 [72.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98

;; basic block 9, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 8, next block 10, flags: (HOT_PARTITION, RTL)
;;  pred:       8 [28.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u75(6){ }u76(7){ }u77(16){ }u78(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 121 122 123 124 125 126 127 128
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  gen 	 121 122 123 124 125 126 127 128
;; live  kill	
(note 66 65 68 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 68 66 69 9 (set (reg:DI 121 [ MEM[(char * {ref-all})&IV384] ])
        (mem/u/c:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>) [0 MEM[(char * {ref-all})&IV384]+0 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 69 68 70 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -248 [0xffffffffffffff08])) [0 MEM[(char * {ref-all})&state + 136B]+0 S8 A64])
        (reg:DI 121 [ MEM[(char * {ref-all})&IV384] ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 121 [ MEM[(char * {ref-all})&IV384] ])
        (nil)))
(insn 70 69 71 9 (set (reg:DI 122 [ MEM[(char * {ref-all})&IV384]+8 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV384]+8 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 71 70 72 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 MEM[(char * {ref-all})&state + 136B]+8 S8 A64])
        (reg:DI 122 [ MEM[(char * {ref-all})&IV384]+8 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 122 [ MEM[(char * {ref-all})&IV384]+8 ])
        (nil)))
(insn 72 71 73 9 (set (reg:DI 123 [ MEM[(char * {ref-all})&IV384]+16 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV384]+16 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 73 72 74 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -232 [0xffffffffffffff18])) [0 MEM[(char * {ref-all})&state + 136B]+16 S8 A64])
        (reg:DI 123 [ MEM[(char * {ref-all})&IV384]+16 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 123 [ MEM[(char * {ref-all})&IV384]+16 ])
        (nil)))
(insn 74 73 75 9 (set (reg:DI 124 [ MEM[(char * {ref-all})&IV384]+24 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV384]+24 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 75 74 76 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -224 [0xffffffffffffff20])) [0 MEM[(char * {ref-all})&state + 136B]+24 S8 A64])
        (reg:DI 124 [ MEM[(char * {ref-all})&IV384]+24 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 124 [ MEM[(char * {ref-all})&IV384]+24 ])
        (nil)))
(insn 76 75 77 9 (set (reg:DI 125 [ MEM[(char * {ref-all})&IV384]+32 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 32 [0x20]))) [0 MEM[(char * {ref-all})&IV384]+32 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 77 76 78 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -216 [0xffffffffffffff28])) [0 MEM[(char * {ref-all})&state + 136B]+32 S8 A64])
        (reg:DI 125 [ MEM[(char * {ref-all})&IV384]+32 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 125 [ MEM[(char * {ref-all})&IV384]+32 ])
        (nil)))
(insn 78 77 79 9 (set (reg:DI 126 [ MEM[(char * {ref-all})&IV384]+40 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 40 [0x28]))) [0 MEM[(char * {ref-all})&IV384]+40 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 79 78 80 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -208 [0xffffffffffffff30])) [0 MEM[(char * {ref-all})&state + 136B]+40 S8 A64])
        (reg:DI 126 [ MEM[(char * {ref-all})&IV384]+40 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 126 [ MEM[(char * {ref-all})&IV384]+40 ])
        (nil)))
(insn 80 79 81 9 (set (reg:DI 127 [ MEM[(char * {ref-all})&IV384]+48 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 48 [0x30]))) [0 MEM[(char * {ref-all})&IV384]+48 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 81 80 82 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -200 [0xffffffffffffff38])) [0 MEM[(char * {ref-all})&state + 136B]+48 S8 A64])
        (reg:DI 127 [ MEM[(char * {ref-all})&IV384]+48 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 127 [ MEM[(char * {ref-all})&IV384]+48 ])
        (nil)))
(insn 82 81 83 9 (set (reg:DI 128 [ MEM[(char * {ref-all})&IV384]+56 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)
                    (const_int 56 [0x38]))) [0 MEM[(char * {ref-all})&IV384]+56 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 83 82 190 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -192 [0xffffffffffffff40])) [0 MEM[(char * {ref-all})&state + 136B]+56 S8 A64])
        (reg:DI 128 [ MEM[(char * {ref-all})&IV384]+56 ])) blake_ref.c:231 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 128 [ MEM[(char * {ref-all})&IV384]+56 ])
        (nil)))
(jump_insn 190 83 191 9 (set (pc)
        (label_ref 105)) -1
     (nil)
 -> 105)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98

(barrier 191 190 86)
;; basic block 10, loop depth 0, count 0, freq 37, maybe hot
;;  prev block 9, next block 11, flags: (HOT_PARTITION, RTL)
;;  pred:       8 [72.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u95(6){ }u96(7){ }u97(16){ }u98(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 130 131 132 133 134 135 136 137
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  gen 	 130 131 132 133 134 135 136 137
;; live  kill	
(code_label 86 191 87 10 201 "" [1 uses])
(note 87 86 89 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 89 87 90 10 (set (reg:DI 130 [ MEM[(char * {ref-all})&IV512] ])
        (mem/u/c:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>) [0 MEM[(char * {ref-all})&IV512]+0 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 90 89 91 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -248 [0xffffffffffffff08])) [0 MEM[(char * {ref-all})&state + 136B]+0 S8 A64])
        (reg:DI 130 [ MEM[(char * {ref-all})&IV512] ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 130 [ MEM[(char * {ref-all})&IV512] ])
        (nil)))
(insn 91 90 92 10 (set (reg:DI 131 [ MEM[(char * {ref-all})&IV512]+8 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 8 [0x8]))) [0 MEM[(char * {ref-all})&IV512]+8 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 92 91 93 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 MEM[(char * {ref-all})&state + 136B]+8 S8 A64])
        (reg:DI 131 [ MEM[(char * {ref-all})&IV512]+8 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 131 [ MEM[(char * {ref-all})&IV512]+8 ])
        (nil)))
(insn 93 92 94 10 (set (reg:DI 132 [ MEM[(char * {ref-all})&IV512]+16 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 16 [0x10]))) [0 MEM[(char * {ref-all})&IV512]+16 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 94 93 95 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -232 [0xffffffffffffff18])) [0 MEM[(char * {ref-all})&state + 136B]+16 S8 A64])
        (reg:DI 132 [ MEM[(char * {ref-all})&IV512]+16 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 132 [ MEM[(char * {ref-all})&IV512]+16 ])
        (nil)))
(insn 95 94 96 10 (set (reg:DI 133 [ MEM[(char * {ref-all})&IV512]+24 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 24 [0x18]))) [0 MEM[(char * {ref-all})&IV512]+24 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 96 95 97 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -224 [0xffffffffffffff20])) [0 MEM[(char * {ref-all})&state + 136B]+24 S8 A64])
        (reg:DI 133 [ MEM[(char * {ref-all})&IV512]+24 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 133 [ MEM[(char * {ref-all})&IV512]+24 ])
        (nil)))
(insn 97 96 98 10 (set (reg:DI 134 [ MEM[(char * {ref-all})&IV512]+32 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 32 [0x20]))) [0 MEM[(char * {ref-all})&IV512]+32 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 98 97 99 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -216 [0xffffffffffffff28])) [0 MEM[(char * {ref-all})&state + 136B]+32 S8 A64])
        (reg:DI 134 [ MEM[(char * {ref-all})&IV512]+32 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 134 [ MEM[(char * {ref-all})&IV512]+32 ])
        (nil)))
(insn 99 98 100 10 (set (reg:DI 135 [ MEM[(char * {ref-all})&IV512]+40 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 40 [0x28]))) [0 MEM[(char * {ref-all})&IV512]+40 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 100 99 101 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -208 [0xffffffffffffff30])) [0 MEM[(char * {ref-all})&state + 136B]+40 S8 A64])
        (reg:DI 135 [ MEM[(char * {ref-all})&IV512]+40 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 135 [ MEM[(char * {ref-all})&IV512]+40 ])
        (nil)))
(insn 101 100 102 10 (set (reg:DI 136 [ MEM[(char * {ref-all})&IV512]+48 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 48 [0x30]))) [0 MEM[(char * {ref-all})&IV512]+48 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 102 101 103 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -200 [0xffffffffffffff38])) [0 MEM[(char * {ref-all})&state + 136B]+48 S8 A64])
        (reg:DI 136 [ MEM[(char * {ref-all})&IV512]+48 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 136 [ MEM[(char * {ref-all})&IV512]+48 ])
        (nil)))
(insn 103 102 104 10 (set (reg:DI 137 [ MEM[(char * {ref-all})&IV512]+56 ])
        (mem/u/c:DI (const:DI (plus:DI (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)
                    (const_int 56 [0x38]))) [0 MEM[(char * {ref-all})&IV512]+56 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 104 103 105 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -192 [0xffffffffffffff40])) [0 MEM[(char * {ref-all})&state + 136B]+56 S8 A64])
        (reg:DI 137 [ MEM[(char * {ref-all})&IV512]+56 ])) blake_ref.c:233 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 137 [ MEM[(char * {ref-all})&IV512]+56 ])
        (nil)))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98

;; basic block 11, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 10, next block 12, flags: (HOT_PARTITION, RTL)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u115(6){ }u116(7){ }u117(16){ }u118(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 139 141 142 143 148
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98
;; live  gen 	 139 141 142 143 148
;; live  kill	 17 [flags]
(code_label 105 104 106 11 202 "" [1 uses])
(note 106 105 107 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 11 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -184 [0xffffffffffffff48])) [3 state.t64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:235 89 {*movdi_internal}
     (nil))
(insn 108 107 109 11 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -176 [0xffffffffffffff50])) [3 state.t64+8 S8 A128])
        (const_int 0 [0])) blake_ref.c:236 89 {*movdi_internal}
     (nil))
(insn 109 108 110 11 (parallel [
            (set (reg/f:DI 148)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 110 109 113 11 (parallel [
            (set (reg/f:DI 139)
                (plus:DI (reg/f:DI 148)
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 113 110 114 11 (set (reg:DI 142)
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 114 113 115 11 (set (reg:DI 143)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 115 114 116 11 (parallel [
            (set (reg:DI 143)
                (const_int 0 [0]))
            (set (reg/f:DI 141 [ D.6064 ])
                (plus:DI (ashift:DI (reg:DI 143)
                        (const_int 3 [0x3]))
                    (reg/f:DI 139)))
            (set (mem/c:BLK (reg/f:DI 139) [0 MEM[(void *)&state + 216B]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 142))
            (use (reg:DI 143))
        ]) 933 {*rep_stosdi_rex64}
     (expr_list:REG_DEAD (reg:DI 142)
        (expr_list:REG_DEAD (reg/f:DI 139)
            (expr_list:REG_UNUSED (reg:DI 143)
                (expr_list:REG_UNUSED (reg/f:DI 141 [ D.6064 ])
                    (nil))))))
(insn 116 115 117 11 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 state.salt64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:241 89 {*movdi_internal}
     (nil))
(insn 117 116 118 11 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 state.salt64+8 S8 A128])
        (const_int 0 [0])) blake_ref.c:242 89 {*movdi_internal}
     (nil))
(insn 118 117 119 11 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 state.salt64+16 S8 A64])
        (const_int 0 [0])) blake_ref.c:243 89 {*movdi_internal}
     (nil))
(insn 119 118 120 11 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 state.salt64+24 S8 A128])
        (const_int 0 [0])) blake_ref.c:244 89 {*movdi_internal}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98 148
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98 148

;; basic block 12, loop depth 0, count 0, freq 205, maybe hot
;;  prev block 11, next block 13, flags: (HOT_PARTITION, RTL)
;;  pred:       11 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u132(6){ }u133(7){ }u134(16){ }u135(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98 148
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 96 97 98 148
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 120 119 121 12 199 "" [1 uses])
(note 121 120 122 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -384 [0xfffffffffffffe80])) [2 state.hashbitlen+0 S4 A128])
        (reg/v:SI 95 [ hashbitlen ])) blake_ref.c:251 90 {*movsi_internal}
     (nil))
(insn 123 122 124 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -380 [0xfffffffffffffe84])) [2 state.datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:252 90 {*movsi_internal}
     (nil))
(insn 124 123 125 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -376 [0xfffffffffffffe88])) [2 state.init+0 S4 A64])
        (const_int 1 [0x1])) blake_ref.c:253 90 {*movsi_internal}
     (nil))
(insn 125 124 126 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -372 [0xfffffffffffffe8c])) [2 state.nullt+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:254 90 {*movsi_internal}
     (nil))
(insn 126 125 127 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 95 [ hashbitlen ])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg/v:SI 95 [ hashbitlen ])
        (nil)))
(jump_insn 127 126 128 12 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 139)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 139)
;;  succ:       13 [50.0%]  (FALLTHRU)
;;              15 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148

;; basic block 13, loop depth 0, count 0, freq 60, maybe hot
;;  prev block 12, next block 14, flags: (HOT_PARTITION, RTL)
;;  pred:       12 [50.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u143(6){ }u144(7){ }u145(16){ }u146(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
;; live  gen 	 17 [flags]
;; live  kill	
(note 128 127 129 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 97 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 130 129 131 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 149)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7929 (nil)))
 -> 149)
;;  succ:       17 [79.3%] 
;;              14 [20.7%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148

;; basic block 14, loop depth 0, count 0, freq 26, maybe hot
;;  prev block 13, next block 15, flags: (HOT_PARTITION, RTL)
;;  pred:       13 [20.7%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u149(6){ }u150(7){ }u151(16){ }u152(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 148
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(note 131 130 133 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 133 131 134 14 (set (reg:DI 37 r8)
        (reg/v:DI 97 [ databitlen ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 97 [ databitlen ])
        (nil)))
(insn 134 133 135 14 (set (reg:DI 1 dx)
        (reg/v/f:DI 96 [ data ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 96 [ data ])
        (nil)))
(insn 135 134 136 14 (set (reg:DI 2 cx)
        (reg/f:DI 148)) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -384 [0xfffffffffffffe80]))
        (nil)))
(call_insn 136 135 192 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(jump_insn 192 136 193 14 (set (pc)
        (label_ref 149)) -1
     (nil)
 -> 149)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 148
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 148

(barrier 193 192 139)
;; basic block 15, loop depth 0, count 0, freq 60, maybe hot
;;  prev block 14, next block 16, flags: (HOT_PARTITION, RTL)
;;  pred:       12 [50.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u161(6){ }u162(7){ }u163(16){ }u164(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 139 193 140 15 203 "" [1 uses])
(note 140 139 141 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 97 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 142 141 143 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 149)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 149)
;;  succ:       17 [71.0%] 
;;              16 [29.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148

;; basic block 16, loop depth 0, count 0, freq 34, maybe hot
;;  prev block 15, next block 17, flags: (HOT_PARTITION, RTL)
;;  pred:       15 [29.0%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u167(6){ }u168(7){ }u169(16){ }u170(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 148
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 98 148
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 37 [r8]
;; live  kill	
(note 143 142 145 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 145 143 146 16 (set (reg:DI 37 r8)
        (reg/v:DI 97 [ databitlen ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 97 [ databitlen ])
        (nil)))
(insn 146 145 147 16 (set (reg:DI 1 dx)
        (reg/v/f:DI 96 [ data ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 96 [ data ])
        (nil)))
(insn 147 146 148 16 (set (reg:DI 2 cx)
        (reg/f:DI 148)) 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -384 [0xfffffffffffffe80]))
        (nil)))
(call_insn 148 147 149 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 2 cx)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       17 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 148
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 148

;; basic block 17, loop depth 0, count 0, freq 120, maybe hot
;;  prev block 16, next block 18, flags: (HOT_PARTITION, RTL)
;;  pred:       13 [79.3%] 
;;              15 [71.0%] 
;;              16 [100.0%]  (FALLTHRU)
;;              14 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u179(6){ }u180(7){ }u181(16){ }u182(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 148
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 148
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 148
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 87
;; live  kill	
(code_label 149 148 150 17 204 "" [3 uses])
(note 150 149 152 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 152 150 153 17 (set (reg:DI 1 dx)
        (reg/v/f:DI 98 [ hashval ])) blake_ref.c:673 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 98 [ hashval ])
        (nil)))
(insn 153 152 154 17 (set (reg:DI 2 cx)
        (reg/f:DI 148)) blake_ref.c:673 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 148)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -384 [0xfffffffffffffe80]))
            (nil))))
(call_insn 154 153 155 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>) [0 Final S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:673 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 2 cx)
        (expr_list:REG_DEAD (reg:DI 1 dx)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 155 154 156 17 (set (reg:SI 87 [ D.6061 ])
        (reg:SI 0 ax)) blake_ref.c:673 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; live  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 18, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 17, next block 1, flags: (HOT_PARTITION, RTL)
;;  pred:       7 [67.0%] 
;;              17 [100.0%]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u190(6){ }u191(7){ }u192(16){ }u193(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax]
;; live  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 156 155 157 18 200 "" [1 uses])
(note 157 156 162 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 162 157 163 18 (set (reg/i:SI 0 ax)
        (reg:SI 87 [ D.6061 ])) blake_ref.c:677 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 87 [ D.6061 ])
        (nil)))
(insn 163 162 0 18 (use (reg/i:SI 0 ax)) blake_ref.c:677 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

