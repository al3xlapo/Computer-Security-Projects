
;; Function compress32 (compress32, funcdef_no=11, decl_uid=3211, cgraph_uid=11, symbol_order=19)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 667, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 60 0 28 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 28 60 29 2 (set (reg/v/f:DI 356 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:9 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 29 28 30 2 (set (reg/v/f:DI 357 [ datablock ])
        (reg:DI 1 dx [ datablock ])) blake_ref.c:9 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 datablock+0 S8 A64])
        (nil)))
(note 30 29 62 2 NOTE_INSN_FUNCTION_BEG)
(insn 62 30 63 2 (set (reg:SI 358)
        (mem:SI (reg/v/f:DI 357 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 63 62 64 2 (set (reg:SI 293 [ D.5786 ])
        (bswap:SI (reg:SI 358))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/v/f:DI 357 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S4 A8]))
        (nil)))
(insn 64 63 65 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 m+0 S4 A128])
        (reg:SI 293 [ D.5786 ])) blake_ref.c:32 90 {*movsi_internal}
     (nil))
(insn 65 64 66 2 (set (reg:SI 359)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 66 65 67 2 (set (reg:SI 297 [ D.5786 ])
        (bswap:SI (reg:SI 359))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 4 [0x4])) [0 MEM[(const BitSequence *)datablock_5(D) + 4B]+0 S4 A8]))
        (nil)))
(insn 67 66 68 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -60 [0xffffffffffffffc4])) [2 m+4 S4 A32])
        (reg:SI 297 [ D.5786 ])) blake_ref.c:33 90 {*movsi_internal}
     (nil))
(insn 68 67 69 2 (set (reg:SI 360)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 69 68 70 2 (set (reg:SI 301 [ D.5786 ])
        (bswap:SI (reg:SI 360))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S4 A8]))
        (nil)))
(insn 70 69 71 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 m+8 S4 A64])
        (reg:SI 301 [ D.5786 ])) blake_ref.c:34 90 {*movsi_internal}
     (nil))
(insn 71 70 72 2 (set (reg:SI 361)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 72 71 73 2 (set (reg:SI 305 [ D.5786 ])
        (bswap:SI (reg:SI 361))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 12 [0xc])) [0 MEM[(const BitSequence *)datablock_5(D) + 12B]+0 S4 A8]))
        (nil)))
(insn 73 72 74 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -52 [0xffffffffffffffcc])) [2 m+12 S4 A32])
        (reg:SI 305 [ D.5786 ])) blake_ref.c:35 90 {*movsi_internal}
     (nil))
(insn 74 73 75 2 (set (reg:SI 362)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 75 74 76 2 (set (reg:SI 309 [ D.5786 ])
        (bswap:SI (reg:SI 362))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S4 A8]))
        (nil)))
(insn 76 75 77 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [2 m+16 S4 A128])
        (reg:SI 309 [ D.5786 ])) blake_ref.c:36 90 {*movsi_internal}
     (nil))
(insn 77 76 78 2 (set (reg:SI 363)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 78 77 79 2 (set (reg:SI 313 [ D.5786 ])
        (bswap:SI (reg:SI 363))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 20 [0x14])) [0 MEM[(const BitSequence *)datablock_5(D) + 20B]+0 S4 A8]))
        (nil)))
(insn 79 78 80 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [2 m+20 S4 A32])
        (reg:SI 313 [ D.5786 ])) blake_ref.c:37 90 {*movsi_internal}
     (nil))
(insn 80 79 81 2 (set (reg:SI 364)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 81 80 82 2 (set (reg:SI 317 [ D.5786 ])
        (bswap:SI (reg:SI 364))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S4 A8]))
        (nil)))
(insn 82 81 83 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 m+24 S4 A64])
        (reg:SI 317 [ D.5786 ])) blake_ref.c:38 90 {*movsi_internal}
     (nil))
(insn 83 82 84 2 (set (reg:SI 365)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 84 83 85 2 (set (reg:SI 321 [ D.5786 ])
        (bswap:SI (reg:SI 365))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 28 [0x1c])) [0 MEM[(const BitSequence *)datablock_5(D) + 28B]+0 S4 A8]))
        (nil)))
(insn 85 84 86 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 m+28 S4 A32])
        (reg:SI 321 [ D.5786 ])) blake_ref.c:39 90 {*movsi_internal}
     (nil))
(insn 86 85 87 2 (set (reg:SI 366)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 87 86 88 2 (set (reg:SI 325 [ D.5786 ])
        (bswap:SI (reg:SI 366))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S4 A8]))
        (nil)))
(insn 88 87 89 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 m+32 S4 A128])
        (reg:SI 325 [ D.5786 ])) blake_ref.c:40 90 {*movsi_internal}
     (nil))
(insn 89 88 90 2 (set (reg:SI 367)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 90 89 91 2 (set (reg:SI 329 [ D.5786 ])
        (bswap:SI (reg:SI 367))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 36 [0x24])) [0 MEM[(const BitSequence *)datablock_5(D) + 36B]+0 S4 A8]))
        (nil)))
(insn 91 90 92 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 m+36 S4 A32])
        (reg:SI 329 [ D.5786 ])) blake_ref.c:41 90 {*movsi_internal}
     (nil))
(insn 92 91 93 2 (set (reg:SI 368)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 93 92 94 2 (set (reg:SI 333 [ D.5786 ])
        (bswap:SI (reg:SI 368))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S4 A8]))
        (nil)))
(insn 94 93 95 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 m+40 S4 A64])
        (reg:SI 333 [ D.5786 ])) blake_ref.c:42 90 {*movsi_internal}
     (nil))
(insn 95 94 96 2 (set (reg:SI 369)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 96 95 97 2 (set (reg:SI 337 [ D.5786 ])
        (bswap:SI (reg:SI 369))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 44 [0x2c])) [0 MEM[(const BitSequence *)datablock_5(D) + 44B]+0 S4 A8]))
        (nil)))
(insn 97 96 98 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [2 m+44 S4 A32])
        (reg:SI 337 [ D.5786 ])) blake_ref.c:43 90 {*movsi_internal}
     (nil))
(insn 98 97 99 2 (set (reg:SI 370)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 99 98 100 2 (set (reg:SI 341 [ D.5786 ])
        (bswap:SI (reg:SI 370))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S4 A8]))
        (nil)))
(insn 100 99 101 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 m+48 S4 A128])
        (reg:SI 341 [ D.5786 ])) blake_ref.c:44 90 {*movsi_internal}
     (nil))
(insn 101 100 102 2 (set (reg:SI 371)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 102 101 103 2 (set (reg:SI 345 [ D.5786 ])
        (bswap:SI (reg:SI 371))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 52 [0x34])) [0 MEM[(const BitSequence *)datablock_5(D) + 52B]+0 S4 A8]))
        (nil)))
(insn 103 102 104 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 m+52 S4 A32])
        (reg:SI 345 [ D.5786 ])) blake_ref.c:45 90 {*movsi_internal}
     (nil))
(insn 104 103 105 2 (set (reg:SI 372)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 105 104 106 2 (set (reg:SI 349 [ D.5786 ])
        (bswap:SI (reg:SI 372))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S4 A8]))
        (nil)))
(insn 106 105 107 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 m+56 S4 A64])
        (reg:SI 349 [ D.5786 ])) blake_ref.c:46 90 {*movsi_internal}
     (nil))
(insn 107 106 108 2 (set (reg:SI 373)
        (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                (const_int 60 [0x3c])) [0 MEM[(const BitSequence *)datablock_5(D) + 60B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 108 107 109 2 (set (reg:SI 353 [ D.5786 ])
        (bswap:SI (reg:SI 373))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 357 [ datablock ])
                    (const_int 60 [0x3c])) [0 MEM[(const BitSequence *)datablock_5(D) + 60B]+0 S4 A8]))
        (nil)))
(insn 109 108 110 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [2 m+60 S4 A32])
        (reg:SI 353 [ D.5786 ])) blake_ref.c:47 90 {*movsi_internal}
     (nil))
(insn 110 109 111 2 (set (reg:SI 128 [ v$0 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 16 [0x10])) [2 state_246(D)->h32+0 S4 A64])) blake_ref.c:50 90 {*movsi_internal}
     (nil))
(insn 111 110 112 2 (set (reg:SI 129 [ v$1 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 20 [0x14])) [2 state_246(D)->h32+4 S4 A32])) blake_ref.c:51 90 {*movsi_internal}
     (nil))
(insn 112 111 113 2 (set (reg:SI 130 [ v$2 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 24 [0x18])) [2 state_246(D)->h32+8 S4 A64])) blake_ref.c:52 90 {*movsi_internal}
     (nil))
(insn 113 112 114 2 (set (reg:SI 131 [ v$3 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 28 [0x1c])) [2 state_246(D)->h32+12 S4 A32])) blake_ref.c:53 90 {*movsi_internal}
     (nil))
(insn 114 113 115 2 (set (reg:SI 132 [ v$4 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 32 [0x20])) [2 state_246(D)->h32+16 S4 A64])) blake_ref.c:54 90 {*movsi_internal}
     (nil))
(insn 115 114 116 2 (set (reg:SI 133 [ v$5 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 36 [0x24])) [2 state_246(D)->h32+20 S4 A32])) blake_ref.c:55 90 {*movsi_internal}
     (nil))
(insn 116 115 117 2 (set (reg:SI 134 [ v$6 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 40 [0x28])) [2 state_246(D)->h32+24 S4 A64])) blake_ref.c:56 90 {*movsi_internal}
     (nil))
(insn 117 116 118 2 (set (reg:SI 135 [ v$7 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 44 [0x2c])) [2 state_246(D)->h32+28 S4 A32])) blake_ref.c:57 90 {*movsi_internal}
     (nil))
(insn 118 117 119 2 (set (reg:SI 136 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 120 [0x78])) [2 state_246(D)->salt32+0 S4 A64])) blake_ref.c:58 90 {*movsi_internal}
     (nil))
(insn 119 118 120 2 (parallel [
            (set (reg:SI 254 [ v$8 ])
                (xor:SI (reg:SI 136 [ D.5781 ])
                    (const_int 608135816 [0x243f6a88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:58 400 {*xorsi_1}
     (nil))
(insn 120 119 121 2 (set (reg:SI 137 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 124 [0x7c])) [2 state_246(D)->salt32+4 S4 A32])) blake_ref.c:59 90 {*movsi_internal}
     (nil))
(insn 121 120 122 2 (parallel [
            (set (reg:SI 274 [ v$9 ])
                (xor:SI (reg:SI 137 [ D.5781 ])
                    (const_int -2052912941 [0xffffffff85a308d3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:59 400 {*xorsi_1}
     (nil))
(insn 122 121 123 2 (set (reg:SI 138 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 128 [0x80])) [2 state_246(D)->salt32+8 S4 A64])) blake_ref.c:60 90 {*movsi_internal}
     (nil))
(insn 123 122 124 2 (parallel [
            (set (reg:SI 220 [ v$10 ])
                (xor:SI (reg:SI 138 [ D.5781 ])
                    (const_int 320440878 [0x13198a2e])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:60 400 {*xorsi_1}
     (nil))
(insn 124 123 125 2 (set (reg:SI 139 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 132 [0x84])) [2 state_246(D)->salt32+12 S4 A32])) blake_ref.c:61 90 {*movsi_internal}
     (nil))
(insn 125 124 126 2 (parallel [
            (set (reg:SI 206 [ v$11 ])
                (xor:SI (reg:SI 139 [ D.5781 ])
                    (const_int 57701188 [0x3707344])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:61 400 {*xorsi_1}
     (nil))
(insn 126 125 127 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                    (const_int 12 [0xc])) [2 state_246(D)->nullt+0 S4 A32])
            (const_int 0 [0]))) blake_ref.c:62 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 127 126 128 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 418)
            (pc))) blake_ref.c:62 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 418)
;;  succ:       4 [50.0%] 
;;              3 [50.0%]  (FALLTHRU)

;; basic block 3, loop depth 0, count 0, freq 334, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 128 127 129 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 3 (set (reg:SI 141 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 48 [0x30])) [2 state_246(D)->t32+0 S4 A64])) blake_ref.c:69 90 {*movsi_internal}
     (nil))
(insn 130 129 131 3 (parallel [
            (set (reg:SI 235 [ v$12 ])
                (xor:SI (reg:SI 141 [ D.5781 ])
                    (const_int -1542899678 [0xffffffffa4093822])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:69 400 {*xorsi_1}
     (nil))
(insn 131 130 132 3 (parallel [
            (set (reg:SI 252 [ v$13 ])
                (xor:SI (reg:SI 141 [ D.5781 ])
                    (const_int 698298832 [0x299f31d0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:70 400 {*xorsi_1}
     (nil))
(insn 132 131 133 3 (set (reg:SI 142 [ D.5781 ])
        (mem:SI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 52 [0x34])) [2 state_246(D)->t32+4 S4 A32])) blake_ref.c:71 90 {*movsi_internal}
     (nil))
(insn 133 132 134 3 (parallel [
            (set (reg:SI 273 [ v$14 ])
                (xor:SI (reg:SI 142 [ D.5781 ])
                    (const_int 137296536 [0x82efa98])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:71 400 {*xorsi_1}
     (nil))
(insn 134 133 418 3 (parallel [
            (set (reg:SI 219 [ v$15 ])
                (xor:SI (reg:SI 142 [ D.5781 ])
                    (const_int -330404727 [0xffffffffec4e6c89])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:72 400 {*xorsi_1}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)

;; basic block 4, loop depth 0, count 0, freq 334, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2 [50.0%] 
(code_label 418 134 417 4 5 "" [1 uses])
(note 417 418 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 417 32 4 (set (reg:SI 219 [ v$15 ])
        (const_int -330404727 [0xffffffffec4e6c89])) blake_ref.c:66 90 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:SI 273 [ v$14 ])
        (const_int 137296536 [0x82efa98])) blake_ref.c:65 90 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:SI 252 [ v$13 ])
        (const_int 698298832 [0x299f31d0])) blake_ref.c:64 90 {*movsi_internal}
     (nil))
(insn 34 33 135 4 (set (reg:SI 235 [ v$12 ])
        (const_int -1542899678 [0xffffffffa4093822])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 670, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              3 [100.0%]  (FALLTHRU)
(code_label 135 34 136 5 2 "" [0 uses])
(note 136 135 137 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 137 136 35 5 (set (reg:DI 281 [ ivtmp.77 ])
        (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)) 89 {*movdi_internal}
     (nil))
(insn 35 137 36 5 (set (reg:SI 217 [ v$0 ])
        (reg:SI 128 [ v$0 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:SI 233 [ v$1 ])
        (reg:SI 129 [ v$1 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 37 36 38 5 (set (reg:SI 250 [ v$2 ])
        (reg:SI 130 [ v$2 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:SI 270 [ v$3 ])
        (reg:SI 131 [ v$3 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:SI 276 [ v$4 ])
        (reg:SI 132 [ v$4 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:SI 222 [ v$5 ])
        (reg:SI 133 [ v$5 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:SI 238 [ v$6 ])
        (reg:SI 134 [ v$6 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 42 41 43 5 (set (reg:SI 256 [ v$7 ])
        (reg:SI 135 [ v$7 ])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:SI 113 [ D.5779 ])
        (const_int 14 [0xe])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:SI 354 [ D.5787 ])
        (const_int 1065670069 [0x3f84d5b5])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:SI 352 [ D.5787 ])
        (const_int -1253635817 [0xffffffffb5470917])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:SI 346 [ D.5787 ])
        (const_int -1062458953 [0xffffffffc0ac29b7])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:SI 344 [ D.5787 ])
        (const_int -914599715 [0xffffffffc97c50dd])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:SI 338 [ D.5787 ])
        (const_int -1101764913 [0xffffffffbe5466cf])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:SI 336 [ D.5787 ])
        (const_int 887688300 [0x34e90c6c])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 50 49 51 5 (set (reg:SI 330 [ D.5787 ])
        (const_int 1160258022 [0x452821e6])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 51 50 52 5 (set (reg:SI 328 [ D.5787 ])
        (const_int 953160567 [0x38d01377])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 52 51 53 5 (set (reg:SI 322 [ D.5787 ])
        (const_int 137296536 [0x82efa98])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 53 52 54 5 (set (reg:SI 320 [ D.5787 ])
        (const_int -330404727 [0xffffffffec4e6c89])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:SI 314 [ D.5787 ])
        (const_int -1542899678 [0xffffffffa4093822])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 55 54 56 5 (set (reg:SI 312 [ D.5787 ])
        (const_int 698298832 [0x299f31d0])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:SI 306 [ D.5787 ])
        (const_int 320440878 [0x13198a2e])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 57 56 58 5 (set (reg:SI 304 [ D.5787 ])
        (const_int 57701188 [0x3707344])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 58 57 59 5 (set (reg:SI 298 [ D.5787 ])
        (const_int 608135816 [0x243f6a88])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
(insn 59 58 369 5 (set (reg:SI 296 [ D.5787 ])
        (const_int -2052912941 [0xffffffff85a308d3])) blake_ref.c:63 90 {*movsi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 1, count 0, freq 9333, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       7 [100.0%]  (FALLTHRU)
;;              5 [100.0%]  (FALLTHRU)
(code_label 369 59 138 6 4 "" [0 uses])
(note 138 369 139 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 6 (parallel [
            (set (reg:SI 374 [ D.5781 ])
                (xor:SI (reg:SI 293 [ D.5786 ])
                    (reg:SI 296 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (nil))
(insn 140 139 141 6 (parallel [
            (set (reg:SI 375 [ D.5781 ])
                (plus:SI (reg:SI 374 [ D.5781 ])
                    (reg:SI 276 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (nil))
(insn 141 140 142 6 (parallel [
            (set (reg:SI 144 [ D.5781 ])
                (plus:SI (reg:SI 375 [ D.5781 ])
                    (reg:SI 217 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (nil))
(insn 142 141 143 6 (parallel [
            (set (reg:SI 376 [ D.5781 ])
                (xor:SI (reg:SI 144 [ D.5781 ])
                    (reg:SI 235 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (nil))
(insn 143 142 144 6 (parallel [
            (set (reg:SI 146 [ D.5781 ])
                (rotate:SI (reg:SI 376 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 586 {*rotlsi3_1}
     (nil))
(insn 144 143 145 6 (parallel [
            (set (reg:SI 147 [ D.5781 ])
                (plus:SI (reg:SI 146 [ D.5781 ])
                    (reg:SI 254 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (nil))
(insn 145 144 146 6 (parallel [
            (set (reg:SI 377 [ D.5781 ])
                (xor:SI (reg:SI 147 [ D.5781 ])
                    (reg:SI 276 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (nil))
(insn 146 145 147 6 (parallel [
            (set (reg:SI 149 [ D.5781 ])
                (rotatert:SI (reg:SI 377 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 587 {*rotrsi3_1}
     (nil))
(insn 147 146 148 6 (parallel [
            (set (reg:SI 378 [ D.5781 ])
                (xor:SI (reg:SI 297 [ D.5786 ])
                    (reg:SI 298 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (nil))
(insn 148 147 149 6 (parallel [
            (set (reg:SI 379 [ D.5781 ])
                (plus:SI (reg:SI 378 [ D.5781 ])
                    (reg:SI 144 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (nil))
(insn 149 148 150 6 (parallel [
            (set (reg:SI 152 [ D.5781 ])
                (plus:SI (reg:SI 379 [ D.5781 ])
                    (reg:SI 149 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (nil))
(insn 150 149 151 6 (parallel [
            (set (reg:SI 380 [ D.5781 ])
                (xor:SI (reg:SI 146 [ D.5781 ])
                    (reg:SI 152 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (nil))
(insn 151 150 152 6 (parallel [
            (set (reg:SI 154 [ D.5781 ])
                (rotatert:SI (reg:SI 380 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 587 {*rotrsi3_1}
     (nil))
(insn 152 151 153 6 (parallel [
            (set (reg:SI 155 [ D.5781 ])
                (plus:SI (reg:SI 147 [ D.5781 ])
                    (reg:SI 154 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 217 {*addsi_1}
     (nil))
(insn 153 152 154 6 (parallel [
            (set (reg:SI 381 [ D.5781 ])
                (xor:SI (reg:SI 149 [ D.5781 ])
                    (reg:SI 155 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 400 {*xorsi_1}
     (nil))
(insn 154 153 155 6 (parallel [
            (set (reg:SI 157 [ D.5781 ])
                (rotatert:SI (reg:SI 381 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:79 587 {*rotrsi3_1}
     (nil))
(insn 155 154 156 6 (parallel [
            (set (reg:SI 382 [ D.5781 ])
                (xor:SI (reg:SI 301 [ D.5786 ])
                    (reg:SI 304 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (nil))
(insn 156 155 157 6 (parallel [
            (set (reg:SI 383 [ D.5781 ])
                (plus:SI (reg:SI 382 [ D.5781 ])
                    (reg:SI 222 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (nil))
(insn 157 156 158 6 (parallel [
            (set (reg:SI 160 [ D.5781 ])
                (plus:SI (reg:SI 383 [ D.5781 ])
                    (reg:SI 233 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (nil))
(insn 158 157 159 6 (parallel [
            (set (reg:SI 384 [ D.5781 ])
                (xor:SI (reg:SI 160 [ D.5781 ])
                    (reg:SI 252 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (nil))
(insn 159 158 160 6 (parallel [
            (set (reg:SI 162 [ D.5781 ])
                (rotate:SI (reg:SI 384 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 586 {*rotlsi3_1}
     (nil))
(insn 160 159 161 6 (parallel [
            (set (reg:SI 163 [ D.5781 ])
                (plus:SI (reg:SI 162 [ D.5781 ])
                    (reg:SI 274 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (nil))
(insn 161 160 162 6 (parallel [
            (set (reg:SI 385 [ D.5781 ])
                (xor:SI (reg:SI 163 [ D.5781 ])
                    (reg:SI 222 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (nil))
(insn 162 161 163 6 (parallel [
            (set (reg:SI 165 [ D.5781 ])
                (rotatert:SI (reg:SI 385 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 587 {*rotrsi3_1}
     (nil))
(insn 163 162 164 6 (parallel [
            (set (reg:SI 386 [ D.5781 ])
                (xor:SI (reg:SI 305 [ D.5786 ])
                    (reg:SI 306 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (nil))
(insn 164 163 165 6 (parallel [
            (set (reg:SI 387 [ D.5781 ])
                (plus:SI (reg:SI 386 [ D.5781 ])
                    (reg:SI 160 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (nil))
(insn 165 164 166 6 (parallel [
            (set (reg:SI 168 [ D.5781 ])
                (plus:SI (reg:SI 387 [ D.5781 ])
                    (reg:SI 165 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (nil))
(insn 166 165 167 6 (parallel [
            (set (reg:SI 388 [ D.5781 ])
                (xor:SI (reg:SI 162 [ D.5781 ])
                    (reg:SI 168 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (nil))
(insn 167 166 168 6 (parallel [
            (set (reg:SI 170 [ D.5781 ])
                (rotatert:SI (reg:SI 388 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 587 {*rotrsi3_1}
     (nil))
(insn 168 167 169 6 (parallel [
            (set (reg:SI 171 [ D.5781 ])
                (plus:SI (reg:SI 163 [ D.5781 ])
                    (reg:SI 170 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 217 {*addsi_1}
     (nil))
(insn 169 168 170 6 (parallel [
            (set (reg:SI 389 [ D.5781 ])
                (xor:SI (reg:SI 165 [ D.5781 ])
                    (reg:SI 171 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 400 {*xorsi_1}
     (nil))
(insn 170 169 171 6 (parallel [
            (set (reg:SI 173 [ D.5781 ])
                (rotatert:SI (reg:SI 389 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:80 587 {*rotrsi3_1}
     (nil))
(insn 171 170 172 6 (parallel [
            (set (reg:SI 390 [ D.5781 ])
                (xor:SI (reg:SI 309 [ D.5786 ])
                    (reg:SI 312 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (nil))
(insn 172 171 173 6 (parallel [
            (set (reg:SI 391 [ D.5781 ])
                (plus:SI (reg:SI 390 [ D.5781 ])
                    (reg:SI 238 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (nil))
(insn 173 172 174 6 (parallel [
            (set (reg:SI 176 [ D.5781 ])
                (plus:SI (reg:SI 391 [ D.5781 ])
                    (reg:SI 250 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (nil))
(insn 174 173 175 6 (parallel [
            (set (reg:SI 392 [ D.5781 ])
                (xor:SI (reg:SI 176 [ D.5781 ])
                    (reg:SI 273 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (nil))
(insn 175 174 176 6 (parallel [
            (set (reg:SI 178 [ D.5781 ])
                (rotate:SI (reg:SI 392 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 586 {*rotlsi3_1}
     (nil))
(insn 176 175 177 6 (parallel [
            (set (reg:SI 179 [ D.5781 ])
                (plus:SI (reg:SI 178 [ D.5781 ])
                    (reg:SI 220 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (nil))
(insn 177 176 178 6 (parallel [
            (set (reg:SI 393 [ D.5781 ])
                (xor:SI (reg:SI 179 [ D.5781 ])
                    (reg:SI 238 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (nil))
(insn 178 177 179 6 (parallel [
            (set (reg:SI 181 [ D.5781 ])
                (rotatert:SI (reg:SI 393 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 587 {*rotrsi3_1}
     (nil))
(insn 179 178 180 6 (parallel [
            (set (reg:SI 394 [ D.5781 ])
                (xor:SI (reg:SI 313 [ D.5786 ])
                    (reg:SI 314 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (nil))
(insn 180 179 181 6 (parallel [
            (set (reg:SI 395 [ D.5781 ])
                (plus:SI (reg:SI 394 [ D.5781 ])
                    (reg:SI 176 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (nil))
(insn 181 180 182 6 (parallel [
            (set (reg:SI 184 [ D.5781 ])
                (plus:SI (reg:SI 395 [ D.5781 ])
                    (reg:SI 181 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (nil))
(insn 182 181 183 6 (parallel [
            (set (reg:SI 396 [ D.5781 ])
                (xor:SI (reg:SI 178 [ D.5781 ])
                    (reg:SI 184 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (nil))
(insn 183 182 184 6 (parallel [
            (set (reg:SI 186 [ D.5781 ])
                (rotatert:SI (reg:SI 396 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 587 {*rotrsi3_1}
     (nil))
(insn 184 183 185 6 (parallel [
            (set (reg:SI 187 [ D.5781 ])
                (plus:SI (reg:SI 179 [ D.5781 ])
                    (reg:SI 186 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 217 {*addsi_1}
     (nil))
(insn 185 184 186 6 (parallel [
            (set (reg:SI 397 [ D.5781 ])
                (xor:SI (reg:SI 181 [ D.5781 ])
                    (reg:SI 187 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 400 {*xorsi_1}
     (nil))
(insn 186 185 187 6 (parallel [
            (set (reg:SI 189 [ D.5781 ])
                (rotatert:SI (reg:SI 397 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:81 587 {*rotrsi3_1}
     (nil))
(insn 187 186 188 6 (parallel [
            (set (reg:SI 398 [ D.5781 ])
                (xor:SI (reg:SI 317 [ D.5786 ])
                    (reg:SI 320 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (nil))
(insn 188 187 189 6 (parallel [
            (set (reg:SI 399 [ D.5781 ])
                (plus:SI (reg:SI 398 [ D.5781 ])
                    (reg:SI 256 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (nil))
(insn 189 188 190 6 (parallel [
            (set (reg:SI 192 [ D.5781 ])
                (plus:SI (reg:SI 399 [ D.5781 ])
                    (reg:SI 270 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (nil))
(insn 190 189 191 6 (parallel [
            (set (reg:SI 400 [ D.5781 ])
                (xor:SI (reg:SI 192 [ D.5781 ])
                    (reg:SI 219 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (nil))
(insn 191 190 192 6 (parallel [
            (set (reg:SI 194 [ D.5781 ])
                (rotate:SI (reg:SI 400 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 586 {*rotlsi3_1}
     (nil))
(insn 192 191 193 6 (parallel [
            (set (reg:SI 195 [ D.5781 ])
                (plus:SI (reg:SI 194 [ D.5781 ])
                    (reg:SI 206 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (nil))
(insn 193 192 194 6 (parallel [
            (set (reg:SI 401 [ D.5781 ])
                (xor:SI (reg:SI 195 [ D.5781 ])
                    (reg:SI 256 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (nil))
(insn 194 193 195 6 (parallel [
            (set (reg:SI 197 [ D.5781 ])
                (rotatert:SI (reg:SI 401 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 587 {*rotrsi3_1}
     (nil))
(insn 195 194 196 6 (parallel [
            (set (reg:SI 402 [ D.5781 ])
                (xor:SI (reg:SI 321 [ D.5786 ])
                    (reg:SI 322 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (nil))
(insn 196 195 197 6 (parallel [
            (set (reg:SI 403 [ D.5781 ])
                (plus:SI (reg:SI 402 [ D.5781 ])
                    (reg:SI 192 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (nil))
(insn 197 196 198 6 (parallel [
            (set (reg:SI 200 [ D.5781 ])
                (plus:SI (reg:SI 403 [ D.5781 ])
                    (reg:SI 197 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (nil))
(insn 198 197 199 6 (parallel [
            (set (reg:SI 404 [ D.5781 ])
                (xor:SI (reg:SI 194 [ D.5781 ])
                    (reg:SI 200 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (nil))
(insn 199 198 200 6 (parallel [
            (set (reg:SI 202 [ D.5781 ])
                (rotatert:SI (reg:SI 404 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 587 {*rotrsi3_1}
     (nil))
(insn 200 199 201 6 (parallel [
            (set (reg:SI 203 [ D.5781 ])
                (plus:SI (reg:SI 195 [ D.5781 ])
                    (reg:SI 202 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 217 {*addsi_1}
     (nil))
(insn 201 200 202 6 (parallel [
            (set (reg:SI 405 [ D.5781 ])
                (xor:SI (reg:SI 197 [ D.5781 ])
                    (reg:SI 203 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 400 {*xorsi_1}
     (nil))
(insn 202 201 203 6 (parallel [
            (set (reg:SI 205 [ D.5781 ])
                (rotatert:SI (reg:SI 405 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:82 587 {*rotrsi3_1}
     (nil))
(insn 203 202 204 6 (parallel [
            (set (reg:SI 406 [ D.5781 ])
                (xor:SI (reg:SI 325 [ D.5786 ])
                    (reg:SI 328 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (nil))
(insn 204 203 205 6 (parallel [
            (set (reg:SI 407 [ D.5781 ])
                (plus:SI (reg:SI 406 [ D.5781 ])
                    (reg:SI 152 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (nil))
(insn 205 204 206 6 (parallel [
            (set (reg:SI 209 [ D.5781 ])
                (plus:SI (reg:SI 407 [ D.5781 ])
                    (reg:SI 173 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (nil))
(insn 206 205 207 6 (parallel [
            (set (reg:SI 408 [ D.5781 ])
                (xor:SI (reg:SI 202 [ D.5781 ])
                    (reg:SI 209 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (nil))
(insn 207 206 208 6 (parallel [
            (set (reg:SI 211 [ D.5781 ])
                (rotate:SI (reg:SI 408 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 586 {*rotlsi3_1}
     (nil))
(insn 208 207 209 6 (parallel [
            (set (reg:SI 212 [ D.5781 ])
                (plus:SI (reg:SI 187 [ D.5781 ])
                    (reg:SI 211 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (nil))
(insn 209 208 210 6 (parallel [
            (set (reg:SI 409 [ D.5781 ])
                (xor:SI (reg:SI 173 [ D.5781 ])
                    (reg:SI 212 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (nil))
(insn 210 209 211 6 (parallel [
            (set (reg:SI 214 [ D.5781 ])
                (rotatert:SI (reg:SI 409 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 587 {*rotrsi3_1}
     (nil))
(insn 211 210 212 6 (parallel [
            (set (reg:SI 410 [ D.5781 ])
                (xor:SI (reg:SI 329 [ D.5786 ])
                    (reg:SI 330 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (nil))
(insn 212 211 213 6 (parallel [
            (set (reg:SI 411 [ D.5781 ])
                (plus:SI (reg:SI 410 [ D.5781 ])
                    (reg:SI 209 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (nil))
(insn 213 212 214 6 (parallel [
            (set (reg:SI 217 [ v$0 ])
                (plus:SI (reg:SI 411 [ D.5781 ])
                    (reg:SI 214 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (nil))
(insn 214 213 215 6 (parallel [
            (set (reg:SI 412 [ D.5781 ])
                (xor:SI (reg:SI 211 [ D.5781 ])
                    (reg:SI 217 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (nil))
(insn 215 214 216 6 (parallel [
            (set (reg:SI 219 [ v$15 ])
                (rotatert:SI (reg:SI 412 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 587 {*rotrsi3_1}
     (nil))
(insn 216 215 217 6 (parallel [
            (set (reg:SI 220 [ v$10 ])
                (plus:SI (reg:SI 212 [ D.5781 ])
                    (reg:SI 219 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 217 {*addsi_1}
     (nil))
(insn 217 216 218 6 (parallel [
            (set (reg:SI 413 [ D.5781 ])
                (xor:SI (reg:SI 214 [ D.5781 ])
                    (reg:SI 220 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 400 {*xorsi_1}
     (nil))
(insn 218 217 219 6 (parallel [
            (set (reg:SI 222 [ v$5 ])
                (rotatert:SI (reg:SI 413 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:85 587 {*rotrsi3_1}
     (nil))
(insn 219 218 220 6 (parallel [
            (set (reg:SI 414 [ D.5781 ])
                (xor:SI (reg:SI 333 [ D.5786 ])
                    (reg:SI 336 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (nil))
(insn 220 219 221 6 (parallel [
            (set (reg:SI 415 [ D.5781 ])
                (plus:SI (reg:SI 414 [ D.5781 ])
                    (reg:SI 168 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (nil))
(insn 221 220 222 6 (parallel [
            (set (reg:SI 225 [ D.5781 ])
                (plus:SI (reg:SI 415 [ D.5781 ])
                    (reg:SI 189 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (nil))
(insn 222 221 223 6 (parallel [
            (set (reg:SI 416 [ D.5781 ])
                (xor:SI (reg:SI 154 [ D.5781 ])
                    (reg:SI 225 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (nil))
(insn 223 222 224 6 (parallel [
            (set (reg:SI 227 [ D.5781 ])
                (rotate:SI (reg:SI 416 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 586 {*rotlsi3_1}
     (nil))
(insn 224 223 225 6 (parallel [
            (set (reg:SI 228 [ D.5781 ])
                (plus:SI (reg:SI 203 [ D.5781 ])
                    (reg:SI 227 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (nil))
(insn 225 224 226 6 (parallel [
            (set (reg:SI 417 [ D.5781 ])
                (xor:SI (reg:SI 189 [ D.5781 ])
                    (reg:SI 228 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (nil))
(insn 226 225 227 6 (parallel [
            (set (reg:SI 230 [ D.5781 ])
                (rotatert:SI (reg:SI 417 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 587 {*rotrsi3_1}
     (nil))
(insn 227 226 228 6 (parallel [
            (set (reg:SI 418 [ D.5781 ])
                (xor:SI (reg:SI 337 [ D.5786 ])
                    (reg:SI 338 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (nil))
(insn 228 227 229 6 (parallel [
            (set (reg:SI 419 [ D.5781 ])
                (plus:SI (reg:SI 418 [ D.5781 ])
                    (reg:SI 225 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (nil))
(insn 229 228 230 6 (parallel [
            (set (reg:SI 233 [ v$1 ])
                (plus:SI (reg:SI 419 [ D.5781 ])
                    (reg:SI 230 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (nil))
(insn 230 229 231 6 (parallel [
            (set (reg:SI 420 [ D.5781 ])
                (xor:SI (reg:SI 227 [ D.5781 ])
                    (reg:SI 233 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (nil))
(insn 231 230 232 6 (parallel [
            (set (reg:SI 235 [ v$12 ])
                (rotatert:SI (reg:SI 420 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 587 {*rotrsi3_1}
     (nil))
(insn 232 231 233 6 (parallel [
            (set (reg:SI 206 [ v$11 ])
                (plus:SI (reg:SI 228 [ D.5781 ])
                    (reg:SI 235 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 217 {*addsi_1}
     (nil))
(insn 233 232 234 6 (parallel [
            (set (reg:SI 421 [ D.5781 ])
                (xor:SI (reg:SI 230 [ D.5781 ])
                    (reg:SI 206 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 400 {*xorsi_1}
     (nil))
(insn 234 233 235 6 (parallel [
            (set (reg:SI 238 [ v$6 ])
                (rotatert:SI (reg:SI 421 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:86 587 {*rotrsi3_1}
     (nil))
(insn 235 234 236 6 (parallel [
            (set (reg:SI 422 [ D.5781 ])
                (xor:SI (reg:SI 341 [ D.5786 ])
                    (reg:SI 344 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (nil))
(insn 236 235 237 6 (parallel [
            (set (reg:SI 423 [ D.5781 ])
                (plus:SI (reg:SI 422 [ D.5781 ])
                    (reg:SI 184 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (nil))
(insn 237 236 238 6 (parallel [
            (set (reg:SI 241 [ D.5781 ])
                (plus:SI (reg:SI 423 [ D.5781 ])
                    (reg:SI 205 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (nil))
(insn 238 237 239 6 (parallel [
            (set (reg:SI 424 [ D.5781 ])
                (xor:SI (reg:SI 170 [ D.5781 ])
                    (reg:SI 241 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (nil))
(insn 239 238 240 6 (parallel [
            (set (reg:SI 243 [ D.5781 ])
                (rotate:SI (reg:SI 424 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 586 {*rotlsi3_1}
     (nil))
(insn 240 239 241 6 (parallel [
            (set (reg:SI 244 [ D.5781 ])
                (plus:SI (reg:SI 155 [ D.5781 ])
                    (reg:SI 243 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (nil))
(insn 241 240 242 6 (parallel [
            (set (reg:SI 425 [ D.5781 ])
                (xor:SI (reg:SI 205 [ D.5781 ])
                    (reg:SI 244 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (nil))
(insn 242 241 243 6 (parallel [
            (set (reg:SI 247 [ D.5781 ])
                (rotatert:SI (reg:SI 425 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 587 {*rotrsi3_1}
     (nil))
(insn 243 242 244 6 (parallel [
            (set (reg:SI 426 [ D.5781 ])
                (xor:SI (reg:SI 345 [ D.5786 ])
                    (reg:SI 346 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (nil))
(insn 244 243 245 6 (parallel [
            (set (reg:SI 427 [ D.5781 ])
                (plus:SI (reg:SI 426 [ D.5781 ])
                    (reg:SI 241 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (nil))
(insn 245 244 246 6 (parallel [
            (set (reg:SI 250 [ v$2 ])
                (plus:SI (reg:SI 427 [ D.5781 ])
                    (reg:SI 247 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (nil))
(insn 246 245 247 6 (parallel [
            (set (reg:SI 428 [ D.5781 ])
                (xor:SI (reg:SI 243 [ D.5781 ])
                    (reg:SI 250 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (nil))
(insn 247 246 248 6 (parallel [
            (set (reg:SI 252 [ v$13 ])
                (rotatert:SI (reg:SI 428 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 587 {*rotrsi3_1}
     (nil))
(insn 248 247 249 6 (parallel [
            (set (reg:SI 254 [ v$8 ])
                (plus:SI (reg:SI 244 [ D.5781 ])
                    (reg:SI 252 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 217 {*addsi_1}
     (nil))
(insn 249 248 250 6 (parallel [
            (set (reg:SI 429 [ D.5781 ])
                (xor:SI (reg:SI 247 [ D.5781 ])
                    (reg:SI 254 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 400 {*xorsi_1}
     (nil))
(insn 250 249 251 6 (parallel [
            (set (reg:SI 256 [ v$7 ])
                (rotatert:SI (reg:SI 429 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:87 587 {*rotrsi3_1}
     (nil))
(insn 251 250 252 6 (parallel [
            (set (reg:SI 430 [ D.5781 ])
                (xor:SI (reg:SI 349 [ D.5786 ])
                    (reg:SI 352 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (nil))
(insn 252 251 253 6 (parallel [
            (set (reg:SI 431 [ D.5781 ])
                (plus:SI (reg:SI 430 [ D.5781 ])
                    (reg:SI 200 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (nil))
(insn 253 252 254 6 (parallel [
            (set (reg:SI 260 [ D.5781 ])
                (plus:SI (reg:SI 431 [ D.5781 ])
                    (reg:SI 157 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (nil))
(insn 254 253 255 6 (parallel [
            (set (reg:SI 432 [ D.5781 ])
                (xor:SI (reg:SI 186 [ D.5781 ])
                    (reg:SI 260 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (nil))
(insn 255 254 256 6 (parallel [
            (set (reg:SI 262 [ D.5781 ])
                (rotate:SI (reg:SI 432 [ D.5781 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 586 {*rotlsi3_1}
     (nil))
(insn 256 255 257 6 (parallel [
            (set (reg:SI 264 [ D.5781 ])
                (plus:SI (reg:SI 171 [ D.5781 ])
                    (reg:SI 262 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (nil))
(insn 257 256 258 6 (parallel [
            (set (reg:SI 433 [ D.5781 ])
                (xor:SI (reg:SI 157 [ D.5781 ])
                    (reg:SI 264 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (nil))
(insn 258 257 259 6 (parallel [
            (set (reg:SI 266 [ D.5781 ])
                (rotatert:SI (reg:SI 433 [ D.5781 ])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 587 {*rotrsi3_1}
     (nil))
(insn 259 258 260 6 (parallel [
            (set (reg:SI 434 [ D.5781 ])
                (xor:SI (reg:SI 353 [ D.5786 ])
                    (reg:SI 354 [ D.5787 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (nil))
(insn 260 259 261 6 (parallel [
            (set (reg:SI 435 [ D.5781 ])
                (plus:SI (reg:SI 434 [ D.5781 ])
                    (reg:SI 260 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (nil))
(insn 261 260 262 6 (parallel [
            (set (reg:SI 270 [ v$3 ])
                (plus:SI (reg:SI 435 [ D.5781 ])
                    (reg:SI 266 [ D.5781 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (nil))
(insn 262 261 263 6 (parallel [
            (set (reg:SI 436 [ D.5781 ])
                (xor:SI (reg:SI 262 [ D.5781 ])
                    (reg:SI 270 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (nil))
(insn 263 262 264 6 (parallel [
            (set (reg:SI 273 [ v$14 ])
                (rotatert:SI (reg:SI 436 [ D.5781 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 587 {*rotrsi3_1}
     (nil))
(insn 264 263 265 6 (parallel [
            (set (reg:SI 274 [ v$9 ])
                (plus:SI (reg:SI 264 [ D.5781 ])
                    (reg:SI 273 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 217 {*addsi_1}
     (nil))
(insn 265 264 266 6 (parallel [
            (set (reg:SI 437 [ D.5781 ])
                (xor:SI (reg:SI 266 [ D.5781 ])
                    (reg:SI 274 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 400 {*xorsi_1}
     (nil))
(insn 266 265 267 6 (parallel [
            (set (reg:SI 276 [ v$4 ])
                (rotatert:SI (reg:SI 437 [ D.5781 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:88 587 {*rotrsi3_1}
     (nil))
(insn 267 266 268 6 (parallel [
            (set (reg:SI 113 [ D.5779 ])
                (plus:SI (reg:SI 113 [ D.5779 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 217 {*addsi_1}
     (nil))
(insn 268 267 269 6 (parallel [
            (set (reg:DI 281 [ ivtmp.77 ])
                (plus:DI (reg:DI 281 [ ivtmp.77 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 269 268 270 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 113 [ D.5779 ])
            (const_int 0 [0]))) blake_ref.c:76 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 270 269 271 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 372)
            (pc))) blake_ref.c:76 612 {*jcc_1}
     (int_list:REG_BR_PROB 667 (nil))
 -> 372)
;;  succ:       7 [93.3%]  (FALLTHRU)
;;              8 [6.7%] 

;; basic block 7, loop depth 1, count 0, freq 8710, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [93.3%]  (FALLTHRU)
(note 271 270 272 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 7 (set (reg/f:DI 280 [ D.5784 ])
        (reg:DI 281 [ ivtmp.77 ])) 89 {*movdi_internal}
     (nil))
(insn 273 272 274 7 (set (reg:SI 292 [ D.5782 ])
        (zero_extend:SI (mem:QI (reg/f:DI 280 [ D.5784 ]) [0 MEM[base: _514, offset: 0B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 274 273 275 7 (set (reg:DI 438)
        (sign_extend:DI (reg:SI 292 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 275 274 276 7 (set (reg:SI 293 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 438)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 276 275 277 7 (set (reg:SI 295 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 1 [0x1])) [0 MEM[base: _514, offset: 1B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 277 276 278 7 (set (reg/f:DI 439)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 278 277 279 7 (set (reg:DI 440)
        (sign_extend:DI (reg:SI 295 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 279 278 280 7 (set (reg:SI 296 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 440)
                    (const_int 4 [0x4]))
                (reg/f:DI 439)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 280 279 281 7 (set (reg:DI 441)
        (sign_extend:DI (reg:SI 295 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 281 280 282 7 (set (reg:SI 297 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 441)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 282 281 283 7 (set (reg/f:DI 442)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 283 282 284 7 (set (reg:DI 443)
        (sign_extend:DI (reg:SI 292 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 284 283 285 7 (set (reg:SI 298 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 443)
                    (const_int 4 [0x4]))
                (reg/f:DI 442)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 285 284 286 7 (set (reg:SI 300 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 2 [0x2])) [0 MEM[base: _514, offset: 2B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 286 285 287 7 (set (reg:DI 444)
        (sign_extend:DI (reg:SI 300 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 287 286 288 7 (set (reg:SI 301 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 444)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 288 287 289 7 (set (reg:SI 303 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 3 [0x3])) [0 MEM[base: _514, offset: 3B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 289 288 290 7 (set (reg/f:DI 445)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 290 289 291 7 (set (reg:DI 446)
        (sign_extend:DI (reg:SI 303 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 291 290 292 7 (set (reg:SI 304 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 446)
                    (const_int 4 [0x4]))
                (reg/f:DI 445)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 292 291 293 7 (set (reg:DI 447)
        (sign_extend:DI (reg:SI 303 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 293 292 294 7 (set (reg:SI 305 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 447)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 294 293 295 7 (set (reg/f:DI 448)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 295 294 296 7 (set (reg:DI 449)
        (sign_extend:DI (reg:SI 300 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 296 295 297 7 (set (reg:SI 306 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 449)
                    (const_int 4 [0x4]))
                (reg/f:DI 448)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 297 296 298 7 (set (reg:SI 308 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 4 [0x4])) [0 MEM[base: _514, offset: 4B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 298 297 299 7 (set (reg:DI 450)
        (sign_extend:DI (reg:SI 308 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 299 298 300 7 (set (reg:SI 309 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 450)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 300 299 301 7 (set (reg:SI 311 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 5 [0x5])) [0 MEM[base: _514, offset: 5B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 301 300 302 7 (set (reg/f:DI 451)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 302 301 303 7 (set (reg:DI 452)
        (sign_extend:DI (reg:SI 311 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 303 302 304 7 (set (reg:SI 312 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 452)
                    (const_int 4 [0x4]))
                (reg/f:DI 451)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 304 303 305 7 (set (reg:DI 453)
        (sign_extend:DI (reg:SI 311 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 305 304 306 7 (set (reg:SI 313 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 453)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 306 305 307 7 (set (reg/f:DI 454)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 307 306 308 7 (set (reg:DI 455)
        (sign_extend:DI (reg:SI 308 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 308 307 309 7 (set (reg:SI 314 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 455)
                    (const_int 4 [0x4]))
                (reg/f:DI 454)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 309 308 310 7 (set (reg:SI 316 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 6 [0x6])) [0 MEM[base: _514, offset: 6B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 310 309 311 7 (set (reg:DI 456)
        (sign_extend:DI (reg:SI 316 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 311 310 312 7 (set (reg:SI 317 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 456)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 312 311 313 7 (set (reg:SI 319 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 7 [0x7])) [0 MEM[base: _514, offset: 7B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 313 312 314 7 (set (reg/f:DI 457)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 314 313 315 7 (set (reg:DI 458)
        (sign_extend:DI (reg:SI 319 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 315 314 316 7 (set (reg:SI 320 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 458)
                    (const_int 4 [0x4]))
                (reg/f:DI 457)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 316 315 317 7 (set (reg:DI 459)
        (sign_extend:DI (reg:SI 319 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 317 316 318 7 (set (reg:SI 321 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 459)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 318 317 319 7 (set (reg/f:DI 460)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 319 318 320 7 (set (reg:DI 461)
        (sign_extend:DI (reg:SI 316 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 320 319 321 7 (set (reg:SI 322 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 461)
                    (const_int 4 [0x4]))
                (reg/f:DI 460)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 321 320 322 7 (set (reg:SI 324 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 8 [0x8])) [0 MEM[base: _514, offset: 8B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 322 321 323 7 (set (reg:DI 462)
        (sign_extend:DI (reg:SI 324 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 323 322 324 7 (set (reg:SI 325 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 462)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 324 323 325 7 (set (reg:SI 327 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 9 [0x9])) [0 MEM[base: _514, offset: 9B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 325 324 326 7 (set (reg/f:DI 463)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 326 325 327 7 (set (reg:DI 464)
        (sign_extend:DI (reg:SI 327 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 327 326 328 7 (set (reg:SI 328 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 464)
                    (const_int 4 [0x4]))
                (reg/f:DI 463)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 328 327 329 7 (set (reg:DI 465)
        (sign_extend:DI (reg:SI 327 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 329 328 330 7 (set (reg:SI 329 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 465)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 330 329 331 7 (set (reg/f:DI 466)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 331 330 332 7 (set (reg:DI 467)
        (sign_extend:DI (reg:SI 324 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 332 331 333 7 (set (reg:SI 330 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 467)
                    (const_int 4 [0x4]))
                (reg/f:DI 466)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 333 332 334 7 (set (reg:SI 332 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 10 [0xa])) [0 MEM[base: _514, offset: 10B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 334 333 335 7 (set (reg:DI 468)
        (sign_extend:DI (reg:SI 332 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 335 334 336 7 (set (reg:SI 333 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 468)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 336 335 337 7 (set (reg:SI 335 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 11 [0xb])) [0 MEM[base: _514, offset: 11B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 337 336 338 7 (set (reg/f:DI 469)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 338 337 339 7 (set (reg:DI 470)
        (sign_extend:DI (reg:SI 335 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 339 338 340 7 (set (reg:SI 336 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 470)
                    (const_int 4 [0x4]))
                (reg/f:DI 469)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 340 339 341 7 (set (reg:DI 471)
        (sign_extend:DI (reg:SI 335 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 341 340 342 7 (set (reg:SI 337 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 471)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 342 341 343 7 (set (reg/f:DI 472)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 343 342 344 7 (set (reg:DI 473)
        (sign_extend:DI (reg:SI 332 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 344 343 345 7 (set (reg:SI 338 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 473)
                    (const_int 4 [0x4]))
                (reg/f:DI 472)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 345 344 346 7 (set (reg:SI 340 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 12 [0xc])) [0 MEM[base: _514, offset: 12B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 346 345 347 7 (set (reg:DI 474)
        (sign_extend:DI (reg:SI 340 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 347 346 348 7 (set (reg:SI 341 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 474)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 348 347 349 7 (set (reg:SI 343 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 13 [0xd])) [0 MEM[base: _514, offset: 13B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 349 348 350 7 (set (reg/f:DI 475)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 350 349 351 7 (set (reg:DI 476)
        (sign_extend:DI (reg:SI 343 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 351 350 352 7 (set (reg:SI 344 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 476)
                    (const_int 4 [0x4]))
                (reg/f:DI 475)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 352 351 353 7 (set (reg:DI 477)
        (sign_extend:DI (reg:SI 343 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 353 352 354 7 (set (reg:SI 345 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 477)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 354 353 355 7 (set (reg/f:DI 478)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 355 354 356 7 (set (reg:DI 479)
        (sign_extend:DI (reg:SI 340 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 356 355 357 7 (set (reg:SI 346 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 479)
                    (const_int 4 [0x4]))
                (reg/f:DI 478)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 357 356 358 7 (set (reg:SI 348 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 14 [0xe])) [0 MEM[base: _514, offset: 14B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 358 357 359 7 (set (reg:DI 480)
        (sign_extend:DI (reg:SI 348 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 359 358 360 7 (set (reg:SI 349 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 480)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 360 359 361 7 (set (reg:SI 351 [ D.5782 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 280 [ D.5784 ])
                    (const_int 15 [0xf])) [0 MEM[base: _514, offset: 15B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 361 360 362 7 (set (reg/f:DI 481)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 362 361 363 7 (set (reg:DI 482)
        (sign_extend:DI (reg:SI 351 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 363 362 364 7 (set (reg:SI 352 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 482)
                    (const_int 4 [0x4]))
                (reg/f:DI 481)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 364 363 365 7 (set (reg:DI 483)
        (sign_extend:DI (reg:SI 351 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 365 364 366 7 (set (reg:SI 353 [ D.5786 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 483)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -64 [0xffffffffffffffc0])) [2 m S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 366 365 367 7 (set (reg/f:DI 484)
        (symbol_ref:DI ("c32") [flags 0x2]  <var_decl 0x6ffffe13a80 c32>)) 89 {*movdi_internal}
     (nil))
(insn 367 366 368 7 (set (reg:DI 485)
        (sign_extend:DI (reg:SI 348 [ D.5782 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 368 367 372 7 (set (reg:SI 354 [ D.5787 ])
        (mem/u:SI (plus:DI (mult:DI (reg:DI 485)
                    (const_int 4 [0x4]))
                (reg/f:DI 484)) [2 c32 S4 A32])) 90 {*movsi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 667, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       6 [6.7%] 
(code_label 372 368 373 8 3 "" [1 uses])
(note 373 372 375 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 375 373 376 8 (set (reg:V2SI 487)
        (vec_concat:V2SI (reg:SI 250 [ v$2 ])
            (reg:SI 270 [ v$3 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 376 375 377 8 (set (reg:V2SI 488)
        (vec_concat:V2SI (reg:SI 217 [ v$0 ])
            (reg:SI 233 [ v$1 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 377 376 378 8 (set (reg:V4SI 486 [ vect_cst_.55 ])
        (vec_concat:V4SI (reg:V2SI 488)
            (reg:V2SI 487))) 3672 {*vec_concatv4si}
     (nil))
(insn 378 377 379 8 (set (reg:V2SI 490)
        (vec_concat:V2SI (reg:SI 220 [ v$10 ])
            (reg:SI 206 [ v$11 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 379 378 380 8 (set (reg:V2SI 491)
        (vec_concat:V2SI (reg:SI 254 [ v$8 ])
            (reg:SI 274 [ v$9 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 380 379 381 8 (set (reg:V4SI 489 [ vect_cst_.58 ])
        (vec_concat:V4SI (reg:V2SI 491)
            (reg:V2SI 490))) 3672 {*vec_concatv4si}
     (nil))
(insn 381 380 382 8 (set (reg:V4SI 492 [ D.5780 ])
        (xor:V4SI (reg:V4SI 486 [ vect_cst_.55 ])
            (reg:V4SI 489 [ vect_cst_.58 ]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn 382 381 383 8 (set (reg:V2SI 494)
        (vec_concat:V2SI (reg:SI 138 [ D.5781 ])
            (reg:SI 139 [ D.5781 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 383 382 384 8 (set (reg:V2SI 495)
        (vec_concat:V2SI (reg:SI 136 [ D.5781 ])
            (reg:SI 137 [ D.5781 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 384 383 385 8 (set (reg:V4SI 493 [ vect_cst_.52 ])
        (vec_concat:V4SI (reg:V2SI 495)
            (reg:V2SI 494))) 3672 {*vec_concatv4si}
     (nil))
(insn 385 384 386 8 (set (reg:V4SI 496 [ D.5780 ])
        (xor:V4SI (reg:V4SI 492 [ D.5780 ])
            (reg:V4SI 493 [ vect_cst_.52 ]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn 386 385 387 8 (set (reg:V2SI 498)
        (vec_concat:V2SI (reg:SI 130 [ v$2 ])
            (reg:SI 131 [ v$3 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 387 386 388 8 (set (reg:V2SI 499)
        (vec_concat:V2SI (reg:SI 128 [ v$0 ])
            (reg:SI 129 [ v$1 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 388 387 389 8 (set (reg:V4SI 497 [ vect_cst_.50 ])
        (vec_concat:V4SI (reg:V2SI 499)
            (reg:V2SI 498))) 3672 {*vec_concatv4si}
     (nil))
(insn 389 388 390 8 (set (reg:V4SI 500 [ vect__497.56 ])
        (xor:V4SI (reg:V4SI 496 [ D.5780 ])
            (reg:V4SI 497 [ vect_cst_.50 ]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn 390 389 392 8 (set (mem:V16QI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 16 [0x10])) [2 MEM[(unsigned int *)state_246(D) + 16B]+0 S16 A32])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 500 [ vect__497.56 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:93 1312 {sse2_storedquv16qi}
     (nil))
(insn 392 390 393 8 (set (reg:V2SI 502)
        (vec_concat:V2SI (reg:SI 273 [ v$14 ])
            (reg:SI 219 [ v$15 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 393 392 394 8 (set (reg:V2SI 503)
        (vec_concat:V2SI (reg:SI 235 [ v$12 ])
            (reg:SI 252 [ v$13 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 394 393 395 8 (set (reg:V4SI 501 [ vect_cst_.54 ])
        (vec_concat:V4SI (reg:V2SI 503)
            (reg:V2SI 502))) 3672 {*vec_concatv4si}
     (nil))
(insn 395 394 396 8 (set (reg:V2SI 505)
        (vec_concat:V2SI (reg:SI 238 [ v$6 ])
            (reg:SI 256 [ v$7 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 396 395 397 8 (set (reg:V2SI 506)
        (vec_concat:V2SI (reg:SI 276 [ v$4 ])
            (reg:SI 222 [ v$5 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 397 396 398 8 (set (reg:V4SI 504 [ vect_cst_.57 ])
        (vec_concat:V4SI (reg:V2SI 506)
            (reg:V2SI 505))) 3672 {*vec_concatv4si}
     (nil))
(insn 398 397 399 8 (set (reg:V4SI 507 [ D.5780 ])
        (xor:V4SI (reg:V4SI 501 [ vect_cst_.54 ])
            (reg:V4SI 504 [ vect_cst_.57 ]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn 399 398 400 8 (set (reg:V2SI 509)
        (vec_concat:V2SI (reg:SI 138 [ D.5781 ])
            (reg:SI 139 [ D.5781 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 400 399 401 8 (set (reg:V2SI 510)
        (vec_concat:V2SI (reg:SI 136 [ D.5781 ])
            (reg:SI 137 [ D.5781 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 401 400 402 8 (set (reg:V4SI 508 [ vect_cst_.51 ])
        (vec_concat:V4SI (reg:V2SI 510)
            (reg:V2SI 509))) 3672 {*vec_concatv4si}
     (nil))
(insn 402 401 403 8 (set (reg:V4SI 511 [ D.5780 ])
        (xor:V4SI (reg:V4SI 507 [ D.5780 ])
            (reg:V4SI 508 [ vect_cst_.51 ]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn 403 402 404 8 (set (reg:V2SI 513)
        (vec_concat:V2SI (reg:SI 134 [ v$6 ])
            (reg:SI 135 [ v$7 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 404 403 405 8 (set (reg:V2SI 514)
        (vec_concat:V2SI (reg:SI 132 [ v$4 ])
            (reg:SI 133 [ v$5 ]))) 3671 {*vec_concatv2si}
     (nil))
(insn 405 404 406 8 (set (reg:V4SI 512 [ vect_cst_.49 ])
        (vec_concat:V4SI (reg:V2SI 514)
            (reg:V2SI 513))) 3672 {*vec_concatv4si}
     (nil))
(insn 406 405 407 8 (set (reg:V4SI 515 [ vect__497.56 ])
        (xor:V4SI (reg:V4SI 511 [ D.5780 ])
            (reg:V4SI 512 [ vect_cst_.49 ]))) blake_ref.c:93 3431 {*xorv4si3}
     (nil))
(insn 407 406 408 8 (set (mem:V16QI (plus:DI (reg/v/f:DI 356 [ state ])
                (const_int 32 [0x20])) [2 MEM[(unsigned int *)state_246(D) + 32B]+0 S16 A32])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 515 [ vect__497.56 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:93 1312 {sse2_storedquv16qi}
     (nil))
(insn 408 407 412 8 (set (reg:SI 355 [ <retval> ])
        (const_int 0 [0])) blake_ref.c:102 90 {*movsi_internal}
     (nil))
(insn 412 408 413 8 (set (reg/i:SI 0 ax)
        (reg:SI 355 [ <retval> ])) blake_ref.c:103 90 {*movsi_internal}
     (nil))
(insn 413 412 0 8 (use (reg/i:SI 0 ax)) blake_ref.c:103 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function compress64 (compress64, funcdef_no=12, decl_uid=3221, cgraph_uid=12, symbol_order=20)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 588, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 38 0 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 6 38 7 2 (set (reg/v/f:DI 350 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:106 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 7 6 8 2 (set (reg/v/f:DI 351 [ datablock ])
        (reg:DI 1 dx [ datablock ])) blake_ref.c:106 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 datablock+0 S8 A64])
        (nil)))
(note 8 7 40 2 NOTE_INSN_FUNCTION_BEG)
(insn 40 8 41 2 (set (reg:DI 352)
        (mem:DI (reg/v/f:DI 351 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:DI 287 [ D.5867 ])
        (bswap:DI (reg:DI 352))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/v/f:DI 351 [ datablock ]) [0 MEM[(const BitSequence *)datablock_5(D)]+0 S8 A8]))
        (nil)))
(insn 42 41 43 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -128 [0xffffffffffffff80])) [3 m+0 S8 A128])
        (reg:DI 287 [ D.5867 ])) blake_ref.c:129 89 {*movdi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 353)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 44 43 45 2 (set (reg:DI 291 [ D.5867 ])
        (bswap:DI (reg:DI 353))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)datablock_5(D) + 8B]+0 S8 A8]))
        (nil)))
(insn 45 44 46 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -120 [0xffffffffffffff88])) [3 m+8 S8 A64])
        (reg:DI 291 [ D.5867 ])) blake_ref.c:130 89 {*movdi_internal}
     (nil))
(insn 46 45 47 2 (set (reg:DI 354)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 47 46 48 2 (set (reg:DI 295 [ D.5867 ])
        (bswap:DI (reg:DI 354))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)datablock_5(D) + 16B]+0 S8 A8]))
        (nil)))
(insn 48 47 49 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -112 [0xffffffffffffff90])) [3 m+16 S8 A128])
        (reg:DI 295 [ D.5867 ])) blake_ref.c:131 89 {*movdi_internal}
     (nil))
(insn 49 48 50 2 (set (reg:DI 355)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:DI 299 [ D.5867 ])
        (bswap:DI (reg:DI 355))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)datablock_5(D) + 24B]+0 S8 A8]))
        (nil)))
(insn 51 50 52 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [3 m+24 S8 A64])
        (reg:DI 299 [ D.5867 ])) blake_ref.c:132 89 {*movdi_internal}
     (nil))
(insn 52 51 53 2 (set (reg:DI 356)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 53 52 54 2 (set (reg:DI 303 [ D.5867 ])
        (bswap:DI (reg:DI 356))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 32 [0x20])) [0 MEM[(const BitSequence *)datablock_5(D) + 32B]+0 S8 A8]))
        (nil)))
(insn 54 53 55 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -96 [0xffffffffffffffa0])) [3 m+32 S8 A128])
        (reg:DI 303 [ D.5867 ])) blake_ref.c:133 89 {*movdi_internal}
     (nil))
(insn 55 54 56 2 (set (reg:DI 357)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 56 55 57 2 (set (reg:DI 307 [ D.5867 ])
        (bswap:DI (reg:DI 357))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 40 [0x28])) [0 MEM[(const BitSequence *)datablock_5(D) + 40B]+0 S8 A8]))
        (nil)))
(insn 57 56 58 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -88 [0xffffffffffffffa8])) [3 m+40 S8 A64])
        (reg:DI 307 [ D.5867 ])) blake_ref.c:134 89 {*movdi_internal}
     (nil))
(insn 58 57 59 2 (set (reg:DI 358)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 59 58 60 2 (set (reg:DI 311 [ D.5867 ])
        (bswap:DI (reg:DI 358))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 48 [0x30])) [0 MEM[(const BitSequence *)datablock_5(D) + 48B]+0 S8 A8]))
        (nil)))
(insn 60 59 61 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [3 m+48 S8 A128])
        (reg:DI 311 [ D.5867 ])) blake_ref.c:135 89 {*movdi_internal}
     (nil))
(insn 61 60 62 2 (set (reg:DI 359)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 62 61 63 2 (set (reg:DI 315 [ D.5867 ])
        (bswap:DI (reg:DI 359))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 56 [0x38])) [0 MEM[(const BitSequence *)datablock_5(D) + 56B]+0 S8 A8]))
        (nil)))
(insn 63 62 64 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [3 m+56 S8 A64])
        (reg:DI 315 [ D.5867 ])) blake_ref.c:136 89 {*movdi_internal}
     (nil))
(insn 64 63 65 2 (set (reg:DI 360)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 65 64 66 2 (set (reg:DI 319 [ D.5867 ])
        (bswap:DI (reg:DI 360))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 64 [0x40])) [0 MEM[(const BitSequence *)datablock_5(D) + 64B]+0 S8 A8]))
        (nil)))
(insn 66 65 67 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [3 m+64 S8 A128])
        (reg:DI 319 [ D.5867 ])) blake_ref.c:137 89 {*movdi_internal}
     (nil))
(insn 67 66 68 2 (set (reg:DI 361)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 68 67 69 2 (set (reg:DI 323 [ D.5867 ])
        (bswap:DI (reg:DI 361))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 72 [0x48])) [0 MEM[(const BitSequence *)datablock_5(D) + 72B]+0 S8 A8]))
        (nil)))
(insn 69 68 70 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [3 m+72 S8 A64])
        (reg:DI 323 [ D.5867 ])) blake_ref.c:138 89 {*movdi_internal}
     (nil))
(insn 70 69 71 2 (set (reg:DI 362)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 71 70 72 2 (set (reg:DI 327 [ D.5867 ])
        (bswap:DI (reg:DI 362))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 80 [0x50])) [0 MEM[(const BitSequence *)datablock_5(D) + 80B]+0 S8 A8]))
        (nil)))
(insn 72 71 73 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [3 m+80 S8 A128])
        (reg:DI 327 [ D.5867 ])) blake_ref.c:139 89 {*movdi_internal}
     (nil))
(insn 73 72 74 2 (set (reg:DI 363)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 74 73 75 2 (set (reg:DI 331 [ D.5867 ])
        (bswap:DI (reg:DI 363))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 88 [0x58])) [0 MEM[(const BitSequence *)datablock_5(D) + 88B]+0 S8 A8]))
        (nil)))
(insn 75 74 76 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 m+88 S8 A64])
        (reg:DI 331 [ D.5867 ])) blake_ref.c:140 89 {*movdi_internal}
     (nil))
(insn 76 75 77 2 (set (reg:DI 364)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 77 76 78 2 (set (reg:DI 335 [ D.5867 ])
        (bswap:DI (reg:DI 364))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 96 [0x60])) [0 MEM[(const BitSequence *)datablock_5(D) + 96B]+0 S8 A8]))
        (nil)))
(insn 78 77 79 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 m+96 S8 A128])
        (reg:DI 335 [ D.5867 ])) blake_ref.c:141 89 {*movdi_internal}
     (nil))
(insn 79 78 80 2 (set (reg:DI 365)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 80 79 81 2 (set (reg:DI 339 [ D.5867 ])
        (bswap:DI (reg:DI 365))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 104 [0x68])) [0 MEM[(const BitSequence *)datablock_5(D) + 104B]+0 S8 A8]))
        (nil)))
(insn 81 80 82 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 m+104 S8 A64])
        (reg:DI 339 [ D.5867 ])) blake_ref.c:142 89 {*movdi_internal}
     (nil))
(insn 82 81 83 2 (set (reg:DI 366)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 83 82 84 2 (set (reg:DI 343 [ D.5867 ])
        (bswap:DI (reg:DI 366))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 112 [0x70])) [0 MEM[(const BitSequence *)datablock_5(D) + 112B]+0 S8 A8]))
        (nil)))
(insn 84 83 85 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 m+112 S8 A128])
        (reg:DI 343 [ D.5867 ])) blake_ref.c:143 89 {*movdi_internal}
     (nil))
(insn 85 84 86 2 (set (reg:DI 367)
        (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                (const_int 120 [0x78])) [0 MEM[(const BitSequence *)datablock_5(D) + 120B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 86 85 87 2 (set (reg:DI 347 [ D.5867 ])
        (bswap:DI (reg:DI 367))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 351 [ datablock ])
                    (const_int 120 [0x78])) [0 MEM[(const BitSequence *)datablock_5(D) + 120B]+0 S8 A8]))
        (nil)))
(insn 87 86 88 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 m+120 S8 A64])
        (reg:DI 347 [ D.5867 ])) blake_ref.c:144 89 {*movdi_internal}
     (nil))
(insn 88 87 89 2 (set (reg:DI 119 [ v$0 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 136 [0x88])) [3 state_534(D)->h64+0 S8 A64])) blake_ref.c:147 89 {*movdi_internal}
     (nil))
(insn 89 88 90 2 (set (reg:DI 120 [ v$1 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 144 [0x90])) [3 state_534(D)->h64+8 S8 A64])) blake_ref.c:148 89 {*movdi_internal}
     (nil))
(insn 90 89 91 2 (set (reg:DI 121 [ v$2 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 152 [0x98])) [3 state_534(D)->h64+16 S8 A64])) blake_ref.c:149 89 {*movdi_internal}
     (nil))
(insn 91 90 92 2 (set (reg:DI 122 [ v$3 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 160 [0xa0])) [3 state_534(D)->h64+24 S8 A64])) blake_ref.c:150 89 {*movdi_internal}
     (nil))
(insn 92 91 93 2 (set (reg:DI 123 [ v$4 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 168 [0xa8])) [3 state_534(D)->h64+32 S8 A64])) blake_ref.c:151 89 {*movdi_internal}
     (nil))
(insn 93 92 94 2 (set (reg:DI 124 [ v$5 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 176 [0xb0])) [3 state_534(D)->h64+40 S8 A64])) blake_ref.c:152 89 {*movdi_internal}
     (nil))
(insn 94 93 95 2 (set (reg:DI 125 [ v$6 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 184 [0xb8])) [3 state_534(D)->h64+48 S8 A64])) blake_ref.c:153 89 {*movdi_internal}
     (nil))
(insn 95 94 96 2 (set (reg:DI 126 [ v$7 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 192 [0xc0])) [3 state_534(D)->h64+56 S8 A64])) blake_ref.c:154 89 {*movdi_internal}
     (nil))
(insn 96 95 97 2 (set (reg:DI 127 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 344 [0x158])) [3 state_534(D)->salt64+0 S8 A64])) blake_ref.c:155 89 {*movdi_internal}
     (nil))
(insn 97 96 98 2 (set (reg:DI 368)
        (const_int 2611923443488327891 [0x243f6a8885a308d3])) blake_ref.c:155 89 {*movdi_internal}
     (nil))
(insn 98 97 99 2 (parallel [
            (set (reg:DI 244 [ v$8 ])
                (xor:DI (reg:DI 127 [ D.5863 ])
                    (reg:DI 368)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:155 402 {*xordi_1}
     (nil))
(insn 99 98 100 2 (set (reg:DI 128 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 352 [0x160])) [3 state_534(D)->salt64+8 S8 A64])) blake_ref.c:156 89 {*movdi_internal}
     (nil))
(insn 100 99 101 2 (set (reg:DI 369)
        (const_int 1376283091369227076 [0x13198a2e03707344])) blake_ref.c:156 89 {*movdi_internal}
     (nil))
(insn 101 100 102 2 (parallel [
            (set (reg:DI 262 [ v$9 ])
                (xor:DI (reg:DI 128 [ D.5863 ])
                    (reg:DI 369)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:156 402 {*xordi_1}
     (nil))
(insn 102 101 103 2 (set (reg:DI 129 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 360 [0x168])) [3 state_534(D)->salt64+16 S8 A64])) blake_ref.c:157 89 {*movdi_internal}
     (nil))
(insn 103 102 104 2 (set (reg:DI 370)
        (const_int -6626703657320631856 [0xa4093822299f31d0])) blake_ref.c:157 89 {*movdi_internal}
     (nil))
(insn 104 103 105 2 (parallel [
            (set (reg:DI 211 [ v$10 ])
                (xor:DI (reg:DI 129 [ D.5863 ])
                    (reg:DI 370)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:157 402 {*xordi_1}
     (nil))
(insn 105 104 106 2 (set (reg:DI 130 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 368 [0x170])) [3 state_534(D)->salt64+24 S8 A64])) blake_ref.c:158 89 {*movdi_internal}
     (nil))
(insn 106 105 107 2 (set (reg:DI 371)
        (const_int 589684135938649225 [0x82efa98ec4e6c89])) blake_ref.c:158 89 {*movdi_internal}
     (nil))
(insn 107 106 108 2 (parallel [
            (set (reg:DI 197 [ v$11 ])
                (xor:DI (reg:DI 130 [ D.5863 ])
                    (reg:DI 371)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:158 402 {*xordi_1}
     (nil))
(insn 108 107 109 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 350 [ state ])
                    (const_int 12 [0xc])) [2 state_534(D)->nullt+0 S4 A32])
            (const_int 0 [0]))) blake_ref.c:159 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 109 108 110 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 406)
            (pc))) blake_ref.c:159 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 406)
;;  succ:       4 [50.0%] 
;;              3 [50.0%]  (FALLTHRU)

;; basic block 3, loop depth 0, count 0, freq 294, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 110 109 111 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 3 (set (reg:DI 132 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 200 [0xc8])) [3 state_534(D)->t64+0 S8 A64])) blake_ref.c:166 89 {*movdi_internal}
     (nil))
(insn 112 111 113 3 (set (reg:DI 372)
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:166 89 {*movdi_internal}
     (nil))
(insn 113 112 114 3 (parallel [
            (set (reg:DI 227 [ v$12 ])
                (xor:DI (reg:DI 132 [ D.5863 ])
                    (reg:DI 372)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:166 402 {*xordi_1}
     (nil))
(insn 114 113 115 3 (set (reg:DI 373)
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:167 89 {*movdi_internal}
     (nil))
(insn 115 114 116 3 (parallel [
            (set (reg:DI 243 [ v$13 ])
                (xor:DI (reg:DI 132 [ D.5863 ])
                    (reg:DI 373)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:167 402 {*xordi_1}
     (nil))
(insn 116 115 117 3 (set (reg:DI 133 [ D.5863 ])
        (mem:DI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 208 [0xd0])) [3 state_534(D)->t64+8 S8 A64])) blake_ref.c:168 89 {*movdi_internal}
     (nil))
(insn 117 116 118 3 (set (reg:DI 374)
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:168 89 {*movdi_internal}
     (nil))
(insn 118 117 119 3 (parallel [
            (set (reg:DI 260 [ v$14 ])
                (xor:DI (reg:DI 133 [ D.5863 ])
                    (reg:DI 374)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:168 402 {*xordi_1}
     (nil))
(insn 119 118 120 3 (set (reg:DI 375)
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:169 89 {*movdi_internal}
     (nil))
(insn 120 119 406 3 (parallel [
            (set (reg:DI 210 [ v$15 ])
                (xor:DI (reg:DI 133 [ D.5863 ])
                    (reg:DI 375)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:169 402 {*xordi_1}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)

;; basic block 4, loop depth 0, count 0, freq 294, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2 [50.0%] 
(code_label 406 120 405 4 12 "" [1 uses])
(note 405 406 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 405 10 4 (set (reg:DI 210 [ v$15 ])
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:163 89 {*movdi_internal}
     (nil))
(insn 10 9 11 4 (set (reg:DI 260 [ v$14 ])
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:162 89 {*movdi_internal}
     (nil))
(insn 11 10 12 4 (set (reg:DI 243 [ v$13 ])
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:161 89 {*movdi_internal}
     (nil))
(insn 12 11 121 4 (set (reg:DI 227 [ v$12 ])
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 590, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              3 [100.0%]  (FALLTHRU)
(code_label 121 12 122 5 9 "" [0 uses])
(note 122 121 123 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 13 5 (set (reg:DI 269 [ ivtmp.149 ])
        (symbol_ref:DI ("sigma") [flags 0x2]  <var_decl 0x6ffffe12e20 sigma>)) 89 {*movdi_internal}
     (nil))
(insn 13 123 14 5 (set (reg:DI 208 [ v$0 ])
        (reg:DI 119 [ v$0 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 14 13 15 5 (set (reg:DI 225 [ v$1 ])
        (reg:DI 120 [ v$1 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 15 14 16 5 (set (reg:DI 241 [ v$2 ])
        (reg:DI 121 [ v$2 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 16 15 17 5 (set (reg:DI 258 [ v$3 ])
        (reg:DI 122 [ v$3 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 17 16 18 5 (set (reg:DI 264 [ v$4 ])
        (reg:DI 123 [ v$4 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 18 17 19 5 (set (reg:DI 214 [ v$5 ])
        (reg:DI 124 [ v$5 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 19 18 20 5 (set (reg:DI 230 [ v$6 ])
        (reg:DI 125 [ v$6 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 20 19 21 5 (set (reg:DI 246 [ v$7 ])
        (reg:DI 126 [ v$7 ])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 21 20 22 5 (set (reg:SI 100 [ D.5861 ])
        (const_int 16 [0x10])) blake_ref.c:160 90 {*movsi_internal}
     (nil))
(insn 22 21 23 5 (set (reg:DI 348 [ D.5868 ])
        (const_int 577009281997405206 [0x801f2e2858efc16])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 23 22 24 5 (set (reg:DI 346 [ D.5868 ])
        (const_int 7163292796296056425 [0x636920d871574e69])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 24 23 25 5 (set (reg:DI 340 [ D.5868 ])
        (const_int -5008970055469465703 [0xba7c9045f12c7f99])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 25 24 26 5 (set (reg:DI 338 [ D.5868 ])
        (const_int 2639559389850201335 [0x24a19947b3916cf7])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 26 25 27 5 (set (reg:DI 332 [ D.5868 ])
        (const_int 3458046377305235383 [0x2ffd72dbd01adfb7])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 27 26 28 5 (set (reg:DI 330 [ D.5868 ])
        (const_int -5124621466747896170 [0xb8e1afed6a267e96])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:DI 324 [ D.5868 ])
        (const_int -7919907764393346277 [0x9216d5d98979fb1b])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:DI 322 [ D.5868 ])
        (const_int -3372901835766516308 [0xd1310ba698dfb5ac])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:DI 316 [ D.5868 ])
        (const_int -4563226453097033507 [0xc0ac29b7c97c50dd])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:DI 314 [ D.5868 ])
        (const_int 4577018097722394903 [0x3f84d5b5b5470917])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:DI 308 [ D.5868 ])
        (const_int 4983270260364809079 [0x452821e638d01377])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 306 [ D.5868 ])
        (const_int -4732044268327596948 [0xbe5466cf34e90c6c])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:DI 300 [ D.5868 ])
        (const_int -6626703657320631856 [0xa4093822299f31d0])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:DI 298 [ D.5868 ])
        (const_int 589684135938649225 [0x82efa98ec4e6c89])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:DI 292 [ D.5868 ])
        (const_int 2611923443488327891 [0x243f6a8885a308d3])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
(insn 37 36 355 5 (set (reg:DI 290 [ D.5868 ])
        (const_int 1376283091369227076 [0x13198a2e03707344])) blake_ref.c:160 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 1, count 0, freq 9412, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       7 [100.0%]  (FALLTHRU)
;;              5 [100.0%]  (FALLTHRU)
(code_label 355 37 124 6 11 "" [0 uses])
(note 124 355 125 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 6 (parallel [
            (set (reg:DI 376 [ D.5863 ])
                (xor:DI (reg:DI 287 [ D.5867 ])
                    (reg:DI 290 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (nil))
(insn 126 125 127 6 (parallel [
            (set (reg:DI 377 [ D.5863 ])
                (plus:DI (reg:DI 376 [ D.5863 ])
                    (reg:DI 264 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (nil))
(insn 127 126 128 6 (parallel [
            (set (reg:DI 135 [ D.5863 ])
                (plus:DI (reg:DI 377 [ D.5863 ])
                    (reg:DI 208 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (nil))
(insn 128 127 129 6 (parallel [
            (set (reg:DI 378 [ D.5863 ])
                (xor:DI (reg:DI 135 [ D.5863 ])
                    (reg:DI 227 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (nil))
(insn 129 128 130 6 (parallel [
            (set (reg:DI 137 [ D.5863 ])
                (rotate:DI (reg:DI 378 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 588 {*rotldi3_1}
     (nil))
(insn 130 129 131 6 (parallel [
            (set (reg:DI 138 [ D.5863 ])
                (plus:DI (reg:DI 137 [ D.5863 ])
                    (reg:DI 244 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (nil))
(insn 131 130 132 6 (parallel [
            (set (reg:DI 379 [ D.5863 ])
                (xor:DI (reg:DI 138 [ D.5863 ])
                    (reg:DI 264 [ v$4 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (nil))
(insn 132 131 133 6 (parallel [
            (set (reg:DI 140 [ D.5863 ])
                (rotatert:DI (reg:DI 379 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 589 {*rotrdi3_1}
     (nil))
(insn 133 132 134 6 (parallel [
            (set (reg:DI 380 [ D.5863 ])
                (xor:DI (reg:DI 291 [ D.5867 ])
                    (reg:DI 292 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (nil))
(insn 134 133 135 6 (parallel [
            (set (reg:DI 381 [ D.5863 ])
                (plus:DI (reg:DI 380 [ D.5863 ])
                    (reg:DI 135 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (nil))
(insn 135 134 136 6 (parallel [
            (set (reg:DI 143 [ D.5863 ])
                (plus:DI (reg:DI 381 [ D.5863 ])
                    (reg:DI 140 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (nil))
(insn 136 135 137 6 (parallel [
            (set (reg:DI 382 [ D.5863 ])
                (xor:DI (reg:DI 137 [ D.5863 ])
                    (reg:DI 143 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (nil))
(insn 137 136 138 6 (parallel [
            (set (reg:DI 145 [ D.5863 ])
                (rotatert:DI (reg:DI 382 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 589 {*rotrdi3_1}
     (nil))
(insn 138 137 139 6 (parallel [
            (set (reg:DI 146 [ D.5863 ])
                (plus:DI (reg:DI 138 [ D.5863 ])
                    (reg:DI 145 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 218 {*adddi_1}
     (nil))
(insn 139 138 140 6 (parallel [
            (set (reg:DI 383 [ D.5863 ])
                (xor:DI (reg:DI 140 [ D.5863 ])
                    (reg:DI 146 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 402 {*xordi_1}
     (nil))
(insn 140 139 141 6 (parallel [
            (set (reg:DI 148 [ D.5863 ])
                (rotatert:DI (reg:DI 383 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:176 589 {*rotrdi3_1}
     (nil))
(insn 141 140 142 6 (parallel [
            (set (reg:DI 384 [ D.5863 ])
                (xor:DI (reg:DI 295 [ D.5867 ])
                    (reg:DI 298 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (nil))
(insn 142 141 143 6 (parallel [
            (set (reg:DI 385 [ D.5863 ])
                (plus:DI (reg:DI 384 [ D.5863 ])
                    (reg:DI 214 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (nil))
(insn 143 142 144 6 (parallel [
            (set (reg:DI 151 [ D.5863 ])
                (plus:DI (reg:DI 385 [ D.5863 ])
                    (reg:DI 225 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (nil))
(insn 144 143 145 6 (parallel [
            (set (reg:DI 386 [ D.5863 ])
                (xor:DI (reg:DI 151 [ D.5863 ])
                    (reg:DI 243 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (nil))
(insn 145 144 146 6 (parallel [
            (set (reg:DI 153 [ D.5863 ])
                (rotate:DI (reg:DI 386 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 588 {*rotldi3_1}
     (nil))
(insn 146 145 147 6 (parallel [
            (set (reg:DI 154 [ D.5863 ])
                (plus:DI (reg:DI 153 [ D.5863 ])
                    (reg:DI 262 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (nil))
(insn 147 146 148 6 (parallel [
            (set (reg:DI 387 [ D.5863 ])
                (xor:DI (reg:DI 154 [ D.5863 ])
                    (reg:DI 214 [ v$5 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (nil))
(insn 148 147 149 6 (parallel [
            (set (reg:DI 156 [ D.5863 ])
                (rotatert:DI (reg:DI 387 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 589 {*rotrdi3_1}
     (nil))
(insn 149 148 150 6 (parallel [
            (set (reg:DI 388 [ D.5863 ])
                (xor:DI (reg:DI 299 [ D.5867 ])
                    (reg:DI 300 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (nil))
(insn 150 149 151 6 (parallel [
            (set (reg:DI 389 [ D.5863 ])
                (plus:DI (reg:DI 388 [ D.5863 ])
                    (reg:DI 151 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (nil))
(insn 151 150 152 6 (parallel [
            (set (reg:DI 159 [ D.5863 ])
                (plus:DI (reg:DI 389 [ D.5863 ])
                    (reg:DI 156 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (nil))
(insn 152 151 153 6 (parallel [
            (set (reg:DI 390 [ D.5863 ])
                (xor:DI (reg:DI 153 [ D.5863 ])
                    (reg:DI 159 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (nil))
(insn 153 152 154 6 (parallel [
            (set (reg:DI 161 [ D.5863 ])
                (rotatert:DI (reg:DI 390 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 589 {*rotrdi3_1}
     (nil))
(insn 154 153 155 6 (parallel [
            (set (reg:DI 162 [ D.5863 ])
                (plus:DI (reg:DI 154 [ D.5863 ])
                    (reg:DI 161 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 218 {*adddi_1}
     (nil))
(insn 155 154 156 6 (parallel [
            (set (reg:DI 391 [ D.5863 ])
                (xor:DI (reg:DI 156 [ D.5863 ])
                    (reg:DI 162 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 402 {*xordi_1}
     (nil))
(insn 156 155 157 6 (parallel [
            (set (reg:DI 164 [ D.5863 ])
                (rotatert:DI (reg:DI 391 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:177 589 {*rotrdi3_1}
     (nil))
(insn 157 156 158 6 (parallel [
            (set (reg:DI 392 [ D.5863 ])
                (xor:DI (reg:DI 303 [ D.5867 ])
                    (reg:DI 306 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (nil))
(insn 158 157 159 6 (parallel [
            (set (reg:DI 393 [ D.5863 ])
                (plus:DI (reg:DI 392 [ D.5863 ])
                    (reg:DI 230 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (nil))
(insn 159 158 160 6 (parallel [
            (set (reg:DI 167 [ D.5863 ])
                (plus:DI (reg:DI 393 [ D.5863 ])
                    (reg:DI 241 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (nil))
(insn 160 159 161 6 (parallel [
            (set (reg:DI 394 [ D.5863 ])
                (xor:DI (reg:DI 167 [ D.5863 ])
                    (reg:DI 260 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (nil))
(insn 161 160 162 6 (parallel [
            (set (reg:DI 169 [ D.5863 ])
                (rotate:DI (reg:DI 394 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 588 {*rotldi3_1}
     (nil))
(insn 162 161 163 6 (parallel [
            (set (reg:DI 170 [ D.5863 ])
                (plus:DI (reg:DI 169 [ D.5863 ])
                    (reg:DI 211 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (nil))
(insn 163 162 164 6 (parallel [
            (set (reg:DI 395 [ D.5863 ])
                (xor:DI (reg:DI 170 [ D.5863 ])
                    (reg:DI 230 [ v$6 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (nil))
(insn 164 163 165 6 (parallel [
            (set (reg:DI 172 [ D.5863 ])
                (rotatert:DI (reg:DI 395 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 589 {*rotrdi3_1}
     (nil))
(insn 165 164 166 6 (parallel [
            (set (reg:DI 396 [ D.5863 ])
                (xor:DI (reg:DI 307 [ D.5867 ])
                    (reg:DI 308 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (nil))
(insn 166 165 167 6 (parallel [
            (set (reg:DI 397 [ D.5863 ])
                (plus:DI (reg:DI 396 [ D.5863 ])
                    (reg:DI 167 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (nil))
(insn 167 166 168 6 (parallel [
            (set (reg:DI 175 [ D.5863 ])
                (plus:DI (reg:DI 397 [ D.5863 ])
                    (reg:DI 172 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (nil))
(insn 168 167 169 6 (parallel [
            (set (reg:DI 398 [ D.5863 ])
                (xor:DI (reg:DI 169 [ D.5863 ])
                    (reg:DI 175 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (nil))
(insn 169 168 170 6 (parallel [
            (set (reg:DI 177 [ D.5863 ])
                (rotatert:DI (reg:DI 398 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 589 {*rotrdi3_1}
     (nil))
(insn 170 169 171 6 (parallel [
            (set (reg:DI 178 [ D.5863 ])
                (plus:DI (reg:DI 170 [ D.5863 ])
                    (reg:DI 177 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 218 {*adddi_1}
     (nil))
(insn 171 170 172 6 (parallel [
            (set (reg:DI 399 [ D.5863 ])
                (xor:DI (reg:DI 172 [ D.5863 ])
                    (reg:DI 178 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 402 {*xordi_1}
     (nil))
(insn 172 171 173 6 (parallel [
            (set (reg:DI 180 [ D.5863 ])
                (rotatert:DI (reg:DI 399 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:178 589 {*rotrdi3_1}
     (nil))
(insn 173 172 174 6 (parallel [
            (set (reg:DI 400 [ D.5863 ])
                (xor:DI (reg:DI 311 [ D.5867 ])
                    (reg:DI 314 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (nil))
(insn 174 173 175 6 (parallel [
            (set (reg:DI 401 [ D.5863 ])
                (plus:DI (reg:DI 400 [ D.5863 ])
                    (reg:DI 246 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (nil))
(insn 175 174 176 6 (parallel [
            (set (reg:DI 183 [ D.5863 ])
                (plus:DI (reg:DI 401 [ D.5863 ])
                    (reg:DI 258 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (nil))
(insn 176 175 177 6 (parallel [
            (set (reg:DI 402 [ D.5863 ])
                (xor:DI (reg:DI 183 [ D.5863 ])
                    (reg:DI 210 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (nil))
(insn 177 176 178 6 (parallel [
            (set (reg:DI 185 [ D.5863 ])
                (rotate:DI (reg:DI 402 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 588 {*rotldi3_1}
     (nil))
(insn 178 177 179 6 (parallel [
            (set (reg:DI 186 [ D.5863 ])
                (plus:DI (reg:DI 185 [ D.5863 ])
                    (reg:DI 197 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (nil))
(insn 179 178 180 6 (parallel [
            (set (reg:DI 403 [ D.5863 ])
                (xor:DI (reg:DI 186 [ D.5863 ])
                    (reg:DI 246 [ v$7 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (nil))
(insn 180 179 181 6 (parallel [
            (set (reg:DI 188 [ D.5863 ])
                (rotatert:DI (reg:DI 403 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 589 {*rotrdi3_1}
     (nil))
(insn 181 180 182 6 (parallel [
            (set (reg:DI 404 [ D.5863 ])
                (xor:DI (reg:DI 315 [ D.5867 ])
                    (reg:DI 316 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (nil))
(insn 182 181 183 6 (parallel [
            (set (reg:DI 405 [ D.5863 ])
                (plus:DI (reg:DI 404 [ D.5863 ])
                    (reg:DI 183 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (nil))
(insn 183 182 184 6 (parallel [
            (set (reg:DI 191 [ D.5863 ])
                (plus:DI (reg:DI 405 [ D.5863 ])
                    (reg:DI 188 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (nil))
(insn 184 183 185 6 (parallel [
            (set (reg:DI 406 [ D.5863 ])
                (xor:DI (reg:DI 185 [ D.5863 ])
                    (reg:DI 191 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (nil))
(insn 185 184 186 6 (parallel [
            (set (reg:DI 193 [ D.5863 ])
                (rotatert:DI (reg:DI 406 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 589 {*rotrdi3_1}
     (nil))
(insn 186 185 187 6 (parallel [
            (set (reg:DI 194 [ D.5863 ])
                (plus:DI (reg:DI 186 [ D.5863 ])
                    (reg:DI 193 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 218 {*adddi_1}
     (nil))
(insn 187 186 188 6 (parallel [
            (set (reg:DI 407 [ D.5863 ])
                (xor:DI (reg:DI 188 [ D.5863 ])
                    (reg:DI 194 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 402 {*xordi_1}
     (nil))
(insn 188 187 189 6 (parallel [
            (set (reg:DI 196 [ D.5863 ])
                (rotatert:DI (reg:DI 407 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:179 589 {*rotrdi3_1}
     (nil))
(insn 189 188 190 6 (parallel [
            (set (reg:DI 408 [ D.5863 ])
                (xor:DI (reg:DI 319 [ D.5867 ])
                    (reg:DI 322 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (nil))
(insn 190 189 191 6 (parallel [
            (set (reg:DI 409 [ D.5863 ])
                (plus:DI (reg:DI 408 [ D.5863 ])
                    (reg:DI 143 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (nil))
(insn 191 190 192 6 (parallel [
            (set (reg:DI 200 [ D.5863 ])
                (plus:DI (reg:DI 409 [ D.5863 ])
                    (reg:DI 164 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (nil))
(insn 192 191 193 6 (parallel [
            (set (reg:DI 410 [ D.5863 ])
                (xor:DI (reg:DI 193 [ D.5863 ])
                    (reg:DI 200 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (nil))
(insn 193 192 194 6 (parallel [
            (set (reg:DI 202 [ D.5863 ])
                (rotate:DI (reg:DI 410 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 588 {*rotldi3_1}
     (nil))
(insn 194 193 195 6 (parallel [
            (set (reg:DI 203 [ D.5863 ])
                (plus:DI (reg:DI 178 [ D.5863 ])
                    (reg:DI 202 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (nil))
(insn 195 194 196 6 (parallel [
            (set (reg:DI 411 [ D.5863 ])
                (xor:DI (reg:DI 164 [ D.5863 ])
                    (reg:DI 203 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (nil))
(insn 196 195 197 6 (parallel [
            (set (reg:DI 205 [ D.5863 ])
                (rotatert:DI (reg:DI 411 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 589 {*rotrdi3_1}
     (nil))
(insn 197 196 198 6 (parallel [
            (set (reg:DI 412 [ D.5863 ])
                (xor:DI (reg:DI 323 [ D.5867 ])
                    (reg:DI 324 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (nil))
(insn 198 197 199 6 (parallel [
            (set (reg:DI 413 [ D.5863 ])
                (plus:DI (reg:DI 412 [ D.5863 ])
                    (reg:DI 200 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (nil))
(insn 199 198 200 6 (parallel [
            (set (reg:DI 208 [ v$0 ])
                (plus:DI (reg:DI 413 [ D.5863 ])
                    (reg:DI 205 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (nil))
(insn 200 199 201 6 (parallel [
            (set (reg:DI 414 [ D.5863 ])
                (xor:DI (reg:DI 202 [ D.5863 ])
                    (reg:DI 208 [ v$0 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (nil))
(insn 201 200 202 6 (parallel [
            (set (reg:DI 210 [ v$15 ])
                (rotatert:DI (reg:DI 414 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 589 {*rotrdi3_1}
     (nil))
(insn 202 201 203 6 (parallel [
            (set (reg:DI 211 [ v$10 ])
                (plus:DI (reg:DI 203 [ D.5863 ])
                    (reg:DI 210 [ v$15 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 218 {*adddi_1}
     (nil))
(insn 203 202 204 6 (parallel [
            (set (reg:DI 415 [ D.5863 ])
                (xor:DI (reg:DI 205 [ D.5863 ])
                    (reg:DI 211 [ v$10 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 402 {*xordi_1}
     (nil))
(insn 204 203 205 6 (parallel [
            (set (reg:DI 214 [ v$5 ])
                (rotatert:DI (reg:DI 415 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:181 589 {*rotrdi3_1}
     (nil))
(insn 205 204 206 6 (parallel [
            (set (reg:DI 416 [ D.5863 ])
                (xor:DI (reg:DI 327 [ D.5867 ])
                    (reg:DI 330 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (nil))
(insn 206 205 207 6 (parallel [
            (set (reg:DI 417 [ D.5863 ])
                (plus:DI (reg:DI 416 [ D.5863 ])
                    (reg:DI 159 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (nil))
(insn 207 206 208 6 (parallel [
            (set (reg:DI 217 [ D.5863 ])
                (plus:DI (reg:DI 417 [ D.5863 ])
                    (reg:DI 180 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (nil))
(insn 208 207 209 6 (parallel [
            (set (reg:DI 418 [ D.5863 ])
                (xor:DI (reg:DI 145 [ D.5863 ])
                    (reg:DI 217 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (nil))
(insn 209 208 210 6 (parallel [
            (set (reg:DI 219 [ D.5863 ])
                (rotate:DI (reg:DI 418 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 588 {*rotldi3_1}
     (nil))
(insn 210 209 211 6 (parallel [
            (set (reg:DI 220 [ D.5863 ])
                (plus:DI (reg:DI 194 [ D.5863 ])
                    (reg:DI 219 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (nil))
(insn 211 210 212 6 (parallel [
            (set (reg:DI 419 [ D.5863 ])
                (xor:DI (reg:DI 180 [ D.5863 ])
                    (reg:DI 220 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (nil))
(insn 212 211 213 6 (parallel [
            (set (reg:DI 222 [ D.5863 ])
                (rotatert:DI (reg:DI 419 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 589 {*rotrdi3_1}
     (nil))
(insn 213 212 214 6 (parallel [
            (set (reg:DI 420 [ D.5863 ])
                (xor:DI (reg:DI 331 [ D.5867 ])
                    (reg:DI 332 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (nil))
(insn 214 213 215 6 (parallel [
            (set (reg:DI 421 [ D.5863 ])
                (plus:DI (reg:DI 420 [ D.5863 ])
                    (reg:DI 217 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (nil))
(insn 215 214 216 6 (parallel [
            (set (reg:DI 225 [ v$1 ])
                (plus:DI (reg:DI 421 [ D.5863 ])
                    (reg:DI 222 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (nil))
(insn 216 215 217 6 (parallel [
            (set (reg:DI 422 [ D.5863 ])
                (xor:DI (reg:DI 219 [ D.5863 ])
                    (reg:DI 225 [ v$1 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (nil))
(insn 217 216 218 6 (parallel [
            (set (reg:DI 227 [ v$12 ])
                (rotatert:DI (reg:DI 422 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 589 {*rotrdi3_1}
     (nil))
(insn 218 217 219 6 (parallel [
            (set (reg:DI 197 [ v$11 ])
                (plus:DI (reg:DI 220 [ D.5863 ])
                    (reg:DI 227 [ v$12 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 218 {*adddi_1}
     (nil))
(insn 219 218 220 6 (parallel [
            (set (reg:DI 423 [ D.5863 ])
                (xor:DI (reg:DI 222 [ D.5863 ])
                    (reg:DI 197 [ v$11 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 402 {*xordi_1}
     (nil))
(insn 220 219 221 6 (parallel [
            (set (reg:DI 230 [ v$6 ])
                (rotatert:DI (reg:DI 423 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:182 589 {*rotrdi3_1}
     (nil))
(insn 221 220 222 6 (parallel [
            (set (reg:DI 424 [ D.5863 ])
                (xor:DI (reg:DI 335 [ D.5867 ])
                    (reg:DI 338 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (nil))
(insn 222 221 223 6 (parallel [
            (set (reg:DI 425 [ D.5863 ])
                (plus:DI (reg:DI 424 [ D.5863 ])
                    (reg:DI 175 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (nil))
(insn 223 222 224 6 (parallel [
            (set (reg:DI 233 [ D.5863 ])
                (plus:DI (reg:DI 425 [ D.5863 ])
                    (reg:DI 196 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (nil))
(insn 224 223 225 6 (parallel [
            (set (reg:DI 426 [ D.5863 ])
                (xor:DI (reg:DI 161 [ D.5863 ])
                    (reg:DI 233 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (nil))
(insn 225 224 226 6 (parallel [
            (set (reg:DI 235 [ D.5863 ])
                (rotate:DI (reg:DI 426 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 588 {*rotldi3_1}
     (nil))
(insn 226 225 227 6 (parallel [
            (set (reg:DI 236 [ D.5863 ])
                (plus:DI (reg:DI 146 [ D.5863 ])
                    (reg:DI 235 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (nil))
(insn 227 226 228 6 (parallel [
            (set (reg:DI 427 [ D.5863 ])
                (xor:DI (reg:DI 196 [ D.5863 ])
                    (reg:DI 236 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (nil))
(insn 228 227 229 6 (parallel [
            (set (reg:DI 238 [ D.5863 ])
                (rotatert:DI (reg:DI 427 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 589 {*rotrdi3_1}
     (nil))
(insn 229 228 230 6 (parallel [
            (set (reg:DI 428 [ D.5863 ])
                (xor:DI (reg:DI 339 [ D.5867 ])
                    (reg:DI 340 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (nil))
(insn 230 229 231 6 (parallel [
            (set (reg:DI 429 [ D.5863 ])
                (plus:DI (reg:DI 428 [ D.5863 ])
                    (reg:DI 233 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (nil))
(insn 231 230 232 6 (parallel [
            (set (reg:DI 241 [ v$2 ])
                (plus:DI (reg:DI 429 [ D.5863 ])
                    (reg:DI 238 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (nil))
(insn 232 231 233 6 (parallel [
            (set (reg:DI 430 [ D.5863 ])
                (xor:DI (reg:DI 235 [ D.5863 ])
                    (reg:DI 241 [ v$2 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (nil))
(insn 233 232 234 6 (parallel [
            (set (reg:DI 243 [ v$13 ])
                (rotatert:DI (reg:DI 430 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 589 {*rotrdi3_1}
     (nil))
(insn 234 233 235 6 (parallel [
            (set (reg:DI 244 [ v$8 ])
                (plus:DI (reg:DI 236 [ D.5863 ])
                    (reg:DI 243 [ v$13 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 218 {*adddi_1}
     (nil))
(insn 235 234 236 6 (parallel [
            (set (reg:DI 431 [ D.5863 ])
                (xor:DI (reg:DI 238 [ D.5863 ])
                    (reg:DI 244 [ v$8 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 402 {*xordi_1}
     (nil))
(insn 236 235 237 6 (parallel [
            (set (reg:DI 246 [ v$7 ])
                (rotatert:DI (reg:DI 431 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:183 589 {*rotrdi3_1}
     (nil))
(insn 237 236 238 6 (parallel [
            (set (reg:DI 432 [ D.5863 ])
                (xor:DI (reg:DI 343 [ D.5867 ])
                    (reg:DI 346 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (nil))
(insn 238 237 239 6 (parallel [
            (set (reg:DI 433 [ D.5863 ])
                (plus:DI (reg:DI 432 [ D.5863 ])
                    (reg:DI 191 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (nil))
(insn 239 238 240 6 (parallel [
            (set (reg:DI 250 [ D.5863 ])
                (plus:DI (reg:DI 433 [ D.5863 ])
                    (reg:DI 148 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (nil))
(insn 240 239 241 6 (parallel [
            (set (reg:DI 434 [ D.5863 ])
                (xor:DI (reg:DI 177 [ D.5863 ])
                    (reg:DI 250 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (nil))
(insn 241 240 242 6 (parallel [
            (set (reg:DI 252 [ D.5863 ])
                (rotate:DI (reg:DI 434 [ D.5863 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 588 {*rotldi3_1}
     (nil))
(insn 242 241 243 6 (parallel [
            (set (reg:DI 253 [ D.5863 ])
                (plus:DI (reg:DI 162 [ D.5863 ])
                    (reg:DI 252 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (nil))
(insn 243 242 244 6 (parallel [
            (set (reg:DI 435 [ D.5863 ])
                (xor:DI (reg:DI 148 [ D.5863 ])
                    (reg:DI 253 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (nil))
(insn 244 243 245 6 (parallel [
            (set (reg:DI 255 [ D.5863 ])
                (rotatert:DI (reg:DI 435 [ D.5863 ])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 589 {*rotrdi3_1}
     (nil))
(insn 245 244 246 6 (parallel [
            (set (reg:DI 436 [ D.5863 ])
                (xor:DI (reg:DI 347 [ D.5867 ])
                    (reg:DI 348 [ D.5868 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (nil))
(insn 246 245 247 6 (parallel [
            (set (reg:DI 437 [ D.5863 ])
                (plus:DI (reg:DI 436 [ D.5863 ])
                    (reg:DI 250 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (nil))
(insn 247 246 248 6 (parallel [
            (set (reg:DI 258 [ v$3 ])
                (plus:DI (reg:DI 437 [ D.5863 ])
                    (reg:DI 255 [ D.5863 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (nil))
(insn 248 247 249 6 (parallel [
            (set (reg:DI 438 [ D.5863 ])
                (xor:DI (reg:DI 252 [ D.5863 ])
                    (reg:DI 258 [ v$3 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (nil))
(insn 249 248 250 6 (parallel [
            (set (reg:DI 260 [ v$14 ])
                (rotatert:DI (reg:DI 438 [ D.5863 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 589 {*rotrdi3_1}
     (nil))
(insn 250 249 251 6 (parallel [
            (set (reg:DI 262 [ v$9 ])
                (plus:DI (reg:DI 253 [ D.5863 ])
                    (reg:DI 260 [ v$14 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 218 {*adddi_1}
     (nil))
(insn 251 250 252 6 (parallel [
            (set (reg:DI 439 [ D.5863 ])
                (xor:DI (reg:DI 255 [ D.5863 ])
                    (reg:DI 262 [ v$9 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 402 {*xordi_1}
     (nil))
(insn 252 251 253 6 (parallel [
            (set (reg:DI 264 [ v$4 ])
                (rotatert:DI (reg:DI 439 [ D.5863 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:184 589 {*rotrdi3_1}
     (nil))
(insn 253 252 254 6 (parallel [
            (set (reg:SI 100 [ D.5861 ])
                (plus:SI (reg:SI 100 [ D.5861 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 217 {*addsi_1}
     (nil))
(insn 254 253 255 6 (parallel [
            (set (reg:DI 269 [ ivtmp.149 ])
                (plus:DI (reg:DI 269 [ ivtmp.149 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 255 254 256 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ D.5861 ])
            (const_int 0 [0]))) blake_ref.c:173 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 256 255 257 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 358)
            (pc))) blake_ref.c:173 612 {*jcc_1}
     (int_list:REG_BR_PROB 588 (nil))
 -> 358)
;;  succ:       7 [94.1%]  (FALLTHRU)
;;              8 [5.9%] 

;; basic block 7, loop depth 1, count 0, freq 8859, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [94.1%]  (FALLTHRU)
(note 257 256 258 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 258 257 259 7 (set (reg/f:DI 268 [ D.5865 ])
        (reg:DI 269 [ ivtmp.149 ])) 89 {*movdi_internal}
     (nil))
(insn 259 258 260 7 (set (reg:SI 286 [ D.5864 ])
        (zero_extend:SI (mem:QI (reg/f:DI 268 [ D.5865 ]) [0 MEM[base: _802, offset: 0B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 260 259 261 7 (set (reg:DI 440)
        (sign_extend:DI (reg:SI 286 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 261 260 262 7 (set (reg:DI 287 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 440)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 262 261 263 7 (set (reg:SI 289 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 1 [0x1])) [0 MEM[base: _802, offset: 1B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 263 262 264 7 (set (reg/f:DI 441)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 264 263 265 7 (set (reg:DI 442)
        (sign_extend:DI (reg:SI 289 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 265 264 266 7 (set (reg:DI 290 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 442)
                    (const_int 8 [0x8]))
                (reg/f:DI 441)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 266 265 267 7 (set (reg:DI 443)
        (sign_extend:DI (reg:SI 289 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 267 266 268 7 (set (reg:DI 291 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 443)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 268 267 269 7 (set (reg/f:DI 444)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 269 268 270 7 (set (reg:DI 445)
        (sign_extend:DI (reg:SI 286 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 270 269 271 7 (set (reg:DI 292 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 445)
                    (const_int 8 [0x8]))
                (reg/f:DI 444)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 271 270 272 7 (set (reg:SI 294 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 2 [0x2])) [0 MEM[base: _802, offset: 2B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 272 271 273 7 (set (reg:DI 446)
        (sign_extend:DI (reg:SI 294 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 273 272 274 7 (set (reg:DI 295 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 446)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 274 273 275 7 (set (reg:SI 297 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 3 [0x3])) [0 MEM[base: _802, offset: 3B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 275 274 276 7 (set (reg/f:DI 447)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 276 275 277 7 (set (reg:DI 448)
        (sign_extend:DI (reg:SI 297 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 277 276 278 7 (set (reg:DI 298 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 448)
                    (const_int 8 [0x8]))
                (reg/f:DI 447)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 278 277 279 7 (set (reg:DI 449)
        (sign_extend:DI (reg:SI 297 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 279 278 280 7 (set (reg:DI 299 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 449)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 280 279 281 7 (set (reg/f:DI 450)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 281 280 282 7 (set (reg:DI 451)
        (sign_extend:DI (reg:SI 294 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 282 281 283 7 (set (reg:DI 300 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 451)
                    (const_int 8 [0x8]))
                (reg/f:DI 450)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 283 282 284 7 (set (reg:SI 302 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 4 [0x4])) [0 MEM[base: _802, offset: 4B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 284 283 285 7 (set (reg:DI 452)
        (sign_extend:DI (reg:SI 302 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 285 284 286 7 (set (reg:DI 303 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 452)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 286 285 287 7 (set (reg:SI 305 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 5 [0x5])) [0 MEM[base: _802, offset: 5B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 287 286 288 7 (set (reg/f:DI 453)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 288 287 289 7 (set (reg:DI 454)
        (sign_extend:DI (reg:SI 305 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 289 288 290 7 (set (reg:DI 306 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 454)
                    (const_int 8 [0x8]))
                (reg/f:DI 453)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 290 289 291 7 (set (reg:DI 455)
        (sign_extend:DI (reg:SI 305 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 291 290 292 7 (set (reg:DI 307 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 455)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 292 291 293 7 (set (reg/f:DI 456)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 293 292 294 7 (set (reg:DI 457)
        (sign_extend:DI (reg:SI 302 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 294 293 295 7 (set (reg:DI 308 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 457)
                    (const_int 8 [0x8]))
                (reg/f:DI 456)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 295 294 296 7 (set (reg:SI 310 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 6 [0x6])) [0 MEM[base: _802, offset: 6B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 296 295 297 7 (set (reg:DI 458)
        (sign_extend:DI (reg:SI 310 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 297 296 298 7 (set (reg:DI 311 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 458)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 298 297 299 7 (set (reg:SI 313 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 7 [0x7])) [0 MEM[base: _802, offset: 7B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 299 298 300 7 (set (reg/f:DI 459)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 300 299 301 7 (set (reg:DI 460)
        (sign_extend:DI (reg:SI 313 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 301 300 302 7 (set (reg:DI 314 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 460)
                    (const_int 8 [0x8]))
                (reg/f:DI 459)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 302 301 303 7 (set (reg:DI 461)
        (sign_extend:DI (reg:SI 313 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 303 302 304 7 (set (reg:DI 315 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 461)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 304 303 305 7 (set (reg/f:DI 462)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 305 304 306 7 (set (reg:DI 463)
        (sign_extend:DI (reg:SI 310 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 306 305 307 7 (set (reg:DI 316 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 463)
                    (const_int 8 [0x8]))
                (reg/f:DI 462)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 307 306 308 7 (set (reg:SI 318 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 8 [0x8])) [0 MEM[base: _802, offset: 8B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 308 307 309 7 (set (reg:DI 464)
        (sign_extend:DI (reg:SI 318 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 309 308 310 7 (set (reg:DI 319 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 464)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 310 309 311 7 (set (reg:SI 321 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 9 [0x9])) [0 MEM[base: _802, offset: 9B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 311 310 312 7 (set (reg/f:DI 465)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 312 311 313 7 (set (reg:DI 466)
        (sign_extend:DI (reg:SI 321 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 313 312 314 7 (set (reg:DI 322 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 466)
                    (const_int 8 [0x8]))
                (reg/f:DI 465)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 314 313 315 7 (set (reg:DI 467)
        (sign_extend:DI (reg:SI 321 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 315 314 316 7 (set (reg:DI 323 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 467)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 316 315 317 7 (set (reg/f:DI 468)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 317 316 318 7 (set (reg:DI 469)
        (sign_extend:DI (reg:SI 318 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 318 317 319 7 (set (reg:DI 324 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 469)
                    (const_int 8 [0x8]))
                (reg/f:DI 468)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 319 318 320 7 (set (reg:SI 326 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 10 [0xa])) [0 MEM[base: _802, offset: 10B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 320 319 321 7 (set (reg:DI 470)
        (sign_extend:DI (reg:SI 326 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 321 320 322 7 (set (reg:DI 327 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 470)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 322 321 323 7 (set (reg:SI 329 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 11 [0xb])) [0 MEM[base: _802, offset: 11B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 323 322 324 7 (set (reg/f:DI 471)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 324 323 325 7 (set (reg:DI 472)
        (sign_extend:DI (reg:SI 329 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 325 324 326 7 (set (reg:DI 330 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 472)
                    (const_int 8 [0x8]))
                (reg/f:DI 471)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 326 325 327 7 (set (reg:DI 473)
        (sign_extend:DI (reg:SI 329 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 327 326 328 7 (set (reg:DI 331 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 473)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 328 327 329 7 (set (reg/f:DI 474)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 329 328 330 7 (set (reg:DI 475)
        (sign_extend:DI (reg:SI 326 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 330 329 331 7 (set (reg:DI 332 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 475)
                    (const_int 8 [0x8]))
                (reg/f:DI 474)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 331 330 332 7 (set (reg:SI 334 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 12 [0xc])) [0 MEM[base: _802, offset: 12B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 332 331 333 7 (set (reg:DI 476)
        (sign_extend:DI (reg:SI 334 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 333 332 334 7 (set (reg:DI 335 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 476)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 334 333 335 7 (set (reg:SI 337 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 13 [0xd])) [0 MEM[base: _802, offset: 13B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 335 334 336 7 (set (reg/f:DI 477)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 336 335 337 7 (set (reg:DI 478)
        (sign_extend:DI (reg:SI 337 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 337 336 338 7 (set (reg:DI 338 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 478)
                    (const_int 8 [0x8]))
                (reg/f:DI 477)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 338 337 339 7 (set (reg:DI 479)
        (sign_extend:DI (reg:SI 337 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 339 338 340 7 (set (reg:DI 339 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 479)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 340 339 341 7 (set (reg/f:DI 480)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 341 340 342 7 (set (reg:DI 481)
        (sign_extend:DI (reg:SI 334 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 342 341 343 7 (set (reg:DI 340 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 481)
                    (const_int 8 [0x8]))
                (reg/f:DI 480)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 343 342 344 7 (set (reg:SI 342 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 14 [0xe])) [0 MEM[base: _802, offset: 14B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 344 343 345 7 (set (reg:DI 482)
        (sign_extend:DI (reg:SI 342 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 345 344 346 7 (set (reg:DI 343 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 482)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 346 345 347 7 (set (reg:SI 345 [ D.5864 ])
        (zero_extend:SI (mem:QI (plus:DI (reg/f:DI 268 [ D.5865 ])
                    (const_int 15 [0xf])) [0 MEM[base: _802, offset: 15B]+0 S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(insn 347 346 348 7 (set (reg/f:DI 483)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 348 347 349 7 (set (reg:DI 484)
        (sign_extend:DI (reg:SI 345 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 349 348 350 7 (set (reg:DI 346 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 484)
                    (const_int 8 [0x8]))
                (reg/f:DI 483)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 350 349 351 7 (set (reg:DI 485)
        (sign_extend:DI (reg:SI 345 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 351 350 352 7 (set (reg:DI 347 [ D.5867 ])
        (mem:DI (plus:DI (plus:DI (mult:DI (reg:DI 485)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -128 [0xffffffffffffff80])) [3 m S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 352 351 353 7 (set (reg/f:DI 486)
        (symbol_ref:DI ("c64") [flags 0x2]  <var_decl 0x6ffffe13ba0 c64>)) 89 {*movdi_internal}
     (nil))
(insn 353 352 354 7 (set (reg:DI 487)
        (sign_extend:DI (reg:SI 342 [ D.5864 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 354 353 358 7 (set (reg:DI 348 [ D.5868 ])
        (mem/u:DI (plus:DI (mult:DI (reg:DI 487)
                    (const_int 8 [0x8]))
                (reg/f:DI 486)) [3 c64 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 588, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       6 [5.9%] 
(code_label 358 354 359 8 10 "" [1 uses])
(note 359 358 361 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 361 359 362 8 (set (reg:V2DI 488 [ vect_cst_.130 ])
        (vec_concat:V2DI (reg:DI 244 [ v$8 ])
            (reg:DI 262 [ v$9 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 362 361 363 8 (set (reg:V2DI 489 [ vect_cst_.125 ])
        (vec_concat:V2DI (reg:DI 208 [ v$0 ])
            (reg:DI 225 [ v$1 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 363 362 364 8 (set (reg:V2DI 490 [ D.5862 ])
        (xor:V2DI (reg:V2DI 488 [ vect_cst_.130 ])
            (reg:V2DI 489 [ vect_cst_.125 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 364 363 365 8 (set (reg:V2DI 491 [ vect_cst_.120 ])
        (vec_concat:V2DI (reg:DI 127 [ D.5863 ])
            (reg:DI 128 [ D.5863 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 365 364 366 8 (set (reg:V2DI 492 [ D.5862 ])
        (xor:V2DI (reg:V2DI 490 [ D.5862 ])
            (reg:V2DI 491 [ vect_cst_.120 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 366 365 367 8 (set (reg:V2DI 493 [ vect_cst_.116 ])
        (vec_concat:V2DI (reg:DI 119 [ v$0 ])
            (reg:DI 120 [ v$1 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 367 366 368 8 (set (reg:V2DI 494 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 492 [ D.5862 ])
            (reg:V2DI 493 [ vect_cst_.116 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 368 367 370 8 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 136 [0x88])) [3 MEM[(long long unsigned int *)state_534(D) + 136B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 494 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (nil))
(insn 370 368 371 8 (set (reg:V2DI 495 [ vect_cst_.124 ])
        (vec_concat:V2DI (reg:DI 241 [ v$2 ])
            (reg:DI 258 [ v$3 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 371 370 372 8 (set (reg:V2DI 496 [ vect_cst_.129 ])
        (vec_concat:V2DI (reg:DI 211 [ v$10 ])
            (reg:DI 197 [ v$11 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 372 371 373 8 (set (reg:V2DI 497 [ D.5862 ])
        (xor:V2DI (reg:V2DI 495 [ vect_cst_.124 ])
            (reg:V2DI 496 [ vect_cst_.129 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 373 372 374 8 (set (reg:V2DI 498 [ vect_cst_.119 ])
        (vec_concat:V2DI (reg:DI 129 [ D.5863 ])
            (reg:DI 130 [ D.5863 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 374 373 375 8 (set (reg:V2DI 499 [ D.5862 ])
        (xor:V2DI (reg:V2DI 497 [ D.5862 ])
            (reg:V2DI 498 [ vect_cst_.119 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 375 374 376 8 (set (reg:V2DI 500 [ vect_cst_.115 ])
        (vec_concat:V2DI (reg:DI 121 [ v$2 ])
            (reg:DI 122 [ v$3 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 376 375 377 8 (set (reg:V2DI 501 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 499 [ D.5862 ])
            (reg:V2DI 500 [ vect_cst_.115 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 377 376 379 8 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 152 [0x98])) [3 MEM[(long long unsigned int *)state_534(D) + 152B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 501 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (nil))
(insn 379 377 380 8 (set (reg:V2DI 502 [ vect_cst_.123 ])
        (vec_concat:V2DI (reg:DI 227 [ v$12 ])
            (reg:DI 243 [ v$13 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 380 379 381 8 (set (reg:V2DI 503 [ vect_cst_.128 ])
        (vec_concat:V2DI (reg:DI 264 [ v$4 ])
            (reg:DI 214 [ v$5 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 381 380 382 8 (set (reg:V2DI 504 [ D.5862 ])
        (xor:V2DI (reg:V2DI 502 [ vect_cst_.123 ])
            (reg:V2DI 503 [ vect_cst_.128 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 382 381 383 8 (set (reg:V2DI 505 [ vect_cst_.118 ])
        (vec_concat:V2DI (reg:DI 127 [ D.5863 ])
            (reg:DI 128 [ D.5863 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 383 382 384 8 (set (reg:V2DI 506 [ D.5862 ])
        (xor:V2DI (reg:V2DI 504 [ D.5862 ])
            (reg:V2DI 505 [ vect_cst_.118 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 384 383 385 8 (set (reg:V2DI 507 [ vect_cst_.114 ])
        (vec_concat:V2DI (reg:DI 123 [ v$4 ])
            (reg:DI 124 [ v$5 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 385 384 386 8 (set (reg:V2DI 508 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 506 [ D.5862 ])
            (reg:V2DI 507 [ vect_cst_.114 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 386 385 388 8 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 168 [0xa8])) [3 MEM[(long long unsigned int *)state_534(D) + 168B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 508 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (nil))
(insn 388 386 389 8 (set (reg:V2DI 509 [ vect_cst_.127 ])
        (vec_concat:V2DI (reg:DI 230 [ v$6 ])
            (reg:DI 246 [ v$7 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 389 388 390 8 (set (reg:V2DI 510 [ vect_cst_.122 ])
        (vec_concat:V2DI (reg:DI 260 [ v$14 ])
            (reg:DI 210 [ v$15 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 390 389 391 8 (set (reg:V2DI 511 [ D.5862 ])
        (xor:V2DI (reg:V2DI 509 [ vect_cst_.127 ])
            (reg:V2DI 510 [ vect_cst_.122 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 391 390 392 8 (set (reg:V2DI 512 [ vect_cst_.117 ])
        (vec_concat:V2DI (reg:DI 129 [ D.5863 ])
            (reg:DI 130 [ D.5863 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 392 391 393 8 (set (reg:V2DI 513 [ D.5862 ])
        (xor:V2DI (reg:V2DI 511 [ D.5862 ])
            (reg:V2DI 512 [ vect_cst_.117 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 393 392 394 8 (set (reg:V2DI 514 [ vect_cst_.113 ])
        (vec_concat:V2DI (reg:DI 125 [ v$6 ])
            (reg:DI 126 [ v$7 ]))) 3673 {vec_concatv2di}
     (nil))
(insn 394 393 395 8 (set (reg:V2DI 515 [ vect__785.126 ])
        (xor:V2DI (reg:V2DI 513 [ D.5862 ])
            (reg:V2DI 514 [ vect_cst_.113 ]))) blake_ref.c:189 3449 {*xorv2di3}
     (nil))
(insn 395 394 396 8 (set (mem:V16QI (plus:DI (reg/v/f:DI 350 [ state ])
                (const_int 184 [0xb8])) [3 MEM[(long long unsigned int *)state_534(D) + 184B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V2DI 515 [ vect__785.126 ]) 0)
            ] UNSPEC_STOREU)) blake_ref.c:189 1312 {sse2_storedquv16qi}
     (nil))
(insn 396 395 400 8 (set (reg:SI 349 [ <retval> ])
        (const_int 0 [0])) blake_ref.c:198 90 {*movsi_internal}
     (nil))
(insn 400 396 401 8 (set (reg/i:SI 0 ax)
        (reg:SI 349 [ <retval> ])) blake_ref.c:199 90 {*movsi_internal}
     (nil))
(insn 401 400 0 8 (use (reg/i:SI 0 ax)) blake_ref.c:199 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function Update32.part.0 (Update32.part.0, funcdef_no=22, decl_uid=5562, cgraph_uid=0, symbol_order=31)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 8 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 124 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:289 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 125 [ data ])
        (reg:DI 1 dx [ data ])) blake_ref.c:289 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 data+0 S8 A64])
        (nil)))
(insn 4 3 5 2 (set (reg/v:DI 126 [ databitlen ])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:289 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
        (nil)))
(note 5 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 5 11 2 (set (reg:SI 127)
        (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])) blake_ref.c:298 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/v:SI 88 [ left ])
                (ashiftrt:SI (reg:SI 127)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:298 545 {*ashrsi3_1}
     (expr_list:REG_EQUAL (ashiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 88 [ left ])
            (const_int 0 [0]))) blake_ref.c:302 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) blake_ref.c:302 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 50)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 

;; basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 128)
        (const_int 64 [0x40])) blake_ref.c:299 90 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg/v:SI 89 [ fill ])
                (minus:SI (reg:SI 128)
                    (reg/v:SI 88 [ left ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:299 260 {*subsi_1}
     (nil))
(insn 17 16 18 3 (set (reg:DI 91 [ D.5880 ])
        (sign_extend:DI (reg/v:SI 89 [ fill ]))) blake_ref.c:302 142 {*extendsidi2_rex64}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 129 [ D.5880 ])
                (lshiftrt:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:302 546 {*lshrdi3_1}
     (nil))
(insn 19 18 20 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 129 [ D.5880 ])
            (reg:DI 91 [ D.5880 ]))) blake_ref.c:302 8 {*cmpdi_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) blake_ref.c:302 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 50)
;;  succ:       4 [29.0%]  (FALLTHRU)
;;              7 [71.0%] 

;; basic block 4, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [29.0%]  (FALLTHRU)
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (parallel [
            (set (reg/f:DI 92 [ D.5881 ])
                (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:303 218 {*adddi_1}
     (nil))
(insn 23 22 24 4 (set (reg:DI 130 [ D.5882 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:303 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg:DI 131 [ D.5883 ])
                (plus:DI (reg/f:DI 92 [ D.5881 ])
                    (reg:DI 130 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:303 218 {*adddi_1}
     (nil))
(insn 25 24 26 4 (set (reg:DI 132)
        (reg:DI 131 [ D.5883 ])) blake_ref.c:303 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 133)
        (reg/v/f:DI 125 [ data ])) blake_ref.c:303 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 134)
        (reg:DI 91 [ D.5880 ])) blake_ref.c:303 89 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:DI 37 r8)
        (reg:DI 134)) blake_ref.c:303 89 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:DI 1 dx)
        (reg:DI 133)) blake_ref.c:303 89 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 2 cx)
        (reg:DI 132)) blake_ref.c:303 89 {*movdi_internal}
     (nil))
(call_insn 31 30 34 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>) [0 memcpy S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:303 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 2 cx))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 37 r8))
                    (nil))))))
(insn 34 31 35 4 (set (reg:SI 137)
        (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])) blake_ref.c:306 90 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:SI 96 [ D.5884 ])
                (plus:SI (reg:SI 137)
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:306 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 36 35 37 4 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
        (reg:SI 96 [ D.5884 ])) blake_ref.c:306 90 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 96 [ D.5884 ])
            (const_int 0 [0]))) blake_ref.c:307 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 38 37 39 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) blake_ref.c:307 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 41)
;;  succ:       5 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 

;; basic block 5, loop depth 0, count 0, freq 65, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [50.0%]  (FALLTHRU)
(note 39 38 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 5 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                        (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                            (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:308 217 {*addsi_1}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [50.0%] 
;;              5 [100.0%]  (FALLTHRU)
(code_label 41 40 42 6 16 "" [1 uses])
(note 42 41 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 6 (set (reg:DI 1 dx)
        (reg/f:DI 92 [ D.5881 ])) blake_ref.c:310 89 {*movdi_internal}
     (nil))
(insn 44 43 45 6 (set (reg:DI 2 cx)
        (reg/v/f:DI 124 [ state ])) blake_ref.c:310 89 {*movdi_internal}
     (nil))
(call_insn 45 44 46 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>) [0 compress32 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:310 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 46 45 47 6 (parallel [
            (set (reg/v/f:DI 125 [ data ])
                (plus:DI (reg/v/f:DI 125 [ data ])
                    (reg:DI 91 [ D.5880 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:311 218 {*adddi_1}
     (nil))
(insn 47 46 48 6 (parallel [
            (set (reg:SI 138 [ D.5879 ])
                (ashift:SI (reg/v:SI 89 [ fill ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:312 511 {*ashlsi3_1}
     (nil))
(insn 48 47 49 6 (set (reg:DI 139 [ D.5880 ])
        (sign_extend:DI (reg:SI 138 [ D.5879 ]))) blake_ref.c:312 142 {*extendsidi2_rex64}
     (nil))
(insn 49 48 6 6 (parallel [
            (set (reg/v:DI 126 [ databitlen ])
                (minus:DI (reg/v:DI 126 [ databitlen ])
                    (reg:DI 139 [ D.5880 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:312 261 {*subdi_1}
     (nil))
(insn 6 49 50 6 (set (reg/v:SI 88 [ left ])
        (const_int 0 [0])) blake_ref.c:314 90 {*movsi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       2 [50.0%] 
;;              3 [71.0%] 
;;              6 [100.0%]  (FALLTHRU)
(code_label 50 6 51 7 15 "" [2 uses])
(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 7 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 126 [ databitlen ])
            (const_int 511 [0x1ff]))) blake_ref.c:318 8 {*cmpdi_1}
     (nil))
(jump_insn 53 52 54 7 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 188)
            (pc))) blake_ref.c:318 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 188)
;;  succ:       8 [91.0%]  (FALLTHRU)
;;              13 [9.0%] 

;; basic block 8, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [91.0%]  (FALLTHRU)
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 8 (parallel [
            (set (reg:DI 140 [ D.5880 ])
                (plus:DI (reg/v:DI 126 [ databitlen ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 56 55 57 8 (parallel [
            (set (reg:DI 141 [ D.5880 ])
                (lshiftrt:DI (reg:DI 140 [ D.5880 ])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) 546 {*lshrdi3_1}
     (nil))
(insn 57 56 58 8 (parallel [
            (set (reg:DI 142 [ D.5882 ])
                (plus:DI (reg:DI 141 [ D.5880 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 58 57 59 8 (parallel [
            (set (reg:DI 143 [ D.5882 ])
                (ashift:DI (reg:DI 142 [ D.5882 ])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (nil))
(insn 59 58 74 8 (parallel [
            (set (reg/v/f:DI 122 [ data ])
                (plus:DI (reg/v/f:DI 125 [ data ])
                    (reg:DI 143 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
;;  succ:       9 [100.0%]  (FALLTHRU)

;; basic block 9, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              11 [91.0%]  (DFS_BACK)
(code_label 74 59 60 9 19 "" [1 uses])
(note 60 74 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 9 (set (reg:SI 144)
        (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])) blake_ref.c:321 90 {*movsi_internal}
     (nil))
(insn 62 61 63 9 (parallel [
            (set (reg:SI 102 [ D.5884 ])
                (plus:SI (reg:SI 144)
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:321 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 63 62 64 9 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 48 [0x30])) [2 state_1(D)->t32+0 S4 A64])
        (reg:SI 102 [ D.5884 ])) blake_ref.c:321 90 {*movsi_internal}
     (nil))
(insn 64 63 65 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 102 [ D.5884 ])
            (const_int 0 [0]))) blake_ref.c:323 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 65 64 66 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) blake_ref.c:323 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 68)
;;  succ:       10 [50.0%]  (FALLTHRU)
;;              11 [50.0%] 

;; basic block 10, loop depth 1, count 0, freq 4550, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 [50.0%]  (FALLTHRU)
(note 66 65 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 10 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                        (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                            (const_int 52 [0x34])) [2 state_1(D)->t32+4 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:324 217 {*addsi_1}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)

;; basic block 11, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9 [50.0%] 
;;              10 [100.0%]  (FALLTHRU)
(code_label 68 67 69 11 18 "" [1 uses])
(note 69 68 70 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 11 (set (reg:DI 1 dx)
        (reg/v/f:DI 125 [ data ])) blake_ref.c:325 89 {*movdi_internal}
     (nil))
(insn 71 70 72 11 (set (reg:DI 2 cx)
        (reg/v/f:DI 124 [ state ])) blake_ref.c:325 89 {*movdi_internal}
     (nil))
(call_insn 72 71 73 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>) [0 compress32 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:325 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress32") [flags 0x3]  <function_decl 0x6ffffd816c8 compress32>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 73 72 75 11 (parallel [
            (set (reg/v/f:DI 125 [ data ])
                (plus:DI (reg/v/f:DI 125 [ data ])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:326 218 {*adddi_1}
     (nil))
(insn 75 73 76 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 125 [ data ])
            (reg/v/f:DI 122 [ data ]))) blake_ref.c:318 8 {*cmpdi_1}
     (nil))
(jump_insn 76 75 77 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) blake_ref.c:318 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 74)
;;  succ:       9 [91.0%]  (DFS_BACK)
;;              12 [9.0%]  (FALLTHRU)

;; basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 [9.0%]  (FALLTHRU)
(note 77 76 78 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 188 12 (parallel [
            (set (reg/v:DI 126 [ databitlen ])
                (and:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 511 [0x1ff])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       7 [9.0%] 
(code_label 188 78 187 13 28 "" [1 uses])
(note 187 188 7 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 7 187 79 13 (set (reg/v/f:DI 122 [ data ])
        (reg/v/f:DI 125 [ data ])) blake_ref.c:318 89 {*movdi_internal}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)

;; basic block 14, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 [100.0%]  (FALLTHRU)
;;              12 [100.0%]  (FALLTHRU)
(code_label 79 7 80 14 17 "" [0 uses])
(note 80 79 81 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 126 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:330 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 82 81 83 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 174)
            (pc))) blake_ref.c:330 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 174)
;;  succ:       15 [29.0%]  (FALLTHRU)
;;              27 [71.0%] 

;; basic block 15, loop depth 0, count 0, freq 261, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 [29.0%]  (FALLTHRU)
(note 83 82 84 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 15 (parallel [
            (set (reg:DI 107 [ D.5880 ])
                (lshiftrt:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:332 546 {*lshrdi3_1}
     (nil))
(insn 85 84 86 15 (set (reg:DI 109 [ D.5882 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:331 142 {*extendsidi2_rex64}
     (nil))
(insn 86 85 87 15 (parallel [
            (set (reg:DI 145 [ D.5881 ])
                (plus:DI (reg/v/f:DI 124 [ state ])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 87 86 88 15 (parallel [
            (set (reg:DI 146 [ D.5883 ])
                (plus:DI (reg:DI 145 [ D.5881 ])
                    (reg:DI 109 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 88 87 89 15 (set (reg:SI 147)
        (subreg:SI (reg:DI 107 [ D.5880 ]) 0)) blake_ref.c:331 90 {*movsi_internal}
     (nil))
(insn 89 88 90 15 (set (reg/f:DI 148)
        (reg:DI 146 [ D.5883 ])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 90 89 91 15 (set (reg/f:DI 149)
        (reg/v/f:DI 122 [ data ])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 91 90 92 15 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 147)
            (const_int 8 [0x8]))) blake_ref.c:331 7 {*cmpsi_1}
     (nil))
(jump_insn 92 91 189 15 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 127)
;;  succ:       21 [50.0%] 
;;              16 [50.0%]  (FALLTHRU)

;; basic block 16, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 [50.0%]  (FALLTHRU)
(note 189 92 93 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 93 189 94 16 (parallel [
            (set (reg:SI 150)
                (and:SI (reg:SI 147)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 381 {*andsi_1}
     (nil))
(insn 94 93 95 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 150)
            (const_int 0 [0]))) blake_ref.c:331 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 95 94 190 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 9000 (nil))
 -> 108)
;;  succ:       18 [90.0%] 
;;              17 [10.0%]  (FALLTHRU)

;; basic block 17, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 [10.0%]  (FALLTHRU)
(note 190 95 96 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 96 190 97 17 (set (reg:SI 151)
        (mem:SI (reg/f:DI 149) [0  S4 A8])) blake_ref.c:331 90 {*movsi_internal}
     (nil))
(insn 97 96 98 17 (set (mem:SI (reg/f:DI 148) [0  S4 A8])
        (reg:SI 151)) blake_ref.c:331 90 {*movsi_internal}
     (nil))
(insn 98 97 99 17 (set (reg:DI 152)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn 99 98 100 17 (parallel [
            (set (reg:DI 153)
                (plus:DI (reg/f:DI 148)
                    (reg:DI 152)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 100 99 101 17 (parallel [
            (set (reg/f:DI 154)
                (plus:DI (reg:DI 153)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 101 100 102 17 (set (reg:DI 155)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn 102 101 103 17 (parallel [
            (set (reg:DI 156)
                (plus:DI (reg/f:DI 149)
                    (reg:DI 155)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 103 102 104 17 (parallel [
            (set (reg/f:DI 157)
                (plus:DI (reg:DI 156)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 104 103 105 17 (set (reg:SI 158)
        (mem:SI (plus:DI (reg/f:DI 157)
                (const_int -8 [0xfffffffffffffff8])) [0  S4 A8])) blake_ref.c:331 90 {*movsi_internal}
     (nil))
(insn 105 104 108 17 (set (mem:SI (plus:DI (reg/f:DI 154)
                (const_int -8 [0xfffffffffffffff8])) [0  S4 A8])
        (reg:SI 158)) blake_ref.c:331 90 {*movsi_internal}
     (nil))
;;  succ:       25 [100.0%]  (FALLTHRU)

;; basic block 18, loop depth 0, count 0, freq 118, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       16 [90.0%] 
(code_label 108 105 191 18 23 "" [1 uses])
(note 191 108 109 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 109 191 110 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 147)
            (const_int 0 [0]))) blake_ref.c:331 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 110 109 192 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 159)
;;  succ:       25 [50.0%] 
;;              19 [50.0%]  (FALLTHRU)

;; basic block 19, loop depth 0, count 0, freq 59, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       18 [50.0%]  (FALLTHRU)
(note 192 110 111 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 111 192 112 19 (set (reg:QI 159)
        (mem:QI (reg/f:DI 149) [0  S1 A8])) blake_ref.c:331 93 {*movqi_internal}
     (nil))
(insn 112 111 113 19 (set (mem:QI (reg/f:DI 148) [0  S1 A8])
        (reg:QI 159)) blake_ref.c:331 93 {*movqi_internal}
     (nil))
(insn 113 112 114 19 (parallel [
            (set (reg:SI 160)
                (and:SI (reg:SI 147)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 381 {*andsi_1}
     (nil))
(insn 114 113 115 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 160)
            (const_int 0 [0]))) blake_ref.c:331 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 115 114 193 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 159)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 9000 (nil))
 -> 159)
;;  succ:       25 [90.0%] 
;;              20 [10.0%]  (FALLTHRU)

;; basic block 20, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 [10.0%]  (FALLTHRU)
(note 193 115 116 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 116 193 117 20 (set (reg:DI 162)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn 117 116 118 20 (set (reg:DI 161)
        (reg:DI 162)) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 118 117 119 20 (parallel [
            (set (reg/f:DI 163)
                (plus:DI (reg/f:DI 148)
                    (reg:DI 161)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 119 118 120 20 (set (reg:DI 165)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn 120 119 121 20 (set (reg:DI 164)
        (reg:DI 165)) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 121 120 122 20 (parallel [
            (set (reg/f:DI 166)
                (plus:DI (reg/f:DI 149)
                    (reg:DI 164)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 122 121 123 20 (set (reg:HI 167)
        (mem:HI (plus:DI (reg/f:DI 166)
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])) blake_ref.c:331 92 {*movhi_internal}
     (nil))
(insn 123 122 127 20 (set (mem:HI (plus:DI (reg/f:DI 163)
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (reg:HI 167)) blake_ref.c:331 92 {*movhi_internal}
     (nil))
;;  succ:       25 [100.0%]  (FALLTHRU)

;; basic block 21, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       15 [50.0%] 
(code_label 127 123 195 21 21 "" [1 uses])
(note 195 127 128 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 128 195 129 21 (set (reg:DI 168)
        (mem:DI (reg/f:DI 149) [0  S8 A8])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 129 128 130 21 (set (mem:DI (reg/f:DI 148) [0  S8 A8])
        (reg:DI 168)) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 130 129 131 21 (set (reg:DI 169)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn 131 130 132 21 (parallel [
            (set (reg:DI 170)
                (plus:DI (reg/f:DI 148)
                    (reg:DI 169)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 132 131 133 21 (parallel [
            (set (reg/f:DI 171)
                (plus:DI (reg:DI 170)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 133 132 134 21 (set (reg:DI 172)
        (zero_extend:DI (reg:SI 147))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn 134 133 135 21 (parallel [
            (set (reg:DI 173)
                (plus:DI (reg/f:DI 149)
                    (reg:DI 172)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 135 134 136 21 (parallel [
            (set (reg/f:DI 174)
                (plus:DI (reg:DI 173)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 136 135 137 21 (set (reg:DI 175)
        (mem:DI (plus:DI (reg/f:DI 174)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 137 136 138 21 (set (mem:DI (plus:DI (reg/f:DI 171)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
        (reg:DI 175)) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 138 137 139 21 (parallel [
            (set (reg/f:DI 176)
                (plus:DI (reg/f:DI 148)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 139 138 140 21 (parallel [
            (set (reg/f:DI 176)
                (and:DI (reg/f:DI 176)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 380 {*anddi_1}
     (nil))
(insn 140 139 141 21 (parallel [
            (set (reg/f:DI 148)
                (minus:DI (reg/f:DI 148)
                    (reg/f:DI 176)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 261 {*subdi_1}
     (nil))
(insn 141 140 142 21 (parallel [
            (set (reg/f:DI 149)
                (minus:DI (reg/f:DI 149)
                    (reg/f:DI 148)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 261 {*subdi_1}
     (nil))
(insn 142 141 143 21 (parallel [
            (set (reg:SI 147)
                (plus:SI (reg:SI 147)
                    (subreg:SI (reg/f:DI 148) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 217 {*addsi_1}
     (nil))
(insn 143 142 144 21 (parallel [
            (set (reg:SI 147)
                (and:SI (reg:SI 147)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 381 {*andsi_1}
     (nil))
(insn 144 143 145 21 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 147)
            (const_int 8 [0x8]))) blake_ref.c:331 7 {*cmpsi_1}
     (nil))
(jump_insn 145 144 196 21 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 2000 (nil))
 -> 159)
;;  succ:       25 [20.0%] 
;;              22 [80.0%]  (FALLTHRU)

;; basic block 22, loop depth 0, count 0, freq 105, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 [80.0%]  (FALLTHRU)
(note 196 145 146 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 146 196 147 22 (parallel [
            (set (reg:SI 178)
                (and:SI (reg:SI 147)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 381 {*andsi_1}
     (nil))
(insn 147 146 148 22 (set (reg:SI 177)
        (const_int 0 [0])) blake_ref.c:331 90 {*movsi_internal}
     (nil))
;;  succ:       23 [100.0%]  (FALLTHRU)

;; basic block 23, loop depth 1, count 0, freq 105, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       22 [100.0%]  (FALLTHRU)
;;              23 [80.0%] 
(code_label 148 147 197 23 25 "" [1 uses])
(note 197 148 149 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 149 197 150 23 (set (reg:DI 179)
        (zero_extend:DI (reg:SI 177))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn 150 149 151 23 (set (reg:DI 180)
        (mem:DI (plus:DI (reg/f:DI 149)
                (reg:DI 179)) [0  S8 A8])) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 151 150 152 23 (set (mem:DI (plus:DI (reg/f:DI 176)
                (reg:DI 179)) [0  S8 A64])
        (reg:DI 180)) blake_ref.c:331 89 {*movdi_internal}
     (nil))
(insn 152 151 153 23 (parallel [
            (set (reg:SI 177)
                (plus:SI (reg:SI 177)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 217 {*addsi_1}
     (nil))
(insn 153 152 154 23 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 177)
            (reg:SI 178))) blake_ref.c:331 7 {*cmpsi_1}
     (nil))
(jump_insn 154 153 198 23 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) blake_ref.c:331 612 {*jcc_1}
     (int_list:REG_BR_PROB 8000 (nil))
 -> 148)
;;  succ:       23 [80.0%] 
;;              24 [20.0%]  (FALLTHRU)

;; basic block 24, loop depth 0, count 0, freq 21, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       23 [20.0%]  (FALLTHRU)
(note 198 154 155 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 155 198 156 24 (set (reg:DI 181)
        (zero_extend:DI (reg:SI 177))) blake_ref.c:331 133 {*zero_extendsidi2}
     (nil))
(insn 156 155 157 24 (parallel [
            (set (reg/f:DI 176)
                (plus:DI (reg/f:DI 176)
                    (reg:DI 181)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
(insn 157 156 159 24 (parallel [
            (set (reg/f:DI 149)
                (plus:DI (reg/f:DI 149)
                    (reg:DI 181)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:331 218 {*adddi_1}
     (nil))
;;  succ:       25 [100.0%]  (FALLTHRU)

;; basic block 25, loop depth 0, count 0, freq 178, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       17 [100.0%]  (FALLTHRU)
;;              18 [50.0%] 
;;              20 [100.0%]  (FALLTHRU)
;;              21 [20.0%] 
;;              24 [100.0%]  (FALLTHRU)
;;              19 [90.0%] 
(code_label 159 157 200 25 22 "" [3 uses])
(note 200 159 160 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 160 200 161 25 (parallel [
            (set (reg:SI 182 [ D.5879 ])
                (ashift:SI (reg/v:SI 88 [ left ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:333 511 {*ashlsi3_1}
     (nil))
(insn 161 160 162 25 (parallel [
            (set (reg:SI 183)
                (plus:SI (reg:SI 182 [ D.5879 ])
                    (subreg:SI (reg/v:DI 126 [ databitlen ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:333 217 {*addsi_1}
     (nil))
(insn 162 161 163 25 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (reg:SI 183)) blake_ref.c:333 90 {*movsi_internal}
     (nil))
(insn 163 162 164 25 (parallel [
            (set (reg:DI 184 [ D.5880 ])
                (and:DI (reg/v:DI 126 [ databitlen ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:335 380 {*anddi_1}
     (nil))
(insn 164 163 165 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 184 [ D.5880 ])
            (const_int 0 [0]))) blake_ref.c:335 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 165 164 166 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 177)
            (pc))) blake_ref.c:335 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 177)
;;  succ:       26 [50.0%]  (FALLTHRU)
;;              28 [50.0%] 

;; basic block 26, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       25 [50.0%]  (FALLTHRU)
(note 166 165 167 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 26 (set (reg:QI 119 [ D.5887 ])
        (mem:QI (plus:DI (reg/v/f:DI 122 [ data ])
                (reg:DI 107 [ D.5880 ])) [0 *_40+0 S1 A8])) blake_ref.c:336 93 {*movqi_internal}
     (nil))
(insn 168 167 169 26 (parallel [
            (set (reg:DI 185)
                (plus:DI (reg/v/f:DI 124 [ state ])
                    (reg:DI 107 [ D.5880 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:336 218 {*adddi_1}
     (nil))
(insn 169 168 170 26 (parallel [
            (set (reg:DI 186)
                (plus:DI (reg:DI 185)
                    (reg:DI 109 [ D.5882 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:336 218 {*adddi_1}
     (nil))
(insn 170 169 171 26 (parallel [
            (set (reg/f:DI 187)
                (plus:DI (reg:DI 186)
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:336 218 {*adddi_1}
     (nil))
(insn 171 170 174 26 (set (mem/j:QI (reg/f:DI 187) [0 state_1(D)->data32 S1 A8])
        (reg:QI 119 [ D.5887 ])) blake_ref.c:336 93 {*movqi_internal}
     (nil))
;;  succ:       28 [100.0%]  (FALLTHRU)

;; basic block 27, loop depth 0, count 0, freq 639, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       14 [71.0%] 
(code_label 174 171 175 27 20 "" [1 uses])
(note 175 174 176 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 27 (set (mem:SI (plus:DI (reg/v/f:DI 124 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:339 90 {*movsi_internal}
     (nil))
;;  succ:       28 [100.0%]  (FALLTHRU)

;; basic block 28, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 27, next block 1, flags: (RTL)
;;  pred:       25 [50.0%] 
;;              26 [100.0%]  (FALLTHRU)
;;              27 [100.0%]  (FALLTHRU)
(code_label 177 176 178 28 27 "" [1 uses])
(note 178 177 181 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 181 178 182 28 (clobber (reg/i:SI 0 ax)) blake_ref.c:343 -1
     (nil))
(insn 182 181 180 28 (clobber (reg:SI 123 [ <retval> ])) blake_ref.c:343 -1
     (nil))
(insn 180 182 183 28 (set (reg/i:SI 0 ax)
        (reg:SI 123 [ <retval> ])) blake_ref.c:343 90 {*movsi_internal}
     (nil))
(insn 183 180 0 28 (use (reg/i:SI 0 ax)) blake_ref.c:343 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function Update64.part.1 (Update64.part.1, funcdef_no=23, decl_uid=5571, cgraph_uid=1, symbol_order=32)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 8 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 120 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:345 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 121 [ data ])
        (reg:DI 1 dx [ data ])) blake_ref.c:345 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 data+0 S8 A64])
        (nil)))
(insn 4 3 5 2 (set (reg/v:DI 122 [ databitlen ])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:345 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
        (nil)))
(note 5 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 5 11 2 (set (reg:SI 123)
        (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])) blake_ref.c:354 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/v:SI 88 [ left ])
                (ashiftrt:SI (reg:SI 123)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:354 545 {*ashrsi3_1}
     (expr_list:REG_EQUAL (ashiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                    (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 88 [ left ])
            (const_int 0 [0]))) blake_ref.c:358 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) blake_ref.c:358 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 42)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              5 [50.0%] 

;; basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 124)
        (const_int 128 [0x80])) blake_ref.c:355 90 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg/v:SI 89 [ fill ])
                (minus:SI (reg:SI 124)
                    (reg/v:SI 88 [ left ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:355 260 {*subsi_1}
     (nil))
(insn 17 16 18 3 (set (reg:DI 91 [ D.5911 ])
        (sign_extend:DI (reg/v:SI 89 [ fill ]))) blake_ref.c:358 142 {*extendsidi2_rex64}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 125 [ D.5911 ])
                (lshiftrt:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:358 546 {*lshrdi3_1}
     (nil))
(insn 19 18 20 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 125 [ D.5911 ])
            (reg:DI 91 [ D.5911 ]))) blake_ref.c:358 8 {*cmpdi_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) blake_ref.c:358 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 42)
;;  succ:       4 [29.0%]  (FALLTHRU)
;;              5 [71.0%] 

;; basic block 4, loop depth 0, count 0, freq 130, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [29.0%]  (FALLTHRU)
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (parallel [
            (set (reg/f:DI 92 [ D.5912 ])
                (plus:DI (reg/v/f:DI 120 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 218 {*adddi_1}
     (nil))
(insn 23 22 24 4 (set (reg:DI 126 [ D.5913 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:359 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg:DI 127 [ D.5914 ])
                (plus:DI (reg/f:DI 92 [ D.5912 ])
                    (reg:DI 126 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 218 {*adddi_1}
     (nil))
(insn 25 24 26 4 (set (reg:DI 128)
        (reg:DI 127 [ D.5914 ])) blake_ref.c:359 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 129)
        (reg/v/f:DI 121 [ data ])) blake_ref.c:359 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 130)
        (reg:DI 91 [ D.5911 ])) blake_ref.c:359 89 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:DI 37 r8)
        (reg:DI 130)) blake_ref.c:359 89 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:DI 1 dx)
        (reg:DI 129)) blake_ref.c:359 89 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 2 cx)
        (reg:DI 128)) blake_ref.c:359 89 {*movdi_internal}
     (nil))
(call_insn 31 30 34 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>) [0 memcpy S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:359 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x43]  <function_decl 0x6ffff8a3cc0 memcpy>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 2 cx))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 37 r8))
                    (nil))))))
(insn 34 31 35 4 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                        (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                            (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 218 {*adddi_1}
     (nil))
(insn 35 34 36 4 (set (reg:DI 1 dx)
        (reg/f:DI 92 [ D.5912 ])) blake_ref.c:364 89 {*movdi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 2 cx)
        (reg/v/f:DI 120 [ state ])) blake_ref.c:364 89 {*movdi_internal}
     (nil))
(call_insn 37 36 38 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 38 37 39 4 (parallel [
            (set (reg/v/f:DI 121 [ data ])
                (plus:DI (reg/v/f:DI 121 [ data ])
                    (reg:DI 91 [ D.5911 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:365 218 {*adddi_1}
     (nil))
(insn 39 38 40 4 (parallel [
            (set (reg:SI 133 [ D.5910 ])
                (ashift:SI (reg/v:SI 89 [ fill ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:366 511 {*ashlsi3_1}
     (nil))
(insn 40 39 41 4 (set (reg:DI 134 [ D.5911 ])
        (sign_extend:DI (reg:SI 133 [ D.5910 ]))) blake_ref.c:366 142 {*extendsidi2_rex64}
     (nil))
(insn 41 40 6 4 (parallel [
            (set (reg/v:DI 122 [ databitlen ])
                (minus:DI (reg/v:DI 122 [ databitlen ])
                    (reg:DI 134 [ D.5911 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:366 261 {*subdi_1}
     (nil))
(insn 6 41 42 4 (set (reg/v:SI 88 [ left ])
        (const_int 0 [0])) blake_ref.c:368 90 {*movsi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       2 [50.0%] 
;;              3 [71.0%] 
;;              4 [100.0%]  (FALLTHRU)
(code_label 42 6 43 5 45 "" [2 uses])
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 5 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 122 [ databitlen ])
            (const_int 1023 [0x3ff]))) blake_ref.c:372 8 {*cmpdi_1}
     (nil))
(jump_insn 45 44 46 5 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 160)
            (pc))) blake_ref.c:372 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 160)
;;  succ:       6 [91.0%]  (FALLTHRU)
;;              9 [9.0%] 

;; basic block 6, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 [91.0%]  (FALLTHRU)
(note 46 45 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 6 (parallel [
            (set (reg:DI 135 [ D.5911 ])
                (plus:DI (reg/v:DI 122 [ databitlen ])
                    (const_int -1024 [0xfffffffffffffc00])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 48 47 49 6 (parallel [
            (set (reg:DI 136 [ D.5911 ])
                (lshiftrt:DI (reg:DI 135 [ D.5911 ])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) 546 {*lshrdi3_1}
     (nil))
(insn 49 48 50 6 (parallel [
            (set (reg:DI 137 [ D.5913 ])
                (plus:DI (reg:DI 136 [ D.5911 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 50 49 51 6 (parallel [
            (set (reg:DI 138 [ D.5913 ])
                (ashift:DI (reg:DI 137 [ D.5913 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (nil))
(insn 51 50 58 6 (parallel [
            (set (reg/v/f:DI 117 [ data ])
                (plus:DI (reg/v/f:DI 121 [ data ])
                    (reg:DI 138 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [100.0%]  (FALLTHRU)
;;              7 [91.0%]  (DFS_BACK)
(code_label 58 51 52 7 47 "" [1 uses])
(note 52 58 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                        (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 120 [ state ])
                            (const_int 200 [0xc8])) [3 state_1(D)->t64+0 S8 A64])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:375 218 {*adddi_1}
     (nil))
(insn 54 53 55 7 (set (reg:DI 1 dx)
        (reg/v/f:DI 121 [ data ])) blake_ref.c:376 89 {*movdi_internal}
     (nil))
(insn 55 54 56 7 (set (reg:DI 2 cx)
        (reg/v/f:DI 120 [ state ])) blake_ref.c:376 89 {*movdi_internal}
     (nil))
(call_insn 56 55 57 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:376 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 57 56 59 7 (parallel [
            (set (reg/v/f:DI 121 [ data ])
                (plus:DI (reg/v/f:DI 121 [ data ])
                    (const_int 128 [0x80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:377 218 {*adddi_1}
     (nil))
(insn 59 57 60 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 121 [ data ])
            (reg/v/f:DI 117 [ data ]))) blake_ref.c:372 8 {*cmpdi_1}
     (nil))
(jump_insn 60 59 61 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) blake_ref.c:372 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 58)
;;  succ:       7 [91.0%]  (DFS_BACK)
;;              8 [9.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [9.0%]  (FALLTHRU)
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 160 8 (parallel [
            (set (reg/v:DI 122 [ databitlen ])
                (and:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 1023 [0x3ff])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (nil))
;;  succ:       10 [100.0%]  (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       5 [9.0%] 
(code_label 160 62 159 9 54 "" [1 uses])
(note 159 160 7 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 7 159 63 9 (set (reg/v/f:DI 117 [ data ])
        (reg/v/f:DI 121 [ data ])) blake_ref.c:372 89 {*movdi_internal}
     (nil))
;;  succ:       10 [100.0%]  (FALLTHRU)

;; basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              8 [100.0%]  (FALLTHRU)
(code_label 63 7 64 10 46 "" [0 uses])
(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 122 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:381 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 66 65 67 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) blake_ref.c:381 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 146)
;;  succ:       11 [29.0%]  (FALLTHRU)
;;              20 [71.0%] 

;; basic block 11, loop depth 0, count 0, freq 261, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 [29.0%]  (FALLTHRU)
(note 67 66 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 11 (parallel [
            (set (reg:DI 103 [ D.5911 ])
                (lshiftrt:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:383 546 {*lshrdi3_1}
     (nil))
(insn 69 68 70 11 (set (reg:DI 106 [ D.5913 ])
        (sign_extend:DI (reg/v:SI 88 [ left ]))) blake_ref.c:382 142 {*extendsidi2_rex64}
     (nil))
(insn 70 69 71 11 (parallel [
            (set (reg:DI 139 [ D.5912 ])
                (plus:DI (reg/v/f:DI 120 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 71 70 72 11 (parallel [
            (set (reg:DI 140 [ D.5914 ])
                (plus:DI (reg:DI 139 [ D.5912 ])
                    (reg:DI 106 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 72 71 73 11 (set (reg:SI 141)
        (subreg:SI (reg:DI 103 [ D.5911 ]) 0)) blake_ref.c:382 90 {*movsi_internal}
     (nil))
(insn 73 72 74 11 (set (reg/f:DI 142)
        (reg:DI 140 [ D.5914 ])) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 74 73 75 11 (set (reg/f:DI 143)
        (reg/v/f:DI 117 [ data ])) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 75 74 76 11 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 141)
            (const_int 8 [0x8]))) blake_ref.c:382 7 {*cmpsi_1}
     (nil))
(jump_insn 76 75 161 11 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 111)
;;  succ:       17 [50.0%] 
;;              12 [50.0%]  (FALLTHRU)

;; basic block 12, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 [50.0%]  (FALLTHRU)
(note 161 76 77 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 77 161 78 12 (parallel [
            (set (reg:SI 144)
                (and:SI (reg:SI 141)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 381 {*andsi_1}
     (nil))
(insn 78 77 79 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 144)
            (const_int 0 [0]))) blake_ref.c:382 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 79 78 162 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (int_list:REG_BR_PROB 9000 (nil))
 -> 92)
;;  succ:       14 [90.0%] 
;;              13 [10.0%]  (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 [10.0%]  (FALLTHRU)
(note 162 79 80 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 80 162 81 13 (set (reg:SI 145)
        (mem:SI (reg/f:DI 143) [0  S4 A8])) blake_ref.c:382 90 {*movsi_internal}
     (nil))
(insn 81 80 82 13 (set (mem:SI (reg/f:DI 142) [0  S4 A8])
        (reg:SI 145)) blake_ref.c:382 90 {*movsi_internal}
     (nil))
(insn 82 81 83 13 (set (reg:DI 146)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(insn 83 82 84 13 (parallel [
            (set (reg:DI 147)
                (plus:DI (reg/f:DI 142)
                    (reg:DI 146)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 84 83 85 13 (parallel [
            (set (reg/f:DI 148)
                (plus:DI (reg:DI 147)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 85 84 86 13 (set (reg:DI 149)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(insn 86 85 87 13 (parallel [
            (set (reg:DI 150)
                (plus:DI (reg/f:DI 143)
                    (reg:DI 149)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 87 86 88 13 (parallel [
            (set (reg/f:DI 151)
                (plus:DI (reg:DI 150)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 88 87 89 13 (set (reg:SI 152)
        (mem:SI (plus:DI (reg/f:DI 151)
                (const_int -8 [0xfffffffffffffff8])) [0  S4 A8])) blake_ref.c:382 90 {*movsi_internal}
     (nil))
(insn 89 88 92 13 (set (mem:SI (plus:DI (reg/f:DI 148)
                (const_int -8 [0xfffffffffffffff8])) [0  S4 A8])
        (reg:SI 152)) blake_ref.c:382 90 {*movsi_internal}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)

;; basic block 14, loop depth 0, count 0, freq 118, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       12 [90.0%] 
(code_label 92 89 163 14 51 "" [1 uses])
(note 163 92 93 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 93 163 94 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 141)
            (const_int 0 [0]))) blake_ref.c:382 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 94 93 164 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 131)
;;  succ:       18 [50.0%] 
;;              15 [50.0%]  (FALLTHRU)

;; basic block 15, loop depth 0, count 0, freq 59, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 [50.0%]  (FALLTHRU)
(note 164 94 95 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 95 164 96 15 (set (reg:QI 153)
        (mem:QI (reg/f:DI 143) [0  S1 A8])) blake_ref.c:382 93 {*movqi_internal}
     (nil))
(insn 96 95 97 15 (set (mem:QI (reg/f:DI 142) [0  S1 A8])
        (reg:QI 153)) blake_ref.c:382 93 {*movqi_internal}
     (nil))
(insn 97 96 98 15 (parallel [
            (set (reg:SI 154)
                (and:SI (reg:SI 141)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 381 {*andsi_1}
     (nil))
(insn 98 97 99 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 154)
            (const_int 0 [0]))) blake_ref.c:382 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 99 98 165 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 131)
            (pc))) blake_ref.c:382 612 {*jcc_1}
     (int_list:REG_BR_PROB 9000 (nil))
 -> 131)
;;  succ:       18 [90.0%] 
;;              16 [10.0%]  (FALLTHRU)

;; basic block 16, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 [10.0%]  (FALLTHRU)
(note 165 99 100 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 100 165 101 16 (set (reg:DI 156)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(insn 101 100 102 16 (set (reg:DI 155)
        (reg:DI 156)) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 102 101 103 16 (parallel [
            (set (reg/f:DI 157)
                (plus:DI (reg/f:DI 142)
                    (reg:DI 155)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 103 102 104 16 (set (reg:DI 159)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(insn 104 103 105 16 (set (reg:DI 158)
        (reg:DI 159)) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 105 104 106 16 (parallel [
            (set (reg/f:DI 160)
                (plus:DI (reg/f:DI 143)
                    (reg:DI 158)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 106 105 107 16 (set (reg:HI 161)
        (mem:HI (plus:DI (reg/f:DI 160)
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])) blake_ref.c:382 92 {*movhi_internal}
     (nil))
(insn 107 106 111 16 (set (mem:HI (plus:DI (reg/f:DI 157)
                (const_int -2 [0xfffffffffffffffe])) [0  S2 A8])
        (reg:HI 161)) blake_ref.c:382 92 {*movhi_internal}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)

;; basic block 17, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       11 [50.0%] 
(code_label 111 107 167 17 49 "" [1 uses])
(note 167 111 112 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 112 167 113 17 (set (reg:DI 162)
        (mem:DI (reg/f:DI 143) [0  S8 A8])) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 113 112 114 17 (set (mem:DI (reg/f:DI 142) [0  S8 A8])
        (reg:DI 162)) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 114 113 115 17 (set (reg:DI 163)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(insn 115 114 116 17 (parallel [
            (set (reg:DI 164)
                (plus:DI (reg/f:DI 142)
                    (reg:DI 163)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 116 115 117 17 (parallel [
            (set (reg/f:DI 165)
                (plus:DI (reg:DI 164)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 117 116 118 17 (set (reg:DI 166)
        (zero_extend:DI (reg:SI 141))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(insn 118 117 119 17 (parallel [
            (set (reg:DI 167)
                (plus:DI (reg/f:DI 143)
                    (reg:DI 166)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 119 118 120 17 (parallel [
            (set (reg/f:DI 168)
                (plus:DI (reg:DI 167)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 120 119 121 17 (set (reg:DI 169)
        (mem:DI (plus:DI (reg/f:DI 168)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 121 120 122 17 (set (mem:DI (plus:DI (reg/f:DI 165)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
        (reg:DI 169)) blake_ref.c:382 89 {*movdi_internal}
     (nil))
(insn 122 121 123 17 (parallel [
            (set (reg/f:DI 170)
                (plus:DI (reg/f:DI 142)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 218 {*adddi_1}
     (nil))
(insn 123 122 124 17 (parallel [
            (set (reg/f:DI 170)
                (and:DI (reg/f:DI 170)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 380 {*anddi_1}
     (nil))
(insn 124 123 125 17 (parallel [
            (set (reg/f:DI 142)
                (minus:DI (reg/f:DI 142)
                    (reg/f:DI 170)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 261 {*subdi_1}
     (nil))
(insn 125 124 126 17 (parallel [
            (set (reg/f:DI 143)
                (minus:DI (reg/f:DI 143)
                    (reg/f:DI 142)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 261 {*subdi_1}
     (nil))
(insn 126 125 127 17 (parallel [
            (set (reg:SI 141)
                (plus:SI (reg:SI 141)
                    (subreg:SI (reg/f:DI 142) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 217 {*addsi_1}
     (nil))
(insn 127 126 128 17 (parallel [
            (set (reg:SI 141)
                (and:SI (reg:SI 141)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 381 {*andsi_1}
     (nil))
(insn 128 127 129 17 (parallel [
            (set (reg:SI 171)
                (lshiftrt:SI (reg:SI 141)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:382 544 {*lshrsi3_1}
     (nil))
(insn 129 128 130 17 (set (reg:DI 172)
        (zero_extend:DI (reg:SI 171))) blake_ref.c:382 133 {*zero_extendsidi2}
     (nil))
(insn 130 129 131 17 (parallel [
            (set (reg:DI 172)
                (const_int 0 [0]))
            (set (reg/f:DI 170)
                (plus:DI (ashift:DI (reg:DI 172)
                        (const_int 3 [0x3]))
                    (reg/f:DI 170)))
            (set (reg/f:DI 143)
                (plus:DI (ashift:DI (reg:DI 172)
                        (const_int 3 [0x3]))
                    (reg/f:DI 143)))
            (set (mem:BLK (reg/f:DI 170) [0  A64])
                (mem:BLK (reg/f:DI 143) [0  A8]))
            (use (reg:DI 172))
        ]) blake_ref.c:382 919 {*rep_movdi_rex64}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)

;; basic block 18, loop depth 0, count 0, freq 262, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       13 [100.0%]  (FALLTHRU)
;;              14 [50.0%] 
;;              16 [100.0%]  (FALLTHRU)
;;              17 [100.0%]  (FALLTHRU)
;;              15 [90.0%] 
(code_label 131 130 168 18 50 "" [2 uses])
(note 168 131 132 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 132 168 133 18 (parallel [
            (set (reg:SI 173 [ D.5910 ])
                (ashift:SI (reg/v:SI 88 [ left ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:384 511 {*ashlsi3_1}
     (nil))
(insn 133 132 134 18 (parallel [
            (set (reg:SI 174)
                (plus:SI (reg:SI 173 [ D.5910 ])
                    (subreg:SI (reg/v:DI 122 [ databitlen ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:384 217 {*addsi_1}
     (nil))
(insn 134 133 135 18 (set (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (reg:SI 174)) blake_ref.c:384 90 {*movsi_internal}
     (nil))
(insn 135 134 136 18 (parallel [
            (set (reg:DI 175 [ D.5911 ])
                (and:DI (reg/v:DI 122 [ databitlen ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:387 380 {*anddi_1}
     (nil))
(insn 136 135 137 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 175 [ D.5911 ])
            (const_int 0 [0]))) blake_ref.c:387 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 137 136 138 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 149)
            (pc))) blake_ref.c:387 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 149)
;;  succ:       19 [50.0%]  (FALLTHRU)
;;              21 [50.0%] 

;; basic block 19, loop depth 0, count 0, freq 131, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       18 [50.0%]  (FALLTHRU)
(note 138 137 139 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 19 (set (reg:QI 116 [ D.5917 ])
        (mem:QI (plus:DI (reg/v/f:DI 117 [ data ])
                (reg:DI 103 [ D.5911 ])) [0 *_37+0 S1 A8])) blake_ref.c:388 93 {*movqi_internal}
     (nil))
(insn 140 139 141 19 (parallel [
            (set (reg:DI 176)
                (plus:DI (reg/v/f:DI 120 [ state ])
                    (reg:DI 103 [ D.5911 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:388 218 {*adddi_1}
     (nil))
(insn 141 140 142 19 (parallel [
            (set (reg:DI 177)
                (plus:DI (reg:DI 176)
                    (reg:DI 106 [ D.5913 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:388 218 {*adddi_1}
     (nil))
(insn 142 141 143 19 (parallel [
            (set (reg/f:DI 178)
                (plus:DI (reg:DI 177)
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:388 218 {*adddi_1}
     (nil))
(insn 143 142 146 19 (set (mem/j:QI (reg/f:DI 178) [0 state_1(D)->data64 S1 A8])
        (reg:QI 116 [ D.5917 ])) blake_ref.c:388 93 {*movqi_internal}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU)

;; basic block 20, loop depth 0, count 0, freq 639, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       10 [71.0%] 
(code_label 146 143 147 20 48 "" [1 uses])
(note 147 146 148 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 20 (set (mem:SI (plus:DI (reg/v/f:DI 120 [ state ])
                (const_int 4 [0x4])) [2 state_1(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:391 90 {*movsi_internal}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU)

;; basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 20, next block 1, flags: (RTL)
;;  pred:       18 [50.0%] 
;;              19 [100.0%]  (FALLTHRU)
;;              20 [100.0%]  (FALLTHRU)
(code_label 149 148 150 21 53 "" [1 uses])
(note 150 149 153 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 153 150 154 21 (clobber (reg/i:SI 0 ax)) blake_ref.c:394 -1
     (nil))
(insn 154 153 152 21 (clobber (reg:SI 119 [ <retval> ])) blake_ref.c:394 -1
     (nil))
(insn 152 154 155 21 (set (reg/i:SI 0 ax)
        (reg:SI 119 [ <retval> ])) blake_ref.c:394 90 {*movsi_internal}
     (nil))
(insn 155 152 0 21 (use (reg/i:SI 0 ax)) blake_ref.c:394 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function GetHashStateSize (GetHashStateSize, funcdef_no=10, decl_uid=3156, cgraph_uid=10, symbol_order=18)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 9 2 (set (reg:SI 87 [ <retval> ])
        (const_int 376 [0x178])) blake_ref.c:6 90 {*movsi_internal}
     (nil))
(insn 9 5 10 2 (set (reg/i:SI 0 ax)
        (reg:SI 87 [ <retval> ])) blake_ref.c:7 90 {*movsi_internal}
     (nil))
(insn 10 9 0 2 (use (reg/i:SI 0 ax)) blake_ref.c:7 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function Init (Init, funcdef_no=13, decl_uid=3182, cgraph_uid=13, symbol_order=21)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 7 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (reg/v/f:DI 100 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:203 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 101 [ hashbitlen ])
        (reg:SI 1 dx [ hashbitlen ])) blake_ref.c:203 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [2 hashbitlen+0 S4 A64])
        (nil)))
(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 4 10 2 (set (reg:SI 97 [ D.5934 ])
        (reg/v:SI 101 [ hashbitlen ])) blake_ref.c:207 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 102 [ D.5934 ])
                (plus:SI (reg:SI 97 [ D.5934 ])
                    (const_int -224 [0xffffffffffffff20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 217 {*addsi_1}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg:SI 103 [ D.5934 ])
                (and:SI (reg:SI 102 [ D.5934 ])
                    (const_int -33 [0xffffffffffffffdf])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 381 {*andsi_1}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 103 [ D.5934 ])
            (const_int 0 [0]))) blake_ref.c:207 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) blake_ref.c:207 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 67)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 

;; basic block 3, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 101 [ hashbitlen ])
            (const_int 224 [0xe0]))) blake_ref.c:210 7 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) blake_ref.c:210 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 30)
;;  succ:       4 [28.0%]  (FALLTHRU)
;;              5 [72.0%] 

;; basic block 4, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [28.0%]  (FALLTHRU)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (parallel [
            (set (reg:DI 104)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:211 218 {*adddi_1}
     (nil))
(insn 19 18 20 4 (set (reg/f:DI 105)
        (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:DI 106)
        (mem/u/c:DI (reg/f:DI 105) [0 MEM[(void *)&IV224]+0 S8 A256])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (mem:DI (reg:DI 104) [0 MEM[(void *)state_18(D) + 16B]+0 S8 A8])
        (reg:DI 106)) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 107)
        (mem/u/c:DI (plus:DI (reg/f:DI 105)
                (const_int 8 [0x8])) [0 MEM[(void *)&IV224]+8 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (mem:DI (plus:DI (reg:DI 104)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 16B]+8 S8 A8])
        (reg:DI 107)) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 108)
        (mem/u/c:DI (plus:DI (reg/f:DI 105)
                (const_int 16 [0x10])) [0 MEM[(void *)&IV224]+16 S8 A128])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (mem:DI (plus:DI (reg:DI 104)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+16 S8 A8])
        (reg:DI 108)) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 109)
        (mem/u/c:DI (plus:DI (reg/f:DI 105)
                (const_int 24 [0x18])) [0 MEM[(void *)&IV224]+24 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 27 26 30 4 (set (mem:DI (plus:DI (reg:DI 104)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 16B]+24 S8 A8])
        (reg:DI 109)) blake_ref.c:211 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 111, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3 [72.0%] 
(code_label 30 27 31 5 72 "" [1 uses])
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (parallel [
            (set (reg:DI 110)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:213 218 {*adddi_1}
     (nil))
(insn 33 32 34 5 (set (reg/f:DI 111)
        (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:DI 112)
        (mem/u/c:DI (reg/f:DI 111) [0 MEM[(void *)&IV256]+0 S8 A256])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (mem:DI (reg:DI 110) [0 MEM[(void *)state_18(D) + 16B]+0 S8 A8])
        (reg:DI 112)) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:DI 113)
        (mem/u/c:DI (plus:DI (reg/f:DI 111)
                (const_int 8 [0x8])) [0 MEM[(void *)&IV256]+8 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 37 36 38 5 (set (mem:DI (plus:DI (reg:DI 110)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 16B]+8 S8 A8])
        (reg:DI 113)) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 114)
        (mem/u/c:DI (plus:DI (reg/f:DI 111)
                (const_int 16 [0x10])) [0 MEM[(void *)&IV256]+16 S8 A128])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (set (mem:DI (plus:DI (reg:DI 110)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 16B]+16 S8 A8])
        (reg:DI 114)) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:DI 115)
        (mem/u/c:DI (plus:DI (reg/f:DI 111)
                (const_int 24 [0x18])) [0 MEM[(void *)&IV256]+24 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (mem:DI (plus:DI (reg:DI 110)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 16B]+24 S8 A8])
        (reg:DI 115)) blake_ref.c:213 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              5 [100.0%]  (FALLTHRU)
(code_label 42 41 43 6 73 "" [0 uses])
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 6 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 48 [0x30])) [2 state_18(D)->t32+0 S4 A64])
        (const_int 0 [0])) blake_ref.c:215 90 {*movsi_internal}
     (nil))
(insn 45 44 46 6 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 52 [0x34])) [2 state_18(D)->t32+4 S4 A32])
        (const_int 0 [0])) blake_ref.c:216 90 {*movsi_internal}
     (nil))
(insn 46 45 47 6 (parallel [
            (set (reg:DI 116 [ D.5936 ])
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 47 46 48 6 (set (reg/f:DI 117)
        (reg:DI 116 [ D.5936 ])) 89 {*movdi_internal}
     (nil))
(insn 48 47 49 6 (set (reg:SI 118)
        (const_int 64 [0x40])) 90 {*movsi_internal}
     (nil))
(insn 49 48 50 6 (set (reg:DI 119)
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 50 49 51 6 (set (mem:DI (reg/f:DI 117) [0  S8 A8])
        (reg:DI 119)) 89 {*movdi_internal}
     (nil))
(insn 51 50 52 6 (set (reg:DI 120)
        (zero_extend:DI (reg:SI 118))) 133 {*zero_extendsidi2}
     (nil))
(insn 52 51 53 6 (parallel [
            (set (reg:DI 121)
                (plus:DI (reg/f:DI 117)
                    (reg:DI 120)))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 53 52 54 6 (parallel [
            (set (reg/f:DI 122)
                (plus:DI (reg:DI 121)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 54 53 55 6 (set (mem:DI (plus:DI (reg/f:DI 122)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
        (reg:DI 119)) 89 {*movdi_internal}
     (nil))
(insn 55 54 56 6 (parallel [
            (set (reg/f:DI 123)
                (plus:DI (reg/f:DI 117)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 56 55 57 6 (parallel [
            (set (reg/f:DI 123)
                (and:DI (reg/f:DI 123)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (nil))
(insn 57 56 58 6 (parallel [
            (set (reg/f:DI 117)
                (minus:DI (reg/f:DI 117)
                    (reg/f:DI 123)))
            (clobber (reg:CC 17 flags))
        ]) 261 {*subdi_1}
     (nil))
(insn 58 57 59 6 (parallel [
            (set (reg:SI 118)
                (plus:SI (reg:SI 118)
                    (subreg:SI (reg/f:DI 117) 0)))
            (clobber (reg:CC 17 flags))
        ]) 217 {*addsi_1}
     (nil))
(insn 59 58 60 6 (parallel [
            (set (reg:SI 118)
                (and:SI (reg:SI 118)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 381 {*andsi_1}
     (nil))
(insn 60 59 61 6 (parallel [
            (set (reg:SI 124)
                (lshiftrt:SI (reg:SI 118)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 544 {*lshrsi3_1}
     (nil))
(insn 61 60 62 6 (set (reg:DI 125)
        (zero_extend:DI (reg:SI 124))) 133 {*zero_extendsidi2}
     (nil))
(insn 62 61 63 6 (parallel [
            (set (reg:DI 125)
                (const_int 0 [0]))
            (set (reg/f:DI 123)
                (plus:DI (ashift:DI (reg:DI 125)
                        (const_int 3 [0x3]))
                    (reg/f:DI 123)))
            (set (mem:BLK (reg/f:DI 123) [0  A64])
                (const_int 0 [0]))
            (use (reg:DI 119))
            (use (reg:DI 125))
        ]) 933 {*rep_stosdi_rex64}
     (nil))
(insn 63 62 64 6 (set (reg:V4SI 126)
        (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])) blake_ref.c:221 1194 {*movv4si_internal}
     (nil))
(insn 64 63 67 6 (set (mem:V16QI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 120 [0x78])) [2 MEM[(unsigned int *)state_18(D) + 120B]+0 S16 A32])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 126) 0)
            ] UNSPEC_STOREU)) blake_ref.c:221 1312 {sse2_storedquv16qi}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       2 [50.0%] 
(code_label 67 64 68 7 71 "" [1 uses])
(note 68 67 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 7 (parallel [
            (set (reg:SI 127 [ D.5934 ])
                (plus:SI (reg:SI 97 [ D.5934 ])
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 217 {*addsi_1}
     (nil))
(insn 70 69 71 7 (parallel [
            (set (reg:SI 128 [ D.5934 ])
                (and:SI (reg:SI 127 [ D.5934 ])
                    (const_int -129 [0xffffffffffffff7f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 381 {*andsi_1}
     (nil))
(insn 71 70 72 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 128 [ D.5934 ])
            (const_int 0 [0]))) blake_ref.c:227 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 72 71 73 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 160)
            (pc))) blake_ref.c:227 612 {*jcc_1}
     (int_list:REG_BR_PROB 6700 (nil))
 -> 160)
;;  succ:       8 [33.0%]  (FALLTHRU)
;;              13 [67.0%] 

;; basic block 8, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [33.0%]  (FALLTHRU)
(note 73 72 74 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 101 [ hashbitlen ])
            (const_int 384 [0x180]))) blake_ref.c:230 7 {*cmpsi_1}
     (nil))
(jump_insn 75 74 76 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 97)
            (pc))) blake_ref.c:230 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 97)
;;  succ:       9 [28.0%]  (FALLTHRU)
;;              10 [72.0%] 

;; basic block 9, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 [28.0%]  (FALLTHRU)
(note 76 75 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 9 (parallel [
            (set (reg:DI 129)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:231 218 {*adddi_1}
     (nil))
(insn 78 77 79 9 (set (reg/f:DI 130)
        (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 79 78 80 9 (set (reg:DI 131)
        (mem/u/c:DI (reg/f:DI 130) [0 MEM[(void *)&IV384]+0 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 80 79 81 9 (set (mem:DI (reg:DI 129) [0 MEM[(void *)state_18(D) + 136B]+0 S8 A8])
        (reg:DI 131)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 81 80 82 9 (set (reg:DI 132)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 8 [0x8])) [0 MEM[(void *)&IV384]+8 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 82 81 83 9 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 136B]+8 S8 A8])
        (reg:DI 132)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 83 82 84 9 (set (reg:DI 133)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 16 [0x10])) [0 MEM[(void *)&IV384]+16 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 84 83 85 9 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 136B]+16 S8 A8])
        (reg:DI 133)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 85 84 86 9 (set (reg:DI 134)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 24 [0x18])) [0 MEM[(void *)&IV384]+24 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 86 85 87 9 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 136B]+24 S8 A8])
        (reg:DI 134)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 87 86 88 9 (set (reg:DI 135)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 32 [0x20])) [0 MEM[(void *)&IV384]+32 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 88 87 89 9 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 32 [0x20])) [0 MEM[(void *)state_18(D) + 136B]+32 S8 A8])
        (reg:DI 135)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 89 88 90 9 (set (reg:DI 136)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 40 [0x28])) [0 MEM[(void *)&IV384]+40 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 90 89 91 9 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 40 [0x28])) [0 MEM[(void *)state_18(D) + 136B]+40 S8 A8])
        (reg:DI 136)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 91 90 92 9 (set (reg:DI 137)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 48 [0x30])) [0 MEM[(void *)&IV384]+48 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 92 91 93 9 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 48 [0x30])) [0 MEM[(void *)state_18(D) + 136B]+48 S8 A8])
        (reg:DI 137)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 93 92 94 9 (set (reg:DI 138)
        (mem/u/c:DI (plus:DI (reg/f:DI 130)
                (const_int 56 [0x38])) [0 MEM[(void *)&IV384]+56 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 94 93 97 9 (set (mem:DI (plus:DI (reg:DI 129)
                (const_int 56 [0x38])) [0 MEM[(void *)state_18(D) + 136B]+56 S8 A8])
        (reg:DI 138)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)

;; basic block 10, loop depth 0, count 0, freq 37, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       8 [72.0%] 
(code_label 97 94 98 10 76 "" [1 uses])
(note 98 97 99 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 10 (parallel [
            (set (reg:DI 139)
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:233 218 {*adddi_1}
     (nil))
(insn 100 99 101 10 (set (reg/f:DI 140)
        (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 101 100 102 10 (set (reg:DI 141)
        (mem/u/c:DI (reg/f:DI 140) [0 MEM[(void *)&IV512]+0 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 102 101 103 10 (set (mem:DI (reg:DI 139) [0 MEM[(void *)state_18(D) + 136B]+0 S8 A8])
        (reg:DI 141)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 103 102 104 10 (set (reg:DI 142)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 8 [0x8])) [0 MEM[(void *)&IV512]+8 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 104 103 105 10 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 8 [0x8])) [0 MEM[(void *)state_18(D) + 136B]+8 S8 A8])
        (reg:DI 142)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 105 104 106 10 (set (reg:DI 143)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 16 [0x10])) [0 MEM[(void *)&IV512]+16 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 106 105 107 10 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 16 [0x10])) [0 MEM[(void *)state_18(D) + 136B]+16 S8 A8])
        (reg:DI 143)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 107 106 108 10 (set (reg:DI 144)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 24 [0x18])) [0 MEM[(void *)&IV512]+24 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 108 107 109 10 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 24 [0x18])) [0 MEM[(void *)state_18(D) + 136B]+24 S8 A8])
        (reg:DI 144)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 109 108 110 10 (set (reg:DI 145)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 32 [0x20])) [0 MEM[(void *)&IV512]+32 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 110 109 111 10 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 32 [0x20])) [0 MEM[(void *)state_18(D) + 136B]+32 S8 A8])
        (reg:DI 145)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 111 110 112 10 (set (reg:DI 146)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 40 [0x28])) [0 MEM[(void *)&IV512]+40 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 112 111 113 10 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 40 [0x28])) [0 MEM[(void *)state_18(D) + 136B]+40 S8 A8])
        (reg:DI 146)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 113 112 114 10 (set (reg:DI 147)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 48 [0x30])) [0 MEM[(void *)&IV512]+48 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 114 113 115 10 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 48 [0x30])) [0 MEM[(void *)state_18(D) + 136B]+48 S8 A8])
        (reg:DI 147)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 115 114 116 10 (set (reg:DI 148)
        (mem/u/c:DI (plus:DI (reg/f:DI 140)
                (const_int 56 [0x38])) [0 MEM[(void *)&IV512]+56 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 116 115 117 10 (set (mem:DI (plus:DI (reg:DI 139)
                (const_int 56 [0x38])) [0 MEM[(void *)state_18(D) + 136B]+56 S8 A8])
        (reg:DI 148)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)

;; basic block 11, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              10 [100.0%]  (FALLTHRU)
(code_label 117 116 118 11 77 "" [0 uses])
(note 118 117 119 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 200 [0xc8])) [3 state_18(D)->t64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:235 89 {*movdi_internal}
     (nil))
(insn 120 119 121 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 208 [0xd0])) [3 state_18(D)->t64+8 S8 A64])
        (const_int 0 [0])) blake_ref.c:236 89 {*movdi_internal}
     (nil))
(insn 121 120 122 11 (parallel [
            (set (reg:DI 149 [ D.5936 ])
                (plus:DI (reg/v/f:DI 100 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 122 121 123 11 (set (reg/f:DI 150)
        (reg:DI 149 [ D.5936 ])) 89 {*movdi_internal}
     (nil))
(insn 123 122 124 11 (set (reg:SI 151)
        (const_int 64 [0x40])) 90 {*movsi_internal}
     (nil))
(insn 124 123 125 11 (set (reg:DI 152)
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 125 124 126 11 (set (mem:DI (reg/f:DI 150) [0  S8 A8])
        (reg:DI 152)) 89 {*movdi_internal}
     (nil))
(insn 126 125 127 11 (set (reg:DI 153)
        (zero_extend:DI (reg:SI 151))) 133 {*zero_extendsidi2}
     (nil))
(insn 127 126 128 11 (parallel [
            (set (reg:DI 154)
                (plus:DI (reg/f:DI 150)
                    (reg:DI 153)))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 128 127 129 11 (parallel [
            (set (reg/f:DI 155)
                (plus:DI (reg:DI 154)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 129 128 130 11 (set (mem:DI (plus:DI (reg/f:DI 155)
                (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
        (reg:DI 152)) 89 {*movdi_internal}
     (nil))
(insn 130 129 131 11 (parallel [
            (set (reg/f:DI 156)
                (plus:DI (reg/f:DI 150)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 131 130 132 11 (parallel [
            (set (reg/f:DI 156)
                (and:DI (reg/f:DI 156)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 380 {*anddi_1}
     (nil))
(insn 132 131 133 11 (parallel [
            (set (reg/f:DI 150)
                (minus:DI (reg/f:DI 150)
                    (reg/f:DI 156)))
            (clobber (reg:CC 17 flags))
        ]) 261 {*subdi_1}
     (nil))
(insn 133 132 134 11 (parallel [
            (set (reg:SI 151)
                (plus:SI (reg:SI 151)
                    (subreg:SI (reg/f:DI 150) 0)))
            (clobber (reg:CC 17 flags))
        ]) 217 {*addsi_1}
     (nil))
(insn 134 133 135 11 (parallel [
            (set (reg:SI 151)
                (and:SI (reg:SI 151)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 381 {*andsi_1}
     (nil))
(insn 135 134 136 11 (parallel [
            (set (reg:SI 157)
                (lshiftrt:SI (reg:SI 151)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 544 {*lshrsi3_1}
     (nil))
(insn 136 135 137 11 (set (reg:DI 158)
        (zero_extend:DI (reg:SI 157))) 133 {*zero_extendsidi2}
     (nil))
(insn 137 136 138 11 (parallel [
            (set (reg:DI 158)
                (const_int 0 [0]))
            (set (reg/f:DI 156)
                (plus:DI (ashift:DI (reg:DI 158)
                        (const_int 3 [0x3]))
                    (reg/f:DI 156)))
            (set (mem:BLK (reg/f:DI 156) [0  A64])
                (const_int 0 [0]))
            (use (reg:DI 152))
            (use (reg:DI 158))
        ]) 933 {*rep_stosdi_rex64}
     (nil))
(insn 138 137 139 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 344 [0x158])) [3 state_18(D)->salt64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:241 89 {*movdi_internal}
     (nil))
(insn 139 138 140 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 352 [0x160])) [3 state_18(D)->salt64+8 S8 A64])
        (const_int 0 [0])) blake_ref.c:242 89 {*movdi_internal}
     (nil))
(insn 140 139 141 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 360 [0x168])) [3 state_18(D)->salt64+16 S8 A64])
        (const_int 0 [0])) blake_ref.c:243 89 {*movdi_internal}
     (nil))
(insn 141 140 142 11 (set (mem:DI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 368 [0x170])) [3 state_18(D)->salt64+24 S8 A64])
        (const_int 0 [0])) blake_ref.c:244 89 {*movdi_internal}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)

;; basic block 12, loop depth 0, count 0, freq 205, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       6 [100.0%]  (FALLTHRU)
;;              11 [100.0%]  (FALLTHRU)
(code_label 142 141 143 12 74 "" [0 uses])
(note 143 142 144 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 12 (set (mem:SI (reg/v/f:DI 100 [ state ]) [2 state_18(D)->hashbitlen+0 S4 A64])
        (reg/v:SI 101 [ hashbitlen ])) blake_ref.c:251 90 {*movsi_internal}
     (nil))
(insn 145 144 146 12 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 4 [0x4])) [2 state_18(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:252 90 {*movsi_internal}
     (nil))
(insn 146 145 147 12 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 8 [0x8])) [2 state_18(D)->init+0 S4 A64])
        (const_int 1 [0x1])) blake_ref.c:253 90 {*movsi_internal}
     (nil))
(insn 147 146 6 12 (set (mem:SI (plus:DI (reg/v/f:DI 100 [ state ])
                (const_int 12 [0xc])) [2 state_18(D)->nullt+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:254 90 {*movsi_internal}
     (nil))
(insn 6 147 160 12 (set (reg:SI 88 [ D.5935 ])
        (const_int 0 [0])) blake_ref.c:256 90 {*movsi_internal}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 103, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       7 [67.0%] 
(code_label 160 6 159 13 78 "" [1 uses])
(note 159 160 5 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 5 159 148 13 (set (reg:SI 88 [ D.5935 ])
        (const_int 2 [0x2])) blake_ref.c:249 90 {*movsi_internal}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)

;; basic block 14, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 13, next block 1, flags: (RTL)
;;  pred:       13 [100.0%]  (FALLTHRU)
;;              12 [100.0%]  (FALLTHRU)
(code_label 148 5 149 14 75 "" [0 uses])
(note 149 148 150 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 154 14 (set (reg:SI 99 [ <retval> ])
        (reg:SI 88 [ D.5935 ])) 90 {*movsi_internal}
     (nil))
(insn 154 150 155 14 (set (reg/i:SI 0 ax)
        (reg:SI 99 [ <retval> ])) blake_ref.c:257 90 {*movsi_internal}
     (nil))
(insn 155 154 0 14 (use (reg/i:SI 0 ax)) blake_ref.c:257 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function AddSalt (AddSalt, funcdef_no=14, decl_uid=3185, cgraph_uid=14, symbol_order=22)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 8 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 143 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:261 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 144 [ salt ])
        (reg:DI 1 dx [ salt ])) blake_ref.c:261 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 salt+0 S8 A64])
        (nil)))
(note 4 3 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 4 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                    (const_int 8 [0x8])) [2 state_4(D)->init+0 S4 A64])
            (const_int 1 [0x1]))) blake_ref.c:268 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 56)
            (pc))) blake_ref.c:268 612 {*jcc_1}
     (int_list:REG_BR_PROB 6218 (nil))
 -> 56)
;;  succ:       6 [62.2%] 
;;              3 [37.8%]  (FALLTHRU)

;; basic block 3, loop depth 0, count 0, freq 3782, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [37.8%]  (FALLTHRU)
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 143 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:271 7 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) blake_ref.c:271 612 {*jcc_1}
     (int_list:REG_BR_PROB 6100 (nil))
 -> 30)
;;  succ:       4 [39.0%]  (FALLTHRU)
;;              5 [61.0%] 

;; basic block 4, loop depth 0, count 0, freq 1475, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [39.0%]  (FALLTHRU)
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 145)
        (mem:SI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:SI 90 [ D.5943 ])
        (bswap:SI (reg:SI 145))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S4 A8]))
        (nil)))
(insn 18 17 19 4 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 120 [0x78])) [2 state_4(D)->salt32+0 S4 A64])
        (reg:SI 90 [ D.5943 ])) blake_ref.c:272 90 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:SI 146)
        (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:SI 91 [ D.5943 ])
        (bswap:SI (reg:SI 146))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 4 [0x4])) [0 MEM[(const BitSequence *)salt_7(D) + 4B]+0 S4 A8]))
        (nil)))
(insn 21 20 22 4 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 124 [0x7c])) [2 state_4(D)->salt32+4 S4 A32])
        (reg:SI 91 [ D.5943 ])) blake_ref.c:273 90 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:SI 147)
        (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 92 [ D.5943 ])
        (bswap:SI (reg:SI 147))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S4 A8]))
        (nil)))
(insn 24 23 25 4 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 128 [0x80])) [2 state_4(D)->salt32+8 S4 A64])
        (reg:SI 92 [ D.5943 ])) blake_ref.c:274 90 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:SI 148)
        (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 12 [0xc])) [0 MEM[(const BitSequence *)salt_7(D) + 12B]+0 S4 A8])) 90 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:SI 93 [ D.5943 ])
        (bswap:SI (reg:SI 148))) 765 {*bswapsi2}
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 12 [0xc])) [0 MEM[(const BitSequence *)salt_7(D) + 12B]+0 S4 A8]))
        (nil)))
(insn 27 26 7 4 (set (mem:SI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 132 [0x84])) [2 state_4(D)->salt32+12 S4 A32])
        (reg:SI 93 [ D.5943 ])) blake_ref.c:275 90 {*movsi_internal}
     (nil))
(insn 7 27 30 4 (set (reg:SI 87 [ D.5941 ])
        (const_int 0 [0])) blake_ref.c:284 90 {*movsi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 2307, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3 [61.0%] 
(code_label 30 7 31 5 83 "" [1 uses])
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:DI 149)
        (mem:DI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 94 [ D.5944 ])
        (bswap:DI (reg:DI 149))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/v/f:DI 144 [ salt ]) [0 MEM[(const BitSequence *)salt_7(D)]+0 S8 A8]))
        (nil)))
(insn 34 33 35 5 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 344 [0x158])) [3 state_4(D)->salt64+0 S8 A64])
        (reg:DI 94 [ D.5944 ])) blake_ref.c:278 89 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:DI 150)
        (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:DI 95 [ D.5944 ])
        (bswap:DI (reg:DI 150))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 8 [0x8])) [0 MEM[(const BitSequence *)salt_7(D) + 8B]+0 S8 A8]))
        (nil)))
(insn 37 36 38 5 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 352 [0x160])) [3 state_4(D)->salt64+8 S8 A64])
        (reg:DI 95 [ D.5944 ])) blake_ref.c:279 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 151)
        (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:DI 96 [ D.5944 ])
        (bswap:DI (reg:DI 151))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 16 [0x10])) [0 MEM[(const BitSequence *)salt_7(D) + 16B]+0 S8 A8]))
        (nil)))
(insn 40 39 41 5 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 360 [0x168])) [3 state_4(D)->salt64+16 S8 A64])
        (reg:DI 96 [ D.5944 ])) blake_ref.c:280 89 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:DI 152)
        (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                (const_int 24 [0x18])) [0 MEM[(const BitSequence *)salt_7(D) + 24B]+0 S8 A8])) 89 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (set (reg:DI 97 [ D.5944 ])
        (bswap:DI (reg:DI 152))) 766 {*bswapdi2}
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (plus:DI (reg/v/f:DI 144 [ salt ])
                    (const_int 24 [0x18])) [0 MEM[(const BitSequence *)salt_7(D) + 24B]+0 S8 A8]))
        (nil)))
(insn 43 42 6 5 (set (mem:DI (plus:DI (reg/v/f:DI 143 [ state ])
                (const_int 368 [0x170])) [3 state_4(D)->salt64+24 S8 A64])
        (reg:DI 97 [ D.5944 ])) blake_ref.c:281 89 {*movdi_internal}
     (nil))
(insn 6 43 56 5 (set (reg:SI 87 [ D.5941 ])
        (const_int 0 [0])) blake_ref.c:284 90 {*movsi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 6218, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       2 [62.2%] 
(code_label 56 6 55 6 84 "" [1 uses])
(note 55 56 5 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 5 55 44 6 (set (reg:SI 87 [ D.5941 ])
        (const_int 1 [0x1])) blake_ref.c:269 90 {*movsi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 6, next block 1, flags: (RTL)
;;  pred:       6 [100.0%]  (FALLTHRU)
;;              4 [100.0%]  (FALLTHRU)
;;              5 [100.0%]  (FALLTHRU)
(code_label 44 5 45 7 82 "" [0 uses])
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 50 7 (set (reg:SI 142 [ <retval> ])
        (reg:SI 87 [ D.5941 ])) 90 {*movsi_internal}
     (nil))
(insn 50 46 51 7 (set (reg/i:SI 0 ax)
        (reg:SI 142 [ <retval> ])) blake_ref.c:285 90 {*movsi_internal}
     (nil))
(insn 51 50 0 7 (use (reg/i:SI 0 ax)) blake_ref.c:285 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function Update (Update, funcdef_no=17, decl_uid=3189, cgraph_uid=17, symbol_order=25)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 6 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/v/f:DI 91 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:397 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 92 [ data ])
        (reg:DI 1 dx [ data ])) blake_ref.c:397 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 data+0 S8 A64])
        (nil)))
(insn 4 3 5 2 (set (reg/v:DI 93 [ databitlen ])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:397 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 91 [ state ]) [2 state_2(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 24)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 

;; basic block 3, loop depth 0, count 0, freq 5000, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 93 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 2071 (nil))
 -> 16)
;;  succ:       4 [79.3%]  (FALLTHRU)
;;              5 [20.7%] 

;; basic block 4, loop depth 0, count 0, freq 3964, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [79.3%]  (FALLTHRU)
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 91 [ state ])
                    (const_int 4 [0x4])) [2 state_2(D)->datalen+0 S4 A32])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 37)
;;  succ:       9 [72.0%] 
;;              5 [28.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 2146, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [28.0%]  (FALLTHRU)
;;              3 [20.7%] 
(code_label 16 15 17 5 89 "" [1 uses])
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 5 (set (reg:DI 37 r8)
        (reg/v:DI 93 [ databitlen ])) 89 {*movdi_internal}
     (nil))
(insn 19 18 20 5 (set (reg:DI 1 dx)
        (reg/v/f:DI 92 [ data ])) 89 {*movdi_internal}
     (nil))
(insn 20 19 21 5 (set (reg:DI 2 cx)
        (reg/v/f:DI 91 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 21 20 24 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       9 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 5000, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       2 [50.0%] 
(code_label 24 21 25 6 88 "" [1 uses])
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 93 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 27 26 28 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 2900 (nil))
 -> 31)
;;  succ:       7 [71.0%]  (FALLTHRU)
;;              8 [29.0%] 

;; basic block 7, loop depth 0, count 0, freq 3550, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [71.0%]  (FALLTHRU)
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 91 [ state ])
                    (const_int 4 [0x4])) [2 state_2(D)->datalen+0 S4 A32])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (nil))
(jump_insn 30 29 31 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 6218 (nil))
 -> 37)
;;  succ:       9 [62.2%] 
;;              8 [37.8%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 2793, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [37.8%]  (FALLTHRU)
;;              6 [29.0%] 
(code_label 31 30 32 8 91 "" [1 uses])
(note 32 31 33 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 8 (set (reg:DI 37 r8)
        (reg/v:DI 93 [ databitlen ])) 89 {*movdi_internal}
     (nil))
(insn 34 33 35 8 (set (reg:DI 1 dx)
        (reg/v/f:DI 92 [ data ])) 89 {*movdi_internal}
     (nil))
(insn 35 34 36 8 (set (reg:DI 2 cx)
        (reg/v/f:DI 91 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 36 35 37 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       9 [100.0%]  (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 8, next block 1, flags: (RTL)
;;  pred:       7 [62.2%] 
;;              8 [100.0%]  (FALLTHRU)
;;              5 [100.0%]  (FALLTHRU)
;;              4 [72.0%] 
(code_label 37 36 38 9 90 "" [2 uses])
(note 38 37 39 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 43 9 (set (reg:SI 90 [ <retval> ])
        (const_int 0 [0])) 90 {*movsi_internal}
     (nil))
(insn 43 39 44 9 (set (reg/i:SI 0 ax)
        (reg:SI 90 [ <retval> ])) blake_ref.c:403 90 {*movsi_internal}
     (nil))
(insn 44 43 0 9 (use (reg/i:SI 0 ax)) blake_ref.c:403 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function Final (Final, funcdef_no=20, decl_uid=3192, cgraph_uid=20, symbol_order=28)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 5 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 633 [ state ])
        (reg:DI 2 cx [ state ])) blake_ref.c:653 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (reg/f:DI 16 argp) [4 state+0 S8 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 634 [ hashval ])
        (reg:DI 1 dx [ hashval ])) blake_ref.c:653 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 hashval+0 S8 A64])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) blake_ref.c:655 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 612 [ D.6033 ])
            (const_int 383 [0x17f]))) blake_ref.c:655 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 405)
            (pc))) blake_ref.c:655 612 {*jcc_1}
     (int_list:REG_BR_PROB 6100 (nil))
 -> 405)
;;  succ:       3 [39.0%]  (FALLTHRU)
;;              42 [61.0%] 

;; basic block 3, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [39.0%]  (FALLTHRU)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 zz+0 S1 A32])
        (const_int 0 [0])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 12 11 13 3 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -19 [0xffffffffffffffed])) [0 zo+0 S1 A8])
        (const_int 1 [0x1])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 13 12 14 3 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0 oz+0 S1 A16])
        (const_int -128 [0xffffffffffffff80])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 14 13 15 3 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -17 [0xffffffffffffffef])) [0 oo+0 S1 A8])
        (const_int -127 [0xffffffffffffff81])) blake_ref.c:410 93 {*movqi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:SI 88 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) blake_ref.c:416 90 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:SI 89 [ D.6033 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])) blake_ref.c:416 90 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:SI 90 [ D.6032 ])
        (reg:SI 89 [ D.6033 ])) blake_ref.c:416 90 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg/v:SI 91 [ low ])
                (plus:SI (reg:SI 88 [ D.6032 ])
                    (reg:SI 90 [ D.6032 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:416 217 {*addsi_1}
     (nil))
(insn 19 18 20 3 (set (reg/v:SI 92 [ high ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 52 [0x34])) [2 state_4(D)->t32+4 S4 A32])) blake_ref.c:417 90 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 90 [ D.6032 ])
            (reg/v:SI 91 [ low ]))) blake_ref.c:418 7 {*cmpsi_1}
     (nil))
(jump_insn 21 20 22 3 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) blake_ref.c:418 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 24)
;;  succ:       4 [50.0%]  (FALLTHRU)
;;              5 [50.0%] 

;; basic block 4, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [50.0%]  (FALLTHRU)
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (parallel [
            (set (reg/v:SI 92 [ high ])
                (plus:SI (reg/v:SI 92 [ high ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:419 217 {*addsi_1}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3 [50.0%] 
;;              4 [100.0%]  (FALLTHRU)
(code_label 24 23 25 5 94 "" [1 uses])
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (parallel [
            (set (reg:SI 635 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 92 [ high ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 544 {*lshrsi3_1}
     (nil))
(insn 27 26 28 5 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 msglen+0 S1 A128])
        (subreg:QI (reg:SI 635 [ D.6032 ]) 0)) blake_ref.c:420 93 {*movqi_internal}
     (nil))
(insn 28 27 29 5 (parallel [
            (set (reg:SI 636 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 92 [ high ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 544 {*lshrsi3_1}
     (nil))
(insn 29 28 30 5 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -15 [0xfffffffffffffff1])) [0 msglen+1 S1 A8])
        (subreg:QI (reg:SI 636 [ D.6032 ]) 0)) blake_ref.c:420 93 {*movqi_internal}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg:SI 637 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 92 [ high ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:420 544 {*lshrsi3_1}
     (nil))
(insn 31 30 32 5 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -14 [0xfffffffffffffff2])) [0 msglen+2 S1 A16])
        (subreg:QI (reg:SI 637 [ D.6032 ]) 0)) blake_ref.c:420 93 {*movqi_internal}
     (nil))
(insn 32 31 33 5 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -13 [0xfffffffffffffff3])) [0 msglen+3 S1 A8])
        (subreg:QI (reg/v:SI 92 [ high ]) 0)) blake_ref.c:420 93 {*movqi_internal}
     (nil))
(insn 33 32 34 5 (parallel [
            (set (reg:SI 638 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 91 [ low ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 544 {*lshrsi3_1}
     (nil))
(insn 34 33 35 5 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 msglen+4 S1 A32])
        (subreg:QI (reg:SI 638 [ D.6032 ]) 0)) blake_ref.c:421 93 {*movqi_internal}
     (nil))
(insn 35 34 36 5 (parallel [
            (set (reg:SI 639 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 91 [ low ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 544 {*lshrsi3_1}
     (nil))
(insn 36 35 37 5 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -11 [0xfffffffffffffff5])) [0 msglen+5 S1 A8])
        (subreg:QI (reg:SI 639 [ D.6032 ]) 0)) blake_ref.c:421 93 {*movqi_internal}
     (nil))
(insn 37 36 38 5 (parallel [
            (set (reg:SI 640 [ D.6032 ])
                (lshiftrt:SI (reg/v:SI 91 [ low ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:421 544 {*lshrsi3_1}
     (nil))
(insn 38 37 39 5 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -10 [0xfffffffffffffff6])) [0 msglen+6 S1 A16])
        (subreg:QI (reg:SI 640 [ D.6032 ]) 0)) blake_ref.c:421 93 {*movqi_internal}
     (nil))
(insn 39 38 40 5 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -9 [0xfffffffffffffff7])) [0 msglen+7 S1 A8])
        (subreg:QI (reg/v:SI 91 [ low ]) 0)) blake_ref.c:421 93 {*movqi_internal}
     (nil))
(insn 40 39 41 5 (parallel [
            (set (reg:SI 641 [ D.6035 ])
                (and:SI (reg:SI 90 [ D.6032 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:423 381 {*andsi_1}
     (nil))
(insn 41 40 42 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 641 [ D.6035 ])
            (const_int 0 [0]))) blake_ref.c:423 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 42 41 43 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 145)
            (pc))) blake_ref.c:423 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 145)
;;  succ:       6 [50.0%]  (FALLTHRU)
;;              22 [50.0%] 

;; basic block 6, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 [50.0%]  (FALLTHRU)
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6033 ])
            (const_int 440 [0x1b8]))) blake_ref.c:426 7 {*cmpsi_1}
     (nil))
(jump_insn 45 44 46 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) blake_ref.c:426 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 70)
;;  succ:       7 [28.0%]  (FALLTHRU)
;;              10 [72.0%] 

;; basic block 7, loop depth 0, count 0, freq 546, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [28.0%]  (FALLTHRU)
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 7 (parallel [
            (set (reg:SI 642)
                (plus:SI (reg:SI 88 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:428 217 {*addsi_1}
     (nil))
(insn 48 47 49 7 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 642)) blake_ref.c:428 90 {*movsi_internal}
     (nil))
(insn 49 48 50 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 224 [0xe0]))) blake_ref.c:429 7 {*cmpsi_1}
     (nil))
(jump_insn 50 49 51 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) blake_ref.c:429 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 60)
;;  succ:       8 [28.0%]  (FALLTHRU)
;;              9 [72.0%] 

;; basic block 8, loop depth 0, count 0, freq 153, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [28.0%]  (FALLTHRU)
(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 8 (parallel [
            (set (reg:DI 643)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -18 [0xffffffffffffffee])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 53 52 54 8 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 54 53 55 8 (set (reg:DI 1 dx)
        (reg:DI 643)) 89 {*movdi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 56 55 57 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 57 56 60 8 (set (reg:SI 115 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 393, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       7 [72.0%] 
(code_label 60 57 61 9 97 "" [1 uses])
(note 61 60 62 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 9 (parallel [
            (set (reg:DI 644)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -17 [0xffffffffffffffef])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 63 62 64 9 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 64 63 65 9 (set (reg:DI 1 dx)
        (reg:DI 644)) 89 {*movdi_internal}
     (nil))
(insn 65 64 66 9 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 66 65 67 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 67 66 70 9 (set (reg:SI 115 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU)

;; basic block 10, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       6 [72.0%] 
(code_label 70 67 71 10 96 "" [1 uses])
(note 71 70 72 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.6033 ])
            (const_int 439 [0x1b7]))) blake_ref.c:435 7 {*cmpsi_1}
     (nil))
(jump_insn 73 72 74 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) blake_ref.c:435 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 81)
;;  succ:       11 [50.0%]  (FALLTHRU)
;;              13 [50.0%] 

;; basic block 11, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 [50.0%]  (FALLTHRU)
(note 74 73 75 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6033 ])
            (const_int 0 [0]))) blake_ref.c:437 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 76 75 77 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 986)
            (pc))) blake_ref.c:437 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 986)
;;  succ:       12 [50.0%]  (FALLTHRU)
;;              86 [50.0%] 

;; basic block 12, loop depth 0, count 0, freq 351, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 [50.0%]  (FALLTHRU)
(note 77 76 78 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 81 12 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:438 90 {*movsi_internal}
     (nil))
;;  succ:       86 [100.0%]  (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       10 [50.0%] 
(code_label 81 78 82 13 99 "" [1 uses])
(note 82 81 83 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 13 (parallel [
            (set (reg:SI 109 [ D.6032 ])
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:445 217 {*addsi_1}
     (nil))
(insn 84 83 85 13 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 109 [ D.6032 ])) blake_ref.c:445 90 {*movsi_internal}
     (nil))
(insn 85 84 86 13 (set (reg:SI 646)
        (const_int 512 [0x200])) blake_ref.c:446 90 {*movsi_internal}
     (nil))
(insn 86 85 87 13 (parallel [
            (set (reg:SI 645 [ D.6033 ])
                (minus:SI (reg:SI 646)
                    (reg:SI 89 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:446 260 {*subsi_1}
     (nil))
(insn 87 86 88 13 (set (reg:DI 111 [ D.6036 ])
        (sign_extend:DI (reg:SI 645 [ D.6033 ]))) blake_ref.c:446 142 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 111 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(insn 89 88 90 13 (set (reg:QI 648 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 607 {*setcc_qi}
     (nil))
(insn 90 89 91 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 648 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 91 90 1018 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1030)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1030)
;;  succ:       15 [14.0%] 
;;              14 [86.0%]  (FALLTHRU)

;; basic block 14, loop depth 0, count 0, freq 604, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 [86.0%]  (FALLTHRU)
(note 1018 91 92 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 92 1018 93 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6033 ])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (nil))
(insn 93 92 94 14 (set (reg:QI 650 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 607 {*setcc_qi}
     (nil))
(insn 94 93 95 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 650 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 95 94 1030 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 8372 (nil))
 -> 103)
;;  succ:       16 [83.7%] 
;;              15 [16.3%]  (FALLTHRU)

;; basic block 15, loop depth 0, count 0, freq 343, maybe hot
;; Invalid sum of incoming frequencies 196, should be 343
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 [16.3%]  (FALLTHRU)
;;              13 [14.0%] 
(code_label 1030 95 97 15 146 "" [1 uses])
(note 97 1030 98 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 15 (set (reg:DI 37 r8)
        (reg:DI 111 [ D.6036 ])) 89 {*movdi_internal}
     (nil))
(insn 99 98 100 15 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 100 99 101 15 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 101 100 102 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 102 101 103 15 (set (reg:SI 109 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)

;; basic block 16, loop depth 0, count 0, freq 702, maybe hot
;; Invalid sum of incoming frequencies 849, should be 702
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 [100.0%]  (FALLTHRU)
;;              14 [83.7%] 
(code_label 103 102 104 16 101 "" [1 uses])
(note 104 103 105 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 16 (parallel [
            (set (reg:SI 651)
                (plus:SI (reg:SI 109 [ D.6032 ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:447 217 {*addsi_1}
     (nil))
(insn 106 105 107 16 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 651)) blake_ref.c:447 90 {*movsi_internal}
     (nil))
(insn 107 106 108 16 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) 89 {*movdi_internal}
     (nil))
(insn 108 107 109 16 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 109 108 110 16 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 110 109 111 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 111 110 997 16 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:449 90 {*movsi_internal}
     (nil))
;;  succ:       17 [100.0%]  (FALLTHRU)

;; basic block 17, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 [100.0%]  (FALLTHRU)
;;              86 [100.0%]  (FALLTHRU)
(code_label 997 111 112 17 144 "" [0 uses])
(note 112 997 113 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 224 [0xe0]))) blake_ref.c:451 7 {*cmpsi_1}
     (nil))
(jump_insn 114 113 115 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 123)
            (pc))) blake_ref.c:451 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 123)
;;  succ:       18 [28.0%]  (FALLTHRU)
;;              19 [72.0%] 

;; basic block 18, loop depth 0, count 0, freq 393, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 [28.0%]  (FALLTHRU)
(note 115 114 116 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 18 (parallel [
            (set (reg:DI 652)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 117 116 118 18 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 118 117 119 18 (set (reg:DI 1 dx)
        (reg:DI 652)) 89 {*movdi_internal}
     (nil))
(insn 119 118 120 18 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 120 119 123 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       20 [100.0%]  (FALLTHRU)

;; basic block 19, loop depth 0, count 0, freq 1011, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       17 [72.0%] 
(code_label 123 120 124 19 103 "" [1 uses])
(note 124 123 125 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 19 (parallel [
            (set (reg:DI 653)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 126 125 127 19 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 127 126 128 19 (set (reg:DI 1 dx)
        (reg:DI 653)) 89 {*movdi_internal}
     (nil))
(insn 128 127 129 19 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 129 128 130 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       20 [100.0%]  (FALLTHRU)

;; basic block 20, loop depth 0, count 0, freq 1404, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       18 [100.0%]  (FALLTHRU)
;;              19 [100.0%]  (FALLTHRU)
(code_label 130 129 131 20 104 "" [0 uses])
(note 131 130 132 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 133 20 (set (reg:SI 654)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) blake_ref.c:455 90 {*movsi_internal}
     (nil))
(insn 133 132 134 20 (parallel [
            (set (reg:SI 115 [ D.6032 ])
                (plus:SI (reg:SI 654)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:455 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
;;  succ:       21 [100.0%]  (FALLTHRU)

;; basic block 21, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              9 [100.0%]  (FALLTHRU)
;;              20 [100.0%]  (FALLTHRU)
(code_label 134 133 135 21 98 "" [0 uses])
(note 135 134 136 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 21 (parallel [
            (set (reg:SI 655)
                (plus:SI (reg:SI 115 [ D.6032 ])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:457 217 {*addsi_1}
     (nil))
(insn 137 136 138 21 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 655)) blake_ref.c:457 90 {*movsi_internal}
     (nil))
(insn 138 137 139 21 (parallel [
            (set (reg:DI 656)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 139 138 140 21 (set (reg:DI 37 r8)
        (const_int 64 [0x40])) 89 {*movdi_internal}
     (nil))
(insn 140 139 141 21 (set (reg:DI 1 dx)
        (reg:DI 656)) 89 {*movdi_internal}
     (nil))
(insn 141 140 142 21 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 142 141 145 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       40 [100.0%]  (FALLTHRU)

;; basic block 22, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       5 [50.0%] 
(code_label 145 142 146 22 95 "" [1 uses])
(note 146 145 147 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 147 146 148 22 (set (reg:SI 657)
        (reg:SI 89 [ D.6033 ])) blake_ref.c:464 90 {*movsi_internal}
     (nil))
(insn 148 147 149 22 (parallel [
            (set (reg:SI 658)
                (plus:SI (reg:SI 657)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 217 {*addsi_1}
     (nil))
(insn 149 148 150 22 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 657)
            (const_int 0 [0]))) blake_ref.c:464 3 {*cmpsi_ccno_1}
     (nil))
(insn 150 149 151 22 (set (reg:SI 657)
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 658)
            (reg:SI 657))) blake_ref.c:464 951 {*movsicc_noc}
     (nil))
(insn 151 150 152 22 (parallel [
            (set (reg:SI 659)
                (ashiftrt:SI (reg:SI 657)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 545 {*ashrsi3_1}
     (expr_list:REG_EQUAL (div:SI (reg:SI 89 [ D.6033 ])
            (const_int 8 [0x8]))
        (nil)))
(insn 152 151 153 22 (set (reg:SI 117 [ D.6033 ])
        (reg:SI 659)) blake_ref.c:464 90 {*movsi_internal}
     (nil))
(insn 153 152 154 22 (parallel [
            (set (reg:SI 660)
                (ashiftrt:SI (reg:SI 89 [ D.6033 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 538 {ashrsi3_cvt}
     (nil))
(insn 154 153 155 22 (parallel [
            (set (reg:SI 661)
                (lshiftrt:SI (reg:SI 660)
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 544 {*lshrsi3_1}
     (nil))
(insn 155 154 156 22 (parallel [
            (set (reg:SI 662)
                (plus:SI (reg:SI 89 [ D.6033 ])
                    (reg:SI 661)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 217 {*addsi_1}
     (nil))
(insn 156 155 157 22 (parallel [
            (set (reg:SI 663)
                (and:SI (reg:SI 662)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 381 {*andsi_1}
     (nil))
(insn 157 156 158 22 (parallel [
            (set (reg:SI 664)
                (minus:SI (reg:SI 663)
                    (reg:SI 661)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:464 260 {*subsi_1}
     (nil))
(insn 158 157 159 22 (set (reg:SI 120 [ D.6033 ])
        (reg:SI 664)) blake_ref.c:464 90 {*movsi_internal}
     (nil))
(insn 159 158 160 22 (set (reg:SI 666)
        (const_int 8 [0x8])) blake_ref.c:465 90 {*movsi_internal}
     (nil))
(insn 160 159 161 22 (parallel [
            (set (reg:SI 665 [ D.6033 ])
                (minus:SI (reg:SI 666)
                    (reg:SI 120 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 260 {*subsi_1}
     (nil))
(insn 161 160 162 22 (set (reg:SI 668)
        (const_int 255 [0xff])) blake_ref.c:465 90 {*movsi_internal}
     (nil))
(insn 162 161 163 22 (parallel [
            (set (reg:SI 667 [ D.6033 ])
                (ashift:SI (reg:SI 668)
                    (subreg:QI (reg:SI 665 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 511 {*ashlsi3_1}
     (nil))
(insn 163 162 164 22 (set (reg:DI 669)
        (sign_extend:DI (reg:SI 117 [ D.6033 ]))) blake_ref.c:464 142 {*extendsidi2_rex64}
     (nil))
(insn 164 163 165 22 (parallel [
            (set (reg:QI 670 [ D.6037 ])
                (and:QI (subreg:QI (reg:SI 667 [ D.6033 ]) 0)
                    (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                                (reg:DI 669))
                            (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 384 {*andqi_1}
     (nil))
(insn 165 164 166 22 (set (reg:SI 672)
        (const_int 128 [0x80])) blake_ref.c:465 90 {*movsi_internal}
     (nil))
(insn 166 165 167 22 (parallel [
            (set (reg:SI 671 [ D.6033 ])
                (ashiftrt:SI (reg:SI 672)
                    (subreg:QI (reg:SI 120 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 545 {*ashrsi3_1}
     (nil))
(insn 167 166 168 22 (parallel [
            (set (reg:QI 128 [ D.6034 ])
                (xor:QI (reg:QI 670 [ D.6037 ])
                    (subreg:QI (reg:SI 671 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:465 406 {*xorqi_1}
     (nil))
(insn 168 167 169 22 (set (reg:DI 673)
        (sign_extend:DI (reg:SI 117 [ D.6033 ]))) blake_ref.c:465 142 {*extendsidi2_rex64}
     (nil))
(insn 169 168 170 22 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 673))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (reg:QI 128 [ D.6034 ])) blake_ref.c:465 93 {*movqi_internal}
     (nil))
(insn 170 169 171 22 (parallel [
            (set (reg:SI 674 [ D.6035 ])
                (plus:SI (reg:SI 90 [ D.6032 ])
                    (const_int -441 [0xfffffffffffffe47])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:467 217 {*addsi_1}
     (nil))
(insn 171 170 172 22 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 674 [ D.6035 ])
            (const_int 5 [0x5]))) blake_ref.c:467 7 {*cmpsi_1}
     (nil))
(jump_insn 172 171 173 22 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 187)
            (pc))) blake_ref.c:467 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 187)
;;  succ:       23 [50.0%]  (FALLTHRU)
;;              26 [50.0%] 

;; basic block 23, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       22 [50.0%]  (FALLTHRU)
(note 173 172 174 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 224 [0xe0]))) blake_ref.c:469 7 {*cmpsi_1}
     (nil))
(jump_insn 175 174 176 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 180)
            (pc))) blake_ref.c:469 612 {*jcc_1}
     (int_list:REG_BR_PROB 2800 (nil))
 -> 180)
;;  succ:       25 [28.0%] 
;;              24 [72.0%]  (FALLTHRU)

;; basic block 24, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       23 [72.0%]  (FALLTHRU)
(note 176 175 177 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 24 (set (reg:DI 675)
        (sign_extend:DI (reg:SI 117 [ D.6033 ]))) blake_ref.c:472 142 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 24 (parallel [
            (set (reg:QI 676)
                (xor:QI (reg:QI 128 [ D.6034 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:472 406 {*xorqi_1}
     (nil))
(insn 179 178 180 24 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 675))
                (const_int 56 [0x38])) [0 state_4(D)->data32 S1 A8])
        (reg:QI 676)) blake_ref.c:472 93 {*movqi_internal}
     (nil))
;;  succ:       25 [100.0%]  (FALLTHRU)

;; basic block 25, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       23 [28.0%] 
;;              24 [100.0%]  (FALLTHRU)
(code_label 180 179 181 25 107 "" [1 uses])
(note 181 180 182 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 182 181 183 25 (parallel [
            (set (reg:SI 677 [ D.6032 ])
                (plus:SI (reg:SI 88 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:473 217 {*addsi_1}
     (nil))
(insn 183 182 184 25 (parallel [
            (set (reg:SI 87 [ D.6031 ])
                (plus:SI (reg:SI 677 [ D.6032 ])
                    (reg:SI 120 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:473 217 {*addsi_1}
     (nil))
(insn 184 183 187 25 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 448 [0x1c0])) blake_ref.c:475 90 {*movsi_internal}
     (nil))
;;  succ:       39 [100.0%]  (FALLTHRU)

;; basic block 26, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       22 [50.0%] 
(code_label 187 184 188 26 106 "" [1 uses])
(note 188 187 189 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 189 188 190 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.6033 ])
            (const_int 439 [0x1b7]))) blake_ref.c:478 7 {*cmpsi_1}
     (nil))
(jump_insn 190 189 191 26 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 218)
            (pc))) blake_ref.c:478 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 218)
;;  succ:       27 [29.0%]  (FALLTHRU)
;;              30 [71.0%] 

;; basic block 27, loop depth 0, count 0, freq 283, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       26 [29.0%]  (FALLTHRU)
(note 191 190 192 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 27 (parallel [
            (set (reg:SI 609 [ D.6031 ])
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:480 217 {*addsi_1}
     (nil))
(insn 193 192 194 27 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 609 [ D.6031 ])) blake_ref.c:480 90 {*movsi_internal}
     (nil))
(insn 194 193 195 27 (parallel [
            (set (reg:SI 678 [ D.6035 ])
                (and:SI (reg:SI 90 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:481 381 {*andsi_1}
     (nil))
(insn 195 194 196 27 (parallel [
            (set (reg:SI 137 [ D.6033 ])
                (plus:SI (reg:SI 678 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:481 217 {*addsi_1}
     (nil))
(insn 196 195 197 27 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 137 [ D.6033 ])) blake_ref.c:481 90 {*movsi_internal}
     (nil))
(insn 197 196 198 27 (set (reg:SI 680)
        (const_int 440 [0x1b8])) blake_ref.c:482 90 {*movsi_internal}
     (nil))
(insn 198 197 199 27 (parallel [
            (set (reg:SI 679 [ D.6033 ])
                (minus:SI (reg:SI 680)
                    (reg:SI 137 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:482 260 {*subsi_1}
     (nil))
(insn 199 198 200 27 (set (reg:DI 139 [ D.6036 ])
        (sign_extend:DI (reg:SI 679 [ D.6033 ]))) blake_ref.c:482 142 {*extendsidi2_rex64}
     (nil))
(insn 200 199 201 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 139 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(insn 201 200 202 27 (set (reg:QI 682 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 607 {*setcc_qi}
     (nil))
(insn 202 201 203 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 682 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 203 202 1020 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1031)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1031)
;;  succ:       29 [14.0%] 
;;              28 [86.0%]  (FALLTHRU)

;; basic block 28, loop depth 0, count 0, freq 243, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       27 [86.0%]  (FALLTHRU)
(note 1020 203 204 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 204 1020 205 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 137 [ D.6033 ])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (nil))
(insn 205 204 206 28 (set (reg:QI 684 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 607 {*setcc_qi}
     (nil))
(insn 206 205 207 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 684 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 207 206 1031 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 276)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 8372 (nil))
 -> 276)
;;  succ:       36 [83.7%] 
;;              29 [16.3%]  (FALLTHRU)

;; basic block 29, loop depth 0, count 0, freq 61, maybe hot
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       28 [16.3%]  (FALLTHRU)
;;              27 [14.0%] 
(code_label 1031 207 209 29 147 "" [1 uses])
(note 209 1031 210 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 29 (set (reg:DI 37 r8)
        (reg:DI 139 [ D.6036 ])) 89 {*movdi_internal}
     (nil))
(insn 211 210 212 29 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 212 211 213 29 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 213 212 214 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 214 213 215 29 (set (reg:SI 609 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 215 214 218 29 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       36 [100.0%]  (FALLTHRU)

;; basic block 30, loop depth 0, count 0, freq 692, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       26 [71.0%] 
(code_label 218 215 219 30 109 "" [1 uses])
(note 219 218 220 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 220 219 221 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.6033 ])
            (const_int 504 [0x1f8]))) blake_ref.c:485 7 {*cmpsi_1}
     (nil))
(jump_insn 221 220 222 30 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 240)
            (pc))) blake_ref.c:485 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 240)
;;  succ:       31 [29.0%]  (FALLTHRU)
;;              32 [71.0%] 

;; basic block 31, loop depth 0, count 0, freq 201, maybe hot
;;  prev block 30, next block 32, flags: (RTL)
;;  pred:       30 [29.0%]  (FALLTHRU)
(note 222 221 223 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 223 222 224 31 (parallel [
            (set (reg:SI 685)
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:487 217 {*addsi_1}
     (nil))
(insn 224 223 225 31 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 685)) blake_ref.c:487 90 {*movsi_internal}
     (nil))
(insn 225 224 226 31 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 512 [0x200])) blake_ref.c:488 90 {*movsi_internal}
     (nil))
(insn 226 225 227 31 (set (reg:DI 37 r8)
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 227 226 228 31 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 228 227 229 31 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 229 228 230 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 230 229 231 31 (parallel [
            (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                        (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                (plus:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:490 217 {*addsi_1}
     (nil))
(insn 231 230 232 31 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) 89 {*movdi_internal}
     (nil))
(insn 232 231 233 31 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 233 232 234 31 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 234 233 235 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 235 234 236 31 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:492 90 {*movsi_internal}
     (nil))
(insn 236 235 237 31 (set (reg:SI 609 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 237 236 240 31 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       36 [100.0%]  (FALLTHRU)

;; basic block 32, loop depth 0, count 0, freq 491, maybe hot
;;  prev block 31, next block 33, flags: (RTL)
;;  pred:       30 [71.0%] 
(code_label 240 237 241 32 112 "" [1 uses])
(note 241 240 242 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 32 (parallel [
            (set (reg:SI 143 [ D.6032 ])
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:496 217 {*addsi_1}
     (nil))
(insn 243 242 244 32 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 143 [ D.6032 ])) blake_ref.c:496 90 {*movsi_internal}
     (nil))
(insn 244 243 245 32 (parallel [
            (set (reg:SI 686 [ D.6035 ])
                (and:SI (reg:SI 90 [ D.6032 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:498 381 {*andsi_1}
     (nil))
(insn 245 244 246 32 (parallel [
            (set (reg:SI 146 [ D.6033 ])
                (plus:SI (reg:SI 686 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:498 217 {*addsi_1}
     (nil))
(insn 246 245 247 32 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 146 [ D.6033 ])) blake_ref.c:498 90 {*movsi_internal}
     (nil))
(insn 247 246 248 32 (set (reg:SI 688)
        (const_int 512 [0x200])) blake_ref.c:499 90 {*movsi_internal}
     (nil))
(insn 248 247 249 32 (parallel [
            (set (reg:SI 687 [ D.6033 ])
                (minus:SI (reg:SI 688)
                    (reg:SI 146 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:499 260 {*subsi_1}
     (nil))
(insn 249 248 250 32 (set (reg:DI 148 [ D.6036 ])
        (sign_extend:DI (reg:SI 687 [ D.6033 ]))) blake_ref.c:499 142 {*extendsidi2_rex64}
     (nil))
(insn 250 249 251 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 146 [ D.6033 ])
            (const_int 512 [0x200]))) blake_ref.c:295 7 {*cmpsi_1}
     (nil))
(insn 251 250 252 32 (set (reg:QI 690 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 607 {*setcc_qi}
     (nil))
(insn 252 251 253 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 690 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 253 252 1022 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1032)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1032)
;;  succ:       34 [14.0%] 
;;              33 [86.0%]  (FALLTHRU)

;; basic block 33, loop depth 0, count 0, freq 422, maybe hot
;;  prev block 32, next block 34, flags: (RTL)
;;  pred:       32 [86.0%]  (FALLTHRU)
(note 1022 253 254 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 254 1022 255 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 148 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(insn 255 254 256 33 (set (reg:QI 692 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:295 607 {*setcc_qi}
     (nil))
(insn 256 255 257 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 692 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:295 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 257 256 1032 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 8372 (nil))
 -> 265)
;;  succ:       35 [83.7%] 
;;              34 [16.3%]  (FALLTHRU)

;; basic block 34, loop depth 0, count 0, freq 240, maybe hot
;; Invalid sum of incoming frequencies 138, should be 240
;;  prev block 33, next block 35, flags: (RTL)
;;  pred:       33 [16.3%]  (FALLTHRU)
;;              32 [14.0%] 
(code_label 1032 257 259 34 148 "" [1 uses])
(note 259 1032 260 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 34 (set (reg:DI 37 r8)
        (reg:DI 148 [ D.6036 ])) 89 {*movdi_internal}
     (nil))
(insn 261 260 262 34 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 262 261 263 34 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 263 262 264 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 264 263 265 34 (set (reg:SI 143 [ D.6032 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       35 [100.0%]  (FALLTHRU)

;; basic block 35, loop depth 0, count 0, freq 491, maybe hot
;; Invalid sum of incoming frequencies 593, should be 491
;;  prev block 34, next block 36, flags: (RTL)
;;  pred:       34 [100.0%]  (FALLTHRU)
;;              33 [83.7%] 
(code_label 265 264 266 35 113 "" [1 uses])
(note 266 265 267 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 35 (parallel [
            (set (reg:SI 693)
                (plus:SI (reg:SI 143 [ D.6032 ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:500 217 {*addsi_1}
     (nil))
(insn 268 267 269 35 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 693)) blake_ref.c:500 90 {*movsi_internal}
     (nil))
(insn 269 268 270 35 (set (reg:DI 37 r8)
        (const_int 440 [0x1b8])) 89 {*movdi_internal}
     (nil))
(insn 270 269 271 35 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 271 270 272 35 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 272 271 273 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 273 272 274 35 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:502 90 {*movsi_internal}
     (nil))
(insn 274 273 275 35 (set (reg:SI 609 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 275 274 276 35 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       36 [100.0%]  (FALLTHRU)

;; basic block 36, loop depth 0, count 0, freq 975, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       29 [100.0%]  (FALLTHRU)
;;              31 [100.0%]  (FALLTHRU)
;;              35 [100.0%]  (FALLTHRU)
;;              28 [83.7%] 
(code_label 276 275 277 36 110 "" [1 uses])
(note 277 276 278 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 278 277 279 36 (parallel [
            (set (reg:SI 694)
                (plus:SI (reg:SI 609 [ D.6031 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:505 217 {*addsi_1}
     (nil))
(insn 279 278 280 36 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 694)) blake_ref.c:505 90 {*movsi_internal}
     (nil))
(insn 280 279 281 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 224 [0xe0]))) blake_ref.c:506 7 {*cmpsi_1}
     (nil))
(jump_insn 281 280 282 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 291)
            (pc))) blake_ref.c:506 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 291)
;;  succ:       37 [28.0%]  (FALLTHRU)
;;              38 [72.0%] 

;; basic block 37, loop depth 0, count 0, freq 273, maybe hot
;;  prev block 36, next block 38, flags: (RTL)
;;  pred:       36 [28.0%]  (FALLTHRU)
(note 282 281 283 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 283 282 284 37 (parallel [
            (set (reg:DI 695)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 284 283 285 37 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 285 284 286 37 (set (reg:DI 1 dx)
        (reg:DI 695)) 89 {*movdi_internal}
     (nil))
(insn 286 285 287 37 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 287 286 288 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 288 287 291 37 (set (reg:SI 87 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       39 [100.0%]  (FALLTHRU)

;; basic block 38, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 37, next block 39, flags: (RTL)
;;  pred:       36 [72.0%] 
(code_label 291 288 292 38 115 "" [1 uses])
(note 292 291 293 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 293 292 294 38 (parallel [
            (set (reg:DI 696)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 294 293 295 38 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 295 294 296 38 (set (reg:DI 1 dx)
        (reg:DI 696)) 89 {*movdi_internal}
     (nil))
(insn 296 295 297 38 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 297 296 298 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 298 297 299 38 (set (reg:SI 87 [ D.6031 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       39 [100.0%]  (FALLTHRU)

;; basic block 39, loop depth 0, count 0, freq 1950, maybe hot
;;  prev block 38, next block 40, flags: (RTL)
;;  pred:       25 [100.0%]  (FALLTHRU)
;;              37 [100.0%]  (FALLTHRU)
;;              38 [100.0%]  (FALLTHRU)
(code_label 299 298 300 39 108 "" [0 uses])
(note 300 299 301 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 301 300 302 39 (parallel [
            (set (reg:SI 697)
                (plus:SI (reg:SI 87 [ D.6031 ])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:511 217 {*addsi_1}
     (nil))
(insn 302 301 303 39 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 697)) blake_ref.c:511 90 {*movsi_internal}
     (nil))
(insn 303 302 304 39 (parallel [
            (set (reg:DI 698)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 304 303 305 39 (set (reg:DI 37 r8)
        (const_int 64 [0x40])) 89 {*movdi_internal}
     (nil))
(insn 305 304 306 39 (set (reg:DI 1 dx)
        (reg:DI 698)) 89 {*movdi_internal}
     (nil))
(insn 306 305 307 39 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 307 306 308 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       40 [100.0%]  (FALLTHRU)

;; basic block 40, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 39, next block 41, flags: (RTL)
;;  pred:       21 [100.0%]  (FALLTHRU)
;;              39 [100.0%]  (FALLTHRU)
(code_label 308 307 309 40 105 "" [0 uses])
(note 309 308 310 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 310 309 311 40 (set (reg:SI 700)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 90 {*movsi_internal}
     (nil))
(insn 311 310 312 40 (parallel [
            (set (reg:SI 699 [ D.6032 ])
                (lshiftrt:SI (reg:SI 700)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:515 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 312 311 313 40 (set (mem:QI (reg/v/f:DI 634 [ hashval ]) [0 *hashval_6(D)+0 S1 A8])
        (subreg:QI (reg:SI 699 [ D.6032 ]) 0)) blake_ref.c:515 93 {*movqi_internal}
     (nil))
(insn 313 312 314 40 (set (reg:SI 702)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 90 {*movsi_internal}
     (nil))
(insn 314 313 315 40 (parallel [
            (set (reg:SI 701 [ D.6032 ])
                (lshiftrt:SI (reg:SI 702)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:515 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 315 314 316 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 1 [0x1])) [0 MEM[(BitSequence *)hashval_6(D) + 1B]+0 S1 A8])
        (subreg:QI (reg:SI 701 [ D.6032 ]) 0)) blake_ref.c:515 93 {*movqi_internal}
     (nil))
(insn 316 315 317 40 (set (reg:SI 704)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 90 {*movsi_internal}
     (nil))
(insn 317 316 318 40 (parallel [
            (set (reg:SI 703 [ D.6032 ])
                (lshiftrt:SI (reg:SI 704)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:515 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 318 317 319 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 2 [0x2])) [0 MEM[(BitSequence *)hashval_6(D) + 2B]+0 S1 A8])
        (subreg:QI (reg:SI 703 [ D.6032 ]) 0)) blake_ref.c:515 93 {*movqi_internal}
     (nil))
(insn 319 318 320 40 (set (reg:SI 705)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 16 [0x10])) [2 state_4(D)->h32+0 S4 A64])) blake_ref.c:515 90 {*movsi_internal}
     (nil))
(insn 320 319 321 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 3 [0x3])) [0 MEM[(BitSequence *)hashval_6(D) + 3B]+0 S1 A8])
        (subreg:QI (reg:SI 705) 0)) blake_ref.c:515 93 {*movqi_internal}
     (nil))
(insn 321 320 322 40 (set (reg:SI 707)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 90 {*movsi_internal}
     (nil))
(insn 322 321 323 40 (parallel [
            (set (reg:SI 706 [ D.6032 ])
                (lshiftrt:SI (reg:SI 707)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:516 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
            (const_int 24 [0x18]))
        (nil)))
(insn 323 322 324 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 4 [0x4])) [0 MEM[(BitSequence *)hashval_6(D) + 4B]+0 S1 A8])
        (subreg:QI (reg:SI 706 [ D.6032 ]) 0)) blake_ref.c:516 93 {*movqi_internal}
     (nil))
(insn 324 323 325 40 (set (reg:SI 709)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 90 {*movsi_internal}
     (nil))
(insn 325 324 326 40 (parallel [
            (set (reg:SI 708 [ D.6032 ])
                (lshiftrt:SI (reg:SI 709)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:516 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
            (const_int 16 [0x10]))
        (nil)))
(insn 326 325 327 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 5 [0x5])) [0 MEM[(BitSequence *)hashval_6(D) + 5B]+0 S1 A8])
        (subreg:QI (reg:SI 708 [ D.6032 ]) 0)) blake_ref.c:516 93 {*movqi_internal}
     (nil))
(insn 327 326 328 40 (set (reg:SI 711)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 90 {*movsi_internal}
     (nil))
(insn 328 327 329 40 (parallel [
            (set (reg:SI 710 [ D.6032 ])
                (lshiftrt:SI (reg:SI 711)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:516 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 329 328 330 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 6 [0x6])) [0 MEM[(BitSequence *)hashval_6(D) + 6B]+0 S1 A8])
        (subreg:QI (reg:SI 710 [ D.6032 ]) 0)) blake_ref.c:516 93 {*movqi_internal}
     (nil))
(insn 330 329 331 40 (set (reg:SI 712)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 20 [0x14])) [2 state_4(D)->h32+4 S4 A32])) blake_ref.c:516 90 {*movsi_internal}
     (nil))
(insn 331 330 332 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 7 [0x7])) [0 MEM[(BitSequence *)hashval_6(D) + 7B]+0 S1 A8])
        (subreg:QI (reg:SI 712) 0)) blake_ref.c:516 93 {*movqi_internal}
     (nil))
(insn 332 331 333 40 (set (reg:SI 714)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 90 {*movsi_internal}
     (nil))
(insn 333 332 334 40 (parallel [
            (set (reg:SI 713 [ D.6032 ])
                (lshiftrt:SI (reg:SI 714)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:517 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 334 333 335 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 8 [0x8])) [0 MEM[(BitSequence *)hashval_6(D) + 8B]+0 S1 A8])
        (subreg:QI (reg:SI 713 [ D.6032 ]) 0)) blake_ref.c:517 93 {*movqi_internal}
     (nil))
(insn 335 334 336 40 (set (reg:SI 716)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 90 {*movsi_internal}
     (nil))
(insn 336 335 337 40 (parallel [
            (set (reg:SI 715 [ D.6032 ])
                (lshiftrt:SI (reg:SI 716)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:517 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 337 336 338 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 9 [0x9])) [0 MEM[(BitSequence *)hashval_6(D) + 9B]+0 S1 A8])
        (subreg:QI (reg:SI 715 [ D.6032 ]) 0)) blake_ref.c:517 93 {*movqi_internal}
     (nil))
(insn 338 337 339 40 (set (reg:SI 718)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 90 {*movsi_internal}
     (nil))
(insn 339 338 340 40 (parallel [
            (set (reg:SI 717 [ D.6032 ])
                (lshiftrt:SI (reg:SI 718)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:517 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 340 339 341 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 10 [0xa])) [0 MEM[(BitSequence *)hashval_6(D) + 10B]+0 S1 A8])
        (subreg:QI (reg:SI 717 [ D.6032 ]) 0)) blake_ref.c:517 93 {*movqi_internal}
     (nil))
(insn 341 340 342 40 (set (reg:SI 719)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 24 [0x18])) [2 state_4(D)->h32+8 S4 A64])) blake_ref.c:517 90 {*movsi_internal}
     (nil))
(insn 342 341 343 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 11 [0xb])) [0 MEM[(BitSequence *)hashval_6(D) + 11B]+0 S1 A8])
        (subreg:QI (reg:SI 719) 0)) blake_ref.c:517 93 {*movqi_internal}
     (nil))
(insn 343 342 344 40 (set (reg:SI 721)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 90 {*movsi_internal}
     (nil))
(insn 344 343 345 40 (parallel [
            (set (reg:SI 720 [ D.6032 ])
                (lshiftrt:SI (reg:SI 721)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:518 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
            (const_int 24 [0x18]))
        (nil)))
(insn 345 344 346 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 12 [0xc])) [0 MEM[(BitSequence *)hashval_6(D) + 12B]+0 S1 A8])
        (subreg:QI (reg:SI 720 [ D.6032 ]) 0)) blake_ref.c:518 93 {*movqi_internal}
     (nil))
(insn 346 345 347 40 (set (reg:SI 723)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 90 {*movsi_internal}
     (nil))
(insn 347 346 348 40 (parallel [
            (set (reg:SI 722 [ D.6032 ])
                (lshiftrt:SI (reg:SI 723)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:518 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
            (const_int 16 [0x10]))
        (nil)))
(insn 348 347 349 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 13 [0xd])) [0 MEM[(BitSequence *)hashval_6(D) + 13B]+0 S1 A8])
        (subreg:QI (reg:SI 722 [ D.6032 ]) 0)) blake_ref.c:518 93 {*movqi_internal}
     (nil))
(insn 349 348 350 40 (set (reg:SI 725)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 90 {*movsi_internal}
     (nil))
(insn 350 349 351 40 (parallel [
            (set (reg:SI 724 [ D.6032 ])
                (lshiftrt:SI (reg:SI 725)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:518 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 351 350 352 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 14 [0xe])) [0 MEM[(BitSequence *)hashval_6(D) + 14B]+0 S1 A8])
        (subreg:QI (reg:SI 724 [ D.6032 ]) 0)) blake_ref.c:518 93 {*movqi_internal}
     (nil))
(insn 352 351 353 40 (set (reg:SI 726)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 28 [0x1c])) [2 state_4(D)->h32+12 S4 A32])) blake_ref.c:518 90 {*movsi_internal}
     (nil))
(insn 353 352 354 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 15 [0xf])) [0 MEM[(BitSequence *)hashval_6(D) + 15B]+0 S1 A8])
        (subreg:QI (reg:SI 726) 0)) blake_ref.c:518 93 {*movqi_internal}
     (nil))
(insn 354 353 355 40 (set (reg:SI 728)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 90 {*movsi_internal}
     (nil))
(insn 355 354 356 40 (parallel [
            (set (reg:SI 727 [ D.6032 ])
                (lshiftrt:SI (reg:SI 728)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:519 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 356 355 357 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 16 [0x10])) [0 MEM[(BitSequence *)hashval_6(D) + 16B]+0 S1 A8])
        (subreg:QI (reg:SI 727 [ D.6032 ]) 0)) blake_ref.c:519 93 {*movqi_internal}
     (nil))
(insn 357 356 358 40 (set (reg:SI 730)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 90 {*movsi_internal}
     (nil))
(insn 358 357 359 40 (parallel [
            (set (reg:SI 729 [ D.6032 ])
                (lshiftrt:SI (reg:SI 730)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:519 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 359 358 360 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 17 [0x11])) [0 MEM[(BitSequence *)hashval_6(D) + 17B]+0 S1 A8])
        (subreg:QI (reg:SI 729 [ D.6032 ]) 0)) blake_ref.c:519 93 {*movqi_internal}
     (nil))
(insn 360 359 361 40 (set (reg:SI 732)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 90 {*movsi_internal}
     (nil))
(insn 361 360 362 40 (parallel [
            (set (reg:SI 731 [ D.6032 ])
                (lshiftrt:SI (reg:SI 732)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:519 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 362 361 363 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 18 [0x12])) [0 MEM[(BitSequence *)hashval_6(D) + 18B]+0 S1 A8])
        (subreg:QI (reg:SI 731 [ D.6032 ]) 0)) blake_ref.c:519 93 {*movqi_internal}
     (nil))
(insn 363 362 364 40 (set (reg:SI 733)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 32 [0x20])) [2 state_4(D)->h32+16 S4 A64])) blake_ref.c:519 90 {*movsi_internal}
     (nil))
(insn 364 363 365 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 19 [0x13])) [0 MEM[(BitSequence *)hashval_6(D) + 19B]+0 S1 A8])
        (subreg:QI (reg:SI 733) 0)) blake_ref.c:519 93 {*movqi_internal}
     (nil))
(insn 365 364 366 40 (set (reg:SI 735)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 90 {*movsi_internal}
     (nil))
(insn 366 365 367 40 (parallel [
            (set (reg:SI 734 [ D.6032 ])
                (lshiftrt:SI (reg:SI 735)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:520 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
            (const_int 24 [0x18]))
        (nil)))
(insn 367 366 368 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 20 [0x14])) [0 MEM[(BitSequence *)hashval_6(D) + 20B]+0 S1 A8])
        (subreg:QI (reg:SI 734 [ D.6032 ]) 0)) blake_ref.c:520 93 {*movqi_internal}
     (nil))
(insn 368 367 369 40 (set (reg:SI 737)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 90 {*movsi_internal}
     (nil))
(insn 369 368 370 40 (parallel [
            (set (reg:SI 736 [ D.6032 ])
                (lshiftrt:SI (reg:SI 737)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:520 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
            (const_int 16 [0x10]))
        (nil)))
(insn 370 369 371 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 21 [0x15])) [0 MEM[(BitSequence *)hashval_6(D) + 21B]+0 S1 A8])
        (subreg:QI (reg:SI 736 [ D.6032 ]) 0)) blake_ref.c:520 93 {*movqi_internal}
     (nil))
(insn 371 370 372 40 (set (reg:SI 739)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 90 {*movsi_internal}
     (nil))
(insn 372 371 373 40 (parallel [
            (set (reg:SI 738 [ D.6032 ])
                (lshiftrt:SI (reg:SI 739)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:520 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 373 372 374 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 22 [0x16])) [0 MEM[(BitSequence *)hashval_6(D) + 22B]+0 S1 A8])
        (subreg:QI (reg:SI 738 [ D.6032 ]) 0)) blake_ref.c:520 93 {*movqi_internal}
     (nil))
(insn 374 373 375 40 (set (reg:SI 740)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 36 [0x24])) [2 state_4(D)->h32+20 S4 A32])) blake_ref.c:520 90 {*movsi_internal}
     (nil))
(insn 375 374 376 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 23 [0x17])) [0 MEM[(BitSequence *)hashval_6(D) + 23B]+0 S1 A8])
        (subreg:QI (reg:SI 740) 0)) blake_ref.c:520 93 {*movqi_internal}
     (nil))
(insn 376 375 377 40 (set (reg:SI 742)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 90 {*movsi_internal}
     (nil))
(insn 377 376 378 40 (parallel [
            (set (reg:SI 741 [ D.6032 ])
                (lshiftrt:SI (reg:SI 742)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:521 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 378 377 379 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 24 [0x18])) [0 MEM[(BitSequence *)hashval_6(D) + 24B]+0 S1 A8])
        (subreg:QI (reg:SI 741 [ D.6032 ]) 0)) blake_ref.c:521 93 {*movqi_internal}
     (nil))
(insn 379 378 380 40 (set (reg:SI 744)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 90 {*movsi_internal}
     (nil))
(insn 380 379 381 40 (parallel [
            (set (reg:SI 743 [ D.6032 ])
                (lshiftrt:SI (reg:SI 744)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:521 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 381 380 382 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 25 [0x19])) [0 MEM[(BitSequence *)hashval_6(D) + 25B]+0 S1 A8])
        (subreg:QI (reg:SI 743 [ D.6032 ]) 0)) blake_ref.c:521 93 {*movqi_internal}
     (nil))
(insn 382 381 383 40 (set (reg:SI 746)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 90 {*movsi_internal}
     (nil))
(insn 383 382 384 40 (parallel [
            (set (reg:SI 745 [ D.6032 ])
                (lshiftrt:SI (reg:SI 746)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:521 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 384 383 385 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 26 [0x1a])) [0 MEM[(BitSequence *)hashval_6(D) + 26B]+0 S1 A8])
        (subreg:QI (reg:SI 745 [ D.6032 ]) 0)) blake_ref.c:521 93 {*movqi_internal}
     (nil))
(insn 385 384 386 40 (set (reg:SI 747)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 40 [0x28])) [2 state_4(D)->h32+24 S4 A64])) blake_ref.c:521 90 {*movsi_internal}
     (nil))
(insn 386 385 387 40 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 27 [0x1b])) [0 MEM[(BitSequence *)hashval_6(D) + 27B]+0 S1 A8])
        (subreg:QI (reg:SI 747) 0)) blake_ref.c:521 93 {*movqi_internal}
     (nil))
(insn 387 386 388 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 256 [0x100]))) blake_ref.c:523 7 {*cmpsi_1}
     (nil))
(jump_insn 388 387 389 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 981)
            (pc))) blake_ref.c:523 612 {*jcc_1}
     (int_list:REG_BR_PROB 6218 (nil))
 -> 981)
;;  succ:       41 [37.8%]  (FALLTHRU)
;;              85 [62.2%] 

;; basic block 41, loop depth 0, count 0, freq 1475, maybe hot
;;  prev block 40, next block 42, flags: (RTL)
;;  pred:       40 [37.8%]  (FALLTHRU)
(note 389 388 390 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 390 389 391 41 (set (reg:SI 749)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 90 {*movsi_internal}
     (nil))
(insn 391 390 392 41 (parallel [
            (set (reg:SI 748 [ D.6032 ])
                (lshiftrt:SI (reg:SI 749)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:524 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])
            (const_int 24 [0x18]))
        (nil)))
(insn 392 391 393 41 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 28 [0x1c])) [0 MEM[(BitSequence *)hashval_6(D) + 28B]+0 S1 A8])
        (subreg:QI (reg:SI 748 [ D.6032 ]) 0)) blake_ref.c:524 93 {*movqi_internal}
     (nil))
(insn 393 392 394 41 (set (reg:SI 751)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 90 {*movsi_internal}
     (nil))
(insn 394 393 395 41 (parallel [
            (set (reg:SI 750 [ D.6032 ])
                (lshiftrt:SI (reg:SI 751)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:524 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])
            (const_int 16 [0x10]))
        (nil)))
(insn 395 394 396 41 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 29 [0x1d])) [0 MEM[(BitSequence *)hashval_6(D) + 29B]+0 S1 A8])
        (subreg:QI (reg:SI 750 [ D.6032 ]) 0)) blake_ref.c:524 93 {*movqi_internal}
     (nil))
(insn 396 395 397 41 (set (reg:SI 753)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 90 {*movsi_internal}
     (nil))
(insn 397 396 398 41 (parallel [
            (set (reg:SI 752 [ D.6032 ])
                (lshiftrt:SI (reg:SI 753)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:524 544 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 398 397 399 41 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 30 [0x1e])) [0 MEM[(BitSequence *)hashval_6(D) + 30B]+0 S1 A8])
        (subreg:QI (reg:SI 752 [ D.6032 ]) 0)) blake_ref.c:524 93 {*movqi_internal}
     (nil))
(insn 399 398 400 41 (set (reg:SI 754)
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 44 [0x2c])) [2 state_4(D)->h32+28 S4 A32])) blake_ref.c:524 90 {*movsi_internal}
     (nil))
(insn 400 399 405 41 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 31 [0x1f])) [0 MEM[(BitSequence *)hashval_6(D) + 31B]+0 S1 A8])
        (subreg:QI (reg:SI 754) 0)) blake_ref.c:524 93 {*movqi_internal}
     (nil))
;;  succ:       85 [100.0%]  (FALLTHRU)

;; basic block 42, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 41, next block 43, flags: (RTL)
;;  pred:       2 [61.0%] 
(code_label 405 400 406 42 93 "" [1 uses])
(note 406 405 407 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 408 42 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 zz+0 S1 A32])
        (const_int 0 [0])) blake_ref.c:535 93 {*movqi_internal}
     (nil))
(insn 408 407 409 42 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -19 [0xffffffffffffffed])) [0 zo+0 S1 A8])
        (const_int 1 [0x1])) blake_ref.c:535 93 {*movqi_internal}
     (nil))
(insn 409 408 410 42 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0 oz+0 S1 A16])
        (const_int -128 [0xffffffffffffff80])) blake_ref.c:535 93 {*movqi_internal}
     (nil))
(insn 410 409 411 42 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -17 [0xffffffffffffffef])) [0 oo+0 S1 A8])
        (const_int -127 [0xffffffffffffff81])) blake_ref.c:535 93 {*movqi_internal}
     (nil))
(insn 411 410 412 42 (set (reg:DI 241 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) blake_ref.c:539 89 {*movdi_internal}
     (nil))
(insn 412 411 413 42 (set (reg:SI 242 [ D.6033 ])
        (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])) blake_ref.c:539 90 {*movsi_internal}
     (nil))
(insn 413 412 414 42 (set (reg:DI 243 [ D.6036 ])
        (sign_extend:DI (reg:SI 242 [ D.6033 ]))) blake_ref.c:539 142 {*extendsidi2_rex64}
     (nil))
(insn 414 413 415 42 (parallel [
            (set (reg/v:DI 244 [ low ])
                (plus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 243 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:539 218 {*adddi_1}
     (nil))
(insn 415 414 416 42 (set (reg/v:DI 245 [ high ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 208 [0xd0])) [3 state_4(D)->t64+8 S8 A64])) blake_ref.c:540 89 {*movdi_internal}
     (nil))
(insn 416 415 417 42 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 243 [ D.6036 ])
            (reg/v:DI 244 [ low ]))) blake_ref.c:541 8 {*cmpdi_1}
     (nil))
(jump_insn 417 416 418 42 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 420)
            (pc))) blake_ref.c:541 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 420)
;;  succ:       43 [50.0%]  (FALLTHRU)
;;              44 [50.0%] 

;; basic block 43, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 42, next block 44, flags: (RTL)
;;  pred:       42 [50.0%]  (FALLTHRU)
(note 418 417 419 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 419 418 420 43 (parallel [
            (set (reg/v:DI 245 [ high ])
                (plus:DI (reg/v:DI 245 [ high ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:542 218 {*adddi_1}
     (nil))
;;  succ:       44 [100.0%]  (FALLTHRU)

;; basic block 44, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 43, next block 45, flags: (RTL)
;;  pred:       42 [50.0%] 
;;              43 [100.0%]  (FALLTHRU)
(code_label 420 419 421 44 118 "" [1 uses])
(note 421 420 422 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 422 421 423 44 (parallel [
            (set (reg:DI 246 [ D.6036 ])
                (lshiftrt:DI (reg/v:DI 245 [ high ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 546 {*lshrdi3_1}
     (nil))
(insn 423 422 424 44 (set (reg:SI 247 [ D.6032 ])
        (subreg:SI (reg:DI 246 [ D.6036 ]) 0)) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn 424 423 425 44 (parallel [
            (set (reg:SI 755 [ D.6032 ])
                (lshiftrt:SI (reg:SI 247 [ D.6032 ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (nil))
(insn 425 424 426 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 msglen+0 S1 A128])
        (subreg:QI (reg:SI 755 [ D.6032 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 426 425 427 44 (parallel [
            (set (reg:SI 756 [ D.6032 ])
                (lshiftrt:SI (reg:SI 247 [ D.6032 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (nil))
(insn 427 426 428 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -15 [0xfffffffffffffff1])) [0 msglen+1 S1 A8])
        (subreg:QI (reg:SI 756 [ D.6032 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 428 427 429 44 (parallel [
            (set (reg:SI 757 [ D.6032 ])
                (lshiftrt:SI (reg:SI 247 [ D.6032 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (nil))
(insn 429 428 430 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -14 [0xfffffffffffffff2])) [0 msglen+2 S1 A16])
        (subreg:QI (reg:SI 757 [ D.6032 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 430 429 431 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -13 [0xfffffffffffffff3])) [0 msglen+3 S1 A8])
        (subreg:QI (reg:DI 246 [ D.6036 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 431 430 432 44 (set (reg:SI 255 [ D.6032 ])
        (subreg:SI (reg/v:DI 245 [ high ]) 0)) blake_ref.c:543 90 {*movsi_internal}
     (nil))
(insn 432 431 433 44 (parallel [
            (set (reg:SI 758 [ D.6032 ])
                (lshiftrt:SI (reg:SI 255 [ D.6032 ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (nil))
(insn 433 432 434 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 msglen+4 S1 A32])
        (subreg:QI (reg:SI 758 [ D.6032 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 434 433 435 44 (parallel [
            (set (reg:SI 759 [ D.6032 ])
                (lshiftrt:SI (reg:SI 255 [ D.6032 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (nil))
(insn 435 434 436 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -11 [0xfffffffffffffff5])) [0 msglen+5 S1 A8])
        (subreg:QI (reg:SI 759 [ D.6032 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 436 435 437 44 (parallel [
            (set (reg:SI 760 [ D.6032 ])
                (lshiftrt:SI (reg:SI 255 [ D.6032 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:543 544 {*lshrsi3_1}
     (nil))
(insn 437 436 438 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -10 [0xfffffffffffffff6])) [0 msglen+6 S1 A16])
        (subreg:QI (reg:SI 760 [ D.6032 ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 438 437 439 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -9 [0xfffffffffffffff7])) [0 msglen+7 S1 A8])
        (subreg:QI (reg/v:DI 245 [ high ]) 0)) blake_ref.c:543 93 {*movqi_internal}
     (nil))
(insn 439 438 440 44 (parallel [
            (set (reg:DI 263 [ D.6036 ])
                (lshiftrt:DI (reg/v:DI 244 [ low ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 546 {*lshrdi3_1}
     (nil))
(insn 440 439 441 44 (set (reg:SI 264 [ D.6032 ])
        (subreg:SI (reg:DI 263 [ D.6036 ]) 0)) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn 441 440 442 44 (parallel [
            (set (reg:SI 761 [ D.6032 ])
                (lshiftrt:SI (reg:SI 264 [ D.6032 ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (nil))
(insn 442 441 443 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 msglen+8 S1 A64])
        (subreg:QI (reg:SI 761 [ D.6032 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 443 442 444 44 (parallel [
            (set (reg:SI 762 [ D.6032 ])
                (lshiftrt:SI (reg:SI 264 [ D.6032 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (nil))
(insn 444 443 445 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -7 [0xfffffffffffffff9])) [0 msglen+9 S1 A8])
        (subreg:QI (reg:SI 762 [ D.6032 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 445 444 446 44 (parallel [
            (set (reg:SI 763 [ D.6032 ])
                (lshiftrt:SI (reg:SI 264 [ D.6032 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (nil))
(insn 446 445 447 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -6 [0xfffffffffffffffa])) [0 msglen+10 S1 A16])
        (subreg:QI (reg:SI 763 [ D.6032 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 447 446 448 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -5 [0xfffffffffffffffb])) [0 msglen+11 S1 A8])
        (subreg:QI (reg:DI 263 [ D.6036 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 448 447 449 44 (set (reg:SI 272 [ D.6032 ])
        (subreg:SI (reg/v:DI 244 [ low ]) 0)) blake_ref.c:544 90 {*movsi_internal}
     (nil))
(insn 449 448 450 44 (parallel [
            (set (reg:SI 764 [ D.6032 ])
                (lshiftrt:SI (reg:SI 272 [ D.6032 ])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (nil))
(insn 450 449 451 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 msglen+12 S1 A32])
        (subreg:QI (reg:SI 764 [ D.6032 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 451 450 452 44 (parallel [
            (set (reg:SI 765 [ D.6032 ])
                (lshiftrt:SI (reg:SI 272 [ D.6032 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (nil))
(insn 452 451 453 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -3 [0xfffffffffffffffd])) [0 msglen+13 S1 A8])
        (subreg:QI (reg:SI 765 [ D.6032 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 453 452 454 44 (parallel [
            (set (reg:SI 766 [ D.6032 ])
                (lshiftrt:SI (reg:SI 272 [ D.6032 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:544 544 {*lshrsi3_1}
     (nil))
(insn 454 453 455 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -2 [0xfffffffffffffffe])) [0 msglen+14 S1 A16])
        (subreg:QI (reg:SI 766 [ D.6032 ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 455 454 456 44 (set (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -1 [0xffffffffffffffff])) [0 msglen+15 S1 A8])
        (subreg:QI (reg/v:DI 244 [ low ]) 0)) blake_ref.c:544 93 {*movqi_internal}
     (nil))
(insn 456 455 457 44 (set (reg:SI 280 [ D.6035 ])
        (reg:SI 242 [ D.6033 ])) blake_ref.c:546 90 {*movsi_internal}
     (nil))
(insn 457 456 458 44 (parallel [
            (set (reg:SI 767 [ D.6035 ])
                (and:SI (reg:SI 280 [ D.6035 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:546 381 {*andsi_1}
     (nil))
(insn 458 457 459 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 767 [ D.6035 ])
            (const_int 0 [0]))) blake_ref.c:546 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 459 458 460 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 587)
            (pc))) blake_ref.c:546 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 587)
;;  succ:       45 [50.0%]  (FALLTHRU)
;;              65 [50.0%] 

;; basic block 45, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 44, next block 46, flags: (RTL)
;;  pred:       44 [50.0%]  (FALLTHRU)
(note 460 459 461 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 461 460 462 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 242 [ D.6033 ])
            (const_int 888 [0x378]))) blake_ref.c:549 7 {*cmpsi_1}
     (nil))
(jump_insn 462 461 463 45 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 487)
            (pc))) blake_ref.c:549 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 487)
;;  succ:       46 [28.0%]  (FALLTHRU)
;;              49 [72.0%] 

;; basic block 46, loop depth 0, count 0, freq 854, maybe hot
;;  prev block 45, next block 47, flags: (RTL)
;;  pred:       45 [28.0%]  (FALLTHRU)
(note 463 462 464 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 464 463 465 46 (parallel [
            (set (reg:DI 768)
                (plus:DI (reg:DI 241 [ D.6036 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:551 218 {*adddi_1}
     (nil))
(insn 465 464 466 46 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 768)) blake_ref.c:551 89 {*movdi_internal}
     (nil))
(insn 466 465 467 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:552 7 {*cmpsi_1}
     (nil))
(jump_insn 467 466 468 46 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 477)
            (pc))) blake_ref.c:552 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 477)
;;  succ:       47 [28.0%]  (FALLTHRU)
;;              48 [72.0%] 

;; basic block 47, loop depth 0, count 0, freq 239, maybe hot
;;  prev block 46, next block 48, flags: (RTL)
;;  pred:       46 [28.0%]  (FALLTHRU)
(note 468 467 469 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 469 468 470 47 (parallel [
            (set (reg:DI 769)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -18 [0xffffffffffffffee])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 470 469 471 47 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 471 470 472 47 (set (reg:DI 1 dx)
        (reg:DI 769)) 89 {*movdi_internal}
     (nil))
(insn 472 471 473 47 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 473 472 474 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 474 473 477 47 (set (reg:DI 292 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       62 [100.0%]  (FALLTHRU)

;; basic block 48, loop depth 0, count 0, freq 615, maybe hot
;;  prev block 47, next block 49, flags: (RTL)
;;  pred:       46 [72.0%] 
(code_label 477 474 478 48 121 "" [1 uses])
(note 478 477 479 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 479 478 480 48 (parallel [
            (set (reg:DI 770)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -17 [0xffffffffffffffef])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 480 479 481 48 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 481 480 482 48 (set (reg:DI 1 dx)
        (reg:DI 770)) 89 {*movdi_internal}
     (nil))
(insn 482 481 483 48 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 483 482 484 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 484 483 487 48 (set (reg:DI 292 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       62 [100.0%]  (FALLTHRU)

;; basic block 49, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 48, next block 50, flags: (RTL)
;;  pred:       45 [72.0%] 
(code_label 487 484 488 49 120 "" [1 uses])
(note 488 487 489 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 489 488 490 49 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 242 [ D.6033 ])
            (const_int 887 [0x377]))) blake_ref.c:558 7 {*cmpsi_1}
     (nil))
(jump_insn 490 489 491 49 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) blake_ref.c:558 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 498)
;;  succ:       50 [50.0%]  (FALLTHRU)
;;              52 [50.0%] 

;; basic block 50, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 49, next block 51, flags: (RTL)
;;  pred:       49 [50.0%]  (FALLTHRU)
(note 491 490 492 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 492 491 493 50 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 242 [ D.6033 ])
            (const_int 0 [0]))) blake_ref.c:560 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 493 492 494 50 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1000)
            (pc))) blake_ref.c:560 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 1000)
;;  succ:       51 [50.0%]  (FALLTHRU)
;;              87 [50.0%] 

;; basic block 51, loop depth 0, count 0, freq 549, maybe hot
;;  prev block 50, next block 52, flags: (RTL)
;;  pred:       50 [50.0%]  (FALLTHRU)
(note 494 493 495 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 495 494 498 51 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:561 90 {*movsi_internal}
     (nil))
;;  succ:       87 [100.0%]  (FALLTHRU)

;; basic block 52, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 51, next block 53, flags: (RTL)
;;  pred:       49 [50.0%] 
(code_label 498 495 499 52 123 "" [1 uses])
(note 499 498 500 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 500 499 501 52 (set (reg:SI 772)
        (const_int 1024 [0x400])) blake_ref.c:568 90 {*movsi_internal}
     (nil))
(insn 501 500 502 52 (parallel [
            (set (reg:SI 771 [ D.6033 ])
                (minus:SI (reg:SI 772)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:568 260 {*subsi_1}
     (nil))
(insn 502 501 503 52 (set (reg:DI 287 [ D.6036 ])
        (sign_extend:DI (reg:SI 771 [ D.6033 ]))) blake_ref.c:568 142 {*extendsidi2_rex64}
     (nil))
(insn 503 502 504 52 (parallel [
            (set (reg:DI 288 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 287 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:568 261 {*subdi_1}
     (nil))
(insn 504 503 505 52 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 288 [ D.6036 ])) blake_ref.c:568 89 {*movdi_internal}
     (nil))
(insn 505 504 506 52 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 242 [ D.6033 ])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (nil))
(insn 506 505 507 52 (set (reg:QI 774 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 607 {*setcc_qi}
     (nil))
(insn 507 506 508 52 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 774 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 508 507 1024 52 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1033)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1033)
;;  succ:       54 [14.0%] 
;;              53 [86.0%]  (FALLTHRU)

;; basic block 53, loop depth 0, count 0, freq 944, maybe hot
;;  prev block 52, next block 54, flags: (RTL)
;;  pred:       52 [86.0%]  (FALLTHRU)
(note 1024 508 509 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 509 1024 510 53 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 287 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(insn 510 509 511 53 (set (reg:QI 776 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 607 {*setcc_qi}
     (nil))
(insn 511 510 512 53 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 776 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 512 511 1033 53 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 520)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 8372 (nil))
 -> 520)
;;  succ:       55 [83.7%] 
;;              54 [16.3%]  (FALLTHRU)

;; basic block 54, loop depth 0, count 0, freq 537, maybe hot
;; Invalid sum of incoming frequencies 308, should be 537
;;  prev block 53, next block 55, flags: (RTL)
;;  pred:       53 [16.3%]  (FALLTHRU)
;;              52 [14.0%] 
(code_label 1033 512 514 54 149 "" [1 uses])
(note 514 1033 515 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 515 514 516 54 (set (reg:DI 37 r8)
        (reg:DI 287 [ D.6036 ])) 89 {*movdi_internal}
     (nil))
(insn 516 515 517 54 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 517 516 518 54 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 518 517 519 54 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 519 518 520 54 (set (reg:DI 288 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       55 [100.0%]  (FALLTHRU)

;; basic block 55, loop depth 0, count 0, freq 1098, maybe hot
;; Invalid sum of incoming frequencies 1327, should be 1098
;;  prev block 54, next block 56, flags: (RTL)
;;  pred:       54 [100.0%]  (FALLTHRU)
;;              53 [83.7%] 
(code_label 520 519 521 55 125 "" [1 uses])
(note 521 520 522 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 522 521 523 55 (parallel [
            (set (reg:DI 777)
                (plus:DI (reg:DI 288 [ D.6036 ])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:570 218 {*adddi_1}
     (nil))
(insn 523 522 524 55 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 777)) blake_ref.c:570 89 {*movdi_internal}
     (nil))
(insn 524 523 525 55 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) 89 {*movdi_internal}
     (nil))
(insn 525 524 526 55 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 526 525 527 55 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 527 526 528 55 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 528 527 1011 55 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:572 90 {*movsi_internal}
     (nil))
;;  succ:       56 [100.0%]  (FALLTHRU)

;; basic block 56, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 55, next block 57, flags: (RTL)
;;  pred:       55 [100.0%]  (FALLTHRU)
;;              87 [100.0%]  (FALLTHRU)
(code_label 1011 528 529 56 145 "" [0 uses])
(note 529 1011 530 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 530 529 531 56 (set (reg:SI 290 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) blake_ref.c:574 90 {*movsi_internal}
     (nil))
(insn 531 530 532 56 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 290 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:574 7 {*cmpsi_1}
     (nil))
(jump_insn 532 531 533 56 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 541)
            (pc))) blake_ref.c:574 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 541)
;;  succ:       57 [28.0%]  (FALLTHRU)
;;              58 [72.0%] 

;; basic block 57, loop depth 0, count 0, freq 615, maybe hot
;;  prev block 56, next block 58, flags: (RTL)
;;  pred:       56 [28.0%]  (FALLTHRU)
(note 533 532 534 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 534 533 535 57 (parallel [
            (set (reg:DI 778)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 535 534 536 57 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 536 535 537 57 (set (reg:DI 1 dx)
        (reg:DI 778)) 89 {*movdi_internal}
     (nil))
(insn 537 536 538 57 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 538 537 541 57 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       61 [100.0%]  (FALLTHRU)

;; basic block 58, loop depth 0, count 0, freq 1581, maybe hot
;;  prev block 57, next block 59, flags: (RTL)
;;  pred:       56 [72.0%] 
(code_label 541 538 542 58 127 "" [1 uses])
(note 542 541 543 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 543 542 544 58 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 290 [ D.6033 ])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn 544 543 545 58 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 553)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 553)
;;  succ:       59 [50.0%]  (FALLTHRU)
;;              60 [50.0%] 

;; basic block 59, loop depth 0, count 0, freq 791, maybe hot
;;  prev block 58, next block 60, flags: (RTL)
;;  pred:       58 [50.0%]  (FALLTHRU)
(note 545 544 546 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 546 545 547 59 (parallel [
            (set (reg:DI 779)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 547 546 548 59 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 548 547 549 59 (set (reg:DI 1 dx)
        (reg:DI 779)) 89 {*movdi_internal}
     (nil))
(insn 549 548 550 59 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 550 549 553 59 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       61 [100.0%]  (FALLTHRU)

;; basic block 60, loop depth 0, count 0, freq 791, maybe hot
;;  prev block 59, next block 61, flags: (RTL)
;;  pred:       58 [50.0%] 
(code_label 553 550 554 60 129 "" [1 uses])
(note 554 553 555 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 555 554 556 60 (parallel [
            (set (reg:DI 780)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 556 555 557 60 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 557 556 558 60 (set (reg:DI 1 dx)
        (reg:DI 780)) 89 {*movdi_internal}
     (nil))
(insn 558 557 559 60 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 559 558 560 60 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       61 [100.0%]  (FALLTHRU)

;; basic block 61, loop depth 0, count 0, freq 2196, maybe hot
;;  prev block 60, next block 62, flags: (RTL)
;;  pred:       57 [100.0%]  (FALLTHRU)
;;              60 [100.0%]  (FALLTHRU)
;;              59 [100.0%]  (FALLTHRU)
(code_label 560 559 561 61 128 "" [0 uses])
(note 561 560 562 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 562 561 563 61 (set (reg:DI 781)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) blake_ref.c:578 89 {*movdi_internal}
     (nil))
(insn 563 562 564 61 (parallel [
            (set (reg:DI 292 [ D.6036 ])
                (plus:DI (reg:DI 781)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:578 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
;;  succ:       62 [100.0%]  (FALLTHRU)

;; basic block 62, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 61, next block 63, flags: (RTL)
;;  pred:       47 [100.0%]  (FALLTHRU)
;;              48 [100.0%]  (FALLTHRU)
;;              61 [100.0%]  (FALLTHRU)
(code_label 564 563 565 62 122 "" [0 uses])
(note 565 564 566 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 566 565 567 62 (parallel [
            (set (reg:DI 782)
                (plus:DI (reg:DI 292 [ D.6036 ])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:580 218 {*adddi_1}
     (nil))
(insn 567 566 568 62 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 782)) blake_ref.c:580 89 {*movdi_internal}
     (nil))
(insn 568 567 569 62 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn 569 568 760 62 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 578)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 578)
;;  succ:       63 [50.0%]  (FALLTHRU)
;;              64 [50.0%] 

;; basic block 63, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 62, next block 64, flags: (RTL)
;;  pred:       62 [50.0%]  (FALLTHRU)
;;              82 [100.0%] 
(code_label 760 569 570 63 142 "" [1 uses])
(note 570 760 571 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 571 570 572 63 (parallel [
            (set (reg:DI 783)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 572 571 573 63 (set (reg:DI 37 r8)
        (const_int 128 [0x80])) 89 {*movdi_internal}
     (nil))
(insn 573 572 574 63 (set (reg:DI 1 dx)
        (reg:DI 783)) 89 {*movdi_internal}
     (nil))
(insn 574 573 575 63 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 575 574 578 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       83 [100.0%]  (FALLTHRU)

;; basic block 64, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 63, next block 65, flags: (RTL)
;;  pred:       62 [50.0%] 
;;              68 [100.0%]  (FALLTHRU)
;;              82 (FALLTHRU)
(code_label 578 575 579 64 130 "" [1 uses])
(note 579 578 580 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 580 579 581 64 (parallel [
            (set (reg:DI 784)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 581 580 582 64 (set (reg:DI 37 r8)
        (const_int 128 [0x80])) 89 {*movdi_internal}
     (nil))
(insn 582 581 583 64 (set (reg:DI 1 dx)
        (reg:DI 784)) 89 {*movdi_internal}
     (nil))
(insn 583 582 584 64 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 584 583 587 64 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       83 [100.0%]  (FALLTHRU)

;; basic block 65, loop depth 0, count 0, freq 3050, maybe hot
;;  prev block 64, next block 66, flags: (RTL)
;;  pred:       44 [50.0%] 
(code_label 587 584 588 65 119 "" [1 uses])
(note 588 587 589 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 589 588 590 65 (set (reg:SI 785)
        (reg:SI 242 [ D.6033 ])) blake_ref.c:587 90 {*movsi_internal}
     (nil))
(insn 590 589 591 65 (parallel [
            (set (reg:SI 786)
                (plus:SI (reg:SI 785)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 217 {*addsi_1}
     (nil))
(insn 591 590 592 65 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 785)
            (const_int 0 [0]))) blake_ref.c:587 3 {*cmpsi_ccno_1}
     (nil))
(insn 592 591 593 65 (set (reg:SI 785)
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 786)
            (reg:SI 785))) blake_ref.c:587 951 {*movsicc_noc}
     (nil))
(insn 593 592 594 65 (parallel [
            (set (reg:SI 787)
                (ashiftrt:SI (reg:SI 785)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 545 {*ashrsi3_1}
     (expr_list:REG_EQUAL (div:SI (reg:SI 242 [ D.6033 ])
            (const_int 8 [0x8]))
        (nil)))
(insn 594 593 595 65 (set (reg:SI 294 [ D.6033 ])
        (reg:SI 787)) blake_ref.c:587 90 {*movsi_internal}
     (nil))
(insn 595 594 596 65 (parallel [
            (set (reg:SI 788)
                (ashiftrt:SI (reg:SI 242 [ D.6033 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 538 {ashrsi3_cvt}
     (nil))
(insn 596 595 597 65 (parallel [
            (set (reg:SI 789)
                (lshiftrt:SI (reg:SI 788)
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 544 {*lshrsi3_1}
     (nil))
(insn 597 596 598 65 (parallel [
            (set (reg:SI 790)
                (plus:SI (reg:SI 242 [ D.6033 ])
                    (reg:SI 789)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 217 {*addsi_1}
     (nil))
(insn 598 597 599 65 (parallel [
            (set (reg:SI 791)
                (and:SI (reg:SI 790)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 381 {*andsi_1}
     (nil))
(insn 599 598 600 65 (parallel [
            (set (reg:SI 792)
                (minus:SI (reg:SI 791)
                    (reg:SI 789)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 260 {*subsi_1}
     (nil))
(insn 600 599 601 65 (set (reg:SI 297 [ D.6033 ])
        (reg:SI 792)) blake_ref.c:587 90 {*movsi_internal}
     (nil))
(insn 601 600 602 65 (set (reg:SI 793)
        (const_int 8 [0x8])) blake_ref.c:587 90 {*movsi_internal}
     (nil))
(insn 602 601 603 65 (parallel [
            (set (reg:SI 298 [ D.6033 ])
                (minus:SI (reg:SI 793)
                    (reg:SI 297 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:587 260 {*subsi_1}
     (nil))
(insn 603 602 604 65 (set (reg:DI 794)
        (sign_extend:DI (reg:SI 294 [ D.6033 ]))) blake_ref.c:587 142 {*extendsidi2_rex64}
     (nil))
(insn 604 603 605 65 (set (reg:SI 796)
        (const_int 255 [0xff])) blake_ref.c:588 90 {*movsi_internal}
     (nil))
(insn 605 604 606 65 (parallel [
            (set (reg:SI 795 [ D.6033 ])
                (ashift:SI (reg:SI 796)
                    (subreg:QI (reg:SI 298 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 511 {*ashlsi3_1}
     (nil))
(insn 606 605 607 65 (parallel [
            (set (reg:QI 797 [ D.6037 ])
                (and:QI (subreg:QI (reg:SI 795 [ D.6033 ]) 0)
                    (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                                (reg:DI 794))
                            (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 384 {*andqi_1}
     (nil))
(insn 607 606 608 65 (set (reg:SI 799)
        (const_int 128 [0x80])) blake_ref.c:588 90 {*movsi_internal}
     (nil))
(insn 608 607 609 65 (parallel [
            (set (reg:SI 798 [ D.6033 ])
                (ashiftrt:SI (reg:SI 799)
                    (subreg:QI (reg:SI 297 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 545 {*ashrsi3_1}
     (nil))
(insn 609 608 610 65 (parallel [
            (set (reg:QI 305 [ D.6034 ])
                (xor:QI (reg:QI 797 [ D.6037 ])
                    (subreg:QI (reg:SI 798 [ D.6033 ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:588 406 {*xorqi_1}
     (nil))
(insn 610 609 611 65 (set (reg:DI 800)
        (sign_extend:DI (reg:SI 294 [ D.6033 ]))) blake_ref.c:588 142 {*extendsidi2_rex64}
     (nil))
(insn 611 610 612 65 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 800))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (reg:QI 305 [ D.6034 ])) blake_ref.c:588 93 {*movqi_internal}
     (nil))
(insn 612 611 613 65 (parallel [
            (set (reg:SI 801 [ D.6035 ])
                (plus:SI (reg:SI 280 [ D.6035 ])
                    (const_int -889 [0xfffffffffffffc87])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:590 217 {*addsi_1}
     (nil))
(insn 613 612 614 65 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 801 [ D.6035 ])
            (const_int 5 [0x5]))) blake_ref.c:590 7 {*cmpsi_1}
     (nil))
(jump_insn 614 613 615 65 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 631)
            (pc))) blake_ref.c:590 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 631)
;;  succ:       66 [50.0%]  (FALLTHRU)
;;              69 [50.0%] 

;; basic block 66, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 65, next block 67, flags: (RTL)
;;  pred:       65 [50.0%]  (FALLTHRU)
(note 615 614 616 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 616 615 617 66 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:592 7 {*cmpsi_1}
     (nil))
(jump_insn 617 616 618 66 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 622)
            (pc))) blake_ref.c:592 612 {*jcc_1}
     (int_list:REG_BR_PROB 2800 (nil))
 -> 622)
;;  succ:       68 [28.0%] 
;;              67 [72.0%]  (FALLTHRU)

;; basic block 67, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 66, next block 68, flags: (RTL)
;;  pred:       66 [72.0%]  (FALLTHRU)
(note 618 617 619 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 619 618 620 67 (set (reg:DI 802)
        (sign_extend:DI (reg:SI 294 [ D.6033 ]))) blake_ref.c:595 142 {*extendsidi2_rex64}
     (nil))
(insn 620 619 621 67 (parallel [
            (set (reg:QI 803)
                (xor:QI (reg:QI 305 [ D.6034 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:595 406 {*xorqi_1}
     (nil))
(insn 621 620 622 67 (set (mem/j:QI (plus:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (reg:DI 802))
                (const_int 216 [0xd8])) [0 state_4(D)->data64 S1 A8])
        (reg:QI 803)) blake_ref.c:595 93 {*movqi_internal}
     (nil))
;;  succ:       68 [100.0%]  (FALLTHRU)

;; basic block 68, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 67, next block 69, flags: (RTL)
;;  pred:       66 [28.0%] 
;;              67 [100.0%]  (FALLTHRU)
(code_label 622 621 623 68 133 "" [1 uses])
(note 623 622 624 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 624 623 625 68 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 896 [0x380])) blake_ref.c:598 90 {*movsi_internal}
     (nil))
(insn 625 624 626 68 (set (reg:DI 804 [ D.6036 ])
        (sign_extend:DI (reg:SI 298 [ D.6033 ]))) blake_ref.c:634 142 {*extendsidi2_rex64}
     (nil))
(insn 626 625 627 68 (parallel [
            (set (reg:DI 805 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 804 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 261 {*subdi_1}
     (nil))
(insn 627 626 628 68 (parallel [
            (set (reg:DI 806)
                (plus:DI (reg:DI 805 [ D.6036 ])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 218 {*adddi_1}
     (nil))
(insn 628 627 631 68 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 806)) blake_ref.c:634 89 {*movdi_internal}
     (nil))
;;  succ:       64 [100.0%]  (FALLTHRU)

;; basic block 69, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 68, next block 70, flags: (RTL)
;;  pred:       65 [50.0%] 
(code_label 631 628 632 69 132 "" [1 uses])
(note 632 631 633 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 633 632 634 69 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 242 [ D.6033 ])
            (const_int 887 [0x377]))) blake_ref.c:601 7 {*cmpsi_1}
     (nil))
(jump_insn 634 633 635 69 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 665)
            (pc))) blake_ref.c:601 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 665)
;;  succ:       70 [50.0%]  (FALLTHRU)
;;              73 [50.0%] 

;; basic block 70, loop depth 0, count 0, freq 762, maybe hot
;;  prev block 69, next block 71, flags: (RTL)
;;  pred:       69 [50.0%]  (FALLTHRU)
(note 635 634 636 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 636 635 637 70 (set (reg:SI 808)
        (const_int 888 [0x378])) blake_ref.c:603 90 {*movsi_internal}
     (nil))
(insn 637 636 638 70 (parallel [
            (set (reg:SI 807 [ D.6033 ])
                (minus:SI (reg:SI 808)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:603 260 {*subsi_1}
     (nil))
(insn 638 637 639 70 (set (reg:DI 809 [ D.6036 ])
        (sign_extend:DI (reg:SI 807 [ D.6033 ]))) blake_ref.c:603 142 {*extendsidi2_rex64}
     (nil))
(insn 639 638 640 70 (parallel [
            (set (reg:DI 616 [ D.6039 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 809 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:603 261 {*subdi_1}
     (nil))
(insn 640 639 641 70 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 616 [ D.6039 ])) blake_ref.c:603 89 {*movdi_internal}
     (nil))
(insn 641 640 642 70 (parallel [
            (set (reg:SI 810 [ D.6035 ])
                (and:SI (reg:SI 280 [ D.6035 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:604 381 {*andsi_1}
     (nil))
(insn 642 641 643 70 (parallel [
            (set (reg:SI 317 [ D.6033 ])
                (plus:SI (reg:SI 810 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:604 217 {*addsi_1}
     (nil))
(insn 643 642 644 70 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 317 [ D.6033 ])) blake_ref.c:604 90 {*movsi_internal}
     (nil))
(insn 644 643 645 70 (set (reg:SI 812)
        (const_int 888 [0x378])) blake_ref.c:605 90 {*movsi_internal}
     (nil))
(insn 645 644 646 70 (parallel [
            (set (reg:SI 811 [ D.6033 ])
                (minus:SI (reg:SI 812)
                    (reg:SI 317 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:605 260 {*subsi_1}
     (nil))
(insn 646 645 647 70 (set (reg:DI 319 [ D.6036 ])
        (sign_extend:DI (reg:SI 811 [ D.6033 ]))) blake_ref.c:605 142 {*extendsidi2_rex64}
     (nil))
(insn 647 646 648 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 319 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(insn 648 647 649 70 (set (reg:QI 814 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 607 {*setcc_qi}
     (nil))
(insn 649 648 650 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 814 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 650 649 1026 70 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1034)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1034)
;;  succ:       72 [14.0%] 
;;              71 [86.0%]  (FALLTHRU)

;; basic block 71, loop depth 0, count 0, freq 655, maybe hot
;;  prev block 70, next block 72, flags: (RTL)
;;  pred:       70 [86.0%]  (FALLTHRU)
(note 1026 650 651 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 651 1026 652 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 317 [ D.6033 ])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (nil))
(insn 652 651 653 71 (set (reg:QI 816 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 607 {*setcc_qi}
     (nil))
(insn 653 652 654 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 816 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 654 653 1034 71 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 731)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 8372 (nil))
 -> 731)
;;  succ:       79 [83.7%] 
;;              72 [16.3%]  (FALLTHRU)

;; basic block 72, loop depth 0, count 0, freq 373, maybe hot
;; Invalid sum of incoming frequencies 214, should be 373
;;  prev block 71, next block 73, flags: (RTL)
;;  pred:       71 [16.3%]  (FALLTHRU)
;;              70 [14.0%] 
(code_label 1034 654 656 72 150 "" [1 uses])
(note 656 1034 657 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 657 656 658 72 (set (reg:DI 37 r8)
        (reg:DI 319 [ D.6036 ])) 89 {*movdi_internal}
     (nil))
(insn 658 657 659 72 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 659 658 660 72 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 660 659 661 72 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 661 660 662 72 (set (reg:DI 616 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 662 661 665 72 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       79 [100.0%]  (FALLTHRU)

;; basic block 73, loop depth 0, count 0, freq 762, maybe hot
;;  prev block 72, next block 74, flags: (RTL)
;;  pred:       69 [50.0%] 
(code_label 665 662 666 73 134 "" [1 uses])
(note 666 665 667 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 667 666 668 73 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 242 [ D.6033 ])
            (const_int 1016 [0x3f8]))) blake_ref.c:608 7 {*cmpsi_1}
     (nil))
(jump_insn 668 667 669 73 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 692)
            (pc))) blake_ref.c:608 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 692)
;;  succ:       74 [29.0%]  (FALLTHRU)
;;              75 [71.0%] 

;; basic block 74, loop depth 0, count 0, freq 2457, maybe hot
;; Invalid sum of incoming frequencies 221, should be 2457
;;  prev block 73, next block 75, flags: (RTL)
;;  pred:       73 [29.0%]  (FALLTHRU)
(note 669 668 670 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 670 669 671 74 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 1024 [0x400])) blake_ref.c:611 90 {*movsi_internal}
     (nil))
(insn 671 670 672 74 (set (reg:SI 818)
        (const_int 1024 [0x400])) blake_ref.c:362 90 {*movsi_internal}
     (nil))
(insn 672 671 673 74 (parallel [
            (set (reg:SI 817 [ D.6033 ])
                (minus:SI (reg:SI 818)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 260 {*subsi_1}
     (nil))
(insn 673 672 674 74 (set (reg:DI 819 [ D.6036 ])
        (sign_extend:DI (reg:SI 817 [ D.6033 ]))) blake_ref.c:362 142 {*extendsidi2_rex64}
     (nil))
(insn 674 673 675 74 (parallel [
            (set (reg:DI 820 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 819 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 261 {*subdi_1}
     (nil))
(insn 675 674 676 74 (parallel [
            (set (reg:DI 821)
                (plus:DI (reg:DI 820 [ D.6036 ])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:362 218 {*adddi_1}
     (nil))
(insn 676 675 677 74 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 821)) blake_ref.c:362 89 {*movdi_internal}
     (nil))
(insn 677 676 678 74 (parallel [
            (set (reg:DI 822 [ D.6040 ])
                (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:359 218 {*adddi_1}
     (nil))
(insn 678 677 679 74 (set (reg:DI 1 dx)
        (reg:DI 822 [ D.6040 ])) blake_ref.c:364 89 {*movdi_internal}
     (nil))
(insn 679 678 680 74 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) blake_ref.c:364 89 {*movdi_internal}
     (nil))
(call_insn 680 679 681 74 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>) [0 compress64 S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("compress64") [flags 0x3]  <function_decl 0x6ffffd815f0 compress64>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 681 680 682 74 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:391 90 {*movsi_internal}
     (nil))
(insn 682 681 683 74 (parallel [
            (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                        (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                (plus:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                            (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:613 218 {*adddi_1}
     (nil))
(insn 683 682 684 74 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) 89 {*movdi_internal}
     (nil))
(insn 684 683 685 74 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 685 684 686 74 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 686 685 687 74 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 687 686 688 74 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:615 90 {*movsi_internal}
     (nil))
(insn 688 687 689 74 (set (reg:DI 616 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 689 688 692 74 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       79 [100.0%]  (FALLTHRU)

;; basic block 75, loop depth 0, count 0, freq 541, maybe hot
;;  prev block 74, next block 76, flags: (RTL)
;;  pred:       73 [71.0%] 
(code_label 692 689 693 75 137 "" [1 uses])
(note 693 692 694 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 694 693 695 75 (set (reg:SI 824)
        (const_int 1024 [0x400])) blake_ref.c:619 90 {*movsi_internal}
     (nil))
(insn 695 694 696 75 (parallel [
            (set (reg:SI 823 [ D.6033 ])
                (minus:SI (reg:SI 824)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:619 260 {*subsi_1}
     (nil))
(insn 696 695 697 75 (set (reg:DI 825 [ D.6036 ])
        (sign_extend:DI (reg:SI 823 [ D.6033 ]))) blake_ref.c:619 142 {*extendsidi2_rex64}
     (nil))
(insn 697 696 698 75 (parallel [
            (set (reg:DI 327 [ D.6036 ])
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 825 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:619 261 {*subdi_1}
     (nil))
(insn 698 697 699 75 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 327 [ D.6036 ])) blake_ref.c:619 89 {*movdi_internal}
     (nil))
(insn 699 698 700 75 (parallel [
            (set (reg:SI 826 [ D.6035 ])
                (and:SI (reg:SI 280 [ D.6035 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:621 381 {*andsi_1}
     (nil))
(insn 700 699 701 75 (parallel [
            (set (reg:SI 330 [ D.6033 ])
                (plus:SI (reg:SI 826 [ D.6035 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:621 217 {*addsi_1}
     (nil))
(insn 701 700 702 75 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 4 [0x4])) [2 state_4(D)->datalen+0 S4 A32])
        (reg:SI 330 [ D.6033 ])) blake_ref.c:621 90 {*movsi_internal}
     (nil))
(insn 702 701 703 75 (set (reg:SI 828)
        (const_int 1024 [0x400])) blake_ref.c:622 90 {*movsi_internal}
     (nil))
(insn 703 702 704 75 (parallel [
            (set (reg:SI 827 [ D.6033 ])
                (minus:SI (reg:SI 828)
                    (reg:SI 330 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:622 260 {*subsi_1}
     (nil))
(insn 704 703 705 75 (set (reg:DI 332 [ D.6036 ])
        (sign_extend:DI (reg:SI 827 [ D.6033 ]))) blake_ref.c:622 142 {*extendsidi2_rex64}
     (nil))
(insn 705 704 706 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 332 [ D.6036 ])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(insn 706 705 707 75 (set (reg:QI 830 [ D.6038 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 607 {*setcc_qi}
     (nil))
(insn 707 706 708 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 830 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 708 707 1028 75 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1035)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 1035)
;;  succ:       77 [14.0%] 
;;              76 [86.0%]  (FALLTHRU)

;; basic block 76, loop depth 0, count 0, freq 465, maybe hot
;;  prev block 75, next block 77, flags: (RTL)
;;  pred:       75 [86.0%]  (FALLTHRU)
(note 1028 708 709 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 709 1028 710 76 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 330 [ D.6033 ])
            (const_int 1024 [0x400]))) blake_ref.c:351 7 {*cmpsi_1}
     (nil))
(insn 710 709 711 76 (set (reg:QI 832 [ D.6038 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) blake_ref.c:351 607 {*setcc_qi}
     (nil))
(insn 711 710 712 76 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 832 [ D.6038 ])
            (const_int 0 [0]))) blake_ref.c:351 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 712 711 1035 76 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 720)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 8372 (nil))
 -> 720)
;;  succ:       78 [83.7%] 
;;              77 [16.3%]  (FALLTHRU)

;; basic block 77, loop depth 0, count 0, freq 265, maybe hot
;; Invalid sum of incoming frequencies 152, should be 265
;;  prev block 76, next block 78, flags: (RTL)
;;  pred:       76 [16.3%]  (FALLTHRU)
;;              75 [14.0%] 
(code_label 1035 712 714 77 151 "" [1 uses])
(note 714 1035 715 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 715 714 716 77 (set (reg:DI 37 r8)
        (reg:DI 332 [ D.6036 ])) 89 {*movdi_internal}
     (nil))
(insn 716 715 717 77 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 717 716 718 77 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 718 717 719 77 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 719 718 720 77 (set (reg:DI 327 [ D.6036 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       78 [100.0%]  (FALLTHRU)

;; basic block 78, loop depth 0, count 0, freq 541, maybe hot
;; Invalid sum of incoming frequencies 654, should be 541
;;  prev block 77, next block 79, flags: (RTL)
;;  pred:       77 [100.0%]  (FALLTHRU)
;;              76 [83.7%] 
(code_label 720 719 721 78 138 "" [1 uses])
(note 721 720 722 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 722 721 723 78 (parallel [
            (set (reg:DI 833)
                (plus:DI (reg:DI 327 [ D.6036 ])
                    (const_int -888 [0xfffffffffffffc88])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:623 218 {*adddi_1}
     (nil))
(insn 723 722 724 78 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 833)) blake_ref.c:623 89 {*movdi_internal}
     (nil))
(insn 724 723 725 78 (set (reg:DI 37 r8)
        (const_int 888 [0x378])) 89 {*movdi_internal}
     (nil))
(insn 725 724 726 78 (set (reg:DI 1 dx)
        (const:DI (plus:DI (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)
                (const_int 1 [0x1])))) 89 {*movdi_internal}
     (nil))
(insn 726 725 727 78 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 727 726 728 78 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 728 727 729 78 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 12 [0xc])) [2 state_4(D)->nullt+0 S4 A32])
        (const_int 1 [0x1])) blake_ref.c:625 90 {*movsi_internal}
     (nil))
(insn 729 728 730 78 (set (reg:DI 616 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 730 729 731 78 (set (reg:SI 612 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       79 [100.0%]  (FALLTHRU)

;; basic block 79, loop depth 0, count 0, freq 1525, maybe hot
;; Invalid sum of incoming frequencies 3919, should be 1525
;;  prev block 78, next block 80, flags: (RTL)
;;  pred:       78 [100.0%]  (FALLTHRU)
;;              72 [100.0%]  (FALLTHRU)
;;              74 [100.0%]  (FALLTHRU)
;;              71 [83.7%] 
(code_label 731 730 732 79 135 "" [1 uses])
(note 732 731 733 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 733 732 734 79 (parallel [
            (set (reg:DI 834)
                (plus:DI (reg:DI 616 [ D.6039 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:628 218 {*adddi_1}
     (nil))
(insn 734 733 735 79 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 834)) blake_ref.c:628 89 {*movdi_internal}
     (nil))
(insn 735 734 736 79 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 612 [ D.6033 ])
            (const_int 384 [0x180]))) blake_ref.c:629 7 {*cmpsi_1}
     (nil))
(jump_insn 736 735 737 79 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 747)
            (pc))) blake_ref.c:629 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 747)
;;  succ:       80 [28.0%]  (FALLTHRU)
;;              81 [72.0%] 

;; basic block 80, loop depth 0, count 0, freq 427, maybe hot
;;  prev block 79, next block 81, flags: (RTL)
;;  pred:       79 [28.0%]  (FALLTHRU)
(note 737 736 738 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 738 737 739 80 (parallel [
            (set (reg:DI 835)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 739 738 740 80 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 740 739 741 80 (set (reg:DI 1 dx)
        (reg:DI 835)) 89 {*movdi_internal}
     (nil))
(insn 741 740 742 80 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 742 741 743 80 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 743 742 744 80 (set (reg:DI 594 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 744 743 747 80 (set (reg:SI 283 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       82 [100.0%]  (FALLTHRU)

;; basic block 81, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 80, next block 82, flags: (RTL)
;;  pred:       79 [72.0%] 
(code_label 747 744 748 81 140 "" [1 uses])
(note 748 747 749 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 749 748 750 81 (parallel [
            (set (reg:DI 836)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -19 [0xffffffffffffffed])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 750 749 751 81 (set (reg:DI 37 r8)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 751 750 752 81 (set (reg:DI 1 dx)
        (reg:DI 836)) 89 {*movdi_internal}
     (nil))
(insn 752 751 753 81 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 753 752 754 81 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
(insn 754 753 755 81 (set (reg:DI 594 [ D.6039 ])
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 755 754 756 81 (set (reg:SI 283 [ D.6033 ])
        (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])) 90 {*movsi_internal}
     (nil))
;;  succ:       82 [100.0%]  (FALLTHRU)

;; basic block 82, loop depth 0, count 0, freq 1525, maybe hot
;;  prev block 81, next block 83, flags: (RTL)
;;  pred:       81 [100.0%]  (FALLTHRU)
;;              80 [100.0%]  (FALLTHRU)
(code_label 756 755 757 82 141 "" [0 uses])
(note 757 756 758 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 758 757 759 82 (parallel [
            (set (reg:DI 837)
                (plus:DI (reg:DI 594 [ D.6039 ])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:634 218 {*adddi_1}
     (nil))
(insn 759 758 761 82 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 837)) blake_ref.c:634 89 {*movdi_internal}
     (nil))
(insn 761 759 762 82 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 283 [ D.6033 ])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn 762 761 766 82 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 760)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 760)
;;  succ:       63 [100.0%] 
;;              64 (FALLTHRU)

;; basic block 83, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 82, next block 84, flags: (RTL)
;;  pred:       64 [100.0%]  (FALLTHRU)
;;              63 [100.0%]  (FALLTHRU)
(code_label 766 762 767 83 131 "" [0 uses])
(note 767 766 768 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 768 767 769 83 (set (reg:DI 839)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 89 {*movdi_internal}
     (nil))
(insn 769 768 770 83 (parallel [
            (set (reg:DI 838 [ D.6036 ])
                (lshiftrt:DI (reg:DI 839)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 770 769 771 83 (parallel [
            (set (reg:SI 840 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 838 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 544 {*lshrsi3_1}
     (nil))
(insn 771 770 772 83 (set (mem:QI (reg/v/f:DI 634 [ hashval ]) [0 *hashval_6(D)+0 S1 A8])
        (subreg:QI (reg:SI 840 [ D.6032 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(insn 772 771 773 83 (set (reg:DI 842)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 89 {*movdi_internal}
     (nil))
(insn 773 772 774 83 (parallel [
            (set (reg:DI 841 [ D.6036 ])
                (lshiftrt:DI (reg:DI 842)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 774 773 775 83 (parallel [
            (set (reg:SI 843 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 841 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 544 {*lshrsi3_1}
     (nil))
(insn 775 774 776 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 1 [0x1])) [0 MEM[(BitSequence *)hashval_6(D) + 1B]+0 S1 A8])
        (subreg:QI (reg:SI 843 [ D.6032 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(insn 776 775 777 83 (set (reg:DI 845)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 89 {*movdi_internal}
     (nil))
(insn 777 776 778 83 (parallel [
            (set (reg:DI 844 [ D.6036 ])
                (lshiftrt:DI (reg:DI 845)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 778 777 779 83 (parallel [
            (set (reg:SI 846 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 844 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 544 {*lshrsi3_1}
     (nil))
(insn 779 778 780 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 2 [0x2])) [0 MEM[(BitSequence *)hashval_6(D) + 2B]+0 S1 A8])
        (subreg:QI (reg:SI 846 [ D.6032 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(insn 780 779 781 83 (set (reg:DI 848)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 89 {*movdi_internal}
     (nil))
(insn 781 780 782 83 (parallel [
            (set (reg:DI 847 [ D.6036 ])
                (lshiftrt:DI (reg:DI 848)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 782 781 783 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 3 [0x3])) [0 MEM[(BitSequence *)hashval_6(D) + 3B]+0 S1 A8])
        (subreg:QI (reg:DI 847 [ D.6036 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(insn 783 782 784 83 (set (reg:DI 849)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 89 {*movdi_internal}
     (nil))
(insn 784 783 785 83 (parallel [
            (set (reg:SI 850 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 849) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 544 {*lshrsi3_1}
     (nil))
(insn 785 784 786 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 4 [0x4])) [0 MEM[(BitSequence *)hashval_6(D) + 4B]+0 S1 A8])
        (subreg:QI (reg:SI 850 [ D.6032 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(insn 786 785 787 83 (set (reg:DI 851)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 89 {*movdi_internal}
     (nil))
(insn 787 786 788 83 (parallel [
            (set (reg:SI 852 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 851) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 544 {*lshrsi3_1}
     (nil))
(insn 788 787 789 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 5 [0x5])) [0 MEM[(BitSequence *)hashval_6(D) + 5B]+0 S1 A8])
        (subreg:QI (reg:SI 852 [ D.6032 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(insn 789 788 790 83 (set (reg:DI 853)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 89 {*movdi_internal}
     (nil))
(insn 790 789 791 83 (parallel [
            (set (reg:SI 854 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 853) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:638 544 {*lshrsi3_1}
     (nil))
(insn 791 790 792 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 6 [0x6])) [0 MEM[(BitSequence *)hashval_6(D) + 6B]+0 S1 A8])
        (subreg:QI (reg:SI 854 [ D.6032 ]) 0)) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(insn 792 791 793 83 (set (reg:DI 855)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 136 [0x88])) [3 state_4(D)->h64+0 S8 A64])) blake_ref.c:638 89 {*movdi_internal}
     (nil))
(insn 793 792 794 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 7 [0x7])) [0 MEM[(BitSequence *)hashval_6(D) + 7B]+0 S1 A8])
        (subreg:QI (reg:DI 855) 0)) blake_ref.c:638 93 {*movqi_internal}
     (nil))
(insn 794 793 795 83 (set (reg:DI 857)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 89 {*movdi_internal}
     (nil))
(insn 795 794 796 83 (parallel [
            (set (reg:DI 856 [ D.6036 ])
                (lshiftrt:DI (reg:DI 857)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 796 795 797 83 (parallel [
            (set (reg:SI 858 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 856 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 544 {*lshrsi3_1}
     (nil))
(insn 797 796 798 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 8 [0x8])) [0 MEM[(BitSequence *)hashval_6(D) + 8B]+0 S1 A8])
        (subreg:QI (reg:SI 858 [ D.6032 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(insn 798 797 799 83 (set (reg:DI 860)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 89 {*movdi_internal}
     (nil))
(insn 799 798 800 83 (parallel [
            (set (reg:DI 859 [ D.6036 ])
                (lshiftrt:DI (reg:DI 860)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 800 799 801 83 (parallel [
            (set (reg:SI 861 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 859 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 544 {*lshrsi3_1}
     (nil))
(insn 801 800 802 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 9 [0x9])) [0 MEM[(BitSequence *)hashval_6(D) + 9B]+0 S1 A8])
        (subreg:QI (reg:SI 861 [ D.6032 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(insn 802 801 803 83 (set (reg:DI 863)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 89 {*movdi_internal}
     (nil))
(insn 803 802 804 83 (parallel [
            (set (reg:DI 862 [ D.6036 ])
                (lshiftrt:DI (reg:DI 863)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 804 803 805 83 (parallel [
            (set (reg:SI 864 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 862 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 544 {*lshrsi3_1}
     (nil))
(insn 805 804 806 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 10 [0xa])) [0 MEM[(BitSequence *)hashval_6(D) + 10B]+0 S1 A8])
        (subreg:QI (reg:SI 864 [ D.6032 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(insn 806 805 807 83 (set (reg:DI 866)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 89 {*movdi_internal}
     (nil))
(insn 807 806 808 83 (parallel [
            (set (reg:DI 865 [ D.6036 ])
                (lshiftrt:DI (reg:DI 866)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 808 807 809 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 11 [0xb])) [0 MEM[(BitSequence *)hashval_6(D) + 11B]+0 S1 A8])
        (subreg:QI (reg:DI 865 [ D.6036 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(insn 809 808 810 83 (set (reg:DI 867)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 89 {*movdi_internal}
     (nil))
(insn 810 809 811 83 (parallel [
            (set (reg:SI 868 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 867) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 544 {*lshrsi3_1}
     (nil))
(insn 811 810 812 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 12 [0xc])) [0 MEM[(BitSequence *)hashval_6(D) + 12B]+0 S1 A8])
        (subreg:QI (reg:SI 868 [ D.6032 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(insn 812 811 813 83 (set (reg:DI 869)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 89 {*movdi_internal}
     (nil))
(insn 813 812 814 83 (parallel [
            (set (reg:SI 870 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 869) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 544 {*lshrsi3_1}
     (nil))
(insn 814 813 815 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 13 [0xd])) [0 MEM[(BitSequence *)hashval_6(D) + 13B]+0 S1 A8])
        (subreg:QI (reg:SI 870 [ D.6032 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(insn 815 814 816 83 (set (reg:DI 871)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 89 {*movdi_internal}
     (nil))
(insn 816 815 817 83 (parallel [
            (set (reg:SI 872 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 871) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:639 544 {*lshrsi3_1}
     (nil))
(insn 817 816 818 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 14 [0xe])) [0 MEM[(BitSequence *)hashval_6(D) + 14B]+0 S1 A8])
        (subreg:QI (reg:SI 872 [ D.6032 ]) 0)) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(insn 818 817 819 83 (set (reg:DI 873)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 144 [0x90])) [3 state_4(D)->h64+8 S8 A64])) blake_ref.c:639 89 {*movdi_internal}
     (nil))
(insn 819 818 820 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 15 [0xf])) [0 MEM[(BitSequence *)hashval_6(D) + 15B]+0 S1 A8])
        (subreg:QI (reg:DI 873) 0)) blake_ref.c:639 93 {*movqi_internal}
     (nil))
(insn 820 819 821 83 (set (reg:DI 875)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 89 {*movdi_internal}
     (nil))
(insn 821 820 822 83 (parallel [
            (set (reg:DI 874 [ D.6036 ])
                (lshiftrt:DI (reg:DI 875)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 822 821 823 83 (parallel [
            (set (reg:SI 876 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 874 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 544 {*lshrsi3_1}
     (nil))
(insn 823 822 824 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 16 [0x10])) [0 MEM[(BitSequence *)hashval_6(D) + 16B]+0 S1 A8])
        (subreg:QI (reg:SI 876 [ D.6032 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(insn 824 823 825 83 (set (reg:DI 878)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 89 {*movdi_internal}
     (nil))
(insn 825 824 826 83 (parallel [
            (set (reg:DI 877 [ D.6036 ])
                (lshiftrt:DI (reg:DI 878)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 826 825 827 83 (parallel [
            (set (reg:SI 879 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 877 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 544 {*lshrsi3_1}
     (nil))
(insn 827 826 828 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 17 [0x11])) [0 MEM[(BitSequence *)hashval_6(D) + 17B]+0 S1 A8])
        (subreg:QI (reg:SI 879 [ D.6032 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(insn 828 827 829 83 (set (reg:DI 881)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 89 {*movdi_internal}
     (nil))
(insn 829 828 830 83 (parallel [
            (set (reg:DI 880 [ D.6036 ])
                (lshiftrt:DI (reg:DI 881)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 830 829 831 83 (parallel [
            (set (reg:SI 882 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 880 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 544 {*lshrsi3_1}
     (nil))
(insn 831 830 832 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 18 [0x12])) [0 MEM[(BitSequence *)hashval_6(D) + 18B]+0 S1 A8])
        (subreg:QI (reg:SI 882 [ D.6032 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(insn 832 831 833 83 (set (reg:DI 884)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 89 {*movdi_internal}
     (nil))
(insn 833 832 834 83 (parallel [
            (set (reg:DI 883 [ D.6036 ])
                (lshiftrt:DI (reg:DI 884)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 834 833 835 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 19 [0x13])) [0 MEM[(BitSequence *)hashval_6(D) + 19B]+0 S1 A8])
        (subreg:QI (reg:DI 883 [ D.6036 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(insn 835 834 836 83 (set (reg:DI 885)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 89 {*movdi_internal}
     (nil))
(insn 836 835 837 83 (parallel [
            (set (reg:SI 886 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 885) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 544 {*lshrsi3_1}
     (nil))
(insn 837 836 838 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 20 [0x14])) [0 MEM[(BitSequence *)hashval_6(D) + 20B]+0 S1 A8])
        (subreg:QI (reg:SI 886 [ D.6032 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(insn 838 837 839 83 (set (reg:DI 887)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 89 {*movdi_internal}
     (nil))
(insn 839 838 840 83 (parallel [
            (set (reg:SI 888 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 887) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 544 {*lshrsi3_1}
     (nil))
(insn 840 839 841 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 21 [0x15])) [0 MEM[(BitSequence *)hashval_6(D) + 21B]+0 S1 A8])
        (subreg:QI (reg:SI 888 [ D.6032 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(insn 841 840 842 83 (set (reg:DI 889)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 89 {*movdi_internal}
     (nil))
(insn 842 841 843 83 (parallel [
            (set (reg:SI 890 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 889) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:640 544 {*lshrsi3_1}
     (nil))
(insn 843 842 844 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 22 [0x16])) [0 MEM[(BitSequence *)hashval_6(D) + 22B]+0 S1 A8])
        (subreg:QI (reg:SI 890 [ D.6032 ]) 0)) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(insn 844 843 845 83 (set (reg:DI 891)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 152 [0x98])) [3 state_4(D)->h64+16 S8 A64])) blake_ref.c:640 89 {*movdi_internal}
     (nil))
(insn 845 844 846 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 23 [0x17])) [0 MEM[(BitSequence *)hashval_6(D) + 23B]+0 S1 A8])
        (subreg:QI (reg:DI 891) 0)) blake_ref.c:640 93 {*movqi_internal}
     (nil))
(insn 846 845 847 83 (set (reg:DI 893)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 89 {*movdi_internal}
     (nil))
(insn 847 846 848 83 (parallel [
            (set (reg:DI 892 [ D.6036 ])
                (lshiftrt:DI (reg:DI 893)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 848 847 849 83 (parallel [
            (set (reg:SI 894 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 892 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 544 {*lshrsi3_1}
     (nil))
(insn 849 848 850 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 24 [0x18])) [0 MEM[(BitSequence *)hashval_6(D) + 24B]+0 S1 A8])
        (subreg:QI (reg:SI 894 [ D.6032 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(insn 850 849 851 83 (set (reg:DI 896)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 89 {*movdi_internal}
     (nil))
(insn 851 850 852 83 (parallel [
            (set (reg:DI 895 [ D.6036 ])
                (lshiftrt:DI (reg:DI 896)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 852 851 853 83 (parallel [
            (set (reg:SI 897 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 895 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 544 {*lshrsi3_1}
     (nil))
(insn 853 852 854 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 25 [0x19])) [0 MEM[(BitSequence *)hashval_6(D) + 25B]+0 S1 A8])
        (subreg:QI (reg:SI 897 [ D.6032 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(insn 854 853 855 83 (set (reg:DI 899)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 89 {*movdi_internal}
     (nil))
(insn 855 854 856 83 (parallel [
            (set (reg:DI 898 [ D.6036 ])
                (lshiftrt:DI (reg:DI 899)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 856 855 857 83 (parallel [
            (set (reg:SI 900 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 898 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 544 {*lshrsi3_1}
     (nil))
(insn 857 856 858 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 26 [0x1a])) [0 MEM[(BitSequence *)hashval_6(D) + 26B]+0 S1 A8])
        (subreg:QI (reg:SI 900 [ D.6032 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(insn 858 857 859 83 (set (reg:DI 902)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 89 {*movdi_internal}
     (nil))
(insn 859 858 860 83 (parallel [
            (set (reg:DI 901 [ D.6036 ])
                (lshiftrt:DI (reg:DI 902)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 860 859 861 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 27 [0x1b])) [0 MEM[(BitSequence *)hashval_6(D) + 27B]+0 S1 A8])
        (subreg:QI (reg:DI 901 [ D.6036 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(insn 861 860 862 83 (set (reg:DI 903)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 89 {*movdi_internal}
     (nil))
(insn 862 861 863 83 (parallel [
            (set (reg:SI 904 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 903) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 544 {*lshrsi3_1}
     (nil))
(insn 863 862 864 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 28 [0x1c])) [0 MEM[(BitSequence *)hashval_6(D) + 28B]+0 S1 A8])
        (subreg:QI (reg:SI 904 [ D.6032 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(insn 864 863 865 83 (set (reg:DI 905)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 89 {*movdi_internal}
     (nil))
(insn 865 864 866 83 (parallel [
            (set (reg:SI 906 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 905) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 544 {*lshrsi3_1}
     (nil))
(insn 866 865 867 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 29 [0x1d])) [0 MEM[(BitSequence *)hashval_6(D) + 29B]+0 S1 A8])
        (subreg:QI (reg:SI 906 [ D.6032 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(insn 867 866 868 83 (set (reg:DI 907)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 89 {*movdi_internal}
     (nil))
(insn 868 867 869 83 (parallel [
            (set (reg:SI 908 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 907) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:641 544 {*lshrsi3_1}
     (nil))
(insn 869 868 870 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 30 [0x1e])) [0 MEM[(BitSequence *)hashval_6(D) + 30B]+0 S1 A8])
        (subreg:QI (reg:SI 908 [ D.6032 ]) 0)) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(insn 870 869 871 83 (set (reg:DI 909)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 160 [0xa0])) [3 state_4(D)->h64+24 S8 A64])) blake_ref.c:641 89 {*movdi_internal}
     (nil))
(insn 871 870 872 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 31 [0x1f])) [0 MEM[(BitSequence *)hashval_6(D) + 31B]+0 S1 A8])
        (subreg:QI (reg:DI 909) 0)) blake_ref.c:641 93 {*movqi_internal}
     (nil))
(insn 872 871 873 83 (set (reg:DI 911)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 89 {*movdi_internal}
     (nil))
(insn 873 872 874 83 (parallel [
            (set (reg:DI 910 [ D.6036 ])
                (lshiftrt:DI (reg:DI 911)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 874 873 875 83 (parallel [
            (set (reg:SI 912 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 910 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 544 {*lshrsi3_1}
     (nil))
(insn 875 874 876 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 32 [0x20])) [0 MEM[(BitSequence *)hashval_6(D) + 32B]+0 S1 A8])
        (subreg:QI (reg:SI 912 [ D.6032 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(insn 876 875 877 83 (set (reg:DI 914)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 89 {*movdi_internal}
     (nil))
(insn 877 876 878 83 (parallel [
            (set (reg:DI 913 [ D.6036 ])
                (lshiftrt:DI (reg:DI 914)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 878 877 879 83 (parallel [
            (set (reg:SI 915 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 913 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 544 {*lshrsi3_1}
     (nil))
(insn 879 878 880 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 33 [0x21])) [0 MEM[(BitSequence *)hashval_6(D) + 33B]+0 S1 A8])
        (subreg:QI (reg:SI 915 [ D.6032 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(insn 880 879 881 83 (set (reg:DI 917)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 89 {*movdi_internal}
     (nil))
(insn 881 880 882 83 (parallel [
            (set (reg:DI 916 [ D.6036 ])
                (lshiftrt:DI (reg:DI 917)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 882 881 883 83 (parallel [
            (set (reg:SI 918 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 916 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 544 {*lshrsi3_1}
     (nil))
(insn 883 882 884 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 34 [0x22])) [0 MEM[(BitSequence *)hashval_6(D) + 34B]+0 S1 A8])
        (subreg:QI (reg:SI 918 [ D.6032 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(insn 884 883 885 83 (set (reg:DI 920)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 89 {*movdi_internal}
     (nil))
(insn 885 884 886 83 (parallel [
            (set (reg:DI 919 [ D.6036 ])
                (lshiftrt:DI (reg:DI 920)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 886 885 887 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 35 [0x23])) [0 MEM[(BitSequence *)hashval_6(D) + 35B]+0 S1 A8])
        (subreg:QI (reg:DI 919 [ D.6036 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(insn 887 886 888 83 (set (reg:DI 921)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 89 {*movdi_internal}
     (nil))
(insn 888 887 889 83 (parallel [
            (set (reg:SI 922 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 921) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 544 {*lshrsi3_1}
     (nil))
(insn 889 888 890 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 36 [0x24])) [0 MEM[(BitSequence *)hashval_6(D) + 36B]+0 S1 A8])
        (subreg:QI (reg:SI 922 [ D.6032 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(insn 890 889 891 83 (set (reg:DI 923)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 89 {*movdi_internal}
     (nil))
(insn 891 890 892 83 (parallel [
            (set (reg:SI 924 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 923) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 544 {*lshrsi3_1}
     (nil))
(insn 892 891 893 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 37 [0x25])) [0 MEM[(BitSequence *)hashval_6(D) + 37B]+0 S1 A8])
        (subreg:QI (reg:SI 924 [ D.6032 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(insn 893 892 894 83 (set (reg:DI 925)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 89 {*movdi_internal}
     (nil))
(insn 894 893 895 83 (parallel [
            (set (reg:SI 926 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 925) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:642 544 {*lshrsi3_1}
     (nil))
(insn 895 894 896 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 38 [0x26])) [0 MEM[(BitSequence *)hashval_6(D) + 38B]+0 S1 A8])
        (subreg:QI (reg:SI 926 [ D.6032 ]) 0)) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(insn 896 895 897 83 (set (reg:DI 927)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 168 [0xa8])) [3 state_4(D)->h64+32 S8 A64])) blake_ref.c:642 89 {*movdi_internal}
     (nil))
(insn 897 896 898 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 39 [0x27])) [0 MEM[(BitSequence *)hashval_6(D) + 39B]+0 S1 A8])
        (subreg:QI (reg:DI 927) 0)) blake_ref.c:642 93 {*movqi_internal}
     (nil))
(insn 898 897 899 83 (set (reg:DI 929)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 89 {*movdi_internal}
     (nil))
(insn 899 898 900 83 (parallel [
            (set (reg:DI 928 [ D.6036 ])
                (lshiftrt:DI (reg:DI 929)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 900 899 901 83 (parallel [
            (set (reg:SI 930 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 928 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 544 {*lshrsi3_1}
     (nil))
(insn 901 900 902 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 40 [0x28])) [0 MEM[(BitSequence *)hashval_6(D) + 40B]+0 S1 A8])
        (subreg:QI (reg:SI 930 [ D.6032 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(insn 902 901 903 83 (set (reg:DI 932)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 89 {*movdi_internal}
     (nil))
(insn 903 902 904 83 (parallel [
            (set (reg:DI 931 [ D.6036 ])
                (lshiftrt:DI (reg:DI 932)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 904 903 905 83 (parallel [
            (set (reg:SI 933 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 931 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 544 {*lshrsi3_1}
     (nil))
(insn 905 904 906 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 41 [0x29])) [0 MEM[(BitSequence *)hashval_6(D) + 41B]+0 S1 A8])
        (subreg:QI (reg:SI 933 [ D.6032 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(insn 906 905 907 83 (set (reg:DI 935)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 89 {*movdi_internal}
     (nil))
(insn 907 906 908 83 (parallel [
            (set (reg:DI 934 [ D.6036 ])
                (lshiftrt:DI (reg:DI 935)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 908 907 909 83 (parallel [
            (set (reg:SI 936 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 934 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 544 {*lshrsi3_1}
     (nil))
(insn 909 908 910 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 42 [0x2a])) [0 MEM[(BitSequence *)hashval_6(D) + 42B]+0 S1 A8])
        (subreg:QI (reg:SI 936 [ D.6032 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(insn 910 909 911 83 (set (reg:DI 938)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 89 {*movdi_internal}
     (nil))
(insn 911 910 912 83 (parallel [
            (set (reg:DI 937 [ D.6036 ])
                (lshiftrt:DI (reg:DI 938)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 912 911 913 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 43 [0x2b])) [0 MEM[(BitSequence *)hashval_6(D) + 43B]+0 S1 A8])
        (subreg:QI (reg:DI 937 [ D.6036 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(insn 913 912 914 83 (set (reg:DI 939)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 89 {*movdi_internal}
     (nil))
(insn 914 913 915 83 (parallel [
            (set (reg:SI 940 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 939) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 544 {*lshrsi3_1}
     (nil))
(insn 915 914 916 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 44 [0x2c])) [0 MEM[(BitSequence *)hashval_6(D) + 44B]+0 S1 A8])
        (subreg:QI (reg:SI 940 [ D.6032 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(insn 916 915 917 83 (set (reg:DI 941)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 89 {*movdi_internal}
     (nil))
(insn 917 916 918 83 (parallel [
            (set (reg:SI 942 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 941) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 544 {*lshrsi3_1}
     (nil))
(insn 918 917 919 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 45 [0x2d])) [0 MEM[(BitSequence *)hashval_6(D) + 45B]+0 S1 A8])
        (subreg:QI (reg:SI 942 [ D.6032 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(insn 919 918 920 83 (set (reg:DI 943)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 89 {*movdi_internal}
     (nil))
(insn 920 919 921 83 (parallel [
            (set (reg:SI 944 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 943) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:643 544 {*lshrsi3_1}
     (nil))
(insn 921 920 922 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 46 [0x2e])) [0 MEM[(BitSequence *)hashval_6(D) + 46B]+0 S1 A8])
        (subreg:QI (reg:SI 944 [ D.6032 ]) 0)) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(insn 922 921 923 83 (set (reg:DI 945)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 176 [0xb0])) [3 state_4(D)->h64+40 S8 A64])) blake_ref.c:643 89 {*movdi_internal}
     (nil))
(insn 923 922 924 83 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 47 [0x2f])) [0 MEM[(BitSequence *)hashval_6(D) + 47B]+0 S1 A8])
        (subreg:QI (reg:DI 945) 0)) blake_ref.c:643 93 {*movqi_internal}
     (nil))
(insn 924 923 925 83 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 633 [ state ]) [2 state_4(D)->hashbitlen+0 S4 A64])
            (const_int 512 [0x200]))) blake_ref.c:645 7 {*cmpsi_1}
     (nil))
(jump_insn 925 924 926 83 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 981)
            (pc))) blake_ref.c:645 612 {*jcc_1}
     (int_list:REG_BR_PROB 6218 (nil))
 -> 981)
;;  succ:       84 [37.8%]  (FALLTHRU)
;;              85 [62.2%] 

;; basic block 84, loop depth 0, count 0, freq 2307, maybe hot
;;  prev block 83, next block 85, flags: (RTL)
;;  pred:       83 [37.8%]  (FALLTHRU)
(note 926 925 927 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 927 926 928 84 (set (reg:DI 947)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 89 {*movdi_internal}
     (nil))
(insn 928 927 929 84 (parallel [
            (set (reg:DI 946 [ D.6036 ])
                (lshiftrt:DI (reg:DI 947)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 929 928 930 84 (parallel [
            (set (reg:SI 948 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 946 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 544 {*lshrsi3_1}
     (nil))
(insn 930 929 931 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 48 [0x30])) [0 MEM[(BitSequence *)hashval_6(D) + 48B]+0 S1 A8])
        (subreg:QI (reg:SI 948 [ D.6032 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(insn 931 930 932 84 (set (reg:DI 950)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 89 {*movdi_internal}
     (nil))
(insn 932 931 933 84 (parallel [
            (set (reg:DI 949 [ D.6036 ])
                (lshiftrt:DI (reg:DI 950)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 933 932 934 84 (parallel [
            (set (reg:SI 951 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 949 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 544 {*lshrsi3_1}
     (nil))
(insn 934 933 935 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 49 [0x31])) [0 MEM[(BitSequence *)hashval_6(D) + 49B]+0 S1 A8])
        (subreg:QI (reg:SI 951 [ D.6032 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(insn 935 934 936 84 (set (reg:DI 953)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 89 {*movdi_internal}
     (nil))
(insn 936 935 937 84 (parallel [
            (set (reg:DI 952 [ D.6036 ])
                (lshiftrt:DI (reg:DI 953)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 937 936 938 84 (parallel [
            (set (reg:SI 954 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 952 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 544 {*lshrsi3_1}
     (nil))
(insn 938 937 939 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 50 [0x32])) [0 MEM[(BitSequence *)hashval_6(D) + 50B]+0 S1 A8])
        (subreg:QI (reg:SI 954 [ D.6032 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(insn 939 938 940 84 (set (reg:DI 956)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 89 {*movdi_internal}
     (nil))
(insn 940 939 941 84 (parallel [
            (set (reg:DI 955 [ D.6036 ])
                (lshiftrt:DI (reg:DI 956)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 941 940 942 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 51 [0x33])) [0 MEM[(BitSequence *)hashval_6(D) + 51B]+0 S1 A8])
        (subreg:QI (reg:DI 955 [ D.6036 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(insn 942 941 943 84 (set (reg:DI 957)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 89 {*movdi_internal}
     (nil))
(insn 943 942 944 84 (parallel [
            (set (reg:SI 958 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 957) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 544 {*lshrsi3_1}
     (nil))
(insn 944 943 945 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 52 [0x34])) [0 MEM[(BitSequence *)hashval_6(D) + 52B]+0 S1 A8])
        (subreg:QI (reg:SI 958 [ D.6032 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(insn 945 944 946 84 (set (reg:DI 959)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 89 {*movdi_internal}
     (nil))
(insn 946 945 947 84 (parallel [
            (set (reg:SI 960 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 959) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 544 {*lshrsi3_1}
     (nil))
(insn 947 946 948 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 53 [0x35])) [0 MEM[(BitSequence *)hashval_6(D) + 53B]+0 S1 A8])
        (subreg:QI (reg:SI 960 [ D.6032 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(insn 948 947 949 84 (set (reg:DI 961)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 89 {*movdi_internal}
     (nil))
(insn 949 948 950 84 (parallel [
            (set (reg:SI 962 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 961) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:646 544 {*lshrsi3_1}
     (nil))
(insn 950 949 951 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 54 [0x36])) [0 MEM[(BitSequence *)hashval_6(D) + 54B]+0 S1 A8])
        (subreg:QI (reg:SI 962 [ D.6032 ]) 0)) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(insn 951 950 952 84 (set (reg:DI 963)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 184 [0xb8])) [3 state_4(D)->h64+48 S8 A64])) blake_ref.c:646 89 {*movdi_internal}
     (nil))
(insn 952 951 953 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 55 [0x37])) [0 MEM[(BitSequence *)hashval_6(D) + 55B]+0 S1 A8])
        (subreg:QI (reg:DI 963) 0)) blake_ref.c:646 93 {*movqi_internal}
     (nil))
(insn 953 952 954 84 (set (reg:DI 965)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 89 {*movdi_internal}
     (nil))
(insn 954 953 955 84 (parallel [
            (set (reg:DI 964 [ D.6036 ])
                (lshiftrt:DI (reg:DI 965)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 955 954 956 84 (parallel [
            (set (reg:SI 966 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 964 [ D.6036 ]) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 544 {*lshrsi3_1}
     (nil))
(insn 956 955 957 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 56 [0x38])) [0 MEM[(BitSequence *)hashval_6(D) + 56B]+0 S1 A8])
        (subreg:QI (reg:SI 966 [ D.6032 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(insn 957 956 958 84 (set (reg:DI 968)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 89 {*movdi_internal}
     (nil))
(insn 958 957 959 84 (parallel [
            (set (reg:DI 967 [ D.6036 ])
                (lshiftrt:DI (reg:DI 968)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 959 958 960 84 (parallel [
            (set (reg:SI 969 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 967 [ D.6036 ]) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 544 {*lshrsi3_1}
     (nil))
(insn 960 959 961 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 57 [0x39])) [0 MEM[(BitSequence *)hashval_6(D) + 57B]+0 S1 A8])
        (subreg:QI (reg:SI 969 [ D.6032 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(insn 961 960 962 84 (set (reg:DI 971)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 89 {*movdi_internal}
     (nil))
(insn 962 961 963 84 (parallel [
            (set (reg:DI 970 [ D.6036 ])
                (lshiftrt:DI (reg:DI 971)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 963 962 964 84 (parallel [
            (set (reg:SI 972 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 970 [ D.6036 ]) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 544 {*lshrsi3_1}
     (nil))
(insn 964 963 965 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 58 [0x3a])) [0 MEM[(BitSequence *)hashval_6(D) + 58B]+0 S1 A8])
        (subreg:QI (reg:SI 972 [ D.6032 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(insn 965 964 966 84 (set (reg:DI 974)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 89 {*movdi_internal}
     (nil))
(insn 966 965 967 84 (parallel [
            (set (reg:DI 973 [ D.6036 ])
                (lshiftrt:DI (reg:DI 974)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 546 {*lshrdi3_1}
     (expr_list:REG_EQUAL (lshiftrt:DI (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                    (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 967 966 968 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 59 [0x3b])) [0 MEM[(BitSequence *)hashval_6(D) + 59B]+0 S1 A8])
        (subreg:QI (reg:DI 973 [ D.6036 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(insn 968 967 969 84 (set (reg:DI 975)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 89 {*movdi_internal}
     (nil))
(insn 969 968 970 84 (parallel [
            (set (reg:SI 976 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 975) 0)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 544 {*lshrsi3_1}
     (nil))
(insn 970 969 971 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 60 [0x3c])) [0 MEM[(BitSequence *)hashval_6(D) + 60B]+0 S1 A8])
        (subreg:QI (reg:SI 976 [ D.6032 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(insn 971 970 972 84 (set (reg:DI 977)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 89 {*movdi_internal}
     (nil))
(insn 972 971 973 84 (parallel [
            (set (reg:SI 978 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 977) 0)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 544 {*lshrsi3_1}
     (nil))
(insn 973 972 974 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 61 [0x3d])) [0 MEM[(BitSequence *)hashval_6(D) + 61B]+0 S1 A8])
        (subreg:QI (reg:SI 978 [ D.6032 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(insn 974 973 975 84 (set (reg:DI 979)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 89 {*movdi_internal}
     (nil))
(insn 975 974 976 84 (parallel [
            (set (reg:SI 980 [ D.6032 ])
                (lshiftrt:SI (subreg:SI (reg:DI 979) 0)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:647 544 {*lshrsi3_1}
     (nil))
(insn 976 975 977 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 62 [0x3e])) [0 MEM[(BitSequence *)hashval_6(D) + 62B]+0 S1 A8])
        (subreg:QI (reg:SI 980 [ D.6032 ]) 0)) blake_ref.c:647 93 {*movqi_internal}
     (nil))
(insn 977 976 978 84 (set (reg:DI 981)
        (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 192 [0xc0])) [3 state_4(D)->h64+56 S8 A64])) blake_ref.c:647 89 {*movdi_internal}
     (nil))
(insn 978 977 981 84 (set (mem:QI (plus:DI (reg/v/f:DI 634 [ hashval ])
                (const_int 63 [0x3f])) [0 MEM[(BitSequence *)hashval_6(D) + 63B]+0 S1 A8])
        (subreg:QI (reg:DI 981) 0)) blake_ref.c:647 93 {*movqi_internal}
     (nil))
;;  succ:       85 [100.0%]  (FALLTHRU)

;; basic block 85, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 84, next block 86, flags: (RTL)
;;  pred:       41 [100.0%]  (FALLTHRU)
;;              84 [100.0%]  (FALLTHRU)
;;              40 [62.2%] 
;;              83 [62.2%] 
(code_label 981 978 982 85 117 "" [2 uses])
(note 982 981 983 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 983 982 986 85 (set (reg:SI 632 [ <retval> ])
        (const_int 0 [0])) 90 {*movsi_internal}
     (nil))
;;  succ:       88 [100.0%]  (FALLTHRU)

;; basic block 86, loop depth 0, count 0, freq 702, maybe hot
;;  prev block 85, next block 87, flags: (RTL)
;;  pred:       12 [100.0%]  (FALLTHRU)
;;              11 [50.0%] 
(code_label 986 983 987 86 100 "" [1 uses])
(note 987 986 988 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 988 987 989 86 (parallel [
            (set (reg:SI 983)
                (plus:SI (reg/v:SI 91 [ low ])
                    (const_int -440 [0xfffffffffffffe48])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:440 217 {*addsi_1}
     (nil))
(insn 989 988 990 86 (set (mem:SI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 48 [0x30])) [2 state_4(D)->t32+0 S4 A64])
        (reg:SI 983)) blake_ref.c:440 90 {*movsi_internal}
     (nil))
(insn 990 989 991 86 (set (reg:SI 985)
        (const_int 440 [0x1b8])) 90 {*movsi_internal}
     (nil))
(insn 991 990 992 86 (parallel [
            (set (reg:SI 984 [ D.6033 ])
                (minus:SI (reg:SI 985)
                    (reg:SI 89 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) 260 {*subsi_1}
     (nil))
(insn 992 991 993 86 (set (reg:DI 986 [ D.6036 ])
        (sign_extend:DI (reg:SI 984 [ D.6033 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 993 992 994 86 (set (reg:DI 37 r8)
        (reg:DI 986 [ D.6036 ])) 89 {*movdi_internal}
     (nil))
(insn 994 993 995 86 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 995 994 996 86 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 996 995 1000 86 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       17 [100.0%]  (FALLTHRU)

;; basic block 87, loop depth 0, count 0, freq 1098, maybe hot
;;  prev block 86, next block 88, flags: (RTL)
;;  pred:       51 [100.0%]  (FALLTHRU)
;;              50 [50.0%] 
(code_label 1000 996 1001 87 124 "" [1 uses])
(note 1001 1000 1002 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 1002 1001 1003 87 (set (reg:SI 988)
        (const_int 888 [0x378])) blake_ref.c:563 90 {*movsi_internal}
     (nil))
(insn 1003 1002 1004 87 (parallel [
            (set (reg:SI 987 [ D.6033 ])
                (minus:SI (reg:SI 988)
                    (reg:SI 242 [ D.6033 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:563 260 {*subsi_1}
     (nil))
(insn 1004 1003 1005 87 (set (reg:DI 603 [ D.6036 ])
        (sign_extend:DI (reg:SI 987 [ D.6033 ]))) blake_ref.c:563 142 {*extendsidi2_rex64}
     (nil))
(insn 1005 1004 1006 87 (parallel [
            (set (reg:DI 989)
                (minus:DI (reg:DI 241 [ D.6036 ])
                    (reg:DI 603 [ D.6036 ])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:563 261 {*subdi_1}
     (nil))
(insn 1006 1005 1007 87 (set (mem:DI (plus:DI (reg/v/f:DI 633 [ state ])
                (const_int 200 [0xc8])) [3 state_4(D)->t64+0 S8 A64])
        (reg:DI 989)) blake_ref.c:563 89 {*movdi_internal}
     (nil))
(insn 1007 1006 1008 87 (set (reg:DI 37 r8)
        (reg:DI 603 [ D.6036 ])) 89 {*movdi_internal}
     (nil))
(insn 1008 1007 1009 87 (set (reg:DI 1 dx)
        (symbol_ref:DI ("padding") [flags 0x2]  <var_decl 0x6ffffe13cc0 padding>)) 89 {*movdi_internal}
     (nil))
(insn 1009 1008 1010 87 (set (reg:DI 2 cx)
        (reg/v/f:DI 633 [ state ])) 89 {*movdi_internal}
     (nil))
(call_insn 1010 1009 1017 87 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       56 [100.0%]  (FALLTHRU)

;; basic block 88, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 87, next block 1, flags: (RTL)
;;  pred:       85 [100.0%]  (FALLTHRU)
(note 1017 1010 1015 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 1015 1017 1016 88 (set (reg/i:SI 0 ax)
        (reg:SI 632 [ <retval> ])) blake_ref.c:659 90 {*movsi_internal}
     (nil))
(insn 1016 1015 0 88 (use (reg/i:SI 0 ax)) blake_ref.c:659 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function Hash (Hash, funcdef_no=21, decl_uid=3197, cgraph_uid=21, symbol_order=29)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 9 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v:SI 95 [ hashbitlen ])
        (reg:SI 2 cx [ hashbitlen ])) blake_ref.c:662 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:DI 16 argp) [2 hashbitlen+0 S4 A64])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 96 [ data ])
        (reg:DI 1 dx [ data ])) blake_ref.c:662 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [4 data+0 S8 A64])
        (nil)))
(insn 4 3 5 2 (set (reg/v:DI 97 [ databitlen ])
        (reg:DI 37 r8 [ databitlen ])) blake_ref.c:662 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [3 databitlen+0 S8 A64])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 98 [ hashval ])
        (reg:DI 38 r9 [ hashval ])) blake_ref.c:662 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 24 [0x18])) [4 hashval+0 S8 A64])
        (nil)))
(note 6 5 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 6 12 2 (set (reg:SI 93 [ D.6062 ])
        (reg/v:SI 95 [ hashbitlen ])) blake_ref.c:207 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 99 [ D.6062 ])
                (plus:SI (reg:SI 93 [ D.6062 ])
                    (const_int -224 [0xffffffffffffff20])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 217 {*addsi_1}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 100 [ D.6062 ])
                (and:SI (reg:SI 99 [ D.6062 ])
                    (const_int -33 [0xffffffffffffffdf])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:207 381 {*andsi_1}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ D.6062 ])
            (const_int 0 [0]))) blake_ref.c:207 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) blake_ref.c:207 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 57)
;;  succ:       3 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 

;; basic block 3, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 95 [ hashbitlen ])
            (const_int 224 [0xe0]))) blake_ref.c:210 7 {*cmpsi_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) blake_ref.c:210 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 31)
;;  succ:       4 [28.0%]  (FALLTHRU)
;;              5 [72.0%] 

;; basic block 4, loop depth 0, count 0, freq 43, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [28.0%]  (FALLTHRU)
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg/f:DI 101)
        (symbol_ref:DI ("IV224") [flags 0x2]  <var_decl 0x6ffffe13f00 IV224>)) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (reg:DI 102)
        (mem/u/c:DI (reg/f:DI 101) [0 MEM[(char * {ref-all})&IV224]+0 S8 A256])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -368 [0xfffffffffffffe90])) [0 MEM[(char * {ref-all})&state + 16B]+0 S8 A128])
        (reg:DI 102)) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 103)
        (mem/u/c:DI (plus:DI (reg/f:DI 101)
                (const_int 8 [0x8])) [0 MEM[(char * {ref-all})&IV224]+8 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -360 [0xfffffffffffffe98])) [0 MEM[(char * {ref-all})&state + 16B]+8 S8 A64])
        (reg:DI 103)) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 104)
        (mem/u/c:DI (plus:DI (reg/f:DI 101)
                (const_int 16 [0x10])) [0 MEM[(char * {ref-all})&IV224]+16 S8 A128])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -352 [0xfffffffffffffea0])) [0 MEM[(char * {ref-all})&state + 16B]+16 S8 A128])
        (reg:DI 104)) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 105)
        (mem/u/c:DI (plus:DI (reg/f:DI 101)
                (const_int 24 [0x18])) [0 MEM[(char * {ref-all})&IV224]+24 S8 A64])) blake_ref.c:211 89 {*movdi_internal}
     (nil))
(insn 28 27 31 4 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -344 [0xfffffffffffffea8])) [0 MEM[(char * {ref-all})&state + 16B]+24 S8 A64])
        (reg:DI 105)) blake_ref.c:211 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 111, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3 [72.0%] 
(code_label 31 28 32 5 197 "" [1 uses])
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 5 (set (reg/f:DI 106)
        (symbol_ref:DI ("IV256") [flags 0x2]  <var_decl 0x6ffffe13de0 IV256>)) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:DI 107)
        (mem/u/c:DI (reg/f:DI 106) [0 MEM[(char * {ref-all})&IV256]+0 S8 A256])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -368 [0xfffffffffffffe90])) [0 MEM[(char * {ref-all})&state + 16B]+0 S8 A128])
        (reg:DI 107)) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:DI 108)
        (mem/u/c:DI (plus:DI (reg/f:DI 106)
                (const_int 8 [0x8])) [0 MEM[(char * {ref-all})&IV256]+8 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 37 36 38 5 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -360 [0xfffffffffffffe98])) [0 MEM[(char * {ref-all})&state + 16B]+8 S8 A64])
        (reg:DI 108)) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 109)
        (mem/u/c:DI (plus:DI (reg/f:DI 106)
                (const_int 16 [0x10])) [0 MEM[(char * {ref-all})&IV256]+16 S8 A128])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -352 [0xfffffffffffffea0])) [0 MEM[(char * {ref-all})&state + 16B]+16 S8 A128])
        (reg:DI 109)) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:DI 110)
        (mem/u/c:DI (plus:DI (reg/f:DI 106)
                (const_int 24 [0x18])) [0 MEM[(char * {ref-all})&IV256]+24 S8 A64])) blake_ref.c:213 89 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -344 [0xfffffffffffffea8])) [0 MEM[(char * {ref-all})&state + 16B]+24 S8 A64])
        (reg:DI 110)) blake_ref.c:213 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              5 [100.0%]  (FALLTHRU)
(code_label 42 41 43 6 198 "" [0 uses])
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -336 [0xfffffffffffffeb0])) [2 state.t32+0 S4 A128])
        (const_int 0 [0])) blake_ref.c:215 90 {*movsi_internal}
     (nil))
(insn 45 44 46 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -332 [0xfffffffffffffeb4])) [2 state.t32+4 S4 A32])
        (const_int 0 [0])) blake_ref.c:216 90 {*movsi_internal}
     (nil))
(insn 46 45 47 6 (parallel [
            (set (reg:DI 111)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 47 46 48 6 (parallel [
            (set (reg:DI 112)
                (plus:DI (reg:DI 111)
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 48 47 49 6 (set (reg:DI 113 [ D.6063 ])
        (reg:DI 112)) 89 {*movdi_internal}
     (nil))
(insn 49 48 50 6 (set (reg/f:DI 114)
        (reg:DI 113 [ D.6063 ])) 89 {*movdi_internal}
     (nil))
(insn 50 49 51 6 (set (reg:DI 115)
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 51 50 52 6 (set (reg:DI 116)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 52 51 53 6 (parallel [
            (set (reg:DI 116)
                (const_int 0 [0]))
            (set (reg/f:DI 114)
                (plus:DI (ashift:DI (reg:DI 116)
                        (const_int 3 [0x3]))
                    (reg/f:DI 114)))
            (set (mem/c:BLK (reg/f:DI 114) [0 MEM[(void *)&state + 56B]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 115))
            (use (reg:DI 116))
        ]) 933 {*rep_stosdi_rex64}
     (nil))
(insn 53 52 54 6 (set (reg:V4SI 117)
        (const_vector:V4SI [
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
                (const_int 0 [0])
            ])) blake_ref.c:221 1194 {*movv4si_internal}
     (nil))
(insn 54 53 57 6 (set (mem/c:V16QI (plus:DI (reg/f:DI 20 frame)
                (const_int -264 [0xfffffffffffffef8])) [2 MEM[(unsigned int *)&state + 120B]+0 S16 A64])
        (unspec:V16QI [
                (subreg:V16QI (reg:V4SI 117) 0)
            ] UNSPEC_STOREU)) blake_ref.c:221 1312 {sse2_storedquv16qi}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 154, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       2 [50.0%] 
(code_label 57 54 58 7 196 "" [1 uses])
(note 58 57 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 7 (parallel [
            (set (reg:SI 118 [ D.6062 ])
                (plus:SI (reg:SI 93 [ D.6062 ])
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 217 {*addsi_1}
     (nil))
(insn 60 59 61 7 (parallel [
            (set (reg:SI 119 [ D.6062 ])
                (and:SI (reg:SI 118 [ D.6062 ])
                    (const_int -129 [0xffffffffffffff7f])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:227 381 {*andsi_1}
     (nil))
(insn 61 60 62 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 119 [ D.6062 ])
            (const_int 0 [0]))) blake_ref.c:227 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 62 61 63 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 168)
            (pc))) blake_ref.c:227 612 {*jcc_1}
     (int_list:REG_BR_PROB 6700 (nil))
 -> 168)
;;  succ:       8 [33.0%]  (FALLTHRU)
;;              18 [67.0%] 

;; basic block 8, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [33.0%]  (FALLTHRU)
(note 63 62 64 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 95 [ hashbitlen ])
            (const_int 384 [0x180]))) blake_ref.c:230 7 {*cmpsi_1}
     (nil))
(jump_insn 65 64 66 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) blake_ref.c:230 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 86)
;;  succ:       9 [28.0%]  (FALLTHRU)
;;              10 [72.0%] 

;; basic block 9, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 [28.0%]  (FALLTHRU)
(note 66 65 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 9 (set (reg/f:DI 120)
        (symbol_ref:DI ("IV384") [flags 0x2]  <var_decl 0x6ffffe14020 IV384>)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 68 67 69 9 (set (reg:DI 121)
        (mem/u/c:DI (reg/f:DI 120) [0 MEM[(char * {ref-all})&IV384]+0 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 69 68 70 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -248 [0xffffffffffffff08])) [0 MEM[(char * {ref-all})&state + 136B]+0 S8 A64])
        (reg:DI 121)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 70 69 71 9 (set (reg:DI 122)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 8 [0x8])) [0 MEM[(char * {ref-all})&IV384]+8 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 71 70 72 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 MEM[(char * {ref-all})&state + 136B]+8 S8 A64])
        (reg:DI 122)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (reg:DI 123)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 16 [0x10])) [0 MEM[(char * {ref-all})&IV384]+16 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 73 72 74 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -232 [0xffffffffffffff18])) [0 MEM[(char * {ref-all})&state + 136B]+16 S8 A64])
        (reg:DI 123)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 74 73 75 9 (set (reg:DI 124)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 24 [0x18])) [0 MEM[(char * {ref-all})&IV384]+24 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 75 74 76 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -224 [0xffffffffffffff20])) [0 MEM[(char * {ref-all})&state + 136B]+24 S8 A64])
        (reg:DI 124)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 76 75 77 9 (set (reg:DI 125)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 32 [0x20])) [0 MEM[(char * {ref-all})&IV384]+32 S8 A256])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 77 76 78 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -216 [0xffffffffffffff28])) [0 MEM[(char * {ref-all})&state + 136B]+32 S8 A64])
        (reg:DI 125)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 78 77 79 9 (set (reg:DI 126)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 40 [0x28])) [0 MEM[(char * {ref-all})&IV384]+40 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 79 78 80 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -208 [0xffffffffffffff30])) [0 MEM[(char * {ref-all})&state + 136B]+40 S8 A64])
        (reg:DI 126)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 80 79 81 9 (set (reg:DI 127)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 48 [0x30])) [0 MEM[(char * {ref-all})&IV384]+48 S8 A128])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 81 80 82 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -200 [0xffffffffffffff38])) [0 MEM[(char * {ref-all})&state + 136B]+48 S8 A64])
        (reg:DI 127)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 82 81 83 9 (set (reg:DI 128)
        (mem/u/c:DI (plus:DI (reg/f:DI 120)
                (const_int 56 [0x38])) [0 MEM[(char * {ref-all})&IV384]+56 S8 A64])) blake_ref.c:231 89 {*movdi_internal}
     (nil))
(insn 83 82 86 9 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -192 [0xffffffffffffff40])) [0 MEM[(char * {ref-all})&state + 136B]+56 S8 A64])
        (reg:DI 128)) blake_ref.c:231 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)

;; basic block 10, loop depth 0, count 0, freq 37, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       8 [72.0%] 
(code_label 86 83 87 10 201 "" [1 uses])
(note 87 86 88 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 10 (set (reg/f:DI 129)
        (symbol_ref:DI ("IV512") [flags 0x2]  <var_decl 0x6ffffe14140 IV512>)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 89 88 90 10 (set (reg:DI 130)
        (mem/u/c:DI (reg/f:DI 129) [0 MEM[(char * {ref-all})&IV512]+0 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 90 89 91 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -248 [0xffffffffffffff08])) [0 MEM[(char * {ref-all})&state + 136B]+0 S8 A64])
        (reg:DI 130)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 91 90 92 10 (set (reg:DI 131)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 8 [0x8])) [0 MEM[(char * {ref-all})&IV512]+8 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 92 91 93 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -240 [0xffffffffffffff10])) [0 MEM[(char * {ref-all})&state + 136B]+8 S8 A64])
        (reg:DI 131)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 93 92 94 10 (set (reg:DI 132)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 16 [0x10])) [0 MEM[(char * {ref-all})&IV512]+16 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 94 93 95 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -232 [0xffffffffffffff18])) [0 MEM[(char * {ref-all})&state + 136B]+16 S8 A64])
        (reg:DI 132)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 95 94 96 10 (set (reg:DI 133)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 24 [0x18])) [0 MEM[(char * {ref-all})&IV512]+24 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 96 95 97 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -224 [0xffffffffffffff20])) [0 MEM[(char * {ref-all})&state + 136B]+24 S8 A64])
        (reg:DI 133)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 97 96 98 10 (set (reg:DI 134)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 32 [0x20])) [0 MEM[(char * {ref-all})&IV512]+32 S8 A256])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 98 97 99 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -216 [0xffffffffffffff28])) [0 MEM[(char * {ref-all})&state + 136B]+32 S8 A64])
        (reg:DI 134)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 99 98 100 10 (set (reg:DI 135)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 40 [0x28])) [0 MEM[(char * {ref-all})&IV512]+40 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 100 99 101 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -208 [0xffffffffffffff30])) [0 MEM[(char * {ref-all})&state + 136B]+40 S8 A64])
        (reg:DI 135)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 101 100 102 10 (set (reg:DI 136)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 48 [0x30])) [0 MEM[(char * {ref-all})&IV512]+48 S8 A128])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 102 101 103 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -200 [0xffffffffffffff38])) [0 MEM[(char * {ref-all})&state + 136B]+48 S8 A64])
        (reg:DI 136)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 103 102 104 10 (set (reg:DI 137)
        (mem/u/c:DI (plus:DI (reg/f:DI 129)
                (const_int 56 [0x38])) [0 MEM[(char * {ref-all})&IV512]+56 S8 A64])) blake_ref.c:233 89 {*movdi_internal}
     (nil))
(insn 104 103 105 10 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -192 [0xffffffffffffff40])) [0 MEM[(char * {ref-all})&state + 136B]+56 S8 A64])
        (reg:DI 137)) blake_ref.c:233 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)

;; basic block 11, loop depth 0, count 0, freq 51, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              10 [100.0%]  (FALLTHRU)
(code_label 105 104 106 11 202 "" [0 uses])
(note 106 105 107 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 11 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -184 [0xffffffffffffff48])) [3 state.t64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:235 89 {*movdi_internal}
     (nil))
(insn 108 107 109 11 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -176 [0xffffffffffffff50])) [3 state.t64+8 S8 A128])
        (const_int 0 [0])) blake_ref.c:236 89 {*movdi_internal}
     (nil))
(insn 109 108 110 11 (parallel [
            (set (reg:DI 138)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 110 109 111 11 (parallel [
            (set (reg:DI 139)
                (plus:DI (reg:DI 138)
                    (const_int 216 [0xd8])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 111 110 112 11 (set (reg:DI 140 [ D.6064 ])
        (reg:DI 139)) 89 {*movdi_internal}
     (nil))
(insn 112 111 113 11 (set (reg/f:DI 141)
        (reg:DI 140 [ D.6064 ])) 89 {*movdi_internal}
     (nil))
(insn 113 112 114 11 (set (reg:DI 142)
        (const_int 0 [0])) 89 {*movdi_internal}
     (nil))
(insn 114 113 115 11 (set (reg:DI 143)
        (const_int 8 [0x8])) 89 {*movdi_internal}
     (nil))
(insn 115 114 116 11 (parallel [
            (set (reg:DI 143)
                (const_int 0 [0]))
            (set (reg/f:DI 141)
                (plus:DI (ashift:DI (reg:DI 143)
                        (const_int 3 [0x3]))
                    (reg/f:DI 141)))
            (set (mem/c:BLK (reg/f:DI 141) [0 MEM[(void *)&state + 216B]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 142))
            (use (reg:DI 143))
        ]) 933 {*rep_stosdi_rex64}
     (nil))
(insn 116 115 117 11 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 state.salt64+0 S8 A64])
        (const_int 0 [0])) blake_ref.c:241 89 {*movdi_internal}
     (nil))
(insn 117 116 118 11 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 state.salt64+8 S8 A128])
        (const_int 0 [0])) blake_ref.c:242 89 {*movdi_internal}
     (nil))
(insn 118 117 119 11 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 state.salt64+16 S8 A64])
        (const_int 0 [0])) blake_ref.c:243 89 {*movdi_internal}
     (nil))
(insn 119 118 120 11 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 state.salt64+24 S8 A128])
        (const_int 0 [0])) blake_ref.c:244 89 {*movdi_internal}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)

;; basic block 12, loop depth 0, count 0, freq 205, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       6 [100.0%]  (FALLTHRU)
;;              11 [100.0%]  (FALLTHRU)
(code_label 120 119 121 12 199 "" [0 uses])
(note 121 120 122 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -384 [0xfffffffffffffe80])) [2 state.hashbitlen+0 S4 A128])
        (reg/v:SI 95 [ hashbitlen ])) blake_ref.c:251 90 {*movsi_internal}
     (nil))
(insn 123 122 124 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -380 [0xfffffffffffffe84])) [2 state.datalen+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:252 90 {*movsi_internal}
     (nil))
(insn 124 123 125 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -376 [0xfffffffffffffe88])) [2 state.init+0 S4 A64])
        (const_int 1 [0x1])) blake_ref.c:253 90 {*movsi_internal}
     (nil))
(insn 125 124 126 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -372 [0xfffffffffffffe8c])) [2 state.nullt+0 S4 A32])
        (const_int 0 [0])) blake_ref.c:254 90 {*movsi_internal}
     (nil))
(insn 126 125 127 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 95 [ hashbitlen ])
            (const_int 383 [0x17f]))) blake_ref.c:399 7 {*cmpsi_1}
     (nil))
(jump_insn 127 126 128 12 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 139)
            (pc))) blake_ref.c:399 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 139)
;;  succ:       13 [50.0%]  (FALLTHRU)
;;              15 [50.0%] 

;; basic block 13, loop depth 0, count 0, freq 60, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 [50.0%]  (FALLTHRU)
(note 128 127 129 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 97 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 130 129 131 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 149)
            (pc))) blake_ref.c:295 612 {*jcc_1}
     (int_list:REG_BR_PROB 7929 (nil))
 -> 149)
;;  succ:       17 [79.3%] 
;;              14 [20.7%]  (FALLTHRU)

;; basic block 14, loop depth 0, count 0, freq 26, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 [20.7%]  (FALLTHRU)
(note 131 130 132 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 133 14 (parallel [
            (set (reg:DI 144)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 133 132 134 14 (set (reg:DI 37 r8)
        (reg/v:DI 97 [ databitlen ])) 89 {*movdi_internal}
     (nil))
(insn 134 133 135 14 (set (reg:DI 1 dx)
        (reg/v/f:DI 96 [ data ])) 89 {*movdi_internal}
     (nil))
(insn 135 134 136 14 (set (reg:DI 2 cx)
        (reg:DI 144)) 89 {*movdi_internal}
     (nil))
(call_insn 136 135 139 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>) [0 Update32.part.0 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update32.part.0") [flags 0x3]  <function_decl 0x6ffffd85898 Update32.part.0>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       17 [100.0%]  (FALLTHRU)

;; basic block 15, loop depth 0, count 0, freq 60, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       12 [50.0%] 
(code_label 139 136 140 15 203 "" [1 uses])
(note 140 139 141 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 97 [ databitlen ])
            (const_int 0 [0]))) blake_ref.c:351 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 142 141 143 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 149)
            (pc))) blake_ref.c:351 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 149)
;;  succ:       17 [71.0%] 
;;              16 [29.0%]  (FALLTHRU)

;; basic block 16, loop depth 0, count 0, freq 34, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 [29.0%]  (FALLTHRU)
(note 143 142 144 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 16 (parallel [
            (set (reg:DI 145)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 145 144 146 16 (set (reg:DI 37 r8)
        (reg/v:DI 97 [ databitlen ])) 89 {*movdi_internal}
     (nil))
(insn 146 145 147 16 (set (reg:DI 1 dx)
        (reg/v/f:DI 96 [ data ])) 89 {*movdi_internal}
     (nil))
(insn 147 146 148 16 (set (reg:DI 2 cx)
        (reg:DI 145)) 89 {*movdi_internal}
     (nil))
(call_insn 148 147 149 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>) [0 Update64.part.1 S1 A8])
            (const_int 32 [0x20]))) 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Update64.part.1") [flags 0x3]  <function_decl 0x6ffffd84cc8 Update64.part.1>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (expr_list:DI (use (reg:DI 37 r8))
                (nil)))))
;;  succ:       17 [100.0%]  (FALLTHRU)

;; basic block 17, loop depth 0, count 0, freq 120, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       14 [100.0%]  (FALLTHRU)
;;              15 [71.0%] 
;;              16 [100.0%]  (FALLTHRU)
;;              13 [79.3%] 
(code_label 149 148 150 17 204 "" [2 uses])
(note 150 149 151 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 17 (parallel [
            (set (reg:DI 146)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) blake_ref.c:673 218 {*adddi_1}
     (nil))
(insn 152 151 153 17 (set (reg:DI 1 dx)
        (reg/v/f:DI 98 [ hashval ])) blake_ref.c:673 89 {*movdi_internal}
     (nil))
(insn 153 152 154 17 (set (reg:DI 2 cx)
        (reg:DI 146)) blake_ref.c:673 89 {*movdi_internal}
     (nil))
(call_insn 154 153 155 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>) [0 Final S1 A8])
            (const_int 32 [0x20]))) blake_ref.c:673 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("Final") [flags 0x3]  <function_decl 0x6ffffd81440 Final>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 2 cx))
        (expr_list:DI (use (reg:DI 1 dx))
            (nil))))
(insn 155 154 8 17 (set (reg/v:SI 88 [ ret ])
        (reg:SI 0 ax)) blake_ref.c:673 90 {*movsi_internal}
     (nil))
(insn 8 155 168 17 (set (reg:SI 87 [ D.6061 ])
        (reg/v:SI 88 [ ret ])) blake_ref.c:675 90 {*movsi_internal}
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)

;; basic block 18, loop depth 0, count 0, freq 103, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       7 [67.0%] 
(code_label 168 8 167 18 205 "" [1 uses])
(note 167 168 7 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 7 167 156 18 (set (reg:SI 87 [ D.6061 ])
        (const_int 2 [0x2])) blake_ref.c:249 90 {*movsi_internal}
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)

;; basic block 19, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 18, next block 1, flags: (RTL)
;;  pred:       18 [100.0%]  (FALLTHRU)
;;              17 [100.0%]  (FALLTHRU)
(code_label 156 7 157 19 200 "" [0 uses])
(note 157 156 158 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 158 157 162 19 (set (reg:SI 94 [ <retval> ])
        (reg:SI 87 [ D.6061 ])) 90 {*movsi_internal}
     (nil))
(insn 162 158 163 19 (set (reg/i:SI 0 ax)
        (reg:SI 94 [ <retval> ])) blake_ref.c:677 90 {*movsi_internal}
     (nil))
(insn 163 162 0 19 (use (reg/i:SI 0 ax)) blake_ref.c:677 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)

